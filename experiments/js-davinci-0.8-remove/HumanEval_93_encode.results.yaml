language: js
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = ['a','e','i','o','u'];\n    var newMessage = \"\";\n    var alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    for(var i = 0; i < message.length; i++){\n\
    \        if(vowels.indexOf(message[i]) !== -1){\n            var newLetter = alphabet[(alphabet.indexOf(message[i])\
    \ + 2) % 26];\n            newMessage += newLetter;\n        }\n        else{\n\
    \            if(message[i] == message[i].toUpperCase()){\n                newMessage\
    \ += message[i].toLowerCase();\n            }\n            else{\n           \
    \     newMessage += message[i].toUpperCase();\n            }\n        }\n    }\n\
    \    return newMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmph8sqvbk_.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmph8sqvbk_.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ str=\"\";\n    var alphabet=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"\
    ,\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\"\
    ,\"v\",\"w\",\"x\",\"y\",\"z\"];\n    var vowels=[\"a\",\"e\",\"i\",\"o\",\"u\"\
    ];\n    for(var i=0;i<message.length;i++){\n        if(alphabet.indexOf(message[i])!==-1){\n\
    \            var letter=message[i];\n            if(alphabet.indexOf(letter)<=19){\n\
    \                var index=alphabet.indexOf(letter)+2;\n                var newLetter=alphabet[index];\n\
    \                if(vowels.indexOf(letter)!==-1){\n                    str+=newLetter;\n\
    \                }else{\n                    str+=newLetter.toUpperCase();\n \
    \               }\n            }else{\n                var num=alphabet.indexOf(letter)-22;\n\
    \                var newLetter=alphabet[num];\n                if(vowels.indexOf(letter)!==-1){\n\
    \                    str+=newLetter;\n                }else{\n               \
    \     str+=newLetter.toUpperCase();\n                }\n            }\n      \
    \  }else{\n            str+=message[i];\n        }\n    }\n    return str;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpbjjge2_w.js:42:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbjjge2_w.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ result = '';\n    var vowels = {\n        'a': 'c',\n        'e': 'g',\n   \
    \     'i': 'k',\n        'o': 'q',\n        'u': 'y'\n    };\n    var letters\
    \ = message.split('');\n    letters.forEach(letter => {\n        if(letter ===\
    \ letter.toUpperCase()){\n            letter = letter.toLowerCase();\n       \
    \     if(vowels[letter]){\n                result += vowels[letter].toUpperCase();\n\
    \            } else {\n                result += letter.toUpperCase();\n     \
    \       }\n        } else {\n            if(vowels[letter]){\n               \
    \ result += vowels[letter];\n            } else {\n                result += letter;\n\
    \            }\n        }\n    });\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpa6_c7l17.js:41:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpa6_c7l17.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  if (typeof\
    \ message === 'string'){\n  message = message.toLowerCase();\n  var vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n  var output = '';\n  for (var i = 0; i < message.length;\
    \ i++){\n    var char = message[i];\n    if (vowels.indexOf(char) > -1){\n   \
    \   var index = vowels.indexOf(char);\n      var nextIndex = (index + 2) % vowels.length;\n\
    \      char = vowels[nextIndex];\n    }\n    if (char === char.toUpperCase()){\n\
    \      char = char.toLowerCase();\n    } else {\n      char = char.toUpperCase();\n\
    \    }\n    output += char;\n  }\n  return output;\n  } else {\n    return 'Please\
    \ enter a string';\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpagmbtrae.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpagmbtrae.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tmessage\
    \ = message.toLowerCase();\n\t// message = message.replace(/\\s/g, '');\n\t//\
    \ var alphaArr = \"abcdefghijklmnopqrstuvwxyz\".split('');\n\tvar vowelArr = ['a',\
    \ 'e', 'i', 'o', 'u'];\n\t// var answer = '';\n\tfor (var i = 0; i < message.length;\
    \ i++) {\n\t\tif (message[i] === message[i].toUpperCase()) {\n\t\t\tmessage =\
    \ message.substr(0, i) + message[i].toLowerCase() + message.substr(i + 1);\n\t\
    \t} else if (message[i] === message[i].toLowerCase()) {\n\t\t\tmessage = message.substr(0,\
    \ i) + message[i].toUpperCase() + message.substr(i + 1);\n\t\t} else if (vowelArr.indexOf(message[i])\
    \ !== -1) {\n\t\t\tvar x = vowelArr.indexOf(message[i]);\n\t\t\tmessage = message.substr(0,\
    \ i) + vowelArr[x + 2] + message.substr(i + 1);\n\t\t}\n\t}\n\treturn message;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpk2xpukby.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpk2xpukby.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tconst\
    \ vowels = {\n\t\ta: 'c',\n\t\te: 'g',\n\t\ti: 'k',\n\t\to: 'q',\n\t\tu: 'y'\n\
    \t}\n\t//loop through message\n\tlet encoded = \"\"\n\tfor(let i = 0; i < message.length;\
    \ i++){\n\t\tlet char = message[i]\n\t\tif(char === char.toUpperCase()){\n\t\t\
    \tchar = char.toLowerCase()\n\t\t\tif(vowels[char]){\n\t\t\t\tchar = vowels[char].toUpperCase()\n\
    \t\t\t}\n\t\t} else {\n\t\t\tif(vowels[char]){\n\t\t\t\tchar = vowels[char]\n\t\
    \t\t}\n\t\t}\n\t\tencoded += char\n\t}\n\treturn encoded\n}\n\nconst message =\
    \ \"Hello World\"\nconst encoded = encode(message)\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tGst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpaprheobp.js:41:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpaprheobp.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    //\
    \ your code here\n}\nvar message1 = 'that\\'s our secret code'\nvar encodedMessage1\
    \ = 'tHAt\\'S oUr SeCrEt CoDe'\nvar message2 = 'the cake is a lie'\nvar encodedMessage2\
    \ = 'tHe cAkE Is A lIe'\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpr2tcxv9u.js:20:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr2tcxv9u.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var str\
    \ = message.toLowerCase();\n  var str2 = str.split(\"\");\n  var alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n  for(var i = 0; i < str2.length; i++){\n    if(str2[i]\
    \ === alphabet[0]){\n      str2[i] = alphabet[2];\n    } else if(str2[i] === alphabet[1]){\n\
    \      str2[i] = alphabet[3];\n    } else if(str2[i] === alphabet[2]){\n     \
    \ str2[i] = alphabet[4];\n    } else if(str2[i] === alphabet[3]){\n      str2[i]\
    \ = alphabet[5];\n    } else if(str2[i] === alphabet[4]){\n      str2[i] = alphabet[6];\n\
    \    } else if(str2[i] === alphabet[5]){\n      str2[i] = alphabet[7];\n    }\
    \ else if(str2[i] === alphabet[6]){\n      str2[i] = alphabet[8];\n    } else\
    \ if(str2[i] === alphabet[7]){\n      str2[i] = alphabet[9];\n    } else if(str2[i]\
    \ === alphabet[8]){\n      str2[i] = alphabet[10];\n    } else if(str2[i] ===\
    \ alphabet[9]){\n      str2[i] = alphabet[11];\n    } else if(str2[i] === alphabet[10]){\n\
    \      str2[i] = alphabet[12];\n    } else if(str2[i] === alphabet[11]){\n   \
    \   str2[i] = alphabet[13];\n    } else if(str2[i] === alphabet[12]){\n      str2[i]\
    \ = alphabet[14];\n    } else if(str2[i] === alphabet[13]){\n      str2[i] = alphabet[15];\n\
    \    } else if(str2[i] === alphabet[14]){\n      str2[i] = alphabet[16];\n   \
    \ } else if(str2[i] === alphabet[15]){\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpz1t3l20r.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    //TODO:\
    \ Implement this function\n    var message_array = message.split(\"\")\n\n   \
    \ for (i = 0; i < message_array.length; i++) {\n        var upper = message_array[i].toUpperCase()\n\
    \        var lower = message_array[i].toLowerCase()\n        var ascii = message_array[i].charCodeAt(0)\n\
    \n        if (message_array[i] === upper) {\n            message_array[i] = lower\n\
    \        } else if (message_array[i] === lower) {\n            message_array[i]\
    \ = upper\n        }\n\n        if (ascii == 97 || ascii == 101 || ascii == 105\
    \ || ascii == 111 || ascii == 117) {\n            message_array[i] = String.fromCharCode(ascii\
    \ + 2)\n        } else if (ascii == 98 || ascii == 102 || ascii == 106 || ascii\
    \ == 110 || ascii == 116) {\n            message_array[i] = String.fromCharCode(ascii\
    \ + 1)\n        } else if (ascii == 98 || ascii == 99 || ascii == 100 || ascii\
    \ == 103 || ascii == 104 || ascii == 108 || ascii == 109 || ascii == 113 || ascii\
    \ == 114 || ascii == 115 || ascii == 121 || ascii == 122) {\n            message_array[i]\
    \ = String.fromCharCode(ascii - 25)\n        } else if (ascii == 121 || ascii\
    \ == 122) {\n            message_array[i] = String.fromCharCode(ascii - 26)\n\
    \        }\n\n    }\n    return message_array.join(\"\")\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplkupgmnd.js:41:10)\n    at\
    \ Object.<anonymous> (/tmp/tmplkupgmnd.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar vowels\
    \ = {\n\t\t'a':'c',\n\t\t'e':'g',\n\t\t'i':'k',\n\t\t'o':'q',\n\t\t'u':'y'\n\t\
    };\n\tvar code = \"\";\n\tfor(var i = 0; i < message.length; i++){\n\t\tif(vowels[message[i]]){\n\
    \t\t\tcode += vowels[message[i]];\n\t\t}\n\t\telse if(message[i] == message[i].toUpperCase()){\n\
    \t\t\tcode += message[i].toLowerCase();\n\t\t}\n\t\telse{\n\t\t\tcode += message[i].toUpperCase();\n\
    \t\t}\n\t}\n\treturn code;\n}\n\nvar message = \"This is super cool!\";\nvar codedMessage\
    \ = encode(message);\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpnvz89nqm.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpnvz89nqm.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar result\
    \ = \"\";\n\tvar alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n\tfor(var\
    \ i = 0; i < message.length; i++){\n\t\tif(message[i] == message[i].toUpperCase()){\n\
    \t\t\tresult += message[i].toLowerCase();\n\t\t} else if(message[i] == message[i].toLowerCase()){\n\
    \t\t\tresult += message[i].toUpperCase();\n\t\t}\n\t\tif(message[i] == \"a\"){\n\
    \t\t\tresult += \"c\";\n\t\t} else if(message[i] == \"e\"){\n\t\t\tresult += \"\
    g\";\n\t\t} else if(message[i] == \"i\"){\n\t\t\tresult += \"k\";\n\t\t} else\
    \ if(message[i] == \"o\"){\n\t\t\tresult += \"q\";\n\t\t} else if(message[i] ==\
    \ \"u\"){\n\t\t\tresult += \"w\";\n\t\t} else if(message[i] == \"A\"){\n\t\t\t\
    result += \"C\";\n\t\t} else if(message[i] == \"E\"){\n\t\t\tresult += \"G\";\n\
    \t\t} else if(message[i] == \"I\"){\n\t\t\tresult += \"K\";\n\t\t} else if(message[i]\
    \ == \"O\"){\n\t\t\tresult += \"Q\";\n\t\t} else if(message[i] == \"U\"){\n\t\t\
    \tresult += \"W\";\n\t\t}\n\t}\n\treturn result;\n}\nencode(\"abcd efgh\"); //\
    \ output: \"cDEF Ghij\"\nencode(\"hello\"); // output: \"jgnnq\"\nencode(\"My\
    \ name is Sam\"); // output: \"yB PHDQ lv vrf\"\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'teGst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxv7bomgd.js:48:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxv7bomgd.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'teGst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var message\
    \ = message.toLowerCase();\n  var result = '';\n  var vowels = 'aeiou';\n  for\
    \ (var i = 0; i < message.length; i++) {\n    var char = message[i];\n    var\
    \ index = vowels.indexOf(char);\n    if (index !== -1) {\n      char = vowels[(index\
    \ + 2) % vowels.length];\n    }\n    char = char.toUpperCase();\n    result +=\
    \ char;\n  }\n  return result;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp06o5_a3o.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp06o5_a3o.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n  var output = \"\"\n  var count = 0\n  for\
    \ (var i = 0; i < message.length; i++) {\n    var char = message[i]\n    if (char\
    \ == char.toUpperCase()) {\n      output += char.toLowerCase()\n    } else {\n\
    \      output += char.toUpperCase()\n    }\n    if (alphabet.indexOf(char) !==\
    \ -1){\n      count++\n      if (count % 3 === 0){\n        output += char\n \
    \     }\n    }\n  }\n  return output\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfv5nuyaw.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpfv5nuyaw.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ lowerCase = message.toLowerCase(); \n    var alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \    var x = [];\n    for(var i = 0; i < lowerCase.length; i++){\n        if(alphabet.indexOf(lowerCase[i])\
    \ < 0){\n            x.push(lowerCase[i]);\n        }\n        else{\n       \
    \     if(alphabet.indexOf(lowerCase[i]) < 23){\n                x.push(alphabet[alphabet.indexOf(lowerCase[i])\
    \ + 2]);\n            }\n            else if(alphabet.indexOf(lowerCase[i]) ==\
    \ 23){\n                x.push(alphabet[1]);\n            }\n            else\
    \ if(alphabet.indexOf(lowerCase[i]) == 24){\n                x.push(alphabet[2]);\n\
    \            }\n        }\n    }\n    return x.join('');\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'vguv'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp36lp93ud.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp36lp93ud.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'vguv',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  let consonants\
    \ = [];\n  let  vowels = [];\n  let mixed = [];\n  let newString = '';\n  // console.log(message);\n\
    \  let a = message.split('');\n  // console.log(a);\n  a.forEach(function(x){\n\
    \    let uppercase = x.toUpperCase();\n    if(uppercase === 'A' || uppercase ===\
    \ 'E' || uppercase === 'I' || uppercase === 'O' || uppercase === 'U'){\n     \
    \ vowels.push(x);\n    } else {\n      consonants.push(x);\n    }\n  });\n  //\
    \ console.log(vowels);\n  // console.log(consonants);\n  for(let i = 0; i < a.length;\
    \ i++){\n    if(a[i] === 'a' || a[i] === 'e' || a[i] === 'i' || a[i] === 'o' ||\
    \ a[i] === 'u'){\n      let nextI = i + 1;\n      // console.log(nextI);\n   \
    \   if(nextI < a.length){\n        if(a[nextI] === 'a' || a[nextI] === 'e' ||\
    \ a[nextI] === 'i' || a[nextI] === 'o' || a[nextI] === 'u'){\n          mixed.push(a[i]);\n\
    \        } else {\n          mixed.push(a[nextI]);\n        }\n      } else {\n\
    \        let firstI = 0;\n        if(a[firstI] === 'a' || a[firstI] === 'e' ||\
    \ a[firstI] === 'i' || a[firstI] === 'o' || a[firstI] === 'u'){\n          mixed.push(a[i]);\n\
    \        } else {\n          mixed.push(a[firstI]);\n        }\n      }\n    }\
    \ else {\n      let nextI = i + 1;\n      // console.log(nextI);\n      if(nextI\
    \ < a.length){\n        if(a[nextI] === 'a' || a[nextI\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp5dzlsj8j.js:48\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  // let\
    \ key = \"abcdefghijklmnopqrstuvwxyz\"\n  // let vowels = 'aeiou'\n  // let result\
    \ = \"\"\n  // for(let i = 0; i < message.length; i++){\n  //   // let index =\
    \ key.indexOf(message[i]) + 2\n  //   // if(vowels.includes(message[i])){\n  //\
    \   //   result += key[index]\n  //   // }else{\n  //   //   result += message[i]\n\
    \  //   // }\n  //   let letter = message[i]\n  //   if(letter === letter.toUpperCase()){\n\
    \  //     letter = letter.toLowerCase()\n  //   }else{\n  //     letter = letter.toUpperCase()\n\
    \  //   }\n  //   result += letter\n  // }\n  // return result\n  let newMessage\
    \ = ''\n  for(let i = 0; i < message.length; i++){\n    let char = message[i]\n\
    \    if(char === char.toUpperCase()){\n      newMessage += char.toLowerCase()\n\
    \    }else{\n      newMessage += char.toUpperCase()\n    }\n  }\n  return newMessage\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpw1rsf2c_.js:44:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpw1rsf2c_.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tvar vowelsUpper = [\"A\", \"E\", \"\
    I\", \"O\", \"U\"];\n\tvar result = \"\";\n\tfor(var i = 0; i < message.length;\
    \ i++){\n\t\tvar flag = false;\n\t\tfor(var j = 0; j < vowels.length; j++){\n\t\
    \t\tif(message[i] === vowels[j]){\n\t\t\t\tif(vowels[j] === \"u\"){\n\t\t\t\t\t\
    result += \"a\";\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tresult += vowels[j+1];\n\
    \t\t\t\t}\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\telse if(message[i] === vowelsUpper[j]){\n\
    \t\t\t\tif(vowelsUpper[j] === \"U\"){\n\t\t\t\t\tresult += \"A\";\n\t\t\t\t}\n\
    \t\t\t\telse{\n\t\t\t\t\tresult += vowelsUpper[j+1];\n\t\t\t\t}\n\t\t\t\tflag\
    \ = true;\n\t\t\t}\n\t\t}\n\t\tif(flag === false){\n\t\t\tif(message[i] === message[i].toUpperCase()){\n\
    \t\t\t\tresult += message[i].toLowerCase();\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult\
    \ += message[i].toUpperCase();\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tIst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprng_t2yv.js:50:10)\n    at\
    \ Object.<anonymous> (/tmp/tmprng_t2yv.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tIst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    //\
    \ your code here\n    let vowels = {\n        a: 'c',\n        e: 'g',\n     \
    \   i: 'k',\n        o: 'q',\n        u: 'y'\n    }\n    let splitString = message.split('');\n\
    \    let newString = [];\n    for (let i = 0; i < splitString.length; i++) {\n\
    \        if (splitString[i] === splitString[i].toUpperCase()) {\n            if\
    \ (vowels[splitString[i].toLowerCase()]) {\n                newString.push(vowels[splitString[i].toLowerCase()].toUpperCase());\n\
    \            } else {\n                newString.push(splitString[i].toLowerCase());\n\
    \            }\n        } else {\n            if (vowels[splitString[i]]) {\n\
    \                newString.push(vowels[splitString[i]]);\n            } else {\n\
    \                newString.push(splitString[i].toUpperCase());\n            }\n\
    \        }\n    }\n    return newString.join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tGst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpt3hav0b1.js:41:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpt3hav0b1.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var encodedMessage\
    \ = \"\";\n  var vowels = {\n    'a': 1,\n    'e': 1,\n    'i': 1,\n    'o': 1,\n\
    \    'u': 1\n  };\n  var nums = {\n    '1': 1,\n    '2': 1,\n    '3': 1,\n   \
    \ '4': 1,\n    '5': 1,\n    '6': 1,\n    '7': 1,\n    '8': 1,\n    '9': 1,\n \
    \   '0': 1\n  };\n  for (var i = 0; i < message.length; i++) {\n    var ascii\
    \ = message.charCodeAt(i);\n    if (ascii > 64 && ascii < 91) {\n      ascii +=\
    \ 32;\n    } else if (ascii > 96 && ascii < 123) {\n      ascii -= 32;\n    }\n\
    \    encodedMessage += String.fromCharCode(ascii);\n  }\n  return encodedMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0gsbbg7c.js:45:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0gsbbg7c.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    let\
    \ vowels = ['a', 'e', 'i', 'o', 'u']\n    let encoded = '';\n    let splitMessage\
    \ = message.split('');\n    for(let i = 0; i < splitMessage.length; i++){\n  \
    \      if(vowels.includes(splitMessage[i].toLowerCase())){\n            let index\
    \ = (vowels.indexOf(splitMessage[i].toLowerCase()) + 2) % 5;\n            if(splitMessage[i]\
    \ === splitMessage[i].toUpperCase()){\n                encoded += vowels[index].toUpperCase();\n\
    \            } else {\n                encoded += vowels[index];\n           \
    \ }\n        } else {\n            if(splitMessage[i] === splitMessage[i].toUpperCase()){\n\
    \                encoded += splitMessage[i].toLowerCase();\n            } else\
    \ {\n                encoded += splitMessage[i].toUpperCase();\n            }\n\
    \        }\n    }\n    return encoded;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplt_cbpr0.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmplt_cbpr0.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var alphaArr = alphabet.split('');\n\
    \    var msgArr = message.split('');\n    var result = [];\n    for(var i = 0;\
    \ i < msgArr.length; i++){\n        var char = msgArr[i];\n        var index =\
    \ alphaArr.indexOf(char.toLowerCase());\n        // check for vowels\n       \
    \ if(char === 'a' || char === 'e' || char === 'i' || char === 'o' || char ===\
    \ 'u'){\n            // check if upper or lower case\n            if(char ===\
    \ char.toUpperCase()){\n                // Upper case\n                result.push(alphaArr[index\
    \ + 2].toUpperCase());\n            } else {\n                // Lower case\n\
    \                result.push(alphaArr[index + 2]);\n            }\n        } else\
    \ {\n            // Not a vowel\n            if(char === char.toUpperCase()){\n\
    \                // Upper case\n                result.push(alphaArr[index].toUpperCase());\n\
    \            } else {\n                // Lower case\n                result.push(alphaArr[index]);\n\
    \            }\n        }\n    }\n    return result.join('');\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppsmbnlu4.js:44:10)\n    at\
    \ Object.<anonymous> (/tmp/tmppsmbnlu4.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var result\
    \ = \"\";\n  for(var i = 0; i < message.length; i++){\n    result += encodeChar(message[i]);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp8b7yg_kb.js:10\n    result += encodeChar(message[i]);\n    ^\n\n\
    ReferenceError: encodeChar is not defined\n    at encode (/tmp/tmp8b7yg_kb.js:10:5)\n\
    \    at test (/tmp/tmp8b7yg_kb.js:20:20)\n    at Object.<anonymous> (/tmp/tmp8b7yg_kb.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    const\
    \ letters = message.split('');\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    const alphabets = 'abcdefghijklmnopqrstuvwxyz'.split('');\n    return letters.map(function(letter){\n\
    \        if(vowels.includes(letter)){\n            const index = alphabets.indexOf(letter);\n\
    \            const ne\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpm0zpm837.js:14\n            const ne\n                  ^^\n\n\
    SyntaxError: Missing initializer in const declaration\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    let\
    \ vowels = \"aeiou\";\n    let encodedMessage = \"\";\n    let aCharCode = \"\
    a\".charCodeAt(0);\n\n    for(let i = 0; i < message.length; i++){\n        let\
    \ char = message[i];\n        let charCode = char.charCodeAt(0);\n        let\
    \ isUpperCase = char === char.toUpperCase();\n        let isLowerCase = char ===\
    \ char.toLowerCase();\n        let letterIndex = charCode - aCharCode;\n\n   \
    \     if(!isUpperCase && !isLowerCase){\n            encodedMessage += char;\n\
    \            continue;\n        }\n\n        if(isUpperCase){\n            encodedMessage\
    \ += String.fromCharCode(charCode).toLowerCase();\n        }\n        else if(isLowerCase){\n\
    \            encodedMessage += String.fromCharCode(charCode).toUpperCase();\n\
    \        }\n\n        if(vowels.includes(char.toLowerCase())){\n            let\
    \ newIndex = letterIndex + 2;\n            if(newIndex > 25){\n              \
    \  newIndex -= 26;\n            }\n            encodedMessage += String.fromCharCode(newIndex\
    \ + aCharCode);\n        }\n        else{\n            encodedMessage += char;\n\
    \        }\n    }\n\n    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tTeGsStT'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpc9trmf2d.js:51:10)\n\
    \    at Object.<anonymous> (/tmp/tmpc9trmf2d.js:58:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tTeGsStT',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = ['a','e','i','o','u'];\n    var encoded = \"\";\n    for(var i = 0;\
    \ i < message.length; i++){\n        if(message[i] === message[i].toUpperCase()){\n\
    \            encoded += message[i].toLowerCase();\n        } else if(message[i]\
    \ === message[i].toLowerCase()){\n            encoded += message[i].toUpperCase();\n\
    \        }\n        if(vowels.indexOf(encoded[i]) !== -1){\n            encoded\
    \ = encoded.substring(0, i) + vowels[(vowels.indexOf(encoded[i]) + 2) % 5] + encoded.substring(i\
    \ + 1);\n        }\n    }\n    return encoded;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp37llel1h.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp37llel1h.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n\tvar messageArray = message.split('');\n\t\
    var encodedArray = [];\n\tfor (var i = 0; i < messageArray.length; i++) {\n\t\t\
    if(messageArray[i] === messageArray[i].toUpperCase()){\n\t\t\tencodedArray.push(messageArray[i].toLowerCase());\n\
    \t\t} else {\n\t\t\tencodedArray.push(messageArray[i].toUpperCase());\n\t\t}\n\
    \t\tfor (var j = 0; j < alphabet.length; j++) {\n\t\t\tif(messageArray[i] ===\
    \ alphabet[j]){\n\t\t\t\tencodedArray[i] = alphabet[j+2];\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn encodedArray.join('');\n}\n\nencode('hello'); //'llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpr8uqm1m5.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpr8uqm1m5.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ messageUpper = message.toUpperCase();\n    var messageLower = message.toLowerCase();\n\
    \    var vowels = \"aeiou\";\n    var alpha = \"abcdefghijklmnopqrstuvwxyz\";\n\
    \    var result = \"\";\n    for(var i = 0; i < message.length; i++){\n      \
    \  var index = vowels.indexOf(message[i]);\n        if(index !== -1){\n      \
    \      result += alpha[index + 2];\n        }\n        else if(messageUpper[i]\
    \ === message[i]){\n            result += messageLower[i];\n        }\n      \
    \  else{\n            result += messageUpper[i];\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp11zhfsjd.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp11zhfsjd.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var message\
    \ = message.toLowerCase();\n  var vowels = 'aeiou';\n  var encoded = '';\n  for\
    \ (var i = 0; i < message.length; i++) {\n    var x = vowels.indexOf(message[i]);\n\
    \    if (x >= 0) {\n      x = (x + 2) % 5;\n      encoded += vowels[x];\n    }\
    \ else {\n      encoded += message[i];\n    }\n  }\n  return encoded;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpeuhws8ns.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpeuhws8ns.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    //check\
    \ for empty strings\n    if(message.length === 0) return message;\n    var input\
    \ = message.split(''); //split message into an array\n    //create a lookup table\
    \ of vowels\n    var lookUp = {\n        a:0,\n        e:0,\n        i:0,\n  \
    \      o:0,\n        u:0\n    };\n    var output = input.map(function(ele){\n\
    \        //if the element is a vowel, swap the case and use lookup table\n   \
    \     if(ele.toLowerCase() in lookUp){\n            return lookup(ele);\n    \
    \    }else{\n            //if the element is not a vowel, swap the case\n    \
    \        return swapCase(ele);\n        }\n    });\n    return output.join('');\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp47hmllba.js:25\n            return swapCase(ele);\n           \
    \ ^\n\nReferenceError: swapCase is not defined\n    at /tmp/tmp47hmllba.js:25:13\n\
    \    at Array.map (<anonymous>)\n    at encode (/tmp/tmp47hmllba.js:19:24)\n \
    \   at test (/tmp/tmp47hmllba.js:35:20)\n    at Object.<anonymous> (/tmp/tmp47hmllba.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = ['a','e','i','o','u']\n    var alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    var newMessage = '';\n    for(var i = 0; i < message.length; i++){\n    \
    \    var char = message[i];\n        var index = alphabet.indexOf(char);\n   \
    \     if(char.toUpperCase() == char){\n            if(vowels.indexOf(char.toLowerCase())\
    \ !== -1){\n                var modIndex = index + 2;\n                if(modIndex\
    \ > 25){\n                    modIndex = modIndex - 26;\n                }\n \
    \               newMessage += alphabet[modIndex].toUpperCase();\n            }else{\n\
    \                newMessage += alphabet[index].toLowerCase();\n            }\n\
    \        }else{\n            if(vowels.indexOf(char) !== -1){\n              \
    \  var modIndex = index + 2;\n                if(modIndex > 25){\n           \
    \         modIndex = modIndex - 26;\n                }\n                newMessage\
    \ += alphabet[modIndex];\n            }else{\n                newMessage += alphabet[index].toUpperCase();\n\
    \            }\n        }\n    }\n    return newMessage;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_5dvjy50.js:22\n                newMessage += alphabet[index].toLowerCase();\n\
    \                                              ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'toLowerCase')\n    at encode (/tmp/tmp_5dvjy50.js:22:47)\n\
    \    at test (/tmp/tmp_5dvjy50.js:44:20)\n    at Object.<anonymous> (/tmp/tmp_5dvjy50.js:51:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar vowels\
    \ = ['a','e','i','o','u'];\n\tvar newMessage = '';\n\tfor(var i = 0; i < message.length;\
    \ i++){\n\t\tvar lower = message[i].toLowerCase();\n\t\tif(vowels.indexOf(lower)\
    \ != -1){\n\t\t\tvar position = vowels.indexOf(lower);\n\t\t\tif(position == 4){\n\
    \t\t\t\tnewMessage += vowels[0];\n\t\t\t}else{\n\t\t\t\tnewMessage += vowels[position\
    \ + 2];\n\t\t\t}\n\t\t}else{\n\t\t\tif(message[i] === message[i].toUpperCase()){\n\
    \t\t\t\tnewMessage += message[i].toLowerCase();\n\t\t\t}else{\n\t\t\t\tnewMessage\
    \ += message[i].toUpperCase();\n\t\t\t}\n\t\t}\n\t}\n\treturn newMessage;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqrw851g7.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqrw851g7.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var result=\"\
    \";\n  for(var i=0;i<message.length;i++){\n    var charCode=message.charCodeAt(i);\n\
    \    if(charCode>=65 && charCode<=90){\n      result+=String.fromCharCode(charCode+32);\n\
    \    }else if(charCode>=97 && charCode<=122){\n      result+=String.fromCharCode(charCode-32);\n\
    \    }else{\n      result+=message[i];\n    }\n  }\n  for(var i=0;i<result.length;i++){\n\
    \    if(result[i]==\"a\"){\n      result=result.substring(0,i)+\"c\"+result.substring(i+1);\n\
    \    }else if(result[i]==\"e\"){\n      result=result.substring(0,i)+\"g\"+result.substring(i+1);\n\
    \    }else if(result[i]==\"i\"){\n      result=result.substring(0,i)+\"k\"+result.substring(i+1);\n\
    \    }else if(result[i]==\"o\"){\n      result=result.substring(0,i)+\"q\"+result.substring(i+1);\n\
    \    }else if(result[i]==\"u\"){\n      result=result.substring(0,i)+\"y\"+result.substring(i+1);\n\
    \    }\n  }\n  return result;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmphcjq1iip.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmphcjq1iip.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ message = message.toLowerCase();\n    var result = \"\";\n    for(var i = 0;\
    \ i < message.length; i++){\n        var currentChar = message[i];\n        if(isVowel(currentChar)){\n\
    \            currentChar = getNextVowel(currentChar);\n        }\n        result\
    \ += currentChar;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpxj5ltyuw.js:12\n        if(isVowel(currentChar)){\n        ^\n\n\
    ReferenceError: isVowel is not defined\n    at encode (/tmp/tmpxj5ltyuw.js:12:9)\n\
    \    at test (/tmp/tmpxj5ltyuw.js:24:20)\n    at Object.<anonymous> (/tmp/tmpxj5ltyuw.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var newArray\
    \ = message.split(\"\");\n  var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \ var newAlpha = alphabet.split(\"\");\n  var vowels = \"aeiou\";\n  var newVowels\
    \ = vowels.split(\"\");\n  var finalMessage = \"\";\n  for(var i = 0; i < newArray.length;\
    \ i++){\n    for(var j = 0; j < newAlpha.length; j++){\n      if(newArray[i] ===\
    \ newAlpha[j]){\n        newArray[i] = newAlpha[j + 2];\n      }\n    }\n    for(var\
    \ k = 0; k < newVowels.length; k++){\n      if(newArray[i] === newVowels[k]){\n\
    \        newArray[i] = newVowels[k+2];\n      }\n    }\n    finalMessage += newArray[i];\n\
    \  }\n  return finalMessage;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp32tc9k4a.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp32tc9k4a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  // your\
    \ code goes here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpce80giy2.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpce80giy2.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n\tvar answer = \"\";\n\tfor(var i = 0; i\
    \ < message.length; i++){\n\t\tvar currentLetter = message[i];\n\t\tvar upper\
    \ = currentLetter.toUpperCase() === currentLetter;\n\t\tvar index = alphabet.indexOf(currentLetter.toLowerCase());\n\
    \t\tvar newIndex = (index + 2) % alphabet.length;\n\t\tvar newLetter = alphabet[newIndex];\n\
    \t\tif(upper){\n\t\t\tnewLetter = newLetter.toUpperCase();\n\t\t}\n\t\tanswer\
    \ += newLetter;\n\t}\n\treturn answer;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpv4g_2pgr.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpv4g_2pgr.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    let\
    \ vowels = 'aeiou'\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    let e\
    \ = ''\n    let result = ''\n    for(let letter of message){\n        if(letter\
    \ === letter.toUpperCase()){\n            e += letter.toLowerCase()\n        }\
    \ else {\n            e += letter.toUpperCase()\n        }\n    }\n    for(let\
    \ i = 0; i < e.length; i++){\n        if(vowels.includes(e[i])){\n           \
    \ let newIndex = alphabet.indexOf(e[i]) + 2\n            if(newIndex > 25){\n\
    \                newIndex -= 26\n            }\n            result += alphabet[newIndex]\n\
    \        } else {\n            result += e[i]\n        }\n    }\n    return result\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmphyj981ur.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmphyj981ur.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = ['a','e','i','o','u'];\n    var message = message.toLowerCase();\n\
    \    var messageArr = message.split('');\n    for(var i = 0; i < messageArr.length;\
    \ i++){\n        if(vowels.indexOf(messageArr[i]) != -1){\n            var currVowelIdx\
    \ = vowels.indexOf(messageArr[i]);\n            messageArr[i] = vowels[currVowelIdx\
    \ + 2];\n        } else {\n            messageArr[i] = messageArr[i].toUpperCase();\n\
    \        }\n    }\n    return messageArr.join('');\n}\n\nvar message = \"Life\
    \ is like a box of chocolates, Forrest. You never know what you're gonna get.\"\
    ;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpf00xdota.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpf00xdota.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var vowels = \"aeiou\";\n    var\
    \ result = \"\";\n    for(var i = 0; i < message.length; i++){\n        var letter\
    \ = message[i];\n        var index = alphabet.indexOf(letter);\n        if(index\
    \ >= 0){\n            var newIndex = (index + 2) % 26;\n            if(letter\
    \ === letter.toUpperCase()){\n                result += alphabet[newIndex].toUpperCase();\n\
    \            } else {\n                if(vowels.indexOf(letter) >= 0){\n    \
    \                result += alphabet[newIndex];\n                } else {\n   \
    \                 result += letter;\n                }\n            }\n      \
    \  } else {\n            result += letter;\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppj96cy3i.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmppj96cy3i.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    let\
    \ vowels = ['a', 'e', 'i', 'o', 'u'];\n    let result = '';\n    let alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n    for(let i = 0; i < message.length; i++){\n\
    \        let character = message[i];\n        let index = alphabet.indexOf(character);\n\
    \        if(index === -1){\n            result += character;\n        }\n    \
    \    else if(vowels.includes(character)){\n            let newIndex = (index +\
    \ 2) % 26;\n            result += alphabet[newIndex];\n        }\n        else{\n\
    \            let capLetter = character.toUpperCase();\n            let newIndex\
    \ = (index + 2) % 26;\n            result += alphabet[newIndex].toUpperCase();\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3_1q3b9q.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp3_1q3b9q.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  var message = message.toLowerCase();\n\
    \  var new_message = \"\";\n  for (var i = 0; i < message.length; i++) {\n   \
    \ var char = message[i];\n    var location = vowels.indexOf(char);\n    if (location\
    \ === -1) {\n      new_message += char;\n    }\n    else {\n      new_message\
    \ += vowels[(location + 2) % 5];\n    }\n  }\n  return new_message;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpamwcfny3.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpamwcfny3.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    //\
    \ create variable for alphabet\n    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \    // variable to store encoded message\n    var encodedMessage = '';\n    //\
    \ loop through each letter in the message\n    for(var i = 0; i < message.length;\
    \ i++){\n        // set variable letter equal to current letter in the message\n\
    \        var letter = message[i];\n        // determine index of current letter\
    \ in the alphabet\n        var index = alphabet.indexOf(letter.toLowerCase());\n\
    \        // if the current letter is a vowel\n        if('aeiou'.indexOf(letter.toLowerCase())\
    \ !== -1){\n            // set new index equal to the index of current letter\
    \ + 2\n            // modulo alphabet.length to avoid out of bounds\n        \
    \    index = (index + 2) % alphabet.length;\n        }\n        // determine if\
    \ the letter was capitalized\n        var isUpperCase = (letter === letter.toUpperCase());\n\
    \        // if it was, capitalize the current letter\n        letter = isUpperCase\
    \ ? alphabet[index].toUpperCase() : alphabet[index];\n        // add letter to\
    \ encoded message\n        encodedMessage += letter;\n    }\n    // return encoded\
    \ message\n    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp39jha7rc.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp39jha7rc.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ encoded = \"\";\n    for(var i = 0; i < message.length; i++){\n        var char\
    \ = message[i];\n        if(isVowel(char)){\n            var newchar = nextVowel(char);\n\
    \            encoded += newchar;\n        } else {\n            if(char == char.toUpperCase()){\n\
    \                encoded += char.toLowerCase();\n            } else {\n      \
    \          encoded += char.toUpperCase();\n            }\n        }\n    }\n \
    \   return encoded;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplnmn8bxt.js:11\n        if(isVowel(char)){\n        ^\n\nReferenceError:\
    \ isVowel is not defined\n    at encode (/tmp/tmplnmn8bxt.js:11:9)\n    at test\
    \ (/tmp/tmplnmn8bxt.js:30:20)\n    at Object.<anonymous> (/tmp/tmplnmn8bxt.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ array = message.split(\"\");\n    var newArray = []\n    array.forEach(function(letter){\n\
    \        if(letter === \"a\"){\n            letter = \"c\";\n        }else if(letter\
    \ === \"A\"){\n            letter = \"C\";\n        }else if(letter === \"e\"\
    ){\n            letter = \"g\";\n        }else if(letter === \"E\"){\n       \
    \     letter = \"G\";\n        }else if(letter === \"i\"){\n            letter\
    \ = \"k\";\n        }else if(letter === \"I\"){\n            letter = \"K\";\n\
    \        }else if(letter === \"o\"){\n            letter = \"q\";\n        }else\
    \ if(letter === \"O\"){\n            letter = \"Q\";\n        }else if(letter\
    \ === \"u\"){\n            letter = \"y\";\n        }else if(letter === \"U\"\
    ){\n            letter = \"Y\";\n        }else if(letter === letter.toUpperCase()){\n\
    \            letter = letter.toLowerCase();\n        }else if(letter === letter.toLowerCase()){\n\
    \            letter = letter.toUpperCase();\n        }\n        newArray.push(letter);\n\
    \    })\n    return newArray.join(\"\");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tGst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpp3m243q9.js:46:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpp3m243q9.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar alphabet=\"\
    abcdefghijklmnopqrstuvwxyz\";\n\tvar alphabet1=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n\tvar vowels=\"aeiou\";\n\tvar code=\"\";\n\tfor(var i=0;i<message.length;i++){\n\
    \t\tvar index=alphabet.indexOf(message[i]);\n\t\tvar index1=alphabet1.indexOf(message[i]);\n\
    \t\tvar vIndex=vowels.indexOf(message[i]);\n\t\tif(index>=0){\n\t\t\tif(vIndex>=0){\n\
    \t\t\t\tcode+=alphabet[(index+2)%26];\n\t\t\t}else{\n\t\t\t\tcode+=alphabet[(index+26-2)%26];\n\
    \t\t\t}\n\t\t}else if(index1>=0){\n\t\t\tif(vIndex>=0){\n\t\t\t\tcode+=alphabet1[(index1+2)%26];\n\
    \t\t\t}else{\n\t\t\t\tcode+=alphabet1[(index1+26-2)%26];\n\t\t\t}\n\t\t}else{\n\
    \t\t\tcode+=message[i];\n\t\t}\n\t}\n\treturn code;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'RCQR'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp53ja_al_.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp53ja_al_.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'RCQR',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar encode\
    \ = '';\n\tfor(var i = 0; i < message.length; i++){\n\t\tif(message[i] == 'a'){\n\
    \t\t\tencode += 'c';\n\t\t}\n\t\telse if(message[i] == 'A'){\n\t\t\tencode +=\
    \ 'C';\n\t\t}\n\t\telse if(message[i] == 'e'){\n\t\t\tencode += 'g';\n\t\t}\n\t\
    \telse if(message[i] == 'E'){\n\t\t\tencode += 'G';\n\t\t}\n\t\telse if(message[i]\
    \ == 'i'){\n\t\t\tencode += 'k';\n\t\t}\n\t\telse if(message[i] == 'I'){\n\t\t\
    \tencode += 'K';\n\t\t}\n\t\telse if(message[i] == 'o'){\n\t\t\tencode += 'q';\n\
    \t\t}\n\t\telse if(message[i] == 'O'){\n\t\t\tencode += 'Q';\n\t\t}\n\t\telse\
    \ if(message[i] == 'u'){\n\t\t\tencode += 'y';\n\t\t}\n\t\telse if(message[i]\
    \ == 'U'){\n\t\t\tencode += 'Y';\n\t\t}\n\t\telse if(message[i] == message[i].toUpperCase()){\n\
    \t\t\tencode += message[i].toLowerCase();\n\t\t}\n\t\telse{\n\t\t\tencode += message[i].toUpperCase();\n\
    \t\t}\n\t}\n\treturn encode;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tGst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp67amcy0m.js:54:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp67amcy0m.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976842
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar result\
    \ = '';\n\tvar alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\tfor (var i = 0; i\
    \ < message.length; i++) {\n\t\tif(message[i] === message[i].toUpperCase()){\n\
    \t\t\tresult += message[i].toLowerCase();\n\t\t}\n\t\telse if(message[i] === message[i].toLowerCase()){\n\
    \t\t\tresult += message[i].toUpperCase();\n\t\t}\n\t\tif(message[i] === 'a'){\n\
    \t\t\tresult += 'c';\n\t\t}\n\t\telse if(message[i] === 'e'){\n\t\t\tresult +=\
    \ 'g';\n\t\t}\n\t\telse if(message[i] === 'i'){\n\t\t\tresult += 'k';\n\t\t}\n\
    \t\telse if(message[i] === 'o'){\n\t\t\tresult += 'q';\n\t\t}\n\t\telse if(message[i]\
    \ === 'u'){\n\t\t\tresult += 'y';\n\t\t}\n\t\telse if(message[i] === ' '){\n\t\
    \t\tresult += ' ';\n\t\t}\n\t\telse{\n\t\t\tresult += message[i];\n\t\t}\n\t}\n\
    \treturn result;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tTeEsStT'\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptvgleire.js:46:10)\n\
    \    at Object.<anonymous> (/tmp/tmptvgleire.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tTeEsStT',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  var newMessage = \"\";\n  for (var\
    \ i = 0; i < message.length; i++) {\n    var currLetter = message[i];\n    if\
    \ (currLetter == currLetter.toUpperCase()) {\n      newMessage += currLetter.toLowerCase();\n\
    \    } else {\n      newMessage += currLetter.toUpperCase();\n    }\n    for (var\
    \ j = 0; j < vowels.length; j++) {\n      if (currLetter == vowels[j]) {\n   \
    \     var replacement = vowels[(j + 2) % vowels.length];\n        newMessage =\
    \ newMessage.slice(0, newMessage.length - 1) + replacement;\n      }\n    }\n\
    \  }\n  return newMessage;\n}\n\n\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2l58jxx2.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp2l58jxx2.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \    var vowels = ['a','e','i','o','u'];\n    var newMessage = '';\n    for(var\
    \ i = 0; i < message.length; i++){\n        if(message[i] === message[i].toUpperCase()){\n\
    \            newMessage += message[i].toLowerCase();\n        }else{\n       \
    \     newMessage += message[i].toUpperCase();\n        }\n    }\n    for(var i\
    \ = 0; i < newMessage.length; i++){\n        for(var j = 0; j < vowels.length;\
    \ j++){\n            if(newMessage[i] === vowels[j]){\n                newMessage\
    \ = newMessage.substring(0,i) + alphabet[alphabet.indexOf(vowels[j]) + 2] + newMessage.substring(i\
    \ + 1);\n            }\n        }\n    }\n    return newMessage;\n}\n\nencode('abc')\
    \ // 'CDE'\nencode('Abc is the first letter of the alphabet') // 'cDE is the third\
    \ letter of the alphabet'\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp08v7n0pn.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmp08v7n0pn.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    //create\
    \ a variable that stores and array of vowels to compare\n    var vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    //create a variable that stores an array\
    \ of the alphabet\n    var alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    //create\
    \ a variable that stores an empty string that we will add our output to\n    var\
    \ output = \"\";\n    //create a for loop that loops through our message and manipulates\
    \ the letters based on if they are lowercase, uppercase, or vowels\n    for(var\
    \ i = 0; i < message.length; i++){\n        //create a variable that stores the\
    \ current letter\n        var letter = message[i];\n        //create a variable\
    \ that stores the index of the current letter\n        var index = alphabet.indexOf(letter);\n\
    \        //create a variable that stores the current letter in uppercase\n   \
    \     var upper = message[i].toUpperCase();\n        //create a variable that\
    \ stores the index of the current letter in uppercase\n        var upperIndex\
    \ = alphabet.indexOf(upper);\n        //create a variable that stores the new\
    \ letter we want to append to the output if it is a vowel\n        var newLetter\
    \ = alphabet[index + 2];\n        //create a variable that stores the new letter\
    \ we want to append to the output if it is a vowel and uppercase\n        var\
    \ newUpper = alphabet[upperIndex + 2].toUpperCase();\n        //create an if statement\
    \ that manipulates and adds to our output variable based on if the letter is uppercase,\
    \ lowercase, or a vowel\n        if(vowels.indexOf(letter) !== -1){\n        \
    \    output += newLetter;\n        } else if(vowels.indexOf(upper) !== -1){\n\
    \            output += newUpper;\n        } else if(letter === letter.toUpperCase()){\n\
    \            output += letter.toLowerCase();\n        } else {\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4q3z_jbo.js:48\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var output\
    \ = \"\";\n  var vowels = \"aeiou\";\n  var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  for (var i = 0; i < message.length; i++) {\n    if (vowels.indexOf(message[i])\
    \ === -1) {\n      if (message[i] === message[i].toUpperCase()) {\n        output\
    \ += message[i].toLowerCase();\n      } else {\n        output += message[i].toUpperCase();\n\
    \      }\n    } else {\n      output += alphabet[(alphabet.indexOf(message[i])\
    \ + 2) % 26];\n    }\n  }\n  return output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_ddb_ztb.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_ddb_ztb.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var vowels\
    \ = 'aeiou';\n  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  var encode = '';\n\
    \  var index;\n  for(var i = 0; i < message.length; i++){\n    if(message[i] ===\
    \ message[i].toUpperCase()){\n      message = message.replace(message[i], message[i].toLowerCase());\n\
    \    }\n    index = alphabet.indexOf(message[i]);\n    if(vowels.indexOf(message[i])\
    \ > -1){\n      index += 3;\n      if(index >= alphabet.length){\n        index\
    \ -= alphabet.length;\n      }\n    }\n    encode += alphabet[index];\n  }\n \
    \ return encode;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'thst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpeekb0y09.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpeekb0y09.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'thst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    let\
    \ result = \"\";\n    for(let i = 0; i < message.length; i++){\n        let current\
    \ = message[i];\n        let isLower = current == current.toLowerCase();\n   \
    \     let isUpper = current == current.toUpperCase();\n        if(isLower){\n\
    \            current = current.toUpperCase();\n        } else if(isUpper){\n \
    \           current = current.toLowerCase();\n        }\n        let isVowel =\
    \ current == \"A\" || current == \"E\" || current == \"I\" || current == \"O\"\
    \ || current == \"U\";\n        if(isVowel){\n            if(current == \"U\"\
    ){\n                current = \"A\";\n            } else if(current == \"Z\"){\n\
    \                current = \"B\";\n            } else {\n                current\
    \ = String.fromCharCode(current.charCodeAt(0) + 2);\n            }\n        }\n\
    \        result += current;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8n7iv4u5.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8n7iv4u5.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    let\
    \ counter = 0;\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let\
    \ temp = message;\n    let temp2 = [];\n    let split = message.split(\"\");\n\
    \    for(let i = 0; i < split.length; i++){\n        if(vowels.includes(split[i])){\n\
    \            if(vowels.indexOf(split[i]) < 4){\n                temp2.push(vowels[vowels.indexOf(split[i])\
    \ + 2]);\n            }else{\n                temp2.push(vowels[vowels.indexOf(split[i])\
    \ - 3]);\n            }\n        }else{\n            temp2.push(split[i]);\n \
    \       }\n    }\n    temp = temp2.join(\"\");\n    split = temp.split(\"\");\n\
    \    temp2 = [];\n    for(let i = 0; i < split.length; i++){\n        if(split[i]\
    \ == split[i].toUpperCase()){\n            temp2.push(split[i].toLowerCase());\n\
    \        }else{\n            temp2.push(split[i].toUpperCase());\n        }\n\
    \    }\n    temp = temp2.join(\"\");\n    return temp;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp54pjnnpq.js:43:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp54pjnnpq.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar vowels\
    \ = {\n\t\t'a': 'c',\n\t\t'e': 'g',\n\t\t'i': 'k',\n\t\t'o': 'q',\n\t\t'u': 'y'\n\
    \t};\n\tvar alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\tmessage = message.toLowerCase();\n\
    \tvar encoded = '';\n\tfor (var i = 0; i < message.length; i++) {\n\t\tvar char\
    \ = message[i];\n\t\tif (vowels[char]) {\n\t\t\tencoded += vowels[char];\n\t\t\
    } else if (alphabet.indexOf(char) !== -1) {\n\t\t\tvar index = alphabet.indexOf(char);\n\
    \t\t\tvar newIndex = index + 2;\n\t\t\tif (newIndex > 25) {\n\t\t\t\tnewIndex\
    \ -= 26;\n\t\t\t}\n\t\t\tencoded += alphabet[newIndex];\n\t\t} else {\n\t\t\t\
    encoded += char;\n\t\t}\n\t}\n\treturn encoded;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'vguv'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp2zukyspi.js:41:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp2zukyspi.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'vguv',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar result\
    \ = [];\n\tvar alph = \"abcdefghijklmnopqrstuvwxyz\";\n\tvar vowels = \"aeiou\"\
    ;\n\tfor(var i = 0; i < message.length; i++){\n\t\tif(alph.indexOf(message[i])\
    \ != -1){\n\t\t\tif(alph.indexOf(message[i]) < 25){\n\t\t\t\tif(vowels.indexOf(message[i])\
    \ != -1){\n\t\t\t\t\tresult.push(vowels[(vowels.indexOf(message[i]) + 2) % 5]);\n\
    \t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tresult.push(alph[alph.indexOf(message[i])\
    \ + 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(vowels.indexOf(message[i])\
    \ != -1){\n\t\t\t\t\tresult.push(vowels[(vowels.indexOf(message[i]) + 2) % 5]);\n\
    \t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tresult.push(alph[alph.indexOf(message[i])\
    \ - 25]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tresult.push(message[i]);\n\
    \t\t}\n\t}\n\treturn result.join(\"\");\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7sxnksno.js:41:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7sxnksno.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar messageList\
    \ = message.split(\"\");\n\tfor (var i = 0; i < messageList.length; i++) {\n\t\
    \tif (messageList[i] == \"a\") {\n\t\t\tmessageList[i] = \"c\";\n\t\t}\n\t\telse\
    \ if (messageList[i] == \"e\") {\n\t\t\tmessageList[i] = \"g\";\n\t\t}\n\t\telse\
    \ if (messageList[i] == \"i\") {\n\t\t\tmessageList[i] = \"k\";\n\t\t}\n\t\telse\
    \ if (messageList[i] == \"o\") {\n\t\t\tmessageList[i] = \"q\";\n\t\t}\n\t\telse\
    \ if (messageList[i] == \"u\") {\n\t\t\tmessageList[i] = \"w\";\n\t\t}\n\t\telse\
    \ if (messageList[i] == \"y\") {\n\t\t\tmessageList[i] = \"a\";\n\t\t}\n\t\telse\
    \ if (messageList[i] == \"A\") {\n\t\t\tmessageList[i] = \"C\";\n\t\t}\n\t\telse\
    \ if (messageList[i] == \"E\") {\n\t\t\tmessageList[i] = \"G\";\n\t\t}\n\t\telse\
    \ if (messageList[i] == \"I\") {\n\t\t\tmessageList[i] = \"K\";\n\t\t}\n\t\telse\
    \ if (messageList[i] == \"O\") {\n\t\t\tmessageList[i] = \"Q\";\n\t\t}\n\t\telse\
    \ if (messageList[i] == \"U\") {\n\t\t\tmessageList[i] = \"W\";\n\t\t}\n\t\telse\
    \ if (messageList[i] == \"Y\") {\n\t\t\tmessageList[i] = \"A\";\n\t\t}\n\t\telse\
    \ if (messageList[i] == \"!\") {\n\t\t\tmessageList[i] = \"!\";\n\t\t}\n\t\telse\
    \ if (messageList[i] == \"?\") {\n\t\t\tmessageList[i] = \"?\";\n\t\t}\n\t\telse\
    \ if (messageList[i] == \".\") {\n\t\t\tmessageList\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpldxa2xcu.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ str = message.toLowerCase().split('');\n    var vowels = 'aeiou';\n    var result\
    \ = [];\n    \n    for(var i = 0; i < str.length; i++){\n      var char = str[i];\n\
    \      var indexOfChar = vowels.indexOf(char);\n      if(indexOfChar !== -1){\n\
    \        var newIndex = indexOfChar + 2;\n        if(newIndex >= vowels.length){\n\
    \          newIndex = newIndex - vowels.length;\n        }\n        result.push(vowels[newIndex]);\n\
    \      }else{\n        result.push(char.toUpperCase());\n      }\n    }\n    return\
    \ result.join('');\n  }\n  \n  console.log(encode('heLlo'));\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcv1_e8bg.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpcv1_e8bg.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'HoLLa

    '
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var lowerCase\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n  var upperCase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n  var vowel = \"aeiou\"\n  var newMessage = \"\"\n  for(var i = 0; i < message.length;\
    \ i++){\n    var character = message[i]\n    var letter = lowerCase.indexOf(character)\n\
    \    var letter2 = upperCase.indexOf(character)\n    var vowelCheck = vowel.indexOf(character)\n\
    \    if(letter2 !== -1){\n      newMessage += upperCase[letter2 - 2]\n    }\n\
    \    else if(letter !== -1){\n      newMessage += lowerCase[letter - 2]\n    }\n\
    \    else if(vowelCheck !== -1){\n      newMessage += vowel[vowelCheck + 2]\n\
    \    }\n    else{\n      newMessage += character\n    }\n  }\n  return newMessage\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'RCQR'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp6x_5jgks.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6x_5jgks.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'RCQR',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar encoded\
    \ = \"\";\n\tvar vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tvar alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n\tfor(var i = 0; i < message.length; i++){\n\
    \t\tif(message[i] === message[i].toUpperCase()){\n\t\t\tencoded += message[i].toLowerCase();\n\
    \t\t} else {\n\t\t\tencoded += message[i].toUpperCase();\n\t\t}\n\t\tif(vowels.indexOf(encoded[i])\
    \ !== -1){\n\t\t\tvar index = alphabet.indexOf(encoded[i]);\n\t\t\tencoded = encoded.slice(0,\
    \ i) + alphabet[index + 2] + encoded.slice(i + 1);\n\t\t}\n\t}\n\treturn encoded;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpub6joddy.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpub6joddy.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var lowerCase\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n  var upperCase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \  var output = '';\n  for (var i = 0; i < message.length; i++) {\n    var char\
    \ = message[i];\n    var lowerCharIndex = lowerCase.indexOf(char);\n    var upperCharIndex\
    \ = upperCase.indexOf(char);\n    if (lowerCharIndex !== -1){\n      output +=\
    \ lowerCase[(lowerCharIndex + 2) % 26];\n    } else if (upperCharIndex !== -1){\n\
    \      output += upperCase[(upperCharIndex + 2) % 26];\n    } else {\n      output\
    \ += char;\n    }\n  }\n  return output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpesyu2e2z.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpesyu2e2z.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    let\
    \ mess = message.split(\"\");\n    let vowels = \"aeiouAEIOU\".split(\"\");\n\
    \    let count = 0;\n    while(count < mess.length){\n        if(vowels.includes(mess[count])){\n\
    \            let letter = vowels.indexOf(mess[count]);\n            mess[count]\
    \ = vowels[letter + 2];\n        }\n        count++;\n    }\n    return mess.join(\"\
    \");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpn7ziyczv.js:25:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn7ziyczv.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n  var result = '';\n  var vowels = 'aeiou';\n\
    \  for (var i = 0; i < message.length; i++) {\n    if (vowels.indexOf(message[i])\
    \ >= 0) {\n      result += alphabet[(alphabet.indexOf(message[i]) + 2) % 26];\n\
    \    } else if (message[i] === message[i].toUpperCase()) {\n      result += alphabet[(alphabet.indexOf(message[i].toLowerCase())\
    \ + 2) % 26].toUpperCase();\n    } else {\n      result += message[i];\n    }\n\
    \  }\n  return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfpvhnff_.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpfpvhnff_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  var result = \"\";\n  for (var i =\
    \ 0; i < message.length; i++) {\n    if (message[i] == message[i].toUpperCase())\
    \ {\n      if (vowels.indexOf(message[i].toLowerCase()) !== -1) {\n        result\
    \ += vowels[(vowels.indexOf(message[i].toLowerCase()) + 2) % 5].toUpperCase();\n\
    \      } else {\n        result += message[i].toLowerCase();\n      }\n    } else\
    \ {\n      if (vowels.indexOf(message[i]) !== -1) {\n        result += vowels[(vowels.indexOf(message[i])\
    \ + 2) % 5];\n      } else {\n        result += message[i].toUpperCase();\n  \
    \    }\n    }\n  }\n  return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpg73xz_z7.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpg73xz_z7.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar vowels\
    \ = \"aeiouAEIOU\";\n\tvar encoded = \"\";\n\tfor(var i = 0; i < message.length;\
    \ i++){\n\t\tvar letter = message[i];\n\t\tif(vowels.indexOf(letter) != -1){\n\
    \t\t\tvar temp = String.fromCharCode(letter.charCodeAt(0) + 2);\n\t\t\tif(vowels.indexOf(temp)\
    \ != -1){\n\t\t\t\tencoded += String.fromCharCode(temp.charCodeAt(0) + 1);\n\t\
    \t\t} else {\n\t\t\t\tencoded += temp;\n\t\t\t}\n\t\t} else {\n\t\t\tencoded +=\
    \ letter;\n\t\t}\n\t}\n\treturn encoded;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpgsow_06_.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgsow_06_.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var encoded = \"\";\n   \
    \ var beforeVowel = vowels[0];\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    var afterVowel = vowels[1];\n    for(var i = 0; i < message.length; i++){\n\
    \        if(vowels.indexOf(message[i]) != -1){\n            var index = vowels.indexOf(message[i]);\n\
    \            afterVowel = vowels[index + 2];\n            if(index == 4){\n  \
    \              afterVowel = vowels[0];\n            }\n            if(index ==\
    \ 4 || index == 3){\n                afterVowel = vowels[0];\n            }\n\
    \            encoded += afterVowel;\n        }\n        else if(alphabet.indexOf(message[i])\
    \ != -1){\n            if(message[i] == alphabet[25]){\n                encoded\
    \ += alphabet[0];\n            }\n            else{\n                encoded +=\
    \ alphabet[alphabet.indexOf(message[i]) + 1];\n            }\n        }\n    \
    \    else{\n            encoded += message[i];\n        }\n    }\n    return encoded;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpena_5v00.js:45:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpena_5v00.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    let\
    \ newMsg = '';\n    let vowels = 'aeiou';\n    for(let i = 0; i < message.length;\
    \ i++){\n        let char = message[i];\n        if(vowels.includes(char.toLowerCase())){\n\
    \            let vowelIdx = vowels.indexOf(char.toLowerCase());\n            if(vowelIdx\
    \ === 4){\n                char = vowels[0].toUpperCase();\n            } else\
    \ {\n                char = vowels[vowelIdx + 2].toUpperCase();\n            }\n\
    \        } else {\n            char = char.toUpperCase();\n        }\n       \
    \ newMsg += char;\n    }\n    return newMsg;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp790euw8w.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp790euw8w.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n\tvar result = '';\n\tvar vPos = 0;\n\tvar\
    \ alphabetPos = 0;\n\tfor(var i = 0; i < message.length; i++){\n\t\t//Check if\
    \ vowel\n\t\tif(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' ||\
    \ message[i] == 'o' || message[i] == 'u'){\n\t\t\t//Get position of vowels\n\t\
    \t\tswitch(message[i]){\n\t\t\t\tcase 'a':\n\t\t\t\t\tvPos = 0;\n\t\t\t\t\tbreak;\n\
    \t\t\t\tcase 'e':\n\t\t\t\t\tvPos = 4;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'i':\n\t\
    \t\t\t\tvPos = 8;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'o':\n\t\t\t\t\tvPos = 14;\n\
    \t\t\t\t\tbreak;\n\t\t\t\tcase 'u':\n\t\t\t\t\tvPos = 20;\n\t\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t\t//Get alphabet position of vowels\n\t\t\talphabetPos = alphabet.indexOf(message[i]);\n\
    \t\t\tresult += alphabet[vPos+2];\n\t\t}\n\t\t//Check lower case\n\t\telse if(message[i]\
    \ == message[i].toLowerCase()){\n\t\t\t//Get alphabet position\n\t\t\talphabetPos\
    \ = alphabet.indexOf(message[i]);\n\t\t\t//Capitalize\n\t\t\tresult += alphabet[alphabetPos].toUpperCase();\n\
    \t\t}\n\t\t//Check upper case\n\t\telse if(message[i] == message[i].toUpperCase()){\n\
    \t\t\t//Get alphabet position\n\t\t\talphabetPos = alphabet.indexOf(message[i].toLowerCase());\n\
    \t\t\t//Lowercase\n\t\t\tresult += alphabet[alphabetPos];\n\t\t}\n\t\t//Check\
    \ for special chars\n\t\telse{\n\t\t\tresult += message[i\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpejl_n4oy.js:54\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    message\
    \ = message.toLowerCase().split('');\n    for(var i = 0; i < message.length; i++){\n\
    \        if(message[i] === 'a'){\n            message[i] = 'c';\n        } else\
    \ if(message[i] === 'e'){\n            message[i] = 'g';\n        } else if(message[i]\
    \ === 'i'){\n            message[i] = 'k';\n        } else if(message[i] === 'o'){\n\
    \            message[i] = 'q';\n        } else if(message[i] === 'u'){\n     \
    \       message[i] = 'y';\n        } else if(message[i] === 'b'){\n          \
    \  message[i] = 'a';\n        } else if(message[i] === 'c'){\n            message[i]\
    \ = 'e';\n        } else if(message[i] === 'd'){\n            message[i] = 'i';\n\
    \        } else if(message[i] === 'f'){\n            message[i] = 'o';\n     \
    \   } else if(message[i] === 'g'){\n            message[i] = 'u';\n        } else\
    \ if(message[i] === 'h'){\n            message[i] = 'b';\n        } else if(message[i]\
    \ === 'j'){\n            message[i] = 'd';\n        } else if(message[i] === 'k'){\n\
    \            message[i] = 'f';\n        } else if(message[i] === 'l'){\n     \
    \       message[i] = 'h';\n        } else if(message[i] === 'm'){\n          \
    \  message[i] = 'j';\n        } else if(message[i] === 'n'){\n            message[i]\
    \ = 'l';\n        } else if(message[i] === 'p'){\n            message[i] = 'n';\n\
    \        } else if(message[i] === 'q'){\n            message[i] = 'p';\n     \
    \   } else if(message[i] === 'r'){\n            message[i] = 't';\n        } else\
    \ if(message\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0_9ihr3a.js:49\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar encodedMessage\
    \ = \"\";\n\tfor(var i = 0; i < message.length; i++){\n\t\tvar character = message[i];\n\
    \t\tvar position = alphabet.indexOf(character);\n\t\tif(position === -1){\n\t\t\
    \tencodedMessage += character;\n\t\t} else {\n\t\t\tvar newPosition = position\
    \ + 3;\n\t\t\tif(newPosition >= alphabet.length){\n\t\t\t\tnewPosition -= alphabet.length;\n\
    \t\t\t}\n\t\t\tencodedMessage += alphabet[newPosition];\n\t\t}\n\t}\n\treturn\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmps0zeu4qr.js:11\n\t\tvar position = alphabet.indexOf(character);\n\
    \t\t               ^\n\nReferenceError: alphabet is not defined\n    at encode\
    \ (/tmp/tmps0zeu4qr.js:11:18)\n    at test (/tmp/tmps0zeu4qr.js:30:20)\n    at\
    \ Object.<anonymous> (/tmp/tmps0zeu4qr.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var encrypted\
    \ = message.split('');\n  var abc = \"abcdefghijklmnopqrstuvwxyz\".split('');\n\
    \  for(var i = 0; i < encrypted.length; i++){\n    for(var j = 0; j < abc.length;\
    \ j++){\n      if(encrypted[i] === abc[j]){\n        if(encrypted[i] === 'z'){\n\
    \          encrypted[i] = 'b';\n        } else if(encrypted[i] === 'Z'){\n   \
    \       encrypted[i] = 'B';\n        } else {\n          encrypted[i] = abc[j+2];\n\
    \        }\n      }\n    }\n  }\n  console.log(encrypted.join(''));\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp75257b3x.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmp75257b3x.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'TEST

    '
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    var newString = \"\";\n    for(var i = 0; i < message.length; i++){\n \
    \       if(alpha.indexOf(message[i]) === -1){\n            newString += message[i];\n\
    \        }\n        else if(vowels.indexOf(message[i]) === -1){\n            if(message[i]\
    \ === message[i].toUpperCase()){\n                newString += alpha[alpha.indexOf(message[i].toLowerCase())+2].toUpperCase();\n\
    \            }\n            else{\n                newString += alpha[alpha.indexOf(message[i])+2];\n\
    \            }\n        }\n        else{\n            if(message[i] === message[i].toUpperCase()){\n\
    \                newString += alpha[vowels.indexOf(message[i].toLowerCase())+2].toUpperCase();\n\
    \            }\n            else{\n                newString += alpha[vowels.indexOf(message[i])+2];\n\
    \            }\n        }\n    }\n    return newString;\n}\nencode(\"why are you\
    \ bugging me\"); // \"zkc bw dqq bzdhz qc\"\nencode(\"why are you bugging me so\
    \ much\"); // \"zkc bw dqq bzdhz qc uqg ne vqnq\"\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptk5y7ekt.js:42:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptk5y7ekt.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n   const\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n   // create an array that holds\
    \ the swaped letters\n   const encode = []\n   // loop over the message and run\
    \ a series of if statements\n\n   // upper case letters\n   for(let i = 0; i <\
    \ message.length; i++){\n      // encode the uppercase letters\n      if(alphabet.includes(message[i])){\n\
    \         // find index in alphabet\n         const index = alphabet.indexOf(message[i])\n\
    \         encode.push(alphabet[index - 1])\n      } else if(alphabet.includes(message[i].toLowerCase())){\n\
    \         // encode the lowercase letters\n         const index = alphabet.indexOf(message[i].toLowerCase())\n\
    \         encode.push(alphabet[index + 1])\n      } else {\n         encode.push(message[i])\n\
    \      }\n   }\n   return encode.join(\"\")\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'uftu'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7zdvxs0p.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7zdvxs0p.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'uftu',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    let\
    \ arr = message.split('');\n    for(let i = 0; i < arr.length; i++){\n       \
    \ let index = arr[i].charCodeAt(0);\n        if(index >= 65 && index <= 90){\n\
    \            arr[i] = String.fromCharCode(index + 32);\n        } else if(index\
    \ >= 97 && index <= 122){\n            arr[i] = String.fromCharCode(index - 32);\n\
    \        }\n    }\n    for(let i = 0; i < arr.length; i++){\n        let index\
    \ = arr[i].charCodeAt(0);\n        switch(index){\n            case 97:\n    \
    \            arr[i] = 'b';\n                break;\n            case 101:\n  \
    \              arr[i] = 'f';\n                break;\n            case 105:\n\
    \                arr[i] = 'j';\n                break;\n            case 111:\n\
    \                arr[i] = 'n';\n                break;\n            case 117:\n\
    \                arr[i] = 'r';\n                break;\n            case 65:\n\
    \                arr[i] = 'B';\n                break;\n            case 69:\n\
    \                arr[i] = 'F';\n                break;\n            case 73:\n\
    \                arr[i] = 'J';\n                break;\n            case 79:\n\
    \                arr[i] = 'N';\n                break;\n            case 85:\n\
    \                arr[i] = 'R';\n                break;\n        }\n    }\n   \
    \ return arr.join('');\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tfst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpns1m16yz.js:60:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpns1m16yz.js:67:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tfst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ msg = message.toLowerCase().split('');\n    var array = [];\n    msg.forEach(function(e){\n\
    \        array.push(letterEncode(e));\n    });\n    return array.join('');\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmprlwvcexr.js:11\n        array.push(letterEncode(e));\n        \
    \      ^\n\nReferenceError: letterEncode is not defined\n    at /tmp/tmprlwvcexr.js:11:15\n\
    \    at Array.forEach (<anonymous>)\n    at encode (/tmp/tmprlwvcexr.js:10:9)\n\
    \    at test (/tmp/tmprlwvcexr.js:21:20)\n    at Object.<anonymous> (/tmp/tmprlwvcexr.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar alphabet\
    \ = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \tvar vowel = ['a','e','i','o','u'];\n\tvar v2 = ['c','f','j','m','p'];\n\tvar\
    \ upperV = ['A','E','I','O','U'];\n\tvar upperV2 = ['C','F','J','M','P'];\n\t\
    var output = '';\n\tfor(var i = 0; i < message.length; i++){\n\t\tif(isVowel(message[i])\
    \ == true){\n\t\t\tif(isVowel(message[i]) == true && alphabet.indexOf(message[i])\
    \ < 18){\n\t\t\t\tvar position = vowel.indexOf(message[i]);\n\t\t\t\toutput +=\
    \ v2[position];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tvar position = vowel.indexOf(message[i]);\n\
    \t\t\t\toutput += upperV2[position];\n\t\t\t}\n\t\t}\n\t\telse if(alphabet.indexOf(message[i])\
    \ > 18){\n\t\t\toutput += message[i].toLowerCase();\n\t\t}\n\t\telse{\n\t\t\t\
    output += message[i].toUpperCase();\n\t\t}\n\t}\n\treturn output;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp48dzgvvc.js:15\n\t\tif(isVowel(message[i]) == true){\n\t\t^\n\n\
    ReferenceError: isVowel is not defined\n    at encode (/tmp/tmp48dzgvvc.js:15:3)\n\
    \    at test (/tmp/tmp48dzgvvc.js:39:20)\n    at Object.<anonymous> (/tmp/tmp48dzgvvc.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ alpha = \"abcdefghijklmnopqrstuvwxyz\";\n    var newMessage = \"\";\n    for(var\
    \ i = 0; i < message.length; i++){\n        var letter = message[i];\n       \
    \ if(alpha.indexOf(letter) !== -1){\n            if(alpha.indexOf(letter) ===\
    \ 25){\n                newMessage += alpha[0];\n            }\n            else\
    \ if(alpha.indexOf(letter) === 24){\n                newMessage += alpha[25];\n\
    \            }\n            else{\n                newMessage += alpha[alpha.indexOf(letter)\
    \ + 2];\n            }\n        }\n        else{\n            newMessage += letter;\n\
    \        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvyjbhyt3.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvyjbhyt3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    //create\
    \ a variable for the alphabet lower case\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    //create a variable for the alphabet upper case\n    var alphabetUpper\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    //create a variable for the vowels\n\
    \    var vowels = \"aeiou\";\n    //create a variable to hold the decoded message\n\
    \    var decoded = \"\";\n    //iterate through the message\n    for(var i = 0;\
    \ i < message.length; i++){\n        //create a variable to hold the letter\n\
    \        var letter = message[i];\n        //create a variable to hold the lower\
    \ case letter\n        var lowerCaseLetter = letter.toLowerCase();\n        //find\
    \ the index of the lower case letter\n        var index = alphabet.indexOf(lowerCaseLetter);\n\
    \        //check if the letter is a vowel\n        if(vowels.indexOf(lowerCaseLetter)\
    \ !== -1){\n            //this is a vowel so encode it\n            //check if\
    \ the letter is upper case\n            if(letter === letter.toUpperCase()){\n\
    \                //upper case so check if it's u\n                if(letter ===\
    \ \"U\"){\n                    //this is u so add a to decoded\n             \
    \       decoded += \"A\";\n                }else{\n                    //otherwise\
    \ add the letter 2 indices after the index to decoded\n                    decoded\
    \ += alphabetUpper[index + 2];\n                }\n            }else{\n      \
    \          //lower case so check if it's u\n                if(letter === \"u\"\
    ){\n                    //this is u so add a to decoded\n                    decoded\
    \ += \"a\";\n                }else{\n                    //otherwise add the letter\
    \ 2 indices after the index to decoded\n                    decoded += alphabet[index\
    \ + 2];\n                }\n            }\n        }else{\n            //this\
    \ is not a vowel so check if it's lower case\n            if(letter === letter.toLowerCase()){\n\
    \                //add the index of the letter in alphabetUpper case to decoded\n\
    \                decoded += alphabetUpper[index];\n            }else{\n      \
    \          //add the index of the letter in alphabet lower case to decoded\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpwlw6ktyc.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var encodedMessage\
    \ = '';\n  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  for (var i = 0; i <\
    \ message.length; i++) {\n    var index = alphabet.indexOf(message[i]);\n    if\
    \ (index === -1) {\n      encodedMessage += message[i];\n    } else {\n      if\
    \ (index > 23) {\n        encodedMessage += alphabet[index - 2];\n      } else\
    \ {\n        encodedMessage += alphabet[index + 2];\n      }\n    }\n  }\n  return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkuvdc5st.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpkuvdc5st.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ output = '';\n    for(var i = 0; i < message.length; i++){\n        var code\
    \ = message.charCodeAt(i);\n        if(code >= 65 && code <= 90){\n          \
    \  code += 32;\n        }else if(code >= 97 && code <= 122){\n            code\
    \ -= 32;\n        }\n        if(code === 97){\n            code = 99;\n      \
    \  }else if(code === 101){\n            code = 103;\n        }else if(code ===\
    \ 105){\n            code = 107;\n        }else if(code === 111){\n          \
    \  code = 113;\n        }else if(code === 117){\n            code = 119;\n   \
    \     }\n        output += String.fromCharCode(code);\n    }\n    return output;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmphkff45gj.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmphkff45gj.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    const\
    \ vowels = ['a', 'e', 'i', 'o', 'u'];\n    const numbers = [1,3,5,7,9,11,15,17,19,21,23,25];\n\
    \    let chars = message.split('');\n    let encoded = [];\n    for(let i = 0;\
    \ i < chars.length; i++){\n        let ch = chars[i];\n        if(ch === ch.toUpperCase()){\n\
    \            ch = ch.toLowerCase();\n        } else {\n            ch = ch.toUpperCase();\n\
    \        }\n        if(vowels.includes(ch)){\n            let vowelIndex = vowels.indexOf(ch);\n\
    \            let numberIndex = numbers.indexOf(vowelIndex);\n            if(numberIndex\
    \ === -1){\n                numberIndex = numbers.length - 1;\n            }\n\
    \            ch = vowels[numbers[numberIndex]];\n        }\n        encoded.push(ch);\n\
    \    }\n    return encoded.join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5vyk_e8i.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5vyk_e8i.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var vowels\
    \ = 'aeiou';\n  var result = '';\n  for (var i = 0; i < message.length; i++) {\n\
    \    var char = message[i];\n    var lowerChar = char.toLowerCase();\n    var\
    \ isUpper = char === char.toUpperCase();\n    var index = vowels.indexOf(lowerChar);\n\
    \    if (index === -1) {\n      result += isUpper ? char.toLowerCase() : char;\n\
    \    } else {\n      var nextIndex = (index + 2) % vowels.length;\n      result\
    \ += isUpper ? vowels[nextIndex].toUpperCase() : vowels[nextIndex];\n    }\n \
    \ }\n  return result;\n}\n\nencode('Hello, World!');\nencode('Helo, World!');\n\
    encode('Hello, World!');\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_8hzr58k.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_8hzr58k.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    let\
    \ vowels = 'aeiouAEIOU';\n    let newLetters = '';\n    for(let i = 0; i < message.length;\
    \ i++){\n        if(vowels.includes(message[i])){\n            if(message[i] ==\
    \ 'z' || message[i] == 'Z'){\n                newLetters += 'b';\n           \
    \ }\n            else{\n                newLetters += String.fromCharCode(message.charCodeAt(i)\
    \ + 2);\n            }\n        }\n        else{\n            if(message[i] ===\
    \ message[i].toUpperCase()){\n                newLetters += message[i].toLowerCase();\n\
    \            }\n            else{\n                newLetters += message[i].toUpperCase();\n\
    \            }\n        }\n    }\n    return newLetters;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tGst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpwiww6l24.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpwiww6l24.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var message\
    \ = message.toLowerCase();\n  var encodedMessage = \"\";\n  var vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n  var indexOf;\n  var newVowel;\n  var letter;\n\
    \  for (var i = 0; i < message.length; i++) {\n    letter = message[i];\n    if\
    \ (letter === letter.toUpperCase()) {\n      encodedMessage += letter.toLowerCase();\n\
    \    } else {\n      encodedMessage += letter.toUpperCase();\n    }\n    indexOf\
    \ = vowels.indexOf(letter);\n    if (indexOf !== -1) {\n      newVowel = vowels[(indexOf\
    \ + 2) % 5];\n      encodedMessage = encodedMessage.slice(0, -1) + newVowel;\n\
    \    }\n  }\n  return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpd675zlo1.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpd675zlo1.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var newMessage = \"\";\n   \
    \ for(var i = 0; i < message.length; i++){\n        var encoded = \"\";\n    \
    \    if(message[i] === message[i].toUpperCase()){\n            encoded = alphabet[(alphabet.indexOf(message[i].toLowerCase())\
    \ + 2) % 26].toUpperCase();\n        }\n        else{\n            encoded = alphabet[(alphabet.indexOf(message[i])\
    \ + 2) % 26];\n        }\n        newMessage += encoded;\n    }\n    return newMessage;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpag1jmp0q.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpag1jmp0q.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    let\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    let vowels = \"aeiou\"\n    let\
    \ newLetters = []\n    let messageArr = message.split(\"\")\n    for(let i = 0;\
    \ i < messageArr.length; i++){\n        let letter = messageArr[i]\n        if(letter\
    \ === letter.toUpperCase()){\n            let newLetter = letter.toLowerCase()\n\
    \            if(vowels.includes(newLetter)){\n                let idx = alphabet.indexOf(newLetter)\n\
    \                newLetters.push(alphabet[idx + 2].toUpperCase())\n          \
    \  } else {\n                newLetters.push(newLetter.toUpperCase())\n      \
    \      }\n        } else {\n            if(vowels.includes(letter)){\n       \
    \         let idx = alphabet.indexOf(letter)\n                newLetters.push(alphabet[idx\
    \ + 2])\n            } else {\n                newLetters.push(letter)\n     \
    \       }\n        }\n    }\n    return newLetters.join(\"\")\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp58chzjpd.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp58chzjpd.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'.split('');\n\tvar vowels = ['a','e','i','o','u']\n\
    \tvar newMsg = '';\n\tfor(var i = 0; i < message.length; i++){\n\t\tvar idx =\
    \ alphabet.indexOf(message[i].toLowerCase());\n\t\tif(idx === -1){\n\t\t\tnewMsg\
    \ += message[i];\n\t\t} else if(message[i] === message[i].toUpperCase()){\n\t\t\
    \tif(vowels.indexOf(message[i].toLowerCase()) !== -1){\n\t\t\t\tvar newVowel =\
    \ alphabet[idx + 2].toUpperCase();\n\t\t\t\tnewMsg += newVowel;\n\t\t\t} else\
    \ {\n\t\t\t\tvar newCons = alphabet[idx].toUpperCase();\n\t\t\t\tnewMsg += newCons;\n\
    \t\t\t}\n\t\t} else {\n\t\t\tif(vowels.indexOf(message[i]) !== -1){\n\t\t\t\t\
    var newVowel = alphabet[idx + 2];\n\t\t\t\tnewMsg += newVowel;\n\t\t\t} else {\n\
    \t\t\t\tvar newCons = alphabet[idx];\n\t\t\t\tnewMsg += newCons;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn newMsg;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp50hr8gay.js:41:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp50hr8gay.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    //\
    \ convert message to lowercase\n    message = message.toLowerCase();\n    var\
    \ vowels = \"aeiou\";\n    var vowelIndex;\n    // create empty array\n    var\
    \ tempArr = [];\n    // use a loop to iterate through message\n    for(i = 0;\
    \ i < message.length; i++){\n        // is message[i] a vowel?\n        if(vowels.indexOf(message[i])\
    \ !== -1){\n            //if so, what is its index?\n            vowelIndex =\
    \ vowels.indexOf(message[i]);\n            // increase index by 2\n          \
    \  vowelIndex += 2;\n            // if index is greater than 4, subtract 4\n \
    \           if(vowelIndex > 4){\n                vowelIndex -= 4;\n          \
    \  }\n            // push the new vowel letter to the tempArr\n            tempArr.push(vowels[vowelIndex]);\n\
    \        }\n        // else, push the letter unchanged to the tempArr\n      \
    \  else{\n            tempArr.push(message[i]);\n        }\n    }\n    // convert\
    \ array to string\n    tempArr = tempArr.join(\"\");\n    // return string\n \
    \   return tempArr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpz6nmmz2o.js:45:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz6nmmz2o.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let alphabet = [\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
    x\", \"y\", \"z\"];\n    let solution = \"\";\n    for(let i = 0; i < message.length;\
    \ i++){\n        let char = message[i];\n        if(char.toLowerCase() == char){\n\
    \            char = char.toUpperCase();\n        } else {\n            char =\
    \ char.toLowerCase();\n        }\n        for(let j = 0; j < vowels.length; j++){\n\
    \            if(char == vowels[j]){\n                let index = alphabet.indexOf(char);\n\
    \                let next = index + 2;\n                if(next > alphabet.length\
    \ - 1){\n                    next = next - alphabet.length;\n                }\n\
    \                char = alphabet[next];\n            }\n        }\n        solution\
    \ += char;\n    }\n    return solution;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpjn9rwd39.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjn9rwd39.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    const\
    \ vowels = ['a', 'e', 'i', 'o', 'u'];\n    let encoded = '';\n    const alphabet\
    \ = Array.from('abcdefghijklmnopqrstuvwxyz');\n    for (let i = 0; i < message.length;\
    \ i++) {\n        let char = message[i];\n        let charIndex = alphabet.indexOf(char.toLowerCase());\n\
    \        if (charIndex > -1) {\n            if (vowels.includes(char.toLowerCase()))\
    \ {\n                charIndex += 2;\n                if (charIndex > alphabet.length)\
    \ {\n                    charIndex -= alphabet.length;\n                }\n  \
    \          }\n            if (char.toUpperCase() === char) {\n               \
    \ encoded += alphabet[charIndex].toUpperCase();\n            } else {\n      \
    \          encoded += alphabet[charIndex];\n            }\n        } else {\n\
    \            encoded += char;\n        }\n    }\n    return encoded;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdkiyne6o.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpdkiyne6o.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var encoded = \"\";\n   \
    \ for(var i = 0; i < message.length; i++){\n        var letter = message[i];\n\
    \        if(vowels.indexOf(letter.toLowerCase()) >= 0){\n            // encode\
    \ this letter\n            var nextIndex = vowels.indexOf(letter.toLowerCase())\
    \ + 2;\n            if(nextIndex >= vowels.length){\n                nextIndex\
    \ = nextIndex - vowels.length;\n            }\n            var encodedLetter =\
    \ vowels[nextIndex];\n            if(letter === letter.toUpperCase()){\n     \
    \           encodedLetter = encodedLetter.toUpperCase();\n            }\n    \
    \        encoded = encoded + encodedLetter;\n        }\n        else{\n      \
    \      if(letter === letter.toUpperCase()){\n                encoded = encoded\
    \ + letter.toLowerCase();\n            }\n            else{\n                encoded\
    \ = encoded + letter.toUpperCase();\n            }\n        }\n    }\n    return\
    \ encoded;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5kej1gj7.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5kej1gj7.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\nvar string\
    \ = '';\nvar vowels = 'aeiouAEIOU';\nfor (var i = 0; i < message.length; i++)\
    \ {\n    var c = message[i];\n    if (c === c.toUpperCase()) {\n      c = c.toLowerCase();\n\
    \    } else {\n      c = c.toUpperCase();\n    }\n    string += c;\n  }\n  for\
    \ (var i = 0; i < string.length; i++) {\n    var l = string[i];\n    for (var\
    \ j = 0; j < vowels.length; j++) {\n      var v = vowels[j];\n      if (l ===\
    \ v) {\n        string = string.replace(v, vowels[j+2]);\n      }\n    }\n  }\n\
    \  return string;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyhl0mt3i.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpyhl0mt3i.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var result\
    \ = \"\";\n  var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  var vowels = \"\
    aeiou\";\n  for(var i = 0; i < message.length; i++){\n    var currentLetter =\
    \ message[i];\n    if(alphabet.indexOf(currentLetter) === -1){\n      result +=\
    \ currentLetter;\n    } else if(vowels.indexOf(currentLetter) === -1){\n     \
    \ result += currentLetter.toUpperCase();\n    } else {\n      // Find the vowels\
    \ that are two places ahead in the alphabet\n      var vowelIndex = vowels.indexOf(currentLetter);\n\
    \      var newVowelIndex = (vowelIndex + 2) % vowels.length;\n      var newVowel\
    \ = vowels[newVowelIndex];\n      result += newVowel;\n    }\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvphhf6jc.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvphhf6jc.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var output = \"\"\n    for(var\
    \ i = 0; i < message.length; i++){\n        if(alphabet.indexOf(message[i]) ===\
    \ -1){\n            output += message[i]\n        }\n        else if(alphabet.indexOf(message[i])\
    \ < 23){\n            output += alphabet[alphabet.indexOf(message[i]) + 3]\n \
    \       }\n        else{\n            output += alphabet[alphabet.indexOf(message[i])\
    \ - 23]\n        }\n    }\n    return output\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpq7kqhxrk.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpq7kqhxrk.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    let\
    \ messageString = message.split(\"\");\n    console.log(messageString);\n    let\
    \ changeLetterCase = messageString.map(function(value){\n        if(value == value.toUpperCase()){\n\
    \            return value.toLowerCase();\n        }\n        else{\n         \
    \   return value.toUpperCase();\n        }\n    });\n    console.log(changeLetterCase);\n\
    \    let changeVowels = changeLetterCase.map(function(value){\n        let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n        let alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        if(vowels.includes(value.toLowerCase())){\n            let vowel =\
    \ alpha.indexOf(value.toLowerCase());\n            let newVowel = vowel + 2;\n\
    \            return alpha[newVowel];\n        }\n        else{\n            return\
    \ value;\n        }\n    });\n    console.log(changeVowels);\n    return changeVowels.join(\"\
    \");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mwDcSkR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpkhkbdvd3.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkhkbdvd3.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mwDcSkR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[ 'T', 'E', 'S', 'T' ]\n[ 't', 'e', 's', 't' ]\n[ 't', 'g', 's', 't' ]\n\
    [\n  'M', 'u', 'd',\n  'a', 's', 'i',\n  'r'\n]\n[\n  'm', 'U', 'D',\n  'A', 'S',\
    \ 'I',\n  'R'\n]\n[\n  'm', 'w', 'D',\n  'c', 'S', 'k',\n  'R'\n]\n"
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ newMessage = '';\n    // Looping through the string\n    for(var i = 0; i <\
    \ message.length; i++){\n        var currentChar = message[i];\n        // If\
    \ the character is a space, then add it to the string\n        if(currentChar\
    \ === ' '){\n            newMessage += currentChar;\n        }\n        // Calling\
    \ the encodeChar function on the current character and then adding it to the string\n\
    \        else{\n            newMessage += encodeChar(currentChar);\n        }\n\
    \    }\n    // Returning the string\n    return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0my_75ms.js:18\n            newMessage += encodeChar(currentChar);\n\
    \            ^\n\nReferenceError: encodeChar is not defined\n    at encode (/tmp/tmp0my_75ms.js:18:13)\n\
    \    at test (/tmp/tmp0my_75ms.js:30:20)\n    at Object.<anonymous> (/tmp/tmp0my_75ms.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n  var encodedMessage = '';\n  for (var i =\
    \ 0; i < message.length; i++) {\n    var currentLetter = message[i];\n    var\
    \ indexInAlphabet = alphabet.indexOf(currentLetter.toLowerCase());\n    if (indexInAlphabet\
    \ === -1) {\n      encodedMessage += currentLetter;\n    } else {\n      var newLetter\
    \ = alphabet[(indexInAlphabet + 2) % alphabet.length];\n      if (currentLetter\
    \ === currentLetter.toUpperCase()) {\n        newLetter = newLetter.toUpperCase();\n\
    \      }\n      encodedMessage += newLetter;\n    }\n  }\n  return encodedMessage;\n\
    }\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqd3_qvig.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqd3_qvig.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar vowels\
    \ = \"aeiou\";\n\tvar encoded = \"\";\n\tfor(var i = 0; i < message.length; i++){\n\
    \t\tvar letter = message[i];\n\t\tif(vowels.indexOf(letter) !== -1){\n\t\t\tvar\
    \ index = vowels.indexOf(letter);\n\t\t\tencoded += vowels[(index + 2) % 5];\n\
    \t\t}\n\t\telse{\n\t\t\tif(letter === letter.toUpperCase()){\n\t\t\t\tencoded\
    \ += letter.toLowerCase();\n\t\t\t}\n\t\t\telse{\n\t\t\t\tencoded += letter.toUpperCase();\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn encoded;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp82u_2bd0.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp82u_2bd0.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tvar result = \"\";\n\t//loop through\
    \ message\n\tfor(var i = 0; i < message.length; i++){\n\t\tvar char = message[i];\n\
    \t\t//check if char is upper case\n\t\tif(char === char.toUpperCase()){\n\t\t\t\
    //make it lowercase\n\t\t\tchar = char.toLowerCase();\n\t\t}\n\t\t//check if char\
    \ is lowercase\n\t\telse if(char === char.toLowerCase()){\n\t\t\t//make it uppercase\n\
    \t\t\tchar = char.toUpperCase();\n\t\t}\n\t\t//check if char is a vowel\n\t\t\
    if(vowels.indexOf(char) !== -1){\n\t\t\t//find the two characters ahead\n\t\t\t\
    //find the index of the char\n\t\t\tvar index = vowels.indexOf(char);\n\t\t\t\
    //check if the index is at the end of the array\n\t\t\tif(index === vowels.length\
    \ - 1){\n\t\t\t\t//change it to the first index\n\t\t\t\tindex = 0;\n\t\t\t}\n\
    \t\t\t//take the character ahead one index\n\t\t\telse{\n\t\t\t\tindex++;\n\t\t\
    \t}\n\t\t\t//check if the index is at the end of the array\n\t\t\tif(index ===\
    \ vowels.length - 1){\n\t\t\t\t//change it to the first index\n\t\t\t\tindex =\
    \ 0;\n\t\t\t}\n\t\t\t//take the character ahead one index\n\t\t\telse{\n\t\t\t\
    \tindex++;\n\t\t\t}\n\t\t\t//assign char to the new index\n\t\t\tchar = vowels[index];\n\
    \t\t}\n\t\t//add the char to the result\n\t\tresult += char;\n\t}\n\t//return\
    \ the result\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpe5q1gk_e.js:61:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpe5q1gk_e.js:68:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar msg\
    \ = message.split(\"\");\n\tvar alpha = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"\
    g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"\
    t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"];\n\tvar vowels = [\"a\",\"e\",\"i\",\"\
    o\",\"u\"];\n\tfor(var i = 0; i < msg.length; i++){\n\t\tif(msg[i] === msg[i].toUpperCase()){\n\
    \t\t\tmsg[i] = msg[i].toLowerCase();\n\t\t}else{\n\t\t\tmsg[i] = msg[i].toUpperCase();\n\
    \t\t}\n\t\tfor(var j = 0; j < vowels.length; j++){\n\t\t\tif(msg[i] === vowels[j]){\n\
    \t\t\t\tmsg[i] = alpha[alpha.indexOf(vowels[j]) + 2];\n\t\t\t}\n\t\t}\n\t}\n\t\
    return msg.join(\"\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpia_n4bwm.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpia_n4bwm.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    //string.charCodeAt(index)\n\
    \    //string.fromCharCode(num)\n    var vowels = {'a': 'c', 'e': 'g', 'i': 'k',\
    \ 'o': 'q', 'u': 'y'};\n    var newMessage = '';\n    var message = message.toLowerCase();\n\
    \    for(var i = 0; i < message.length; i++){\n        if(vowels[message[i]]){\n\
    \            newMessage += vowels[message[i]];\n        } else if(message[i] ===\
    \ ' '){\n            newMessage += ' ';\n        } else {\n            newMessage\
    \ += String.fromCharCode(message.charCodeAt(i) + 2);\n        }\n    }\n    return\
    \ newMessage;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'vguv'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpe29zyv87.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpe29zyv87.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'vguv',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ alpha = 'abcdefghijklmnopqrstuvwxyz';\n    var newMessage = '';\n    for(var\
    \ i = 0; i < message.length; i++){\n        var letter = message[i];\n       \
    \ var index = alpha.indexOf(letter.toLowerCase());\n        if(index > -1){\n\
    \            if(index > 23){\n                index = -2;\n            }\n   \
    \         if(letter == letter.toUpperCase()){\n                newMessage += alpha[index\
    \ + 2].toUpperCase();\n            } else {\n                newMessage += alpha[index\
    \ + 2];\n            }\n        } else {\n            newMessage += letter;\n\
    \        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpelbnvt8j.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpelbnvt8j.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ newMessage = '';\n    var vowels = 'aeiou';\n    var letterCase = 0;\n    var\
    \ letterCase = 0;\n    var letterCase = 0;\n    var letterCase = 0;\n    var letterCase\
    \ = 0;\n    var letterCase = 0;\n    var letterCase = 0;\n    var letterCase =\
    \ 0;\n    var letterCase = 0;\n    var letterCase = 0;\n    var letterCase = 0;\n\
    \    var letterCase = 0;\n    var letterCase = 0;\n    var letterCase = 0;\n \
    \   var letterCase = 0;\n    var letterCase = 0;\n    var letterCase = 0;\n  \
    \  var letterCase = 0;\n    var letterCase = 0;\n    var letterCase = 0;\n   \
    \ var letterCase = 0;\n    var letterCase = 0;\n    var letterCase = 0;\n    var\
    \ letterCase = 0;\n    var letterCase = 0;\n    var letterCase = 0;\n    var letterCase\
    \ = 0;\n    var letterCase = 0;\n    var letterCase = 0;\n    var letterCase =\
    \ 0;\n    var letterCase = 0;\n    var letterCase = 0;\n    var letterCase = 0;\n\
    \    var letterCase = 0;\n    var letterCase = 0;\n    var letterCase = 0;\n \
    \   var letterCase = 0;\n    var letterCase = 0;\n    var letterCase = 0;\n  \
    \  var letterCase = 0;\n    var letterCase = 0;\n    var letterCase = 0;\n   \
    \ var letterCase = 0;\n    var letterCase = 0;\n    var letterCase = 0;\n    var\
    \ letterCase = 0;\n    var letterCase = 0;\n    var letterCase = 0;\n    var letterCase\
    \ = 0;\n    var letterCase = 0;\n    var letterCase = 0;\n    var letterCase =\
    \ 0;\n    var letterCase = 0;\n    var letterCase = 0;\n    var letterCase = 0;\n\
    \    var letterCase = 0;\n    var letterCase = 0;\n    var letterCase = 0;\n \
    \   var letterCase = 0;\n    var letterCase = 0;\n    var letterCase = 0;\n  \
    \  var letterCase\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmppq8d08mg.js:84\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    //\
    \ first, convert all to uppercase\n    // next, find all vowels and replace them\
    \ with letter 2 places ahead\n    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    let newMessage = \"\";\n    // change to uppercase\n    message = message.toUpperCase();\n\
    \    // find index of each character\n    for (i = 0; i < message.length; i++){\n\
    \        let index = alphabet.indexOf(message[i]);\n        if (index === -1){\n\
    \            newMessage += message[i];\n        } else {\n            if (index\
    \ + 2 > alphabet.length){\n                newMessage += alphabet[index + 2 -\
    \ alphabet.length];\n            } else {\n                newMessage += alphabet[index\
    \ + 2];\n            }\n        }\n    }\n    return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp50bei33f.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp50bei33f.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = ['a','e','i','o','u'];\n    var result = \"\";\n    for(var i = 0;\
    \ i < message.length; i++){\n        if(message[i] === message[i].toUpperCase()){\n\
    \            result += message[i].toLowerCase();\n        }\n        else{\n \
    \           result += message[i].toUpperCase();\n        }\n        if(vowels.indexOf(result[i])\
    \ !== -1){\n            result = result.slice(0,i) + vowels[(vowels.indexOf(result[i])\
    \ + 2) % vowels.length] + result.slice(i+1);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0k_qcbx_.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0k_qcbx_.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  var result = \"\";\n  for (var i =\
    \ 0; i < message.length; i++) {\n    if (vowels.indexOf(message[i]) > -1) {\n\
    \      result += String.fromCharCode(message[i].charCodeAt(0) + 2);\n    } else\
    \ if (message[i] == message[i].toUpperCase()) {\n      result += message[i].toLowerCase();\n\
    \    } else {\n      result += message[i].toUpperCase();\n    }\n  }\n  return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpniwkuotu.js:26:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpniwkuotu.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var vowels\
    \ = {\n    \"a\": \"c\",\n    \"e\": \"g\",\n    \"i\": \"k\",\n    \"o\": \"\
    q\",\n    \"u\": \"y\"\n  };\n  var result = \"\";\n  for (var i = 0; i < message.length;\
    \ i++) {\n    var current = message[i];\n    if (vowels[current.toLowerCase()])\
    \ {\n      result += vowels[current.toLowerCase()];\n    } else if (current ===\
    \ current.toUpperCase()) {\n      result += current.toLowerCase();\n    } else\
    \ {\n      result += current.toUpperCase();\n    }\n  }\n  return result;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'myDcSkR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp6ahe1qq_.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6ahe1qq_.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'myDcSkR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = ['a','e','i','o','u'];\n    var messageList = message.split('');\n\
    \    var newMessage = '';\n    for(var i = 0; i < messageList.length; i++){\n\
    \        var currentLetter = messageList[i];\n        if(vowels.indexOf(currentLetter.toLowerCase())\
    \ >= 0){\n            newMessage += String.fromCharCode(currentLetter.charCodeAt(0)\
    \ + 2);\n        } else {\n            if(currentLetter.toUpperCase() == currentLetter){\n\
    \                newMessage += currentLetter.toLowerCase();\n            } else\
    \ {\n                newMessage += currentLetter.toUpperCase();\n            }\n\
    \        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tGst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7gyvulfe.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7gyvulfe.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar vowels\
    \ = ['a','e','i','o','u'];\n\tvar alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \tvar result = '';\n\tfor(var i = 0; i < message.length; i++){\n\t\tvar letter\
    \ = message[i];\n\t\tvar letterIndex = alphabet.indexOf(letter.toLowerCase());\n\
    \t\tvar nextLetterIndex = letterIndex + 2;\n\t\tif(nextLetterIndex > alphabet.length\
    \ - 1){\n\t\t\tnextLetterIndex = nextLetterIndex - alphabet.length;\n\t\t}\n\t\
    \tvar nextLetter = alphabet[nextLetterIndex];\n\t\tvar isVowel = vowels.indexOf(nextLetter)\
    \ > -1;\n\t\tif(letter === letter.toUpperCase()){\n\t\t\tif(isVowel){\n\t\t\t\t\
    result += nextLetter.toUpperCase();\n\t\t\t}else{\n\t\t\t\tresult += nextLetter.toUpperCase();\n\
    \t\t\t}\n\t\t}else{\n\t\t\tif(isVowel){\n\t\t\t\tresult += nextLetter;\n\t\t\t\
    }else{\n\t\t\t\tresult += nextLetter;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0roftuvw.js:42:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0roftuvw.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = ['a','e','i','o','u'];\n    var str_arr = message.split('');\n    var\
    \ new_string = '';\n    for(var i = 0; i < str_arr.length; i++){\n        var\
    \ char = str_arr[i];\n        var ascii_val = char.charCodeAt(0);\n        if(ascii_val\
    \ >= 65 && ascii_val <= 90){\n            ascii_val += 32;\n        }\n      \
    \  else if(ascii_val >= 97 && ascii_val <= 122){\n            ascii_val -= 32;\n\
    \        }\n        var new_char = String.fromCharCode(ascii_val);\n        if(vowels.indexOf(new_char)\
    \ != -1){\n            new_char = vowels[(vowels.indexOf(new_char) + 2) % 5];\n\
    \        }\n        new_string += new_char;\n    }\n    return new_string;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpz3eowhog.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz3eowhog.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ string = \"\";\n    for(var i = 0; i < message.length; i++){\n        var letter\
    \ = message[i];\n        var lower = letter.toLowerCase();\n        if(lower ===\
    \ 'a'){\n            string += \"c\";\n        }\n        else if(lower === 'e'){\n\
    \            string += \"g\";\n        }\n        else if(lower === 'i'){\n  \
    \          string += \"k\";\n        }\n        else if(lower === 'o'){\n    \
    \        string += \"q\";\n        }\n        else if(lower === 'u'){\n      \
    \      string += \"y\";\n        }\n        else if(lower === lower.toUpperCase()){\n\
    \            string += letter.toLowerCase();\n        }\n        else{\n     \
    \       string += letter.toUpperCase();\n        }\n    }\n    return string;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TgST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmprctok7hj.js:42:10)\n    at\
    \ Object.<anonymous> (/tmp/tmprctok7hj.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TgST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  // Input\
    \ : \"abc\"\n  // Output : \"BDE\"\n\n  // Input : \"XYZ\"\n  // Output : \"XZB\"\
    \n\n  // Input : \"wxyz\"\n  // Output : \"BZAB\"\n\n  // Input : \"WXYZ\"\n \
    \ // Output : \"XZBA\"\n\n  // Input : \"hello world\"\n  // Output : \"JGNNQ\
    \ YQTNF\"\n\n  // Input : \"HELLO WORLD\"\n  // Output : \"JGNNQ YQTNF\"\n\n \
    \ // Input : \"!@#$%^&*()_+\"\n  // Output : \"!@#$%^&*()_+\"\n\n  // Input :\
    \ \"1234567890\"\n  // Output : \"1234567890\"\n\n  // Input : \"abcdefghijklmnopqrstuvwxyz\"\
    \n  // Output : \"BCDEFGHIJKLMNOPQRSTUVWXYZA\"\n\n  // Input : \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n  // Output : \"BCDEFGHIJKLMNOPQRSTUVWXYZA\"\n\n  // Input : \"?><}{[]\"\n \
    \ // Output : \"?><}{[]\"\n\n  // Input : \"`~\"\n  // Output : \"`~\"\n\n  //\
    \ Input : \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  // Output : \"BCDEFGHIJKLMNOPQRSTUVWXYZA\"\
    \n\n  // Input : \"abcdefghijklmnopqrstuvwxyz\"\n  // Output : \"BCDEFGHIJKLMNOPQRSTUVWXYZA\"\
    \n\n  // Input : \"!@#$%^&*()_+\"\n  // Output : \"!@#$%^&*()_+\"\n\n  // Input\
    \ : \"1234567890\"\n  // Output : \"1234567890\"\n\n  // Input : \"?><}{[]\"\n\
    \  // Output : \"?><}{[]\"\n\n  // Input : \"`~\"\n  // Output : \"`~\"\n\n  //\
    \ Input : \"abcdefghijklmnopqrstuvwxyz\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpmpjua2qc.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var alphabet = [\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
    x\", \"y\", \"z\"];\n    var newMessage = message.split(\"\");\n    for(var i\
    \ = 0; i < newMessage.length; i++){\n        var code = newMessage[i].charCodeAt(0);\n\
    \        if(code >= 65 && code <= 90){\n            newMessage[i] = newMessage[i].toLowerCase();\n\
    \        }\n        else if(code >= 97 && code <= 122){\n            newMessage[i]\
    \ = newMessage[i].toUpperCase();\n        }\n        if(vowels.indexOf(newMessage[i])\
    \ > -1){\n            var index = alphabet.indexOf(newMessage[i]);\n         \
    \   newMessage[i] = alphabet[index + 2];\n        }\n    }\n    return newMessage.join(\"\
    \");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpu6mo4ufw.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu6mo4ufw.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var result\
    \ = '';\n  var vowels = ['a', 'e', 'i', 'o', 'u'];\n  var swap = {\n    'a': 'c',\n\
    \    'e': 'g',\n    'i': 'k',\n    'o': 'q',\n    'u': 'y'\n  };\n  for (var i\
    \ = 0; i < message.length; i++) {\n    var char = message[i];\n    if (vowels.indexOf(char)\
    \ !== -1) {\n      result += swap[char];\n    } else if (char.toUpperCase() ===\
    \ char) {\n      result += char.toLowerCase();\n    } else {\n      result +=\
    \ char.toUpperCase();\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl7vkjlkx.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpl7vkjlkx.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar \
    \ newArr = [];\n\tvar vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tmessage\
    \ = message.toLowerCase();\n\tfor(var i = 0; i < message.length; i++){\n\t\tif(message[i]\
    \ == message[i].toUpperCase()){\n\t\t\tnewArr.push(message[i].toLowerCase());\n\
    \t\t} else if(message[i] == message[i].toLowerCase()){\n\t\t\tnewArr.push(message[i].toUpperCase());\n\
    \t\t} else if(vowels.indexOf(message[i]) > -1){\n\t\t\tvar index = vowels.indexOf(message[i]);\n\
    \t\t\tnewArr.push(vowels[index + 2]);\n\t\t}\n\t}\n\treturn newArr.join(\"\");\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvaursick.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvaursick.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar res='';\n\
    \tfor(var i=0;i<message.length;i++){\n\t\tif(message[i]==='a'){\n\t\t\tres+='c';\n\
    \t\t}\n\t\telse if(message[i]==='e'){\n\t\t\tres+='g';\n\t\t}\n\t\telse if(message[i]==='i'){\n\
    \t\t\tres+='k';\n\t\t}\n\t\telse if(message[i]==='o'){\n\t\t\tres+='q';\n\t\t\
    }\n\t\telse if(message[i]==='u'){\n\t\t\tres+='s';\n\t\t}\n\t\telse if(message[i]==='\
    \ '){\n\t\t\tres+=' ';\n\t\t}\n\t\telse if(message[i]==='A'){\n\t\t\tres+='C';\n\
    \t\t}\n\t\telse if(message[i]==='E'){\n\t\t\tres+='G';\n\t\t}\n\t\telse if(message[i]==='I'){\n\
    \t\t\tres+='K';\n\t\t}\n\t\telse if(message[i]==='O'){\n\t\t\tres+='Q';\n\t\t\
    }\n\t\telse if(message[i]==='U'){\n\t\t\tres+='S';\n\t\t}\n\t\telse if(message[i]==='b'){\n\
    \t\t\tres+='a';\n\t\t}\n\t\telse if(message[i]==='c'){\n\t\t\tres+='b';\n\t\t\
    }\n\t\telse if(message[i]==='d'){\n\t\t\tres+='e';\n\t\t}\n\t\telse if(message[i]==='f'){\n\
    \t\t\tres+='i';\n\t\t}\n\t\telse if(message[i]==='g'){\n\t\t\tres+='h';\n\t\t\
    }\n\t\telse if(message[i]==='h'){\n\t\t\tres+='f';\n\t\t}\n\t\telse if(message[i]==='j')\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2tz9j3k6.js:62\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar result\
    \ = \"\";\n\tvar vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tvar vowelsUp\
    \ = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n\tvar alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    .split(\"\");\n\tvar alphabetUp = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n\
    \tfor (var i = 0; i < message.length; i++) {\n\t\tvar curChar = message[i];\n\t\
    \tif (curChar == curChar.toUpperCase()) {\n\t\t\tif (vowelsUp.indexOf(curChar)\
    \ > -1) {\n\t\t\t\tresult += alphabetUp[vowelsUp.indexOf(curChar) + 2];\n\t\t\t\
    } else {\n\t\t\t\tif (alphabetUp.indexOf(curChar) > -1) {\n\t\t\t\t\tresult +=\
    \ alphabet[alphabetUp.indexOf(curChar)];\n\t\t\t\t} else {\n\t\t\t\t\tresult +=\
    \ curChar;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (vowels.indexOf(curChar)\
    \ > -1) {\n\t\t\t\tresult += alphabet[vowels.indexOf(curChar) + 2];\n\t\t\t} else\
    \ {\n\t\t\t\tif (alphabet.indexOf(curChar) > -1) {\n\t\t\t\t\tresult += alphabetUp[alphabet.indexOf(curChar)];\n\
    \t\t\t\t} else {\n\t\t\t\t\tresult += curChar;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn result;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tDst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpkieulobb.js:44:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpkieulobb.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tDst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  message\
    \ = message.toLowerCase();\n  var arr = message.split(\"\");\n  var vowels = \"\
    aeiou\";\n  var result = \"\";\n  for(var i = 0; i < arr.length; i++){\n    if(vowels.indexOf(arr[i])\
    \ !== -1){\n      var nextLetter = arr[i];\n      for(var j = 0; j < 2; j++){\n\
    \        if(nextLetter === \"u\"){\n          nextLetter = \"a\";\n        } else\
    \ {\n          nextLetter = String.fromCharCode(nextLetter.charCodeAt(0) + 1);\n\
    \        }\n      }\n      result += nextLetter;\n    } else {\n      if(arr[i]\
    \ === arr[i].toUpperCase()){\n        result += arr[i].toLowerCase();\n      }\
    \ else {\n        result += arr[i].toUpperCase();\n      }\n    }\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TgST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpon1mxk9z.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpon1mxk9z.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TgST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar chars\
    \ = message.split(\"\");\n\tvar newChars = [];\n\tfor(var i = 0; i < chars.length;\
    \ i++){\n\t\tvar code = chars[i].charCodeAt(0);\n\t\tif(code >= 65 && code <=\
    \ 90){\n\t\t\tcode += 32;\n\t\t}else if(code >= 97 && code <= 122){\n\t\t\tcode\
    \ -= 32;\n\t\t}\n\t\tnewChars.push(String.fromCharCode(code));\n\t}\n\treturn\
    \ newChars.join(\"\");\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzcx8pli9.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpzcx8pli9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var messageSplit\
    \ = message.split(\"\");\n  var alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\
    \");\n  var encodedMessage = \"\";\n  for (var i = 0; i < messageSplit.length;\
    \ i++) {\n    var c = messageSplit[i];\n    if (alphabet.indexOf(c) > -1){\n \
    \     if (c.toUpperCase() === c){\n        var uppercase = true;\n      }\n  \
    \    c = c.toLowerCase();\n      if (uppercase){\n        var currentIndex = alphabet.indexOf(c);\n\
    \        var nextIndex = currentIndex + 2;\n        if (nextIndex > alphabet.length\
    \ - 1){\n          nextIndex = nextIndex - alphabet.length;\n        }\n     \
    \   c = alphabet[nextIndex].toUpperCase();\n      }\n      else {\n        var\
    \ currentIndex = alphabet.indexOf(c);\n        var nextIndex = currentIndex +\
    \ 2;\n        if (nextIndex > alphabet.length - 1){\n          nextIndex = nextIndex\
    \ - alphabet.length;\n        }\n        c = alphabet[nextIndex];\n      }\n \
    \   }\n    encodedMessage += c;\n  }\n  return encodedMessage;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmptzcvekr5.js:44:10)\n    at\
    \ Object.<anonymous> (/tmp/tmptzcvekr5.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ lowerMessage = message.toLowerCase();\n    var encodedMessage = \"\";\n    for(var\
    \ i = 0; i < lowerMessage.length; i++){\n        var c = lowerMessage.charAt(i);\n\
    \        if(isVowel(c)){\n            c = encodeVowel(c);\n        } else {\n\
    \            c = encodeConsonant(c);\n        }\n        encodedMessage += c;\n\
    \    }\n    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp79bas9u_.js:12\n        if(isVowel(c)){\n        ^\n\nReferenceError:\
    \ isVowel is not defined\n    at encode (/tmp/tmp79bas9u_.js:12:9)\n    at test\
    \ (/tmp/tmp79bas9u_.js:27:20)\n    at Object.<anonymous> (/tmp/tmp79bas9u_.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    let\
    \ encodedMessage = \"\";\n    let vowels = {\n        a: 'c',\n        e: 'g',\n\
    \        i: 'k',\n        o: 'q',\n        u: 'y'\n    }\n    for(let i = 0; i\
    \ < message.length; i++){\n        //if it's a vowel, we're going to change it\n\
    \        if(vowels[message[i]]){\n            encodedMessage += vowels[message[i]];\n\
    \        }\n        //if not, we're going to change the case\n        else{\n\
    \            if(message[i] == message[i].toUpperCase()){\n                encodedMessage\
    \ += message[i].toLowerCase();\n            }\n            else{\n           \
    \     encodedMessage += message[i].toUpperCase();\n            }\n        }\n\
    \    }\n    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpyuyn2sff.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpyuyn2sff.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ m = message.toLowerCase();\n    var vowels = 'aeiou';\n    var encoded = '';\n\
    \    var offset = 2;\n    var code = String.fromCharCode;\n    for(var i = 0;\
    \ i < m.length; i++){\n        if(vowels.indexOf(m[i]) === -1){\n            if(m[i]\
    \ === 'z'){\n                encoded += 'b';\n            } else if(m[i] === '\
    \ '){\n                encoded += ' ';\n            } else {\n               \
    \ encoded += code(m[i].charCodeAt(0) + offset);\n            }\n        } else\
    \ {\n            encoded += m[i];\n        }\n    }\n    return encoded;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'veuv'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5dd2z2wg.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5dd2z2wg.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'veuv',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n  let encodedMessage = '';\n  for (var i = 0;\
    \ i < message.length; i++) {\n    let currentLetter = message[i];\n    if (vowels.includes(currentLetter))\
    \ {\n      let newIndex = vowels.indexOf(currentLetter) + 2;\n      if (newIndex\
    \ > 4) {\n        newIndex = newIndex - 5;\n      }\n      encodedMessage += vowels[newIndex];\n\
    \    } else if (currentLetter === currentLetter.toUpperCase()) {\n      encodedMessage\
    \ += currentLetter.toLowerCase();\n    } else {\n      encodedMessage += currentLetter.toUpperCase();\n\
    \    }\n  }\n  return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp42jdt7rn.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp42jdt7rn.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar lowStr\
    \ = message.toLowerCase();\n\tvar alpha = \"abcdefghijklmnopqrstuvwxyz\";\n\t\
    var newStr = '';\n\tfor(var i = 0; i < lowStr.length; i++){\n\t\tvar index = alpha.indexOf(lowStr[i]);\n\
    \t\tif(index != -1){\n\t\t\tindex += 2;\n\t\t\tindex %= alpha.length;\n\t\t\t\
    newStr += alpha[index];\n\t\t} else {\n\t\t\tnewStr += lowStr[i];\n\t\t}\n\t}\n\
    \treturn newStr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'vguv'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpx1w0frw8.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpx1w0frw8.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'vguv',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    //loop\
    \ over message\n    //is it uppercase?\n    //if yes, make it lowercase\n    //if\
    \ no, make it uppercase\n    //does it have a vowel?\n    //if yes, replace with\
    \ next 2 letters\n    //if no, leave it alone\n    var encodedMessage = \"\";\n\
    \    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var vowels = \"aeiou\"\
    ;\n    for(var i = 0; i < message.length; i++){\n        var currentLetter = message[i];\n\
    \        var isUpperCase = currentLetter === currentLetter.toUpperCase();\n  \
    \      var isVowel = vowels.indexOf(currentLetter.toLowerCase()) !== -1;\n   \
    \     if(isUpperCase){\n            // encode it\n            var index = alphabet.indexOf(currentLetter.toLowerCase());\n\
    \            encodedMessage += alphabet[index].toUpperCase();\n        } else\
    \ {\n            encodedMessage += currentLetter;\n        }\n        if(isVowel){\n\
    \            var index = vowels.indexOf(currentLetter.toLowerCase());\n      \
    \      var newIndex = index + 2;\n            encodedMessage += vowels[newIndex];\n\
    \        }\n    }\n    return encodedMessage;\n}\nvar input = \"hello darkness,\
    \ my old friend\";\nvar result = encode(input);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpkye2xi_y.js:25\n            encodedMessage += alphabet[index].toUpperCase();\n\
    \                                              ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'toUpperCase')\n    at encode (/tmp/tmpkye2xi_y.js:25:47)\n\
    \    at Object.<anonymous> (/tmp/tmpkye2xi_y.js:38:14)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n  var result = \"\";\n  for(var i = 0; i\
    \ < message.length; i++){\n    if(message[i] === message[i].toUpperCase()){\n\
    \      var index = alphabet.indexOf(message[i].toLowerCase());\n      if(index\
    \ > 22){\n        result += alphabet[index + 2 - 26].toUpperCase();\n      }else{\n\
    \        result += alphabet[index + 2].toUpperCase();\n      }\n    }else{\n \
    \     var index = alphabet.indexOf(message[i]);\n      if(index > 22){\n     \
    \   result += alphabet[index + 2 - 26];\n      }else{\n        result += alphabet[index\
    \ + 2];\n      }\n    }\n  }\n  return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp3lsdt92a.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp3lsdt92a.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    message\
    \ = message.toLowerCase();\n    var arr = message.split(\"\");\n    var vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var encodeArr = [];\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(vowels.indexOf(arr[i]) !== -1){\n \
    \           var idx = (vowels.indexOf(arr[i]) + 2) % 5;\n            encodeArr.push(vowels[idx]);\n\
    \        }\n        else{\n            encodeArr.push(arr[i]);\n        }\n  \
    \  }\n    return encodeArr.join(\"\");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpq0iv7vq5.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpq0iv7vq5.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var lowerCase\
    \ = message.toLowerCase();\n  var vowelPos = [];\n  var encoded = \"\";\n  for(var\
    \ i = 0; i < lowerCase.length; i++){\n    if(lowerCase[i] === \"a\" || lowerCase[i]\
    \ === \"e\" || lowerCase[i] === \"i\" || lowerCase[i] === \"o\" || lowerCase[i]\
    \ === \"u\"){\n      vowelPos.push(i);\n    }\n  }\n  for(var j = 0; j < lowerCase.length;\
    \ j++){\n    if(lowerCase[j] === lowerCase[j].toUpperCase()){\n      encoded +=\
    \ lowerCase[j].toLowerCase();\n    } else {\n      encoded += lowerCase[j].toUpperCase();\n\
    \    }\n  }\n  for(var k = 0; k < vowelPos.length; k++){\n    if(encoded[vowelPos[k]]\
    \ === \"a\"){\n      encoded = encoded.slice(0, vowelPos[k]) + \"c\" + encoded.slice(vowelPos[k]\
    \ + 1);\n    } else if(encoded[vowelPos[k]] === \"e\"){\n      encoded = encoded.slice(0,\
    \ vowelPos[k]) + \"i\" + encoded.slice(vowelPos[k] + 1);\n    } else if(encoded[vowelPos[k]]\
    \ === \"i\"){\n      encoded = encoded.slice(0, vowelPos[k]) + \"o\" + encoded.slice(vowelPos[k]\
    \ + 1);\n    } else if(encoded[vowelPos[k]] === \"o\"){\n      encoded = encoded.slice(0,\
    \ vowelPos[k]) + \"u\" + encoded.slice(vowelPos[k] + 1);\n    } else if(encoded[vowelPos[k]]\
    \ === \"u\"){\n      encoded = encoded.slice(0, vowelPos[k]) + \"a\" + encoded.slice(vowelPos[k]\
    \ + 1);\n    }\n  }\n  return encoded;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpchg0navt.js:43:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpchg0navt.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar vowels\
    \ = \"aeiou\";\n\tvar result = \"\";\n\tfor(var i = 0; i < message.length; i++){\n\
    \t\tif(vowels.indexOf(message[i]) != -1){\n\t\t\tvar index = vowels.indexOf(message[i]);\n\
    \t\t\tif(index == 4){\n\t\t\t\tresult += vowels[0];\n\t\t\t}else{\n\t\t\t\tresult\
    \ += vowels[index + 2];\n\t\t\t}\n\t\t}else{\n\t\t\tresult += message[i];\n\t\t\
    }\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppbkqp9ms.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmppbkqp9ms.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    message\
    \ = message.toLowerCase();\n    // message = message.replace(/[^a-z]/g, '');\n\
    \    message = message.replace(/[^a-z]/g, '');\n    var encodedMessage = '';\n\
    \    for(var i = 0; i < message.length; i++){\n        var char = message[i];\n\
    \        var encodedChar = '';\n        if(char === char.toUpperCase()){\n   \
    \         encodedChar = char.toLowerCase();\n        } else {\n            encodedChar\
    \ = char.toUpperCase();\n        }\n        encodedMessage += encodedChar;\n \
    \   }\n    encodedMessage = encodedMessage.replace(/[aeiou]/g, function(match){\n\
    \        var index = 'aeiou'.indexOf(match);\n        return 'aeiou'[(index +\
    \ 2) % 5];\n    });\n    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8_pq54hx.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8_pq54hx.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ str1 = message.toLowerCase().split('')\n    var vowels = ['a','e','i','o','u']\n\
    \    var alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    var encoded = ''\n    for(var i = 0; i < str1.length; i++){\n        if(vowels.indexOf(str1[i])\
    \ !== -1){\n            encoded += alphabet[(alphabet.indexOf(str1[i]) + 2) %\
    \ 26]\n        }\n        else if(str1[i] === str1[i].toUpperCase()){\n      \
    \      encoded += str1[i].toLowerCase()\n        }\n        else if(str1[i] ===\
    \ str1[i].toLowerCase()){\n            encoded += str1[i].toUpperCase()\n    \
    \    }\n    }\n    return encoded\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TgST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpy_ii82wn.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpy_ii82wn.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TgST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n  var vowels = 'aeiou';\n  var encodedStr =\
    \ '';\n  for(var i = 0; i < message.length; i++){\n    var currentChar = message[i];\n\
    \    var currentCharIndex = alphabet.indexOf(currentChar);\n    if(currentCharIndex\
    \ === -1){\n      encodedStr += currentChar;\n    } else {\n      var nextCharIndex\
    \ = (currentCharIndex + 2) % alphabet.length;\n      var encodedChar = alphabet[nextCharIndex];\n\
    \      if(vowels.indexOf(currentChar) !== -1){\n        encodedChar = encodedChar.toUpperCase();\n\
    \      }\n      encodedStr += encodedChar;\n    }\n  }\n  return encodedStr;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpap6p22yi.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpap6p22yi.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = 'aeiouAEIOU';\n    var encoded = '';\n    for(var i = 0; i < message.length;\
    \ i++){\n        var curr = message[i];\n        if(vowels.indexOf(curr) >= 0){\n\
    \            var index = vowels.indexOf(curr);\n            var newLetter = vowels[index\
    \ + 2];\n            encoded += newLetter;\n        } else if(curr >= 'A' && curr\
    \ <= 'Z'){\n            encoded += curr.toLowerCase();\n        } else if(curr\
    \ >= 'a' && curr <= 'z'){\n            encoded += curr.toUpperCase();\n      \
    \  } else {\n            encoded += curr;\n        }\n    }\n    return encoded;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpc26ef52t.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpc26ef52t.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ result = '';\n    var vowels = 'aeiouAEIOU';\n    for(var i = 0; i < message.length;\
    \ i++){\n        var c = message[i];\n        if(vowels.indexOf(c) >= 0){\n  \
    \          //get the offset from A\n            var offset = c.charCodeAt(0) -\
    \ 'A'.charCodeAt(0);\n            //add the offset to the alphabet\n         \
    \   offset = (offset + 2) % 26;\n            //convert the value back to character\n\
    \            result += String.fromCharCode('A'.charCodeAt(0) + offset);\n    \
    \    }else{\n            result += c;\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpq5n4o73o.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpq5n4o73o.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var numbers = [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 0];\n    var specialChars = [\"!\", \"@\", \"#\", \"$\", \"%\"\
    , \"^\", \"&\", \"*\", \"(\", \")\", \"[\", \"]\", \"?\"];\n    var encodedMessage\
    \ = \"\";\n    for(var i = 0; i < message.length; i++){\n        if(vowels.indexOf(message[i])\
    \ != -1){\n            if(vowels.indexOf(message[i]) + 2 > vowels.length - 1){\n\
    \                var swap = vowels.indexOf(message[i]) + 2 - vowels.length;\n\
    \                encodedMessage += vowels[swap];\n            }\n            else{\n\
    \                encodedMessage += vowels[vowels.indexOf(message[i]) + 2];\n \
    \           }\n        }\n        else if(numbers.indexOf(message[i]) != -1){\n\
    \            encodedMessage += numbers[numbers.indexOf(message[i]) + 2];\n   \
    \     }\n        else if(specialChars.indexOf(message[i]) != -1){\n          \
    \  encodedMessage += specialChars[specialChars.indexOf(message[i]) + 2];\n   \
    \     }\n        else if(message[i] == message[i].toUpperCase()){\n          \
    \  var swap = message[i].toLowerCase();\n            encodedMessage += swap.toUpperCase();\n\
    \        }\n        else{\n            encodedMessage += message[i].toUpperCase();\n\
    \        }\n    }\n    return encodedMessage;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpe39uq5m6.js:43:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpe39uq5m6.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar vowels\
    \ = ['a','e','i','o','u','A','E','I','O','U'];\n\tvar encodedMessage = '';\n\t\
    for(var i = 0; i < message.length; i++){\n\t\tvar letter = message[i];\n\t\tvar\
    \ isUpperCase = false;\n\t\tvar isVowel = false;\n\t\tif(letter == letter.toUpperCase()){\n\
    \t\t\tisUpperCase = true;\n\t\t}\n\t\tfor(var j = 0; j < vowels.length; j++){\n\
    \t\t\tif(letter === vowels[j]){\n\t\t\t\tisVowel = true;\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t}\n\t\tif(isVowel){\n\t\t\tif(isUpperCase){\n\t\t\t\tencodedMessage +=\
    \ String.fromCharCode(vowels[j].charCodeAt(0) + 2).toUpperCase();\n\t\t\t}else{\n\
    \t\t\t\tencodedMessage += String.fromCharCode(vowels[j].charCodeAt(0) + 2);\n\t\
    \t\t}\n\t\t}else{\n\t\t\tif(isUpperCase){\n\t\t\t\tencodedMessage += letter.toLowerCase();\n\
    \t\t\t}else{\n\t\t\t\tencodedMessage += letter.toUpperCase();\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tGst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvetccfxj.js:45:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvetccfxj.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar e\
    \ = message.split(\"\");\n\tvar vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \tfor(var i = 0; i < e.length; i++){\n\t\tif(e[i] === e[i].toUpperCase()){\n\t\
    \t\te[i] = e[i].toLowerCase();\n\t\t}else{\n\t\t\te[i] = e[i].toUpperCase();\n\
    \t\t}\n\t\tfor(var j = 0; j < vowels.length; j++){\n\t\t\tif(e[i] === vowels[j]){\n\
    \t\t\t\tif(e[i] === \"u\"){\n\t\t\t\t\te[i] = \"a\";\n\t\t\t\t}else{\n\t\t\t\t\
    \te[i] = vowels[j+1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn e.join(\"\");\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tast'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpajnewbts.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpajnewbts.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tast',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ lower = \"abcdefghijklmnopqrstuvwxyz\";\n    var upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    var vowels = \"aeiou\";\n    var newMessage = \"\";\n    for(var i = 0;\
    \ i < message.length; i++){\n        var newChar = message[i];\n        var lowerIndex\
    \ = lower.indexOf(message[i]);\n        var upperIndex = upper.indexOf(message[i]);\n\
    \        if(lowerIndex === -1 && upperIndex === -1){\n            newMessage +=\
    \ newChar;\n        }\n        else if(lowerIndex !== -1){\n            if(lowerIndex\
    \ === 25){\n                newChar = lower[0];\n            }\n            else\
    \ if(lowerIndex === 24){\n                newChar = lower[1];\n            }\n\
    \            else{\n                newChar = lower[lowerIndex + 2];\n       \
    \     }\n            if(vowels.indexOf(newChar) !== -1){\n                newChar\
    \ = lower[(lower.indexOf(newChar) + 1) % 26];\n            }\n            newMessage\
    \ += newChar;\n        }\n        else if(upperIndex !== -1){\n            if(upperIndex\
    \ === 25){\n                newChar = upper[0];\n            }\n            else\
    \ if(upperIndex === 24){\n                newChar = upper[1];\n            }\n\
    \            else{\n                newChar = upper[upperIndex + 2];\n       \
    \     }\n            if(vowels.indexOf(newChar) !== -1){\n                newChar\
    \ = upper[(upper.indexOf(newChar) + 1) % 26];\n            }\n            newMessage\
    \ += newChar;\n        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpugwineb7.js:58:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpugwineb7.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n        if(message[i]\
    \ === message[i].toUpperCase()){\n            newMessage += message[i].toLowerCase();\n\
    \        } else {\n            newMessage += message[i].toUpperCase();\n     \
    \   }\n    }\n    return newMessage;\n}\n\nvar vowels = {\n    \"a\": \"c\",\n\
    \    \"e\": \"g\",\n    \"i\": \"k\",\n    \"o\": \"q\",\n    \"u\": \"y\"\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp_d6dkwrh.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_d6dkwrh.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var index\
    \ = 0;\n  var encodedMessage = \"\";\n  while(index < message.length){\n    var\
    \ character = message[index];\n    var asciiNumber = character.charCodeAt(0);\n\
    \    if(asciiNumber >= 97 && asciiNumber <= 122){\n      encodedMessage += String.fromCharCode(asciiNumber\
    \ - 32);\n    } else if(asciiNumber >= 65 && asciiNumber <= 90){\n      encodedMessage\
    \ += String.fromCharCode(asciiNumber + 32);\n    } else if(character == \"a\"\
    ){\n      encodedMessage += \"c\";\n    } else if(character == \"e\"){\n     \
    \ encodedMessage += \"g\";\n    } else if(character == \"i\"){\n      encodedMessage\
    \ += \"k\";\n    } else if(character == \"o\"){\n      encodedMessage += \"q\"\
    ;\n    } else if(character == \"u\"){\n      encodedMessage += \"y\";\n    } else\
    \ {\n      encodedMessage += character;\n    }\n    index += 1;\n  }\n  return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmd1ozzyz.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpmd1ozzyz.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = 'aeiou';\n    var newMessage = '';\n    for(var i = 0; i < message.length;\
    \ i++){\n        if(vowels.indexOf(message[i]) > -1){\n            newMessage\
    \ += vowels[(vowels.indexOf(message[i]) + 2) % 5];\n        }\n        else if(message[i]\
    \ === message[i].toUpperCase()){\n            newMessage += message[i].toLowerCase();\n\
    \        }\n        else if(message[i] === message[i].toLowerCase()){\n      \
    \      newMessage += message[i].toUpperCase();\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpo4lbsa8s.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpo4lbsa8s.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n        if(message[i]\
    \ == \"a\"){\n            newMessage += \"c\";\n        }\n        else if(message[i]\
    \ == \"e\"){\n            newMessage += \"g\";\n        }\n        else if(message[i]\
    \ == \"i\"){\n            newMessage += \"k\";\n        }\n        else if(message[i]\
    \ == \"o\"){\n            newMessage += \"q\";\n        }\n        else if(message[i]\
    \ == \"u\"){\n            newMessage += \"y\";\n        }\n        else if(message[i]\
    \ == \"A\"){\n            newMessage += \"C\";\n        }\n        else if(message[i]\
    \ == \"E\"){\n            newMessage += \"G\";\n        }\n        else if(message[i]\
    \ == \"I\"){\n            newMessage += \"K\";\n        }\n        else if(message[i]\
    \ == \"O\"){\n            newMessage += \"Q\";\n        }\n        else if(message[i]\
    \ == \"U\"){\n            newMessage += \"Y\";\n        }\n        else if(message[i]\
    \ === message[i].toUpperCase()){\n            newMessage += message[i].toLowerCase();\n\
    \        }\n        else{\n            newMessage += message[i].toUpperCase();\n\
    \        }\n    }\n    return newMessage;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tGst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp1qu3bk5b.js:54:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1qu3bk5b.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ encoded = \"\";\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n   \
    \ var swap = [\"b\", \"f\", \"j\", \"p\", \"v\"];\n    for(var i = 0; i < message.length;\
    \ i++){\n        var letter = message[i];\n        if(letter >= \"a\" && letter\
    \ <= \"z\"){\n            var index = vowels.indexOf(letter);\n            if(index\
    \ >= 0){\n                letter = swap[index];\n            }\n            else{\n\
    \                var swapIndex = swap.indexOf(letter);\n                if(swapIndex\
    \ >= 0){\n                    letter = vowels[swapIndex];\n                }\n\
    \                else{\n                    letter = letter.toUpperCase();\n \
    \               }\n            }\n        }\n        else if(letter >= \"A\" &&\
    \ letter <= \"Z\"){\n            var index = vowels.indexOf(letter.toLowerCase());\n\
    \            if(index >= 0){\n                letter = swap[index].toUpperCase();\n\
    \            }\n            else{\n                var swapIndex = swap.indexOf(letter.toLowerCase());\n\
    \                if(swapIndex >= 0){\n                    letter = vowels[swapIndex].toUpperCase();\n\
    \                }\n                else{\n                    letter = letter.toLowerCase();\n\
    \                }\n            }\n        }\n        encoded += letter;\n   \
    \ }\n    return encoded;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tFst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0_t0x0f4.js:53:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0_t0x0f4.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tFst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = 'aeiou'\n    var letters = 'abcdefghijklmnopqrstuvwxyz'\n    var specialChar\
    \ = ' '\n    var messageArr = message.split('')\n    var result = []\n    for(var\
    \ i = 0; i < messageArr.length; i++){\n        var index = letters.indexOf(messageArr[i])\n\
    \        if(letters.indexOf(messageArr[i]) == -1){\n            result.push(messageArr[i])\n\
    \        } else if(vowels.indexOf(messageArr[i]) != -1){\n            var newIndex\
    \ = (index + 2) % vowels.length\n            result.push(vowels[newIndex])\n \
    \       } else {\n            var newIndex = (index + 2) % letters.length\n  \
    \          result.push(letters[newIndex])\n        }\n    }\n    return result.join('')\n\
    }\n\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpa3r9nat7.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpa3r9nat7.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    //\
    \ create a variable to hold the english alphabet\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    // create a variable to hold the encoded message\n    var encoded = \"\"\
    ;\n    // loop through the characters in the message\n    for(i=0; i<message.length;\
    \ i++){\n        // if the character is a letter\n        if(isLetter(message[i])){\n\
    \            // get the index of the letter in the alphabet\n            var index\
    \ = alphabet.indexOf(message[i].toLowerCase());\n            // if the index of\
    \ the letter is a vowel\n            if(isVowel(index)){\n                // encode\
    \ the vowel by moving it 2 spots ahead\n                encoded += alphabet[index+2];\n\
    \            } else {\n                // if the index of the letter is a consonant\n\
    \                // encode the consonant by toggling the case\n              \
    \  if(message[i] == message[i].toUpperCase()){\n                    encoded +=\
    \ alphabet[index].toLowerCase();\n                } else {\n                 \
    \   encoded += alphabet[index].toUpperCase();\n                }\n           \
    \ }\n        } else {\n            // if the character is not a letter, leave\
    \ it\n            encoded += message[i];\n        }\n    }\n    // return the\
    \ encoded message\n    return encoded;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9yl2rjrw.js:15\n        if(isLetter(message[i])){\n        ^\n\n\
    ReferenceError: isLetter is not defined\n    at encode (/tmp/tmp9yl2rjrw.js:15:9)\n\
    \    at test (/tmp/tmp9yl2rjrw.js:45:20)\n    at Object.<anonymous> (/tmp/tmp9yl2rjrw.js:52:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ output = \"\";\n    var vowels = \"aeiou\";\n    var alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    var alpha_arr = alpha.split(\"\");\n    var arr = message.split(\"\");\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(vowels.indexOf(arr[i]) !=\
    \ -1){\n            output += alpha_arr[alpha.indexOf(arr[i]) + 2];\n        }\n\
    \        else{\n            output += arr[i];\n        }\n    }\n    return output;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmplh5w1fm0.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmplh5w1fm0.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = \"aeiou\";\n    var newMessage = \"\";\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for(var i = 0; i < message.length; i++){\n        var char = message[i];\n\
    \        var index = vowels.indexOf(char);\n        if(index != -1){\n       \
    \     var nextChar = vowels[(index + 2) % vowels.length];\n            newMessage\
    \ += nextChar;\n        } else {\n            if(char === char.toUpperCase()){\n\
    \                newMessage += char.toLowerCase();\n            } else {\n   \
    \             newMessage += char.toUpperCase();\n            }\n        }\n  \
    \  }\n    return newMessage;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpgsfd1g3j.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgsfd1g3j.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = 'aeiouAEIOU'\n    var newMsg = ''\n    for(var i = 0; i < message.length;\
    \ i++){\n        var char = message[i]\n        if(vowels.includes(char)){\n \
    \           var index = vowels.indexOf(char)\n            if(index < 21){\n  \
    \              newMsg += vowels[index + 2]\n            }else{\n             \
    \   newMsg += vowels[index - 8]\n            }\n        }else{\n            if(char\
    \ === char.toUpperCase()){\n                newMsg += char.toLowerCase()\n   \
    \         }else{\n                newMsg += char.toUpperCase()\n            }\n\
    \        }\n    }\n    return newMsg\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpcsvctbr3.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpcsvctbr3.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var message\
    \ = message.toLowerCase();\n  var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n \
    \ var encoded = '';\n  for (var i = 0; i < message.length; i++) {\n    if (message[i]\
    \ === 'a') {\n      encoded += 'c';\n    } else if (message[i] === 'e') {\n  \
    \    encoded += 'g';\n    } else if (message[i] === 'i') {\n      encoded += 'k';\n\
    \    } else if (message[i] === 'o') {\n      encoded += 'q';\n    } else if (message[i]\
    \ === 'u') {\n      encoded += 'y';\n    } else {\n      var index = alphabet.indexOf(message[i]);\n\
    \      if (index % 2 === 0) {\n        encoded += alphabet[index + 1].toUpperCase();\n\
    \      } else {\n        encoded += alphabet[index - 1].toUpperCase();\n     \
    \ }\n    }\n  }\n  return encoded;\n}\n\nencode('This is a string');\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp2oy1fp0o.js:27\n        encoded += alphabet[index - 1].toUpperCase();\n\
    \                                       ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'toUpperCase')\n    at encode (/tmp/tmp2oy1fp0o.js:27:40)\n\
    \    at Object.<anonymous> (/tmp/tmp2oy1fp0o.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowelList = \"aeiouAEIOU\"\n    var newMessage = \"\"\n    for (var i = 0; i\
    \ < message.length; i++){\n        if (message[i] !== \" \"){\n            if\
    \ (message[i] === message[i].toUpperCase()){\n                var newLetter =\
    \ message[i].toLowerCase()\n                newMessage += newLetter\n        \
    \    }\n            else {\n                var newLetter = message[i].toUpperCase()\n\
    \                newMessage += newLetter\n            }\n        }\n        else\
    \ {\n            newMessage += \" \"\n        }\n    }\n    for (var i = 0; i\
    \ < newMessage.length; i++){\n        if (vowelList.includes(newMessage[i])){\n\
    \            var newLetter = vowelList[vowelList.indexOf(newMessage[i]) + 3]\n\
    \            newMessage = newMessage.slice(0, i) + newLetter + newMessage.slice(i\
    \ + 1)\n        }\n    }\n    return newMessage\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tust'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxyvmkzsb.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxyvmkzsb.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tust',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var vowels\
    \ = 'aeiou';\n  var coded = '';\n  for (var i = 0; i < message.length; i++) {\n\
    \    var currentChar = message[i];\n    if (vowels.indexOf(currentChar) > -1)\
    \ {\n      var nextChar = String.fromCharCode(currentChar.charCodeAt(0) + 2);\n\
    \      coded += nextChar;\n    } else {\n      coded += currentChar;\n    }\n\
    \  }\n  return coded;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpv1f54sp0.js:26:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpv1f54sp0.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar vowels\
    \ = \"aeiou\";\n\tvar encoded = \"\";\n\tfor(var i = 0; i < message.length; i++){\n\
    \t\tvar letter = message[i];\n\t\tvar encoded_letter = letter;\n\t\tif(vowels.indexOf(letter.toLowerCase())\
    \ > -1){\n\t\t\tvar newIndex = vowels.indexOf(letter.toLowerCase()) + 2;\n\t\t\
    \tif(newIndex > vowels.length - 1){\n\t\t\t\tnewIndex = newIndex - vowels.length;\n\
    \t\t\t}\n\t\t\tencoded_letter = vowels[newIndex];\n\t\t}\n\t\tif(letter === letter.toUpperCase()){\n\
    \t\t\tencoded_letter = encoded_letter.toUpperCase();\n\t\t}\n\t\telse{\n\t\t\t\
    encoded_letter = encoded_letter.toLowerCase();\n\t\t}\n\t\tencoded += encoded_letter;\n\
    \t}\n\treturn encoded;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpt89pyjq4.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpt89pyjq4.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ result = \"\";\n    var numbers = \"\";\n    var letters = \"\";\n    for(var\
    \ i = 0; i < message.length; i++){\n        if(message[i] >= '0' && message[i]\
    \ <= '9'){\n            numbers += message[i];\n        }else{\n            letters\
    \ += message[i];\n        }\n    }\n    for(var i = 0; i < letters.length; i++){\n\
    \        if(letters[i] == 'a' || letters[i] == 'A'){\n            result += 'c';\n\
    \        }else if(letters[i] == 'e' || letters[i] == 'E'){\n            result\
    \ += 'g';\n        }else if(letters[i] == 'i' || letters[i] == 'I'){\n       \
    \     result += 'k';\n        }else if(letters[i] == 'o' || letters[i] == 'O'){\n\
    \            result += 'q';\n        }else if(letters[i] == 'u' || letters[i]\
    \ == 'U'){\n            result += 'y';\n        }else if(letters[i] >= 'a' &&\
    \ letters[i] <= 'z'){\n            var value = letters[i].charCodeAt(0);\n   \
    \         if(value + 2 > 122){\n                value -= 23;\n            }else{\n\
    \                value += 2;\n            }\n            result += String.fromCharCode(value);\n\
    \        }else if(letters[i] >= 'A' && letters[i] <= 'Z'){\n            var value\
    \ = letters[i].charCodeAt(0);\n            if(value + 2 > 90){\n             \
    \   value -= 23;\n            }else{\n                value += 2;\n          \
    \  }\n            result += String.fromCharCode(value);\n        }\n    }\n  \
    \  return result += numbers;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VgUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpceuvvoqw.js:55:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpceuvvoqw.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VgUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ newMessage = \"\";\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \    var position = \"\";\n    for(var i = 0; i < message.length; i++){\n    \
    \    if(message[i] === message[i].toUpperCase()){\n            newMessage += message[i].toLowerCase();\n\
    \        } else {\n            newMessage += message[i].toUpperCase();\n     \
    \   }\n        for(var j = 0; j < vowels.length; j++){\n            if(newMessage[i]\
    \ === vowels[j]){\n                position = vowels.indexOf(vowels[j]);\n   \
    \             if(position >= 3){\n                    newMessage = newMessage.replace(vowels[j],\
    \ vowels[position-3]);\n                } else {\n                    newMessage\
    \ = newMessage.replace(vowels[j], vowels[position+2]);\n                }\n  \
    \          }\n        }\n    }\n    return newMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tast'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp0yp5borx.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0yp5borx.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tast',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var alphabet=\
    \ \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n  var vowels = \"aeiou\".split(\"\
    \");\n  var new_message = \"\";\n  for(var i = 0; i < message.length; i++){\n\
    \    if(!alphabet.includes(message[i])){\n      new_message += message[i];\n \
    \   }else if(vowels.includes(message[i])){\n      var index = (vowels.indexOf(message[i])\
    \ + 2) % 5;\n      new_message += vowels[index];\n    }else{\n      var index\
    \ = (alphabet.indexOf(message[i]) + 2) % 26;\n      new_message += alphabet[index];\n\
    \    }\n  }\n  return new_message;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpc2hlawos.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpc2hlawos.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\t\n\t\
    var newMessage = message.split(\"\");\n\tvar alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n\t\n\tfor(var i = 0; i < newMessage.length; i++){\n\t\tif(alphabet.indexOf(newMessage[i])\
    \ != -1){\n\t\t\tnewMessage[i] = alphabet[alphabet.indexOf(newMessage[i]) + 2];\n\
    \t\t}\n\t}\n\t\n\tfor(var i = 0; i < newMessage.length; i++){\n\t\tif(newMessage[i]\
    \ == \"a\" || newMessage[i] == \"e\" || newMessage[i] == \"i\" || newMessage[i]\
    \ == \"o\" || newMessage[i] == \"u\"){\n\t\t\tnewMessage[i] = alphabet[alphabet.indexOf(newMessage[i])\
    \ + 2];\n\t\t}\n\t}\n\t\n\tfor(var i = 0; i < newMessage.length; i++){\n\t\tif(alphabet.indexOf(newMessage[i])\
    \ != -1){\n\t\t\tnewMessage[i] = alphabet[alphabet.indexOf(newMessage[i]) + 2];\n\
    \t\t}\n\t}\n\treturn newMessage.join(\"\");\n}\nencode(\"john\");\nencode(\"jane\"\
    );\nencode(\"james\");\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp46jm53u3.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp46jm53u3.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n   var\
    \ messageArray = message.split(\"\");\n   var vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n   var vowels = [\"b\", \"f\", \"j\", \"p\", \"v\"];\n   var vowels\
    \ = [\"c\", \"g\", \"k\", \"q\", \"w\"];\n   var vowels = [\"d\", \"h\", \"l\"\
    , \"r\", \"x\"];\n   var vowels = [\"e\", \"i\", \"m\", \"s\", \"y\"];\n   var\
    \ vowels = [\"f\", \"j\", \"n\", \"t\", \"z\"];\n   var vowels = [\"g\", \"k\"\
    , \"o\", \"u\", \"a\"];\n   var vowels = [\"h\", \"l\", \"p\", \"v\", \"b\"];\n\
    \   var vowels = [\"i\", \"m\", \"q\", \"w\", \"c\"];\n   var vowels = [\"j\"\
    , \"n\", \"r\", \"x\", \"d\"];\n   var vowels = [\"k\", \"o\", \"s\", \"y\", \"\
    e\"];\n   var vowels = [\"l\", \"p\", \"t\", \"z\", \"f\"];\n   var vowels = [\"\
    m\", \"q\", \"u\", \"a\", \"g\"];\n   var vowels = [\"n\", \"r\", \"v\", \"b\"\
    , \"h\"];\n   var vowels = [\"o\", \"s\", \"w\", \"c\", \"i\"];\n   var vowels\
    \ = [\"p\", \"t\", \"x\", \"d\", \"j\"];\n   var vowels = [\"q\", \"u\", \"y\"\
    , \"e\", \"k\"];\n   var vowels = [\"r\", \"v\", \"z\", \"f\", \"l\"];\n   var\
    \ vowels = [\"s\", \"w\", \"a\", \"g\", \"m\"];\n   var vowels = [\"t\", \"x\"\
    , \"b\", \"h\", \"n\"];\n   var vowels = [\"u\", \"y\", \"c\", \"i\", \"o\"];\n\
    \   var vowels = [\"v\", \"z\", \"d\", \"j\", \"p\"];\n   var vowels = [\"w\"\
    , \"a\", \"e\", \"k\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp0c2vd13t.js:31\n   var vowels = [\"w\", \"a\", \"e\", \"k\n   \
    \                             ^^\n\nSyntaxError: Invalid or unexpected token\n\
    \    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar result\
    \ = \"\";\n\tvar arr = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n\tvar arr2\
    \ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n\tfor(var i = 0; i < message.length;\
    \ i++){\n\t\tif(message[i] === message[i].toUpperCase()){\n\t\t\tvar index = arr2.indexOf(message[i]);\n\
    \t\t\tif(index == arr2.length - 1){\n\t\t\t\tresult += arr2[0];\n\t\t\t}\n\t\t\
    \telse if(index == arr2.length - 2){\n\t\t\t\tresult += arr2[1];\n\t\t\t}\n\t\t\
    \telse{\n\t\t\t\tresult += arr2[index + 2];\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\t\
    var index = arr.indexOf(message[i]);\n\t\t\tif(index == arr.length - 1){\n\t\t\
    \t\tresult += arr[0];\n\t\t\t}\n\t\t\telse if(index == arr.length - 2){\n\t\t\t\
    \tresult += arr[1];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult += arr[index + 2];\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpv4gru91k.js:45:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpv4gru91k.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar alpha\
    \ = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\tvar vowels = 'AEIOU';\n\tvar encoded = '';\n\
    \tfor(var i = 0; i < message.length; i++){\n\t\tvar letter = message[i];\n\t\t\
    var isUpper = letter === letter.toUpperCase();\n\t\tletter = letter.toUpperCase();\n\
    \t\tif(alpha.indexOf(letter) > -1){\n\t\t\tif(isUpper){\n\t\t\t\tif(vowels.indexOf(letter)\
    \ > -1){\n\t\t\t\t\tencoded += vowels[(vowels.indexOf(letter) + 2) % vowels.length];\n\
    \t\t\t\t} else {\n\t\t\t\t\tencoded += alpha[(alpha.indexOf(letter) + 2) % alpha.length];\n\
    \t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif(vowels.indexOf(letter) > -1){\n\t\t\t\t\t\
    encoded += vowels[(vowels.indexOf(letter) + 2) % vowels.length].toLowerCase();\n\
    \t\t\t\t} else {\n\t\t\t\t\tencoded += alpha[(alpha.indexOf(letter) + 2) % alpha.length].toLowerCase();\n\
    \t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tencoded += letter;\n\t\t}\n\t}\n\treturn\
    \ encoded;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VOUV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvoft4moh.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvoft4moh.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VOUV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var vowels\
    \ = {\n    'a': 'c',\n    'e': 'g',\n    'i': 'k',\n    'o': 'q',\n    'u': 'y'\n\
    \  };\n  var encoded = '';\n  var charCode;\n  for (var i = 0; i < message.length;\
    \ i++) {\n    charCode = message.charCodeAt(i);\n    if (charCode >= 65 && charCode\
    \ <= 90) {\n      encoded += String.fromCharCode(97 + (charCode - 65));\n    }\
    \ else if (charCode >= 97 && charCode <= 122) {\n      encoded += String.fromCharCode(65\
    \ + (charCode - 97));\n    } else {\n      encoded += message[i];\n    }\n  }\n\
    \  var encoded2 = '';\n  for (var j = 0; j < encoded.length; j++) {\n    if (vowels[encoded[j]]\
    \ !== undefined) {\n      encoded2 += vowels[encoded[j]];\n    } else {\n    \
    \  encoded2 += encoded[j];\n    }\n  }\n  return encoded2;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpp8oz6g7x.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmpp8oz6g7x.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ newMessage = [];\n    for(var i = 0; i < message.length; i++){\n        var\
    \ letter = message[i];\n        if(isLowerCase(letter)){\n            if(isVowel(letter)){\n\
    \                letter = nextVowel(letter);\n            }\n            newMessage.push(letter.toUpperCase());\n\
    \        } else if(isUpperCase(letter)){\n            if(isVowel(letter)){\n \
    \               letter = nextVowel(letter);\n            }\n            newMessage.push(letter.toLowerCase());\n\
    \        } else {\n            newMessage.push(letter);\n        }\n    }\n  \
    \  return newMessage.join('');\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqy1xvjab.js:11\n        if(isLowerCase(letter)){\n        ^\n\n\
    ReferenceError: isLowerCase is not defined\n    at encode (/tmp/tmpqy1xvjab.js:11:9)\n\
    \    at test (/tmp/tmpqy1xvjab.js:33:20)\n    at Object.<anonymous> (/tmp/tmpqy1xvjab.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = {\n        'a': 'c',\n        'e': 'g',\n        'i': 'k',\n      \
    \  'o': 'q',\n        'u': 'y'\n    };\n    var encoding = '';\n    for (var i\
    \ = 0; i < message.length; i++) {\n        if (message[i] !== message[i].toLowerCase())\
    \ {\n            encoding += message[i].toLowerCase();\n        } else if (message[i]\
    \ === message[i].toUpperCase()) {\n            encoding += message[i].toLowerCase();\n\
    \        } else if (vowels[message[i]]) {\n            encoding += vowels[message[i]];\n\
    \        } else {\n            encoding += message[i];\n        }\n    }\n   \
    \ return encoding;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp7m2a2o6y.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7m2a2o6y.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ messageArray = message.split(\"\");\n    var encodeMessage = \"\";\n    for(var\
    \ i = 0; i < messageArray.length; i++){\n        if(isVowel(messageArray[i])){\n\
    \            var num = (messageArray[i].charCodeAt(0) + 2) % 122;\n          \
    \  if(num < 97){\n                num += 97;\n            }\n            encodeMessage\
    \ += String.fromCharCode(num);\n        }else{\n            if(messageArray[i]\
    \ === messageArray[i].toUpperCase()){\n                encodeMessage += messageArray[i].toLowerCase();\n\
    \            }else{\n                encodeMessage += messageArray[i].toUpperCase();\n\
    \            }\n        }\n    }\n    return encodeMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp2otpb7xc.js:11\n        if(isVowel(messageArray[i])){\n       \
    \ ^\n\nReferenceError: isVowel is not defined\n    at encode (/tmp/tmp2otpb7xc.js:11:9)\n\
    \    at test (/tmp/tmp2otpb7xc.js:33:20)\n    at Object.<anonymous> (/tmp/tmp2otpb7xc.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ str = message.toLowerCase().split('');\n    var change = {'a': 'c', 'e': 'g',\
    \ 'i': 'k', 'o': 'q', 'u': 'w'};\n    var vowels = 'aeiou';\n    var vowel = new\
    \ RegExp('[' + vowels + ']');\n    return str.map(function(x){\n        if(vowel.test(x)){\n\
    \            return change[x];\n        }\n        else if(x === x.toUpperCase()){\n\
    \            return x.toLowerCase();\n        }\n        else if(x === x.toLowerCase()){\n\
    \            return x.toUpperCase();\n        }\n    }).join('');\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TgST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpolzxugg4.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpolzxugg4.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TgST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var alphabet\
    \ = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"\
    m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"\
    z\"];\n  var result = \"\";\n  var index = 0;\n  var currChar;\n  var hasChange\
    \ = false;\n  while(index < message.length){\n    currChar = message[index];\n\
    \    if (currChar >= \"a\" && currChar <= \"z\"){\n      if(hasChange){\n    \
    \    result += alphabet[alphabet.indexOf(currChar) - 1];\n      } else {\n   \
    \     result += alphabet[alphabet.indexOf(currChar) + 1];\n      }\n      hasChange\
    \ = !hasChange;\n    } else if (currChar >= \"A\" && currChar <= \"Z\"){\n   \
    \   if(hasChange){\n        result += alphabet[alphabet.indexOf(currChar.toLowerCase())\
    \ - 1].toUpperCase();\n      } else {\n        result += alphabet[alphabet.indexOf(currChar.toLowerCase())\
    \ + 1].toUpperCase();\n      }\n      hasChange = !hasChange;\n    } else {\n\
    \      result += currChar;\n    }\n    index++;\n  }\n  return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'UDTS'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9uhibiem.js:41:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9uhibiem.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'UDTS',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar output\
    \ = \"\";\n\tfor(var i = 0; i < message.length; i++){\n\t\tvar n = message[i].charCodeAt();\n\
    \t\tif(n > 64 && n < 91){\n\t\t\toutput += String.fromCharCode(n + 32);\n\t\t\
    } else if(n > 96 && n < 123){\n\t\t\toutput += String.fromCharCode(n - 32);\n\t\
    \t} else {\n\t\t\toutput += message[i];\n\t\t}\n\t}\n\treturn output;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpvya21090.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpvya21090.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = \"aeiou\";\n    var encodedMessage = \"\";\n    for(var i = 0; i <\
    \ message.length; i++){\n        var letter = message[i];\n        if(vowels.indexOf(letter)\
    \ != -1){\n            var encodedLetter = getNextVowel(letter);\n           \
    \ encodedMessage += encodedLetter;\n        } else if(letter === letter.toUpperCase()){\n\
    \            encodedMessage += letter.toLowerCase();\n        } else {\n     \
    \       encodedMessage += letter.toUpperCase();\n        }\n    }\n    return\
    \ encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9mwpb4gh.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9mwpb4gh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar str\
    \ = '';\n\tfor(var i = 0; i < message.length; i++){\n\t\tvar code = message.charCodeAt(i);\n\
    \t\t//lowercase if upper\n\t\tif(code >= 65 && code <= 90){\n\t\t\tcode += 32;\n\
    \t\t}\n\t\t//does the vowel shift\n\t\tif(code === 97){\n\t\t\tcode = 99;\n\t\t\
    }else if(code === 101){\n\t\t\tcode = 103;\n\t\t}else if(code === 105){\n\t\t\t\
    code = 107;\n\t\t}else if(code === 111){\n\t\t\tcode = 113;\n\t\t}else if(code\
    \ === 117){\n\t\t\tcode = 119;\n\t\t}\n\t\tstr += String.fromCharCode(code);\n\
    \t}\n\treturn str;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mwdcskr'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpd6bpbqvt.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd6bpbqvt.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mwdcskr',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    upperCase = [\"A\", \"B\", \"C\"\
    , \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\"\
    , \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\"\
    , \"Z\"];\n    lowerCase = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    newString = \"\";\n\
    \    for (var i = 0; i < message.length; i++) {\n        if (upperCase.indexOf(message[i])\
    \ != -1) {\n            newString += lowerCase[upperCase.indexOf(message[i])];\n\
    \        } else if (lowerCase.indexOf(message[i]) != -1) {\n            newString\
    \ += upperCase[lowerCase.indexOf(message[i])];\n        } else {\n           \
    \ newString += message[i];\n        }\n    }\n    for (var j = 0; j < newString.length;\
    \ j++) {\n        if (vowels.indexOf(newString[j]) != -1) {\n            if (vowels.indexOf(newString[j])\
    \ != vowels.length - 1) {\n                newString = newString.substring(0,\
    \ j) + vowels[vowels.indexOf(newString[j]) + 2] + newString.substring(j + 1);\n\
    \            } else {\n                newString = newString.substring(0, j) +\
    \ vowels[vowels.indexOf(newString[j]) - 3] + newString.substring(j + 1);\n   \
    \         }\n        }\n    }\n    return newString;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpap7s_7u_.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpap7s_7u_.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n  var result = '';\n  var letter = '';\n  var\
    \ index = 0;\n  var add = 0;\n  for (var i = 0; i < message.length; i++) {\n \
    \   letter = message[i];\n    if (letter === letter.toUpperCase()) {\n      letter\
    \ = letter.toLowerCase();\n      add = -32;\n    } else {\n      add = 0;\n  \
    \  }\n    for (var j = 0; j < vowels.length; j++) {\n      if (letter === vowels[j])\
    \ {\n        index = (j + 2) % 5;\n        letter = vowels[index];\n      }\n\
    \    }\n    result += String.fromCharCode(letter.charCodeAt(0) + add);\n  }\n\
    \  return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TAST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8zo9i81x.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8zo9i81x.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TAST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  let charCode\
    \ = 0;\n  let encodedMessage = '';\n  const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n  const vowels = \"AEIOU\";\n  for(let i = 0; i < message.length; i++){\n \
    \   let char = message[i];\n    let isUpperCase = char === char.toUpperCase();\n\
    \    char = char.toUpperCase();\n    if(alphabet.indexOf(char) > -1){\n      if(isUpperCase){\n\
    \        charCode = char.charCodeAt(0) + 2;\n        if(charCode > 90){\n    \
    \      charCode = 65 + (charCode - 91);\n        }\n      }else{\n        charCode\
    \ = char.charCodeAt(0) + 2;\n        if(charCode > 122){\n          charCode =\
    \ 97 + (charCode - 123);\n        }\n      }\n      if(vowels.indexOf(String.fromCharCode(charCode))\
    \ > -1){\n        if(isUpperCase){\n          charCode += 1;\n          if(charCode\
    \ > 90){\n            charCode = 65 + (charCode - 91);\n          }\n        }else{\n\
    \          charCode += 1;\n          if(charCode > 122){\n            charCode\
    \ = 97 + (charCode - 123);\n          }\n        }\n      }\n      encodedMessage\
    \ += String.fromCharCode(charCode);\n    }else{\n      encodedMessage += char;\n\
    \    }\n  }\n  return encodedMessage;\n}\n\nmodule.exports = { encode };\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'VGVV'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpmw60n59r.js:55:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpmw60n59r.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'VGVV',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    .split(\"\");\n  var result = \"\";\n  for (var i = 0; i < message.length; i++)\
    \ {\n    var char = message[i];\n    if (char === char.toUpperCase()) {\n    \
    \  result += char.toLowerCase();\n    } else {\n      result += char.toUpperCase();\n\
    \    }\n    if (vowels.indexOf(char) >= 0) {\n      result = result.slice(0, -1);\n\
    \      var index = alphabet.indexOf(char);\n      var newVowel = alphabet[index\
    \ + 2];\n      result += newVowel;\n    }\n  }\n  return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpq52xfokb.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpq52xfokb.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    let\
    \ newMsg = '';\n    for(let i = 0; i < message.length; i++){\n        if(isVowel(message[i])){\n\
    \            let idx = vowels.indexOf(message[i].toLowerCase());\n           \
    \ if(idx == vowels.length - 1){\n                newMsg += vowels[0];\n      \
    \      }else if(idx == vowels.length - 2){\n                newMsg += vowels[1];\n\
    \            }else{\n                newMsg += vowels[idx + 2];\n            }\n\
    \        }else{\n            if(isUpperCase(message[i])){\n                newMsg\
    \ += message[i].toLowerCase();\n            }else{\n                newMsg +=\
    \ message[i].toUpperCase();\n            }\n        }\n    }\n    return newMsg;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpokz5vw7d.js:10\n        if(isVowel(message[i])){\n        ^\n\n\
    ReferenceError: isVowel is not defined\n    at encode (/tmp/tmpokz5vw7d.js:10:9)\n\
    \    at test (/tmp/tmpokz5vw7d.js:35:20)\n    at Object.<anonymous> (/tmp/tmpokz5vw7d.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar alpha\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n\tvar answer = \"\";\n\tfor(var i = 0; i\
    \ < message.length; i++){\n\t\tvar letter = message[i];\n\t\tif(letter === letter.toUpperCase()){\n\
    \t\t\tletter = letter.toLowerCase();\n\t\t}\n\t\telse{\n\t\t\tletter = letter.toUpperCase();\n\
    \t\t}\n\t\tif(letter === \"a\" || letter === \"e\" || letter === \"i\" || letter\
    \ === \"o\" || letter === \"u\"){\n\t\t\tvar index = alpha.indexOf(letter);\n\t\
    \t\tletter = alpha[index + 2];\n\t\t}\n\t\tanswer += letter;\n\t}\n\treturn answer;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp7lot5kkt.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7lot5kkt.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976843
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var output\
    \ = '';\n  for (var i = 0; i < message.length; i++) {\n    if (message[i] ===\
    \ message[i].toUpperCase()) {\n      output += message[i].toLowerCase();\n   \
    \ } else {\n      output += message[i].toUpperCase();\n    }\n  }\n  return output;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpaie5xuyu.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpaie5xuyu.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    message\
    \ = message.toLowerCase().split('');\n    var vowels = \"aeiou\";\n    for(var\
    \ i = 0; i < message.length; i++){\n        if(vowels.indexOf(message[i]) >= 0){\n\
    \            message[i] = vowels[(vowels.indexOf(message[i]) + 2) % 5];\n    \
    \    } else if(message[i] == message[i].toUpperCase()){\n            message[i]\
    \ = message[i].toLowerCase();\n        } else if(message[i] == message[i].toLowerCase()){\n\
    \            message[i] = message[i].toUpperCase();\n        }\n    }\n    return\
    \ message.join('');\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpftf0cqag.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpftf0cqag.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  let vowels\
    \ = \"aeiou\"\n  let newStr = ''\n  for(let i = 0; i < message.length; i++){\n\
    \    let letter = message[i]\n    if(vowels.includes(letter)){\n      let vowelIndex\
    \ = vowels.indexOf(letter)\n      if(vowelIndex + 2 >= vowels.length){\n     \
    \   newStr += vowels[vowelIndex + 2 - vowels.length]\n      } else {\n       \
    \ newStr += vowels[vowelIndex + 2]\n      }\n    } else {\n      if(letter ===\
    \ letter.toUpperCase()){\n        newStr += letter.toLowerCase()\n      } else\
    \ {\n        newStr += letter.toUpperCase()\n      }\n    }\n  }\n  return newStr\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl7si4h66.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpl7si4h66.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ newMessage = '';\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(var i\
    \ = 0; i < message.length; i++){\n        var lowerCase = message[i].toLowerCase();\n\
    \        if(vowels.indexOf(lowerCase) != -1){\n            var idx = (vowels.indexOf(lowerCase)\
    \ + 2) % 5;\n            newMessage += vowels[idx];\n        }\n        else if(lowerCase\
    \ != message[i]){\n            newMessage += lowerCase;\n        }\n        else{\n\
    \            var idx = (lowerCase.charCodeAt(0) - 97 + 2) % 26;\n            newMessage\
    \ += String.fromCharCode(idx + 97);\n        }\n    }\n    return newMessage;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpeemlwy0z.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpeemlwy0z.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tvar alphabet = [\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"];\n\tvar newMessage = \"\";\n\tfor (var i = 0; i < message.length; i++)\
    \ {\n\t\tvar char = message[i];\n\t\t// console.log(char);\n\t\tif (char === char.toUpperCase())\
    \ {\n\t\t\tchar = char.toLowerCase();\n\t\t}\n\t\telse {\n\t\t\tchar = char.toUpperCase();\n\
    \t\t}\n\t\tvar index = alphabet.indexOf(char);\n\t\tif (vowels.indexOf(char) >\
    \ -1) {\n\t\t\tchar = alphabet[index + 2];\n\t\t}\n\t\tnewMessage += char;\n\t\
    }\n\treturn newMessage;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mUDASIR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmp6w3op3gx.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6w3op3gx.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\t//first\
    \ split the message into characters\n\tvar letters = message.split(\"\");\n\t\
    //create a new array\n\tvar encoder = [];\n\t//alphabet array\n\tvar alphabet\
    \ = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"\
    m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"\
    z\"];\n\t//loop through the letters and push to encoder\n\tfor(var i = 0; i <\
    \ letters.length; i++){\n\t\t//check if the letter is uppercase\n\t\tif(letters[i]\
    \ === letters[i].toUpperCase()){\n\t\t\t//assign the lowercase letter to the array\n\
    \t\t\tencoder.push(letters[i].toLowerCase());\n\t\t} else {\n\t\t\t//assign the\
    \ uppercase letter to the array\n\t\t\tencoder.push(letters[i].toUpperCase());\n\
    \t\t}\n\t}\n\t//loop through the encoder array\n\tfor(var j = 0; j < encoder.length;\
    \ j++){\n\t\t//check if the letter is a vowel\n\t\tif(alphabet.indexOf(encoder[j])\
    \ % 5 === 0){\n\t\t\t//take the encoder array value, and add 2 to it\n\t\t\tencoder[j]\
    \ = alphabet[alphabet.indexOf(encoder[j]) + 2];\n\t\t}\n\t}\n\treturn encoder.join(\"\
    \");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp11bmsu4c.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp11bmsu4c.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  // change\
    \ all the letters to lowercase\n  message = message.toLowerCase();\n  // split\
    \ the string into array\n  let msgArray = message.split('');\n  // array of letters\n\
    \  let alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');\n  // iterate through\
    \ the array of letters\n  for (let i = 0; i < msgArray.length; i++) {\n    //\
    \ if it is a letter\n    if (alphabet.includes(msgArray[i])) {\n      // if the\
    \ letter is a vowel\n      if ('aeiou'.includes(msgArray[i])) {\n        // find\
    \ the index of the letter\n        let index = alphabet.indexOf(msgArray[i]);\n\
    \        // replace the letter with the letter which is two places ahead\n   \
    \     msgArray[i] = alphabet[index + 2];\n      } else {\n        // otherwise\
    \ swap the case of the letter\n        msgArray[i] = msgArray[i].toUpperCase();\n\
    \      }\n    }\n  }\n  // join the string\n  return msgArray.join('');\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TgST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp5owzxg02.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp5owzxg02.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TgST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var messageArray\
    \ = message.split(\"\");\n  for (var i = 0; i < messageArray.length; i++) {\n\
    \    var charCode = messageArray[i].charCodeAt(0);\n    // console.log(charCode);\n\
    \    if(charCode >= 65 && charCode <= 90){\n      charCode += 32;\n    } else\
    \ if (charCode >= 97 && charCode <= 122) {\n      charCode -= 32;\n    }\n   \
    \ switch(charCode){\n      case 97:\n        charCode = 101;\n        break;\n\
    \      case 101:\n        charCode = 105;\n        break;\n      case 105:\n \
    \       charCode = 111;\n        break;\n      case 111:\n        charCode = 117;\n\
    \        break;\n      case 117:\n        charCode = 97;\n        break;\n   \
    \   case 65:\n        charCode = 69;\n        break;\n      case 69:\n       \
    \ charCode = 73;\n        break;\n      case 73:\n        charCode = 79;\n   \
    \     break;\n      case 79:\n        charCode = 85;\n        break;\n      case\
    \ 85:\n        charCode = 65;\n        break;\n    }\n    messageArray[i] = String.fromCharCode(charCode);\n\
    \  }\n  return messageArray.join(\"\");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tist'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpwq1i2fzs.js:59:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpwq1i2fzs.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tist',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var vowels\
    \ = \"aeiou\";\n  var alpha = \"abcdefghijklmnopqrstuvwxyz\"\n  var newMessage\
    \ = '';\n  for (var i = 0; i < message.length; i++) {\n    if (vowels.indexOf(message[i])\
    \ !== -1) {\n      newMessage += alpha[vowels.indexOf(message[i]) + 2];\n    }\
    \ else if (message[i] === ' ') {\n      newMessage += ' ';\n    } else {\n   \
    \   newMessage += message[i].toUpperCase();\n    }\n  }\n  return newMessage;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmposvy8o_v.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmposvy8o_v.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar alpha\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n\tvar vowels = \"aeiou\";\n\tvar encoded\
    \ = \"\";\n\tfor(var i = 0; i < message.length; i++){\n\t\tvar index = alpha.indexOf(message[i].toLowerCase());\n\
    \t\tif(index >= 0){\n\t\t\tindex += (vowels.indexOf(message[i].toLowerCase())\
    \ > -1) ? 2 : 1;\n\t\t\tindex = (index > alpha.length) ? index % alpha.length\
    \ : index;\n\t\t\tencoded += (message[i] === message[i].toUpperCase()) ? alpha[index].toUpperCase()\
    \ : alpha[index];\n\t\t} else {\n\t\t\tencoded += message[i];\n\t\t}\n\t}\n\t\
    return encoded;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'UGTU'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl0qv9tj3.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpl0qv9tj3.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'UGTU',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var spl\
    \ = message.split(\"\");\n  console.log(spl);\n  var alph = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  var alph1 = alph.split(\"\");\n  console.log(alph1);\n  var vowels = \"aeiouAEIOU\"\
    ;\n  var vowels1 = vowels.split(\"\");\n  console.log(vowels1);\n  var newarray\
    \ = [];\n  for(var i = 0; i < spl.length; i++){\n    if(vowels1.indexOf(spl[i])\
    \ !== -1){\n      var num = alph1.indexOf(spl[i]) + 3;\n      if(num > 25){\n\
    \        var num1 = num % 26;\n        newarray.push(alph1[num1]);\n      }\n\
    \      else{\n        newarray.push(alph1[num]);\n      }\n    }\n    else if(alph1.indexOf(spl[i])\
    \ !== -1){\n      if(spl[i] === spl[i].toUpperCase()){\n        newarray.push(spl[i].toLowerCase());\n\
    \      }\n      else{\n        newarray.push(spl[i].toUpperCase());\n      }\n\
    \    }\n    else{\n      newarray.push(spl[i]);\n    }\n  }\n  return newarray.join(\"\
    \");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TcST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpl4slm0n_.js:47:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpl4slm0n_.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TcST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[ 'T', 'E', 'S', 'T' ]\n[\n  'a', 'b', 'c', 'd', 'e', 'f',\n  'g', 'h',\
    \ 'i', 'j', 'k', 'l',\n  'm', 'n', 'o', 'p', 'q', 'r',\n  's', 't', 'u', 'v',\
    \ 'w', 'x',\n  'y', 'z'\n]\n[\n  'a', 'e', 'i', 'o',\n  'u', 'A', 'E', 'I',\n\
    \  'O', 'U'\n]\n"
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\t//define\
    \ a,e,i,o,u by index\n\t//swap the case, change the vowel.\n\tvar message = message.toLowerCase();\n\
    \tvar vowels = ['a','e','i','o','u'];\n\tvar letters = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n\t// var newMessage = \"\";\n\tfor(var i = 0; i < message.length; i++){\n\t\
    \tif(vowels.indexOf(message[i]) !== -1){\n\t\t\tmessage[i] = message[i].toUpperCase();\n\
    \t\t} else {\n\t\t\tmessage[i] = message[i].toLowerCase();\n\t\t}\n\t\tif(vowels.indexOf(message[i])\
    \ !== -1){\n\t\t\tvar index = (letters.indexOf(message[i]) + 2) % 26;\n\t\t\t\
    message[i] = letters[index];\n\t\t}\n\t}\n\treturn message;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpeaqw42r3.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpeaqw42r3.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    //converts\
    \ to all lowercase\n    //goes through each letter, once\n    //checks if it is\
    \ a vowel\n    //checks if it is uppercase/lowercase\n    //then checks for new\
    \ vowel for new letter\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpymn0i04h.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmpymn0i04h.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    message\
    \ = message.toLowerCase();\n    var result = \"\";\n    for(var i = 0; i < message.length;\
    \ i++){\n        if(isVowel(message[i])){\n            result += nextLetter(message[i],\
    \ 2);\n        }\n        else if(isUpperCase(message[i])){\n            result\
    \ += message[i].toLowerCase();\n        }\n        else if(isLowerCase(message[i])){\n\
    \            result += message[i].toUpperCase();\n        }\n        else{\n \
    \           result += message[i];\n        }\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpzfrpod81.js:11\n        if(isVowel(message[i])){\n        ^\n\n\
    ReferenceError: isVowel is not defined\n    at encode (/tmp/tmpzfrpod81.js:11:9)\n\
    \    at test (/tmp/tmpzfrpod81.js:32:20)\n    at Object.<anonymous> (/tmp/tmpzfrpod81.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = \"aeiou\";\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  \
    \  var output = \"\";\n    for(var i = 0; i < message.length; i++){\n        var\
    \ letter = message[i];\n        if(alphabet.indexOf(letter) === -1){\n       \
    \     output += letter;\n        }\n        else if(vowels.indexOf(letter) > -1){\n\
    \            var pos = vowels.indexOf(letter);\n            var newPos = pos +\
    \ 2;\n            if(newPos >= vowels.length){\n                newPos -= vowels.length;\n\
    \            }\n            output += vowels[newPos];\n        }\n        else{\n\
    \            var upper = (letter === letter.toUpperCase());\n            var pos\
    \ = alphabet.indexOf(letter.toLowerCase());\n            var newPos = pos + 2;\n\
    \            if(newPos >= alphabet.length){\n                newPos -= alphabet.length;\n\
    \            }\n            var newLetter = alphabet[newPos];\n            if(upper){\n\
    \                newLetter = newLetter.toUpperCase();\n            }\n       \
    \     output += newLetter;\n        }\n    }\n    return output;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TEST'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpj9_mve1q.js:45:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpj9_mve1q.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar new_message\
    \ = '';\n\tvar vowels = 'aeiou';\n\tvar str = 'abcdefghijklmnopqrstuvwxyz';\n\t\
    for (var i = 0; i < message.length; i++) {\n\t\tif (message[i] == message[i].toUpperCase())\
    \ {\n\t\t\tif (vowels.indexOf(message[i].toLowerCase()) >= 0) {\n\t\t\t\tnew_message\
    \ += str[(str.indexOf(message[i].toLowerCase()) + 2) % 26].toUpperCase();\n\t\t\
    \t}\n\t\t\telse {\n\t\t\t\tnew_message += message[i].toLowerCase();\n\t\t\t}\n\
    \t\t}\n\t\telse {\n\t\t\tif (vowels.indexOf(message[i]) >= 0) {\n\t\t\t\tnew_message\
    \ += str[(str.indexOf(message[i]) + 2) % 26];\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\
    new_message += message[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn new_message;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tGst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqyrl8q11.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqyrl8q11.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    //\
    \ your code here\n  var vowels = \"aeiouAEIOU\";\n  var result = \"\";\n  for\
    \ (var i = 0; i < message.length; i++) {\n    var c = message[i];\n    if (vowels.indexOf(c)\
    \ !== -1) {\n      result += vowels[(vowels.indexOf(c) + 2) % vowels.length];\n\
    \    } else if (c === c.toUpperCase()) {\n      result += c.toLowerCase();\n \
    \   } else {\n      result += c.toUpperCase();\n    }\n  }\n  return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpsg203v53.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpsg203v53.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  var upperCaseMessage = message.toUpperCase();\n\
    \  var lowerCaseMessage = message.toLowerCase();\n  var encodedMessage = \"\"\
    ;\n  for (var i = 0; i < message.length; i++) {\n    if (upperCaseMessage[i] ===\
    \ message[i]) {\n      encodedMessage += lowerCaseMessage[i];\n    } else {\n\
    \      encodedMessage += upperCaseMessage[i];\n    }\n    for (var j = 0; j <\
    \ vowels.length; j++) {\n      if (encodedMessage[i] === vowels[j]) {\n      \
    \  encodedMessage = encodedMessage.replace(encodedMessage[i], vowels[j+2]);\n\
    \      }\n    }\n  }\n  return encodedMessage;\n}\n\nencode(\"Hello there!\");\
    \ //\"Jgnnq vmjm!\"\nencode(\"I am a big yellow banana!\"); //\"J cq ndw hjkkij\
    \ ciqqqoc cikqdo!\"\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tundefinedndefinedst'\n\
    \nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjzt47o4x.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjzt47o4x.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tundefinedndefinedst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar vowels\
    \ = \"aeiou\";\n\tvar encodedMessage = '';\n\tfor(var i = 0; i < message.length;\
    \ i++){\n\t\tvar letter = message[i];\n\t\tif(letter == letter.toUpperCase()){\n\
    \t\t\tletter = letter.toLowerCase();\n\t\t} else {\n\t\t\tletter = letter.toUpperCase();\n\
    \t\t}\n\t\tvar isVowel = false;\n\t\tvar encodedLetter = '';\n\t\tfor(var j =\
    \ 0; j < vowels.length; j++){\n\t\t\tif(letter == vowels[j]){\n\t\t\t\tisVowel\
    \ = true;\n\t\t\t\tencodedLetter = vowels[(j+2)%5];\n\t\t\t}\n\t\t}\n\t\tif(isVowel){\n\
    \t\t\tencodedMessage += encodedLetter;\n\t\t} else {\n\t\t\tencodedMessage +=\
    \ letter;\n\t\t}\n\t}\n\treturn encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tost'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp9inxzuhe.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp9inxzuhe.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tost',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ vowels = ['a','e','i','o','u'];\n    var result = \"\";\n    for(var i = 0;\
    \ i < message.length; i++){\n        if(message[i] === message[i].toUpperCase()){\n\
    \            result += message[i].toLowerCase();\n        }\n        else if(message[i]\
    \ === message[i].toLowerCase()){\n            result += message[i].toUpperCase();\n\
    \        }\n        else if(vowels.indexOf(message[i]) > -1){\n            result\
    \ += String.fromCharCode(message[i].charCodeAt(0) + 2);\n        }\n        else{\n\
    \            result += message[i];\n        }\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp21mtucsi.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp21mtucsi.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    var\
    \ encodedMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n     \
    \   var lowerCase = message[i].toLowerCase();\n        if(lowerCase === \"a\"\
    ){\n            encodedMessage += \"c\";\n        }\n        else if(lowerCase\
    \ === \"e\"){\n            encodedMessage += \"g\";\n        }\n        else if(lowerCase\
    \ === \"i\"){\n            encodedMessage += \"k\";\n        }\n        else if(lowerCase\
    \ === \"o\"){\n            encodedMessage += \"q\";\n        }\n        else if(lowerCase\
    \ === \"u\"){\n            encodedMessage += \"w\";\n        }\n        else if(message[i]\
    \ === message[i].toUpperCase()){\n            encodedMessage += message[i].toLowerCase();\n\
    \        }\n        else{\n            encodedMessage += message[i].toUpperCase();\n\
    \        }\n    }\n    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mwDcSkR'\n\n\
    should loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpbym8glds.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbym8glds.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mwDcSkR',\n\
    \  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  // YOUR\
    \ CODE HERE\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp56uefrrf.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp56uefrrf.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n    let\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let newMessage = \"\";\n   \
    \ let alphaIndex = 0;\n    let array = message.split(\"\");\n    // console.log(array);\n\
    \    for(var i = 0; i < array.length; i++){\n        // console.log(array[i]);\n\
    \        if(array[i] == array[i].toUpperCase()){\n            array[i] = array[i].toLowerCase();\n\
    \        }\n        alphaIndex = alphabet.indexOf(array[i]);\n        // console.log(alphaIndex);\n\
    \        if(alphaIndex != -1){\n            // console.log(alphaIndex);\n    \
    \        if(array[i] == \"z\"){\n                newMessage += \"b\";\n      \
    \      }else if(array[i] == \"y\"){\n                newMessage += \"a\";\n  \
    \          }else if(array[i] == \"x\"){\n                newMessage += \"z\";\n\
    \            }else if(array[i] == \"w\"){\n                newMessage += \"y\"\
    ;\n            }else if(array[i] == \"v\"){\n                newMessage += \"\
    x\";\n            }else if(array[i] == \"u\"){\n                newMessage +=\
    \ \"w\";\n            }else if(array[i] == \"t\"){\n                newMessage\
    \ += \"v\";\n            }else if(array[i] == \"s\"){\n                newMessage\
    \ += \"u\";\n            }else if(array[i] == \"r\"){\n                newMessage\
    \ += \"t\";\n            }else if(array[i] == \"q\"){\n                newMessage\
    \ += \"s\";\n            }else if(array[i] == \"p\"){\n                newMessage\
    \ += \"r\";\n            }else if(array[i] == \"o\"){\n                newMessage\
    \ += \"q\";\n            }else if(array[i] == \"n\"){\n                newMessage\
    \ += \"p\";\n            }else if(array[i] == \"m\"){\n                newMessage\
    \ += \"o\";\n            }else if(array[i] == \"l\"){\n                newMessage\
    \ += \"n\";\n            }\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkvytcqsw.js:65\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n  var result\
    \ = \"\";\n  var vowels = \"aeiou\";\n  for(var i = 0; i < message.length; i++){\n\
    \    var letter = message[i];\n    var vowelsIndex = vowels.indexOf(letter.toLowerCase());\n\
    \    var indexForCipher = (vowelsIndex + 2) % 5;\n    if(letter === letter.toUpperCase()){\n\
    \      if(vowelsIndex === -1){\n        result += letter.toLowerCase();\n    \
    \  }else{\n        result += vowels[indexForCipher].toUpperCase();\n      }\n\
    \    }else{\n      if(vowelsIndex === -1){\n        result += letter.toUpperCase();\n\
    \      }else{\n        result += vowels[indexForCipher];\n      }\n    }\n  }\n\
    \  return result;\n}\n\nvar input1 = \"abc\"; //Output = cde\nvar input2 = \"\
    Cba\"; //Output = EDC\nvar input3 = \"DixiO\"; //Output = FkzaQ\nvar input4 =\
    \ \"Hello World\"; //Output = Jgnnq Yqtnf\nvar input5 = \"This is a test\"; //Output\
    \ = Vjku ku c vguv\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\"\
    );\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp77talepm.js:42:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp77talepm.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
- exit_code: 1
  program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\nfunction encode(message){\n\tvar vowels\
    \ = ['a','e','i','o','u','A','E','I','O','U'];\n\tvar alphabet = {'a':'c','b':'d','c':'e','d':'f','e':'g','f':'h','g':'i','h':'j','i':'k','j':'l','k':'m','l':'n','m':'o','n':'p','o':'q','p':'r','q':'s','r':'t','s':'u','t':'v','u':'w','v':'x','w':'y','x':'z','y':'a','z':'b','A':'C','B':'D','C':'E','D':'F','E':'G','F':'H','G':'I','H':'J','I':'K','J':'L','K':'M','L':'N','M':'O','N':'P','O':'Q','P':'R','Q':'S','R':'T','S':'U','T':'V','U':'W','V':'X','W':'Y','X':'Z','Y':'A','Z':'B'};\n\
    \tfor(var i = 0; i < message.length; i++){\n\t\tfor(var key in alphabet){\n\t\t\
    \tif(message[i] === key){\n\t\t\t\tif(message[i] == message[i].toUpperCase()){\n\
    \t\t\t\t\tmessage = message.replace(message[i], alphabet[key].toUpperCase());\n\
    \t\t\t\t}else{\n\t\t\t\t\tmessage = message.replace(message[i], alphabet[key]);\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn message;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'BAAB'\n\nshould\
    \ loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpzg431oqi.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpzg431oqi.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'BAAB',\n\
    \  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659976844
