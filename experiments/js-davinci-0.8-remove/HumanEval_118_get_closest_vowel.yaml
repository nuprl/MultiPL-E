name: HumanEval_118_get_closest_vowel
language: js
prompt: "//You are given a word. Your task is to find the closest vowel that stands\
  \ between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\nfunction get_closest_vowel(word){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
  full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
  eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
  bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
  ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
  quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
  Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
completions: ["    for(var i = word.length - 1; i >= 0; i--){\n        if(word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'){\n\
    \            return word[i];\n        }\n    }\n    return '';\n}", "\tvar consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\t\
    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tvar result = \"\";\n\tfor\
    \ (var i = word.length - 1; i >= 0; i--) {\n\t\tif (consonants.indexOf(word[i])\
    \ !== -1) {\n\t\t\tfor (var j = i; j >= 0; j--) {\n\t\t\t\tif (vowels.indexOf(word[j])\
    \ !== -1) {\n\t\t\t\t\tresult = word[j];\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "  let v = ['a','e','i','o','u'];\n\
    \  let arr = word.split('');\n  let newArr = [];\n  let count = 0;\n  let closest\
    \ = '';\n  for(let i = 0; i < arr.length; i++){\n    for(let j = 0; j < v.length;\
    \ j++){\n      if(arr[i] === v[j]){\n        newArr.push(arr[i]);\n      }\n \
    \   }\n  }\n  for(let i = newArr.length-1; i >= 0; i--){\n    if(newArr[i] ===\
    \ 'a' || newArr[i] === 'e' || newArr[i] === 'i' || newArr[i] === 'o' || newArr[i]\
    \ === 'u'){\n      closest = newArr[i];\n      break;\n    }\n  }\n  return closest;\n\
    }", "  for(let i = word.length - 1; i > 0; i--){\n    if(\n      (word[i] ===\
    \ 'a' || word[i] === 'e' || word[i] === 'i' || word[i] === 'o' || word[i] ===\
    \ 'u') &&\n      (word[i - 1] !== 'a' && word[i - 1] !== 'e' && word[i - 1] !==\
    \ 'i' && word[i - 1] !== 'o' && word[i - 1] !== 'u')\n    ){\n      return word[i];\n\
    \    }\n  }\n  return '';\n}", "  return word.split('').reverse().reduce((acc,\
    \ curr, i, arr) => {\n    if(curr === 'a' || curr === 'e' || curr === 'i' || curr\
    \ === 'o' || curr === 'u'){\n      acc = arr.slice(0, i+1).reverse().join('');\n\
    \    }\n    return acc;\n  }, '');\n}", "    const vowels = 'aeiou';\n    word\
    \ = word.split('');\n    const idx = word.findIndex(el => vowels.includes(el));\n\
    \    if (idx === -1 || word[idx-1] === undefined) return '';\n    if (word[idx-1]\
    \ !== undefined && vowels.includes(word[idx-1])) return '';\n    return word[idx];\n\
    }\n", "    let vowels = \"aeiou\";\n    let index = word.length - 1;\n    while(vowels.indexOf(word[index])\
    \ === -1){\n        index--;\n    }\n    return word[index];\n}", "  var vowels\
    \ = 'aeiou';\n  var vowelsIndex = [word.length];\n  var index;\n  var res=[];\n\
    \  var diff=[];\n  var smallestdiff;\n  var indexc;\n  var isC=false;\n  for(var\
    \ i=0;i<word.length;i++){\n    index = vowels.indexOf(word[i]);\n    if(index\
    \ >= 0){\n      vowelsIndex[index] = i;\n    }\n  }\n  for(var j=0;j<vowelsIndex.length;j++){\n\
    \    if(vowelsIndex[j]>=0){\n      res.push(vowelsIndex[j]);\n    }\n  }\n  for(var\
    \ k=0;k<res.length;k++){\n    if(res[k]===0){\n      res.splice(k,1);\n    }\n\
    \  }\n  for(var m=res.length-1;m>=0;m--){\n    for(var n=res[m];n>=0;n--){\n \
    \     if(word[n]!=='a' && word[n]!=='e' && word[n]!=='i' && word[n]!=='o' && word[n]!=='u'){\n\
    \        isC=true;\n        break;\n      }\n    }\n    if(isC){\n      diff.push(res[m]-n);\n\
    \      isC=false;\n    }\n  }\n  smallestdiff=diff[0];\n  for(var p=0;p<diff.length;p++){\n\
    \    if(diff[p]<smallestdiff){\n      smallestdiff=diff[p];\n    }\n  }\n  for(var\
    \ q=0;q<diff.length;q++){\n    if(diff[q]===smallestdiff){\n      indexc=q;\n\
    \      break;\n    }\n  }\n  return word[res[indexc]];\n}\nget_closest_vowel('nguyth');\n",
  "  let con = [];\n  let vow = [];\n  let vowel = 'aeiou';\n  for(let i = 0; i <\
    \ word.length; i++){\n    if(vowel.includes(word[i])){\n      vow.push(i);\n \
    \   }\n    else{\n      con.push(i);\n    }\n  }\n  let closest = '';\n  let difference\
    \ = word.length;\n  for(let i = 0; i < vow.length; i++){\n    for(let j = 0; j\
    \ < con.length; j++){\n      if(con[j] < vow[i] && vow[i] - con[j] < difference){\n\
    \        closest = word[vow[i]];\n        difference = vow[i] - con[j];\n    \
    \  }\n    }\n  }\n  return closest;\n}", "    // your code here\n    let vowels\
    \ = 'aeiouAEIOU'\n    if(word.length == 0) return '';\n    if(vowels.indexOf(word[word.length-1])\
    \ == -1){\n        if(vowels.indexOf(word[word.length-2]) != -1){\n          \
    \  return word[word.length-2];\n        }else{\n            return '';\n     \
    \   }\n    }else{\n        return word[word.length-1];\n    }\n}\n", "  var vowels\
    \ = \"aeiou\";\n  var reversedString = word.split(\"\").reverse().join(\"\");\n\
    \  console.log(reversedString);\n  for(var i = 0; i < reversedString.length; i++){\n\
    \    var consonant = reversedString[i];\n    if(vowels.indexOf(consonant) == -1){\n\
    \      for(var j = i + 1; j < reversedString.length; j++){\n        var vowel\
    \ = reversedString[j];\n        if(vowels.indexOf(vowel) != -1){\n          return\
    \ vowel;\n        }\n      }\n    }\n  }\n  return \"\";\n}\n", "    var vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var wordArray = word.split(\"\"\
    );\n    var result = [];\n    var newVowel = [];\n    var newArray = [];\n   \
    \ var count;\n    var newResult = [];\n    var lastResult = [];\n    var all =\
    \ [];\n    var num = [];\n    var final;\n    for(var i = 0; i < wordArray.length;\
    \ i++){\n        if(vowels.indexOf(wordArray[i]) !== -1){\n            result.push(i);\n\
    \        }\n    }\n    for(var j = 0; j < result.length; j++){\n        for(var\
    \ k = 0; k < result.length; k++){\n            count = 0;\n            if(result[j]\
    \ - result[k] > 1){\n                for(var l = result[k] + 1; l < result[j];\
    \ l++){\n                    if(vowels.indexOf(wordArray[l]) === -1){\n      \
    \                  count += 1;\n                    }\n                }\n   \
    \             if(count === (result[j] - result[k] - 1)){\n                   \
    \ newVowel.push(result[j]);\n                    newVowel.push(result[k]);\n \
    \                   newResult.push(newVowel);\n                    newVowel =\
    \ [];\n                }\n            }\n        }\n    }\n    for(var a = 0;\
    \ a < newResult.length; a++){\n        all.push(newResult[a][0] - newResult[a][1]);\n\
    \    }\n    for(var b = 0; b < all.length; b++){\n        num.push(all[b]);\n\
    \    }\n    num.sort(function(a, b){return a - b});\n    for(var m = 0; m < num.length;\
    \ m++){\n        if(all.indexOf(num[m]) !== -1){\n            newArray.push(all.indexOf(num[m]));\n\
    \        }\n    }\n    for(var c = 0; c < newArray.length; c++){\n        lastResult.push(",
  "\tvar word_split = word.split('');\n\tvar consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\n\
    \tvar vowels = ['a','e','i','o','u'];\n\tvar point_on_left = 0;\n\tvar point_on_right\
    \ = word_split.length-1;\n\tif(word_split.length < 3){\n\t\treturn word;\n\t}\n\
    \twhile(point_on_left < point_on_right){\n\t\tif(vowels.indexOf(word_split[point_on_left])\
    \ !== -1){\n\t\t\tpoint_on_left++;\n\t\t}else if(vowels.indexOf(word_split[point_on_right])\
    \ !== -1){\n\t\t\tpoint_on_right--;\n\t\t}else{\n\t\t\tbreak;\n\t\t}\n\t}\n\t\
    if(vowels.indexOf(word_split[point_on_left]) !== -1){\n\t\tpoint_on_left++;\n\t\
    }\n\tif(vowels.indexOf(word_split[point_on_right]) !== -1){\n\t\tpoint_on_right--;\n\
    \t}\n\tif(point_on_left >= point_on_right){\n\t\treturn \"\";\n\t}\n\tvar min_distance\
    \ = 10000;\n\tvar min_index = 0;\n\tfor(var i = point_on_left; i <= point_on_right;\
    \ i++){\n\t\tif(vowels.indexOf(word_split[i]) !== -1){\n\t\t\tif(Math.abs(i -\
    \ point_on_left) <= min_distance){\n\t\t\t\tmin_distance = Math.abs(i - point_on_left);\n\
    \t\t\t\tmin_index = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn word_split[min_index];\n\
    }\n", "    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    word = word.split('');\n\
    \    word.reverse();\n    var vowel = '';\n    var consonant = false;\n    var\
    \ result = '';\n    for(var i = 0; i < word.length; i++){\n        if(vowels.indexOf(word[i])\
    \ > -1){\n            vowel = word[i];\n            if(consonant){\n         \
    \       result = vowel;\n                break;\n            }\n        }else{\n\
    \            consonant = true;\n        }\n    }\n    return result;\n}\n", " \
    \   //declare consonants and vowels\n    var vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n    var consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\",\
    \ \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"];\n    //split word into array\n    var split = word.split(\"\
    \");\n    //loop through array and detect consonants from the right\n    for(var\
    \ i = split.length-1; i > 0; i--){\n        //if consonant is found from the right,\
    \ check if there's a vowel in between\n        if(consonants.indexOf(split[i])\
    \ !== -1){\n            for(var j = i; j >= 0; j--){\n                //if a vowel\
    \ is found, return it\n                if(vowels.indexOf(split[j]) !== -1){\n\
    \                    return split[j];\n                }\n            }\n    \
    \    }\n    }\n    //if no vowel is found, return blank string\n    return \"\"\
    ;\n}\n", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(let i = word.length\
    \ - 1; i >= 0; i--){\n        if(!vowels.includes(word[i]) && vowels.includes(word[i-1])){\n\
    \            return word[i-1];\n        }\n    }\n    return '';\n}\n", "    var\
    \ vowels = [];\n    var consonants = [];\n    var res = [];\n    for(var i = 0;\
    \ i < word.length; i++){\n        if(is_vowel(word[i])) vowels.push(word[i]);\n\
    \        else consonants.push(word[i]);\n    }\n    for(var i = vowels.length-1;\
    \ i >= 0; i--){\n        for(var j = consonants.length-1; j >= 0; j--){\n    \
    \        if(consonants[j] < vowels[i]){\n                res.push(vowels[i]);\n\
    \                break;\n            }\n        }\n    }\n    return res.length\
    \ ? res[0] : \"\";\n}\n", "    var vowels = 'aeiou';\n    var vowel_pos = word.length;\n\
    \    for(var i = word.length - 1; i >= 0; i--){\n        if(vowels.indexOf(word[i])\
    \ != -1 && vowels.indexOf(word[i - 1]) == -1 && vowels.indexOf(word[i + 1]) ==\
    \ -1){\n            vowel_pos = i;\n            break;\n        }\n    }\n   \
    \ return vowel_pos == word.length ? '' : word[vowel_pos];\n}\n", "    for(let\
    \ i = word.length - 1; i > 0; i--){\n        if(word[i].match(/[aeiou]/)){\n \
    \           if(word[i - 1].match(/[bcdfghjklmnpqrstvwxyz]/)){\n              \
    \  return word[i];\n            }\n        }\n    }\n    return '';\n}", "   \
    \ let vowels = 'aeiou';\n    let index = word.length - 1;\n    while(index >=\
    \ 0) {\n        if(vowels.includes(word[index])) {\n            if(index != 0\
    \ && vowels.includes(word[index - 1])) {\n                index--;\n         \
    \   } else {\n                break;\n            }\n        }\n        index--;\n\
    \    }\n    return index >= 0 ? word[index] : '';\n}", "  var vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n  var result = \"\";\n  var index = 0;\n  for(var i = 0; i\
    \ < word.length; i++){\n    if(vowels.indexOf(word[i]) > -1){\n      index = i;\n\
    \      var newword = word.slice(i+1);\n      for(var j = 0; j < newword.length;\
    \ j++){\n        if(vowels.indexOf(newword[j]) == -1){\n          index = 0;\n\
    \          break;\n        }\n      }\n      if(index != 0){\n        result =\
    \ word[i];\n        break;\n      }\n    }\n  }\n  return result;\n}", "  var\
    \ consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\n\
    \  var vowels = ['a','e','i','o','u'];\n  var arr = word.split('');\n  var index\
    \ = arr.length - 1;\n  while(index > 0){\n    if(vowels.indexOf(arr[index]) !=\
    \ -1){\n      if(consonants.indexOf(arr[index - 1]) != -1){\n        return arr[index];\n\
    \      }\n    }\n    index--;\n  }\n  return '';\n}", "    var vowels = {'a':1,'e':1,'i':1,'o':1,'u':1};\n\
    \    var last = '';\n    var distance = word.length;\n    for(var i = word.length-1;\
    \ i >= 0; i--){\n        if(vowels[word[i]]){\n            if(last === ''){\n\
    \                last = word[i];\n                distance = word.length - i;\n\
    \            }else{\n                var testDistance = word.length - i;\n   \
    \             if(testDistance < distance){\n                    last = word[i];\n\
    \                    distance = testDistance;\n                }\n           \
    \ }\n        }\n    }\n    return last;\n}\n", "  var vowels = \"aeiou\";\n  var\
    \ result = \"\";\n  var previous = '';\n  var current = '';\n  for(var i = word.length\
    \ - 1; i >= 0; i--){\n    current = word[i];\n    if(vowels.indexOf(current) >\
    \ -1){\n      if(vowels.indexOf(previous) > -1){\n        break;\n      }else{\n\
    \        result = current;\n        break;\n      }\n    }\n    previous = current;\n\
    \  }\n  return result;\n}\n\nvar word = \"codewars\"; // => \"o\"\nvar word =\
    \ \"oruder\"; // => \"u\"\nvar word = \"hello\"; // => \"e\"\nvar word = \"mississippi\"\
    ; // => \"i\"\nvar word = \"n\"; // => \"\"\nvar word = \"b\"; // => \"\"\nvar\
    \ word = \"g\"; // => \"\"\nvar word = \"h\"; // => \"\"\n", "    var len = word.length,\n\
    \        vowels = \"aeiou\";\n    while(len--){\n        if(vowels.indexOf(word[len])\
    \ >= 0 && vowels.indexOf(word[len-1]) < 0 && vowels.indexOf(word[len+1]) < 0)\
    \ return word[len];\n    }\n    return \"\";\n}\n", "    var vowels = \"aeiou\"\
    ;\n    var str = word.split(\"\");\n    var result = \"\";\n    var l = str.length;\n\
    \    if(vowels.indexOf(str[l-1]) === -1){\n        for(var i = l-1; i > 0; i--){\n\
    \            if(vowels.indexOf(str[i]) > -1){\n                result = str[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }", "    var vowels = \"aeiou\";\n    var i = word.length - 1;\n    while(vowels.indexOf(word[i])\
    \ === -1 && i >= 0){\n        i--;\n    }\n    if(vowels.indexOf(word[i]) !==\
    \ -1 && i !== 0){\n        var j = i - 1;\n        while(vowels.indexOf(word[j])\
    \ !== -1 && j >= 0){\n            j--;\n        }\n        if(vowels.indexOf(word[j])\
    \ === -1 && j >= 0){\n            return word[i];\n        }\n    }\n    return\
    \ \"\";\n}\n", "\tif(word.match(/[aeiou]/)){\n\t\tvar lastCon = word.split('').reverse().join('').search(/[^aeiou]/);\n\
    \t\tword = word.slice(word.length - lastCon);\n\t\treturn word.slice(word.search(/[aeiou]/));\n\
    \t}\n\treturn '';\n}", "    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var wordArr\
    \ = word.split('');\n    var arrCons = [];\n    var arrVowels = [];\n    for(var\
    \ i = 0; i < wordArr.length; i++){\n        if(vowels.indexOf(wordArr[i]) ===\
    \ -1){\n            arrCons.push(wordArr[i]);\n        } else if(vowels.indexOf(wordArr[i])\
    \ !== -1){\n            arrVowels.push(wordArr[i]);\n        }\n    }\n    console.log(arrCons);\n\
    \    console.log(arrVowels);\n    var j = 0;\n    var vow = '';\n    while(j <\
    \ arrCons.length){\n        if(arrCons[j] === arrVowels[j]){\n            vow\
    \ = arrVowels[j];\n        }\n        j++;\n    }\n    return vow;\n}", "\tvar\
    \ arr = word.split('');\n\t//console.log(arr);\n\tfor(var i = arr.length-1; i\
    \ > -1; i--){\n\t\tif(arr[i] === 'a' || arr[i] === 'e' || arr[i] === 'i' || arr[i]\
    \ === 'o' || arr[i] === 'u'){\n\t\t\treturn arr[i];\n\t\t}\n\t}\n\treturn '';\n\
    }\n", "  let count = 0;\n  let results = [];\n  for(let i = 0; i < word.length;\
    \ i++){\n    if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u'){\n      count = count + 1;\n      results.push(word[i]);\n\
    \    }\n  }\n  if(count < 2){\n    return \"\";\n  }else{\n    return results[results.length\
    \ - 2];\n  }\n}", "    var vowels = \"aeiou\";\n    var arr = word.split(\"\"\
    ).reverse();\n    var mark;\n    for(var i = 0; i < arr.length; i++){\n      \
    \  if(vowels.indexOf(arr[i]) !== -1){\n            mark = i;\n            break;\n\
    \        }\n    }\n    if(mark === undefined){\n        return \"\";\n    }\n\
    \    if(vowels.indexOf(arr[mark + 1]) !== -1){\n        return \"\";\n    }\n\
    \    return arr[mark];\n}\n", "    var vowels = \"aeiou\";\n    var word = word.split(\"\
    \");\n    for(var i = word.length -1; i > 0; i--){\n        if(vowels.indexOf(word[i])\
    \ != -1 && vowels.indexOf(word[i-1]) == -1){\n            return word[i];\n  \
    \      }\n    }\n    return \"\";\n}", "  let index = null\n  const vowels = \"\
    aeiou\"\n  let found = false\n  const arr = word.split(\"\")\n  const newArr =\
    \ arr.reverse()\n  for(let i = 1; i < newArr.length; i++){\n    if(vowels.includes(newArr[i])\
    \ && !vowels.includes(newArr[i-1])){\n      found = true\n      index = newArr.length\
    \ - i\n      break\n    }\n  }\n  if(!found){\n    return \"\"\n  }else{\n   \
    \ return arr[index]\n  }\n}\n", "    let res = '';\n    let wordCopy = word.split('').reverse().join('');\n\
    \    for(let i = 0; i < wordCopy.length; i++){\n        if(isVowel(wordCopy[i])){\n\
    \            if(isVowel(wordCopy[i+1]) || isVowel(wordCopy[i-1])){\n         \
    \       continue;\n            } else {\n                res = wordCopy[i];\n\
    \                break;\n            }\n        }\n    }\n    if(res === ''){\n\
    \        return res;\n    } else {\n        return res.split('').reverse().join('');\n\
    \    }\n}\n", "\tif (word.match(/[aeiou]/)){\n\t\t//console.log(word);\n\t\tvar\
    \ arr = word.split('').reverse();\n\t\t//console.log(arr);\n\t\tvar cons = [];\n\
    \t\tvar vow = [];\n\t\tvar l;\n\t\tfor (var i = 0; i < arr.length; i++){\n\t\t\
    \tif (arr[i].match(/[aeiou]/)){\n\t\t\t\tvow.push(arr[i]);\n\t\t\t} else {\n\t\
    \t\t\tcons.push(arr[i]);\n\t\t\t}\n\t\t}\n\t\t//console.log(cons);\n\t\t//console.log(vow);\n\
    \t\tvar index = 0;\n\t\tfor (var k = 0; k < cons.length; k++){\n\t\t\tfor (var\
    \ j = 0; j < vow.length; j++){\n\t\t\t\tif (cons[k] == ' '){\n\t\t\t\t\tindex\
    \ = k + 1;\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (cons[k] != vow[j]){\n\t\t\t\t\
    \tindex = k;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    \t//console.log(index);\n\t\tif (index == 0){\n\t\t\treturn '';\n\t\t} else {\n\
    \t\t\tl = arr.length - index;\n\t\t\t//console.log(l);\n\t\t\treturn vow[l - 1];\n\
    \t\t}\n\t} else {\n\t\treturn '';\n\t}\n}", "\tlet temp = word.split('').reverse();\n\
    \t// let index = word.length;\n\tfor(let i = 0; i < temp.length; i++){\n\t\tif('aeiou'.includes(temp[i])){\n\
    \t\t\treturn temp[i];\n\t\t}\n\t}\n\treturn '';\n}", "    let vowels=['a','e','i','o','u']\n\
    \    let idx=word.length-1\n    let hasVowel=false\n    while(idx>0){\n      \
    \  if(vowels.includes(word[idx])){\n            hasVowel=true\n            break\n\
    \        }\n        idx--\n    }\n    if(hasVowel){\n        for(let i=idx-1;i>=0;i--){\n\
    \            if(!vowels.includes(word[i])){\n                return word[idx]\n\
    \            }\n        }\n    }\n    return ''\n}\n", "   var vowel = ['a','e','i','o','u'];\n\
    \   var arr = word.split('');\n   var newArr = [];\n   var theVowel = [];\n  \
    \ for(var i = 0; i < arr.length; i++){\n      for(var j = 0; j < vowel.length;\
    \ j++){\n         if(arr[i] === vowel[j]){\n            newArr.push(arr[i]);\n\
    \         }\n      }\n   }\n   for(var i = 0; i < newArr.length; i++){\n     \
    \ for(var j = 0; j < vowel.length; j++){\n         if(newArr[i] === vowel[j]){\n\
    \            theVowel.push(newArr[i]);\n         }\n      }\n   }\n   return theVowel[theVowel.length\
    \ - 1];\n}", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for(let\
    \ i = word.length - 1; i >= 0; i--){\n        if(vowels.includes(word[i])){\n\
    \            if(!vowels.includes(word[i - 1]) && !vowels.includes(word[i + 1])){\n\
    \                return word[i];\n            }\n        }\n    }\n    return\
    \ \"\";\n}\n\nlet word = \"codewars\";", "  for(var i = word.length - 1; i >=\
    \ 0; i--){\n    if(is_vowel(word[i]) && !is_vowel(word[i - 1]) && !is_vowel(word[i\
    \ + 1])){\n      return word[i];\n    }\n  }\n  return \"\";\n}\n", "    var chars\
    \ = word.split(''),\n        l = chars.length,\n        prevChr = '',\n      \
    \  isConsonant = false,\n        idx = l - 1,\n        result = '';\n    for(;\
    \ idx >= 0; idx--){\n        var chr = chars[idx];\n        if('aeiou'.indexOf(chr)\
    \ >= 0 && isConsonant){\n            result = chr;\n            break;\n     \
    \   }\n        if('aeiou'.indexOf(chr) < 0 && 'aeiou'.indexOf(prevChr) < 0){\n\
    \            isConsonant = true;\n        }\n        prevChr = chr;\n    }\n \
    \   return result;\n}", "\tvar wordArr = word.split('')\n\tvar idx = wordArr.length\
    \ - 1\n\tvar vowels = ['a', 'e', 'i', 'o', 'u']\n\tvar lookForward = false\n\n\
    \twhile(idx >= 0){\n\t\tif(lookForward){\n\t\t\tif(vowels.indexOf(wordArr[idx])\
    \ === -1){\n\t\t\t\treturn wordArr[idx + 1]\n\t\t\t}\n\t\t}\n\t\tif(vowels.indexOf(wordArr[idx])\
    \ === -1){\n\t\t\tlookForward = true\n\t\t}\n\t\tidx--\n\t}\n\treturn ''\n}\n",
  "    let word_arr = word.split('');\n    for(let i = word_arr.length - 1; i > 0;\
    \ i--){\n        if(word_arr[i] === 'a' || word_arr[i] === 'e' || word_arr[i]\
    \ === 'i' || word_arr[i] === 'o' || word_arr[i] === 'u'){\n            if(word_arr[i\
    \ - 1] !== 'a' && word_arr[i - 1] !== 'e' && word_arr[i - 1] !== 'i' && word_arr[i\
    \ - 1] !== 'o' && word_arr[i - 1] !== 'u'){\n                return word_arr[i];\n\
    \            }\n        }\n    }\n    return '';\n}", "  var count = 0;\n  var\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  var closestVowel = \"\";\n\
    \  for(var i = word.length - 1; i >= 0; i--){\n    if(vowels.indexOf(word[i])\
    \ != -1){\n      if(i > 0 && vowels.indexOf(word[i - 1]) == -1){\n        return\
    \ word[i];\n      }\n    }\n  }\n  return closestVowel;\n}\n", "    var letters\
    \ = word.split('');\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   var n, n2;\n    var found = [];\n    for(var i = 0; i < letters.length; i++){\n\
    \        if(vowels.indexOf(letters[i]) === -1){\n            if(vowels.indexOf(letters[i+1])\
    \ > -1){\n                found.push(letters[i+1]);\n            }\n        }\n\
    \    }\n    for(var i = 0; i < found.length; i++){\n        if(found[i] > found[i+1]){\n\
    \            n = found[i];\n            n2 = found[i+1];\n        }\n    }\n \
    \   return n;\n}", "\tconst vowels = \"aeiou\";\n\tlet pos = word.length;\n\t\
    while(pos--){\n\t\tif(vowels.includes(word[pos])){\n\t\t\tlet c = pos;\n\t\t\t\
    let next = true;\n\t\t\twhile(c--){\n\t\t\t\tif(vowels.includes(word[c])) break;\n\
    \t\t\t\tif(!vowels.includes(word[c]) && next){\n\t\t\t\t\treturn word[pos];\n\t\
    \t\t\t\tnext = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn \"\";\n}\n", "\t\
    var vowels = ['a','e','i','o','u','A','E','I','O','U'];\n\tvar wordArray = word.split('');\n\
    \tfor(var i = wordArray.length - 1; i > 0; i--){\n\t\tif(vowels.indexOf(wordArray[i])\
    \ !== -1 && vowels.indexOf(wordArray[i-1]) === -1){\n\t\t\treturn wordArray[i];\n\
    \t\t}\n\t}\n\treturn '';\n}\n", "    var vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    var i = word.length-1;\n    while(vowels.indexOf(word[i]) == -1 && i > 0){\n\
    \        i--;\n    }\n    if(vowels.indexOf(word[i]) == -1){\n        return '';\n\
    \    }\n    return word[i];\n}\n", "  let wordSplit = word.split('')\n  let length\
    \ = wordSplit.length\n  let vowelArray = []\n  let vowelCheck = ['a','e','i','o','u']\n\
    \  let consonantCheck = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n\
    \  let consonantCount = 0\n  let lastConstant = 0\n  let vowelCount = 0\n  let\
    \ lastVowel = 0\n  let answer = []\n  if(vowelCheck.includes(wordSplit[0])){\n\
    \    return ''\n  }\n  for(let i = 1; i < length; i++){\n    if(vowelCheck.includes(wordSplit[i])){\n\
    \      vowelCount++\n      lastVowel = i\n      if(consonantCheck.includes(wordSplit[i-1])){\n\
    \        consonantCount++\n        lastConstant = i\n        if(vowelCount ===\
    \ 1){\n          vowelArray.push(i)\n        }\n      }\n    }\n  }\n  if(vowelCount\
    \ === 0){\n    return ''\n  }else if(consonantCount === 0){\n    return ''\n \
    \ }else if(lastVowel > lastConstant){\n    return wordSplit[lastVowel]\n  }else{\n\
    \    let number = vowelArray[vowelArray.length-1]\n    return wordSplit[number]\n\
    \  }\n}\n", "\t//we need to get the index of each consonant\n\t//we need to get\
    \ the index of the vowels\n\t//we need to figure out which vowel is closer to\
    \ the consonant to the right of it.\n\t//if the closest vowel is to the left of\
    \ the consonant, we return that vowel.\n\t//if there are no consonants to the\
    \ right of a vowel, we return ''.\n\t//if there are no vowels, we return ''.\n\
    \tlet vowels = ['a', 'e', 'i', 'o', 'u'];\n\tlet wordArray = word.split('');\n\
    \t//console.log(wordArray);\n\tlet cons_index = [];\n\tlet vowel_index = [];\n\
    \tfor (let i = 0; i < wordArray.length; i++) {\n\t\tif (vowels.includes(wordArray[i]))\
    \ {\n\t\t\tvowel_index.push(i);\n\t\t} else {\n\t\t\tcons_index.push(i);\n\t\t\
    }\n\t}\n\t//console.log(cons_index);\n\t//console.log(vowel_index);\n\tfor (let\
    \ i = 0; i < cons_index.length; i++) {\n\t\tlet cons_num = cons_index[i];\n\t\t\
    for (let j = 0; j < vowel_index.length; j++) {\n\t\t\tlet vowel_num = vowel_index[j];\n\
    \t\t\tif (vowel_num < cons_num) {\n\t\t\t\treturn wordArray[vowel_num];\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn '';\n}", "  let vowels = {\n    'a': 'a',\n    'e': 'e',\n\
    \    'i': 'i',\n    'o': 'o',\n    'u': 'u',\n    'y': 'y'\n  }\n  for(let i =\
    \ word.length-1; i >= 0; i--){\n    if(vowels[word[i]]) {\n      if(!vowels[word[i-1]]\
    \ && vowels[word[i-1]] !== undefined){\n        return word[i];\n      } else\
    \ if(!vowels[word[i+1]] && vowels[word[i+1]] !== undefined){\n        return word[i];\n\
    \      }\n    }\n  }\n  return '';\n}", "  var i = word.length-1;\n  while(i >=\
    \ 0) {\n    var c = word[i];\n    if(isVowel(c)) {\n      if(i > 0 && isConsonant(word[i-1]))\
    \ return c;\n      if(i < word.length-1 && isConsonant(word[i+1])) return c;\n\
    \    }\n    i--;\n  }\n  return '';\n}\n", "  var vowel = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n  var revWord = word.split(\"\").reverse().join(\"\");\n  for(var\
    \ i = 0; i < revWord.length; i++){\n    for(var j = 0; j < vowel.length; j++){\n\
    \      if(revWord[i] === vowel[j]){\n        return revWord[i];\n      }\n   \
    \ }\n  }\n  return \"\";\n}", "    let vowels = \"aeiou\";\n    let last = \"\"\
    ;\n    let result = \"\";\n    for(let i = word.length - 1; i >= 0; i--){\n  \
    \      if(vowels.includes(word[i])){\n            if(last === \"\"){\n       \
    \         last = word[i];\n            }\n            else{\n                result\
    \ = last;\n                break;\n            }\n        }\n        else{\n \
    \           last = \"\";\n        }\n    }\n    return result;\n}\n", "    return\
    \ \"\";\n}", "  \n}\nget_closest_vowel(\"level\") // 'e'\nget_closest_vowel(\"\
    years\") // 'e'\nget_closest_vowel(\"stars\") // 'a'\nget_closest_vowel(\"trees\"\
    ) // 'e'\n\n", "    var found = \"\";\n    for(var i = word.length - 1; i > 0;\
    \ i--){\n        if(is_vowel(word[i]) && !is_vowel(word[i-1])){\n            found\
    \ = word[i];\n            break;\n        }\n    }\n    return found;\n}", " \
    \   var rvowels = /[aeiou]/gi;\n    var vowels = word.match(rvowels);\n    var\
    \ sub = word.substring(word.indexOf(vowels[0]));\n    for(var i = 0; i < sub.length;\
    \ i++){\n        if(sub[i] === vowels[0]){\n            var idx = sub.indexOf(vowels[0]);\n\
    \            var letter = sub[idx];\n            if(letter === vowels[0]){\n \
    \               if(sub[idx - 1] != vowels[0] && sub[idx + 1] != vowels[0]){\n\
    \                    return letter;\n                }\n            }\n      \
    \  }\n    }\n    return '';\n}\n", "    let splitWord = word.split('');\n    for(let\
    \ i = splitWord.length - 1; i >= 0; i--){\n        let char = splitWord[i];\n\
    \        if(char === 'a' || char === 'e' || char === 'i' || char === 'o' || char\
    \ === 'u'){\n            return char;\n        }\n    }\n    return '';\n}\n",
  "    var vowels = 'aeiou';\n    var prev = '';\n    for(var i = word.length - 1;\
    \ i >= 0; i--){\n        if(vowels.indexOf(word[i]) > -1 && vowels.indexOf(prev)\
    \ === -1){\n            return word[i];\n        }\n        prev = word[i];\n\
    \    }\n    return '';\n}\n", "\treturn word.split('').reverse().join('').match(/([aeiou])[^aeiou]/)\
    \ ? word.split('').reverse().join('').match(/([aeiou])[^aeiou]/)[1] : '';\n}",
  '', "    const vowels = \"aeiou\";\n    let vowelCount = -1;\n    for(let i = word.length\
    \ - 1; i >= 0; i--){\n        if(vowels.includes(word[i])){\n            vowelCount\
    \ = i;\n            break;\n        }\n    }\n    if(vowelCount === -1) return\
    \ '';\n    let count = 0;\n    for(let i = vowelCount - 1; i >= 0; i--){\n   \
    \     if(!vowels.includes(word[i])){\n            count++;\n        }\n      \
    \  if(count === 2){\n            return word[i + 1];\n        }\n    }\n    return\
    \ '';\n}\n", "    if(word.length < 3)\n        return \"\";\n    var characters\
    \ = word.split(\"\");\n    for(var i = word.length - 1; i > 1; i--){\n       \
    \ if(isVowel(characters[i]) && isConsonant(characters[i-1]) && isConsonant(characters[i-2]))\n\
    \            return characters[i];\n    }\n    return \"\";\n}", "    //your code\
    \ here\n}\nget_closest_vowel(\"abcd\") //=> \"a\"\nget_closest_vowel(\"abcde\"\
    ) //=> \"e\"\nget_closest_vowel(\"aeiou\") //=> \"i\"\nget_closest_vowel(\"mbu\"\
    ) //=> \"u\"\nget_closest_vowel(\"aeioua\") //=> \"u\"\nget_closest_vowel(\"abcdeabcde\"\
    ) //=> \"e\"\nget_closest_vowel(\"abcdeabc\") //=> \"e\"\nget_closest_vowel(\"\
    cba\") //=> \"\"\nget_closest_vowel(\"aeiouabcd\") //=> \"e\"", "  var arr = [];\n\
    \  if (word === undefined || word.length < 2) {\n    return \"\";\n  }\n  for\
    \ (var i = 0; i < word.length; i++) {\n    if (word[i] === \"a\" || word[i] ===\
    \ \"e\" || word[i] === \"i\" || word[i] === \"o\" || word[i] === \"u\") {\n  \
    \    if (arr.length === 0) {\n        arr.push(i);\n      } else {\n        arr.push(i);\n\
    \        break;\n      }\n    }\n  }\n  if (arr.length === 0) {\n    return \"\
    \";\n  } else if (arr.length === 1) {\n    return word[arr[0]];\n  } else {\n\
    \    var diff = arr[1] - arr[0];\n    for (var i = 0; i < arr.length; i++) {\n\
    \      if (arr[i + 1] - arr[i] < diff) {\n        diff = arr[i + 1] - arr[i];\n\
    \      }\n    }\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i +\
    \ 1] - arr[i] === diff) {\n        return word[arr[i + 1]];\n      }\n    }\n\
    \  }\n}", "    let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    let consonantsSet\
    \ = new Set(consonants);\n    let isConsonant, isVowel;\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        isConsonant = consonantsSet.has(word[i]);\n   \
    \     isVowel = !isConsonant;\n        if (isConsonant && isVowel) return word[i\
    \ - 1];\n    }\n    return '';\n}", "    //get vowels array\n    var vowels =\
    \ ['a','e','i','o','u'];\n    //get each letter from given word\n    var letters\
    \ = word.split('');\n    var closestVowel = '';\n    //assign 0 to the lastConsonantIndex\n\
    \    var lastConsonantIndex = 0;\n    //assign vowels.length to the firstVowelIndex\n\
    \    var firstVowelIndex = vowels.length;\n    //iterate through the word array\n\
    \    for(var i = 0; i < letters.length; i++){\n        //if the current letter\
    \ is a vowel\n        if(vowels.indexOf(letters[i]) !== -1){\n            //if\
    \ the current letter is a vowel\n            // and the distance between lastConsonantIndex\
    \ and i\n            // is smaller than the distance between firstVowelIndex\n\
    \            // and i\n            if(lastConsonantIndex > firstVowelIndex){\n\
    \                // assign the current letter to closestVowel\n              \
    \  closestVowel = letters[i];\n                // if the closestVowel exists\n\
    \                if(closestVowel){\n                    //return the closestVowel\n\
    \                    return closestVowel;\n                }\n            }\n\
    \            //assign i to the firstVowelIndex\n            firstVowelIndex =\
    \ i;\n        }else{\n            //assign i to the lastConsonantIndex\n     \
    \       lastConsonantIndex = i;\n        }\n    }\n    //return empty string if\
    \ closestVowel is empty\n    return closestVowel;\n}", "  var vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n  var wordArr = word.split(\"\");\n  var filteredArr\
    \ = wordArr.filter(function(value){\n    return vowels.indexOf(value) > -1;\n\
    \  });\n  return filteredArr[filteredArr.length - 1];\n}", "\t// code here\n}\n",
  "  let vowels = 'aeiou';\n  let pos = word.length;\n  for(let i = word.length -\
    \ 1; i >= 0; i--){\n    if(vowels.includes(word[i])){\n      pos = i;\n      break;\n\
    \    }\n  }\n  if(pos === word.length) return '';\n  if(pos < word.length){\n\
    \    for(let i = pos - 1; i >= 0; i--){\n      if(!vowels.includes(word[i])){\n\
    \        return word[pos];\n      }\n    }\n  }\n  return '';\n}", "  if(word.match(/^[aeiou]+$/i)){\n\
    \    return word;\n  }\n  var revWord = word.split('').reverse().join('');\n \
    \ var vowels = \"aeiou\";\n  var index = revWord.search(/[aeiou]/i);\n  if(index\
    \ == -1){\n    return \"\";\n  }\n  var letter = revWord[index];\n  if(letter\
    \ == \"A\" || letter == \"E\" || letter == \"I\" || letter == \"O\" || letter\
    \ == \"U\"){\n    return letter;\n  }\n}", "    var vowels=['a','e','i','o','u'];\n\
    \    var split = word.split('');\n    var result = [];\n    var vowelsIdx = [];\n\
    \    var position = -1;\n    var current = -1;\n    var next = -1;\n    for(var\
    \ i=0;i<split.length;i++){\n        if(vowels.indexOf(split[i])!==-1){\n     \
    \       vowelsIdx.push(i);\n        }\n    }\n    for(var i=vowelsIdx.length-1;i>=0;i--){\n\
    \        next = vowelsIdx[i+1];\n        current = vowelsIdx[i];\n        position\
    \ = vowelsIdx[i-1];\n        if(position!==undefined){\n            if(current-position>1\
    \ && current-position<next-current){\n                result.push(split[current]);\n\
    \                break;\n            }\n        }else{\n            if(current-position>1){\n\
    \                result.push(split[current]);\n                break;\n      \
    \      }\n        }\n    }\n    if(result.length==0){\n        return '';\n  \
    \  }else{\n        return result.join('');\n    }\n}\n", "\tif(typeof word !==\
    \ 'string'){\n\t\treturn 'Invalid input!';\n\t}\n\tlet vowels = 'aeiou';\n\tfor(let\
    \ i = word.length - 1; i >= 0; i--){\n\t\tif(vowels.indexOf(word[i]) !== -1){\n\
    \t\t\treturn word[i];\n\t\t}\n\t}\n\treturn '';\n}", "  let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n  let index = null;\n  for(let i = word.length - 1; i >= 0;\
    \ i--){\n    if(!vowels.includes(word[i])){\n      index = i;\n      break;\n\
    \    }\n  }\n  if(index == null){\n    return '';\n  }\n  for(let i = index -\
    \ 1; i >= 0; i--){\n    if(vowels.includes(word[i])){\n      return word[i];\n\
    \    }\n  }\n  return '';\n}", "    \n    let vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n    let starting = 0;\n    let current_value = \"\";\n    let result\
    \ = \"\";\n    let found = false;\n    for(let i = 0; i < word.length; i++){\n\
    \        current_value = word[i];\n        if(!vowels.includes(current_value)){\n\
    \            if(starting === 0){\n                starting = i;\n            }\n\
    \        }else{\n            if(starting !== 0){\n                if(i === word.length\
    \ - 1){\n                    starting = 0;\n                }else{\n         \
    \           result = current_value;\n                    found = true;\n     \
    \               break;\n                }\n            }\n        }\n    }\n \
    \   if(found){\n        return result;\n    }else{\n        return \"\";\n   \
    \ }\n    \n    \n    \n}", "    //\n    // Write the code\n    //\n    var vowel\
    \ = ['a','e','i','o','u']\n    var newStr = word.split('').reverse().join('')\n\
    \    var match = newStr.match(/[aeiou][^aeiou]/g)\n    console.log(match)\n  \
    \  return match ? match[0].split('').reverse().join('') : ''\n}\n\nvar test =\
    \ get_closest_vowel('abcdabcde')", "    //step 1-> return empty string if word\
    \ is empty\n    if(word.length == 0) return \"\";\n    //step 2-> create a map\
    \ to hold all the vowels\n    var vowelMap = new Map();\n    vowelMap.set('a',\
    \ 'a');\n    vowelMap.set('e', 'e');\n    vowelMap.set('i', 'i');\n    vowelMap.set('o',\
    \ 'o');\n    vowelMap.set('u', 'u');\n    //step 3-> create a set to hold all\
    \ the consonants\n    var consonantMap = new Map();\n    consonantMap.set('b',\
    \ 'b');\n    consonantMap.set('c', 'c');\n    consonantMap.set('d', 'd');\n  \
    \  consonantMap.set('f', 'f');\n    consonantMap.set('g', 'g');\n    consonantMap.set('h',\
    \ 'h');\n    consonantMap.set('j', 'j');\n    consonantMap.set('k', 'k');\n  \
    \  consonantMap.set('l', 'l');\n    consonantMap.set('m', 'm');\n    consonantMap.set('n',\
    \ 'n');\n    consonantMap.set('p', 'p');\n    consonantMap.set('q', 'q');\n  \
    \  consonantMap.set('r', 'r');\n    consonantMap.set('s', 's');\n    consonantMap.set('t',\
    \ 't');\n    consonantMap.set('v', 'v');\n    consonantMap.set('w', 'w');\n  \
    \  consonantMap.set('x', 'x');\n    consonantMap.set('y', 'y');\n    consonantMap.set('z',\
    \ 'z');\n    //step 4-> loop through the word backwards and check if there are\
    \ vowels that are\n    //          between two consonants. If there are, return\
    \ that vowel\n    var prevLetter = '';\n    var currLetter = '';\n    for(var\
    \ i = word.length - 1; i >= 0; i--){\n        currLetter = word[i];\n        if(vowelMap.has(currLetter)\
    \ && consonantMap.has", "    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let\
    \ result = '';\n    let distance = Infinity;\n    for (let i = 0; i < word.length;\
    \ i++) {\n        for (let j = 0; j < vowels.length; j++) {\n            if (word[i]\
    \ === vowels[j]) {\n                if (vowels[j] === 'a' || vowels[j] === 'i'\
    \ || vowels[j] === 'u') {\n                    if (word[i + 1] !== vowels[j] &&\
    \ word[i - 1] !== vowels[j]) {\n                        if (distance > (word.length\
    \ - 1 - i)) {\n                            distance = word.length - 1 - i;\n \
    \                           result = vowels[j];\n                        }\n \
    \                   }\n                } else {\n                    if (word[i\
    \ + 1] !== vowels[j] && word[i - 1] !== vowels[j]) {\n                       \
    \ if (distance > (word.length - 1 - i)) {\n                            distance\
    \ = word.length - 1 - i;\n                            result = vowels[j];\n  \
    \                      }\n                    }\n                }\n         \
    \   }\n        }\n    }\n    return result;\n}\n", "  let arr = word.split('').reverse();\n\
    \  let vowels = [];\n  let index;\n  let first = [];\n  let second = [];\n  for(let\
    \ i = 0; i < arr.length; i++){\n    if(arr[i] == 'a' || arr[i] == 'e' || arr[i]\
    \ == 'i' || arr[i] == 'o' || arr[i] == 'u'){\n      vowels.push(arr[i]);\n   \
    \ }\n  }\n  if(vowels.length == 0) return '';\n  if(vowels.length == 1) return\
    \ vowels[0];\n  for(let i = 0; i < vowels.length; i++){\n    for(let j = i + 1;\
    \ j < vowels.length; j++){\n      first.push(vowels[i]);\n      second.push(vowels[j]);\n\
    \    }\n  }\n  let counter = 0;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i]\
    \ == first[counter] || arr[i] == second[counter]){\n      index = i;\n      counter++;\n\
    \    }\n  }\n  return arr[index];\n}\n", "  const vowels = 'aeiou';\n  let final\
    \ = '';\n  for(let i = word.length-1; i>=0; i--){\n    if(vowels.includes(word[i])){\n\
    \      if(!vowels.includes(word[i-1]) && !vowels.includes(word[i+1])){\n     \
    \   final = word[i];\n        break;\n      }\n    }\n  }\n  return final;\n}",
  "    var vowels = 'aeiou';\n    var index = -1;\n    word = word.split('');\n  \
    \  word.reverse();\n    word.forEach(function(el, i){\n        if(vowels.indexOf(el)\
    \ !== -1 && vowels.indexOf(word[i-1]) === -1 && vowels.indexOf(word[i+1]) ===\
    \ -1){\n            index = i;\n        }\n    });\n    return index === -1 ?\
    \ '' : word[index];\n}\n", "var vowels = 'aeiou';\nvar word = word.split('');\n\
    var v = word.reverse().findIndex(x => vowels.includes(x));\nvar c = word.reverse().findIndex(x\
    \ => !vowels.includes(x));\nreturn v > c ? word[v] : '';\n}", "  let str = word.split('');\n\
    \  let vowel = ['a','e','i','o','u'];\n  let index = [];\n  let vowel_in_index\
    \ = [];\n  let vow_index = 0;\n  let vow_in_index = 0;\n  for(let i = 0; i < str.length;\
    \ i++){\n    for(let j = 0; j < vowel.length; j++){\n      if(str[i] === vowel[j]){\n\
    \        index.push(i);\n      }\n    }\n  }\n  for(let i = 0; i < index.length;\
    \ i++){\n    if(index[i + 1] === index[i] + 2){\n      vowel_in_index.push(index[i]);\n\
    \    }\n  }\n  for(let i = 0; i < vowel_in_index.length; i++){\n    for(let j\
    \ = 0; j < vowel.length; j++){\n      if(str[vowel_in_index[i]] === vowel[j]){\n\
    \        vow_index = vowel_in_index[i];\n        vow_in_index = j;\n      }\n\
    \    }\n  }\n  return str[vow_index];\n}", "    if(!word) return '';\n    var\
    \ vowels = 'aeiou';\n    var ind = word.length - 1;\n    while(ind >= 0){\n  \
    \      if(vowels.indexOf(word[ind]) !== -1) return word[ind];\n        ind--;\n\
    \    }\n    return '';\n}", "  word = word.split('');\n  let vowels = 'aeiou';\n\
    \  for(var i = word.length - 1; i > 0; i--){\n    if(vowels.includes(word[i])\
    \ && !vowels.includes(word[i - 1])){\n      return word[i];\n    }\n  }\n  return\
    \ '';\n}", "  const posibleVowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const\
    \ posibleVowelsIndices = [];\n  for (let i = word.length - 1; i >= 0; i--) {\n\
    \    if (posibleVowels.includes(word[i])) {\n      posibleVowelsIndices.push(i);\n\
    \    }\n  }\n  for (let i = posibleVowelsIndices.length - 1; i >= 0; i--) {\n\
    \    if (posibleVowelsIndices[i] + 1 < word.length && \n    !posibleVowels.includes(word[posibleVowelsIndices[i]\
    \ + 1])) {\n      return word[posibleVowelsIndices[i]];\n    }\n  }\n  return\
    \ \"\";\n}", "    var vowels=['a','e','i','o','u'];\n    var wordArr=word.split('');\n\
    \    wordArr.reverse();\n    for(var i=0;i<wordArr.length;i++){\n      if(wordArr[i]!=wordArr[i+1]\
    \ && vowels.indexOf(wordArr[i])!=-1 && vowels.indexOf(wordArr[i+1])==-1){\n  \
    \      return wordArr[i];\n      }\n    }\n    return '';\n}", "    const vowels\
    \ = 'aeiou';\n    for(let i = word.length-1; i >= 0; i--){\n        if(vowels.includes(word[i])){\n\
    \            if(vowels.includes(word[i-1]) || vowels.includes(word[i+1])){\n \
    \               continue;\n            }\n            return word[i];\n      \
    \  }\n    }\n    return '';\n}", "    let vowels = {\n        'a': true,\n   \
    \     'e': true,\n        'i': true,\n        'o': true,\n        'u': true\n\
    \    }\n    let prevCons = true;\n    let finalVowel = '';\n    for(let i = word.length\
    \ - 1; i >= 0; i--){\n        let char = word[i];\n        if(vowels[char]){\n\
    \            if(!prevCons){\n                finalVowel = char;\n            \
    \    break;\n            }\n        } else {\n            prevCons = true;\n \
    \       }\n    }\n    return finalVowel;\n}", "  \n  let positions = [];\n  let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let letters = word.split(\"\
    \");\n  let count = 0;\n  let last = -1;\n  let vowelPosition = -1;\n  let distance\
    \ = -1;\n  let found;\n  \n  for(let i = 0; i < letters.length; i++){\n    for(let\
    \ j = 0; j < vowels.length; j++){\n      if(letters[i] === vowels[j]){\n     \
    \   positions.push(i);\n      }\n    }\n  }\n  \n  for(let i = 0; i < positions.length;\
    \ i++){\n    count = 0;\n    for(let j = positions[i] + 1; j < letters.length;\
    \ j++){\n      if(vowels.indexOf(letters[j]) === -1){\n        count++;\n    \
    \  }\n      else{\n        if(count > last){\n          vowelPosition = positions[i];\n\
    \          distance = count;\n          last = count;\n          found = letters[positions[i]];\n\
    \        }\n        break;\n      }\n    }\n  }\n  \n  return found ? found :\
    \ \"\";\n}\n", "    const vowels = ['a', 'e', 'i', 'o', 'u']\n    const myArray\
    \ = word.split('')\n    let theWord = []\n    let theIndex = []\n    myArray.map((item,\
    \ index) => {\n      if(vowels.includes(item)){\n        theWord.push(item)\n\
    \        theIndex.push(index)\n      }\n    })\n    let result = theWord[theIndex.length\
    \ - 1]\n    return result\n  }\n\n\n  console.log(get_closest_vowel('abce')) //\
    \ \"e\"\n  console.log(get_closest_vowel('abbce')) // \"b\"\n  console.log(get_closest_vowel('abcde'))\
    \ // \"e\"\n  console.log(get_closest_vowel('abcdea')) // \"a\"\n  console.log(get_closest_vowel('abcdeee'))\
    \ // \"e\"\n  console.log(get_closest_vowel('abcdo')) // \"o\"\n  console.log(get_closest_vowel('abcd'))\
    \ // \"\"\n  console.log(get_closest_vowel('abc')) // \"\"\n  console.log(get_closest_vowel('aeiou'))\
    \ // \"u\"\n  console.log(get_closest_vowel('bba')) // \"a\"\n  console.log(get_closest_vowel('bcdi'))\
    \ // \"i\"\n  console.log(get_closest_vowel('bbbbcdioeu')) // \"o\"\n  console.log(get_closest_vowel('abcdeeiou'))\
    \ // \"i\"\n  console.log(get_closest_vowel('bbbbcdeeiou')) // \"i\"", "\tvar\
    \ v=['a','e','i','o','u']\n\tvar w=word.split('').reverse().join('')\n\tfor(var\
    \ i=0;i<w.length;i++){\n\t\tif(v.indexOf(w[i])>-1){\n\t\t\tif(v.indexOf(w[i+1])>-1){\n\
    \t\t\t\treturn ''\n\t\t\t}\n\t\t\treturn w[i]\n\t\t}\n\t}\n\treturn ''\n}\n",
  "   var vowels = ['a','e','i','o','u'];\n   for(var i = word.length-1; i>=0; i--){\n\
    \       if(vowels.indexOf(word[i])>=0 && vowels.indexOf(word[i-1])===-1 && vowels.indexOf(word[i+1])===-1)\
    \ {\n           return word[i];\n       }\n   }\n   return '';\n}", "  if(word.length\
    \ <= 2)\n    return '';\n  word = word.toLowerCase();\n  var pos = word.length-1;\n\
    \  var vowels = ['a','e','i','o','u'];\n  var val = '';\n  var otherval = '';\n\
    \  for(var i = 0; i < word.length; i++){\n    if(vowels.indexOf(word[i]) >= 0){\n\
    \      val = word[i];\n      for(var j = i; j >= 0; j--){\n        if(vowels.indexOf(word[j])\
    \ >= 0){\n          continue;\n        }else{\n          pos = i;\n          break;\n\
    \        }\n      }\n      break;\n    }\n  }\n  for(var i = pos; i < word.length;\
    \ i++){\n    if(vowels.indexOf(word[i]) >= 0){\n      otherval = word[i];\n  \
    \    for(var j = i; j < word.length; j++){\n        if(vowels.indexOf(word[j])\
    \ >= 0){\n          continue;\n        }else{\n          break;\n        }\n \
    \     }\n      break;\n    }\n  }\n  return (otherval === '')?(''):((otherval.charCodeAt(0)\
    \ - val.charCodeAt(0) > 0)?val:otherval);\n}", "  var vowel = ['a','e','i','o','u']\n\
    \  var arr = word.split('')\n  var index = []\n  for(var i = 0; i < arr.length;\
    \ i++){\n    if(vowel.indexOf(arr[i]) !== -1){\n      index.push(i)\n    }\n \
    \ }\n  for(var i = 0; i < index.length; i++){\n    if(index[i] - index[i-1] ===\
    \ 2){\n      return arr[index[i]]\n    }\n  }\n  return ''\n}", "    var vowels\
    \ = \"aeiou\";\n    var word = word.split(\"\");\n    var last = word.length-1;\n\
    \    var letter = \"\";\n    if(vowels.indexOf(word[last]) != -1){\n      word\
    \ = word.reverse();\n      letter = get_closest_vowel(word.join(\"\"));\n    \
    \  letter = letter.split(\"\").reverse().join(\"\");\n    }else{\n      for(var\
    \ i = last; i > 0; i--){\n        if(vowels.indexOf(word[i]) != -1 && vowels.indexOf(word[i-1])\
    \ == -1){\n          letter = word[i];\n          break;\n        }\n      }\n\
    \    }\n    return letter;\n}", "    const consonants = {\n        'b': '',\n\
    \        'c': '',\n        'd': '',\n        'f': '',\n        'g': '',\n    \
    \    'h': '',\n        'j': '',\n        'k': '',\n        'l': '',\n        'm':\
    \ '',\n        'n': '',\n        'p': '',\n        'q': '',\n        'r': '',\n\
    \        's': '',\n        't': '',\n        'v': '',\n        'w': '',\n    \
    \    'x': '',\n        'y': '',\n        'z': '',\n    }\n    const vowels = {\n\
    \        'a': '',\n        'e': '',\n        'i': '',\n        'o': '',\n    \
    \    'u': '',\n    }\n    let result = '';\n    for (let i = word.length - 1;\
    \ i >= 0; i--) {\n        if (consonants[word[i]] && vowels[word[i - 1]]) {\n\
    \            result = word[i - 1];\n            break;\n        }\n    }\n   \
    \ return result;\n}", "    //your code here\n    const vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let last = word.length - 1;\n    const upperWord\
    \ = word.toUpperCase();\n    while (last > 0) {\n        if (vowels.includes(upperWord[last]))\
    \ {\n            if (vowels.includes(upperWord[last - 1])) {\n               \
    \ return word[last];\n            }\n        }\n        last--;\n    }\n    return\
    \ '';\n}\n", "  var vowels = ['a', 'e', 'i', 'o', 'u'];\n  if (vowels.indexOf(word[word.length\
    \ - 1]) !== -1) {\n    return '';\n  }\n  for (var i = word.length - 1; i >= 0;\
    \ i--) {\n    if (vowels.indexOf(word[i]) !== -1) {\n      return word[i];\n \
    \   }\n  }\n  return '';\n}\n", "    let result = '';\n    let vowel = 'aeiou';\n\
    \    let cons = 'bcdfghjklmnpqrstvwxyz';\n    let distance = word.length;\n  \
    \  let i = word.length - 1;\n    while(i >= 0){\n        if(cons.indexOf(word[i])\
    \ >= 0){\n            break;\n        }\n        i--;\n    }\n    for(let j =\
    \ i - 1; j >= 0; j--){\n        if(vowel.indexOf(word[j]) >= 0){\n           \
    \ if(distance > i - j){\n                distance = i - j;\n                result\
    \ = word[j];\n            }\n        }\n    }\n    return result;\n}", "  let\
    \ vowels = 'aeiou';\n  let consonants = 'bcdfghjklmnpqrstvwxyz';\n  let vowel_index\
    \ = [...word].reverse().findIndex(c => vowels.includes(c));\n  if (vowel_index\
    \ === -1) return '';\n  if (consonants.includes(word[word.length - vowel_index\
    \ - 1]) && \n      consonants.includes(word[word.length - vowel_index - 2])) {\n\
    \    return word[word.length - vowel_index - 1];\n  }\n  return '';\n}", "   \
    \ var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var vowelDist = [];\n    var limit\
    \ = word.length;\n    var result = '';\n    for(var i = 0; i < limit; i++){\n\
    \        if(vowels.indexOf(word[i]) >= 0){\n            vowelDist.push(i);\n \
    \       }\n    }\n    var index = vowelDist.length - 1;\n    while(index >= 0){\n\
    \        if(vowelDist[index] > 0 && vowelDist[index] < limit - 1){\n         \
    \   result = word[vowelDist[index]];\n            index = -1;\n        }\n   \
    \     index--;\n    }\n    return result;\n}", "    let wordArray = word.split('');\n\
    \    let wordLength = wordArray.length;\n    let vowel = '';\n    let vowelIndex\
    \ = 0;\n    let consonantIndex = 0;\n    let lastConsonantIndex = 0;\n    let\
    \ lastVowelIndex = 0;\n    let vowelConsonantDistance = 0;\n    let lastVowelConsonantDistance\
    \ = 0;\n    for (let i = 0; i < wordLength; i++) {\n        if (wordArray[i] ===\
    \ 'a' || wordArray[i] === 'e' || wordArray[i] === 'i' || wordArray[i] === 'o'\
    \ || wordArray[i] === 'u') {\n            vowel = wordArray[i];\n            vowelIndex\
    \ = i;\n            for (let j = i + 1; j < wordLength; j++) {\n             \
    \   if (wordArray[j] !== 'a' && wordArray[j] !== 'e' && wordArray[j] !== 'i' &&\
    \ wordArray[j] !== 'o' && wordArray[j] !== 'u') {\n                    consonantIndex\
    \ = j;\n                    break;\n                }\n            }\n       \
    \     if (vowelIndex !== 0 && consonantIndex !== 0) {\n                vowelConsonantDistance\
    \ = consonantIndex - vowelIndex;\n                lastVowelConsonantDistance =\
    \ lastConsonantIndex - lastVowelIndex;\n                if (vowelConsonantDistance\
    \ > lastVowelConsonantDistance) {\n                    lastVowelConsonantDistance\
    \ = vowelConsonantDistance;\n                    lastVowelIndex = vowelIndex;\n\
    \                    lastConsonantIndex = consonantIndex;\n                }\n\
    \            }\n        }\n    }\n    if (lastVowelConsonantDistance === 0) {\n\
    \        return '';\n    } else {\n        return wordArray[lastVowelIndex];\n\
    \    }\n}\n\nlet word = 'baconismagic';", "  let vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n  let vowelsInWord = word.split('').filter(letter => vowels.includes(letter));\n\
    \  let lastVowel = vowelsInWord[vowelsInWord.length - 1];\n  let closestVowelIndex\
    \ = word.lastIndexOf(lastVowel);\n  if(closestVowelIndex === word.length - 1){\n\
    \    return word[closestVowelIndex - 2];\n  }\n  return word[closestVowelIndex\
    \ + 1];\n}\n", "    if (word.length > 0) {\n        var arr = word.split('');\n\
    \        var vowel = ['a', 'e', 'i', 'o', 'u'];\n        var found = false;\n\
    \        for (var i = arr.length - 1; i >= 0; i--) {\n            if (found) {\n\
    \                if (vowel.indexOf(arr[i]) > -1) {\n                    return\
    \ arr[i];\n                }\n            } else {\n                if (vowel.indexOf(arr[i])\
    \ === -1) {\n                    found = true;\n                }\n          \
    \  }\n        }\n    }\n    return '';\n}\n", "    word = word.split('').reverse();\n\
    \    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(var i = 0; i < word.length;\
    \ i++){\n        if(vowels.includes(word[i])){\n            return word[i];\n\
    \        }\n    }\n    return '';\n}", "  if (word[0] === \"a\" || word[0] ===\
    \ \"e\" || word[0] === \"i\" || word[0] === \"o\" || word[0] === \"u\"){\n   \
    \ return \"\";\n  }\n  if (word[word.length - 1] === \"a\" || word[word.length\
    \ - 1] === \"e\" || word[word.length - 1] === \"i\" || word[word.length - 1] ===\
    \ \"o\" || word[word.length - 1] === \"u\"){\n    return \"\";\n  }\n  for (var\
    \ i = word.length - 1; i >= 0; i--){\n    if (word[i] === \"a\" || word[i] ===\
    \ \"e\" || word[i] === \"i\" || word[i] === \"o\" || word[i] === \"u\"){\n   \
    \   for (var j = i - 1; j >= 0; j--){\n        if (word[j] === \"a\" || word[j]\
    \ === \"e\" || word[j] === \"i\" || word[j] === \"o\" || word[j] === \"u\"){\n\
    \          return word[i];\n        }\n      }\n    }\n  }\n  return \"\";\n}\n",
  "    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    for(var i = word.length - 1; i\
    \ >= 0; i--){\n        if(vowels.indexOf(word[i]) >= 0){\n            if(i ===\
    \ 0){\n                return '';\n            }\n            for(var j = i -\
    \ 1; j >= 0; j--){\n                if(vowels.indexOf(word[j]) < 0){\n       \
    \             return word[i];\n                }\n            }\n        }\n \
    \   }\n    return '';\n}\n\n", "    var vowel = ['a','e','i','o','u'];\n    var\
    \ index = word.length - 1;\n    for(var i = index; i >= 0; i--){\n        if(!vowel.includes(word[i])){\n\
    \            if(vowel.includes(word[i+1])){\n                return word[i+1];\n\
    \            }\n        }\n    }\n    return '';\n}\n\nvar input = 'love';\nvar\
    \ input2 = 'stack';\nvar input3 = 'million';\nvar input4 = 'aloha';\nvar input5\
    \ = 'illinois';\nvar input6 = 'huge';\nvar input7 = 'school';", "    var vowels\
    \ = [];\n    for(var i = 0; i < word.length; i++){\n        if(isVowel(word[i])){\n\
    \            vowels.push(i);\n        }\n    }\n    // console.log(vowels);\n\
    \    if(vowels.length == 0){\n        return \"\";\n    }\n    if(vowels.length\
    \ == 1){\n        return word[vowels[0]];\n    }\n    var result = word[vowels[0]];\n\
    \    var index = 0;\n    for(var i = 0; i < vowels.length - 1; i++){\n       \
    \ if(vowels[i+1] - vowels[i] < vowels[index + 1] - vowels[index]){\n         \
    \   index = i;\n            result = word[vowels[i+1]];\n        }\n    }\n  \
    \  return result;\n}", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let result\
    \ = '';\n    let distance = 0;\n    let idx = word.length - 1;\n    let temp =\
    \ 0;\n    while(idx > 0){\n        if(vowels.includes(word[idx])){\n         \
    \   if(!vowels.includes(word[idx - 1])){\n                for(let i = idx - 1;\
    \ i >= 0; i--){\n                    if(vowels.includes(word[i])){\n         \
    \               return word[idx];\n                    } else if(!vowels.includes(word[i])){\n\
    \                        temp = idx - i;\n                        break;\n   \
    \                 }\n                }\n                if(distance === 0){\n\
    \                    distance = temp;\n                    result = word[idx];\n\
    \                } else if(temp < distance){\n                    distance = temp;\n\
    \                    result = word[idx];\n                }\n            }\n \
    \       }\n        idx--;\n    }\n    return result;\n}", "    const vowels =\
    \ \"aeiou\";\n    let found;\n    for(let i = word.length - 1; i >= 0; i--){\n\
    \        let current = word[i];\n        if(vowels.includes(current)){\n     \
    \       found = current;\n            break;\n        }\n    }\n    return found\
    \ || \"\";\n}\n", "    // \n    // get the index of the vowel\n    // compare\
    \ the indexes of the next and previous consonants\n    // return closest vowel\n\
    \    // if no vowel exists return empty string\n    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let consonants = [1,2,3,4,5,6,7,8,9,0];\n    let\
    \ wordArr = word.split(\"\");\n    let vowelsArr = [];\n    wordArr.forEach(function(letter,\
    \ i){\n        if(vowels.includes(letter)){\n            vowelsArr.push(i);\n\
    \        }\n    });\n    console.log(vowelsArr);\n    let consonsArr = [];\n \
    \   wordArr.forEach(function(letter, i){\n        if(consonants.includes(letter)){\n\
    \            consonsArr.push(i);\n        }\n    });\n    console.log(consonsArr);\n\
    \    let arr = [];\n    for(let i = 0; i < consonsArr.length; i++){\n        for(let\
    \ j = 0; j < vowelsArr.length; j++){\n            if(consonsArr[i] < vowelsArr[j]){\n\
    \                arr.push(consonsArr[i]);\n            }\n        }\n    }\n \
    \   console.log(arr);\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i+1]\
    \ - arr[i] > 1){\n            return wordArr[arr[i]+1];\n        }\n    }\n  \
    \  return \"\";\n}\n\nget_closest_vowel(\"ttestteo\");\n\n", "\tvar cons = \"\
    bcdfghjklmnpqrstvwxyz\",\n\t\tvowels = \"aeiou\",\n\t\tnWord = word.split(\"\"\
    ).reverse().join(\"\"),\n\t\tres = {};\n\tfor(var i = 0; i < nWord.length; i++){\n\
    \t\tif(cons.indexOf(nWord[i]) === -1){\n\t\t\tres.vowel = nWord[i];\n\t\t\tres.pos\
    \ = i;\n\t\t\treturn res;\n\t\t}\n\t}\n\treturn res;\n}\n\nvar result = get_closest_vowel(\"\
    abcde\")", "  let vowels = \"aeiou\",\n      currentIndex = word.length-1;\n \
    \ while(vowels.indexOf(word[currentIndex]) === -1 && currentIndex > 0){\n    currentIndex--;\n\
    \  }\n  if(currentIndex === 0){\n    return \"\";\n  }\n  while(vowels.indexOf(word[currentIndex-1])\
    \ !== -1 && currentIndex > 0){\n    currentIndex--;\n  }\n  return word[currentIndex];\n\
    }\n", "    word = word.split('');\n    for(var i = word.length-1; i > 0; i--){\n\
    \        if(('aeiou'.indexOf(word[i]) > -1) && ('bcdfghjklmnpqrstvwxyz'.indexOf(word[i-1])\
    \ > -1)){\n            return word[i];\n        }\n    }\n    return '';\n}",
  "    var arr = [];\n    for(var i = 0; i < word.length; i++){\n        if(word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'){\n\
    \            arr.push(i);\n        }\n    }\n    var arr2 = [];\n    for(var j\
    \ = 0; j < arr.length - 1; j++){\n        arr2.push(arr[j + 1] - arr[j]);\n  \
    \  }\n    var min = Math.min.apply(null, arr2);\n    var index = arr2.indexOf(min);\n\
    \    if(index == -1){\n        return '';\n    }else{\n        return word[arr[index]];\n\
    \    }\n}", "    let vowels = 'aeiou';\n    let index  = word.length - 1;\n  \
    \  while(!vowels.includes(word[index])){\n        index--;\n    }\n    if(index\
    \ == 0){\n        return '';\n    }\n    return word[index];\n}\n", "  var vowels\
    \ = \"aeiou\";\n  var returnLetter = \"\";\n  var consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n  for(var i = word.length-1; i>=0; i--){\n    if(vowels.indexOf(word[i]) >=\
    \ 0){\n      if(i+1<=word.length-1 && consonants.indexOf(word[i+1]) >= 0){\n \
    \       returnLetter = word[i];\n        break;\n      }\n    }\n  }\n  return\
    \ returnLetter;\n}", "  var vowels = ['a', 'e', 'i', 'o', 'u'];\n  var newWord\
    \ = word.split('');\n  for(var i = newWord.length-1; i > 0; i--){\n    if(vowels.indexOf(newWord[i])\
    \ !== -1 && vowels.indexOf(newWord[i-1]) === -1){\n      return newWord[i];\n\
    \    }\n  }\n  return '';\n}\n", "    word = word.split('');\n    var vowels =\
    \ /[aeiou]/i;\n    if(vowels.test(word[word.length-1])) {\n      return '';\n\
    \    } else {\n      for(var i = word.length-1; i >= 0; i--) {\n        if(vowels.test(word[i]))\
    \ {\n          if(vowels.test(word[i-1])) {\n            return '';\n        \
    \  } else {\n            return word[i];\n          }\n        }\n      }\n  \
    \  }\n    return '';\n}", "    var vowels = 'aeiou';\n    var rev = word.split('').reverse().join('');\n\
    \    var idx = rev.search(/[aeiou]/);\n    if (idx === -1) return '';\n    if\
    \ (idx === 0 || rev[idx - 1] === ' ') return '';\n    return rev[idx];\n}\n",
  "  let v = \"aeiouAEIOU\";\n  if (v.includes(word[word.length-1])) return \"\";\n\
    \  for (let i = word.length-1; i >= 0; i--){\n    if (!v.includes(word[i])) continue;\n\
    \    if (i === 0) return word[i];\n    if (!v.includes(word[i-1])) return word[i];\n\
    \  }\n  return \"\";\n}", "    let vowels = \"aeiouAEIOU\";\n    let arr = word.split(\"\
    \");\n    if(vowels.includes(arr[0])) return \"\";\n    if(!vowels.includes(arr[arr.length-1]))\
    \ return \"\";\n    let index,\n        flag = false;\n    for(let i = arr.length-1;\
    \ i >= 0; i--){\n        if(vowels.includes(arr[i])){\n            index = i;\n\
    \            flag = true;\n            break;\n        }\n    }\n    if(!flag)\
    \ return \"\";\n    for(let i = index-1; i >= 0; i--){\n        if(!vowels.includes(arr[i])){\n\
    \            return arr[index];\n        }\n    }\n    return \"\";\n}", "   \
    \ var VOWELS = ['a', 'e', 'i', 'o', 'u'];\n    word = word.split('').reverse().join('');\n\
    \    var result = '', i = 0;\n    while(result.length === 0 && i < word.length)\
    \ {\n        if(VOWELS.indexOf(word[i]) > -1 && word[i+1] && VOWELS.indexOf(word[i+1])\
    \ < 0) {\n            result = word[i];\n        }\n        i++;\n    }\n    return\
    \ result;\n}\n", "    // write code here\n}\n", "\tvar vowels = \"aeiou\";\n\t\
    if (typeof word === \"string\"){\n\t\tvar a = word.split(\"\");\n\t\tvar vowelsInString\
    \ = a.filter(function(letter){\n\t\t\treturn vowels.indexOf(letter) > -1;\n\t\t\
    });\n\t\tif (vowelsInString.length > 0){\n\t\t\tfor (var i = a.length - 1; i >=\
    \ 0; i--){\n\t\t\t\tvar b = a[i];\n\t\t\t\tif (vowels.indexOf(b) > -1){\n\t\t\t\
    \t\treturn b;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\
    } else {\n\t\t\treturn \"\";\n\t\t}\n\t} else {\n\t\treturn \"That's not a string\"\
    ;\n\t}\n}", "    var vowels = 'aeiou';\n    var vowel_index = word.length;\n \
    \   for(var i = word.length - 1; i >= 0; i--){\n        if(vowels.indexOf(word[i])\
    \ >= 0){\n            vowel_index = i;\n            break;\n        }\n    }\n\
    \    if(vowel_index == word.length){\n        return '';\n    }\n    for(var i\
    \ = vowel_index - 1; i >= 0; i--){\n        if(vowels.indexOf(word[i]) < 0){\n\
    \            return word[vowel_index];\n        }\n    }\n    return '';\n}\n\n\
    var words = ['pencil','party','another','of','good','sometimes','word','hello','banana','always','water','elephant','train','car','bus','new','dog','house','school','dog','cat','puppy','zebra','monkey','bicycle','car','bus','cab','taxi','van','vanilla','bike','apple','mango','pear','mango','apple','cashews','watermelon','banana','mango','guava','banana','mango','cashews','pineapple','apple','papaya','lemon','grapes','lemon','lime','lychee','lime','lemon','strawberry','cherry','orange','melon','orange','plum','strawberry','cherry','orange','watermelon','banana','mango','guava','banana','mango','cashews','pineapple','apple','papaya','lemon','grapes','lemon','lime','lychee','lime','lemon','strawberry','cherry','orange','melon','orange','plum','strawberry','cherry','orange','watermelon','banana','mango','guava','banana','mango','cashews','pineapple','apple','papaya','lemon','grapes','lemon','lime','lychee','lime','lemon','strawberry','cherry','orange','melon','orange','plum','strawberry','cherry','orange','watermelon','banana','mango','guava','banana','mango','cashews','pineapple','apple','",
  "\tvar vowels = 'aeiou';\n\tvar found = '';\n\tfor(var i = word.length - 1; i >=\
    \ 0; i--){\n\t\tif(word[i] == ' '){\n\t\t\tcontinue;\n\t\t}\n\t\tif(vowels.indexOf(word[i])\
    \ == -1){\n\t\t\tif(found.length == 0){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn\
    \ found;\n\t\t}\n\t\tfound = word[i];\n\t}\n\treturn '';\n}", "  for(var i = word.length\
    \ - 1; i >= 0; i--){\n    var current = word[i];\n    var previous = word[i -\
    \ 1];\n    var next = word[i + 1];\n    if(current === 'a' || current === 'e'\
    \ || current === 'i' || current === 'o' || current === 'u'){\n      if(previous\
    \ !== 'a' && previous !== 'e' && previous !== 'i' && previous !== 'o' && previous\
    \ !== 'u' && next !== 'a' && next !== 'e' && next !== 'i' && next !== 'o' && next\
    \ !== 'u'){\n        return current;\n      }\n    }\n  }\n  return '';\n}\n",
  "\tvar vowels = ['a','e','i','o','u'];\n\tvar list=[];\n\tvar indexs=[];\n\tvar\
    \ index =0;\n\tvar result = '';\n\tvar arr = word.split('');\n\tvar diff_list=[];\n\
    \tconsole.log(arr);\n\tfor(var i =0; i<arr.length; i++){\n\t\tvar letter = arr[i];\n\
    \t\tif(letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter\
    \ == 'u'){\n\t\t\t//console.log(letter);\n\t\t\tlist.push(letter);\n\t\t\tindexs.push(i);\n\
    \t\t}\n\t}\n\tif(list.length <= 1){\n\t\treturn '';\n\t}\n\tconsole.log(list);\n\
    \tconsole.log(indexs);\n\tfor(var i =0; i<list.length; i++){\n\t\tvar index=indexs[i];\n\
    \t\tvar result = arr[index+1];\n\t\tconsole.log(result);\n\t\tif(result == undefined){\n\
    \t\t\tdiff_list.push('');\n\t\t}\n\t\telse if(result != 'a' && result != 'e' &&\
    \ result != 'i' && result != 'o' && result != 'u'){\n\t\t\tconsole.log(result);\n\
    \t\t\tdiff_list.push(list[i]);\n\t\t}\n\t}\n\tconsole.log(diff_list);\n\tvar compare\
    \ = diff_list[0];\n\tif(compare == ''){\n\t\treturn '';\n\t}\n\tfor(var i =1;\
    \ i<diff_list.length; i++){\n\t\tvar result = diff_list[i];\n\t\tif(result !=\
    \ ''){\n\t\t\tvar index = word.indexOf(result);\n\t\t\tconsole.log(index);\n\t\
    \t\tvar compare_index = word.indexOf(compare);\n\t\t\tconsole.log(compare_index);\n\
    \t\t\tif(index < compare_index){\n\t\t\t\tcompare = result;\n\t\t\t", "  var vowel_arr\
    \ = ['a','e','i','o','u'];\n  var current_char = '';\n  var current_char_index\
    \ = '';\n  var word_length = word.length;\n  var is_consonant = false;\n  var\
    \ candidate_char = '';\n  var candidate_char_index = '';\n  var next_char = '';\n\
    \  var next_char_index = '';\n  var is_next_consonant = false;\n  var result =\
    \ '';\n  for(i=word_length-1; i>=0; i--){\n    current_char = word[i];\n    current_char_index\
    \ = i;\n    if(vowel_arr.indexOf(current_char) === -1){\n      is_consonant =\
    \ true;\n      if(is_next_consonant){\n        candidate_char = next_char;\n \
    \       candidate_char_index = next_char_index;\n        result = candidate_char;\n\
    \        break;\n      }\n    }else{\n      if(is_consonant){\n        next_char\
    \ = current_char;\n        next_char_index = current_char_index;\n        is_next_consonant\
    \ = true;\n      }\n    }\n  }\n  return result;\n}", "  const vowel_values =\
    \ {\n    a: 0,\n    e: 1,\n    i: 2,\n    o: 3,\n    u: 4\n  }\n  let arr = word.split('');\n\
    \  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let closest = 0;\n  let closest_index\
    \ = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    let index = arr.length\
    \ - 1 - i;\n    if (!vowels.includes(arr[i])) {\n      for (let j = index + 1;\
    \ j < arr.length; j++) {\n        if (vowels.includes(arr[j])) {\n          if\
    \ (index - vowel_values[arr[j]] > closest) {\n            closest = index - vowel_values[arr[j]];\n\
    \            closest_index = j;\n          }\n        }\n      }\n    }\n  }\n\
    \  return arr[closest_index];\n}\n", "   // your code here\n   \n    var wordArr\
    \ = word.split('');\n\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \n    var consCount = 0;\n\n    if (vowels.indexOf(wordArr[wordArr.length - 1])\
    \ !== -1) {\n        return \"\";\n    }\n\n    for (var i = wordArr.length -\
    \ 1; i >= 0; i--) {\n        if (vowels.indexOf(wordArr[i]) !== -1) {\n      \
    \      if (consCount > 0) {\n                return wordArr[i];\n            }\n\
    \        } else {\n            consCount++;\n        }\n    }\n\n    return \"\
    \";\n\n}\n\nget_closest_vowel(\"infinitesimal\"); // 'e'\nget_closest_vowel(\"\
    shm\"); // 'o'\nget_closest_vowel(\"hint\"); // 'i'\nget_closest_vowel(\"cdfrt\"\
    ); // 'e'\nget_closest_vowel(\"abc\"); // ''\nget_closest_vowel(\"wxyzz\"); //\
    \ ''", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let consonants = ['b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'];\n    let word_split = word.split('');\n    for(let i =\
    \ word_split.length-1; i > 0; i--){\n        if(vowels.includes(word_split[i])\
    \ && consonants.includes(word_split[i-1])){\n            return word_split[i];\n\
    \        }\n    }\n    return '';\n}", "\tconst search = {\n\t\t'a':true,\n\t\t\
    'e':true,\n\t\t'i':true,\n\t\t'o':true,\n\t\t'u':true\n\t}\n\tlet found = '';\n\
    \tfor(let i = word.length-1; i >= 0; i--){\n\t\tif(word[i] in search){\n\t\t\t\
    found = word[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(found){\n\t\tfor(let i = word.length-1;\
    \ i >= 0; i--){\n\t\t\tif(word[i] in search){\n\t\t\t\treturn found;\n\t\t\t}else{\n\
    \t\t\t\tfound = '';\n\t\t\t}\n\t\t}\n\t}\n\treturn found;\n}", "    let ind =\
    \ 0;\n    for(let i = 0; i < word.length - 1; i++){\n        if(isVowel(word[i])\
    \ && !isVowel(word[i + 1])){\n            ind = i;\n        }\n    }\n    for(let\
    \ i = ind; i >= 0; i--){\n        if(!isVowel(word[i]) && isVowel(word[i + 1])){\n\
    \            return word[i + 1];\n        }\n    }\n    return \"\";\n}\n", " \
    \ if(typeof word !== 'string'){\n    throw new Error('This is not a string');\n\
    \  }\n  var vowel = ['a','e','i','o','u'];\n  var vowel_idx = [];\n  var result\
    \ = '';\n  var letter = '';\n  var letter_idx = 0;\n  var closest_distance = Infinity;\n\
    \  var distance = 0;\n  var word_array = word.split('');\n  var i;\n  for(i =\
    \ 0; i < word_array.length; i++){\n    letter = word_array[i];\n    if(vowel.indexOf(letter)\
    \ !== -1){\n      vowel_idx.push(i);\n    }\n  }\n  for(i = 0; i < vowel_idx.length;\
    \ i++){\n    letter_idx = vowel_idx[i];\n    if(letter_idx !== 0 && letter_idx\
    \ !== word_array.length - 1){\n      distance = Math.abs(word_array.length - 1\
    \ - letter_idx);\n      if(distance < closest_distance){\n        closest_distance\
    \ = distance;\n        result = letter;\n      }\n    }\n  }\n  return result;\n\
    }", "    if (word.length < 3) {\n        return \"\";\n    }\n    word = word.toLowerCase();\n\
    \    let vowels = 'aeiou';\n    let tmp = '';\n    let i = word.length - 1;\n\
    \    while (i >= 0) {\n        if (vowels.indexOf(word[i]) != -1) {\n        \
    \    if (vowels.indexOf(word[i - 1]) == -1 && vowels.indexOf(word[i + 1]) == -1)\
    \ {\n                return word[i];\n            }\n        }\n        i--;\n\
    \    }\n    return \"\";\n}\n", "  let letters = word.split('');\n  if (letters.length\
    \ < 3) return \"\";\n  let last_consonant = letters.length - 2;\n  let first_vowel\
    \ = letters.length - 1;\n  for (let i = letters.length - 1; i >= 0; i--) {\n \
    \   if (!is_vowel(letters[i])) {\n      last_consonant = i;\n    } else {\n  \
    \    first_vowel = i;\n      break;\n    }\n  }\n  return (first_vowel > last_consonant)\
    \ ? letters[first_vowel] : \"\";\n}\n", "    let vowels = {a:1,e:1,i:1,o:1,u:1};\n\
    \    word = word.split('');\n    word.reverse();\n    for(let i = 0; i < word.length;\
    \ i++){\n        if(vowels[word[i]]){\n            if(vowels[word[i+1]] || vowels[word[i-1]]){\n\
    \                continue;\n            }else{\n                return word[i];\n\
    \            }\n        }\n    }\n    return '';\n}\n", "  var vowelList = 'aeiouAEIOU';\n\
    \  for(i = word.length - 1; i >= 0; i--){\n    if(vowelList.indexOf(word[i]) ==\
    \ -1){\n      if(vowelList.indexOf(word[i-1]) > -1){\n        return word[i-1];\n\
    \      }\n    }\n  }\n  return \"\";\n}\n", "  if(word.split('').some(e=>['a','e','i','o','u'].includes(e))){\n\
    \    return [...word].filter(e=>/[aeiou]/.test(e)).pop()\n  }\n  return ''\n}",
  "    let results = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let newWord = word.split(\"\
    \").reverse().join(\"\");\n    console.log(newWord);\n    for(let i = 1; i < newWord.length;\
    \ i++){\n        let nextLetter = newWord[i + 1];\n        if(results.includes(newWord[i])\
    \ && results.includes(nextLetter) === false){\n            return newWord[i];\n\
    \        }\n    }\n    return \"\";\n}", "  let vowels = \"aeiou\";\n  let right\
    \ = word.length - 1;\n  let left = 0;\n  for(left; left < right; left++){\n  \
    \  if(vowels.includes(word[left])){\n      break;\n    }\n  }\n  for(right; right\
    \ > left; right--){\n    if(vowels.includes(word[right])){\n      break;\n   \
    \ }\n  }\n  if(left >= right){\n    return \"\";\n  }\n  return word[(right -\
    \ left < left + (word.length - right)) ? right : left];\n}", "\tlet vowels = 'aeiou';\n\
    \tfor(let i = word.length -1; i >= 0; i--){\n\t\tif(vowels.includes(word[i]) &&\
    \ vowels.includes(word[i-1])){\n\t\t\treturn word[i-1];\n\t\t}\n\t}\n\treturn\
    \ '';\n}", "    var position = word.lastIndexOf(/[bcdfghjklmnpqrstvwxyz]?([aeiou])[bcdfghjklmnpqrstvwxyz]/);\n\
    \    if (position >= 0) {\n        return word.substring(position+1, position+2);\n\
    \    }\n    return '';\n}\n", "  var i = word.length - 1;\n  var vowels = 'aeiouAEIOU';\n\
    \  var count = 0;\n  while(i >= 0){\n    if(vowels.indexOf(word[i]) != -1){\n\
    \      if(count == 1){\n        return word[i];\n      }else{\n        count++;\n\
    \      }\n    }else{\n      count = 0;\n    }\n    i--;\n  }\n  return '';\n}",
  "    for(var i = word.length-1; i>=0; i--){\n        if(!isVowel(word[i])){\n  \
    \          for(var j = i-1; j>=0; j--){\n                if(isVowel(word[j])){\n\
    \                    return word[j];\n                }\n            }\n     \
    \   }\n    }\n    return \"\";\n}\n", "  word = word.split('');\n  word.reverse();\n\
    \  word = word.join('');\n  var vowels = ['a','e','i','o','u'];\n  var vowelIndex;\n\
    \  var result;\n  if(word.charAt(0) === vowels[0] || word.charAt(0) === vowels[1]\
    \ ||\n     word.charAt(0) === vowels[2] || word.charAt(0) === vowels[3] ||\n \
    \    word.charAt(0) === vowels[4]){\n    return '';\n  }\n  for(var i = 0; i <\
    \ word.length; i++){\n    if(word.charAt(i) === vowels[0] || word.charAt(i) ===\
    \ vowels[1] ||\n       word.charAt(i) === vowels[2] || word.charAt(i) === vowels[3]\
    \ ||\n       word.charAt(i) === vowels[4]){\n      vowelIndex = i;\n      if(word.charAt(vowelIndex\
    \ - 1) !== vowels[0] && word.charAt(vowelIndex - 1) !== vowels[1] &&\n       \
    \ word.charAt(vowelIndex - 1) !== vowels[2] && word.charAt(vowelIndex - 1) !==\
    \ vowels[3] &&\n        word.charAt(vowelIndex - 1) !== vowels[4] && word.charAt(vowelIndex\
    \ + 1) !== vowels[0] &&\n        word.charAt(vowelIndex + 1) !== vowels[1] &&\
    \ word.charAt(vowelIndex + 1) !== vowels[2] &&\n        word.charAt(vowelIndex\
    \ + 1) !== vowels[3] && word.charAt(vowelIndex + 1) !== vowels[4]){\n        result\
    \ = word.charAt(vowelIndex);\n        return result;\n      }\n    }\n  }\n  return\
    \ '';\n}", "    const vowels = 'aeiou';\n    let splitWord = word.split('');\n\
    \    // console.log(splitWord);\n    let theVowel = '';\n    let position = 0;\n\
    \    let distance = Infinity;\n    let left, right;\n    let count = 0;\n    for(let\
    \ i = 0; i < splitWord.length; i++){\n        left = '';\n        right = '';\n\
    \        if(vowels.includes(splitWord[i])){\n            left = splitWord.slice(0,\
    \ i);\n            right = splitWord.slice(i + 1);\n            count = 0;\n \
    \           left.reverse().map(val => {\n                count++;\n          \
    \      if(!vowels.includes(val)){\n                    if(count < distance){\n\
    \                        distance = count;\n                        theVowel =\
    \ splitWord[i];\n                        position = i;\n                    }\n\
    \                    return;\n                }\n            });\n           \
    \ count = 0;\n            right.map(val => {\n                count++;\n     \
    \           if(!vowels.includes(val)){\n                    if(count < distance){\n\
    \                        distance = count;\n                        theVowel =\
    \ splitWord[i];\n                        position = i;\n                    }\n\
    \                    return;\n                }\n            });\n        }\n\
    \    }\n    // console.log(position);\n    return position === 0 ? '' : splitWord[position];\n\
    }", "  let vowels = [];\n  let currentVowel = \"\";\n  for(let i = word.length\
    \ - 1; i >= 0; i--){\n    if(word[i] == \"a\" || word[i] == \"e\" || word[i] ==\
    \ \"i\" || word[i] == \"o\" || word[i] == \"u\"){\n      vowels.push(word[i]);\n\
    \    }\n  }\n  for(let i = vowels.length - 1; i >= 0; i--){\n    if(i == vowels.length\
    \ - 1){\n      currentVowel = vowels[i];\n    }\n    else if(currentVowel != vowels[i]\
    \ && vowels[i] != vowels[i - 1]){\n      return vowels[i];\n    }\n  }\n  return\
    \ \"\";\n}", "  // \uC18C\uBB38\uC790 \uC778\uB371\uC2A4 \n  let vowelIndex =\
    \ word.length-1;\n  for(let i = 0; i < word.length; i++){\n    if(isVowel(word[i])){\n\
    \      vowelIndex = i;\n      break;\n    }\n  }\n  return vowelIndex;\n}\n",
  "  word = word.split('').reverse().join('');\n  for(var i = 0; i < word.length;\
    \ i++){\n    if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u'){\n      for(var j = i; j < word.length; j++){\n  \
    \      if(word[j] != 'a' && word[j] != 'e' && word[j] != 'i' && word[j] != 'o'\
    \ && word[j] != 'u'){\n          return word[i];\n        }\n      }\n    }\n\
    \  }\n  return '';\n}\n", "    for(let i = word.length - 1; i >= 0; i--){\n  \
    \      if(is_vowel(word[i]) && is_consonant(word[i - 1]) && is_consonant(word[i\
    \ + 1])){\n            return word[i];\n        }\n    }\n    return '';\n}",
  "    let vowelSet = 'aeiou';\n    let cons = 0;\n    let curr = '';\n    let thevowel\
    \ = '';\n    let distance = Infinity;\n    for(let i = word.length - 1; i >= 0;\
    \ i--){\n        if(vowelSet.includes(word[i])){\n            curr = word[i];\n\
    \            cons = 0;\n        }else{\n            cons++;\n        }\n     \
    \   if(cons === 2){\n            let distance = word.length - i - 1;\n       \
    \     if(distance < thevowel){\n                thevowel = curr;\n           \
    \ }\n        }\n    }\n    return thevowel;\n}\n", "    var vowels = 'aeiou';\n\
    \    var latest_vowel = '';\n    var latest_consonant = '';\n    for(var i = word.length-1;\
    \ i>=0; i--){\n        if(vowels.indexOf(word[i])!=-1){\n            latest_vowel\
    \ = word[i];\n            if(latest_consonant){\n                return latest_vowel;\n\
    \            }\n        }\n        else{\n            latest_consonant = word[i];\n\
    \        }\n    }\n    return '';\n}\n", "    let vowels = 'aeiou';\n    for(let\
    \ i = word.length - 1; i >= 0; i--){\n        if(vowels.includes(word[i])){\n\
    \            if(vowels.includes(word[i - 1]) || vowels.includes(word[i + 1])){\n\
    \                continue;\n            }else{\n                return word[i];\n\
    \            }\n        }\n    }\n    return '';\n}", "    if (typeof word !==\
    \ 'string') {\n        return \"Unexpected parameter type\"\n    }\n    if (word.length\
    \ === 0) {\n        return \"Unexpected parameter length\"\n    }\n    if (word.length\
    \ === 1) {\n        return \"No consonants in the word\"\n    }\n    if (word.length\
    \ === 2) {\n        return \"No consonants between vowels\"\n    }\n    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    let consonants = [];\n    for (let i = 0;\
    \ i < word.length; i++) {\n        if (vowels.indexOf(word[i]) === -1) {\n   \
    \         consonants.push(word[i]);\n        }\n    }\n    if (consonants.length\
    \ === 0) {\n        return \"No consonants in the word\"\n    }\n    if (consonants.length\
    \ === 1) {\n        return \"No consonants between vowels\"\n    }\n    let vowelResult\
    \ = [];\n    for (let i = 1; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            vowelResult.push(word[i]);\n        }\n    }\n    for\
    \ (let i = 0; i < vowelResult.length; i++) {\n        if (consonants.indexOf(word[i])\
    \ !== -1) {\n            vowelResult = [];\n        }\n    }\n    if (vowelResult.length\
    \ === 0) {\n        return \"No consonants between vowels\"\n    }\n    return\
    \ vowelResult[vowelResult.length - 1];\n}", '//word: "c"   //return empty string',
  "    let vowel = 'aeiou';\n    for(let i = word.length - 1; i >= 0; i--){\n    \
    \    if(vowel.includes(word[i])){\n            return word[i];\n        }\n  \
    \  }\n    return '';\n}\n", "    //the word that will be returned\n    let vowelWord\
    \ = [];\n    //arrays of vowel and consanants\n    let vowels = ['a', 'e', 'i',\
    \ 'o', 'u', 'y'];\n    let consanants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    //splits the\
    \ word into a string\n    let wordSplit = word.split('');\n    //make one letter\
    \ at a time and check it\n    for(let i = wordSplit.length - 1; i >= 0; i--){\n\
    \        //checks if its a vowel and there is a consanant before it and after\
    \ it\n        if(vowels.includes(wordSplit[i]) && consanants.includes(wordSplit[i\
    \ + 1]) && consanants.includes(wordSplit[i - 1])){\n            //if so it will\
    \ push it to the empty word\n            vowelWord.push(wordSplit[i]);\n     \
    \       //the for loop will break to stop the word from going longer\n       \
    \     break;\n        }\n    }\n    //if the word is empty it will return null\n\
    \    if(vowelWord.length === 0){\n        return null;\n    }\n    //if there\
    \ is a word it will return the word\n    return vowelWord.join('');\n}", "\tlet\
    \ letters = word.split('');\n\tlet vowels = {'a': true, 'e': true, 'i': true,\
    \ 'o': true, 'u': true};\n\tlet first_vowel = 0;\n\tfor(let i = letters.length\
    \ - 1; i >= 0; i--){\n\t\tif(vowels[letters[i]]){\n\t\t\tfirst_vowel = i;\n\t\t\
    \tfor(let j = i - 1; j >= 0; j--){\n\t\t\t\tif(!vowels[letters[j]]){\n\t\t\t\t\
    \treturn word.slice(j + 1, i + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn '';\n\
    }", "    if (word.length < 2) return \"\";\n    var vowels = \"aeiou\";\n    var\
    \ consonants = \"bcdfghjklmnpqrstvwxyz\";\n    var closestvowel = \"\";\n    var\
    \ i = word.length - 1;\n    while (i >= 0){\n        if (consonants.indexOf(word[i])\
    \ == -1) {\n            if (vowels.indexOf(word[i]) != -1){\n                closestvowel\
    \ = word[i];\n                break;\n            }\n        }\n        else{\n\
    \            i--;\n        }\n    }\n    return closestvowel;\n}", "  word = word.split('');\n\
    \  var prevCons = false;\n  var nextCons = false;\n  var vowel = '';\n  for(var\
    \ i = word.length - 1; i >= 0; i--){\n    if(word[i] == 'a' || word[i] == 'e'\
    \ || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'){\n      nextCons = false;\n\
    \      vowel = word[i];\n    }\n    else if(word[i] != 'a' || word[i] != 'e' ||\
    \ word[i] != 'i' || word[i] != 'o' || word[i] != 'u'){\n      nextCons = true;\n\
    \    }\n    if(prevCons == true && nextCons == false){\n      return vowel;\n\
    \    }\n    if(prevCons == false && nextCons == true){\n      prevCons = true;\n\
    \    }\n  }\n  return \"\";\n}", "  var vowels = [];\n  var cons = '';\n  for(var\
    \ i = word.length-1; i >= 0; i--){\n    if(!(/[aeiou]/i).test(word[i])){\n   \
    \   cons += word[i];\n    } else {\n      vowels.push(word[i] + cons);\n     \
    \ cons = '';\n    }\n  }\n  vowels.sort(function(a,b){\n    return a.length -\
    \ b.length;\n  });\n  return vowels[0] || '';\n}", "  let vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (vowels.includes(word[i]))\
    \ {\n      if (i === word.length - 1) return '';\n      if (!vowels.includes(word[i\
    \ - 1]) && !vowels.includes(word[i + 1])) return word[i];\n    }\n  }\n  return\
    \ '';\n}\n", "    const vowels = 'aeiouAEIOU';\n    if(word[0] !== vowels) {\n\
    \        for(let i = 0; i < word.length; i++) {\n            if(word[i] !== vowels)\
    \ {\n                return word[i - 1];\n            }\n        }\n    }\n  \
    \  return '';\n}", "    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var consonants\
    \ = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'];\n    var closest = '';\n    var minDiff = word.length;\n\
    \    word = word.toLowerCase();\n    for (var i = 0; i < word.length; i++) {\n\
    \        if (vowels.indexOf(word[i]) > -1) {\n            for (var j = i + 1;\
    \ j < word.length; j++) {\n                if (consonants.indexOf(word[j]) > -1)\
    \ {\n                    if (j - i < minDiff) {\n                        minDiff\
    \ = j - i;\n                        closest = word[i];\n                    }\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return closest;\n}", "    let vowels = 'aeiou',\n        i = word.length\
    \ - 1;\n    while(vowels.indexOf(word[i]) == -1){\n        i--;\n    }\n    if(i\
    \ == word.length - 1){\n        return '';\n    }\n    return word[i];\n}", " \
    \   let result = [];\n    for(let i = 0; i < word.length; i++){\n      if(word[i]\
    \ === 'a' || word[i] === 'e' || word[i] === 'i' || word[i] === 'o' || word[i]\
    \ === 'u'){\n        if(word[i-1] !== undefined && word[i+1] !== undefined){\n\
    \          if(word[i-1] !== 'a' && word[i-1] !== 'e' && word[i-1] !== 'i' && word[i-1]\
    \ !== 'o' && word[i-1] !== 'u' && word[i+1] !== 'a' && word[i+1] !== 'e' && word[i+1]\
    \ !== 'i' && word[i+1] !== 'o' && word[i+1] !== 'u'){\n            result.push(word[i]);\n\
    \          }\n        }\n      }\n    }\n    if(result.length === 0){\n      return\
    \ '';\n    }else{\n      return result[result.length-1];\n    }\n}\n", "    const\
    \ vowels = ['a', 'e', 'i', 'o', 'u']\n    const consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z']\n    let vowels_map = {}\n    for(let i = 0; i < word.length; i++){\n \
    \       if(vowels.includes(word[i])){\n            let pattern = new RegExp(`[${consonants.join('')}]`);\n\
    \            let left = word.slice(0, i)\n            let right = word.slice(i+1)\n\
    \            //console.log(left)\n            //console.log(right)\n         \
    \   if(left.match(pattern) && right.match(pattern)){\n                //console.log(word[i])\n\
    \                vowels_map[i] = word[i]\n            }\n        }\n    }\n  \
    \  if(Object.keys(vowels_map).length == 0){\n        return ''\n    }else{\n \
    \       let vowels_index = Object.keys(vowels_map)\n        return vowels_map[vowels_index[vowels_index.length-1]]\n\
    \    }\n}", "\tlet vowels = 'aeiou';\n\tlet splitWord = word.split('');\n\tlet\
    \ prev = '';\n\tlet vowel = '';\n\tlet prevVowel = '';\n\tlet myVowel = '';\n\t\
    for(let i = splitWord.length-1; i >= 0; i--){\n\t\tif(vowels.includes(splitWord[i])){\n\
    \t\t\tvowel = splitWord[i];\n\t\t\tif(prev === ' '){\n\t\t\t\treturn vowel;\n\t\
    \t\t} else {\n\t\t\t\tprevVowel = vowel;\n\t\t\t}\n\t\t} else {\n\t\t\tprev =\
    \ splitWord[i];\n\t\t\tif(vowel != '' && prev != ''){\n\t\t\t\treturn prevVowel;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn '';\n}", "  if(!word) return '';\n  var vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n  var res = '';\n  var min = 0;\n  for(var i = 0;\
    \ i < word.length; i++){\n    if(vowels.indexOf(word[i]) >= 0){\n      var left\
    \ = (i-1) >= 0 && !vowels.includes(word[i-1]);\n      var right = (i+1) < word.length\
    \ && !vowels.includes(word[i+1]);\n      if(left && right){\n        if(min ===\
    \ 0 || min > word.length - i){\n          min = word.length - i;\n          res\
    \ = word[i];\n        }\n      }\n    }\n  }\n  return res;\n}\n", "  let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n  let index, closest = word.length;\n  for (let\
    \ i = word.length - 1; i >= 0; i--) {\n    if (vowels.includes(word[i])) {\n \
    \     if (index && i - index > closest) {\n        return word[index];\n     \
    \ }\n      index = i;\n    } else {\n      if (index) {\n        closest = i -\
    \ index;\n      }\n    }\n  }\n  return '';\n}", "    let vowels = \"aeiouAEIOU\"\
    ;\n    for(let i = word.length - 1; i > 0; i--){\n        if(vowels.includes(word[i])\
    \ && !vowels.includes(word[i-1])) return word[i];\n    }\n    return \"\";\n}\n",
  "  const vowels = 'aeiou';\n  for (let i = word.length-1; i >=0; i--){\n    if (vowels.includes(word[i])\
    \ && !vowels.includes(word[i-1]) && !vowels.includes(word[i+1])){\n      return\
    \ word[i];\n    }\n  }\n  return '';\n}", "  var vowels = 'aeiou';\n  var closest_vowel\
    \ = '';\n  var closest_distance = -1;\n  var location = -1;\n  while (location\
    \ < word.length) {\n    location = word.indexOf(vowels[i], location);\n    if\
    \ (location > 0 && location < word.length - 1) {\n      var prev = word[location\
    \ - 1];\n      var next = word[location + 1];\n      if (vowels.indexOf(prev)\
    \ < 0 && vowels.indexOf(next) < 0) {\n        var distance = location - word.length;\n\
    \        if (closest_distance < 0 || Math.abs(distance) < Math.abs(closest_distance))\
    \ {\n          closest_distance = distance;\n          closest_vowel = word[location];\n\
    \        }\n      }\n    }\n    location++;\n  }\n  return closest_vowel;\n}\n",
  "    const vowels = 'aeiou';\n    const consonants = 'bcdfghjklmnpqrstvwxyz';\n\
    \    var arr = word.split('');\n    var consonantArr = [];\n    var vowelArr =\
    \ [];\n    var resultArr = [];\n    for(var i = 0; i < arr.length; i++){\n   \
    \     if(consonants.includes(arr[i])){\n            consonantArr.push(arr[i]);\n\
    \        }\n        if(vowels.includes(arr[i])){\n            vowelArr.push(arr[i]);\n\
    \        }\n    }\n    for(var i = 0; i < consonantArr.length - 1; i++){\n   \
    \     for(var j = 0; j < vowelArr.length; j++){\n            if(word.indexOf(consonantArr[i])\
    \ < word.indexOf(vowelArr[j]) && word.indexOf(consonantArr[i + 1]) > word.indexOf(vowelArr[j])){\n\
    \                resultArr.push(vowelArr[j]);\n            }\n        }\n    }\n\
    \    if(resultArr.length === 0){\n        return '';\n    }\n    return resultArr[resultArr.length\
    \ - 1];\n}", "  let testWord = word.split('').reverse();\n  let vowel = '';\n\
    \  let returnWord = '';\n  let nonVowel = true;\n  for(let i = 0; i < testWord.length;\
    \ i++){\n    if(/[aeiou]/.test(testWord[i])){\n      vowel = testWord[i];\n  \
    \    nonVowel = false;\n    }\n    if(nonVowel === false && /[^aeiou]/.test(testWord[i])){\n\
    \      returnWord = testWord[i] + vowel;\n      return returnWord.split('').reverse().join('');\n\
    \    }\n  }\n  return returnWord;\n}\n", "  let vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n  let index = word.length;\n  for(let i = word.length-1; i >= 0; i--){\n\
    \    if(vowels.includes(word[i])){\n      index = i;\n      break;\n    }\n  }\n\
    \  return index === word.length ? '' : word[index];\n}\nget_closest_vowel('hello');//e\n\
    get_closest_vowel('super');//u\nget_closest_vowel('swimming');//i\nget_closest_vowel('agreement');//e\n\
    get_closest_vowel('rrrrr');//''\n", "    var vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    var after = word.indexOf(word.match(/[aeiou]/g)[0]);\n    for(var i = 0;\
    \ i < after; i++){\n        if(vowels.indexOf(word[i]) !== -1){\n            return\
    \ word[i];\n        }\n    }\n    return '';\n}", "    let res = '';\n    let\
    \ lw = word.toLowerCase();\n    let vowels = 'aeiou';\n    for(let i = 0; i <\
    \ lw.length; i++){\n        if(vowels.indexOf(lw[i]) != -1 && vowels.indexOf(lw[i-1])\
    \ == -1 && vowels.indexOf(lw[i+1]) == -1){\n            res = lw[i];\n       \
    \ }\n    }\n    return res;\n}", "  const ind = word.split('').reverse().findIndex(x\
    \ => 'AEIOUaeiou'.includes(x));\n  return ind < 2 ? '' : word[word.length - 1\
    \ - ind];\n}", "    let s = '';\n    for(let i = word.length-1; i >= 0; i--){\n\
    \        if(word[i] === 'a' || word[i] === 'e' || word[i] === 'i' || word[i] ===\
    \ 'o' || word[i] === 'u'){\n            s = word[i];\n            break;\n   \
    \     }\n    }\n    return s;\n}", "    //....\n    //first check to see if there\
    \ is anything in the string\n    if (word.length === 0) return \"\";\n    //if\
    \ the first or last letter is a vowel, return \"\";\n    if (word[0] === \"a\"\
    \ || word[0] === \"e\" || word[0] === \"i\" || word[0] === \"o\" || word[0] ===\
    \ \"u\") return \"\";\n    if (word[word.length - 1] === \"a\" || word[word.length\
    \ - 1] === \"e\" || word[word.length - 1] === \"i\" || word[word.length - 1] ===\
    \ \"o\" || word[word.length - 1] === \"u\") return \"\";\n    //we are going to\
    \ loop backwards through the string\n    for (let i = word.length - 1; i >= 0;\
    \ i--) {\n        if ((word[i] === \"a\" || word[i] === \"e\" || word[i] === \"\
    i\" || word[i] === \"o\" || word[i] === \"u\") && (word[i - 1] !== \"a\" && word[i\
    \ - 1] !== \"e\" && word[i - 1] !== \"i\" && word[i - 1] !== \"o\" && word[i -\
    \ 1] !== \"u\")) {\n            return word[i];\n        }\n    }\n    return\
    \ \"\";\n}\nlet output = get_closest_vowel(\"avklha\");", "    let vowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n    for(let i = word.length - 1; i >= 0; i--){\n      \
    \  if(vowels.includes(word[i]) && !vowels.includes(word[i + 1])){\n          \
    \  return word[i]\n        }\n    }\n    return ''\n}", "    if(word[0] == \"\
    a\" || word[0] == \"e\" || word[0] == \"i\" || word[0] == \"o\" || word[0] ==\
    \ \"u\"){\n        return \"\"\n    }\n    else{\n        var ar = word.split(\"\
    \");\n        var newAr = [];\n        for(var i = 0; i < ar.length; i++){\n \
    \           if(ar[i] != \"a\" && ar[i] != \"e\" && ar[i] != \"i\" && ar[i] !=\
    \ \"o\" && ar[i] != \"u\"){\n                newAr.push(ar[i]);\n            }\n\
    \        }\n        var count = 0;\n        var newWord = \"\";\n        for(var\
    \ i = ar.length-1; i >= 0; i--){\n            if(ar[i] != \"a\" && ar[i] != \"\
    e\" && ar[i] != \"i\" && ar[i] != \"o\" && ar[i] != \"u\"){\n                count++;\n\
    \            }\n            else{\n                if(count == 1){\n         \
    \           return ar[i];\n                }\n                count = 0;\n   \
    \         }\n        }\n        return \"\";\n    }\n}", "    let vowels = 'aeiou'\n\
    \    let position = null\n    let last_pos_c = 0\n    for(let i = word.length\
    \ - 1; i >= 0; i--){\n        if(vowels.includes(word[i])){\n            position\
    \ = i\n            if(i !== word.length - 1 && word[i + 1] !== ' '){\n       \
    \         if(vowels.includes(word[i + 1])){\n                    continue\n  \
    \              }else{\n                    break\n                }\n        \
    \    }\n        }else{\n            last_pos_c = i\n        }\n    }\n    if(position\
    \ !== null && position > last_pos_c && last_pos_c !== 0){\n        return word[position]\n\
    \    }else{\n        return ''\n    }\n}", "    let vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"];\n    let closest_vowel = \"\";\n    let closest_vowel_distance\
    \ = word.length;\n    let counter = 0;\n    while(counter < word.length){\n  \
    \      let is_vowel = vowels.includes(word[counter]);\n        if(is_vowel){\n\
    \            let distance = word.length - counter;\n            if(distance <\
    \ closest_vowel_distance){\n                closest_vowel = word[counter];\n \
    \               closest_vowel_distance = distance;\n            }\n        }\n\
    \        counter += 1;\n    }\n    return closest_vowel;\n}", "    let vowels\
    \ = \"aeiou\";\n    let pointer_back = word.length - 1;\n    let pointer_front\
    \ = word.length - 1;\n    while(!vowels.includes(word[pointer_back])){\n     \
    \   pointer_back--;\n    }\n    while(!vowels.includes(word[pointer_front])){\n\
    \        pointer_front--;\n    }\n    return word[pointer_back] < word[pointer_front]\
    \ ? word[pointer_back] : word[pointer_front];\n}", "    let v = ['a','e','i','o','u'];\n\
    \    for(let i = word.length - 1; i > 0; i--){\n        if(v.includes(word[i])\
    \ && !v.includes(word[i-1])){\n            return word[i];\n        }\n    }\n\
    \    return '';\n}", "  var cons = 'bcdfghjklmnpqrstvwxyz',\n      split = word.split(''),\n\
    \      first_cons = [],\n      last_cons = [];\n  for(var i = split.length - 1;\
    \ i >= 0; i--){\n    if(cons.indexOf(split[i]) !== -1){\n      last_cons.push(split[i]);\n\
    \    } else if(last_cons.length > 0) {\n      if(first_cons.length === 0){\n \
    \       first_cons.push(split[i]);\n      }\n      return split[i];\n    }\n \
    \ }\n  return '';\n}", "    var vowels = \"aeiouAEIOU\";\n    var left;\n    var\
    \ right;\n    var position;\n    var answer;\n    for(var i = 0; i < word.length;\
    \ i++){\n        if(vowels.indexOf(word[i]) !== -1){\n            position = i;\n\
    \            if(word[i-1] === undefined || vowels.indexOf(word[i-1]) !== -1){\n\
    \                continue;\n            }\n            else{\n               \
    \ right = i;\n                if(left === undefined){\n                    left\
    \ = i;\n                }\n                if(left !== undefined && left !== right){\n\
    \                    return word[left];\n                }\n            }\n  \
    \      }\n    }\n    return word[position];\n}", "    word = word.split('');\n\
    \    for(let i = word.length - 1; i > 0; i--){\n        if(word[i].match(/[aeiou]/)){\n\
    \            if(word[i-1].match(/[^aeiou]/)){\n                return word[i];\n\
    \            }\n        }\n    }\n    return '';\n}\n", "  if (word == \"\"){\n\
    \    return \"\";\n  }\n  else if (word == \"aaa\"){\n    return \"a\";\n  }\n\
    \  else{\n    let cons = word.match(/[bcdfghjklmnpqrstvwxyz]+/g);\n    let vowels\
    \ = word.match(/[aeiou]+/g);\n    if (vowels == null){\n      return \"\";\n \
    \   }\n    else{\n      if (cons[cons.length-1].length <= vowels[vowels.length-1].length){\n\
    \        return vowels[vowels.length-1];\n      }\n      else{\n        return\
    \ vowels[vowels.length-2];\n      }\n    }\n  }\n}", "    let vowels = word.split('').filter(l=>/[aeiou]/gi.test(l));\n\
    \    let consonants = word.split('').filter(l=>/[^aeiou]/gi.test(l));\n    let\
    \ latestConsonant = consonants[consonants.length-1];\n    let latestVowel = vowels[vowels.length-1];\n\
    \    if(vowels.length<2){\n        return \"\"\n    }\n    let index = word.lastIndexOf(latestConsonant)\n\
    \    for(let i = 0; i<word.length; i++){\n        if(word[i]===latestVowel){\n\
    \            return latestVowel\n        }\n    }\n}", "    if(!word) return word;\n\
    \    const vowels = {a:true, e:true, i:true, o:true, u:true};\n    for(let i =\
    \ word.length - 1; i > 0; i--){\n        if(vowels[word[i]] && !vowels[word[i-1]])\
    \ return word[i];\n    }\n    return '';\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
