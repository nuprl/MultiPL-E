name: HumanEval_30_get_positive
language: js
prompt: "//Return only positive numbers in the list.\nfunction get_positive(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
  \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
  \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
  }\n\ntest();"
completions: ["    return l.filter(x => x > 0);\n}\n", "    let result = l.filter(item\
    \ => item >= 0);\n    return result;\n}\n", "    return l.filter(function(a){return\
    \ a>0;});\n}\n", "return _.filter(l,function(num){return num>0});\n}\n", "   \
    \ var l1=[];\n    var i=0;\n    while(i<l.length){\n        if(l[i]>0){\n    \
    \        l1.push(l[i]);\n        }\n        i=i+1;\n    }\n    return l1;\n}\n",
  "    return _.filter(l, function(n){ return n > 0; });\n}\n", "  return l.filter(function(num){\n\
    \    return num > 0;\n  });\n}\n", "\treturn l.filter(function(x){\n\t\treturn\
    \ x > 0;\n\t});\n}\n", "  return l.filter(function(x){\n    return x>0;\n  });\n\
    }\n", "  return l.filter(x => x > 0);\n}\n", "  return l.filter(e => e > 0);\n\
    }\n", "    let result = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i]\
    \ > 0){\n            result.push(l[i]);\n        }\n    }\n    return result;\n\
    }\n", "  return l.filter(e => e>0);\n}\n", "    return l.filter(el=> el>0);\n\
    };\n", "\treturn l.filter(function(number){\n\t\treturn number > 0;\n\t});\n}\n",
  "    var positive = l.filter(function(num){\n        return num > 0;\n    });\n\
    \    return positive;\n}\n", "\tvar positive = [];\n\tfor(var i = 0; i < l.length;\
    \ i++){\n\t\tif(l[i] > 0){\n\t\t\tpositive.push(l[i]);\n\t\t}\n\t}\n\treturn positive;\n\
    }\n", "  return l.filter(x => x>0);\n}\n\n\n", "  return l.filter(function(number){\n\
    \    return number > 0;\n  });\n}\n", "    return l.filter(function(v){\n    \
    \    return v > 0;\n    });\n}", "\treturn l.filter(function(x){\n\t\treturn x\
    \ > 0;\n\t});\n}\n", "    return l.filter(function(num){return num > 0;});\n}\n",
  "    return l.filter(n => n > 0);\n}\n", "  return l.filter(function(el){\n    return\
    \ el > 0;\n  });\n}\n", "\n}\n", "    var res = [];\n    for(var i = 0; i < l.length;\
    \ i++){\n        if(l[i] > 0){\n            res.push(l[i]);\n        }\n    }\n\
    \    return res;\n}", "    return l.filter(function(x){return x>0;});\n}\n", " \
    \ return l.filter(function(i){\n    return i > 0;\n  });\n}\n", "    return l.filter(function(i){\n\
    \        return i>0;\n    });\n}\n", "  return l.filter(function(num){return num\
    \ > 0;});\n}\n", "  return l.filter(num => num > 0);\n}\n", "    const pos = l.filter(function(num){\n\
    \        return num > 0;\n    });\n    return pos;\n}\n", "  let res = [];\n \
    \ for(let i = 0; i < l.length; i++){\n    if(l[i] > 0){\n      res.push(l[i]);\n\
    \    }\n  }\n  return res;\n}", "  return l.filter(function(num){\n    return\
    \ num > 0;\n  });\n}\n", "    return l.filter(n => n > 0);\n}\n", "  return l.filter(function(num){\n\
    \    return num > 0;\n  });\n}\n", "    return l.filter(function(num){\n     \
    \   return num > 0;\n    });\n}", "\treturn l.filter(function(v){\n\t\treturn\
    \ v>0;\n\t});\n}\n", "    var p = []\n    for(var i = 0; i < l.length; i++){\n\
    \        if(l[i] >= 0){\n            p.push(l[i])\n        }\n    }\n    return\
    \ p\n}\n", "    return l.filter(x => x > 0);\n}", "    return l.filter(function(x){\n\
    \        return x>0;\n    });\n}\n", "    return l.filter(x => x>0);\n}\n", " \
    \ return l.filter(function(a){\n    return a>0;\n  });\n}\n", "  // your code\
    \ here\n  return l.filter(e => e>0);\n}\n", "  return l.filter(function(num){\n\
    \    return num > 0;\n  });\n}\n", "    return l.filter(function(x){return x>0;});\n\
    }\n", "\tvar pos = [];\n\tfor(var i=0; i<l.length; i++){\n\t\tif(l[i]>0){\n\t\t\
    \tpos.push(l[i]);\n\t\t}\n\t}\n\treturn pos;\n}\n", "  return l.filter(function(n){\n\
    \    return n >= 0;\n  });\n}\n", "  return _.filter(l,function(v){\n    return\
    \ v>0;\n  });\n}\n", "    return l.filter(function(x){\n        return x > 0;\n\
    \    });\n}\n", "  //your code here\n  let arr = [];\n  for(let i = 0; i < l.length;\
    \ i++){\n    if(l[i] > 0){\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n\
    }\n\n", "\tvar newlist = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(l[i]\
    \ >= 0){\n\t\t\tnewlist.push(l[i]);\n\t\t}\n\t}\n\treturn newlist;\n}\n", "\t\
    return l.filter(function(e){return e>0});\n}\n", "  var pos_list = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    if(l[i] > 0){\n      pos_list.push(l[i]);\n    }\n\
    \  }\n  return pos_list;\n}\n", "  return l.filter(x => x > 0);\n}\n", "  return\
    \ l.filter(function(num){\n    return num > 0;\n  });\n}\n", "  return _.filter(l,\
    \ function(n){\n    return n > 0;\n  });\n}\n", "   var list = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            list.push(l[i]);\n\
    \        }\n    }\n    return list;\n}\n", "  var l1=[];\n  for(var i in l){\n\
    \    if(l[i]>0){\n      l1.push(l[i]);\n    }\n  }\n  return l1;\n}", "    let\
    \ l2 = [];\n    for(let i = 0; i < l.length; i++){\n        if(l[i] >= 0){\n \
    \           l2.push(l[i]);\n        }\n    }\n    return l2;\n}\n", "    return\
    \ l.filter(n => n >= 0);\n}\n", "    const ans = l.filter(x => x > 0);\n    return\
    \ ans;\n}\n", "    const new_l = l.filter(function(num){\n        return num >\
    \ 0;\n    });\n    return new_l;\n}", "    var arr = [];\n    for(var i = 0; i\
    \ < l.length; i++){\n        if(l[i] >= 0){\n            arr.push(l[i]);\n   \
    \     }\n    }\n    return arr;\n}\n", "    return l.filter(e => e > 0);\n}\n",
  "    var newlist = []\n    for (var i = 0; i < l.length; i++){\n        if (l[i]\
    \ >= 0){\n            newlist.push(l[i])\n        }\n    }\n    return newlist\n\
    }\n", "  let result = [];\n  for(let i = 0; i < l.length; i++){\n    if(l[i] >\
    \ 0){\n      result.push(l[i]);\n    }\n  }\n  return result;\n}\n", "    return\
    \ l.filter(el => el > 0);\n}\n", "\treturn l.filter(function(x){\n\t\treturn x>0;\n\
    \t});\n}", "    //Using function keyword\n    function returnPositive(i){\n  \
    \      return i>0;\n    }\n    //Using arrow function\n    var returnPositive2\
    \ = i => i>0;\n    //Using filter (array method)\n    return l.filter(returnPositive);\n\
    }\nvar list_num = [6, -3, -2, 0, 1, 4, -6];", "  //Add code here\n  var new_list\
    \ = l.filter(function(elem){\n    return elem > 0;\n  });\n  return new_list;\n\
    }\n", "  return l.filter(function(a){return a>0;});\n}", "  return l.filter(function(x){\n\
    \    return x>0;\n  });\n}\n", "    return l.filter(i => i > 0);\n}\n", "    var\
    \ new_l = l.filter(function(number){\n        return number > 0;\n    });\n  \
    \  return new_l;\n}\n", "\tvar temp = [];\n\tfor(var i = 0; i < l.length; i++){\n\
    \t\tif(l[i] > 0){\n\t\t\ttemp.push(l[i]);\n\t\t}\n\t}\n\treturn temp;\n}\n", " \
    \   return l.filter(function(x){\n        return x > 0;\n    });\n}\n", "    return\
    \ _.filter(l, function(num){ return num > 0; });\n}\n", "\treturn l.filter( function(n){\n\
    \t\treturn n > 0;\n\t})\n}\n", "  return _.filter(l, function(num){ return num\
    \ > 0; });\n}", "    //console.log(l);\n    return l.filter(x => x > 0);\n}\n",
  "\treturn l.filter(function(x){\n\t\treturn x > 0;\n\t});\n}\n", "    return l.filter(function(num){\n\
    \        return num > 0;\n    });\n}\n", "\tvar temp_list = [];\n\tfor(var i =\
    \ 0; i < l.length; i++){\n\t\tif(l[i] > 0){\n\t\t\ttemp_list.push(l[i]);\n\t\t\
    }\n\t}\n\treturn temp_list;\n}\n", "  return l.filter(function(num){\n    return\
    \ num > 0;\n  });\n}\n", "  return l.filter(e => e>0);\n}\n", "    return l.filter(function(num){\n\
    \        return num > 0;\n    });\n}\n", "  return l.filter(x => x>0);\n}\n",
  "    return l.filter(function(item){\n        return item >= 0;\n    });\n}\n",
  "  return l.filter(function(x){\n    return x > 0;\n  });\n}\n", "\tvar pos = [];\n\
    \tfor(i=0;i<l.length;i++){\n\t\tif(l[i] > 0){\n\t\t\tpos.push(l[i]);\n\t\t}\n\t\
    }\n\treturn pos;\n}\n", "    return l.filter(n => n > 0);\n}\n", "    return l.filter(number\
    \ => number > 0);\n}\n", "\tlet p_list = l.filter(function(num){\n\t\treturn num\
    \ > 0;\n\t});\n\treturn p_list;\n}\n", "  return l.filter( x => x > 0 );\n}\n",
  "  return l.filter(function(number){\n    return number >= 0;\n  });\n}\n", "\n\
    var list = l.filter(function(val){\n    return val >= 0;\n});\n    return list;\n\
    }\n", "  return l.filter(num => num > 0);\n}\n", "    return l.filter(function(n){\n\
    \        return n > 0;\n    });\n}", "    return l.filter(num => num > 0);\n}\n",
  "    return _.filter(l, function(num){ return num > 0; });\n}\n", "  return l.filter(el\
    \ => el > 0);\n}", "\treturn l.filter(function(num){\n\t\treturn num > 0;\n\t\
    });\n}\n", "\tvar new_list = []\n\tfor(var i=0; i<l.length; i++){\n\t\tif(l[i]\
    \ > 0){\n\t\t\tnew_list.push(l[i])\n\t\t}\n\t}\n\treturn new_list\n}", "  return\
    \ l.filter(function(a){\n    return a>0;\n  });\n}\n", "    var arr = []\n   \
    \ for(i = 0; i < l.length; i++){\n        if(l[i] >= 0){\n            arr.push(l[i])\n\
    \        }\n    }\n    return arr\n}\n", "    return l.filter(function(i){\n \
    \       return i > 0;\n    });\n}\n", "    return l.filter(a => a>0);\n}\n", " \
    \ return l.filter(function(num){\n    return num > 0;\n  });\n}\n", "    return\
    \ _.filter(l,(val)=>{\n        return val > 0;\n    });\n}\n", "    var array\
    \ = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n     \
    \       array.push(l[i]);\n        }\n    }\n    return array;\n}\n", "  return\
    \ _.filter(l, function(x){ return x > 0;});\n}\n", "  return l.filter(n => n >\
    \ 0);\n}\n", "    return l.filter(function(x){\n        return x > 0;\n    });\n\
    }\n", "\tvar pos = [];\n\tfor(var i=0; i<l.length; i++){\n\t\tif(l[i]>0){\n\t\t\
    \tpos.push(l[i]);\n\t\t}\n\t}\n\treturn pos;\n}\n", "  return _.filter(l,function(num){\
    \ return num > 0; });\n}\n", "    return l.filter(function(value){\n        return\
    \ value >= 0;\n    });\n}\n", "\treturn _.filter(l, function(num){ return num\
    \ > 0; });\n}\n", "    return l.filter(function(i){\n        return i>0;\n   \
    \ });\n}\n", "  return l.filter(x => x > 0);\n}\n\n", "return _.filter(l, function(num){\
    \ return num > 0; });\n};\n", "  return l.filter(function(v){return v>0});\n}\n",
  "  return l.filter(v => v > 0);\n}\n", "    var l_filter = l.filter(function(item){return\
    \ item>0;});\n    return l_filter;\n}\n", "  return _.filter(l, function(num){\
    \ return num > 0; });\n}\n", "    return l.filter(function(n){\n        return\
    \ n > 0;\n    });\n}\n", "  return _.filter(l, (n) => n > 0);\n}\n", "\tvar new_array\
    \ = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tif(l[i] >= 0){\n\t\t\tnew_array.push(l[i]);\n\
    \t\t}\n\t}\n\treturn new_array;\n}\n", "\tlet list = [];\n\tfor(i = 0; i < l.length;\
    \ i++){\n\t\tif(l[i] > 0){\n\t\t\tlist.push(l[i]);\n\t\t}\n\t}\n\treturn list;\n\
    }\n", "  return l.filter(function(num){\n    return num > 0;\n  });\n}\n", " \
    \   var new_l = l.filter(function(n){\n        return n >= 0;\n    });\n    return\
    \ new_l;\n}\n", "  return l.filter(item => item > 0);\n}", "   var l2 = [];\n\
    \    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            l2.push(l[i]);\n\
    \        }\n    }\n    return l2;\n}\n", "  function get_num(list){\n    return\
    \ list > 0;\n  }\n  var positive = l.filter(get_num);\n  return positive;\n}\n",
  "    return l.filter(function(number){\n        return number > 0;\n    });\n}\n",
  "  let result = [];\n  for(let i = 0; i < l.length; i++){\n    if(l[i] >= 0){\n\
    \      result.push(l[i]);\n    }\n  }\n  return result;\n}\n", "  var new_list\
    \ = []\n  for (var i = 0; i < l.length; i++){\n    if (l[i] > 0){\n      new_list.push(l[i])\n\
    \    }\n  }\n  return new_list\n}", "\treturn l.filter(function(n){\n\t\treturn\
    \ n >= 0;\n\t});\n}\n", "    return l.filter(function(v){\n        return v>0;\n\
    \    });\n}\n", "\treturn _.filter(l,function(num){return num > 0;});\n}\n", " \
    \   let new_list = []\n    for(let i=0; i<l.length; i++){\n        if(l[i] > 0){\n\
    \            new_list.push(l[i])\n        }\n    }\n    return new_list\n}", "\t\
    return l.filter(function(x){\n\t\treturn x>0;\n\t});\n}\n", "  return l.filter(function(n){\n\
    \    return n > 0;\n  });\n}\n", "  return l.filter(item => {\n    return item\
    \ > 0;\n  });\n}", "  var pos = [];\n  for(var i = 0; i < l.length; i++){\n  \
    \  if(l[i] >= 0){\n      pos.push(l[i]);\n    }\n  }\n  return pos;\n}\n", " \
    \ return l.filter(x => x > 0);\n}", "    //console.log(l);\n    let r = l.filter(function(val){\n\
    \        return val > 0;\n    });\n    return r;\n}\n", "  return l.filter(x =>\
    \ x > 0);\n}\n\n", "\tvar positiveList = [];\n\tfor(var i = 0; i < l.length; i++){\n\
    \t\tif(l[i] > 0){\n\t\t\tpositiveList.push(l[i]);\n\t\t}\n\t}\n\treturn positiveList;\n\
    }\n", "    return l.filter(n => n > 0);\n}\n", "    return _.filter(l, function(x){\
    \ return x > 0});\n}\n", "  return l.filter(function(a){\n    return a>0;\n  });\n\
    }\n", "    var l1 = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i]\
    \ > 0){\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}\n", " \
    \   var arr = l.filter(function(number){\n        return number > 0;\n    });\n\
    \    return arr;\n}\n", "  return filter(function(x){ return x > 0; }, l);\n}\n",
  "    var result = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] > 0){\n\
    \            result.push(l[i]);\n        }\n    }\n    return result;\n}\n", " \
    \ return l.filter(x => x > 0);\n}\n", "    // your code here\n    return l.filter(function(n){\n\
    \        return n > 0;\n    });\n}\n", "    var positive_list = []\n    for (var\
    \ i = 0; i < l.length; i++){\n        if (l[i] > 0){\n            positive_list.push(l[i])\n\
    \        }\n    }\n    return positive_list\n}\n", "  return l.filter(num => num\
    \ > 0);\n}", "  var pos = l.filter(function(x){\n    return x > 0;\n  });\n  return\
    \ pos;\n}\n", "    return l.filter(a => a > 0);\n}\n", "    return l.filter(function(x){\n\
    \        return x>0;\n    });\n}\n", "    return l.filter(function(num){return\
    \ num>0});\n}\n", "    return l.filter(function(number){\n        return number\
    \ > 0;\n    });\n}\n", "    return l.filter(function(num){\n        return num\
    \ > 0;\n    });\n}\n", "  return filter(function(x){return x>0;},l);\n}\n", " \
    \ return l.filter(function(number){\n    return number >= 0;\n  });\n}\n", " \
    \ return l.filter(num => num > 0);\n}\n", "  return filter(function(item){\n \
    \   return item > 0;\n  }, l);\n}\n", "    return l.filter(function(v){return\
    \ v > 0});\n}", "  return l.filter(x => x>0);\n}\n", "  let pos = l.filter(function(val){\n\
    \    return val > 0;\n  });\n  return pos;\n}\n", "    l=l.filter(l=> l>0);\n\
    \    return l;\n}\n", "    //  return l.filter(x => x>0);\n    return l.filter(function(x){return\
    \ x>0;});\n}\n", "  return l.filter(function(num){\n    return num > 0;\n  });\n\
    }\n", "\treturn _.filter(l, function(x){return x>0;});\n}\n", "    return l.filter(function(num){\n\
    \        return num > 0;\n    });\n}\n", "  var res = [];\n  for(var i = 0; i\
    \ < l.length; i++){\n    if(l[i] >= 0){\n      res.push(l[i]);\n    }\n  }\n \
    \ return res;\n}\n", "    return l.filter(x => x > 0);\n}\n", "    return l.filter(function(n){\n\
    \        return n >= 0;\n    });\n}\n", "\n}\n", "    return l.filter(function(value){return\
    \ value > 0;});\n}\n", "    return l.filter(function(v){return v > 0});\n}", " \
    \ var nums = [];\n  for(var i = 0; i < l.length; i++){\n    if(l[i] > 0){\n  \
    \    nums.push(l[i]);\n    }\n  }\n  return nums;\n}\n", "    return l.filter(function(n){\n\
    \        return n > 0;\n    });\n}\n", "\tvar new_l=[];\n\tfor(var i=0;i<l.length;i++){\n\
    \t\tif(l[i]>0){\n\t\t\tnew_l.push(l[i]);\n\t\t}\n\t}\n\treturn new_l;\n}\n", " \
    \ return _.filter(l, function(num){\n    return num > 0;\n  });\n}\n", "\treturn\
    \ l.filter(x => x > 0);\n}", "    return l.filter(function(value){return value>0;});\n\
    }\n", "  return l.filter(n => n > 0);\n}\n", "  let positive_arr = [];\n  for(var\
    \ i = 0; i < l.length; i++){\n    if(l[i] >= 0){\n      positive_arr.push(l[i]);\n\
    \    }\n  }\n  return positive_arr;\n}\n", "\tvar newList = l.filter(function(x){return\
    \ x > 0;});\n\treturn newList;\n}\n", "\tvar new_list = [];\n\tfor(var i=0; i<l.length;\
    \ i++){\n\t\tif(l[i]>0){\n\t\t\tnew_list.push(l[i]);\n\t\t}\n\t}\n\treturn new_list;\n\
    }\n", "    return l.filter(function(num){\n        return num > 0;\n    });\n\
    }\n", "    return l.filter(e => e > 0);\n}\n", "  return l.filter(x => x > 0);\n\
    }\n", "  return _.filter(l, function(n){ return n >= 0; });\n}\n", "    return\
    \ l.filter(function(elem){\n        return elem >= 0;\n    });\n}", "  return\
    \ l.filter(x => x > 0);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
