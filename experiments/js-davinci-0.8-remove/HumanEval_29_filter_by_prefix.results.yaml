language: js
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered = [];\n\
    \tstrings.forEach(function(str){\n\t\tif(str.startsWith(prefix)){\n\t\t\tfiltered.push(str);\n\
    \t\t}\n\t});\n\treturn filtered;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var ret = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ == 0){\n            ret.push(strings[i]);\n        }\n    }\n    return ret;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 1
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return _.filter(strings,\
    \ function(x){\n        return x.startsWith(prefix);\n    });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0p6d76c8.js:3\n    return _.filter(strings, function(x){\n    ^\n\
    \nReferenceError: _ is not defined\n    at filter_by_prefix (/tmp/tmp0p6d76c8.js:3:5)\n\
    \    at test (/tmp/tmp0p6d76c8.js:13:20)\n    at Object.<anonymous> (/tmp/tmp0p6d76c8.js:17:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n\
    \        return (str.startsWith(prefix));\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var valid = [];\n\
    \    var i = 0;\n    var l = strings.length;\n    for(i; i < l; i++){\n      \
    \  if(strings[i].indexOf(prefix) == 0){\n            valid.push(strings[i]);\n\
    \        }\n    }\n    return valid;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [],\
    \ i;\n    for(i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar strings_filtered\
    \ = [];\n\t\n\t//Check if the prefix is falsey, then skip the filtering\n\tif(prefix){\n\
    \t\tstrings.forEach(function(string){\n\t\t\tif(string.startsWith(prefix)){\n\t\
    \t\t\tstrings_filtered.push(string);\n\t\t\t}\n\t\t});\n\t}else{\n\t\tstrings_filtered\
    \ = strings;\n\t}\n\t\n\treturn strings_filtered;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(str){return\
    \ str.indexOf(prefix)==0});\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(e){return\
    \ e.startsWith(prefix)});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var output = new Array();\n\
    \    for(var i=0; i<strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ == 0){\n            output.push(strings[i]);\n        }\n    }\n    return output;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tprefix = prefix.toLowerCase();\n\
    \treturn strings.filter(function(value){\n\t\treturn value.toLowerCase().indexOf(prefix)\
    \ == 0;\n\t});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var ret = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            ret.push(strings[i]);\n        }\n    }\n    return ret;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n\
    \        return str.startsWith(prefix);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    let result = [];\n\
    \    for(let s of strings){\n        if(s.startsWith(prefix)){\n            result.push(s);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(str){\n\
    \t\treturn str.startsWith(prefix);\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(str){\n\
    \t\treturn str.startsWith(prefix);\n\t});\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ == 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i=0; i<strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 1
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn _.filter(strings,\
    \ function(a) { return a.indexOf(prefix) == 0; });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp2djdv36a.js:3\n\treturn _.filter(strings, function(a) { return\
    \ a.indexOf(prefix) == 0; });\n\t^\n\nReferenceError: _ is not defined\n    at\
    \ filter_by_prefix (/tmp/tmp2djdv36a.js:3:2)\n    at test (/tmp/tmp2djdv36a.js:11:20)\n\
    \    at Object.<anonymous> (/tmp/tmp2djdv36a.js:15:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tif (strings.length ===\
    \ 0) {\n\t\treturn [];\n\t}\n\tif (strings[0].startsWith(prefix)) {\n\t\treturn\
    \ [strings[0]].concat(filter_by_prefix(strings.slice(1), prefix));\n\t}\n\treturn\
    \ filter_by_prefix(strings.slice(1), prefix);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar len = strings.length,\
    \ result = [], i;\n\tfor(i = 0; i < len; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ === 0){\n\t\t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(s){return\
    \ s.substring(0, prefix.length) == prefix;});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n\
    \        return (string.startsWith(prefix));\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar out = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix))\n\t\t\
    \tout.push(strings[i]);\n\t}\n\treturn out;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered = [];\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix))\n\
    \t\t\tfiltered.push(strings[i]);\n\t}\n\treturn filtered;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered = [];\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n\nlet string_list = [\"the\", \"quick\", \"brown\"\
    , \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"];\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered = [];\n\
    \tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered = [];\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ == 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar results = [];\n\t\
    var l = strings.length;\n\tfor(var i = 0; i < l; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ == 0){\n\t\t\tresults.push(strings[i]);\n\t\t}\n\t}\n\treturn results;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n\
    \        return str.indexOf(prefix) == 0;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered = [];\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].substring(0, prefix.length)\
    \ == prefix){\n\t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n\
    \        return string.substring(0, prefix.length) === prefix;\n    });\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(\n\
    \t\tfunction(string){\n\t\t\treturn string.slice(0, prefix.length) == prefix;\n\
    \t\t}\n\t);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(s){return\
    \ s.substring(0, prefix.length) === prefix;});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(string){\n\
    \t\treturn string.substring(0, prefix.length) === prefix;\n\t});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var result = [];\n\
    \    var prefix_len = prefix.length;\n    for(var i=0; i<strings.length; i++){\n\
    \        if(strings[i].substring(0, prefix_len) == prefix){\n            result.push(strings[i]);\n\
    \        }\n    }\n    return result;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var r = []\n    for(var\
    \ i=0; i<strings.length; i++){\n        if(strings[i].indexOf(prefix) == 0){\n\
    \            r.push(strings[i]);\n        }\n    }\n    return r;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    let filtered = []\n\
    \    strings.forEach( s => { if(s.startsWith(prefix)) filtered.push(s) })\n  \
    \  return filtered\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(\
    \ function(string){\n\t\treturn string.indexOf(prefix) == 0;\n\t});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var list = [];\n \
    \   for(var i=0; i<strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            list.push(strings[i]);\n        }\n    }\n    return list;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(el){return\
    \ el.startsWith(prefix)});\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered = [];\n\
    \tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].substring(0, prefix.length)\
    \ == prefix){\n\t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 1
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tif(!strings){\n\t\t\
    return [];\n\t}\n\tif(!prefix){\n\t\treturn strings;\n\t}\n\treturn strings.filter(function(str){\n\
    \t\treturn starts_with(str, prefix);\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpxvj7ksc1.js:10\n\t\treturn starts_with(str, prefix);\n\t\t^\n\n\
    ReferenceError: starts_with is not defined\n    at /tmp/tmpxvj7ksc1.js:10:3\n\
    \    at Array.filter (<anonymous>)\n    at filter_by_prefix (/tmp/tmpxvj7ksc1.js:9:17)\n\
    \    at test (/tmp/tmpxvj7ksc1.js:20:20)\n    at Object.<anonymous> (/tmp/tmpxvj7ksc1.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    prefix = prefix.toLowerCase();\n\
    \    var filtered = [];\n    for(var i = 0; i < strings.length; i++){\n      \
    \  if(strings[i].toLowerCase().startsWith(prefix))\n            filtered.push(strings[i]);\n\
    \    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var ret = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            ret.push(strings[i]);\n        }\n    }\n    return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tif(!(strings && prefix))\
    \ return undefined;\n\treturn strings.filter(function(elem){\n\t\treturn elem.startsWith(prefix);\n\
    \t});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n\
    \  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var result = [];\n\
    \    for(var i=0; i<strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var results = [],\n\
    \        prefix_length = prefix.length;\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].length >= prefix_length){\n            var matches\
    \ = true;\n            for(var j = 0; j < prefix_length; j++){\n             \
    \   if(strings[i][j] != prefix[j]){\n                    matches = false;\n  \
    \                  break;\n                }\n            }\n            if(matches){\n\
    \                results.push(strings[i]);\n            }\n        }\n    }\n\
    \    return results;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var prefix_length\
    \ = prefix.length;\n    var filtered = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].substring(0, prefix_length) == prefix){\n     \
    \       filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var ret = [];\n  \
    \  for(var i=0; i<strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            ret.push(strings[i]);\n        }\n    }\n    return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(el){\n\
    \        return el.startsWith(prefix);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    let ret = [];\n  \
    \  for(let string of strings){\n        if(string.startsWith(prefix)){\n     \
    \       ret.push(string);\n        }\n    }\n    return ret;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var result = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            result.push(strings[i]);\n        }\n    }\n    return\
    \ result;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(\n\
    \t\tfunction(string){\n\t\t\treturn string.startsWith(prefix);\n\t\t}\n\t);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    let result = [];\n\
    \    for(let i=0; i<strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n\
    \        return string.indexOf(prefix) === 0;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(x){\n\
    \t\treturn x.substring(0, prefix.length) == prefix;\n\t});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(word\
    \ => word.startsWith(prefix));\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar ret = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\t\
    \t\tret.push(strings[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(str){\n\
    \t\treturn str.indexOf(prefix) == 0;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(string){\n\
    \t\treturn string.startsWith(prefix);\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var rtn = {};\n  \
    \  for(var i=0; i<strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            rtn[strings[i]] = true;\n        }\n    }\n    return rtn;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n{}\n\nshould loosely\
    \ deep-equal\n\n[]\n    at test (/tmp/tmp6isjpa3d.js:17:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6isjpa3d.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: {},\n  expected:\
    \ [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(value){\n\
    \t\treturn value.startsWith(prefix);\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered = [];\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ == 0){\n\t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar res = [];\n\tfor(var\
    \ i=0; i<strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\t\t\t\
    res.push(strings[i]);\n\t\t}\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var ret = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            ret.push(strings[i]);\n        }\n    }\n    return ret;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar r = new Array();\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ == 0){\n\t\t\tr.push(strings[i]);\n\t\t}\n\t}\n\treturn r;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(string){\n\
    \t\treturn string.indexOf(prefix) === 0;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar prefix = prefix.toLowerCase();\n\
    \tvar result = [];\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].toLowerCase().startsWith(prefix)){\n\
    \t\t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar prefix_regex = new\
    \ RegExp(\"^\" + prefix);\n\treturn _.filter(strings, function(string){\n\t\t\
    return prefix_regex.test(string);\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmphhgt7n2n.js:4\n\treturn _.filter(strings, function(string){\n\t\
    ^\n\nReferenceError: _ is not defined\n    at filter_by_prefix (/tmp/tmphhgt7n2n.js:4:2)\n\
    \    at test (/tmp/tmphhgt7n2n.js:14:20)\n    at Object.<anonymous> (/tmp/tmphhgt7n2n.js:18:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n\
    \        return string.indexOf(prefix) == 0;\n    });\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var output = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            output.push(strings[i]);\n        }\n    }\n    return output;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(s){return\
    \ s.startsWith(prefix)});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered = [];\n\
    \tstrings.forEach(function(x){\n\t\tif(x.slice(0, prefix.length) === prefix){\n\
    \t\t\tfiltered.push(x);\n\t\t}\n\t});\n\treturn filtered;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar ret = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(prefix) == 0){\n\
    \t\t\tret.push(strings[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string\
    \ => string.startsWith(prefix));\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    if(prefix === undefined){\n\
    \        prefix = \"\";\n    }\n    return strings.filter(function(string){\n\
    \        return string.substring(0, prefix.length) === prefix;\n    });\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){return\
    \ str.startsWith(prefix)});\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var results = [];\n\
    \    for(var i=0; i<strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            results.push(strings[i]);\n        }\n    }\n    return results;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i=0; i<strings.length; i++){\n        if(strings[i].startsWith(prefix))\n\
    \            filtered.push(strings[i]);\n    }\n    return filtered;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n\
    \        return string.startsWith(prefix);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(item\
    \ => item.startsWith(prefix));\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i=0; i<strings.length; i++){\n        if(strings[i].substring(0,\
    \ prefix.length) == prefix){\n            filtered.push(strings[i]);\n       \
    \ }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar string_list = [];\n\
    \tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)==0){\n\
    \t\t\tstring_list.push(strings[i]);\n\t\t}\n\t}\n\treturn string_list;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(s){\n\
    \        return s.indexOf(prefix) == 0;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(val,\
    \ index, array){\n        return val.substring(0, prefix.length) == prefix;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar ret = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].substring(0, prefix.length)\
    \ == prefix){\n\t\t\tret.push(strings[i]);\n\t\t}\n\t}\n\treturn ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n\
    \        return string.indexOf(prefix) === 0;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered = [];\n\
    \tstrings.forEach(function(string){\n\t\tif(string.startsWith(prefix)){\n\t\t\t\
    filtered.push(string);\n\t\t}\n\t});\n\treturn filtered;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string\
    \ => string.startsWith(prefix));\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n\
    \        return str.startsWith(prefix);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar new_array = [];\n\
    \tfor(var index in strings){\n\t\tif(strings[index].startsWith(prefix)){\n\t\t\
    \tnew_array.push(strings[index]);\n\t\t}\n\t}\n\treturn new_array;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var result = [];\n\
    \    for(var i=0; i<strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var result = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar prefix_length =\
    \ prefix.length;\n\tvar filtered = [];\n\tfor(var i = 0; i < strings.length; i++){\n\
    \t\tif(strings[i].substring(0, prefix_length) == prefix){\n\t\t\tfiltered.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn filtered;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(s\
    \ => s.startsWith(prefix));\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var result = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ == 0){\n            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var ret = [];\n  \
    \  for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix))\n\
    \            ret.push(strings[i]);\n    }\n    return ret;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar output = [];\n\t\
    for(var i=0; i<strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\
    \t\t\toutput.push(strings[i]);\n\t\t}\n\t}\n\treturn output;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n\
    \        return string.startsWith(prefix);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered = [];\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var r = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            r.push(strings[i]);\n        }\n    }\n    return r;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n\
    \        return str.indexOf(prefix) == 0;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n\
    \        return str.indexOf(prefix) == 0;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n\
    \        return str.startsWith(prefix);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var new_strings =\
    \ []\n    for(var string in strings){\n        if(strings[string].startsWith(prefix)){\n\
    \            new_strings.push(strings[string]);\n        }\n    }\n    return\
    \ new_strings;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(str\
    \ => str.startsWith(prefix));\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n\
    \        return string.indexOf(prefix) === 0;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(value){\n\
    \t\treturn value.substring(0, prefix.length) == prefix;\n\t});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered = [];\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix))\n\
    \t\t\tfiltered.push(strings[i]);\n\t}\n\treturn filtered;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    let filtered = [];\n\
    \    for(let i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i=0; i<strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ == 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered = [];\n\
    \tvar length = prefix.length;\n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].substring(0,\
    \ length) == prefix){\n\t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn\
    \ filtered;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = strings.filter(function(str){\n        return str.startsWith(prefix);\n  \
    \  });\n    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(val){\n\
    \        return val.indexOf(prefix) === 0;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    //Filter an input\
    \ list of strings only for ones that start with a given prefix.\n    var filtered\
    \ = [];\n    for (var i = 0; i < strings.length; i++){\n        var s = strings[i];\n\
    \        if (s.indexOf(prefix) === 0){\n            filtered.push(s);\n      \
    \  }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var res = new Array();\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].substring(0,\
    \ prefix.length) == prefix){\n            res.push(strings[i]);\n        }\n \
    \   }\n    return res;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar new_strings = [];\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\
    \t\t\tnew_strings.push(strings[i]);\n\t\t}\n\t}\n\treturn new_strings;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar output = [];\n\t\
    for(var i=0; i<strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\
    \t\t\toutput.push(strings[i]);\n\t\t}\n\t}\n\treturn output;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var l = strings.length;\n\
    \    var filtered = [];\n    for(var i=0; i<l; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar result = [];\n\t\
    for(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\
    \t\t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n\
    \        return (string.lastIndexOf(prefix, 0) === 0);\n    });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var output = [];\n\
    \    var prefix_length = prefix.length;\n    for(var i=0; i<strings.length; i++){\n\
    \        if(strings[i].substring(0, prefix_length) === prefix){\n            output.push(strings[i]);\n\
    \        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n\
    \        return string.slice(0, prefix.length) === prefix;\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    prefix = prefix.toLowerCase();\n\
    \    return strings.filter(function(v){return v.toLowerCase().startsWith(prefix);});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tconst filtered = [];\n\
    \tfor(let i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var output = [];\n\
    \    strings.forEach(function(string){\n        if(string.substring(0, prefix.length)\
    \ == prefix){\n            output.push(string);\n        }\n    });\n    return\
    \ output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"\
    ),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(s){return\
    \ s.indexOf(prefix) == 0;});\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    const regExp = new\
    \ RegExp(`^${prefix}`);\n    return strings.filter(s => s.match(regExp));\n}\n\
    \nmodule.exports = {\n    filter_by_prefix\n};\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar matches = [];\n\t\
    $.each(strings, function(index, string){\n\t\tif(string.substring(0, prefix.length)\
    \ == prefix){\n\t\t\tmatches.push(string);\n\t\t}\n\t});\n\treturn matches;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpep_s17ju.js:4\n\t$.each(strings, function(index, string){\n\t^\n\
    \nReferenceError: $ is not defined\n    at filter_by_prefix (/tmp/tmpep_s17ju.js:4:2)\n\
    \    at test (/tmp/tmpep_s17ju.js:17:20)\n    at Object.<anonymous> (/tmp/tmpep_s17ju.js:21:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var r = [], i, n =\
    \ strings.length;\n    for(i = 0; i < n; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            r.push(strings[i]);\n        }\n    }\n    return r;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(string){\n\
    \t\treturn (string.indexOf(prefix) === 0);\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n\
    \        return string.startsWith(prefix);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(string){\n\
    \        return string.indexOf(prefix)===0;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tfiltered = [];\n\tstrings.forEach(function(string){\n\
    \t\tif(string.startsWith(prefix)){\n\t\t\tfiltered.push(string);\n\t\t}\n\t});\n\
    \treturn filtered;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(s){\n\
    \        return s.indexOf(prefix) === 0;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(x){return\
    \ x.startsWith(prefix)});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(value){\n\
    \t\treturn value.startsWith(prefix);\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var new_list = strings.filter(function(s){\n\
    \        return s.startsWith(prefix);\n    });\n    return new_list;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n\
    \        return str.indexOf(prefix) === 0;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(value,\
    \ index, arr){\n\treturn String(value).startsWith(prefix);\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    if(strings == null){\n\
    \        return null;\n    }\n    if(prefix == null){\n        return strings;\n\
    \    }\n    var filtered = new Array();\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].indexOf(prefix) == 0){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var reg = new RegExp(\"\
    ^\" + prefix);\n    var result = [];\n    for(var i = 0; i < strings.length; i++){\n\
    \        if(reg.test(strings[i])){\n            result.push(strings[i]);\n   \
    \     }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    if(prefix == undefined\
    \ || prefix == null){\n        return strings;\n    }\n    var new_strings = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].toLowerCase().indexOf(prefix.toLowerCase())\
    \ == 0){\n            new_strings.push(strings[i]);\n        }\n    }\n    return\
    \ new_strings;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(\
    \ function(str){\n\t\treturn str.indexOf(prefix) === 0;\n\t});\n}\n\nmodule.exports\
    \ = {\n\tgroup_by_type: group_by_type,\n\tfilter_by_prefix: filter_by_prefix\n\
    };\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0qf9528t.js:9\n\tgroup_by_type: group_by_type,\n\t            \
    \   ^\n\nReferenceError: group_by_type is not defined\n    at Object.<anonymous>\
    \ (/tmp/tmp0qf9528t.js:9:17)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var result = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var output = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            output.push(strings[i]);\n        }\n    }\n    return output;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered = [];\n\
    \tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ == 0){\n\t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    if(strings === null){\n\
    \        return null;\n    }\n    if(strings.length === 0){\n        return [];\n\
    \    }\n    return strings.filter(function(word){\n        return word.substring(0,\
    \ prefix.length) === prefix;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(str\
    \ => str.startsWith(prefix));\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ == 0){\n            filtered_strings.push(strings[i]);\n        }\n    }\n \
    \   return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var new_list = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            new_list.push(strings[i]);\n        }\n    }\n    return new_list;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(string\
    \ => string.startsWith(prefix));\n}\n\nvar replace_element = function(parent,\
    \ index, replacement){\n    //Replace index'th element in parent with replacement.\n\
    \    var temp = parent[index];\n    parent[index] = replacement;\n    temp.remove();\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i=0; i<strings.length; i++){\n        if(strings[i].indexOf(prefix)==0){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(e){\n\
    \t\treturn e.substring(0, prefix.length) == prefix;\n\t});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var prefixed_list\
    \ = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ === 0){\n            prefixed_list.push(strings[i]);\n        }\n    }\n   \
    \ return prefixed_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(string){\n\
    \t\treturn string.slice(0, prefix.length) === prefix;\n\t});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    if(prefix === \"\"\
    )\n        return strings;\n    return strings.filter(function(string){\n    \
    \    return string.indexOf(prefix) === 0;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var new_strings =\
    \ [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ == 0){\n            new_strings.push(strings[i]);\n        }\n    }\n    return\
    \ new_strings;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered = [];\n\
    \tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\
    \t\t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar result = [];\n\t\
    var i;\n\tfor(i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(prefix)\
    \ == 0){\n\t\t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var result = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar result = [];\n\t\
    for(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].indexOf(prefix) ==\
    \ 0){\n\t\t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n\
    \        return str.indexOf(prefix) == 0;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(s){return\
    \ s.startsWith(prefix)});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(i = 0; i < strings.length; i++){\n        var string = strings[i];\n\
    \        if(string.indexOf(prefix) === 0){\n            filtered.push(string);\n\
    \        }\n    }\n    return filtered;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var ret = [];\n  \
    \  strings.forEach(function(string){\n        if(string.indexOf(prefix)==0){\n\
    \            ret.push(string);\n        }\n    });\n    return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tlet filtered = strings.filter(function(string){\n\
    \t\treturn string.startsWith(prefix);\n\t});\n\treturn filtered;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n\
    \treturn starts_with(str, prefix);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpyee_ss0v.js:4\n\treturn starts_with(str, prefix);\n\t^\n\nReferenceError:\
    \ starts_with is not defined\n    at /tmp/tmpyee_ss0v.js:4:2\n    at Array.filter\
    \ (<anonymous>)\n    at filter_by_prefix (/tmp/tmpyee_ss0v.js:3:20)\n    at test\
    \ (/tmp/tmpyee_ss0v.js:14:20)\n    at Object.<anonymous> (/tmp/tmpyee_ss0v.js:17:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    let filtered = [];\n\
    \    for(let string of strings){\n        if(string.startsWith(prefix)){\n   \
    \         filtered.push(string);\n        }\n    }\n    return filtered;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var result = [];\n\
    \    for(var i=0; i<strings.length; i++){\n        if(strings[i].substring(0,\
    \ prefix.length) === prefix){\n            result.push(strings[i]);\n        }\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filtered = [];\n\
    \tstrings.forEach(function(s){\n\t\tif(s.startsWith(prefix)){\n\t\t\tfiltered.push(s);\n\
    \t\t}\n\t});\n\treturn filtered;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar filter_strings =\
    \ [];\n\tstrings.forEach(function(string){\n\t\tif(string.substring(0, prefix.length)\
    \ == prefix){\n\t\t\tfilter_strings.push(string);\n\t\t}\n\t});\n\treturn filter_strings;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(s){\n\
    \        return s.startsWith(prefix);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(x){\n\
    \        return x.substring(0, prefix.length) === prefix;\n    });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    $.each(strings, function(idx, value){\n        if(value.indexOf(prefix) ===\
    \ 0){\n            filtered.push(value);\n        }\n    });\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpe9wfzdz1.js:4\n    $.each(strings, function(idx, value){\n    ^\n\
    \nReferenceError: $ is not defined\n    at filter_by_prefix (/tmp/tmpe9wfzdz1.js:4:5)\n\
    \    at test (/tmp/tmpe9wfzdz1.js:17:20)\n    at Object.<anonymous> (/tmp/tmpe9wfzdz1.js:21:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(s){\n\
    \        return s.slice(0, prefix.length) == prefix;\n    });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar result = [];\n\t\
    for(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\
    \t\t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar results = [];\n\t\
    for(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix))\n\
    \t\t\tresults.push(strings[i]);\n\t}\n\treturn results;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var new_strings =\
    \ [];\n    for(var i=0; i<strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ == 0){\n            new_strings.push(strings[i]);\n        }\n    }\n    return\
    \ new_strings;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([], \"\
    john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    return strings.filter(function(str){\n\
    \        return str.startsWith(prefix);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821016
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var r = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix) == 0){\n\
    \            r.push(strings[i]);\n        }\n    }\n    return r;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_by_prefix;\n\
    \  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar ret = [];\n\t\n\t\
    strings.forEach(function(str){\n\t\tif(str.indexOf(prefix) === 0){\n\t\t\tret.push(str);\n\
    \t\t}\n\t});\n\t\n\treturn ret;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar result = [];\n\t\
    for(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].substring(0, prefix.length)\
    \ == prefix){\n\t\t\tresult.push(strings[i]);\n\t\t}\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\tvar results = [];\n\t\
    \n\tfor(var i=0; i<strings.length; i++){\n\t\tif(strings[i].indexOf(prefix) ==\
    \ 0){\n\t\t\tresults.push(strings[i]);\n\t\t}\n\t}\n\t\n\treturn results;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var vals = new Array();\n\
    \    for(var i=0; i<strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            vals.push(strings[i]);\n        }\n    }\n    return vals;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var filtered_strings\
    \ = [];\n    for(i = 0; i < strings.length; i++){\n        if(strings[i].indexOf(prefix)\
    \ != -1){\n            filtered_strings.push(strings[i]);\n        }\n    }\n\
    \    return filtered_strings;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821018
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n\treturn strings.filter(function(s){return\
    \ s.startsWith(prefix)});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "//Filter an input list of strings only for ones that start with a given\
    \ prefix.\nfunction filter_by_prefix(strings, prefix){\n    var prefix_filter\
    \ = function(string){\n        return string.indexOf(prefix) == 0;\n    };\n \
    \   return strings.filter(prefix_filter);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
    \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821018
