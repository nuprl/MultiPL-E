name: HumanEval_61_correct_bracketing
language: js
prompt: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
  \ bracket has a corresponding closing bracket.\nfunction correct_bracketing(brackets){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
  (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
  ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
  ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
  (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
  )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
  ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n\
  }\n\ntest();"
completions: ["  var bracket_stack = [];\n  var opened = {};\n  var closed = {};\n\
    \  for (var i = 0; i < brackets.length; i++){\n    if (brackets[i] === \"(\"){\n\
    \      bracket_stack.push(brackets[i]);\n      opened[i] = true;\n    }\n    else\
    \ {\n      if (bracket_stack.length === 0){\n        return false;\n      }\n\
    \      bracket_stack.pop();\n      closed[i] = true;\n    }\n  }\n  if (bracket_stack.length\
    \ === 0){\n    return true;\n  }\n  return false;\n}\n", "\treturn true;\n}\n",
  "    var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n        } else\
    \ if (brackets[i] == \")\"){\n            if (stack.length == 0){\n          \
    \      return false;\n            } else {\n                stack.pop();\n   \
    \         }\n        }\n    }\n    return stack.length == 0;\n}\n", "    let bracket_arr\
    \ = brackets.split(\"\");\n    let open_brackets = 0;\n    let close_brackets\
    \ = 0;\n    for (let bracket of bracket_arr){\n        if (bracket == \"(\"){\n\
    \            open_brackets ++;\n        }\n        else if (bracket == \")\"){\n\
    \            close_brackets ++;\n        }\n    }\n    if (open_brackets != close_brackets){\n\
    \        return false;\n    }\n    return true;\n}\n", "\tif(brackets.indexOf('(')\
    \ == -1 && brackets.indexOf(')') == -1){\n\t\treturn true;\n\t}\n\telse if(brackets.indexOf('(')\
    \ == -1 && brackets.indexOf(')') != -1){\n\t\treturn false;\n\t}\n\telse if(brackets.indexOf('(')\
    \ != -1 && brackets.indexOf(')') == -1){\n\t\treturn false;\n\t}\n\telse{\n\t\t\
    let a = brackets.split('');\n\t\tlet result = 0;\n\t\tfor(let i = 0; i < a.length;\
    \ i++){\n\t\t\tif(a[i] == '('){\n\t\t\t\tresult += 1;\n\t\t\t}\n\t\t\telse if(a[i]\
    \ == ')'){\n\t\t\t\tresult -= 1;\n\t\t\t}\n\t\t\tif(result < 0){\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t\tif(result != 0){\n\t\t\treturn false;\n\t\t}\n\t\
    \telse{\n\t\t\treturn true;\n\t\t}\n\t}\n}\n", "    var count=0;\n    for(var\
    \ i=0;i<brackets.length;i++){\n        if(brackets[i]==\"(\"){\n            count++;\n\
    \        }else if(brackets[i]==\")\"){\n            count--;\n        }\n    \
    \    if(count<0){\n            return false;\n        }\n    }\n    if(count==0){\n\
    \        return true;\n    }else{\n        return false;\n    }\n}\nvar string1=\"\
    (()()()()))(\";", "  if(brackets.length % 2 === 1){\n    return false;\n  }\n\
    \  var open = 0;\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i]\
    \ === \"(\"){\n      open += 1;\n    }\n    else{\n      open -= 1;\n    }\n \
    \   if(open < 0){\n      return false;\n    }\n  }\n  return open === 0;\n}\n",
  "  //complete the code\n  return true;\n}\n", "    let stack = []\n\n    for (let\
    \ b of brackets){\n        if (b == \"(\"){\n            stack.push(b)\n     \
    \   } else if (b == \")\"){\n            if (stack.length == 0){\n           \
    \     return false\n            } else {\n                stack.pop()\n      \
    \      }\n        }\n    }\n\n    return stack.length == 0\n}\n", "\t\tlet count\
    \ = 0;\n\t\tfor (let i = 0; i < brackets.length; i++){\n\t\t\t\tif (brackets[i]\
    \ == \"(\"){\n\t\t\t\t\t\tcount++;\n\t\t\t\t} else if (brackets[i] == \")\"){\n\
    \t\t\t\t\t\tcount--;\n\t\t\t\t}\n\t\t\t\tif (count < 0){\n\t\t\t\t\t\treturn false;\n\
    \t\t\t\t}\n\t\t}\n\t\treturn count == 0;\n}\n", "    var bra_stack = new Array();\n\
    \    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"(\"\
    ){\n            bra_stack.push(brackets[i]);\n        }\n        else if(brackets[i]\
    \ == \")\"){\n            if(bra_stack.length == 0){\n                return false;\n\
    \            }\n            else{\n                bra_stack.pop();\n        \
    \    }\n        }\n    }\n    if(bra_stack.length == 0){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\n", "    return brackets.split(\"\
    \").filter(function(e){return e == \"(\"}).length == brackets.split(\"\").filter(function(e){return\
    \ e == \")\"}).length\n}\n", "    var counter = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == '(') {\n            counter++;\n        }\
    \ else if (brackets[i] == ')') {\n            counter--;\n        }\n        if\
    \ (counter < 0) {\n            return false;\n        }\n    }\n    return counter\
    \ == 0;\n}\n", "  var stack = [];\n  for (var i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] == \"(\") {\n      stack.push(brackets[i]);\n    } else\
    \ if (brackets[i] == \")\") {\n      if (stack.length == 0) {\n        return\
    \ false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return\
    \ stack.length == 0;\n}\n", "\tvar storage = [];\n\tvar n = brackets.length;\n\
    \tfor(var i = 0; i < n; i++){\n\t\tvar char = brackets[i];\n\t\tif(char == \"\
    (\"){\n\t\t\tstorage.push(char);\n\t\t}\n\t\telse if(char == \")\"){\n\t\t\tvar\
    \ open = storage.pop();\n\t\t\tif(open == null)\n\t\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn storage.length == 0;\n}\n", "\tvar opencount = 0;\n\n\tfor (var\
    \ index = 0; index < brackets.length; index++) {\n\t\tif (brackets[index] == '(')\
    \ {\n\t\t\topencount += 1;\n\t\t} else if (brackets[index] == ')') {\n\t\t\topencount\
    \ -= 1;\n\t\t}\n\n\t\tif (opencount < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\
    \treturn opencount == 0;\n}\n\n", "\tvar opening = 0;\n\tvar closing = 0;\n\t\
    for (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] === \"(\") {\n\
    \t\t\topening += 1;\n\t\t}\n\t\telse if (brackets[i] === \")\") {\n\t\t\tclosing\
    \ += 1;\n\t\t}\n\t\tif (closing > opening) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \tif (opening === closing) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}\n}\n", "    let my_arr = brackets.split(\"\");\n    if(my_arr.indexOf(\"(\"\
    ) === -1 && my_arr.indexOf(\")\") === -1){\n        return false;\n    }\n   \
    \ let true_counter = 0;\n    for(let i = 0; i < my_arr.length; i++){\n       \
    \ if(my_arr[i] === \"(\"){\n            true_counter += 1;\n        }\n      \
    \  if(my_arr[i] === \")\"){\n            true_counter -= 1;\n        }\n     \
    \   if(true_counter < 0){\n            return false;\n        }\n    }\n    if(true_counter\
    \ === 0){\n        return true;\n    }\n    return false;\n}\n", "    var counter\
    \ = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i]\
    \ == \"(\"){\n            counter++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            counter--;\n        }\n        if (counter < 0){\n \
    \           return false;\n        }\n    }\n    if (counter == 0){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n", "\tvar open = 0;\n\
    \tfor (var i = 0; i < brackets.length; i++){\n\t\tif (brackets[i] == \"(\"){\n\
    \t\t\topen += 1;\n\t\t}\n\t\telse if (brackets[i] == \")\"){\n\t\t\topen -= 1;\n\
    \t\t}\n\t\tif (open < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn open == 0;\n\
    }\n", "    var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n \
    \       if (brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n   \
    \     } else if (brackets[i] == \")\"){\n            if (stack.length == 0){\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length == 0;\n}\n", "\tlet\
    \ count = 0;\n\tfor (let i = 0; i < brackets.length; i++){\n\t\tlet bracket =\
    \ brackets[i];\n\t\tif (bracket === \"(\"){\n\t\t\tcount++;\n\t\t} else if (bracket\
    \ === \")\"){\n\t\t\tcount--;\n\t\t} else {\n\t\t\treturn \"invalid symbol\";\n\
    \t\t}\n\t\tif (count < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count ===\
    \ 0;\n}\n", "  if(brackets.length <= 1){\n    return false;\n  }\n  var stack\
    \ = [];\n  for(var i = 0; i < brackets.length; i++){\n    if(brackets[i] == '('){\n\
    \      stack.push(brackets[i]);\n    }else{\n      if(stack.length == 0){\n  \
    \      return false;\n      }\n      stack.pop();\n    }\n  }\n  if(stack.length\
    \ == 0){\n    return true;\n  }else{\n    return false;\n  }\n}", "\tvar stack\
    \ = [];\n\tfor(var i = 0; i < brackets.length; i++){\n\t\t//if the current character\
    \ is an opening bracket, push it onto the stack\n\t\tif(brackets[i] == \"(\")\n\
    \t\t\tstack.push(brackets[i]);\n\t\t//if the current character is a closing bracket,\
    \ pop the last opening bracket from the stack\n\t\telse if(brackets[i] == \")\"\
    ){\n\t\t\tif(stack.length == 0)\n\t\t\t\treturn false;\n\t\t\telse \n\t\t\t\t\
    stack.pop();\n\t\t}\n\t}\n\t//if the stack is empty, there is a closing bracket\
    \ for every opening bracket, so return true\n\tif(stack.length == 0)\n\t\treturn\
    \ true;\n\telse \n\t\treturn false;\n}\n", "\treturn brackets.split(\"\").filter(function(char){return\
    \ char == \"(\"}).length == brackets.split(\"\").filter(function(char){return\
    \ char == \")\"}).length\n}\n", "    var matches = 0;\n    for (var i = 0; i <\
    \ brackets.length; i++){\n        if (brackets[i] == \")\"){\n            matches++;\n\
    \        }\n        else if (brackets[i] == \"(\"){\n            matches--;\n\
    \        }\n        if (matches < 0){\n            return false;\n        }\n\
    \    }\n    return matches == 0;\n}\n", "  let open = [];\n  for (let i = 0; i\
    \ < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      open.push(brackets[i]);\n\
    \    } else if (brackets[i] === \")\") {\n      if (open.length === 0) {\n   \
    \     return false;\n      } else {\n        open.pop();\n      }\n    }\n  }\n\
    \  return open.length === 0;\n}", "    var bracketing = \"\";\n    var left_bracket\
    \ = \"(\";\n    var right_bracket = \")\";\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        var char = brackets[i];\n        if (char == left_bracket){\n\
    \            bracketing += char;\n        } else if (char == right_bracket){\n\
    \            bracketing = bracketing.substring(0, bracketing.length - 1);\n  \
    \      }\n    }\n    return (bracketing.length == 0);\n}\n", "  if (brackets ==\
    \ \"\"){\n    return true;\n  }\n\n  if (brackets[0] == \"(\"){\n    if (brackets[brackets.length\
    \ - 1] == \")\"){\n      return correct_bracketing(brackets.slice(1, brackets.length\
    \ - 1));\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n\
    \  }\n}\n\n", "  if (brackets === \"\"){\n    return false;\n  }\n  var total_left_brackets\
    \ = 0;\n  var total_right_brackets = 0;\n  var brackets_list = [];\n  for (var\
    \ i = 0; i < brackets.length; i++){\n    if (brackets[i] === \"(\"){\n      total_left_brackets\
    \ += 1;\n      brackets_list.push(brackets[i]);\n    }\n    else if (brackets[i]\
    \ === \")\"){\n      total_right_brackets += 1;\n      brackets_list.push(brackets[i]);\n\
    \    }\n  }\n  if (total_left_brackets !== total_right_brackets){\n    return\
    \ false;\n  }\n  var last_index = brackets_list.length - 1;\n  var brackets_match\
    \ = [];\n  for (var i = 0; i < last_index; i++){\n    if (brackets_list[i] ===\
    \ \"(\" && brackets_list[i+1] === \")\"){\n      brackets_match.push(brackets_list[i]);\n\
    \      brackets_match.push(brackets_list[i+1]);\n    }\n  }\n  if (brackets_match.length\
    \ !== total_left_brackets * 2){\n    return false;\n  }\n  else {\n    return\
    \ true;\n  }\n}\n", "  var stack = []\n  var matching_brackets = {'}':'{', ']':'[',\
    \ ')':'('}\n  for (var i = 0; i < brackets.length; i++){\n    if (brackets[i]\
    \ == '(' || brackets[i] == '[' || brackets[i] == '{'){\n      stack.push(brackets[i])\n\
    \    } else if (stack.length === 0 || matching_brackets[brackets[i]] != stack.pop()){\n\
    \      return false\n    }\n  }\n  return stack.length === 0\n}\n", "\n}\n", " \
    \   var stack = []\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            stack.push(brackets[i])\n        }\n  \
    \      else if (brackets[i] == \")\"){\n            if (stack.length == 0) {\n\
    \                return false\n            }\n            stack.pop()\n      \
    \  }\n    }\n    if (stack.length == 0){\n        return true\n    }\n    else\
    \ {\n        return false\n    }\n}\n", "    let number_of_open_brackets = 0;\n\
    \    let number_of_close_brackets = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] === \"(\"){\n            number_of_open_brackets\
    \ += 1;\n        } else if (brackets[i] === \")\"){\n            number_of_close_brackets\
    \ += 1;\n        }\n    }\n    if (number_of_open_brackets === number_of_close_brackets){\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n", "   \
    \ var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n        }\n \
    \       else if (brackets[i] == \")\"){\n            if (stack.length == 0){\n\
    \                return false;\n            }\n            else{\n           \
    \     stack.pop();\n            }\n        }\n    }\n    if (stack.length == 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}", " \
    \ let arr_brackets = brackets.split(\"\");\n\n  let opened = 0;\n  for (var i\
    \ = 0; i < arr_brackets.length; i++) {\n    if (arr_brackets[i] === \"(\") {\n\
    \      opened++;\n    } else if (arr_brackets[i] === \")\") {\n      opened--;\n\
    \    }\n    if (opened < 0) {\n      return false;\n    }\n  }\n  return opened\
    \ === 0;\n}\n", "\t\n\tfunction check(brackets, count){\n\t\tif(count < 0) return\
    \ false;\n\t\tif(brackets.length === 0) return count === 0;\n\t\tlet next = brackets[0];\n\
    \t\treturn check(brackets.slice(1), next === \"(\" ? count + 1 : count - 1);\n\
    \t}\n\t\n\treturn check(brackets, 0);\n}\n\nmodule.exports = {\n\tcorrect_bracketing\n\
    };", "    let stack = [];\n    for (let i = 0; i < brackets.length; i++){\n  \
    \      if (brackets[i] === '('){\n            stack.push(i);\n        } else if\
    \ (brackets[i] === ')'){\n            if (stack.length === 0){\n             \
    \   return false;\n            } else {\n                stack.pop();\n      \
    \      }\n        }\n    }\n    return stack.length === 0;\n}\n\n", "    var correct\
    \ = true;\n    var i = 0;\n    var open = 0;\n    while (i < brackets.length){\n\
    \        if (brackets[i] == '('){\n            open++;\n        }\n        else\
    \ if (brackets[i] == ')'){\n            open--;\n        }\n        else{\n  \
    \          console.log(\"unknown character in bracketing: \" + brackets[i]);\n\
    \            return false;\n        }\n        if (open < 0){\n            console.log(\"\
    too many closing brackets\");\n            return false;\n        }\n        i++;\n\
    \    }\n    if (open > 0){\n        console.log(\"too many opening brackets\"\
    );\n        return false;\n    }\n    return correct;\n}\n", "    let stack =\
    \ new Stack();\n    for(var i = 0; i < brackets.length; i++){\n        let bracket\
    \ = brackets[i];\n        if(bracket == \"(\"){\n            stack.push(bracket);\n\
    \        }else if(bracket == \")\"){\n            if(stack.isEmpty()){\n     \
    \           return false;\n            }else{\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.isEmpty();\n}\n", "\tbrackets_array\
    \ = brackets.split(\"\");\n\topen_count = 0;\n\tclosed_count = 0;\n\tfor (var\
    \ i = 0; i < brackets_array.length; i++) {\n\t\tif (brackets_array[i] == \"(\"\
    ) {\n\t\t\topen_count++;\n\t\t} else if (brackets_array[i] == \")\") {\n\t\t\t\
    closed_count++;\n\t\t}\n\t}\n\treturn open_count == closed_count;\n}\n", "   \
    \ return true;\n}\n", "\tvar count = 0;\n\tfor (var i = 0; i < brackets.length;\
    \ i++) {\n\t\tif (brackets[i] === \"(\") {\n\t\t\tcount++;\n\t\t}\n\t\telse if\
    \ (brackets[i] === \")\") {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn count === 0;\n}", "  //This implementation\
    \ uses a stack to store \"(\" and pop them when \")\" is found.\n  //If the stack\
    \ is empty, then a \")\" is found but no \"(\".\n  //If there are opening brackets\
    \ left in the stack at the end, then there is no closing bracket.\n  var stack\
    \ = [];\n  var i = 0;\n  var found = false;\n  while (i < brackets.length){\n\
    \    if (brackets[i] == '('){\n      stack.push(brackets[i]);\n    }\n    else\
    \ if (brackets[i] == ')'){\n      if (stack.length == 0){\n        return false;\n\
    \      }\n      else{\n        stack.pop();\n      }\n    }\n    i++;\n  }\n \
    \ if (stack.length == 0){\n    return true;\n  }\n  else{\n    return false;\n\
    \  }\n}\n", "  var split_brackets = brackets.split(\"\");\n  var bracket_stack\
    \ = [];\n  for (i = 0; i < split_brackets.length; i++) {\n    if (split_brackets[i]\
    \ == \"(\") {\n      bracket_stack.push(split_brackets[i]);\n    } else if (split_brackets[i]\
    \ == \")\") {\n      if (bracket_stack.length == 0) {\n        return false;\n\
    \      } else {\n        bracket_stack.pop();\n      }\n    }\n  }\n  if (bracket_stack.length\
    \ == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "  \n \
    \ //the \"index\" of the first opening bracket\n  var firstOpenIndex = 0;\n  var\
    \ numOpens = 0;\n  //the \"index\" of the last closing bracket\n  var lastCloseIndex\
    \ = 0;\n  var numCloses = 0;\n  \n  for(var i = 0; i < brackets.length; i++){\n\
    \    if(brackets[i] == \"(\"){\n      numOpens++;\n      firstOpenIndex = i;\n\
    \    }\n    if(brackets[i] == \")\"){\n      numCloses++;\n      lastCloseIndex\
    \ = i;\n    }\n  }\n  \n  //if there are more closing brackets than opening brackets,\n\
    \  //it cannot be correctly bracketed\n  if(numCloses > numOpens){\n    return\
    \ false;\n  }\n  \n  //if a closing bracket occurs before the first opening bracket,\n\
    \  //it cannot be correctly bracketed\n  if(lastCloseIndex < firstOpenIndex){\n\
    \    return false;\n  }\n  \n  return true;\n  \n}\n", "    var counter = 0;\n\
    \    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"\
    (\"){\n            counter++;\n        }\n        else if (brackets[i] == \")\"\
    ){\n            counter--;\n        }\n        if (counter < 0){\n           \
    \ return false;\n        }\n    }\n    if (counter == 0){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\n", "  let testarray = [];\n\
    \  let array = brackets.split(\"\");\n  for (let i = 0; i < array.length; i++){\n\
    \    if (array[i] == \"(\"){\n      testarray.push(array[i]);\n    }\n    else\
    \ if (array[i] == \")\"){\n      if (testarray.length == 0){\n        return false;\n\
    \      }\n      else{\n        testarray.pop();\n      }\n    }\n  }\n  if (testarray.length\
    \ == 0){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "    var\
    \ length = brackets.length;\n    var open = 0;\n    var close = 0;\n    var answer\
    \ = true;\n    for (var i = 0; i < length; i++){\n        if (brackets[i] == \"\
    (\"){\n            open = open + 1;\n        }\n        else{\n            close\
    \ = close + 1;\n        }\n        if (close > open){\n            answer = false;\n\
    \        }\n    }\n    if (open != close){\n        answer = false;\n    }\n \
    \   return answer;\n}\n", "\tvar count=0;\n\tfor(var i=0;i<brackets.length;i++){\n\
    \t\tif(brackets[i]==\"(\"){\n\t\t\tcount=count+1;\n\t\t}else{\n\t\t\tcount=count-1;\n\
    \t\t}\n\t\tif(count<0){\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(count==0){\n\t\t\
    return true;\n\t}else{\n\t\treturn false;\n\t}\n}\n", "    var stack = [];\n \
    \   for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"\
    (\") {\n            stack.push(brackets[i]);\n        }\n        else if (brackets[i]\
    \ == \")\") {\n            if (stack.length == 0) {\n                return false;\n\
    \            }\n            else {\n                stack.pop();\n           \
    \ }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n  \
    \  }\n    else {\n        return false;\n    }\n}\n", "    var open_brackets =\
    \ [];\n    for (var i = 0; i < brackets.length; i++){\n        var next_bracket\
    \ = brackets[i];\n        if (next_bracket == '('){\n            open_brackets.push(i);\n\
    \        } else if (next_bracket == ')'){\n            if (open_brackets.length\
    \ == 0){\n                return false;\n            } else {\n              \
    \  open_brackets.pop();\n            }\n        }\n    }\n    return open_brackets.length\
    \ == 0;\n}\n", "  var bracket_stack = [];\n  for (var i = 0; i < brackets.length;\
    \ i++){\n    var current_bracket = brackets[i];\n    if (current_bracket == \"\
    (\"){\n      bracket_stack.push(current_bracket);\n    }\n    else if (current_bracket\
    \ == \")\"){\n      if (bracket_stack.length == 0){\n        return false;\n \
    \     }\n      else{\n        bracket_stack.pop();\n      }\n    }\n  }\n  if\
    \ (bracket_stack.length == 0){\n    return true;\n  }\n  else{\n    return false;\n\
    \  }\n}\n", "\t//keep track of the \"balance\" of the string.\n\t//if we ever\
    \ see more closers than openers, there's no way to balance the string.\n\tvar\
    \ balance = 0;\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i]\
    \ == \"(\"){\n\t\t\tbalance += 1;\n\t\t}\n\t\telse if(brackets[i] == \")\"){\n\
    \t\t\tbalance -= 1;\n\t\t}\n\t\tif(balance < 0){\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn balance == 0;\n}\n", "\tvar left_side = 0;\n\tvar right_side = 0;\n\
    \tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] === \"(\")\
    \ {\n\t\t\tleft_side = left_side + 1;\n\t\t}\n\t\telse if (brackets[i] === \"\
    )\") {\n\t\t\tright_side = right_side + 1;\n\t\t}\n\t}\n\tif (left_side === right_side)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n", "\t// Your\
    \ code here\n\tvar len = brackets.length;\n\tvar stack = [];\n\tvar i;\n\tfor(i\
    \ = 0; i < len; i++) {\n\t\tif(brackets[i] == \"(\") {\n\t\t\tstack.push(1);\n\
    \t\t}\n\t\telse {\n\t\t\tif(stack.length > 0) {\n\t\t\t\tstack.pop();\n\t\t\t\
    }\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.length\
    \ == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\n", " \
    \   var pairs = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            pairs += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            pairs -= 1;\n        }\n        if (pairs\
    \ < 0){\n            return false;\n        }\n    }\n    return (pairs == 0);\n\
    }\n", "    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n \
    \       if (brackets[i] == \"(\") {\n            count++;\n        } else if (brackets[i]\
    \ == \")\") {\n            count--;\n        }\n        if (count < 0) {\n   \
    \         return false;\n        }\n    }\n    return (count == 0);\n}\n", " \
    \ // reuturn false if brackets has no closing brackets\n  if (brackets.indexOf(\"\
    )\") === -1) return false;\n  // reuturn false if brackets has no opening brackets\n\
    \  if (brackets.indexOf(\"(\") === -1) return false;\n  // reuturn false if brackets\
    \ has no closing brackets before opening brackets\n  if (brackets.indexOf(\")\"\
    ) < brackets.indexOf(\"(\")) return false;\n  // reuturn false if brackets has\
    \ a closing bracket without an opening bracket\n  if (brackets.lastIndexOf(\"\
    )\") > brackets.lastIndexOf(\"(\")) return false;\n  // reuturn false if brackets\
    \ does not start with an opening bracket\n  if (brackets.indexOf(\"(\") !== 0)\
    \ return false;\n  // reuturn false if brackets does not end with a closing bracket\n\
    \  if (brackets.lastIndexOf(\")\") !== brackets.length - 1) return false;\n  //\
    \ reuturn false if brackets has a second closing bracket with no opening bracket\
    \ after it\n  if (brackets.lastIndexOf(\")\") !== brackets.lastIndexOf(\"(\"))\
    \ return false;\n  // if none of the above return false, then return true\n  return\
    \ true;\n}\n", "  if (brackets === \"\") {\n    return false;\n  }\n\n  else {\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n      if\
    \ (brackets[i] === \"(\") {\n        count++;\n      }\n\n      else if (brackets[i]\
    \ === \")\") {\n        count--;\n      }\n\n      if (count < 0) {\n        return\
    \ false;\n      }\n    }\n\n    if (count === 0) {\n      return true;\n    }\n\
    \n    else {\n      return false;\n    }\n  }\n}\n\n", "\tvar len = brackets.length;\n\
    \tvar count = 0;\n\tfor(var i = 0; i < len; i++){\n\t\tif(brackets[i] == \"(\"\
    ){\n\t\t\tcount++;\n\t\t}\n\t\telse if(brackets[i] == \")\"){\n\t\t\tcount--;\n\
    \t\t}\n\t\tif(count < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(count != 0){\n\
    \t\treturn false;\n\t}\n\treturn true;\n}\n\n", "  let stack = [];\n  for (let\
    \ i = 0; i < brackets.length; i++){\n    // if the current bracket is \"(\" push\
    \ it onto the stack\n    if (brackets[i] === \"(\"){\n      stack.push(brackets[i]);\n\
    \    }\n    //if the current bracket is \")\" pop the stack and compare the char\n\
    \    else {\n      if (stack.pop() != \"(\"){\n        return false;\n      }\n\
    \    }\n  }\n  // if the stack is empty, then there is a closing bracket for every\
    \ opening bracket.\n  return stack.length === 0;\n}\n", "\tvar open = 0;\n\tfor\
    \ (var i = 0; i < brackets.length; i++){\n\t\tif (brackets[i] == \"(\"){\n\t\t\
    \topen++;\n\t\t}\n\t\telse{\n\t\t\topen--;\n\t\t}\n\t\tif (open < 0){\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn (open == 0);\n}\n", "    var open = 0;\n \
    \   for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"\
    (\"){\n            open += 1;\n        } else if (brackets[i] == \")\"){\n   \
    \         open -= 1;\n        }\n        if (open < 0){\n            return false;\n\
    \        }\n    }\n    return open == 0;\n}\n", "\tvar count = 0;\n\tfor (var\
    \ i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] == '(') {\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if (brackets[i] == ')') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn (count == 0);\n}\n", "   \
    \ var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == '('){\n            stack.push(brackets[i]);\n        }\n   \
    \     else if (brackets[i] == ')'){\n            if (stack.length == 0){\n   \
    \             return false;\n            }\n            stack.pop();\n       \
    \ }\n    }\n    if (stack.length == 0){\n        return true;\n    }\n    return\
    \ false;\n}\n", "  var stack = [];\n  for (var i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] == \"(\") {\n      stack.push(brackets[i]);\n    } else\
    \ if (brackets[i] == \")\") {\n      if (stack.length > 0) {\n        stack.pop();\n\
    \      } else {\n        return false;\n      }\n    }\n  }\n  return (stack.length\
    \ == 0);\n}\n", "    let open = 0\n    for (let i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == \"(\"){\n            open++\n        }\n        else\
    \ if (brackets[i] == \")\"){\n            open--\n        }\n        if (open\
    \ < 0){\n            return false\n        }\n    }\n    return open == 0\n}\n",
  "    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    return (count == 0);\n\
    }\n", "\t//TODO\n\tlet count=0;\n\tlet open = [];\n\tlet closed = [];\n\tfor(let\
    \ i=0; i<brackets.length; i++){\n\t\tif(brackets[i] == \"(\"){\n\t\t\topen.push(i);\n\
    \t\t}\n\t\telse{\n\t\t\tclosed.push(i);\n\t\t}\n\t}\n\tfor(let i=0; i<closed.length;\
    \ i++){\n\t\tif(open[i] > closed[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n", "\tvar stack = [];\n\tvar open = [\"(\"];\n\tvar close = [\")\"\
    ];\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tvar char = brackets[i];\n\
    \t\tif (open.indexOf(char) != -1) {\n\t\t\tstack.push(char);\n\t\t} else if (close.indexOf(char)\
    \ != -1) {\n\t\t\tif (stack.length == 0 || char != close[open.indexOf(stack.pop())])\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.length == 0;\n\
    }\n", "\n}\n", "    if (typeof brackets != \"string\") {\n        return false;\n\
    \    }\n    var opening = 0;\n    for (var i = 0; i < brackets.length; i++) {\n\
    \        if (brackets[i] == \"(\") {\n            opening += 1;\n        } else\
    \ if (brackets[i] == \")\") {\n            opening -= 1;\n        } else {\n \
    \           return false;\n        }\n        if (opening < 0) {\n           \
    \ return false;\n        }\n    }\n    return opening == 0;\n}\n", "    var stack\
    \ = [];\n    for (var i = 0; i < brackets.length; i++){\n        var bracket =\
    \ brackets[i];\n        if (bracket == \"(\"){\n            stack.push(bracket);\n\
    \        }\n        else if (bracket == \")\"){\n            if (stack.length\
    \ == 0){\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length == 0;\n}", "  var count = 0;\n  for\
    \ (var i = 0; i < brackets.length; i++) {\n    if (brackets[i] == \"(\") {\n \
    \     count += 1;\n    } else if (brackets[i] == \")\") {\n      count -= 1;\n\
    \    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count\
    \ == 0;\n}\n", "    let count = 0;\n    for (let i=0; i<brackets.length; i++){\n\
    \        if (brackets[i] === \"(\"){\n            count += 1;\n        } else\
    \ if (brackets[i] === \")\"){\n            count -= 1;\n        }\n        if\
    \ (count < 0){\n            return false;\n        }\n    }\n    return count\
    \ === 0;\n}\n", "    var result = brackets.split(\"\");\n    var count = 0;\n\
    \    for (var i = 0; i < result.length; i++){\n        if (result[i] == \"(\"\
    ){\n            count += 1;\n        }\n        else if (result[i] == \")\"){\n\
    \            count -= 1;\n        }\n        if (count < 0){\n            return\
    \ false;\n        }\n    }\n    if (count == 0){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\n", "  var stack = new Stack();\n\
    \  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i] == \"(\")\
    \ {\n      stack.push(brackets[i]);\n    }\n    else if (brackets[i] == \")\"\
    ) {\n      var out = stack.pop();\n      if (out != \"(\") {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}", "\tvar bracket_stack = [];\n\tfor (var\
    \ i = 0; i < brackets.length; i++){\n\t\tvar current_char = brackets[i];\n\t\t\
    if (current_char == \"(\"){\n\t\t\tbracket_stack.push(current_char);\n\t\t} else\
    \ if (current_char == \")\"){\n\t\t\tif (bracket_stack.length == 0){\n\t\t\t\t\
    return false;\n\t\t\t} else {\n\t\t\t\tbracket_stack.pop();\n\t\t\t}\n\t\t}\n\t\
    }\n\tif (bracket_stack.length == 0){\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\n", "\tvar stack = [];\n\tvar open = [];\n\tvar openCount = 0;\n\
    \tvar closeCount = 0;\n\tvar count = 0;\n\tfor(var i = 0; i < brackets.length;\
    \ i++){\n\t\tif(brackets[i] == \"(\"){\n\t\t\tstack.push(brackets[i]);\n\t\t\t\
    open.push(brackets[i]);\n\t\t\topenCount++;\n\t\t}\n\t\telse if(brackets[i] ==\
    \ \")\"){\n\t\t\tif(stack.length == 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\
    stack.pop();\n\t\t\tcloseCount++;\n\t\t}\n\t}\n\tif(stack.length == 0 && openCount\
    \ == closeCount){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n\
    \n", "    var i = 0;\n    var stack = [];\n    var c;\n    while (i < brackets.length){\n\
    \        c = brackets[i];\n        if (c == \"(\"){\n            stack.push(c);\n\
    \        } else if (c == \")\"){\n            if (stack.length > 0){\n       \
    \         stack.pop();\n            } else {\n                return false;\n\
    \            }\n        }\n        i += 1;\n    }\n    return stack.length ==\
    \ 0;\n}\n", "    if(brackets.length%2 == 1){\n        return false;\n    }\n \
    \   var left = 0;\n    var right = 0;\n    for(var i = 0; i < brackets.length;\
    \ i++){\n        if(brackets[i] == \"(\"){\n            left++;\n        }\n \
    \       else{\n            right++;\n        }\n        if(right > left){\n  \
    \          return false;\n        }\n    }\n    if(left != right){\n        return\
    \ false;\n    }\n    return true;\n}\n", "\tvar count = 0;\n\tfor (var i = 0;\
    \ i < brackets.length; i++) {\n\t\tif (brackets[i] == \"(\") {\n\t\t\tcount +=\
    \ 1;\n\t\t} else if (brackets[i] == \")\") {\n\t\t\tcount -= 1;\n\t\t}\n\t\tif\
    \ (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;\n}\n",
  "    // Keep track of opening brackets.\n    var stack = []\n    for (var i = 0;\
    \ i < brackets.length; i++){\n        var c = brackets[i]\n        if (c == \"\
    (\"){\n            stack.push(c)\n        } else if (c == \")\"){\n          \
    \  if (stack.length == 0){\n                return false\n            }\n    \
    \        stack.pop()\n        }\n    }\n    // If we have opening brackets, they\
    \ weren't closed.\n    return stack.length == 0\n}\n", "    let open = 0;\n  \
    \  for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"\
    (\") {\n            open++;\n        } else {\n            open--;\n        }\n\
    \        if (open < 0) {\n            return false;\n        }\n    }\n    return\
    \ open == 0;\n}\n", "    var open = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            open++;\n        }\n\
    \        else if (brackets[i] == \")\"){\n            open--;\n        }\n   \
    \     if (open < 0){\n            return false;\n        }\n    }\n    return\
    \ open == 0;\n}\n", "    //let o = 0;\n    let o = [];\n    for (let i = 0; i\
    \ < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n            o.push(brackets[i]);\n\
    \        }\n        else if (brackets[i] == \")\"){\n            if (o.length\
    \ == 0){\n                return false;\n            }\n            else{\n  \
    \              o.pop();\n            }\n        }\n    }\n    if (o.length ==\
    \ 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n\
    }\n", "    var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n \
    \       if (brackets[i] == \"(\"){\n            stack.push(i);\n        } else\
    \ if (brackets[i] == \")\"){\n            if (stack.length > 0){\n           \
    \     stack.pop();\n            } else {\n                return false;\n    \
    \        }\n        }\n    }\n    return stack.length == 0;\n}\n", "\t\n\tvar\
    \ i = 0;\n\t\n\t// loop through every character in brackets\n\twhile (i < brackets.length){\n\
    \t\t// if this character is an opening bracket...\n\t\tif (brackets[i] == \"(\"\
    ){\n\t\t\t// look for the corresponding closing bracket.\n\t\t\tvar j = i + 1;\n\
    \t\t\tvar depth = 1;\n\t\t\t\n\t\t\twhile (j < brackets.length){\n\t\t\t\t// \"\
    (\" increases depth.\n\t\t\t\tif (brackets[j] == \"(\"){\n\t\t\t\t\tdepth += 1;\n\
    \t\t\t\t}\n\t\t\t\t// \")\" decreases depth.\n\t\t\t\telse if (brackets[j] ==\
    \ \")\"){\n\t\t\t\t\tdepth -= 1;\n\t\t\t\t}\n\t\t\t\t// if the depth is 0, then\
    \ we've reached the closing bracket.\n\t\t\t\tif (depth == 0){\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t\tj += 1;\n\t\t\t}\n\t\t\t\n\t\t\t// if the depth is not 0 at\
    \ the end of the string, then we haven't found the closing bracket.\n\t\t\tif\
    \ (depth != 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t// move i to the\
    \ character after the closing bracket,\n\t\t\t// so we don't have to look for\
    \ the closing bracket for this opening bracket again.\n\t\t\ti = j;\n\t\t}\n\t\
    \t\n\t\ti += 1;\n\t}\n\t\n\treturn true;\n}\n", "    return true;\n}\n", "\tvar\
    \ count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i]\
    \ == \"(\") {\n\t\t\tcount += 1;\n\t\t}\n\t\telse {\n\t\t\tcount -= 1;\n\t\t}\n\
    \t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (count == 0) {\n\t\
    \treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}", "\tlet count = 0;\n\
    \tfor (let i = 0; i < brackets.length; i++){\n\t\tif (brackets[i] == \"(\"){\n\
    \t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] == \")\"){\n\t\t\tcount--;\n\t\
    \t}\n\t\tif (count < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;\n\
    }\n", "\tvar stack=[];\n\tfor(var i=0;i<brackets.length;i++){\n\t\tif(brackets[i]==\"\
    (\"){\n\t\t\tstack.push(brackets[i]);\n\t\t}else if(brackets[i]==\")\"){\n\t\t\
    \tvar len=stack.length;\n\t\t\tif(len==0){\n\t\t\t\treturn false;\n\t\t\t}else{\n\
    \t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.length==0;\n}\n", " \
    \   let opening = [];\n    let closer = 0;\n    for(let i = 0; i < brackets.length;\
    \ i++){\n        if(brackets[i] == \"(\"){\n            opening.push(brackets[i]);\n\
    \        }else{\n            closer += 1;\n        }\n    }\n    if(opening.length\
    \ == closer){\n        return true;\n    }else{\n        return false;\n    }\n\
    }\n", "\tvar count = 0;\n\tvar correct = true;\n\tfor (var i = 0; i < brackets.length;\
    \ i++){\n\t\tif (brackets[i] == \"(\"){\n\t\t\tcount++;\n\t\t}\n\t\telse{\n\t\t\
    \tcount--;\n\t\t}\n\t\tif (count < 0){\n\t\t\tcorrect = false;\n\t\t}\n\t}\n\t\
    if (count != 0){\n\t\tcorrect = false;\n\t}\n\treturn correct;\n}\n", "  if (\
    \ brackets == \"\" ) {\n    return true;\n  }\n  else {\n    if ( brackets[0]\
    \ == \"(\" && brackets[brackets.length-1] == \")\" ) {\n      if ( correct_bracketing(brackets.slice(1,\
    \ brackets.length-1)) ) {\n        return true;\n      }\n      else {\n     \
    \   return false;\n      }\n    }\n    else {\n      return false;\n    }\n  }\n\
    }", "\t//check if brackets is a string\n\tif(typeof brackets !== \"string\"){\n\
    \t\tthrow new Error(\"input should be a string\");\n\t}\n\t//check if it is empty\n\
    \tif(brackets.length === 0){\n\t\treturn false;\n\t}\n\t//loop through the characters\
    \ and return false if any of the characters are not \"(\" or \")\"\n\tfor(var\
    \ i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] !== \"(\" && brackets[i]\
    \ !== \")\"){\n\t\t\treturn false;\n\t\t}\n\t}\n\t//loop through the characters\
    \ and assign the brackets to variables.\n\t//if the number of opening brackets\
    \ is the same as the number of closing brackets, return true\n\t//otherwise, return\
    \ false\n\tvar opening_brackets = 0;\n\tvar closing_brackets = 0;\n\tfor(var i\
    \ = 0; i < brackets.length; i++){\n\t\tif(brackets[i] === \"(\"){\n\t\t\topening_brackets++;\n\
    \t\t}else{\n\t\t\tclosing_brackets++;\n\t\t}\n\t}\n\tif(opening_brackets === closing_brackets){\n\
    \t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n", "    const total_brackets\
    \ = brackets.length;\n    let index = 0;\n    let stack = [];\n    while(index\
    \ < total_brackets){\n        const current_bracket = brackets[index];\n     \
    \   if(current_bracket === \"(\"){\n            stack.push(current_bracket);\n\
    \        }\n        else{\n            if(stack.length === 0){\n             \
    \   return false;\n            }\n            else{\n                stack.pop();\n\
    \            }\n        }\n        index += 1;\n    }\n    return stack.length\
    \ === 0;\n}\n", "\tvar bracket_stack = [];\n\tvar character;\n\tvar is_match;\n\
    \tvar is_well_bracketed = true;\n\tfor (var index = 0; index < brackets.length;\
    \ index++){\n\t\tcharacter = brackets[index];\n\t\tif (character == \"(\"){\n\t\
    \t\tbracket_stack.push(character);\n\t\t}\n\t\telse{\n\t\t\tis_match = bracket_stack.pop()\
    \ == \"(\";\n\t\t\tif (!is_match){\n\t\t\t\tis_well_bracketed = false;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn is_well_bracketed && bracket_stack.length\
    \ == 0;\n}\n\n", "    var open = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            open++;\n        }\n\
    \        else if (brackets[i] == \")\"){\n            open--;\n        }\n   \
    \     if (open < 0){\n            return false;\n        }\n    }\n    return\
    \ open == 0;\n}\n", "    if (brackets[0] === \")\"){\n        return false;\n\
    \    }\n    let total_open = 0;\n    let total_close = 0;\n    for (let i = 0;\
    \ i < brackets.length; i++){\n        if (brackets[i] === \"(\"){\n          \
    \  total_open++;\n        }\n        else if (brackets[i] === \")\"){\n      \
    \      total_close++;\n        }\n        if (total_close > total_open){\n   \
    \         return false;\n        }\n    }\n    if (total_open === total_close){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \   while(brackets.indexOf('()') !== -1){\n        brackets = brackets.replace('()',\
    \ '');\n    }\n    return brackets.length === 0;\n}\n", "\tvar count = 0;\n\t\
    for (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] == \"(\") {\n\
    \t\t\tcount += 1;\n\t\t}\n\t\telse {\n\t\t\tcount -= 1;\n\t\t}\n\t\tif (count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (count == 0) {\n\t\treturn true;\n\
    \t}\n\telse {\n\t\treturn false;\n\t}\n}\n", "    var arr = brackets.split(\"\"\
    );\n    var counter = 0;\n    for (var i = 0; i < arr.length; i++){\n        if\
    \ (arr[i] == \"(\") {\n            counter += 1;\n        }\n        else if (arr[i]\
    \ == \")\") {\n            counter -= 1;\n        }\n        if (counter < 0)\
    \ {\n            return false;\n        }\n    }\n    if (counter != 0) {\n  \
    \      return false;\n    }\n    return true;\n}\n", "\tvar open_brackets = 0;\n\
    \tfor (var i = 0; i < brackets.length; i++){\n\t\tif (brackets[i] == \"(\"){\n\
    \t\t\topen_brackets += 1;\n\t\t}\n\t\telse if (brackets[i] == \")\"){\n\t\t\t\
    open_brackets -= 1;\n\t\t}\n\t\tif (open_brackets < 0){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn (open_brackets == 0);\n}\n", "\tvar count = 0;\n\tvar i =\
    \ 0;\n\twhile (i < brackets.length) {\n\t\tif (brackets[i] == \"(\") {\n\t\t\t\
    count += 1;\n\t\t}\n\t\telse if (brackets[i] == \")\") {\n\t\t\tcount -= 1;\n\t\
    \t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\tif (count\
    \ == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\n", "\t\
    let stack = [];\n\tfor(let i=0; i<brackets.length; i++){\n\t\tif(brackets[i]===\"\
    (\"){\n\t\t\tstack.push(brackets[i]);\n\t\t}else if(brackets[i]===\")\"){\n\t\t\
    \tif(stack.length === 0){\n\t\t\t\treturn false;\n\t\t\t}else{\n\t\t\t\tstack.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn stack.length === 0;\n}\n", "\tlet len = brackets.length;\n\
    \tlet stack = [];\n\tfor(let i = 0; i < len; i++){\n\t\tif(brackets[i] == \"(\"\
    ){\n\t\t\tstack.push(brackets[i]);\n\t\t}\n\t\telse if(brackets[i] == \")\"){\n\
    \t\t\tif(stack.length == 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\
    \t\t}\n\t}\n\tif(stack.length == 0){\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\n", "    var open_brackets = 0;\n    for (var i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == '('){\n            open_brackets += 1;\n        }\n\
    \        else if (brackets[i] == ')'){\n            open_brackets -= 1;\n    \
    \    }\n        if (open_brackets < 0){\n            return false;\n        }\n\
    \    }\n    return open_brackets == 0;\n}\n", "  var stack = [];\n  for (var i\
    \ = 0; i < brackets.length; i++) {\n    var char = brackets[i];\n    if (char\
    \ === '(') {\n      stack.push(char);\n    } else if (char === ')') {\n      if\
    \ (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n\
    \      }\n    }\n  }\n  return stack.length === 0;\n}\n", "  return (brackets.split(\"\
    \").reduce(function(total,current){return total+=(current===\"(\")?1:-1})===0);\n\
    }\n", "\tvar stack = [];\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i]\
    \ == \"(\"){\n\t\t\tstack.push(brackets[i]);\n\t\t}\n\t\telse if(brackets[i] ==\
    \ \")\"){\n\t\t\tif(stack.length == 0) return false;\n\t\t\tstack.pop();\n\t\t\
    }\n\t}\n\treturn stack.length == 0;\n}\n", "  let numOpen = 0;\n  for (let i =\
    \ 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      numOpen\
    \ += 1;\n    } else if (brackets[i] === \")\") {\n      numOpen -= 1;\n    }\n\
    \    if (numOpen < 0) {\n      return false;\n    }\n  }\n  return numOpen ===\
    \ 0;\n}\n", "    var open_count = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        var b = brackets[i];\n        if (b == \"(\"){\n            open_count++;\n\
    \        } else if (b == \")\"){\n            open_count--;\n        }\n     \
    \   if (open_count < 0){\n            return false;\n        }\n    }\n    return\
    \ open_count == 0;\n}\n", "    //var brackets = \"()(())\"\n    var opening_brackets\
    \ = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i]\
    \ == \"(\"){\n            opening_brackets += 1;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            opening_brackets -= 1;\n        }\n        if (opening_brackets\
    \ < 0){\n            return false;\n        }\n    }\n    if (opening_brackets\
    \ == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n\
    }\n", "    var depth = 0;\n    var i;\n    for (i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == \"(\"){\n            depth += 1;\n        }\n    \
    \    else if (brackets[i] == \")\"){\n            depth -= 1;\n        }\n   \
    \     if (depth < 0){\n            return false;\n        }\n    }\n    return\
    \ depth == 0;\n}\n", "    // YOUR CODE HERE\n    var count = 0;\n    var flag\
    \ = false;\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i]\
    \ == '('){\n            count++;\n        }\n        else if(brackets[i] == ')'){\n\
    \            count--;\n        }\n        if(count < 0){\n            flag = true;\n\
    \        }\n    }\n    if(count != 0 || flag){\n        return false;\n    }\n\
    \    else{\n        return true;\n    }\n}", "    var l = brackets.length;\n \
    \   var stack = new Array();\n    for(var i = 0; i < l; i++){\n        switch(brackets[i]){\n\
    \            case \"(\": stack.push(brackets[i]); break;\n            case \"\
    )\": \n                if(stack.length == 0){\n                    return false;\n\
    \                }else{\n                    var s = stack.pop();\n          \
    \          if(s != \"(\"){\n                        return false;\n          \
    \          }\n                }\n                break;\n            default:\n\
    \                return false;\n        }\n    }\n    if(stack.length != 0){\n\
    \        return false;\n    }\n    return true;\n}\n", "    var i = 0;\n    while\
    \ (i < brackets.length){\n        if (brackets[i] == \")\"){\n            if (brackets[i-1]\
    \ == \"(\"){\n                brackets = brackets.slice(0,i-1) + brackets.slice(i+1);\n\
    \                i -= 2;\n            }\n            else{\n                return\
    \ false;\n            }\n        }\n        i += 1;\n    }\n    return brackets.length\
    \ == 0;\n}\n", "\tvar bracket_stack = [];\n\tfor (var i = 0; i < brackets.length;\
    \ i++){\n\t\tif (brackets[i] == \"(\"){\n\t\t\tbracket_stack.push(brackets[i]);\n\
    \t\t}\n\t\telse if (brackets[i] == \")\"){\n\t\t\tif (bracket_stack.length ==\
    \ 0)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\tbracket_stack.pop();\n\t\t}\n\
    \t}\n\tif (bracket_stack.length == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n\
    }\n", "    var stack=[];\n    var open='(';\n    var close=')';\n    for(var i=0;i<brackets.length;i++){\n\
    \        if(brackets[i]===open){\n            stack.push(brackets[i]);\n     \
    \   }\n        else if(brackets[i]===close){\n            if(stack.length==0){\n\
    \                return false;\n            }\n            else{\n           \
    \     stack.pop();\n            }\n        }\n    }\n    if(stack.length==0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \   var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n        }\n \
    \       else{\n            if (stack.length == 0){\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ == 0;\n}", "    var opening = 0;\n    for (i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == \"(\"){\n            opening += 1;\n        }\n  \
    \      else if (brackets[i] == \")\"){\n            opening -= 1;\n        }\n\
    \        if (opening < 0){\n            return false;\n        }\n    }\n    if\
    \ (opening != 0){\n        return false;\n    }\n    return true;\n}\n", "  for\
    \ (var i = 0; i < brackets.length; i++){\n    if (brackets[i] == \"(\"){\n   \
    \   if (brackets[i + 1] != \")\"){\n        return false;\n      }\n      else\
    \ {\n        brackets = brackets.replace(brackets[i], \"\");\n        brackets\
    \ = brackets.replace(brackets[i], \"\");\n        i--;\n      }\n    }\n  }\n\
    \  return true;\n}", "    var len = brackets.length;\n    var count = 0;\n   \
    \ for(var i = 0; i < len; i++){\n        if(brackets[i] === \"(\"){\n        \
    \    count++;\n        }\n        else if(brackets[i] === \")\"){\n          \
    \  count--;\n        }\n        if(count < 0){\n            return false;\n  \
    \      }\n    }\n    if(count === 0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\n\n", "\tif (brackets.length % 2 == 1)\n\t\t\
    return false;\n\n\tlet open_count = 0;\n\tfor (let i = 0; i < brackets.length;\
    \ i++){\n\t\tif (brackets[i] == \"(\")\n\t\t\topen_count++;\n\t\telse\n\t\t\t\
    open_count--;\n\t\tif (open_count < 0)\n\t\t\treturn false;\n\t}\n\treturn open_count\
    \ == 0;\n}\n", "\tvar open = 0;\n\tvar close = 0;\n\tfor (var i = 0; i < brackets.length;\
    \ i++) {\n\t\tif (brackets[i] == \"(\") {\n\t\t\topen += 1;\n\t\t}\n\t\telse if\
    \ (brackets[i] == \")\") {\n\t\t\tclose += 1;\n\t\t}\n\t}\n\tif (open == close)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n", "  var p =\
    \ 0; // number of \"(\"\n  var q = 0; // number of \")\"\n  for (var i = 0; i\
    \ < brackets.length; i++){\n    if (brackets[i] == \"(\"){\n      p++;\n    }\
    \ else if (brackets[i] == \")\"){\n      q++;\n    }\n    if (q > p){\n      return\
    \ false;\n    }\n  }\n  return p == q;\n}\n", "  var count = 0;\n  for (var i\
    \ = 0; i < brackets.length; i++) {\n    if (brackets[i] == \"(\") {\n      count++;\n\
    \    }\n    else if (brackets[i] == \")\") {\n      count--;\n    }\n    if (count\
    \ < 0) {\n      return false;\n    }\n  }\n  if (count == 0) {\n    return true;\n\
    \  }\n  else {\n    return false;\n  }\n}\n", "\tif(brackets.length == 0)\n\t\t\
    return true;\n\tif(brackets.length == 1)\n\t\treturn false;\n\tvar count = 0;\n\
    \tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] == \"(\")\n\t\t\
    \tcount++;\n\t\telse\n\t\t\tcount--;\n\t\tif(count < 0)\n\t\t\treturn false;\n\
    \t}\n\treturn count == 0;\n}\n", "\treturn true;\n}\n", "\tvar list = brackets.split(\"\
    \");\n\tvar left = [];\n\tvar right = [];\n\tfor (var i = 0; i < list.length;\
    \ i++){\n\t\tif (list[i] == \"(\"){\n\t\t\tleft.push(i);\n\t\t}\n\t\telse{\n\t\
    \t\tright.push(i);\n\t\t}\n\t}\n\tif (left.length != right.length){\n\t\treturn\
    \ false;\n\t}\n\twhile (left.length > 0){\n\t\tif (right[right.length - 1] > left[left.length\
    \ - 1]){\n\t\t\tright.pop();\n\t\t\tleft.pop();\n\t\t}\n\t\telse{\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n", "  var count = 0;\n  for (var i =\
    \ 0; i < brackets.length; i++) {\n    if (brackets[i] == \"(\") {\n      count++;\n\
    \    } else if (brackets[i] == \")\") {\n      count--;\n    }\n    if (count\
    \ < 0) {\n      return false;\n    }\n  }\n  return count == 0;\n}", "    let\
    \ stack = [];\n    for (let i = 0; i < brackets.length; i++){\n        if (brackets[i]\
    \ === '('){\n            stack.push(brackets[i]);\n        } else if (brackets[i]\
    \ === ')'){\n            if (stack.length === 0){\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "  var brackets = brackets.split(\"\
    \");\n  var open = [];\n  for (var i = 0; i < brackets.length; i++) {\n    if\
    \ (brackets[i] === \"(\") {\n      open.push(brackets[i]);\n    }\n    else if\
    \ (brackets[i] === \")\") {\n      if (open.length === 0) {\n        return false;\n\
    \      }\n      else {\n        open.pop();\n      }\n    }\n  }\n  if (open.length\
    \ === 0) {\n    return true;\n  }\n  else {\n    return false;\n  }\n}\n", "\t\
    var matching_brackets = {\n\t\t'{': '}',\n\t\t'[': ']',\n\t\t'(': ')'\n\t};\n\t\
    var stack = [];\n\tfor (var i = 0; i < brackets.length; i++){\n\t\tif (brackets[i]\
    \ in matching_brackets){\n\t\t\tstack.push(brackets[i]);\n\t\t} else {\n\t\t\t\
    if (brackets[i] != matching_brackets[stack.pop()]){\n\t\t\t\treturn false;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn true;\n}\n", "  let count = 0;\n  let a = brackets.split(\"\
    \");\n  for (let i = 0; i < a.length; i++){\n    if (a[i] == \"(\"){\n      count++;\n\
    \    }\n    else if (a[i] == \")\"){\n      count--;\n    }\n    if (count < 0){\n\
    \      return false;\n    }\n  }\n  if (count == 0){\n    return true;\n  }\n\
    \  else{\n    return false;\n  }\n}\n", "    let open=0\n    for(let i=0;i<brackets.length;i++){\n\
    \        if(brackets[i]===\"(\"){\n            open++\n        }\n        else{\n\
    \            open--\n        }\n        if(open<0){\n            return false\n\
    \        }\n    }\n    return open===0\n}\n", "    var result = true;\n    var\
    \ open_brackets = 0;\n    var closed_brackets = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\") {\n            open_brackets++;\n \
    \       }\n        else if (brackets[i] == \")\") {\n            closed_brackets++;\n\
    \        }\n        if (closed_brackets > open_brackets) {\n            result\
    \ = false;\n        }\n    }\n    if (open_brackets != closed_brackets) {\n  \
    \      result = false;\n    }\n    return result;\n}\n", "  let bracket_count\
    \ = 0;\n  for (let index = 0; index < brackets.length; index++) {\n    if (brackets[index]\
    \ === \"(\") {\n      bracket_count += 1;\n    } else if (brackets[index] ===\
    \ \")\") {\n      bracket_count -= 1;\n    }\n    if (bracket_count < 0) {\n \
    \     return false;\n    }\n  }\n  return bracket_count === 0;\n}\n", "\n}\n",
  "  let open = 0;\n  for (let i = 0; i < brackets.length; i++){\n    if (brackets[i]\
    \ == \"(\"){\n      open++;\n    } else if (brackets[i] == \")\"){\n      open--;\n\
    \    }\n    if (open < 0){\n      return false;\n    }\n  }\n  return open ==\
    \ 0;\n}\n", "    let stack = [];\n    for (let i=0; i<brackets.length; i++){\n\
    \        if (brackets[i] == \"(\") {\n            stack.push(brackets[i]);\n \
    \       }\n        else if (brackets[i] == \")\") {\n            if (stack.length\
    \ == 0){\n                return false;\n            }\n            else {\n \
    \               stack.pop();\n            }\n        }\n    }\n    if (stack.length\
    \ == 0){\n        return true;\n    }\n    else {\n        return false;\n   \
    \ }\n}\n", "\tvar len = brackets.length;\n\tvar stack = new Array();\n\tfor(var\
    \ i = 0; i < len; i++){\n\t\tvar br = brackets[i];\n\t\tif(br == \"(\"){\n\t\t\
    \tstack.push(br);\n\t\t}else if(br == \")\"){\n\t\t\tif(stack.length == 0){\n\t\
    \t\t\treturn false;\n\t\t\t}else{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t}\n\
    \tif(stack.length == 0){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n\
    }\n", "\t//console.log(brackets);\n\t//console.log(brackets.length);\n\tvar i\
    \ = 0;\n\twhile (i < brackets.length){\n\t\tif (brackets[i] == \"(\"){\n\t\t\t\
    brackets = brackets.substring(0, i) + brackets.substring(i+1);\n\t\t\t//console.log(brackets);\n\
    \t\t\tvar j = i;\n\t\t\twhile (j < brackets.length){\n\t\t\t\tif (brackets[j]\
    \ == \")\"){\n\t\t\t\t\tbrackets = brackets.substring(0, j) + brackets.substring(j+1);\n\
    \t\t\t\t\t//console.log(brackets);\n\t\t\t\t\ti = 0;\n\t\t\t\t\tbreak;\n\t\t\t\
    \t}\n\t\t\t\tj += 1;\n\t\t\t}\n\t\t\tif (j == brackets.length){\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\ti += 1;\n\t\t}\n\t}\n\tif (brackets.length\
    \ == 0){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n", "\tvar\
    \ len = brackets.length;\n\tif(len % 2 != 0){\n\t\treturn false;\n\t}\n\tvar stack\
    \ = [];\n\tfor(var i = 0; i < len; i++){\n\t\tvar c = brackets[i];\n\t\tif(c ==\
    \ \"(\"){\n\t\t\tstack.push(c);\n\t\t}\n\t\telse if(c == \")\"){\n\t\t\tvar last\
    \ = stack.pop();\n\t\t\tif(last != \"(\"){\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn true;\n}\n", "  var stack = [];\n  for (var i = 0; i < brackets.length;\
    \ i++) {\n    var current_bracket = brackets[i];\n    if (current_bracket == \"\
    (\") {\n      stack.push(current_bracket);\n    } else if (current_bracket ==\
    \ \")\") {\n      if (stack.length == 0) {\n        return false;\n      } else\
    \ {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length == 0;\n\
    }\n\nvar test_string1 = \"(((())))\";\nvar test_string2 = \")\";\nvar test_string3\
    \ = \"((())\";\nvar test_string4 = \"(((((((((())))))))))\";\nvar test_string5\
    \ = \"()()()()()()()()()()()\";\nvar test_string6 = \"(((())))(((())))\";\n",
  "\tlet counter = 0;\n\tfor (let i = 0; i < brackets.length; i++){\n\t\tif (brackets[i]\
    \ == \"(\"){\n\t\t\tcounter += 1;\n\t\t}\n\t\telse if (brackets[i] == \")\"){\n\
    \t\t\tcounter -= 1;\n\t\t}\n\t\tif (counter < 0){\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\tif (counter == 0){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}\n}\n", "  // your code here\n  var map = {\n  \t\"(\": \")\",\n  \t\")\":\
    \ \"(\"\n  };\n  var check = [];\n  var newArr = brackets.split(\"\");\n  var\
    \ result = true;\n  var count = 0;\n  for (var i = 0; i < newArr.length; i++)\
    \ {\n  \tif (newArr[i] === \"(\") {\n  \t\tcheck.push(newArr[i]);\n  \t}\n  \t\
    if (newArr[i] === \")\") {\n  \t\tif (check.length === 0) {\n  \t\t\treturn false;\n\
    \  \t\t}\n  \t\telse {\n  \t\t\tcheck.pop();\n  \t\t}\n  \t}\n  }\n  if (check.length\
    \ > 0) {\n  \treturn false;\n  }\n  return result;\n}", "    let len = brackets.length;\n\
    \    let stack = [];\n    let stack_ptr = 0;\n    let c;\n    let match;\n   \
    \ for(let i = 0; i < len; i++){\n        c = brackets[i];\n        if(c === '('){\n\
    \            stack[stack_ptr++] = c;\n        }\n        else{\n            match\
    \ = stack[--stack_ptr];\n            if(match !== '('){\n                return\
    \ false;\n            }\n        }\n    }\n    return stack_ptr === 0;\n}\n\n",
  "    var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == '('){\n            stack.push(i);\n        }\n        else if\
    \ (brackets[i] == ')'){\n            if (stack.length > 0){\n                stack.pop();\n\
    \            }\n            else{\n                return false;\n           \
    \ }\n        }\n    }\n    return stack.length == 0;\n}\n", "  var stack = [];\n\
    \  var opened_brackets = 0;\n  var closed_brackets = 0;\n  for (var i = 0; i <\
    \ brackets.length; i++) {\n    if (brackets[i] == \"(\") {\n      stack.push(brackets[i]);\n\
    \      opened_brackets++;\n    }\n    else {\n      if (stack.length > 0) {\n\
    \        stack.pop();\n        closed_brackets++;\n      }\n      else {\n   \
    \     return false;\n      }\n    }\n  }\n  if (opened_brackets == closed_brackets)\
    \ {\n    return true;\n  }\n  else {\n    return false;\n  }\n}\n", "  count =\
    \ 0;\n  for (i=0; i<brackets.length; i++){\n    if (brackets[i] == \"(\"){\n \
    \     count++;\n    }\n    else if (brackets[i] == \")\"){\n      count--;\n \
    \   }\n    if (count < 0){\n      return false;\n    }\n  }\n  if (count == 0){\n\
    \    return true;\n  }\n  else{\n    return false;\n  }\n}\n", "\tif (brackets\
    \ == \"\"){\n\t\treturn true;\n\t}\n\telse if(brackets[0] == \"(\"){\n\t\tif(brackets[brackets.length-1]\
    \ == \")\"){\n\t\t\tbrackets = brackets.slice(1, brackets.length-1);\n\t\t\treturn\
    \ correct_bracketing(brackets);\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\telse{\n\t\treturn false;\n\t}\n}\n", "  var count = 0;\n  for (var i =\
    \ 0; i < brackets.length; i++) {\n    if (brackets[i] == \"(\") {\n      count++;\n\
    \    }\n    else {\n      count--;\n    }\n    if (count < 0) {\n      return\
    \ false;\n    }\n  }\n  if (count == 0) {\n    return true;\n  }\n  else {\n \
    \   return false;\n  }\n}\n", "    var level = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            level += 1;\n       \
    \ } else if (brackets[i] == \")\"){\n            level -= 1;\n        }\n    \
    \    if (level < 0){\n            return false;\n        }\n    }\n    return\
    \ level == 0;\n}\n", "    var  count = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] === '('){\n            count += 1;\n        }\n\
    \        else if (brackets[i] === ')'){\n            count -= 1;\n        }\n\
    \        if (count < 0){\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}", "    var open = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\") {\n            open += 1;\n       \
    \ } else if (brackets[i] == \")\") {\n            open -= 1;\n        }\n    \
    \    if (open < 0) {\n            return false;\n        }\n    }\n    return\
    \ open == 0;\n}\n", "\tvar p = 0;\n\tfor (var i = 0; i < brackets.length; i++){\n\
    \t\tif (brackets[i] == \"(\"){\n\t\t\tp += 1;\n\t\t} else if (brackets[i] == \"\
    )\"){\n\t\t\tp -= 1;\n\t\t}\n\t\tif (p < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \treturn (p == 0);\n}\n", "    var count=0;\n    for(var i=0;i<brackets.length;i++){\n\
    \        if(brackets[i]=='('){\n            count++;\n        }\n        else\
    \ if(brackets[i]==')'){\n            count--;\n        }\n        if(count<0){\n\
    \            return false;\n        }\n    }\n    if(count==0){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n", "    var left_brackets\
    \ = 0;\n    for (var i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ == \"(\") {\n            left_brackets++;\n        } else if (brackets[i] ==\
    \ \")\") {\n            left_brackets--;\n        }\n        if (left_brackets\
    \ < 0) {\n            return false;\n        }\n    }\n    return left_brackets\
    \ == 0;\n}\n\nvar exprs = [\"1 + 2\", \"3/4\", \"5/0\", \"5 + 7 +\", \"5 + (2\
    \ - 1)\", \"5 + (1 - 2)\", \"()\", \"(\"];\nfor (var i = 0; i < exprs.length;\
    \ i++) {\n    var expr = exprs[i];\n    console.log(expr + \" = \" + calc(expr));\n\
    }", "    var opening = [];\n    for (var i = 0; i < brackets.length; i++){\n \
    \       var current = brackets[i];\n        if (current == \"(\"){\n         \
    \   opening.push(current);\n        }\n        else if (current == \")\"){\n \
    \           if (opening.length == 0){\n                return false;\n       \
    \     }\n            else {\n                opening.pop();\n            }\n \
    \       }\n    }\n    if (opening.length == 0){\n        return true;\n    }\n\
    \    else {\n        return false;\n    }\n}\n", "  var n_left = 0;\n  var n_right\
    \ = 0;\n  for (var i = 0; i < brackets.length; i++){\n    if (brackets[i] == \"\
    (\"){\n      n_left += 1;\n    }\n    else if (brackets[i] == \")\"){\n      n_right\
    \ += 1;\n    }\n    if (n_right > n_left){\n      return false;\n    }\n  }\n\
    \  if (n_left == n_right){\n    return true;\n  }\n  else{\n    return false;\n\
    \  }\n}\n", "  let arr = [];\n  for (let i = 0; i < brackets.length; i++){\n \
    \   let char = brackets[i];\n    if (char === \"(\") {\n      arr.push(char);\n\
    \    }\n    else if (char === \")\") {\n      if (arr.length === 0){\n       \
    \ return false;\n      }\n      arr.pop();\n    }\n  }\n  return (arr.length ===\
    \ 0);\n}\n", "\tvar bracket_stack = [];\n\tfor (var i = 0; i < brackets.length;\
    \ i++){\n\t\tif (brackets[i] == \"(\"){\n\t\t\tbracket_stack.push(1);\n\t\t}\n\
    \t\telse if (brackets[i] == \")\"){\n\t\t\tif (bracket_stack.length > 0){\n\t\t\
    \t\tbracket_stack.pop();\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t\
    }\n\t\t}\n\t}\n\tif (bracket_stack.length == 0){\n\t\treturn true;\n\t}\n\telse{\n\
    \t\treturn false;\n\t}\n}\n", "\n}\n", "    var stack = [];\n    for (var i =\
    \ 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n        \
    \    stack.push(brackets[i]);\n        } else if (brackets[i] == \")\"){\n   \
    \         if (stack.length == 0){\n                return false;\n           \
    \ } else {\n                stack.pop();\n            }\n        }\n    }\n  \
    \  return stack.length == 0;\n}\n", "    // counter for how many opening brackets\
    \ there are\n    var open_count = 0;\n    // loop over each char\n    for (var\
    \ i = 0; i < brackets.length; i++) {\n        // if a char is an opening bracket,\
    \ add one to the count\n        if (brackets[i] == \"(\"){\n            open_count\
    \ = open_count + 1;\n        }\n        // if a char is a closing bracket, subtract\
    \ one from the count\n        else if (brackets[i] == \")\"){\n            open_count\
    \ = open_count - 1;\n        }\n        // if any time the count becomes less\
    \ than zero, the string must have\n        // had one more closing bracket than\
    \ opening bracket.\n        if (open_count < 0){\n            return false;\n\
    \        }\n    }\n    // if the count is not zero, the number of opening and\
    \ closing brackets\n    // must not have been equal\n    if (open_count != 0){\n\
    \        return false;\n    }\n    // if neither of these conditions trigger,\
    \ the bracketing must be correct\n    return true;\n}\n", "  var stack = [];\n\
    \  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i] == '(') {\n\
    \      stack.push(brackets[i]);\n    }\n    else if (brackets[i] == ')') {\n \
    \     if (stack.length > 0) {\n        stack.pop();\n      }\n      else {\n \
    \       return false;\n      }\n    }\n  }\n  if (stack.length > 0) {\n    return\
    \ false;\n  }\n  return true;\n}\n", "    var open_brackets = [];\n    for (var\
    \ i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n    \
    \        open_brackets.push(brackets[i]);\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            var last_bracket = open_brackets.pop();\n          \
    \  if (last_bracket != \"(\"){\n                return false;\n            }\n\
    \        }\n    }\n    if (open_brackets.length > 0){\n        return false;\n\
    \    }\n    return true;\n}", "\tvar stack = [];\n\n\tfor(var i = 0; i < brackets.length;\
    \ i++){\n\t\tif(brackets[i] == \"(\"){\n\t\t\tstack.push(brackets[i]);\n\t\t}\n\
    \t\telse{\n\t\t\tif(stack.length == 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\
    stack.pop();\n\t\t}\n\t}\n\treturn stack.length == 0;\n}\n", "    let flag = 0;\n\
    \    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i] === '('){\n\
    \            flag += 1;\n        }\n        else if(brackets[i] === ')'){\n  \
    \          flag -= 1;\n        }\n        if(flag < 0){\n            return false;\n\
    \        }\n    }\n    if(flag === 0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\n", "\tvar new_string = brackets.replace(/\\\
    (/g, \"a\");\n\tnew_string = new_string.replace(/\\)/g, \"b\");\n\treturn new_string.replace(/a+b+/g,\
    \ \"\").length == 0;\n}", "    //TODO: return True or False\n    var open = 0;\n\
    \    for (var i = 0; i < brackets.length; i++) {\n        if (brackets[i] == '(')\
    \ {\n            open++;\n        } else {\n            open--;\n        }\n \
    \       if (open < 0) {\n            return false;\n        }\n    }\n    return\
    \ open == 0;\n}\n", "  var count = 0;\n  for (var i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      count += 1;\n    } else if (brackets[i]\
    \ === \")\") {\n      count -= 1;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  return count === 0;\n}\n", "    var stack = []\n    for (var i=0;\
    \ i<brackets.length; i++){\n        if (brackets[i] == '('){\n            stack.push(brackets[i])\n\
    \        }\n        else if (brackets[i] == ')'){\n            if (stack.length\
    \ == 0){\n                return false\n            }\n            stack.pop()\n\
    \        }\n    }\n    if (stack.length > 0){\n        return false\n    }\n \
    \   return true\n}\n", "    var count = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            count++;\n        } else\
    \ if (brackets[i] == \")\"){\n            count--;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    return (count == 0);\n\
    }\n", "  let counter = 0;\n  for (let i = 0; i < brackets.length; i++) {\n   \
    \ if (brackets[i] === '(') {\n      counter += 1;\n    } else if (brackets[i]\
    \ === ')') {\n      counter -= 1;\n    }\n    if (counter < 0) {\n      return\
    \ false;\n    }\n  }\n  return counter === 0;\n}\n", "  var n_open = 0;\n  for\
    \ (var i = 0; i < brackets.length; i++){\n    if (brackets[i] == \"(\"){\n   \
    \   n_open += 1;\n    }\n    else if (brackets[i] == \")\"){\n      n_open -=\
    \ 1;\n    }\n    if (n_open < 0){\n      return false;\n    }\n  }\n  return n_open\
    \ == 0;\n}\n", "  let count = 0;\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === \"(\") {\n      count++;\n    } else if (brackets[i]\
    \ === \")\") {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  return count === 0;\n}\n", "\tvar count = 0;\n\tfor (var i = 0;\
    \ i < brackets.length; i++) {\n\t\tif (brackets[i] == \"(\") {\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if (brackets[i] == \")\") {\n\t\t\tcount--;\n\t\t}\n\t\tif (count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn count == 0;\n}\n", "\t// TODO:\
    \ Fix this function so that it returns true if the brackets are balanced.\n\t\
    // For example, correct_bracketing(\"()(())\") should return true.\n\tvar open_count\
    \ = 0;\n\tvar close_count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\
    \t\tif (brackets[i] == \"(\"){\n\t\t\topen_count++;\n\t\t} else if (brackets[i]\
    \ == \")\"){\n\t\t\tclose_count++;\n\t\t}\n\t}\n\tif (open_count == close_count){\n\
    \t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n", "\n}\n", "  var stack\
    \ = [];\n  for (var i = 0; i < brackets.length; i++) {\n    var char = brackets[i];\n\
    \    if (char === '(') {\n      stack.push(char);\n    } else if (char === ')')\
    \ {\n      if (stack.length === 0) {\n        return false;\n      } else {\n\
    \        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n",
  "  var a = 0;\n  var b = 0;\n  for (var i = 0; i < brackets.length; i++) {\n   \
    \ if (brackets[i] == \"(\") {\n      a++;\n    } else if (brackets[i] == \")\"\
    ) {\n      b++;\n    }\n  }\n  if (a == b) {\n    return true;\n  } else {\n \
    \   return false;\n  }\n}\n", "  let bracket_stack = [];\n  let bracket_pairs\
    \ = {'(': ')'};\n  let open_brackets = \"([{\";\n  let close_brackets = \")]}\"\
    ;\n  let correct = true;\n  for (let i = 0; i < brackets.length; i++){\n    let\
    \ bracket = brackets[i];\n    if (open_brackets.includes(bracket)){\n      bracket_stack.push(bracket);\n\
    \    }\n    else if (close_brackets.includes(bracket)){\n      let popped = bracket_stack.pop();\n\
    \      if (bracket_pairs[popped] !== bracket){\n        correct = false;\n   \
    \     break;\n      }\n    }\n  }\n  if (bracket_stack.length > 0){\n    correct\
    \ = false;\n  }\n  return correct;\n}\n", "    var l = [];\n    for (var i = 0;\
    \ i < brackets.length; i++){\n        if (brackets[i] == '('){\n            l.push(brackets[i]);\n\
    \        } else if (brackets[i] == ')'){\n            if (l.length == 0){\n  \
    \              return false;\n            } else {\n                l.pop();\n\
    \            }\n        }\n    }\n    return (l.length == 0);\n}\n", "\t// console.log(brackets)\n\
    \t// console.log(brackets.length)\n\tfor (var i = 0; i < brackets.length/2; i++)\
    \ {\n\t\t// console.log(brackets.slice(i, i+1))\n\t\tif (brackets.slice(i, i+1)\
    \ == \"(\") {\n\t\t\t// console.log(brackets.slice(brackets.length - i - 1, brackets.length\
    \ - i))\n\t\t\tif (brackets.slice(brackets.length - i - 1, brackets.length - i)\
    \ != \")\") {\n\t\t\t\treturn false\n\t\t\t}\n\t\t} else {\n\t\t\treturn false\n\
    \t\t}\n\t}\n\treturn true\n}\n", "\tvar openBrackets = 0;\n\tfor (i=0; i<brackets.length;\
    \ i++){\n\t\tif (brackets[i] == \"(\"){\n\t\t\topenBrackets += 1;\n\t\t} else\
    \ if (brackets[i] == \")\"){\n\t\t\topenBrackets -= 1;\n\t\t}\n\t\tif (openBrackets\
    \ < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (openBrackets == 0){\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n", "\tlet open = 0;\n\tlet closed\
    \ = 0;\n\tfor (let i = 0; i < brackets.length; i++){\n\t\tif (brackets[i] == \"\
    (\"){\n\t\t\topen += 1;\n\t\t}\n\t\telse if (brackets[i] == \")\"){\n\t\t\tclosed\
    \ += 1;\n\t\t}\n\t}\n\tif (open == closed){\n\t\treturn true;\n\t}\n\telse{\n\t\
    \treturn false;\n\t}\n}\n", "    var open_brackets = [];\n    var current_bracket;\n\
    \    for (var i = 0; i < brackets.length; i++) {\n        current_bracket = brackets[i];\n\
    \        if (current_bracket == \"(\") {\n            open_brackets.push(i);\n\
    \        } else if (current_bracket == \")\") {\n            if (open_brackets.length\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   open_brackets.pop();\n            }\n        }\n    }\n    return open_brackets.length\
    \ == 0;\n}\n", "    var opening = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\") {\n            opening++;\n       \
    \ } else if (brackets[i] == \")\") {\n            opening--;\n        }\n    \
    \    if (opening < 0) {\n            return false;\n        }\n    }\n    return\
    \ opening == 0;\n}\n", "    //A bracketing is correct if it contains no bracketing\
    \ symbols or if\n    //it can be split into two bracketings that are correct,\
    \ where the second bracketing starts with a \")\"\n\n    if(brackets.length ==\
    \ 0){\n        return true;\n    }\n    else{\n        if(brackets[0] == \")\"\
    ){\n            return false;\n        }\n        else{\n            if(brackets[brackets.length-1]\
    \ == \"(\"){\n                return false;\n            }\n            else{\n\
    \                for(let i = 0; i < brackets.length; i++){\n                 \
    \   if(brackets[i] == \")\" && brackets[i-1] == \"(\"){\n                    \
    \    return correct_bracketing(brackets.slice(0,i-1)) && correct_bracketing(brackets.slice(i+1));\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return false;\n}\n\n\n", "    var count = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            count++;\n        }\n\
    \        else if (brackets[i] == \")\"){\n            count--;\n        }\n  \
    \      if (count < 0){\n            return false;\n        }\n    }\n    return\
    \ count == 0;\n}\n\n", "\tvar stack = [];\n\tfor(var i = 0; i < brackets.length;\
    \ i++){\n\t\tif(brackets[i] == \"(\"){\n\t\t\tstack.push(brackets[i]);\n\t\t}\n\
    \t\telse if(brackets[i] == \")\"){\n\t\t\tif(stack.length > 0){\n\t\t\t\tstack.pop();\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.length\
    \ == 0){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n", "\tvar\
    \ counter = 0;\n\tvar check = true;\n\twhile(check && counter < brackets.length){\n\
    \t\tif(brackets[counter] === \"(\"){\n\t\t\tvar open_brackets = 0;\n\t\t\tvar\
    \ closed_brackets = 0;\n\t\t\tfor(var i = counter; i < brackets.length; i++){\n\
    \t\t\t\tif(brackets[i] === \"(\"){\n\t\t\t\t\topen_brackets += 1;\n\t\t\t\t}\n\
    \t\t\t\telse if(brackets[i] === \")\"){\n\t\t\t\t\tclosed_brackets += 1;\n\t\t\
    \t\t}\n\t\t\t\tif(open_brackets == closed_brackets){\n\t\t\t\t\tcounter = i;\n\
    \t\t\t\t\tcheck = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(check\
    \ == true){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\
    \t\t}\n\t\tcounter += 1;\n\t}\n\treturn true;\n}\n\n", "    var result = true;\n\
    \    var open = [];\n    var mappings = {\n        '(': ')',\n        '{': '}',\n\
    \        '[': ']'\n    };\n    var closings = {\n        ')': true,\n        '}':\
    \ true,\n        ']': true\n    };\n    brackets.split('').forEach(function(c)\
    \ {\n        if (c in mappings) {\n            open.push(c);\n        } else if\
    \ (c in closings) {\n            if (open.length === 0) {\n                result\
    \ = false;\n            } else {\n                var last = open.pop();\n   \
    \             if (mappings[last] !== c) {\n                    result = false;\n\
    \                }\n            }\n        }\n    });\n    return open.length\
    \ === 0 && result;\n}\n", "    var left = 0;\n    var right = 0;\n    for (var\
    \ i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n    \
    \        left += 1;\n        }\n        else if (brackets[i] == \")\"){\n    \
    \        right += 1;\n        }\n        if (right > left){\n            return\
    \ false;\n        }\n    }\n    if (left == right){\n        return true;\n  \
    \  }\n    else{\n        return false;\n    }\n}\n", "    var stack = [];\n  \
    \  for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"\
    ){\n            stack.push(brackets[i]);\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            if (stack.length == 0)\n                return false;\n\
    \            stack.pop();\n        }\n    }\n    if (stack.length == 0)\n    \
    \    return true;\n    return false;\n}\n", "  let open = [];\n\n  for (let i\
    \ = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      open.push(brackets[i]);\n\
    \    }\n    else if (brackets[i] === ')') {\n      if (open.length === 0) {\n\
    \        return false;\n      }\n      else {\n        open.pop();\n      }\n\
    \    }\n  }\n  return open.length === 0;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
