name: HumanEval_113_odd_count
language: js
prompt: "//Given a list of strings, where each string consists of only digits, return\
  \ a list.\n// Each element i of the output should be \"the number of odd elements\
  \ in the\n// string i of the input.\" where all the i's should be replaced by the\
  \ number\n// of odd digits in the i'th string of the input.\nfunction odd_count(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = odd_count;\n  assert.deepEqual(candidate([\"1234567\"]),[\"the number of odd\
  \ elements 4n the str4ng 4 of the 4nput.\"]);\n  assert.deepEqual(candidate([\"\
  3\", \"11111111\"]),[\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
  , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]);\n  assert.deepEqual(candidate([\"\
  271\", \"137\", \"314\"]),[\"the number of odd elements 2n the str2ng 2 of the 2nput.\"\
  , \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of\
  \ odd elements 2n the str2ng 2 of the 2nput.\"]);\n}\n\ntest();"
completions: ["  return lst.map( (str) => {\n    let count = 0;\n    for (var i =\
    \ 0; i < str.length; i++) {\n      if (str[i] % 2 === 1) {\n        count += 1;\n\
    \      }\n    }\n    return count;\n  });\n}\n", "  let odd_digit_total = 0;\n\
    \  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j\
    \ = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 1) {\n        odd_digit_total\
    \ += 1;\n      }\n    }\n    result.push(odd_digit_total);\n    odd_digit_total\
    \ = 0;\n  }\n  return result;\n}\n", "    return lst.map(function(n){\n      \
    \  var arr = n.split('');\n        var count = 0;\n        arr.forEach(function(num){\n\
    \            if(num % 2 !== 0){\n                count++;\n            }\n   \
    \     });\n        return count;\n    });\n}\n", "  return lst.map(function(i){\n\
    \    return i.split('').filter(function(a){\n      return a % 2 != 0\n    }).length\n\
    \  })\n}\n", "    let newLst = []\n    for(let i = 0; i < lst.length; i++){\n\
    \        newLst.push(odd_counter(lst[i]))\n    }\n    return newLst\n}", "   return\
    \ lst.map(x => x.split('').filter(y => y % 2 != 0).length);\n }\n ", "    return\
    \ lst.map(function(item){\n        return (item.match(/[13579]/g) || []).length;\n\
    \    });\n}\n", "    return lst.map(e => {\n        return e.toString().split('').filter(e\
    \ => Number(e) % 2 !== 0).length\n    })\n}\n", "    return lst.map(num => num.toString().split('').filter(digit\
    \ => parseInt(digit) % 2).length)\n}", "    return lst.map(function(v){\n    \
    \    return v.split('').filter(function(v){\n            return v % 2;\n     \
    \   }).length;\n    });\n}\n", "  let result = []\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    let counter = 0\n    for (let j = 0; j < lst[i].length; j++) {\n\
    \      if (lst[i][j] % 2 !== 0) {\n        counter += 1\n      }\n    }\n    result.push(counter)\n\
    \  }\n  return result\n}\n", "    const odds = lst.map(e => e.split('').filter(e\
    \ => e % 2 !== 0));\n    return odds.map(e => e.length);\n}", "    let arr = [];\n\
    \    let temp;\n    let count = 0;\n    for(let i = 0; i < lst.length; i++){\n\
    \        temp = lst[i].split('');\n        for(let j = 0; j < temp.length; j++){\n\
    \            if(temp[j] % 2 === 1){\n                count++;\n            }\n\
    \        }\n        arr.push(count);\n        count = 0;\n    }\n    return arr;\n\
    }", "  return lst.map(number =>\n    number.split('').reduce((acc, digit) => {\n\
    \      if (digit % 2 != 0) {\n        acc++;\n      }\n      return acc;\n   \
    \ }, 0)\n  );\n}\n", "  var result = [];\n  for (var i = 0; i < lst.length; i++)\
    \ {\n    result.push(countOdd(lst[i]));\n  }\n  return result;\n}\n", "    let\
    \ c = 0;\n    let i;\n    for(i=0; i<lst.length; i++){\n        for(j=0; j<lst[i].length;\
    \ j++){\n            if(lst[i][j]%2 != 0){\n                c++;\n           \
    \ }\n        }\n        lst[i] = c;\n        c = 0;\n    }\n    return lst;\n\
    }\n", "  return lst.map(function(n) {\n    return n.match(/[13579]/g).length;\n\
    \  });\n}", "    return lst.map(x => x.split('').reduce((a, b) => b % 2 !== 0\
    \ ? a + 1 : a, 0));\n}", "  return lst.map(x => x.split('').reduce((acc, curr)\
    \ => acc + (curr % 2), 0));\n}", "  let newList = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    let odd = 0;\n    let str = lst[i].toString().split('');\n    for\
    \ (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 1) {\n        odd\
    \ += 1;\n      }\n    }\n    newList.push(odd);\n  }\n  return newList;\n}\n",
  "    return lst.map(num => Math.floor(num.length / 2));\n}", "  return lst.map(function(v){\n\
    \    return v.split('').reduce(function(t,v){\n      return t + (v % 2)\n    },0)\n\
    \  })\n}\n", "    return lst.map(x => count_odd(x));\n}\n", "  return lst.map(function(el){\n\
    \    return el.split('').reduce(function(acc, curr){\n      return parseInt(curr)\
    \ % 2 === 1 ? acc + 1 : acc;\n    }, 0);\n  });\n}\n", "  let result = [];\n \
    \ for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    let num = lst[i].split('').map(Number);\n\
    \    for (let j = 0; j < num.length; j++) {\n      if (num[j] % 2 === 1) {\n \
    \       count++;\n      }\n    }\n    result.push(count);\n  }\n  return result;\n\
    }\n", "    const arr = lst.map(x => x.split('').map(y => parseInt(y)));\n    let\
    \ result = [];\n    for (let i = 0; i < arr.length; i++) {\n        let count\
    \ = 0;\n        for (let j = 0; j < arr[i].length; j++) {\n            if (arr[i][j]\
    \ % 2 !== 0) {\n                count++;\n            }\n        }\n        result.push(count);\n\
    \    }\n    return result;\n}\n", "  let res = lst.map(str => str.split('').filter(num\
    \ => num % 2 !== 0));\n  return res.map(arr => arr.length);\n}\n", "  return lst.map(x\
    \ => x.split('').filter(y => +y % 2).length);\n}\n", "  var count = 0;\n  var\
    \ result = [];\n  var odd = [];\n  for (var i = 0; i < lst.length; i++) {\n  \
    \  for (var j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 !== 0) {\n\
    \        count++;\n      }\n    }\n    result.push(count);\n    count = 0;\n \
    \ }\n  return result;\n}\n", "  // your code here\n  return lst.map(i => {\n \
    \   var arr = i.split('');\n    var count = 0;\n    arr.forEach(e => {\n     \
    \ if (e % 2 === 1) {\n        count++;\n      }\n    });\n    return count;\n\
    \  });\n}\n", "  let count = 0;\n  let result = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] %\
    \ 2 === 1) {\n        count++;\n      }\n    }\n    result.push(count);\n    count\
    \ = 0;\n  }\n  return result;\n}\n", "    return lst.map(el => el.split('').filter(digit\
    \ => digit % 2).length)\n}\n\n", "   return lst.map(x => x.filter(y => y % 2 !=\
    \ 0).length);\n}\n", "    let oddCount = 0;\n    let sumOfOdds = [];\n    for(let\
    \ i = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n\
    \            if(lst[i][j] % 2 === 1){\n                oddCount++;\n         \
    \   }\n        }\n        sumOfOdds.push(oddCount);\n        oddCount = 0;\n \
    \   }\n    return sumOfOdds;\n}\n", "\treturn lst.map(item => {\n\t\tlet oddCount\
    \ = 0;\n\t\tfor (let char of item) {\n\t\t\tif (char % 2 !== 0) {\n\t\t\t\toddCount++;\n\
    \t\t\t}\n\t\t}\n\t\treturn oddCount;\n\t});\n}\n", "  //your code here\n  let\
    \ count = 0;\n  let newLst = [];\n  for (i=0; i<lst.length; i++){\n    for (j=0;\
    \ j<lst[i].length; j++){\n      if (lst[i][j] % 2 !== 0){\n        count++;\n\
    \      }\n    }\n    newLst.push(count);\n    count = 0;\n  }\n  return newLst;\n\
    }\n", "  return lst.map(\n    (x) => x.split('').reduce(\n      (total,i) => i\
    \ % 2 !== 0 ? total + 1 : total, 0)\n    );\n}\n", "    return lst.map(x => x.split('').filter(i\
    \ => parseInt(i) % 2 != 0).length);\n}\n", "    let count = 0;\n    let arr =\
    \ [];\n    for(let i=0; i<lst.length; i++){\n        for(let j=0; j<lst[i].length;\
    \ j++){\n            if(lst[i][j]%2 == 1){\n                count++;\n       \
    \     }\n        }\n        arr.push(count);\n        count = 0;\n    }\n    return\
    \ arr;\n}", "    return lst.map(i => i.split('').filter(x => x % 2).length)\n\
    }\n", "  return lst.map(e => e.split('').filter(e => +e % 2).length)\n}", "  let\
    \ x = lst.map(num => num.toString().split(''))\n  let y = x.map(num => num.filter(num\
    \ => num % 2 != 0))\n  let ans = y.map(num => num.length)\n  return ans\n}", " \
    \ if (lst.length === 0) {\n    return 0;\n  } else {\n    var temp = lst.shift();\n\
    \    var counter = 0;\n    for (var i = 0; i < temp.length; i++) {\n      if (temp[i]\
    \ % 2 !== 0) {\n        counter++;\n      }\n    }\n    return [counter].concat(odd_count(lst));\n\
    \  }\n}\n", "  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n  \
    \  let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j]\
    \ % 2 === 1) {\n        count++;\n      }\n    }\n    result.push(count);\n  }\n\
    \  return result;\n}\n", "  return lst.map(str => str.split('').filter(num =>\
    \ num % 2 !== 0).length)\n}\n", "    return lst.map(x => x.split('').filter(x\
    \ => x % 2 !== 0).length)\n}", "    const oddNums = lst.map(num => {\n       \
    \ const nums = num.split('');\n        const numsOdd = nums.filter(num => num\
    \ % 2 !== 0);\n        return numsOdd.length;\n    });\n    return oddNums;\n\
    }\n", "    var output = [];\n    for (i = 0; i < lst.length; i++) {\n        var\
    \ count = 0;\n        for (j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ % 2 != 0) {\n                count += 1;\n            }\n        }\n       \
    \ output.push(count);\n    }\n    return output;\n}\n", "  return lst.map(str\
    \ => {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n     \
    \ if (str[i] % 2) count++\n    }\n    return count;\n  })\n}\n", "\tconst oddCount\
    \ = lst.map(str => {\n\t\tlet odd = 0;\n\t\tfor (let i = 0; i < str.length; i++)\
    \ {\n\t\t\tif (parseInt(str[i]) % 2 !== 0) {\n\t\t\t\todd++;\n\t\t\t}\n\t\t}\n\
    \t\treturn odd;\n\t});\n\treturn oddCount;\n}\n\nodd_count([\"123123\",\"123123\"\
    ,\"123123\"]);\n", "  var odds = [];\n  for (var i = 0; i < lst.length; i++) {\n\
    \    odds.push(odd_digits(lst[i]));\n  }\n  return odds;\n}\n", "    return lst.map(x\
    \ => x.replace(/[0-9]/g, '').length);\n}\n", "  let odd = 0;\n  let oddArray =\
    \ [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length;\
    \ j++) {\n      if (lst[i][j] % 2 !== 0) {\n        odd++;\n      }\n    }\n \
    \   oddArray.push(odd);\n    odd = 0;\n  }\n  return oddArray;\n}", "    return\
    \ lst.map(function(i){\n        return i.split('').reduce(function(total, j){\n\
    \            return parseInt(j) % 2 === 1 ? total + 1 : total;\n        }, 0);\n\
    \    });\n}", "  let count = 0;\n  let result = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] %\
    \ 2 !== 0) {\n        count++;\n      }\n    }\n    result.push(count);\n    count\
    \ = 0;\n  }\n  return result;\n}\n", "\treturn lst.map(a => a.split('').filter(b\
    \ => +b % 2).length);\n}\n", "  return lst.map( e => e.split('').filter(e => e\
    \ % 2 === 1).length)\n}\n", "    return lst.map(v => v.split('').filter(n => n\
    \ % 2).length);\n}", "  return lst.map(x => x.split('').filter(num => num % 2\
    \ != 0).length)\n}\n", "    let sum = []\n    for(let i = 0; i < lst.length; i++){\n\
    \        sum.push(lst[i].split('').filter(e => e % 2 === 1).length)\n    }\n \
    \   return sum\n}\n", "    return lst.map(x => x.split('').filter(y => y % 2 !==\
    \ 0).length)\n}", "  var newArr = [];\n  for (var i = 0; i < lst.length; i++)\
    \ {\n    var oddNums = 0;\n    for (var j = 0; j < lst[i].length; j++) {\n   \
    \   if (lst[i][j] % 2 != 0) {\n        oddNums++;\n      }\n    }\n    newArr.push(oddNums);\n\
    \  }\n  return newArr;\n}", "  let odd = 0;\n  for (var i = 0; i < lst.length;\
    \ i++) {\n    let count = lst[i].split('').map(Number);\n    count.forEach(function(nums)\
    \ {\n      if (nums % 2 === 1) {\n        odd++;\n      }\n    });\n    lst[i]\
    \ = odd;\n    odd = 0;\n  }\n  return lst;\n}\n", "  return lst.map(str => str.replace(/[02468]/g,\
    \ '').length);\n}", "  let result = [];\n  for (let i = 0; i < lst.length; i++){\n\
    \    let oddCount = 0;\n    for (let j = 0; j < lst[i].length; j++){\n      if\
    \ (lst[i][j] % 2 !== 0){\n        oddCount++;\n      }\n    }\n    result.push(oddCount);\n\
    \  }\n  return result;\n}\n", "    return lst.map(n => [...n].filter(n => Number(n)\
    \ % 2).length)\n}", "  var nums = lst.map(function(x){return x.length});\n  var\
    \ odds = nums.map(function(x){\n    return x.filter(function(y){\n      return\
    \ y % 2 == 1;\n    });\n  });\n  var y = odds.map(function(x){return x.length});\n\
    \  return y;\n}\n", "  //your code here\n  return lst.map(x => x.replace(/[^13579]/g,\
    \ '').length);\n}\n", "  let result = 0;\n  for (let i = 0; i < lst.length; i++){\n\
    \    for (let j = 0; j < lst[i].length; j++){\n      if (parseInt(lst[i][j]) %\
    \ 2 === 1){\n        result++;\n      }\n    }\n  }\n  return result;\n}\n", " \
    \   let arr = []\n    for(let i=0; i<lst.length; i++){\n        arr.push(lst[i].length\
    \ - lst[i].split('').filter(e=> e%2===0).length)\n    }\n    return arr\n}", " \
    \ var count = 0;\n  var lst2 = lst.map(function(x){\n    for(var i = 0; i < x.length;\
    \ i++){\n      if(x[i] % 2 != 0){\n        count++;\n      }\n    }\n    return\
    \ count;\n  });\n  return lst2;\n}\n", "    let newList = [];\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        let counter = 0;\n        for (let j =\
    \ 0; j < lst[i].length; j++) {\n            if (lst[i][j] % 2 != 0) {\n      \
    \          counter++;\n            }\n        }\n        newList.push(counter);\n\
    \    }\n    return newList;\n}\n\nodd_count([\"12345\",\"654321\",\"21345654321\"\
    ]); // [3,4,11]\nodd_count([\"111111\",\"222222\",\"333333\",\"444444\",\"555555\"\
    ,\"666666\",\"777777\",\"888888\",\"999999\"]); // [5,5,5,5,5,5,5,5,5]\nodd_count([\"\
    284319\",\"31111\",\"332345\",\"8468\",\"826347\",\"7423\",\"955\",\"59559\",\"\
    834\",\"826348\"]); // [5,3,6,3,6,3,1,1,1,6]\n", "    return lst.map(function(v){\n\
    \        return v.split('').filter(function(v){\n            return v % 2 ===\
    \ 1;\n        }).length;\n    });\n}\n", "  let newArr = [];\n  for (let i = 0;\
    \ i < lst.length; i++){\n    let count = 0;\n    for (let j = 0; j < lst[i].length;\
    \ j++){\n      if (lst[i][j] % 2 !== 0){\n        count++;\n      }\n    }\n \
    \   newArr.push(count);\n  }\n  return newArr;\n}\n", "  let count = 0;\n  return\
    \ lst.map(string => {\n    count = 0;\n    string.split('').forEach(char => {\n\
    \      if (parseInt(char) % 2 !== 0) {\n        count++;\n      }\n    });\n \
    \   return count;\n  });\n}", "  return lst.map(function(el){\n    var count =\
    \ 0;\n    for (var i = 0; i < el.length; i++) {\n      if(el[i] % 2 !== 0){\n\
    \        count++;\n      }\n    }\n    return count;\n  });\n}\n", "    return\
    \ lst.map(x => {\n        var odds = 0;\n        for (var i = 0; i < x.length;\
    \ i++) {\n            if (x[i] % 2 !== 0) {\n                odds++;\n       \
    \     }\n        }\n        return odds;\n    });\n}\n", "  return lst.map(x =>\
    \ x.split('').filter(x => x % 2 !== 0).length)\n}\n", "  return lst.map(x => x.split('').filter(y\
    \ => y % 2 !== 0).length);\n}\n", "    return lst.map(function(val){\n       \
    \ var count = 0;\n        for(var i = 0; i < val.length; i++){\n            if(val[i]\
    \ % 2 === 1){\n                count++;\n            }\n        }\n        return\
    \ count;\n    });\n}\n", "    let result = []\n    for(let i = 0; i < lst.length;\
    \ i++){\n        let number = 0\n        for(let j = 0; j < lst[i].length; j++){\n\
    \            if(lst[i][j] % 2 !== 0){\n                number++\n            }\n\
    \        }\n        result.push(number)\n    }\n    return result\n}", "  return\
    \ lst.map(v => {\n    return [...v].filter(v => v % 2 === 1).length;\n  });\n\
    }\n", "    return lst.map(s => s.split('').filter(n => n % 2 !== 0).length);\n\
    }", "  return lst.map(function(val){\n    return val.replace(/[^13579]/g,'').length;\n\
    \  });\n}\n", "  return lst.map(function(string) {\n    return Math.floor(string.split('').filter(function(value)\
    \ {\n      return value % 2 !== 0;\n    }).length);\n  });\n}\n", "  return lst.map(function(str){\n\
    \    var odd_count = 0;\n    for (var i = 0; i < str.length; i++) {\n      if\
    \ (str[i] % 2 !== 0) {\n        odd_count++;\n      }\n    }\n    return odd_count;\n\
    \  });\n}\n", "  let count = [];\n  lst.forEach(e => {\n    e = e.split('').map(e\
    \ => Number(e));\n    count.push(e.filter(e => e % 2 !== 0).length);\n  });\n\
    \  return count;\n}", "    return lst.map(e => e.replace(/[02468]/g, '').length);\n\
    \  }\n", "  return lst.map(function(number){\n    var odd_count = 0;\n    for\
    \ (var i = 0; i < number.length; i++) {\n      if (parseInt(number[i]) % 2 !==\
    \ 0) {\n        odd_count += 1;\n      }\n    }\n    return odd_count;\n  });\n\
    }\n", "  return lst.map(function(num) {\n    num = num.toString();\n    var counter\
    \ = 0;\n    for (var i = 0; i < num.length; i++) {\n      if (num[i] % 2 != 0)\
    \ {\n        counter++;\n      }\n    }\n    return counter;\n  });\n}\n", " \
    \  return lst.map(function(elem){\n    return elem.split('').reduce(function(acc,\
    \ elem){\n      return acc + elem % 2;\n    }, 0);\n  });\n}\n", "  let count\
    \ = 0;\n  let oddElements = [];\n  lst.forEach(element => {\n    let stringElements\
    \ = element.split('');\n    stringElements.forEach(elem => {\n      if (elem %\
    \ 2 === 1) {\n        count += 1;\n      }\n    });\n    oddElements.push(count);\n\
    \    count = 0;\n  });\n  return oddElements;\n}\n", "  var lstOdd = []\n  lst.forEach(function(element)\
    \ {\n    var number = element.toString()\n    var oddNumber = []\n    number.split('').forEach(function(element){\n\
    \      if (parseInt(element) % 2 !== 0) {\n        oddNumber.push(element)\n \
    \     }\n    })\n    lstOdd.push(oddNumber.length)\n  })\n  return lstOdd\n}\n\
    \nodd_count([11,21,31,41,51,61,71,81,91,101])", "    return lst.map(x => odd_count_in_string(x))\n\
    }\n", "  let newArray = []\n  lst.forEach(function(i){\n    if(i % 2 === 1){\n\
    \      newArray.push(i)\n    }\n  })\n  return newArray.length\n}\n\n", "  return\
    \ lst.map(x => odd(x))\n}\n", "    return lst.map(x => x.split('').filter(y =>\
    \ y % 2 != 0).length);\n}\n", "  return lst.map(function(num){\n    var str =\
    \ num.toString();\n    var length = str.length;\n    var count = 0;\n    for(var\
    \ i = 0; i < length; i++){\n      if (str[i] % 2 !== 0){\n        count += 1;\n\
    \      }\n    }\n    return count;\n  });\n}\n", "  return lst.map(n => {\n  \
    \  const digits = n.split('')\n    const odds = digits.filter(d => parseInt(d)\
    \ % 2 !== 0)\n    return odds.length\n  })\n}\n", "    return lst.map(function(val){\n\
    \        var result = 0;\n        val.split('').forEach(function(n){\n       \
    \     if (parseInt(n) % 2 === 1) {\n                result++;\n            }\n\
    \        });\n        return result;\n    });\n}\n", "  return lst.map(e => e.split('').filter(e\
    \ => Number(e) % 2).length)\n}\n", "  let sum = 0;\n  let output = [];\n  for\
    \ (let i = 0; i < lst.length; i++){\n    for (let x = 0; x < lst[i].length; x++){\n\
    \      if (lst[i][x] % 2 != 0){\n        sum++;\n      }\n    }\n    output.push(sum);\n\
    \    sum = 0;\n  }\n  return output;\n}", "  return lst.map(n => n.split('').reduce((p,c)\
    \ => p + c%2, 0));\n}\n", "  var result = [];\n  for (var i = 0; i < lst.length;\
    \ i++) {\n    var n = 0;\n    for (var j = 0; j < lst[i].length; j++) {\n    \
    \  if(lst[i][j] % 2 != 0) {\n        n++;\n      }\n    }\n    result.push(n);\n\
    \  }\n  return result;\n}\n", "  var result = [];\n  for (var i = 0; i < lst.length;\
    \ i++) {\n    var count = 0;\n    for (var j = 0; j < lst[i].length; j++) {\n\
    \      if (lst[i][j] % 2 !== 0) {\n        count++;\n      }\n    }\n    result.push(count);\n\
    \  }\n  return result;\n}\n", "  return lst.map(x => x.replace(/[^13579]/g, '').length);\n\
    }\n", "  return lst.map(function(x){\n    var count = 0;\n    for (var i = 0;\
    \ i < x.length; i++) {\n      if (x[i] % 2 !== 0) {\n        count += 1;\n   \
    \   }\n    }\n    return count;\n  });\n}", "    let result = []\n    for(let\
    \ i = 0; i < lst.length; i++){\n        let num = lst[i]\n        let counter\
    \ = 0\n        for(let j = 0; j < num.length; j++){\n            if(parseInt(num[j])\
    \ % 2 != 0){\n                counter++\n            }\n        }\n        result.push(counter)\n\
    \    }\n    return result\n}\nlet result = odd_count([\"1\",\"2\",\"3\",\"4\"\
    ,\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"])", "  return lst.map(string => [...string].filter(num\
    \ => num % 2 !== 0).length)\n}\n", "  let count = 0;\n  return lst.map(num =>\
    \ {\n    count = 0;\n    for (var i = 0; i < num.length; i++) {\n      if (num[i]\
    \ % 2 === 1) {\n        count++;\n      }\n    }\n    return count;\n  });\n}\n",
  "  return lst.map(function(el){\n    return el.split('').filter(function(digit){\n\
    \      return parseInt(digit) % 2 !== 0;\n    }).length;\n  });\n}\n", "    let\
    \ count = 0;\n    return lst.map(x => {\n        for (let i = 0; i < x.length;\
    \ i++) {\n            if (parseInt(x[i]) % 2 !== 0) count++;\n        }\n    \
    \    return count;\n    });\n}\n", "  return lst.map( (a) => (a.split('').filter(\
    \ (e) => (e%2 != 0)).length));\n}", "    return lst.map(arr => arr.filter(elem\
    \ => elem % 2 !== 0).length)\n}\n", "  return lst.map(function(e){\n    var count\
    \ = 0;\n    for(var i = 0; i < e.length; i++){\n      if(parseInt(e[i]) % 2 !=\
    \ 0){\n        count++;\n      }\n    }\n    return count;\n  });\n}", "    let\
    \ result = [];\n    for (let num of lst) {\n        let odd = 0;\n        for\
    \ (let digit of num) {\n            digit = parseInt(digit);\n            if (digit\
    \ % 2 != 0) {\n                odd++;\n            }\n        }\n        result.push(odd);\n\
    \    }\n    return result;\n}\n", "  var count = 0;\n  var result = [];\n  for\
    \ (var i = 0; i < lst.length; i++) {\n    for (var j = 0; j < lst[i].length; j++)\
    \ {\n      if (lst[i][j] % 2 !== 0) {\n        count++;\n      }\n    }\n    result.push(count);\n\
    \    count = 0;\n  }\n  return result;\n}\n", "  var arr = [];\n  for (var i =\
    \ 0; i < lst.length; i++) {\n    var num = lst[i];\n    num = num.split('');\n\
    \    var count = 0;\n    for (var j = 0; j < num.length; j++) {\n      if (num[j]\
    \ % 2 != 0) {\n        count++;\n      }\n    }\n    arr.push(count);\n  }\n \
    \ return arr;\n}", "  return lst.map(x => x.split('').filter(y => parseInt(y)\
    \ % 2 === 1).length);\n}\n", "    var odds = 0;\n    lst.forEach(function(value){\n\
    \        for(var i = 0; i < value.length; i++){\n            if(parseInt(value[i])\
    \ % 2 === 1){\n                odds++;\n            }\n        }\n    });\n  \
    \  return odds;\n}\n", "\treturn lst.map(function(e){\n\t\treturn e.split('').filter(function(e){\n\
    \t\t\treturn (e % 2 != 0);\n\t\t}).length;\n\t});\n}\n", "  return lst.map(function(n){\n\
    \    var count = 0;\n    for (var i = 0; i < n.length; i++) {\n      if (n[i]\
    \ % 2 === 1) {\n        count++;\n      }\n    }\n    return count;\n  });\n}\n",
  "  var result = [];\n  var count = 0;\n  for (var i = 0; i < lst.length; i++) {\n\
    \    for (var j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 1)\
    \ {\n        count++;\n      }\n    }\n    result.push(count);\n    count = 0;\n\
    \  }\n  return result;\n}\n", "  var countArr = [];\n  lst.forEach(function(item){\n\
    \    countArr.push(item.split('').reduce(function(oddSum, number){\n      if(number\
    \ % 2 !== 0){\n        oddSum ++;\n      }\n      return oddSum;\n    }, 0));\n\
    \  });\n  return countArr;\n}\n", "  return lst.map(ele => ele.split('').reduce((sum,\
    \ cur) => {\n    if (cur % 2 !== 0) {\n      return sum + 1;\n    } else {\n \
    \     return sum;\n    }\n  }, 0));\n}\n", "    return lst.map(el => {\n     \
    \ return el.toString().split('').filter(el => el % 2 === 1).length\n    })\n \
    \ }\n  console.log(odd_count(['1','2','3']))\n  // 2\n  console.log(odd_count(['2','3','4']))\n\
    \  // 1\n  console.log(odd_count(['123','12345','1234567']))\n  // 0\n  console.log(odd_count(['123','12345','1234567','12345678']))\n\
    \  // 2", "    const countOfOddDigits = lst.map(str => str.split('').reduce((sum,\
    \ current) => {\n        if (Number(current) % 2 !== 0) {\n            sum++;\n\
    \        }\n        return sum;\n    }, 0));\n    return countOfOddDigits;\n}\n",
  "  //your code here\n  return lst.map(s => s.split('').filter(s => s % 2 != 0).length);\n\
    }", "  return lst.map(s => s.split('').reduce((a,v) => {\n    if (v % 2 == 1)\
    \ a++;\n    return a;\n  }, 0));\n}", "  return lst.map(x => {\n    let count\
    \ = 0;\n    for (var i = 0; i < x.length; i++) {\n      if (x[i] % 2 !== 0) {\n\
    \        count++;\n      }\n    }\n    return count;\n  });\n}\n", "  return lst.map(x\
    \ => x.split('').reduce((a,b) => {\n    if(b % 2 !== 0) a += 1;\n    return a;\n\
    \  }, 0));\n}\n", "    return lst.map(function(n){\n        var odd_number_count\
    \ = 0;\n        n.split('').forEach(function(e){\n            if (parseInt(e)\
    \ % 2 !== 0) {\n                odd_number_count++;\n            }\n        });\n\
    \        return odd_number_count;\n    });\n}\n", "    let ret = [];\n    for\
    \ (i = 0; i < lst.length; i++) {\n        ret.push(count_odd(lst[i]));\n    }\n\
    \    return ret;\n}\n", "    return lst.map(el => Math.floor(el.split('').filter(el\
    \ => el % 2 !== 0).length / 2));\n}\n", "  return lst.map(function(s){\n    return\
    \ s.split('').reduce(function(acc, d){\n      if(d % 2 !== 0){\n        acc +=\
    \ 1;\n      }\n      return acc;\n    }, 0);\n  });\n}\n", "    //var arr = [];\n\
    \    //for (let i = 0; i < lst.length; i++) {\n    //    let count = 0;\n    //\
    \    for (let j = 0; j < lst[i].length; j++) {\n    //        if(lst[i][j] % 2\
    \ !== 0) count++;\n    //    }\n    //    arr.push(count);\n    //}\n    //return\
    \ arr;\n    return lst.map(a => a.split('').filter(b => b % 2).length);\n}\n",
  "  return lst.map(x => x.split('').filter(y => y % 2 != 0).length);\n}\n", "   \
    \ let newArray = [];\n    let counter = 0;\n    lst.forEach(function(value){\n\
    \        for(let i = 0; i < value.length; i++){\n            if (parseInt(value[i])\
    \ % 2 !== 0){\n                counter++;\n            }\n        }\n        newArray.push(counter);\n\
    \        counter = 0;\n    });\n    return newArray;\n}\n", "  return lst.map(x\
    \ => x.split('').filter(digit => digit % 2 === 1).length);\n}\n", "  return lst.map(i\
    \ => Array.from(i).filter(j => parseInt(j) % 2 !== 0).length);\n}", "    return\
    \ lst.map(function(n){\n        return n.split('').filter(function(v){\n     \
    \       return parseInt(v) % 2 !== 0;\n        }).length;\n    });\n}\n", "  return\
    \ lst.map(str => str.split('').filter(num => num % 2 !== 0).length)\n}\n", " \
    \ //create a variable that is equal to the length of the list\n  var len = lst.length;\n\
    \  //create a variable that is equal to an empty list\n  var answer = [];\n  //iterate\
    \ over the list\n  for (var i = 0; i < len; i++) {\n    //and then iterate over\
    \ the elements in the list\n    var str = lst[i].toString();\n    var count =\
    \ 0;\n    for (var j = 0; j < str.length; j++) {\n      //check if the string\
    \ character is odd\n      if (parseInt(str[j]) % 2 === 1) {\n        //if so,\
    \ add to the count\n        count += 1;\n      }\n    }\n    //push the count\
    \ to the empty list\n    answer.push(count);\n  }\n  //return the list\n  return\
    \ answer;\n}", "  //your code here\n  let odds = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    odds.push(lst[i].split('').reduce((acc,val) => {\n      if (val\
    \ % 2 !== 0) {\n        acc++\n      }\n      return acc;\n    },0))\n  }\n  return\
    \ odds;\n}\n", "  return lst.map(function(s){\n    return s.split('').filter(function(v){return\
    \ (v%2) == 1;}).length;\n  });\n}\n", "  return lst.map(function(element){\n \
    \   return element.match(/[13579]/g).length;\n  });\n}", "    return lst.map(function(e){\n\
    \        var count = 0;\n        e.split('').forEach(function(e){\n          \
    \  count += (parseInt(e) % 2 === 1) ? 1 : 0;\n        });\n        return count;\n\
    \    });\n}\n", "    return lst.map(x => x.split('').filter(x => x % 2 === 1).length);\n\
    }\n", "    return lst.map(function(element){\n        return element.split('').filter(function(element){\n\
    \            return parseInt(element) % 2 === 1\n        }).length\n    })\n}\n",
  "    return lst.map(x => x.split('').filter(y => y % 2 != 0).length);\n}\n", "let\
    \ oddCount = 0;\nlet oddArray = [];\n  for (let i = 0; i < lst.length; i++){\n\
    \    for (let j = 0; j < lst[i].length; j++){\n      if (lst[i][j] % 2 === 1){\n\
    \        oddCount++;\n      }\n    }\n    oddArray.push(oddCount);\n    oddCount\
    \ = 0;\n  }\n  return oddArray;\n}\n", "  return lst.map(function(str){\n    return\
    \ str.split('').filter(function(n){\n      return n % 2 !== 0;\n    }).length;\n\
    \  });\n}\n", "  var cnt = 0;\n  for (i=0; i<lst.length; i++){\n    for (j=0;\
    \ j<lst[i].length; j++){\n      if (parseInt(lst[i][j]) % 2 != 0){\n        cnt++;\n\
    \      }\n    }\n    lst[i] = cnt;\n    cnt = 0;\n  }\n  return lst;\n}\n", " \
    \   var output = []\n    for (var i = 0; i < lst.length; i++){\n        var oddCounter\
    \ = 0\n        for (var j = 0; j < lst[i].length; j++){\n            if (parseInt(lst[i][j])\
    \ % 2 !== 0){\n                oddCounter++\n            }\n        }\n      \
    \  output.push(oddCounter)\n    }\n    return output\n}", "  return lst.map(x\
    \ => x.split('').filter(y => y % 2 != 0).length);\n}\n", "  let odd = []\n  for(let\
    \ i = 0; i < lst.length; i++){\n    odd.push(countOdd(lst[i]))\n  }\n  return\
    \ odd\n}\n", "    var result = [];\n    var count = 0;\n    for(var i = 0; i <\
    \ lst.length; i++){\n        for(var j = 0; j < lst[i].length; j++){\n       \
    \     if(lst[i][j] % 2 !== 0){\n                count++;\n            }\n    \
    \    }\n        result.push(count);\n        count = 0;\n    }\n    return result;\n\
    }\n\n\n", "  var odd_count = 0;\n  var new_list = [];\n  for (var i = 0; i < lst.length;\
    \ i++) {\n    var s = lst[i];\n    for (var j = 0; j < s.length; j++) {\n    \
    \  if (parseInt(s[j]) % 2 !== 0) {\n        odd_count += 1;\n      }\n    }\n\
    \    new_list.push(odd_count);\n    odd_count = 0;\n  }\n  return new_list;\n}",
  "  return lst.map(a => a.replace(/[0|2|4|6|8]/g, '').length);\n}\n", "  return lst.map(x\
    \ => x.replace(/[^13579]/g, '').length);\n}", "    return lst.map(n => [...n].reduce((acc,\
    \ e) => acc + parseInt(e) % 2, 0))\n}\n", "    var count = 0;\n    for(var i =\
    \ 0; i < lst.length; i++){\n        for(var x = 0; x < lst[i].length; x++){\n\
    \            if(lst[i][x] % 2 !== 0){\n                count++;\n            }\n\
    \        }\n        lst[i] = count;\n        count = 0;\n    }\n    return lst;\n\
    }\n", "  return lst.map(function(x){return x.split('').filter(function(x){return\
    \ x%2 != 0}).length})\n}\n", "  return lst.map(function(val){\n    let oddCount\
    \ = 0;\n    for(let i = 0; i < val.length; i++){\n      if(Number(val[i]) % 2\
    \ === 1){\n        oddCount++;\n      }\n    }\n    return oddCount;\n  });\n\
    }\n", "  return lst.map(num => {\n    const nums = num.split('')\n    let odds\
    \ = 0\n    nums.forEach(num => {\n      if (num % 2 === 1) {\n        odds++\n\
    \      }\n    })\n    return odds\n  })\n}", "    return lst.map(x => x.split('').filter(y\
    \ => y % 2 != 0).length);\n}\n", "  let output = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n\
    \      if (parseInt(lst[i][j]) % 2 !== 0) {\n        count += 1;\n      }\n  \
    \  }\n    output.push(count);\n  }\n  return output;\n}\n", "    const result\
    \ = [];\n    for (let str of lst) {\n        let count = 0;\n        for (let\
    \ char of str) {\n            if (parseInt(char) % 2 !== 0) {\n              \
    \  count++;\n            }\n        }\n        result.push(count);\n    }\n  \
    \  return result;\n}\n", "  // your code here\n  return lst.map(function(e){\n\
    \    return e.split('').filter(function(num){\n      return num % 2 === 1;\n \
    \   }).length;\n  });\n}\n", "  let odd = 0;\n  let nums = [];\n  let result =\
    \ [];\n  for(let str of lst){\n    nums.push(str.split(''));\n  }\n  for(let arr\
    \ of nums){\n    for(let num of arr){\n      if(num % 2 != 0){\n        odd++;\n\
    \      }\n    }\n    result.push(odd);\n    odd = 0;\n  }\n  return result;\n\
    }\n", "  // your code here\n  return lst.map(el => (el.split('').filter(x => x\
    \ % 2 === 1).length));\n}\n", "  let result = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    let counter = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n\
    \      if (parseInt(lst[i][j]) % 2 !== 0) {\n        counter++;\n      }\n   \
    \ }\n    result.push(counter);\n  }\n  return result;\n}", "  //your code here\n\
    }\n", "  return lst.map(function(v){\n      var c = 0;\n      for (var i=0; i<v.length;\
    \ i++) {\n          if (v[i] % 2 == 1) c++;\n      }\n      return c;\n  });\n\
    }\n", "    let string = lst;\n    let count = 0;\n    string.forEach(function(number){\n\
    \        let eachnumber = parseInt(number);\n        if(eachnumber % 2 !== 0){\n\
    \            count++\n        }\n    })\n    return count;\n}", "  return lst.map(x\
    \ => {\n    let counter = 0;\n    for (let num of x) {\n      if (num % 2 != 0)\
    \ {\n        counter += 1;\n      }\n    }\n    return counter;\n  });\n}\n",
  "    return lst.map(s => s.split('').filter(c => c % 2 === 1).length);\n}\n", " \
    \ var count = 0;\n  var str;\n  for(var i = 0; i < lst.length; i++){\n    str\
    \ = lst[i].toString();\n    for(var j = 0; j < str.length; j++){\n      if(str[j]\
    \ % 2 != 0){\n        count++;\n      }\n    }\n    lst[i] = count;\n    count\
    \ = 0;\n  }\n  return lst;\n}\n", "  return lst.map(num => num.toString().split('').filter(n\
    \ => parseInt(n) % 2 !== 0).length)\n}\n", "    let count = 0;\n    for(let i\
    \ = 0; i < lst.length; i++){\n        for(let j = 0; j < lst[i].length; j++){\n\
    \            if(lst[i][j] % 2 !== 0){\n                count++;\n            }\n\
    \        }\n        lst[i] = count;\n        count = 0;\n    }\n    return lst;\n\
    }\n", "    return lst.map(a => (a.match(/[13579]/g) || []).length);\n}", "  return\
    \ lst.map(a => a.split('').filter(b => b % 2).length);\n}\n", "  return lst.map(n=>n.split('').filter(x=>x%2===1).length)\n\
    }\n", "  return lst.map(i => i.split('').reduce((a, b) => +b % 2 === 1 ? a + 1\
    \ : a, 0))\n}\n", "  let new_arr = []\n  for(let i = 0; i < lst.length; i++){\n\
    \    let num = lst[i].split('').map(x => parseInt(x))\n    let count = 0\n   \
    \ for(let j = 0; j < num.length; j++){\n      if(num[j] % 2 !== 0){\n        count++\n\
    \      }\n    }\n    new_arr.push(count)\n  }\n  return new_arr\n}", "    return\
    \ lst.map(num => num.split('').filter(char => parseInt(char) % 2 === 1).length)\n\
    }\n", "  return lst.map(number => {\n    let sum = 0;\n    for (let i = 0; i <\
    \ number.length; i++) {\n      if (number[i] % 2 === 1) {\n        sum += 1;\n\
    \      }\n    }\n    return sum;\n  });\n}", "  return lst.map(function(n) {\n\
    \    var count = 0;\n    for (var i = 0; i < n.length; i++) {\n      if (parseInt(n[i])\
    \ % 2 !== 0) {\n        count++;\n      }\n    }\n    return count;\n  });\n}\n",
  "  return lst.map(function(x){return x.split('').filter(function(x){return x%2==1}).length})\n\
    }\n", "  var odd = 0;\n  var odd_count = [];\n  for (var i = 0; i < lst.length;\
    \ i++) {\n    for (var j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] %\
    \ 2 !== 0) {\n        odd++;\n      }\n    }\n    odd_count.push(odd);\n    odd\
    \ = 0;\n  }\n  return odd_count;\n}\n\nodd_count([\"1\",\"55\",\"87\",\"42\",\"\
    33\",\"21\",\"55\",\"58\",\"33\",\"92\",\"85\",\"91\",\"55\",\"88\",\"15\",\"\
    10\",\"46\",\"66\",\"59\",\"31\",\"8\",\"99\",\"56\",\"30\",\"74\",\"57\",\"4\"\
    ,\"95\",\"8\",\"61\",\"84\",\"71\",\"74\",\"65\",\"13\",\"71\",\"56\",\"71\",\"\
    19\",\"80\",\"80\",\"75\",\"11\",\"52\",\"89\",\"12\",\"40\",\"35\",\"58\",\"\
    79\",\"66\",\"19\",\"81\",\"79\",\"18\",\"22\",\"30\",\"79\",\"44\",\"22\",\"\
    74\",\"63\",\"39\",\"78\",\"32\",\"21\",\"7\",\"85\",\"63\",\"32\",\"13\",\"81\"\
    ,\"11\",\"85\",\"72\",\"44\",\"77\",\"81\",\"7\",\"23\",\"51\",\"62\",\"75\",\"\
    5\",\"62\",\"66\",\"26\",\"40\",\"34\",\"52\",\"64\",\"20\",\"81\",\"56\",\"26\"\
    ,\"45\",\"41\",\"27\",\"21\",\"51\",\"60\",\"69\",\"13\",\"6\",\"61\",\"6\",\"\
    38\",\"28\",\"65\",\"74\",\"41\",\"45\",\"68\",\"74\",\"46\",\"10\",\"56\",\"\
    48\",\"51\",\"18\",\"72\",\"29\",\"59\",\"60\",\"41\",\"47\",\"76\",\"43\",\"\
    8\",\"19\",\"81\",\"55\",\"14\",\"10\",\"87\",\"37\",\"8\",\"90\",\"3\",\"80\"\
    ,\"32\",\"82\",\"37\",\"31\",\"19\",\"96\",\"86\",\"58\",\"35\",\"66\",\"82\"\
    ,\"31\",\"8\",\"86\",\"53\",\"53\",\"72\",\"39\",\"59\",\"71\",\"65\",\"71\",\"\
    63\",\"47\",\"50\",\"71\",\"13\",\"40\",\"89\",\"15\",\"52\",\"57\",\"58\",\"\
    75\",\"72\",\"17\",\"69\",\"79\",\"76\",\"35\",\"70\",\"79\",\"23\",\"22\",\"\
    67\",\"48\",\"11\",\"82\",\"30\",\"58\",\"57\",\"61\",\"71\",\"70\",\"71\",\"\
    75\",\"47\",\"", "   let newList = [];\n    lst.forEach(element => {\n       \
    \ let arr = element.split('');\n        let counter = 0;\n        arr.forEach(number\
    \ => {\n            if(number % 2 !== 0){\n                counter++;\n      \
    \      }\n        });\n        newList.push(counter);\n    });\n    return newList;\n\
    }\n", "    let arr = []\n    for(let i=0; i<lst.length; i++){\n        let sum\
    \ = 0\n        for(let j=0; j<lst[i].length; j++){\n            if(lst[i][j] %\
    \ 2 != 0){\n                sum++\n            }\n        }\n        arr.push(sum)\n\
    \    }\n    return arr\n}\n", "  return lst.map(x => x.match(/[13579]/g).length);\n\
    }", "    return lst.map(el=>el.split('').filter(e=>parseInt(e)%2===1).length)\n\
    }\n", "  //your code here\n  let new_arr = []\n  for(let i = 0; i < lst.length;\
    \ i++){\n    let odd = 0\n    for(let j = 0; j < lst[i].length; j++){\n      if(lst[i][j]\
    \ % 2 != 0){\n        odd += 1\n      }\n    }\n    new_arr.push(odd)\n  }\n \
    \ return new_arr\n}\n", "    let count = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        let temp = 0;\n        for (let j = 0; j < lst[i].length; j++)\
    \ {\n            if (lst[i][j] % 2 !== 0) {\n                temp += 1;\n    \
    \        }\n        }\n        count.push(temp);\n    }\n    return count;\n}\n",
  "  return lst.map(x => x.replace(/[^13579]/g, '').length);\n}", "    let count =\
    \ 0;\n    let arr = [];\n    for(let i = 0; i < lst.length; i++){\n        for(let\
    \ j = 0; j < lst[i].length; j++){\n            if(parseInt(lst[i][j]) % 2 !==\
    \ 0){\n                count++\n            }\n        }\n        arr.push(count);\n\
    \        count = 0;\n    }\n    return arr;\n}\n", "  return lst.map(elem =>{\n\
    \      return elem.split('').filter(digit => parseInt(digit) % 2 === 1).length\n\
    \  })\n}\n", "  var odd = [];\n  for (var i = 0; i < lst.length; i++) {\n    var\
    \ count = 0;\n    for (var j = 0; j < lst[i].length; j++) {\n      if (lst[i][j]\
    \ % 2 === 1) {\n        count++;\n      }\n    }\n    odd.push(count);\n  }\n\
    \  return odd;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
