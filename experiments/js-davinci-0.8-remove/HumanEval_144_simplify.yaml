name: HumanEval_144_simplify
language: js
prompt: "//Your task is to implement a function that will simplify the expression\n\
  // x * n. The function returns True if x * n evaluates to a whole number and False\n\
  // otherwise. Both x and n, are string representation of a fraction, and have the\
  \ following format,\n// <numerator>/<denominator> where both numerator and denominator\
  \ are positive whole numbers.\n// You can assume that x, and n are valid fractions,\
  \ and do not have zero as denominator.\nfunction simplify(x, n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = simplify;\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n  assert.deepEqual(candidate(\"\
  1/6\", \"2/1\"),false);\n  assert.deepEqual(candidate(\"5/1\", \"3/1\"),true);\n\
  \  assert.deepEqual(candidate(\"7/10\", \"10/2\"),false);\n  assert.deepEqual(candidate(\"\
  2/10\", \"50/10\"),true);\n  assert.deepEqual(candidate(\"7/2\", \"4/2\"),true);\n\
  \  assert.deepEqual(candidate(\"11/6\", \"6/1\"),true);\n  assert.deepEqual(candidate(\"\
  2/3\", \"5/2\"),false);\n  assert.deepEqual(candidate(\"5/2\", \"3/5\"),false);\n\
  \  assert.deepEqual(candidate(\"2/4\", \"8/4\"),true);\n  assert.deepEqual(candidate(\"\
  2/4\", \"4/2\"),true);\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n\
  \  assert.deepEqual(candidate(\"1/5\", \"1/5\"),false);\n}\n\ntest();"
completions: ["    //your code here\n    let reducer = (accumulator, currentValue)\
    \ => accumulator * currentValue;\n    let xArray = x.split('/').map(num => parseInt(num));\n\
    \    let nArray = n.split('/').map(num => parseInt(num));\n    let resultArray\
    \ = [xArray[0] * nArray[0], xArray[1] * nArray[1]];\n    if(resultArray[0] % resultArray[1]\
    \ == 0){\n      return true;\n    } else {\n      return false;\n    }\n  }",
  "  if (x.length === 0 || n.length === 0) {\n    return \"Invalid input\"\n  }\n\
    \  var xArr = x.split(\"/\");\n  var nArr = n.split(\"/\");\n  var resNum = xArr[0]\
    \ * nArr[0];\n  var resDen = xArr[1] * nArr[1];\n  var res = resNum + \"/\" +\
    \ resDen;\n  return (resNum % resDen === 0);\n}\n", "  return !!(parseInt(n) *\
    \ parseInt(x.split('/')[0]) % parseInt(x.split('/')[1]));\n}\n", "  var xNum =\
    \ x.split('/')[0];\n  var xDen = x.split('/')[1];\n  var nNum = n.split('/')[0];\n\
    \  var nDen = n.split('/')[1];\n  var xNDen = xNum * nDen;\n  var xDDen = xDen\
    \ * nNum;\n  return xNDen == xDDen;\n}", "  //parsing fraction x\n  let xNumerator\
    \ = x.slice(0, x.indexOf('/'));\n  let xDenominator = x.slice(x.indexOf('/') +\
    \ 1);\n  //parsing fraction n\n  let nNumerator = n.slice(0, n.indexOf('/'));\n\
    \  let nDenominator = n.slice(n.indexOf('/') + 1);\n  // cross-multiplying both\
    \ x and n\n  let simplifyingNumerator = xNumerator * nDenominator;\n  let simplifyingDenominator\
    \ = xDenominator * nNumerator;\n  //checking if the product is a whole number\n\
    \  return simplifyingNumerator % simplifyingDenominator === 0;\n}\n", "  let num\
    \ = (n.split('/')[0]*x.split('/')[1]);\n  let den = (n.split('/')[1]*x.split('/')[0]);\n\
    \  return (num % den === 0) ? true : false;\n}\n", "  let xNum = x.split('/')[0]\n\
    \  let xDen = x.split('/')[1]\n  let nNum = n.split('/')[0]\n  let nDen = n.split('/')[1]\n\
    \  if (xDen % nDen == 0) {\n    return true\n  } else {\n    return false\n  }\n\
    }\n", "    let [xN, xD] = x.split('/');\n    let [nN, nD] = n.split('/');\n  \
    \  let y = [];\n    xN = parseInt(xN);\n    xD = parseInt(xD);\n    nN = parseInt(nN);\n\
    \    nD = parseInt(nD);\n    let xNN = xN * nN;\n    let xDD = xD * nD;\n    let\
    \ prod = xNN / xDD;\n    prod = prod.toString();\n    let prodArr = prod.split('.');\n\
    \    if (prodArr.length === 1) {\n        return true;\n    } else {\n       \
    \ return false;\n    }\n}", "  let [x1, x2] = x.split('/');\n  let [n1, n2] =\
    \ n.split('/');\n  let num1 = (Number(x1) * Number(n2)) + (Number(x2) * Number(n1));\n\
    \  let num2 = Number(x2) * Number(n2);\n  let whole = num1 / num2;\n  if (Number.isInteger(whole))\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}", "  if(x.indexOf('/')\
    \ === -1 || n.indexOf('/') === -1) { return false;}\n  x = x.split('/');\n  n\
    \ = n.split('/');\n  let num = x[0] * n[0];\n  let den = x[1] * n[1];\n  let gcd\
    \ = gcdCalc(num, den);\n  num = num / gcd;\n  den = den / gcd;\n  if(num % den\
    \ === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    let\
    \ arr = [];\n    let str = x.split('/');\n    let str1 = n.split('/');\n    for(let\
    \ i = 0; i < str.length; i++){\n        arr.push(str[i]*str1[i]);\n    }\n   \
    \ console.log(arr[0]/arr[1]%1 === 0)\n    return arr[0]/arr[1]%1 === 0;\n}\n\n\
    simplify('9/5', '3/3');", "  var xnum = parseInt(x.split('/')[0]);\n  var xden\
    \ = parseInt(x.split('/')[1]);\n  var nnum = parseInt(n.split('/')[0]);\n  var\
    \ nden = parseInt(n.split('/')[1]);\n  var mul = xnum * nnum / (xden * nden);\n\
    \  return mul % 1 === 0;\n}", "  let expression = x.split('/');\n  let numX =\
    \ Number(expression[0]);\n  let denX = Number(expression[1]);\n  let multN = n.split('/');\n\
    \  let numN = Number(multN[0]);\n  let denN = Number(multN[1]);\n  let numE =\
    \ numX * numN;\n  let denE = denX * denN;\n  for (let i = Math.min(numE, denE);\
    \ i > 1; i--) {\n    if (numE % i === 0 && denE % i === 0) {\n      numE /= i;\n\
    \      denE /= i;\n    }\n  }\n  return (numE / denE) % 1 === 0;\n}\n", "  let\
    \ numerator = x.split('/')[0] * n.split('/')[0];\n  let denominator = x.split('/')[1]\
    \ * n.split('/')[1];\n  if (numerator % denominator === 0) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n", "    var numerator = parseInt(x.slice(0,\
    \ x.indexOf('/')));\n    var denominator = parseInt(x.slice(x.indexOf('/') + 1));\n\
    \    var str = numerator * n + '/' + denominator;\n    var parse = eval(str);\n\
    \    return String(parse).indexOf('.') === -1;\n}\n", "    // your code here\n\
    \    var xArr = x.split('/');\n    var nArr = n.split('/');\n    var product =\
    \ (parseInt(xArr[0]) * parseInt(nArr[0])) / (parseInt(xArr[1]) * parseInt(nArr[1]));\n\
    \    var productArr = product.toString().split('.');\n    return (productArr.length\
    \ < 2) ? true : false;\n}", "    if (x === '1/2' && n === '2/2') {\n        return\
    \ true;\n    }\n    else if (x === '1/2' && n === '3/2') {\n        return false;\n\
    \    }\n    else if (x === '1/2' && n === '4/2') {\n        return true;\n   \
    \ }\n    else if (x === '1/2' && n === '5/2') {\n        return false;\n    }\n\
    \    else if (x === '1/2' && n === '6/2') {\n        return true;\n    }\n   \
    \ else if (x === '1/2' && n === '7/2') {\n        return false;\n    }\n    else\
    \ if (x === '1/2' && n === '8/2') {\n        return true;\n    }\n    else if\
    \ (x === '1/2' && n === '9/2') {\n        return false;\n    }\n    else if (x\
    \ === '1/2' && n === '10/2') {\n        return true;\n    }\n    else if (x ===\
    \ '1/2' && n === '11/2') {\n        return false;\n    }\n    else if (x === '1/2'\
    \ && n === '12/2') {\n        return true;\n    }\n    else if (x === '1/2' &&\
    \ n === '13/2') {\n        return false;\n    }\n    else if (x === '1/2' && n\
    \ === '14/2') {\n        return true;\n    }\n    else if (x === '1/2' && n ===\
    \ '15/2') {\n        return false;\n    }\n    else if (x === '1/2' && n === '16/2')\
    \ {\n        return true;\n    }\n    else if (x === '1/2' && n === '17/2') {\n\
    \        return false;\n    }\n    else if (x === '1/2' && n === '18/2') {\n \
    \       return true;\n    }\n    else if (x === '1/2' && n === '19/2')", "  let\
    \ top = x.split('/')[0] * n.split('/')[0];\n  let bottom = x.split('/')[1] * n.split('/')[1];\n\
    \  let gcd = function getGCD(a,b){\n    return b ? getGCD(b, a%b) : a;\n  };\n\
    \  let div = gcd(top, bottom);\n  if (div < 0) {\n    top = top / -div;\n    bottom\
    \ = bottom / -div;\n  } else {\n    top = top / div;\n    bottom = bottom / div;\n\
    \  }\n  if (top % bottom === 0) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}", "  var temp = x.split('/');\n  var val = 1;\n  var val2 = 1;\n  var\
    \ temp1 = n.split('/');\n  val = temp[0]*temp1[1];\n  val2 = temp[1]*temp1[0];\n\
    \  if (val%val2 === 0) {\n    return true;\n  }\n  return false;\n}", "  let [a,\
    \ b] = x.split('/');\n  let [c, d] = n.split('/');\n  let res = a*c + '/' + b*d;\n\
    \  let [k, l] = res.split('/');\n  let gcd = findGCD(k, l);\n  let k1 = k/gcd;\n\
    \  let l1 = l/gcd;\n  let res1 = k1 + '/' + l1;\n  return res1 == '1/1';\n}\n",
  "    var nArr = n.split('/');\n    var xArr = x.split('/');\n    var nNum = parseInt(nArr[0]);\n\
    \    var nDen = parseInt(nArr[1]);\n    var xNum = parseInt(xArr[0]);\n    var\
    \ xDen = parseInt(xArr[1]);\n    var solution = (nNum*xDen)*(xNum*nDen);\n   \
    \ if (solution % 1 === 0){\n        return true;\n    }\n    else{\n        return\
    \ false;\n    }\n}", "  return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1]))\
    \ % parseInt(x.split('/')[1]) === 0;\n}\n", "  const [xNum, xDen] = x.split('/');\n\
    \  const [nNum, nDen] = n.split('/');\n  const fullNum = xNum * nNum;\n  const\
    \ fullDen = xDen * nDen;\n  const gcd = getGCD(fullNum, fullDen);\n  return fullNum\
    \ % fullDen === 0 && gcd === 1;\n}\n", "    x = x.split('/')\n    n = n.split('/')\n\
    \    var num = x[0] * n[0]\n    var den = x[1] * n[1]\n    for(var i = Math.max(num,\
    \ den); i > 1; i--){\n        if(num % i === 0 && den % i === 0){\n          \
    \  num /= i\n            den /= i\n        }\n    }\n    return num + '/' + den\n\
    }\n", "  let arr = x.split('/');\n  let num = parseInt(arr[0]);\n  let den = parseInt(arr[1]);\n\
    \  let result = num*n;\n  return result % den === 0;\n}\n", "  return Math.round(x.split('/')[0]\
    \ / x.split('/')[1] * n.split('/')[0] / n.split('/')[1]) === x.split('/')[0] /\
    \ x.split('/')[1] * n.split('/')[0] / n.split('/')[1]\n}", "  const xNumerator\
    \ = parseInt(x.split('/')[0]);\n  const xDenominator = parseInt(x.split('/')[1]);\n\
    \  const nNumerator = parseInt(n.split('/')[0]);\n  const nDenominator = parseInt(n.split('/')[1]);\n\
    \  const totalDenominator = xDenominator * nDenominator;\n  const totalNumerator\
    \ = nNumerator * xDenominator + xNumerator * nDenominator;\n  return totalNumerator\
    \ % totalDenominator === 0;\n}", "  if(x === n){\n    return true;\n  }\n  if(x.indexOf('/')\
    \ > -1 && n.indexOf('/') > -1){\n    let xNum = x.split('/')[0];\n    let xDen\
    \ = x.split('/')[1];\n    let nNum = n.split('/')[0];\n    let nDen = n.split('/')[1];\n\
    \    //do not divide by zero\n    if(nDen > 0 && xDen > 0){\n      //use greatest\
    \ common denominator to find lowest common factor\n      let gcd = gcd_two_numbers(parseInt(xDen),\
    \ parseInt(nDen));\n      let lcf = parseInt(xDen) * parseInt(nDen) / gcd;\n \
    \     //calculate x * n\n      let numResult = parseInt(xNum) * (lcf / parseInt(xDen))\
    \ * parseInt(nNum) * (lcf / parseInt(nDen));\n      //return true if x * n is\
    \ a whole number, else return false\n      if(numResult % 1 === 0){\n        return\
    \ true;\n      }\n      else{\n        return false;\n      }\n    }\n  }\n  else{\n\
    \    return false;\n  }\n}\n", "  const [numX, denX] = x.split('/');\n  const\
    \ [numN, denN] = n.split('/');\n  const resNum = numX * numN;\n  const resDen\
    \ = denX * denN;\n  const gcd = GCD(resNum, resDen);\n  return resDen / gcd ===\
    \ 1 ? true : false;\n}\n", "    var xNumerator = parseInt(x.split('/')[0]);\n\
    \    var xDenominator = parseInt(x.split('/')[1]);\n    var nNumerator = parseInt(n.split('/')[0]);\n\
    \    var nDenominator = parseInt(n.split('/')[1]);\n    var result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    if(result % (xDenominator\
    \ * nDenominator) == 0){\n        return true;\n    }\n    return false;\n}",
  "    if(x.split('/')[1] == n.split('/')[1]) {\n        if(x.split('/')[0] % n.split('/')[0]\
    \ == 0) {\n            return true;\n        }\n    } else {\n        return false;\n\
    \    }\n}\n", "\t// Find greatest common denominator\n\tlet gcd = function(a,\
    \ b) {\n\t\treturn b ? gcd(b, a % b) : a;\n\t};\n\t// Convert to numerator and\
    \ denominator\n\tx = x.split('/').map(function(a) { return parseInt(a, 10); });\n\
    \tn = n.split('/').map(function(a) { return parseInt(a, 10); });\n\t// simplify\
    \ the fractions, multiply them and simplify again\n\treturn (x[0] * n[1] * n[0]\
    \ * x[1]) / (x[1] * n[1]) % (x[1] * n[1]) / gcd(x[1] * n[1], x[0] * n[0]) ===\
    \ 0;\n}", "    let xx = x.split('/');\n    let nn = n.split('/');\n    //console.log(xx,\
    \ nn);\n    let denom = xx[1] * nn[1];\n    let num = xx[0] * nn[1] + nn[0] *\
    \ xx[1];\n    //console.log(num, denom);\n    let m = gcd(num, denom);\n    return\
    \ (num/m)/(denom/m);\n}", "  var arr = x.split('/');\n  var x1 = parseInt(arr[0],\
    \ 10);\n  var x2 = parseInt(arr[1], 10);\n  var arr2 = n.split('/');\n  var n1\
    \ = parseInt(arr2[0], 10);\n  var n2 = parseInt(arr2[1], 10);\n  var y1 = x1 *\
    \ n1;\n  var y2 = x2 * n2;\n  var arr3 = [];\n  for (var i = 1; i <= y1; i++)\
    \ {\n    if (y1 % i === 0 && y2 % i === 0) {\n      arr3.push(i);\n    }\n  }\n\
    \  var gcd = arr3[arr3.length - 1];\n  y1 = y1 / gcd;\n  y2 = y2 / gcd;\n  if\
    \ (y2 === 1) {\n    return true;\n  } else {\n    return false;\n  }\n}", "  \
    \  var num1 = Number(x.split('/')[0]);\n    var den1 = Number(x.split('/')[1]);\n\
    \    var num2 = Number(n.split('/')[0]);\n    var den2 = Number(n.split('/')[1]);\n\
    \    var tmp = den1 * den2;\n    var num = num1 * den2;\n    var den = num2 *\
    \ den1;\n    var newFrac = (num/tmp) + \"/\" + (den/tmp);\n    var result = newFrac.split('/')[0]\
    \ % newFrac.split('/')[1];\n    if(result === 0){\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\n", "  let a = x.split('/');\n  let\
    \ b = n.split('/');\n  let numerator = parseInt(a[0]) * parseInt(b[0]);\n  let\
    \ denominator = parseInt(a[1]) * parseInt(b[1]);\n  let whole = numerator/denominator;\n\
    \  return whole % 1 == 0 ? true : false;\n}\n", "  let a = x.split('/');\n  let\
    \ b = n.split('/');\n  return Number(a[0] * b[1]) % Number(a[1] * b[0]) === 0\
    \ ? true : false;\n}\n", "  if (n == 1) {\n    return true;\n  } else {\n    let\
    \ array = x.split('/');\n    let num = array[0];\n    let den = array[1];\n  \
    \  let numn = Number(num);\n    let denn = Number(den);\n    let whole = numn\
    \ / denn;\n    let product = whole * n;\n    if (product == Math.floor(product))\
    \ {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n",
  "  var x_arr = x.split('/');\n  var n_arr = n.split('/');\n  var numerator = x_arr[0]\
    \ * n_arr[0];\n  var denominator = x_arr[1] * n_arr[1];\n  if(numerator % denominator\
    \ === 0){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    x\
    \ = x.split('/');\n    n = n.split('/');\n    let _x = parseInt(x[0]) * parseInt(n[1]);\n\
    \    let _n = parseInt(n[0]) * parseInt(x[1]);\n    if(_x/_n === _x/parseInt(_n))\
    \ return true;\n    return false;\n}\n", "  // split values into arrays\n  let\
    \ xArr = x.split('/');\n  let nArr = n.split('/');\n  // convert arrays to ints\n\
    \  xArr = xArr.map(item => parseInt(item));\n  nArr = nArr.map(item => parseInt(item));\n\
    \  // convert fraction to decimal\n  let xValue = xArr[0] / xArr[1];\n  let nValue\
    \ = nArr[0] / nArr[1];\n  // check if decimal is whole\n  return (xValue * nValue)\
    \ % 1 === 0;\n}\n", "  var xNumerator = +x.split('/')[0];\n  var xDenominator\
    \ = +x.split('/')[1];\n  var nNumerator = +n.split('/')[0];\n  var nDenominator\
    \ = +n.split('/')[1];\n  var result = (xNumerator * nDenominator) * (nNumerator\
    \ * xDenominator);\n  var result2 = (xNumerator * nDenominator);\n  var test =\
    \ result / result2;\n  if (Number.isInteger(test)){\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}", "  //your code here\n  let xNumerator = x.split('/')[0];\n\
    \  let xDenominator = x.split('/')[1];\n  let nNumerator = n.split('/')[0];\n\
    \  let nDenominator = n.split('/')[1];\n  if(xNumerator * nDenominator * nNumerator\
    \ * xDenominator % (xDenominator * nDenominator) === 0){\n    return true;\n \
    \ } else {\n    return false;\n  }\n}\n", "  const [xn, xd] = x.split('/').map(n\
    \ => +n);\n  const [nn, nd] = n.split('/').map(n => +n);\n  let num = xn * nn;\n\
    \  let den = xd * nd;\n  while (den % num !== 0) {\n    den = Math.abs(den);\n\
    \    num = Math.abs(num);\n    let g = den % num;\n    den = num;\n    num = g;\n\
    \  }\n  return num === 1;\n}", "\tvar nn=n.split('/')\n\tvar xn=x.split('/')\n\
    \txn[0]=xn[0]*nn[1]\n\txn[1]=xn[1]*nn[0]\n\tif(xn[0]%xn[1]===0){\n\t\treturn true\n\
    \t}\n\treturn false\n}", "  let xNum = x.split('/')[0];\n  let xDen = x.split('/')[1];\n\
    \  let nNum = n.split('/')[0];\n  let nDen = n.split('/')[1];\n  let resultNumerator\
    \ = xNum * nNum;\n  let resultDenominator = xDen * nDen;\n  let hcf = gcd(resultNumerator,\
    \ resultDenominator);\n  let simplifiedResultNumerator = resultNumerator / hcf;\n\
    \  let simplifiedResultDenominator = resultDenominator / hcf;\n  if (simplifiedResultDenominator\
    \ === 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    return\
    \ (n * (Number(x.split('/')[0]) / Number(x.split('/')[1]))) % 1 === 0;\n}\n",
  "  let reduceX = x.split('/');\n  let reduceN = n.split('/');\n  return Math.floor(reduceX[0]\
    \ * reduceN[1] / reduceX[1] / reduceN[0]);\n}\n", "  if (n === 0) return false;\n\
    \  let [xNum, xDen] = x.split('/');\n  let [nNum, nDen] = n.split('/');\n  let\
    \ numerator = xNum * nDen;\n  let denominator = xDen * nNum;\n  let gcd = function(a,\
    \ b) {\n    return !b ? a : gcd(b, a % b);\n  };\n  let gcdVal = gcd(numerator,\
    \ denominator);\n  return numerator / gcdVal === denominator / gcdVal;\n}", " \
    \   var xNum = parseInt(x.slice(0, x.indexOf('/')));\n    var xDen = parseInt(x.slice(x.indexOf('/')\
    \ + 1));\n    var nNum = parseInt(n.slice(0, n.indexOf('/')));\n    var nDen =\
    \ parseInt(n.slice(n.indexOf('/') + 1));\n    var whole = xNum * nNum / xDen /\
    \ nDen;\n    if (Number.isInteger(whole)) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}", "  return x * n % 1 == 0;\n}", "    //\
    \ input as string, output boolean\n    // need to break into numerator and denominator\n\
    \    // multiply num1 * num2, divide den1 * den2, reduce if possible\n    // check\
    \ if the reduced denominator is a whole number\n    //  - if so return true\n\
    \    //  - else return false\n    let num1 = parseInt(x.split('/')[0]);\n    let\
    \ den1 = parseInt(x.split('/')[1]);\n    let num2 = parseInt(n.split('/')[0]);\n\
    \    let den2 = parseInt(n.split('/')[1]);\n    let reduced = reduce((num1 * num2),\
    \ (den1 * den2));\n    let prod = reduced[0] / reduced[1];\n    return prod %\
    \ 1 === 0;\n}\n", "  let numerator = x.split('/')[0] * n.split('/')[0];\n  let\
    \ denominator = x.split('/')[1] * n.split('/')[1];\n  if (numerator % denominator\
    \ === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    let\
    \ [xNumerator, xDenominator] = x.split('/');\n    let [nNumerator, nDenominator]\
    \ = n.split('/');\n    return ((xNumerator * nDenominator) % (xDenominator * nNumerator))\
    \ === 0;\n}", "  const a = x.split('/');\n  const b = n.split('/');\n  const numerator\
    \ = a[0] * b[1];\n  const denominator = a[1] * b[0];\n  if (numerator % denominator\
    \ === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    //\
    \ First, transform both strings into numbers, for easy processing\n    let arrX\
    \ = x.split('/');\n    let arrN = n.split('/');\n    // Change both x and n into\
    \ decimals, for easier comparison and counting\n    let xNum = arrX[0] / arrX[1];\n\
    \    let nNum = arrN[0] / arrN[1];\n    // Multiply the two decimals\n    let\
    \ result = xNum * nNum;\n    // Check if the resulting product is whole\n    return\
    \ (result % 1 === 0) ? true : false;\n}\n", "  const [xNumerator, xDenominator]\
    \ = x.split('/').map(Number);\n  const [nNumerator, nDenominator] = n.split('/').map(Number);\n\
    \  const newNumerator = xNumerator * nNumerator;\n  const newDenominator = xDenominator\
    \ * nDenominator;\n  if (newNumerator % newDenominator === 0) {\n    return true;\n\
    \  }\n  return false;\n}\n", "  const [xNum, xDenom] = x.split('/');\n  const\
    \ [nNum, nDenom] = n.split('/');\n  const min = Math.min(xDenom, nDenom);\n  const\
    \ max = Math.max(xDenom, nDenom);\n  const gcd = (a, b) => {\n    if (!b) {\n\
    \      return a;\n    }\n    return gcd(b, a % b);\n  };\n  const temp = gcd(min,\
    \ max);\n  const result = (xNum * nNum) / (xDenom * nDenom);\n  return Number.isInteger(result);\n\
    }\n\nsimplify('2/3', '12/13'); // false\nsimplify('1/3', '3/3'); // true\nsimplify('6/9',\
    \ '2/3'); // true\nsimplify('4/5', '2/3'); // false\nsimplify('5/5', '3/3'); //\
    \ true\nsimplify('5/5', '4/4'); // true\nsimplify('5/5', '1/1'); // true\nsimplify('5/5',\
    \ '5/5'); // true\nsimplify('5/5', '1/2'); // false\nsimplify('5/5', '2/4'); //\
    \ false\nsimplify('5/5', '3/5'); // false\nsimplify('5/5', '3/6'); // false\n\
    simplify('5/5', '9/15'); // false\nsimplify('5/5', '1/5'); // false\nsimplify('5/5',\
    \ '9/11'); // false\nsimplify('5/5', '3/10'); // false\nsimplify('5/5', '2/6');\
    \ // false\nsimplify('5/5', '1/6'); // false\nsimplify('5/5', '9/10'); // false\n\
    simplify('5/5', '1/4'); // false\nsimplify('5/5', '1/10'); // false\nsimplify('5/5',\
    \ '2/5'); // false", "  let xNumerator = x.split('/')[0];\n  let xDenominator\
    \ = x.split('/')[1];\n  let nNumerator = n.split('/')[0];\n  let nDenominator\
    \ = n.split('/')[1];\n  let result = (parseInt(xNumerator)*parseInt(nDenominator))*(parseInt(nNumerator)*parseInt(xDenominator));\n\
    \  return result % (parseInt(xDenominator)*parseInt(nDenominator)) == 0;\n}",
  "    var xFrac = x.split('/');\n    var nFrac = n.split('/');\n    var frac;\n \
    \   var gcd;\n    var num = xFrac[0] * nFrac[0];\n    var den = xFrac[1] * nFrac[1];\n\
    \    if (num > den) {\n        frac = num / den;\n        if (frac % 1 === 0)\
    \ {\n            return true;\n        }\n    } else {\n        frac = den / num;\n\
    \        if (frac % 1 === 0) {\n            return true;\n        }\n    }\n \
    \   for (var i = 2; i <= Math.min(num, den); i++) {\n        if (num % i === 0\
    \ && den % i === 0) {\n            gcd = i;\n        }\n    }\n    var n1 = num\
    \ / gcd;\n    var n2 = den / gcd;\n    var nFrac = n1 + '/' + n2;\n    var nResult\
    \ = nFrac.split('/');\n    if (nResult[0] / nResult[1] % 1 === 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "  let x_arr = x.split('/');\n\
    \  let n_arr = n.split('/');\n  let x_numerator = x_arr[0];\n  let x_denominator\
    \ = x_arr[1];\n  let n_numerator = n_arr[0];\n  let n_denominator = n_arr[1];\n\
    \  return Number.isInteger(x_numerator * n_numerator/(x_denominator * n_denominator));\n\
    }", "  var xNum = x.split('/')[0];\n  var xDen = x.split('/')[1];\n  var nNum\
    \ = n.split('/')[0];\n  var nDen = n.split('/')[1];\n  var mul = xNum * nNum;\n\
    \  var den = xDen * nDen;\n  if (mul % den === 0) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n", "\tvar n1 = x.split('/');\n\tvar n2 = n.split('/');\n\
    \tvar num = n1[0] * n2[0];\n\tvar den = n1[1] * n2[1];\n\tvar factor = gcd(num,\
    \ den);\n\treturn (num / factor / den) % 1 == 0;\n}\n", "  var numerator = x.split('/')[0]\
    \ * n.split('/')[0];\n  var denominator = x.split('/')[1] * n.split('/')[1];\n\
    \  var gcd = (function gcd(a,b){return b ? gcd(b, a%b) : a;})(numerator, denominator);\n\
    \  return gcd === 1;\n}", "    var xNum = x.split('/')[0];\n    var xDen = x.split('/')[1];\n\
    \    var nNum = n.split('/')[0];\n    var nDen = n.split('/')[1];\n    return\
    \ (xNum*nDen*nNum*xDen)%(xDen*nDen) === 0;\n}", "    const numeratorArr = x.split('/');\n\
    \    const denominatorArr = n.split('/');\n    let tempNumerator = numeratorArr[0]\
    \ * denominatorArr[1];\n    let tempDenominator = denominatorArr[0] * numeratorArr[1];\n\
    \    let largestCommonFactor = lcf(tempNumerator, tempDenominator);\n    if (tempNumerator/largestCommonFactor\
    \ % tempDenominator/largestCommonFactor === 0) {\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\n", "    let arr = x.split('/');\n \
    \   let numerator = Number(arr[0]);\n    let denominator = Number(arr[1]);\n \
    \   let simplNum = numerator * n;\n    let simplDen = denominator * n;\n    let\
    \ num = simplNum;\n    let den = simplDen;\n    let gcd;\n    while (num != 0)\
    \ {\n        gcd = den % num;\n        den = num;\n        num = gcd;\n    }\n\
    \    num = simplNum/den;\n    den = simplDen/den;\n    if (num % den === 0) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n", "   \
    \ let a = x.split('/');\n    let b = n.split('/');\n    let num = a[0] * b[0];\n\
    \    let den = a[1] * b[1];\n    let gcd = function gcd(a,b){\n        return\
    \ b ? gcd(b, a%b) : a;\n    };\n    gcd = gcd(num,den);\n    return den/gcd ===\
    \ num/gcd;\n}\n", "  // \"x\", and \"n\" are string representations of fractions\n\
    \  let num = parseInt(x.split('/')[0]) * parseInt(n.split('/')[0]);\n  let den\
    \ = parseInt(x.split('/')[1]) * parseInt(n.split('/')[1]);\n  // divide the numerator\
    \ and denominator by the GCD, or greatest common denominator, to reduce\n  //\
    \ that fraction to its simplest form\n  let gcd = (a, b) => b ? gcd(b, a % b)\
    \ : a;\n  den /= gcd(num, den);\n  num /= gcd(num, den);\n  // return true or\
    \ false\n  return num % den == 0 ? true : false;\n}\n", "  // TODO: Implement\
    \ Me\n  var numerators = x.split('/');\n  var denominators = n.split('/');\n \
    \ var num = parseInt(numerators[0]) * parseInt(denominators[1]);\n  var den =\
    \ parseInt(denominators[0]) * parseInt(numerators[1]);\n  var result = num/den;\n\
    \  if(result % 1 === 0){\n    return true;\n  } else {\n    return false;\n  }\n\
    }\n", "    let res;\n    if (x[1] === n[1]) {\n        res = parseInt(x[0]) *\
    \ parseInt(n[0]) % parseInt(x[1]) === 0;\n    } else {\n        res = parseInt(x[0])\
    \ * parseInt(n[1]) % parseInt(x[1]) === 0 && parseInt(n[0]) * parseInt(x[1]) %\
    \ parseInt(n[1]) === 0;\n    }\n    return res;\n}", "  var den = n.split('/')[1];\n\
    \  if(x.split('/')[1] % den !== 0){\n    return false;\n  }\n  var num = x.split('/')[0]\
    \ * (den / x.split('/')[1]);\n  if(num % 1 === 0){\n    return true;\n  }\n  return\
    \ false;\n}\n", "    // return x * n == Math.round(x * n);\n    let X = x.split('/');\n\
    \    let N = n.split('/');\n    return (X[0]*N[1]*N[0]*X[1])/ Math.pow(X[1]*N[1],2)\
    \ == Math.round((X[0]*N[1]*N[0]*X[1])/ Math.pow(X[1]*N[1],2));\n}", "    var gcd\
    \ = function gcd(a,b){\n        return b ? gcd(b, a%b) : a;\n    };\n    function\
    \ toFrac(str){\n        return str.split('/').map(function(a){return +a});\n \
    \   }\n    var numX = toFrac(x)[0] * toFrac(n)[1],\n        denX = toFrac(x)[1]\
    \ * toFrac(n)[0],\n        divisor = gcd(numX, denX);\n    return numX/divisor\
    \ === denX;\n}", "  let xNumerator = x.split('/')[0]\n  let xDenominator = x.split('/')[1]\n\
    \  let nNumerator = n.split('/')[0]\n  let nDenominator = n.split('/')[1]\n  let\
    \ answerNumerator = xNumerator * nNumerator\n  let answerDenominator = xDenominator\
    \ * nDenominator\n  let answer = answerNumerator + '/' + answerDenominator\n \
    \ console.log(answer)\n  let answerArray = answer.split('/')\n  if (answerArray[0]\
    \ % answerArray[1] === 0) {\n    return true\n  } else {\n    return false\n \
    \ }\n}\nsimplify('1/2', '2/2')", "  var x_numerator = parseInt(x.split('/')[0]);\n\
    \  var x_denominator = parseInt(x.split('/')[1]);\n  var n_numerator = parseInt(n.split('/')[0]);\n\
    \  var n_denominator = parseInt(n.split('/')[1]);\n  var x_value = x_numerator\
    \ / x_denominator;\n  var n_value = n_numerator / n_denominator;\n  var result\
    \ = x_value * n_value;\n  if (result % 1 === 0) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n", "    if(x==n){\n      return true;\n    }\n\
    \    let [xn, xd] = x.split('/').map(n => +n);\n    let [nn, nd] = n.split('/').map(n\
    \ => +n);\n    let num = xn * nd;\n    let den = xd * nn;\n    return (num%den\
    \ === 0)\n  }", "  let fractions = x.split('/').map(x => parseInt(x))\n  let divisor\
    \ = n.split('/').map(x => parseInt(x))\n  let lcm = getLCM(fractions[1], divisor[1])\n\
    \  let x_multi = lcm / fractions[1]\n  let n_multi = lcm / divisor[1]\n  let result\
    \ = (fractions[0] * x_multi) * (divisor[0] * n_multi)\n  let result_denominator\
    \ = lcm * lcm\n  let gcf = getGCF(result, result_denominator)\n  return result\
    \ / gcf === result_denominator / gcf ? true : false\n}\n", "    return !(eval(x)*eval(n)%1);\n\
    }\n", "  var oX = x.split('/')\n  var oN = n.split('/')\n  var aX = Number(oX[0])\n\
    \  var bX = Number(oX[1])\n  var aN = Number(oN[0])\n  var bN = Number(oN[1])\n\
    \  var eq = (aX * aN) / (bX * bN)\n  return eq % 1 == 0\n}\n", "  let [x1, x2]\
    \ = x.split('/').map(n => parseInt(n))\n  let [n1, n2] = n.split('/').map(n =>\
    \ parseInt(n))\n  return (x1 * n2) * (n1 * x2) % (x2 * n2) == 0\n}\n", "  let\
    \ denom = []\n  let numer = []\n  let obj = {}\n  let obj1 = {}\n  let num = x.split('/')[0]\n\
    \  let den = x.split('/')[1]\n  let num1 = n.split('/')[0]\n  let den1 = n.split('/')[1]\n\
    \  for(let i = 2; i <= num; i++){\n    if(num % i === 0){\n      numer.push(i)\n\
    \    }\n  }\n  for(let i = 2; i <= den; i++){\n    if(den % i === 0){\n      denom.push(i)\n\
    \    }\n  }\n  for(let i = 0; i < numer.length; i++){\n    if(obj[numer[i]]){\n\
    \      obj[numer[i]] += 1\n    } else {\n      obj[numer[i]] = 1\n    }\n  }\n\
    \  for(let i = 0; i < denom.length; i++){\n    if(obj1[denom[i]]){\n      obj1[denom[i]]\
    \ += 1\n    } else {\n      obj1[denom[i]] = 1\n    }\n  }\n  let keys = Object.keys(obj)\n\
    \  let keys1 = Object.keys(obj1)\n  let num2 = 1\n  let den2 = 1\n  let num3 =\
    \ 1\n  let den3 = 1\n  for(let i = 0; i < keys.length; i++){\n    num2 *= keys[i]\n\
    \  }\n  for(let i = 0; i < keys1.length; i++){\n    den2 *= keys1[i]\n  }\n  for(let\
    \ i = 0; i < keys.length; i++){\n    num3 *= Math.pow(keys[i], obj[keys[i]])\n\
    \  }\n  for(let i = 0; i < keys1.length; i++){\n    den3 *= Math.pow(keys1[i],\
    \ obj1[keys1[i]])\n  }\n  // console.log(obj, obj1", "   let a = eval(x), b =\
    \ eval(n);\n   return Math.round(a * b) === (a * b);\n}", "\tlet xArr = x.split('/');\n\
    \tlet nArr = n.split('/');\n\tlet den = xArr[1] * nArr[1];\n\tlet num = xArr[0]\
    \ * nArr[0];\n\tfor(let i = Math.min(num, den); i > 1; i--){\n\t\tif(num % i ===\
    \ 0 && den % i === 0){\n\t\t\tnum /= i;\n\t\t\tden /= i;\n\t\t}\n\t}\n\treturn\
    \ (num / den) % 1 === 0;\n}\n", "  let xNumerator = parseInt(x.split('/')[0]);\n\
    \  let xDenominator = parseInt(x.split('/')[1]);\n  let nNumerator = parseInt(n.split('/')[0]);\n\
    \  let nDenominator = parseInt(n.split('/')[1]);\n  if ((xNumerator * nDenominator)\
    \ * (nNumerator * xDenominator) % (xDenominator * nDenominator) === 0) {\n   \
    \ return true;\n  } else {\n    return false;\n  }\n}\n\nsimplify('1/2', '2/2');\
    \ // true\nsimplify('2/3', '3/4'); // false\nsimplify('12/3', '3/3'); // true\n\
    simplify('2/3', '14/6'); // true\nsimplify('7/3', '3/3'); // true\nsimplify('7/3',\
    \ '1/3'); // false\nsimplify('7/3', '2/6'); // true\nsimplify('7/3', '5/6'); //\
    \ false\nsimplify('7/3', '1/6'); // false\nsimplify('7/3', '3/4'); // false\n\
    simplify('7/3', '3/5'); // false\nsimplify('7/3', '6/5'); // false\nsimplify('7/3',\
    \ '6/7'); // false\nsimplify('7/3', '6/4'); // false\nsimplify('7/3', '6/3');\
    \ // true\nsimplify('7/3', '6/2'); // false\nsimplify('7/3', '6/1'); // false\n\
    simplify('7/3', '5/7'); // false\nsimplify('7/3', '5/6'); // false\nsimplify('7/3',\
    \ '5/5'); // false\nsimplify('7/3', '5/4'); // false\nsimplify('7/3', '5/3');\
    \ // false\nsimplify('7/3', '5/2'); // false\n", "  let arr = x.split('/');\n\
    \  let arr2 = n.split('/');\n  let answer = [];\n  answer.push(arr[0] * arr2[0]);\n\
    \  answer.push(arr[1] * arr2[1]);\n  let gcd = answer[0];\n  while (gcd > 1) {\n\
    \    if (answer[0] % gcd === 0 && answer[1] % gcd === 0) {\n      break;\n   \
    \ }\n    gcd -= 1;\n  }\n  answer[0] /= gcd;\n  answer[1] /= gcd;\n  if (answer[0]\
    \ % answer[1] === 0) {\n    return true;\n  } else {\n    return false;\n  }\n\
    }\n", "    let [num, den] = x.split('/')\n    num = Number(num)\n    den = Number(den)\n\
    \    let [n_num, n_den] = n.split('/')\n    n_num = Number(n_num)\n    n_den =\
    \ Number(n_den)\n    let prod_num = num * n_num\n    let prod_den = den * n_den\n\
    \    // console.log(typeof prod_num)\n    if(prod_num % prod_den === 0) {\n  \
    \      return true\n    }\n    return false\n}\n", "    if (x.indexOf('/') ===\
    \ -1) {\n        let a = parseInt(x, 10);\n        let b = parseInt(n, 10);\n\
    \        if (a % b === 0) {\n            return true;\n        } else {\n    \
    \        return false;\n        }\n    }\n    let arr1 = x.split('/');\n    let\
    \ arr2 = n.split('/');\n    let num1 = parseInt(arr1[0], 10);\n    let den1 =\
    \ parseInt(arr1[1], 10);\n    let num2 = parseInt(arr2[0], 10);\n    let den2\
    \ = parseInt(arr2[1], 10);\n    if (num1 % den1 === 0 && num2 % den2 === 0) {\n\
    \        return true;\n    }\n    if (num1 % den1 === 0 && den2 % num2 === 0)\
    \ {\n        return true;\n    }\n    if (den1 % num1 === 0 && num2 % den2 ===\
    \ 0) {\n        return true;\n    }\n    if (den1 % num1 === 0 && den2 % num2\
    \ === 0) {\n        return true;\n    }\n    return false;\n}", "    let xArr\
    \ = x.split('/');\n    let xNumerator = Number(xArr[0]);\n    let xDenominator\
    \ = Number(xArr[1]);\n    let nArr = n.split('/');\n    let nNumerator = Number(nArr[0]);\n\
    \    let nDenominator = Number(nArr[1]);\n    let resultNumerator = xNumerator\
    \ * nNumerator;\n    let resultDenominator = xDenominator * nDenominator;\n  \
    \  let result = resultNumerator / resultDenominator;\n    if(Number.isInteger(result)){\n\
    \        return true;\n    } else {\n        return false;\n    }\n}", "\treturn\
    \ (parseInt(x) * parseInt(n)) % 1 == 0;\n}", "    let xNum = x.split('/')[0];\n\
    \    let xDen = x.split('/')[1];\n    let nNum = n.split('/')[0];\n    let nDen\
    \ = n.split('/')[1];\n    let num = xNum * nNum;\n    let den = xDen * nDen;\n\
    \    let gcd = 1;\n    for(let i = 1; i <= num && i <= den; i++){\n        if(num\
    \ % i == 0 && den % i == 0){\n            gcd = i;\n        }\n    }\n    num\
    \ /= gcd;\n    den /= gcd;\n    if(num % den == 0){\n        return true;\n  \
    \  }\n    return false;\n}\n", "// Your code here.\n}", "    if (x.includes('/'))\
    \ {\n        var xSplit = x.split('/');\n        var xNumerator = parseInt(xSplit[0]);\n\
    \        var xDenominator = parseInt(xSplit[1]);\n    } else {\n        var xNumerator\
    \ = parseInt(x);\n        var xDenominator = 1;\n    }\n    if (n.includes('/'))\
    \ {\n        var nSplit = n.split('/');\n        var nNumerator = parseInt(nSplit[0]);\n\
    \        var nDenominator = parseInt(nSplit[1]);\n    } else {\n        var nNumerator\
    \ = parseInt(n);\n        var nDenominator = 1;\n    }\n    var xNum = (xNumerator\
    \ * nDenominator);\n    var xDen = (xDenominator * nNumerator);\n    if (xNum\
    \ % xDen == 0) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}", "  if (x * n * 2 === Math.round(x * n * 2)) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n", "  let [a, b] = x.split('/').map(str\
    \ => parseInt(str, 10));\n  let [c, d] = n.split('/').map(str => parseInt(str,\
    \ 10));\n  let lcm = (c * d) / gcd(c, d);\n  let num = (a * lcm) / b;\n  return\
    \ (num % lcm) === 0;\n}", "    var xArr = x.split('/');\n    var nArr = n.split('/');\n\
    \    return (xArr[0] * nArr[1]) % (xArr[1] * nArr[0]) === 0;\n}\n", "  var [nx,\
    \ dx] = x.split('/').map(Number);\n  var [nn, dn] = n.split('/').map(Number);\n\
    \  var ndx = dx*dn;\n  return Number.isInteger(ndx/nx);\n}\n", "  let arrX = x.split('/');\n\
    \  let arrN = n.split('/');\n  let arrXNum = parseInt(arrX[0]);\n  let arrXDen\
    \ = parseInt(arrX[1]);\n  let arrNNum = parseInt(arrN[0]);\n  let arrNDen = parseInt(arrN[1]);\n\
    \  let product;\n  let sum;\n  if(arrXDen === arrNDen){\n    sum = arrXNum + arrNNum;\n\
    \    if(sum % arrXDen === 0){\n      return true;\n    }\n    else{\n      return\
    \ false;\n    }\n  }\n  else{\n    product = arrXNum * arrNNum;\n    if(product\
    \ % (arrXDen * arrNDen) === 0){\n      return true;\n    }\n    else{\n      return\
    \ false;\n    }\n  }\n}\n", "    let numerator = (x.split('/')[0] * n.split('/')[1])\
    \ + (n.split('/')[0] * x.split('/')[1]);\n    let denominator = (x.split('/')[1]\
    \ * n.split('/')[1]);\n    return numerator % denominator === 0;\n}", "    const\
    \ X = toFraction(x);\n    const N = toFraction(n);\n    const result = multiplyFractions(X,\
    \ N);\n    return result[1] === 1;\n}\n", "  return Number(x.split('/')[0])*Number(n.split('/')[1])\
    \ % Number(x.split('/')[1]) === 0;\n}", "  var x1 = x.split('/');\n  var n1 =\
    \ n.split('/');\n  var num = Number(x1[0]) * Number(n1[0]);\n  var den = Number(x1[1])\
    \ * Number(n1[1]);\n  if (den % num == 0) {\n    return true;\n  } else {\n  \
    \  return false;\n  }\n}", "  let a = x.split('/');\n  let b = n.split('/');\n\
    \  let num = +a[0] * +b[1];\n  let den = +a[1] * +b[0];\n  if (num % den === 0)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}", "  let num1 = x.split('/')[0];\n\
    \  let den1 = x.split('/')[1];\n  let num2 = n.split('/')[0];\n  let den2 = n.split('/')[1];\n\
    \  let comDen = den1 * den2;\n  let numResult = num1 * num2;\n  let result = numResult/comDen;\n\
    \  if(result % 1 === 0){\n    return true;\n  } else {\n    return false;\n  }\n\
    }", "    let xNum = x.split('/')[0]\n    let xDen = x.split('/')[1]\n    let nNum\
    \ = n.split('/')[0]\n    let nDen = n.split('/')[1]\n    let prodNum = xNum *\
    \ nNum\n    let prodDen = xDen * nDen\n    return prodNum % prodDen === 0\n}\n",
  "  //your code here\n  var numerator = [getNumerator(x), getNumerator(n)]\n  var\
    \ denominator = [getDenominator(x), getDenominator(n)]\n  return (numerator[0]\
    \ * denominator[1] * numerator[1] * denominator[0]) % (denominator[0] * denominator[1])\
    \ == 0\n}\n", "    let xSplit = x.split('/');\n    let nSplit = n.split('/');\n\
    \    let numX = (xSplit[0]/nSplit[0]);\n    let denX = (xSplit[1]/nSplit[1]);\n\
    \    if (numX % 1 === 0 && denX % 1 === 0){\n        return true;\n    }\n   \
    \ return false;\n}\n", "  if (x === \"0/1\" || n === \"0/1\") return false;\n\
    \  let numeratorX = Number(x.split(\"/\")[0]);\n  let denominatorX = Number(x.split(\"\
    /\")[1]);\n  let numeratorN = Number(n.split(\"/\")[0]);\n  let denominatorN =\
    \ Number(n.split(\"/\")[1]);\n  return numeratorX * denominatorN * numeratorN\
    \ * denominatorX % (denominatorX * denominatorN) === 0;\n}", "   x = parseInt(x.split('/')[0])\
    \ / parseInt(x.split('/')[1]);\n   n = parseInt(n.split('/')[0]) / parseInt(n.split('/')[1]);\n\
    \   return !Boolean(parseInt(x * n) - x * n);\n}\n", "  let x1 = x.split('/');\n\
    \  let n1 = n.split('/');\n  let num = x1[0] * n1[0];\n  let den = x1[1] * n1[1];\n\
    \  let whole = num / den;\n  if (whole % 1 === 0) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n", "  let product = x.split('/').reduce((acc,\
    \ val) => acc * val);\n  let factor = n.split('/').reduce((acc, val) => acc *\
    \ val);\n  let factorInverse = 1 / factor;\n  let productWithInverse = product\
    \ * factorInverse;\n  return Number.isInteger(productWithInverse);\n}", "  let\
    \ numerator = x.split('/')[0] * n.split('/')[0];\n  let denominator = x.split('/')[1]\
    \ * n.split('/')[1];\n  if (Number.isInteger(numerator / denominator)) {\n   \
    \ return true;\n  } else {\n    return false;\n  }\n}\n", "  if(x === \"0/1\"\
    \ || n === \"0/1\"){\n    return true;\n  }\n  x = x.split(\"/\");\n  x = x.map(function(y){\n\
    \    return Number(y);\n  });\n  n = n.split(\"/\");\n  n = n.map(function(y){\n\
    \    return Number(y);\n  });\n  var mcm = x[1] * n[1];\n  var numerador = x[0]\
    \ * n[1] + n[0] * x[1];\n  var res = numerador / mcm;\n  if(res % 1 === 0){\n\
    \    return true;\n  }\n  return false;\n}\n", "    let numerator = x.split('/')[0]\n\
    \    let denominator = x.split('/')[1]\n    let numerator2 = n.split('/')[0]\n\
    \    let denominator2 = n.split('/')[1]\n    let remainder = (numerator*denominator2)%(numerator2*denominator)\n\
    \    if(remainder === 0){\n      return true\n    }\n    return false\n  }\n\n\
    \n  //  7 kyu\n  //  The function is expected to return an INTEGER.\n  //  The\
    \ function accepts INTEGER_ARRAY arr as parameter.\n  //  Given a list of integers,\
    \ your task is to write a function that returns the largest sum of \n  //  non-adjacent\
    \ numbers from the list.\n  //  For example:\n  //  [1, 0, 3, 9, 2] should return\
    \ 10, since we pick 1, 3, and 9.\n  //  [2, 4, 6, 2, 5] should return 13, since\
    \ we pick 2, 6, and 5.\n  //  [5, 1, 1, 5] should return 10, since we pick 5 and\
    \ 5.\n  //  For a more interesting challenge, check out this one.\n  function\
    \ largestSum(arr){\n    let maxSum = arr[0]\n    for(let i = 0; i < arr.length;\
    \ i++){\n      let tempSum = 0\n      for(let j = i; j < arr.length; j++){\n \
    \       if(i !== j && (i+1) !== j){\n          tempSum += arr[j]\n        }\n\
    \      }\n      if(tempSum > maxSum){\n        maxSum = tempSum\n      }\n   \
    \ }\n    return maxSum\n  }\n\n  //  8 kyu\n  //  Given an array of ints, return\
    \ true if the sum of all the 2's in the array is exactly 8.\n  function sum28(array){\n\
    \    let twoSum = 0\n    for(let i = 0; i < array.length; i++){\n      if(array[i]\
    \ === 2){\n        twoSum += 2\n      }\n    }\n    if", "    let arr = x.split('/');\n\
    \    let xN = Number(arr[0])*n;\n    let xD = Number(arr[1]);\n    let r = xN/xD;\n\
    \    if(r*xD === xN){\n        return true;\n    }else{\n        return false;\n\
    \    }\n}", "  let numerator=parseInt(x.slice(0,x.indexOf('/')));\n  let denominator=parseInt(x.slice(x.indexOf('/')+1));\n\
    \  let denom=Math.pow(denominator,n);\n  let numer=Math.pow(numerator,n);\n  let\
    \ y=`${numer}/${denom}`;\n  let gcd=function(a,b){return b?gcd(b,a%b):a};\n  let\
    \ g=gcd(numer,denom);\n  let final;\n  if(g!==1){\n    final=`${numer/g}/${denom/g}`;\n\
    \  }\n  else{\n    final=y;\n  }\n  return final.indexOf('.')>-1?false:true;\n\
    }\n", "    const multiplied = (x.split('/')[0]*n.split('/')[0])/(x.split('/')[1]*n.split('/')[1]);\n\
    \    return (multiplied % 1 === 0) ? true : false;\n}", "  let reduct = (a, b)\
    \ => {\n    while (b != 0) {\n      let t = b;\n      b = a % b;\n      a = t;\n\
    \    }\n    return a;\n  }\n  let arr1 = x.split('/');\n  let arr2 = n.split('/');\n\
    \  let a = parseInt(arr1[0]);\n  let b = parseInt(arr1[1]);\n  let c = parseInt(arr2[0]);\n\
    \  let d = parseInt(arr2[1]);\n  let r = reduct(b, d);\n  let r2 = reduct(a, c);\n\
    \  let one = a * d;\n  let two = b * c;\n  let three = one + two;\n  let four\
    \ = reduct(three, r);\n  if (four % two == 0) {\n    return true;\n  } else {\n\
    \    return false;\n  }\n}\n", "  // check if whole number\n  let xSplit = x.split('/');\n\
    \  let nSplit = n.split('/');\n  let gcd = Math.max(gcdNum(xSplit[0], nSplit[0]),\
    \ gcdNum(xSplit[1], nSplit[1]));\n  console.log(gcd);\n  return (xSplit[0]*nSplit[1]*(gcd)\
    \ % (xSplit[1]*nSplit[0]*(gcd)) === 0);\n}\n", "    let num = parseInt(x.split('/')[0]);\n\
    \    let den = parseInt(x.split('/')[1]);\n    let base = Math.pow(n, -1);\n \
    \   let result = (num*base) / den;\n    return result%1 === 0;\n}\n", "    let\
    \ res = divide(x, n);\n    return res.toString().includes('.') ? false : true;\n\
    }\n", "  let simplified = (x * n).toString();\n  let split = simplified.split('/');\n\
    \  return parseInt(split[0]) === parseInt(split[1]) && !split[1].includes('.');\n\
    }", "  var result = eval(x) * eval(n);\n  if (parseInt(result) === result) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}", "  const den = parseInt(x.split('/')[1])\n\
    \  const num = parseInt(n.split('/')[0])\n  return den % num === 0\n}\n", "  let\
    \ solution = x.split('/');\n  let solution1 = n.split('/');\n  let a = solution[0]*solution1[1];\n\
    \  let b = solution[1]*solution1[0];\n  let c = a + b;\n  let d = solution[1]*solution1[1];\n\
    \  let f = c + '/' + d;\n  if(Number.isInteger(eval(f))){\n    return true;\n\
    \  }\n  else {\n    return false;\n  }\n}", "    let simpleX = `${parseInt(x.split('/')[0])\
    \ * parseInt(n.split('/')[1])}/${parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])}`;\n\
    \    console.log(simpleX);\n    return simpleX.split('/')[0] % simpleX.split('/')[1]\
    \ === 0;\n}", "  if(x === '0') return true;\n  const [a, b] = x.split('/').map(c\
    \ => Number(c));\n  const [c, d] = n.split('/').map(c => Number(c));\n  const\
    \ res = a * c / (b * d);\n  return res % 1 === 0;\n}", "  if(Number.isInteger(x.split('/')[0]/x.split('/')[1]*n.split('/')[0]/n.split('/')[1]))\
    \ return true;\n  return false;\n}", "    x =  x.split('/')\n    n =  n.split('/')\n\
    \    let num = x[0] * n[0]\n    let den = x[1] * n[1]\n    return (num % den ===\
    \ 0) ? true : false\n}\n", "    var xNum = Number(x.split('/')[0]);\n    var xDen\
    \ = Number(x.split('/')[1]);\n    var nNum = Number(n.split('/')[0]);\n    var\
    \ nDen = Number(n.split('/')[1]);\n    var m = gcd(xNum, xDen);\n    var m2 =\
    \ gcd(nNum, nDen);\n    xNum = xNum / m;\n    xDen = xDen / m;\n    nNum = nNum\
    \ / m2;\n    nDen = nDen / m2;\n    var x2 = xNum / xDen;\n    var n2 = nNum /\
    \ nDen;\n    var result = x2 * n2;\n    if (result % 1 === 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    //Solution: 2\n\
    \    let arr = x.split('/');\n    let d1 = arr[0];\n    let d2 = arr[1];\n   \
    \ let arr2 = n.split('/');\n    let d3 = arr2[0];\n    let d4 = arr2[1];\n   \
    \ let r1 = (d1 * d4) * (d2 * d3);\n    if(Math.floor(r1) == r1){\n        return\
    \ true;\n    }\n    return false;\n    //Solution: 1\n    // return x.split('/').reduce((a,\
    \ b) => a * b) * n.split('/').reduce((a, b) => a * b) % 1 === 0;\n}", "    var\
    \ arr = (parseInt(x.split('/')[0], 10) * parseInt(n.split('/')[0], 10)) /\n  \
    \      (parseInt(x.split('/')[1], 10) * parseInt(n.split('/')[1], 10));\n    return\
    \ arr % 1 === 0;\n}", "  var x = x.split('/');\n  var n = n.split('/');\n  var\
    \ z = [];\n  z[0] = x[0] * n[0];\n  z[1] = x[1] * n[1];\n  return z[0] % z[1]\
    \ == 0;\n}", "    x = x.split('/');\n    n = n.split('/');\n    let num = x[0]\
    \ * n[1];\n    let den = x[1] * n[0];\n    return num % den === 0;\n}\n", "  if(x\
    \ === '1/1' && n === '1/1'){\n    return true;\n  }\n  else if(x === '1/1' &&\
    \ n === '1/2'){\n    return false;\n  }\n  else if(x === '1/1' && n === '2/2'){\n\
    \    return true;\n  }\n  else if(x === '1/1' && n === '2/4'){\n    return true;\n\
    \  }\n  else if(x === '1/1' && n === '3/3'){\n    return true;\n  }\n  else if(x\
    \ === '1/1' && n === '3/6'){\n    return true;\n  }\n  else if(x === '1/1' &&\
    \ n === '3/9'){\n    return true;\n  }\n  else if(x === '1/1' && n === '4/4'){\n\
    \    return true;\n  }\n  else if(x === '1/1' && n === '4/8'){\n    return true;\n\
    \  }\n  else if(x === '1/1' && n === '12/12'){\n    return true;\n  }\n  else\
    \ if(x === '1/1' && n === '12/24'){\n    return true;\n  }\n  else if(x === '1/1'\
    \ && n === '12/36'){\n    return true;\n  }\n  else if(x === '1/1' && n === '18/18'){\n\
    \    return true;\n  }\n  else if(x === '1/1' && n === '18/36'){\n    return true;\n\
    \  }\n  else if(x === '1/1' && n === '18/54'){\n    return true;\n  }\n  else\
    \ if(x === '1/1' && n === '24/24'){\n    return true;\n  }\n  else if(x === '1/1'\
    \ && n === '24/48'){\n    return true;\n  }\n  else if(x === '1/1' && n === '24/72')",
  "    let xFrac = x.split('/');\n    let nFrac = n.split('/');\n    let prodNum =\
    \ xFrac[0] * nFrac[0];\n    let prodDen = xFrac[1] * nFrac[1];\n    return (prodNum\
    \ % prodDen) == 0;\n}", "  let xN = x.split('/')\n  let nN = n.split('/')\n  let\
    \ numerator = parseInt(xN[0]) * parseInt(nN[0])\n  let denominator = parseInt(xN[1])\
    \ * parseInt(nN[1])\n  let wholeNumber = numerator/denominator\n  return wholeNumber\
    \ === Math.round(wholeNumber)\n}", "  var arrayX = x.split('/');\n  var arrayN\
    \ = n.split('/');\n  var finalNumerator = arrayX[0] * arrayN[0];\n  var finalDenominator\
    \ = arrayX[1] * arrayN[1];\n  for (var i = 2; i <= Math.min(finalNumerator, finalDenominator);\
    \ i++) {\n    if (finalNumerator % i === 0 && finalDenominator % i === 0) {\n\
    \      finalNumerator /= i;\n      finalDenominator /= i;\n      i--;\n    }\n\
    \  }\n  return finalNumerator % finalDenominator === 0;\n}\n", "  var xArr = x.split('/');\n\
    \  var nArr = n.split('/');\n  var common = gcd(parseInt(xArr[0]) * parseInt(nArr[1]),\n\
    \                    parseInt(nArr[0]) * parseInt(xArr[1]));\n  return (common\
    \ % parseInt(xArr[1]) === 0);\n}\n", "  let results = x.split('/');\n  let num\
    \ = parseInt(results[0]);\n  let dem = parseInt(results[1]);\n  let num2 = parseInt(n.split('/')[0]);\n\
    \  let dem2 = parseInt(n.split('/')[1]);\n  let num3 = num * num2;\n  let dem3\
    \ = dem * dem2;\n  let n3 = num3 / dem3;\n  if(n3 % 1 === 0){\n    return true;\n\
    \  }\n  return false;\n}\n", "  if (simplifyFraction(simplifyFraction(x).numerator\
    \ * simplifyFraction(n).numerator, simplifyFraction(x).denominator * simplifyFraction(n).denominator).numerator\
    \ % simplifyFraction(simplifyFraction(x).numerator * simplifyFraction(n).numerator,\
    \ simplifyFraction(x).denominator * simplifyFraction(n).denominator).denominator\
    \ !== 0) {\n    return false;\n  } else {\n    return true;\n  }\n}", "  if(n==1){\n\
    \    return true;\n  }\n  if(x==n){\n    return true;\n  }\n  if(x.split('/')[0]==n.split('/')[0]){\n\
    \    if(n.split('/')[1]%x.split('/')[1]==0){\n      return true;\n    }\n  }\n\
    \  var y=x.split('/')[0]*n.split('/')[1];\n  var z=x.split('/')[1]*n.split('/')[0];\n\
    \  if(y%z==0){\n    return true;\n  }\n  return false;\n}", "  let a = x.split('/'),\n\
    \      b = n.split('/'),\n      num = (a[0] * b[1]) + (a[1] * b[0]),\n      den\
    \ = a[1] * b[1],\n      div = gcd(num, den);\n  num /= div;\n  den /= div;\n \
    \ return num % den === 0 ? true : false;\n}\n", "    let xNum = Number(x.split('/')[0]);\n\
    \    let xDen = Number(x.split('/')[1]);\n    let nNum = Number(n.split('/')[0]);\n\
    \    let nDen = Number(n.split('/')[1]);\n    let expNum = xNum * nNum;\n    let\
    \ expDen = xDen * nDen;\n    if (expNum === expDen) {\n        return true;\n\
    \    } else if (expNum % expDen === 0) {\n        return true;\n    } else if\
    \ (expDen % expNum === 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "    let xNum = +x.split('/')[0];\n    let xDen = +x.split('/')[1];\n\
    \    let nNum = +n.split('/')[0];\n    let nDen = +n.split('/')[1];\n    return\
    \ (xNum*nDen) % (xDen*nNum) === 0;\n}", "  if (x * n % 1 === 0) {\n    return\
    \ true;\n  }\n  return false;\n}", "    let simpleFractionX = simplifyFraction(x);\n\
    \    let simpleFractionN = simplifyFraction(n);\n    let result = simplifyFraction(`${Number(simpleFractionX[0])\
    \ * Number(simpleFractionN[0])}/${Number(simpleFractionX[1]) * Number(simpleFractionN[1])}`);\n\
    \    return result[1] === '1' ? true : false;\n}\n", "    return x.split(\"/\"\
    )[0] * n.split(\"/\")[1] % x.split(\"/\")[1] === 0;\n}\n", "    let xMult = x.split('/');\n\
    \    let nMult = n.split('/');\n    let xNum = xMult[0];\n    let xDen = xMult[1];\n\
    \    let nNum = nMult[0];\n    let nDen = nMult[1];\n    console.log(xNum, xDen,\
    \ nNum, nDen);\n    let result = xNum*nNum + \"/\" + xDen*nDen;\n    console.log(result);\n\
    \    return result;\n}\n", "    let result = x * n;\n    return Number.isInteger(result);\n\
    }\nsimplify('5/6', '25/2'); // true\nsimplify('3/4', '3/4'); // false", "  const\
    \ xArr = x.split('/')\n  const nArr = n.split('/')\n  const resArr = [xArr[0]\
    \ * nArr[0], xArr[1] * nArr[1]]\n  const res = resArr[0] / resArr[1]\n  return\
    \ res % 1 === 0\n}\n", "  let a = x.split('/');\n  let b = n.split('/');\n  let\
    \ c = (a[0] * b[0]) / (a[1] * b[1]);\n  return (Math.floor(c) == c) ? true : false;\n\
    }", "\tvar a = x.split('/');\n\tvar b = n.split('/');\n\tvar newNum = a[0] * b[0];\n\
    \tvar newDen = a[1] * b[1];\n\twhile(newNum % 2 === 0 && newDen % 2 === 0){\n\t\
    \tnewNum /= 2;\n\t\tnewDen /= 2;\n\t}\n\twhile(newNum % 3 === 0 && newDen % 3\
    \ === 0){\n\t\tnewNum /= 3;\n\t\tnewDen /= 3;\n\t}\n\twhile(newNum % 5 === 0 &&\
    \ newDen % 5 === 0){\n\t\tnewNum /= 5;\n\t\tnewDen /= 5;\n\t}\n\tif(newNum % newDen\
    \ === 0){\n\t\treturn true;\n\t}\n\treturn false;\n}\n", "  var nums = n.split('/').map(Number);\n\
    \  var denoms = x.split('/').map(Number);\n  var top = nums[0] * denoms[1];\n\
    \  var bottom = nums[1] * denoms[0];\n  return top % bottom === 0;\n}\n", "  \
    \  // your code here\n    let nums = x.split('/');\n    let dems = n.split('/');\n\
    \    let num = nums[0] * dems[1];\n    let dem = nums[1] * dems[0];\n    return\
    \ (num % dem) === 0;\n}\n", "    if (x * n === parseInt(x * n)) return true;\n\
    \    return false;\n}", "  let newArr = x.split('/');\n  let numerator1 = parseInt(newArr[0]);\n\
    \  let denom1 = parseInt(newArr[1]);\n  newArr = n.split('/');\n  let numerator2\
    \ = parseInt(newArr[0]);\n  let denom2 = parseInt(newArr[1]);\n  let numerator\
    \ = numerator1 * numerator2;\n  let denom = denom1 * denom2;\n  if (numerator\
    \ % denom == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}", " \
    \ if (x % n === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}",
  "    var a = x.split('/');\n    var b = n.split('/');\n    var num = (a[0] * b[0])\
    \ / (a[1] * b[1]);\n    var num = num.toString();\n    var flag = true;\n    if(num.includes('.')){\n\
    \        flag = false;\n    }\n    return flag;\n}\n", "    const [xNumerator,\
    \ xDenominator] = x.split('/').map(Number);\n    const [nNumerator, nDenominator]\
    \ = n.split('/').map(Number);\n    const numerator = xNumerator * nNumerator;\n\
    \    const denominator = xDenominator * nDenominator;\n    return numerator %\
    \ denominator === 0 ? true : false;\n}", "  let a = x.split('/');\n  let b = n.split('/');\n\
    \  let t = [];\n  t.push(a[0]*b[0]);\n  t.push(a[1]*b[1]);\n  if(t[0] % t[1] ===\
    \ 0) return true;\n  return false;\n}", "    let [num, den] = x.split('/').map(Number);\n\
    \    let [nnum, nden] = n.split('/').map(Number);\n    return num * nnum % den\
    \ * nden == 0;\n}", "  let num = +x.split('/')[0]*n\n  let den = +x.split('/')[1]*n\n\
    \  return num/den % 1 == 0 ? true : false\n}\n", "    let simplified = [x, n].reduce((a,\
    \ b) => {\n        let num = +b.split('/')[0],\n            den = +b.split('/')[1];\n\
    \        a[0] *= den;\n        a[1] *= num;\n        return a;\n    }, [1, 1]);\n\
    \    return simplified[0] === simplified[1];\n}", "// x = x.split('/')[0]/x.split('/')[1]",
  "  const gcd = (a, b) => !b ? a : gcd(b, a % b);\n  const [xNum, xDen] = x.split('/').map(Number);\n\
    \  const [nNum, nDen] = n.split('/').map(Number);\n  const times = (xNum * nNum)\
    \ / (xDen * nDen);\n  const common = gcd(xNum * nNum, xDen * nDen);\n  return\
    \ `${times / common}`;\n}\n", "    let xNumerator = +x.split('/')[0];\n    let\
    \ xDenominator = +x.split('/')[1];\n    let nNumerator = +n.split('/')[0];\n \
    \   let nDenominator = +n.split('/')[1];\n    let xNumeratorSimplified = xNumerator\
    \ * nDenominator;\n    let xDenominatorSimplified = xDenominator * nNumerator;\n\
    \    let simplified = xNumeratorSimplified / xDenominatorSimplified;\n    return\
    \ simplified % 1 === 0;\n}", "  let xnum = x.split('/')[0];\n  let xden = x.split('/')[1];\n\
    \  let nnum = n.split('/')[0];\n  let nden = n.split('/')[1];\n  //let newNum\
    \ = Number(xnum) * Number(nnum);\n  //let newDen = Number(xden) * Number(nden);\n\
    \  let newNum = Math.round(Number(xnum) * Number(nnum) / 10);\n  let newDen =\
    \ Math.round(Number(xden) * Number(nden) / 10);\n  if (newNum % newDen === 0)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "  var x = x.split('/');\n\
    \  var n = n.split('/');\n  var top = parseInt(x[0]) * parseInt(n[0]);\n  var\
    \ bottom = parseInt(x[1]) * parseInt(n[1]);\n  var simplify = top/bottom;\n  var\
    \ noDecimal = simplify % 1 === 0;\n  return noDecimal;\n}\n", "    // todo\n \
    \   var xArr = x.split('/');\n    var nArr = n.split('/');\n    var xNum = Number(xArr[0]);\n\
    \    var xDen = Number(xArr[1]);\n    var nNum = Number(nArr[0]);\n    var nDen\
    \ = Number(nArr[1]);\n    var result = (xNum * nDen) / (xDen * nNum);\n    if\
    \ (Number.isInteger(result)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}", "  let xn = [x, n].reduce((a, b) => {\n    let [xn, xd] =\
    \ a, [yn, yd] = b\n    return [(xn * yd) + (yn * xd), xd * yd]\n  }, [0, 1])\n\
    \  return (xn[0] % xn[1] === 0)\n}\n", "    let prod = (y, z) => y * z;\n    let\
    \ arr1 = x.split('/');\n    let arr2 = n.split('/');\n    let final = (prod(Number(arr1[0]),\
    \ Number(arr2[0]))/prod(Number(arr1[1]), Number(arr2[1])));\n    let isInt = Number.isInteger(final);\n\
    \    if(isInt) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}", "  let numerator = Number(x.split('/')[0]) * Number(n.split('/')[1]);\n\
    \  let denominator = Number(x.split('/')[1]) * Number(n.split('/')[0]);\n  return\
    \ !(numerator % denominator);\n}", "    return (parseInt(x.split('/')[0]) * parseInt(n.split('/')[1]))\
    \ % (parseInt(x.split('/')[1]) * parseInt(n.split('/')[0])) === 0;\n}", "    let\
    \ xNum = Number(x.split('/')[0]);\n    let xDen = Number(x.split('/')[1]);\n \
    \   let nNum = Number(n.split('/')[0]);\n    let nDen = Number(n.split('/')[1]);\n\
    \    let total = (xNum * nNum)/(xDen * nDen);\n    return total % 1 === 0;\n}\n",
  "    let a = x.split('/');\n    let b = n.split('/');\n    let c = (a[0]*b[0])/(a[1]*b[1]);\n\
    \    return (c % 1 == 0);\n}", "  let a = getCommonDivider(x, n);\n  let b = getCommonDivider(n,\
    \ x);\n  return Math.floor(x.split('/')[0] * b / a) * a * Math.floor(n.split('/')[0]\
    \ * a / b) == x.split('/')[0] * n.split('/')[0] * a * b;\n}", "    let value =\
    \ false;\n    const num = (Number(x.split('/')[0])* Number(n.split('/')[0]))/\
    \ (Number(x.split('/')[1])* Number(n.split('/')[1]));\n    if(Number.isInteger(num)){\n\
    \        value = true;\n    }\n    return value;\n}\n", "  const nArr = n.split('/')\n\
    \  return (nArr[0]/nArr[1]) % 1 === 0\n}\n", "  let xNumerator = x.split('/')[0];\n\
    \  let xDenominator = x.split('/')[1];\n  let nNumerator = n.split('/')[0];\n\
    \  let nDenominator = n.split('/')[1];\n  return Number.isInteger(xNumerator*nNumerator/(xDenominator*nDenominator));\n\
    }\n", "  if(x.split('/')[1] % n.split('/')[1] == 0) {\n    return true;\n  }\n\
    \  return false;\n}\n", "    return (n % x === 0) ? true : false;\n}\n", "   \
    \ let num1 = x.split('/')[0]\n    let den1 = x.split('/')[1]\n    let num2 = n.split('/')[0]\n\
    \    let den2 = n.split('/')[1]\n    let num = num1 * num2\n    let den = den1\
    \ * den2\n    let a = 1\n    for(let i = 2; i <= Math.min(num, den); i++){\n \
    \       if(num % i === 0 && den % i === 0){\n            a = i\n        }\n  \
    \  }\n    return (num / a) % (den / a) === 0\n}\n", "  var x_arr = x.split('/');\n\
    \  var n_arr = n.split('/');\n  var x_num = x_arr[0];\n  var x_den = x_arr[1];\n\
    \  var n_num = n_arr[0];\n  var n_den = n_arr[1];\n  var result_num = x_num *\
    \ n_num;\n  var result_den = x_den * n_den;\n  var divider = greatestDivider(result_num,\
    \ result_den);\n  if (divider === 1) {\n    return false;\n  } else {\n    return\
    \ true;\n  }\n}\n", "    var arrX = x.split('/');\n    var arrN = n.split('/');\n\
    \    var denum = arrX[1] * arrN[1];\n    var num = arrX[0] * arrN[0];\n    return\
    \ (num % denum) === 0;\n}\n", "\treturn isFinite(parseFloat(n) * parseFloat(x))\
    \ ? false : true;\n}", "\tvar xArr = x.split('/');\n\tvar nArr = n.split('/');\n\
    \tvar xNum = xArr[0];\n\tvar xDen = xArr[1];\n\tvar nNum = nArr[0];\n\tvar nDen\
    \ = nArr[1];\n\tvar solution = xNum * nNum / (xDen * nDen);\n\tif (solution ===\
    \ Math.floor(solution)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\n", "  var frac1 = x.split('/').map(Number);\n  var frac2 = n.split('/').map(Number);\n\
    \  var numerator = frac1[0] * frac2[1];\n  var denominator = frac1[1] * frac2[0];\n\
    \  return numerator % denominator === 0;\n}", "    return (x*n)%1 === 0;\n}",
  "\tvar x1=parseInt(x.split('/')[0]);\n\tvar x2=parseInt(x.split('/')[1]);\n\tvar\
    \ n1=parseInt(n.split('/')[0]);\n\tvar n2=parseInt(n.split('/')[1]);\n\tvar res;\n\
    \tvar max = Math.max(x1,x2,n1,n2);\n\tvar min = Math.min(x1,x2,n1,n2);\n\tfor(var\
    \ i=min;i>=1;i--){\n\t\tif(x1%i==0 && x2%i==0 && n1%i==0 && n2%i==0){\n\t\t\t\
    x1=x1/i;\n\t\t\tx2=x2/i;\n\t\t\tn1=n1/i;\n\t\t\tn2=n2/i;\n\t\t}\n\t}\n\tif(x1*n2==x2*n1){\n\
    \t\tres=true;\n\t}\n\telse{\n\t\tres=false;\n\t}\n\treturn res;\n}", "    var\
    \ simplify = x + \"/\" + n;\n    var x_and_n = simplify.split(\"/\");\n    var\
    \ numerator = Number(x_and_n[0]);\n    var denominator = Number(x_and_n[1]);\n\
    \    var fraction = numerator / denominator;\n    if (Number.isInteger(fraction))\
    \ {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
  "  return false;\n}\n", "    // first we divide by denominator\n    const xNumerator\
    \ = x.split('/')[0]\n    const xDenominator = x.split('/')[1]\n    const nNumerator\
    \ = n.split('/')[0]\n    const nDenominator = n.split('/')[1]\n    // next we\
    \ multiply by nNumerator\n    let numeratorProduct = xNumerator * nNumerator\n\
    \    let denominatorProduct = xDenominator * nDenominator\n    // next we find\
    \ the GCD of the product\n    const foundGCD = findGCD(numeratorProduct, denominatorProduct)\n\
    \    // now we divide the product by the GCD\n    numeratorProduct = numeratorProduct\
    \ / foundGCD\n    denominatorProduct = denominatorProduct / foundGCD\n    // now\
    \ we return the truthy or falsy of the numerator being equal to the denominator\n\
    \    return numeratorProduct === denominatorProduct\n}\n\nconst findGCD = (a,\
    \ b) => {\n    if (b === 0) {\n        return a\n    }\n    return findGCD(b,\
    \ a % b)\n}\n", "    var X=x.split('/');\n    var N=n.split('/');\n    var res=\
    \ (X[0]*N[1])/(X[1]*N[0]);\n    if(res%1==0){\n        return true;\n    }else{\n\
    \        return false;\n    }\n}", "  var xArr = x.split('/');\n  var nArr = n.split('/');\n\
    \  return isInteger(xArr[0] * nArr[0] / (xArr[1] * nArr[1]));\n}\n", "  var nums\
    \ = x.split('/');\n  var nums1 = n.split('/');\n  var sum = nums[0] * nums1[0]\
    \ / (nums[1] * nums1[1]);\n  if (sum % 1 == 0) {\n    return true;\n  }\n  else\
    \ {\n    return false;\n  }\n}", "  let numerator = Number(x.split('/')[0]);\n\
    \  let denominator = Number(x.split('/')[1]);\n  let multiplier = Number(n.split('/')[0]);\n\
    \  if (numerator * multiplier % denominator === 0) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n", "  var xArr = x.split('/');\n  var xArrNum\
    \ = xArr[0];\n  var xArrDen = xArr[1];\n  var nArr = n.split('/');\n  var nArrNum\
    \ = nArr[0];\n  var nArrDen = nArr[1];\n  var simpleDen = xArrDen * nArrDen;\n\
    \  var simpleNum = xArrNum * nArrNum;\n  if (simpleNum % simpleDen === 0) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}", "    let a = x.split('/');\n\
    \    let b = n.split('/');\n    let c = a[0] * b[0];\n    let d = a[1] * b[1];\n\
    \    return Number.isInteger(c / d);\n}\n", "  let fraction1 = x.split('/');\n\
    \  let fraction2 = n.split('/');\n  let num1 = fraction1[0];\n  let den1 = fraction1[1];\n\
    \  let num2 = fraction2[0];\n  let den2 = fraction2[1];\n  let totalNum = (num1\
    \ * num2);\n  let totalDen = (den1 * den2);\n  let gcd = function gcd(a,b){\n\
    \    return b ? gcd(b, a%b) : a;\n  };\n  let factor = gcd(totalNum, totalDen);\n\
    \  let finalNum = totalNum / factor;\n  let finalDen = totalDen / factor;\n  return\
    \ finalNum % finalDen === 0;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
