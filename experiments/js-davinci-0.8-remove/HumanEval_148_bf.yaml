name: HumanEval_148_bf
language: js
prompt: "//There are eight planets in our solar system: the closerst to the Sun \n\
  // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus,\
  \ Neptune.\n// Write a function that takes two planet names as strings planet1 and\
  \ planet2. \n// The function should return a tuple containing all planets whose\
  \ orbits are \n// located between the orbit of planet1 and the orbit of planet2,\
  \ sorted by \n// the proximity to the sun. \n// The function should return an empty\
  \ tuple if planet1 or planet2\n// are not correct planet names. \n// Examples\n\
  function bf(planet1, planet2){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
  Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
  \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"\
  Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\", \"\
  Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
  Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
  \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
completions: ["    return 1;\n}", "\tvar arr = ['Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\tvar n1, n2;\n\tfor(var i = 0;\
    \ i < arr.length; i++){\n\t\tif(arr[i] == planet1){\n\t\t\tn1 = i;\n\t\t}\n\t\t\
    if(arr[i] == planet2){\n\t\t\tn2 = i;\n\t\t}\n\t}\n\tif(n1 < n2){\n\t\tvar n =\
    \ n1;\n\t\tn1 = n2;\n\t\tn2 = n;\n\t}\n\tvar arr1 = arr.slice(n2+1, n1);\n\tvar\
    \ arr2 = arr.slice(n1+1);\n\tarr2 = arr2.concat(arr.slice(0, n2));\n\treturn arr1.concat(arr2);\n\
    }", "\tvar planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\n\tvar ans = [];\n\tif (planets.indexOf(planet1) === -1\
    \ || planets.indexOf(planet2) === -1) {\n\t\treturn [];\n\t}\n\tif (planets.indexOf(planet1)\
    \ > planets.indexOf(planet2)) {\n\t\tvar temp = planet1;\n\t\tplanet1 = planet2;\n\
    \t\tplanet2 = temp;\n\t}\n\tfor (var i = planets.indexOf(planet1) + 1; i < planets.indexOf(planet2);\
    \ i++) {\n\t\tans.push(planets[i]);\n\t}\n\treturn ans;\n}", "\tif(planet1===planet2){\n\
    \t\treturn [];\n\t}\n\tvar p1, p2;\n\tfor(var i=0; i<planets.length; i++){\n\t\
    \tif(planets[i]===planet1){\n\t\t\tp1=i;\n\t\t}else if(planets[i]===planet2){\n\
    \t\t\tp2=i;\n\t\t}\n\t}\n\tvar re = [];\n\tif(p1<p2){\n\t\tfor(var i=p1+1; i<p2;\
    \ i++){\n\t\t\tre.push(planets[i]);\n\t\t}\n\t}else{\n\t\tfor(var i=p2+1; i<p1;\
    \ i++){\n\t\t\tre.push(planets[i]);\n\t\t}\n\t}\n\treturn re;\n}\n", "    let\
    \ planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"];\n    let orbitIndex1 = -1;\n    let orbitIndex2 =\
    \ -1;\n    let i = 0;\n    while(i < planets.length){\n        if(planets[i] ===\
    \ planet1){\n            orbitIndex1 = i;\n        }\n        if(planets[i] ===\
    \ planet2){\n            orbitIndex2 = i;\n        }\n        i++;\n    }\n  \
    \  if(orbitIndex1 < 0 || orbitIndex2 < 0){\n        return [];\n    } else if(orbitIndex1\
    \ === orbitIndex2){\n        return [];\n    } else if(orbitIndex1 > orbitIndex2){\n\
    \        return planets.slice(orbitIndex2, orbitIndex1 + 1);\n    } else {\n \
    \       return planets.slice(orbitIndex1, orbitIndex2 + 1);\n    }\n}\n", "  let\
    \ planets = {\n    mercury: 0,\n    venus: 1,\n    earth: 2,\n    mars: 3,\n \
    \   jupiter: 4,\n    saturn: 5,\n    uranus: 6,\n    neptune: 7\n  }\n  if(planets[planet1]\
    \ === undefined || planets[planet2] === undefined){\n    return []\n  }\n  let\
    \ result = []\n  let start = planets[planet1]\n  let end = planets[planet2]\n\
    \  let temp = start\n  if(start > end){\n    temp = end\n    end = start\n   \
    \ start = temp\n  }\n  temp = Object.keys(planets)\n  for(let i = start; i < end;\
    \ i++){\n    result.push(temp[i])\n  }\n  return result\n}\n", "  let planets\
    \ = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"];\n  let ind = planets.indexOf(planet1);\n  let ind2 = planets.indexOf(planet2);\n\
    \  let arr = [];\n  if(ind2<ind){\n    arr = planets.slice(ind2, ind+1);\n  }else{\n\
    \    arr = planets.slice(ind, ind2+1);\n  }\n  return arr;\n}", "let planets =\
    \ [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"];\nlet arr = planets.filter(el => el === planet1 || el === planet2);\n\
    if(arr.length === 2){\n  let index1 = planets.indexOf(planet1);\n  let index2\
    \ = planets.indexOf(planet2);\n  if(index1 < index2){\n    return planets.slice(index1+1,\
    \ index2);\n  }else if(index1 > index2){\n    return planets.slice(index2+1, index1);\n\
    \  }\n}else{\n  return [];\n}\n}\n\nbf(\"Mercury\", \"Mars\");//(\"Venus\", \"\
    Earth\")\nbf(\"Mercury\", \"Jupiter\");//(\"Venus\", \"Earth\", \"Mars\")\nbf(\"\
    Earth\", \"Mars\");//(\"Venus\")\nbf(\"Mercury\", \"Neptune\");//(\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")\nbf(\"Jupiter\", \"Neptune\"\
    );//(\"Saturn\", \"Uranus\")\nbf(\"Jupiter\", \"Saturn\");//(\"Uranus\")\nbf(\"\
    Jupiter\", \"Uranus\");//()\nbf(\"Jupiter\", \"Pluto\");//()\nbf(\"Jupiter\",\
    \ \"Earth\");//()\nbf(\"Venus\", \"Earth\");//()\nbf(\"Venus\", \"Venus\");//()\n\
    bf(\"Saturn\", \"Uranus\");//()\nbf(\"Saturn\", \"Jupiter\");//()\nbf(\"Pluto\"\
    , \"Neptune\");//()\nbf(\"Pluto\", \"Jupiter\");//()", "\tvar planets = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n\tvar p1 = planets.indexOf(planet1);\n\tvar p2 = planets.indexOf(planet2);\n\
    \tvar sorted = [];\n\tif(p1 == -1 || p2 == -1){\n\t\treturn [];\n\t}\n\telse if(p1<p2){\n\
    \t\tfor(var i = p1+1; i<p2; i++){\n\t\t\tsorted.push(planets[i]);\n\t\t}\n\t}\n\
    \telse{\n\t\tfor(var i = p2+1; i<p1; i++){\n\t\t\tsorted.push(planets[i]);\n\t\
    \t}\n\t}\n\treturn sorted;\n}\n", "\t\tvar planets = [\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\t\t\
    var orbits = [57, 108, 150, 228, 778, 1429, 2882, 4498];\n\t\tvar po1 = planets.indexOf(planet1);\n\
    \t\tvar po2 = planets.indexOf(planet2);\n\t\tvar check1 = false;\n\t\tvar check2\
    \ = false;\n\t\tvar between = [];\n\t\tfor(var i = 0; i < planets.length; i++){\n\
    \t\t\tif(planets[i] == planet1){\n\t\t\t\tcheck1 = true;\n\t\t\t}\n\t\t\tif(planets[i]\
    \ == planet2){\n\t\t\t\tcheck2 = true;\n\t\t\t}\n\t\t}\n\t\tif(check1 == true\
    \ && check2 == true){\n\t\t\tif(po1 > po2){\n\t\t\t\tvar temp = po1;\n\t\t\t\t\
    po1 = po2;\n\t\t\t\tpo2 = temp;\n\t\t\t}\n\t\t\tfor(var i = po1 + 1; i < po2;\
    \ i++){\n\t\t\t\tbetween.push(planets[i]);\n\t\t\t}\n\t\t\tconsole.log(between);\n\
    \t\t}\n\t\telse{\n\t\t\tconsole.log(\"Error\");\n\t\t}\n}", "  let sol = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n  let a = sol.indexOf(planet1);\n  let b = sol.indexOf(planet2);\n  let c\
    \ = sol.slice(a, b+1);\n  if(planet1 == \"\"){\n    return [];\n  }\n  else if(planet2\
    \ == \"\"){\n    return [];\n  }\n  else if(a == -1 || b == -1){\n    return [];\n\
    \  }\n  else if(a >= b){\n    return [];\n  }\n  else{\n    return c;\n  }\n}",
  "\t// planet1 and planet2 are the two planets and their \n\t// order in the tuple\
    \ doesn't matter\n\t// sort them\n\tvar planets = {\n\t\t\"Mercury\":1,\n\t\t\"\
    Venus\":2,\n\t\t\"Earth\":3,\n\t\t\"Mars\":4,\n\t\t\"Jupiter\":5,\n\t\t\"Saturn\"\
    :6,\n\t\t\"Uranus\":7,\n\t\t\"Neptune\":8\n\t};\n\t// check planet1\n\tif(!planets[planet1]){\n\
    \t\t// planet1 is not a valid planet name\n\t\treturn [];\n\t}\n\t// check planet2\n\
    \tif(!planets[planet2]){\n\t\t// planet2 is not a valid planet name\n\t\treturn\
    \ [];\n\t}\n\t// these are the tuple, the planets between planet1 and planet2\n\
    \tvar result = [];\n\t// if planet1 is smaller than planet2,\n\t// fill in the\
    \ results\n\tif(planets[planet1] < planets[planet2]){\n\t\t// since planet1 is\
    \ smaller than planet2,\n\t\t// the index of planet1 is smaller than the index\
    \ of planet2\n\t\tfor(var i = planets[planet1]; i < planets[planet2]; i++){\n\t\
    \t\t// save the planet whose index is i\n\t\t\tresult.push(planet1);\n\t\t}\n\t\
    }else{\n\t\t// since planet1 is larger than planet2,\n\t\t// the index of planet1\
    \ is larger than the index of planet2\n\t\tfor(var i = planets[planet2]; i < planets[planet1];\
    \ i++){\n\t\t\t// save the planet whose index is i\n\t\t\tresult.push(planet2);\n\
    \t\t}\n\t}\n\t// return the tuple\n\treturn result;\n}\nvar tuple = bf(\"Mercury\"\
    , \"Neptune\");", "    var planets = {\n        'Mercury': 1,\n        'Venus':\
    \ 2,\n        'Earth': 3,\n        'Mars': 4,\n        'Jupiter': 5,\n       \
    \ 'Saturn': 6,\n        'Uranus': 7,\n        'Neptune': 8\n    };\n    if(!(planet1\
    \ in planets) || !(planet2 in planets)){\n        return [];\n    }\n    var from\
    \ = planets[planet1];\n    var to = planets[planet2];\n    var res = [];\n   \
    \ if(from > to){\n        var tmp = from;\n        from = to;\n        to = tmp;\n\
    \    }\n    for(var k in planets){\n        if(planets[k] >= from && planets[k]\
    \ <= to){\n            res.push(k);\n        }\n    }\n    return res;\n}\n\n",
  "    const planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\n    const arr = [];\n    const start = planets.indexOf(planet1);\n\
    \    const end = planets.indexOf(planet2);\n    if(start >=0 && end >=0 ){\n \
    \       if(start < end){\n            for(let i = start + 1; i < end; i++){\n\
    \                arr.push(planets[i]);\n            }\n        }else{\n      \
    \      for(let i = end + 1; i < start; i++){\n                arr.push(planets[i]);\n\
    \            }\n        }\n    }\n    return arr;\n}", "    //YOUR CODE\n}", " \
    \   planet = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'];\n    let pos1 = planet.indexOf(planet1);\n    let pos2 = planet.indexOf(planet2);\n\
    \    if(pos1 > -1 && pos2 > -1){\n        let next = [];\n        if(pos1 > pos2){\n\
    \            let temp = pos1;\n            pos1 = pos2;\n            pos2 = temp;\n\
    \        }\n        for(let i = pos1 + 1; i < pos2; i++){\n            next.push(planet[i]);\n\
    \        }\n        return next;\n    }\n    return [];\n}\n\nvar planets = bf('Earth',\
    \ 'Neptune');", "    var res = [];\n    var planets = [\n        'Mercury',\n\
    \        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n   \
    \     'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    if(planets.indexOf(planet1)\
    \ === -1){\n        return res;\n    }\n    if(planets.indexOf(planet2) === -1){\n\
    \        return res;\n    }\n    var fst = planets.indexOf(planet1);\n    var\
    \ snd = planets.indexOf(planet2);\n    if(fst > snd){\n        var tmp = snd;\n\
    \        snd = fst;\n        fst = tmp;\n    }\n    for(var i = fst + 1; i < snd;\
    \ i++){\n        res.push(planets[i]);\n    }\n    return res;\n}\n\nmodule.exports\
    \ = {\n    firstName: \"Name\",\n    secondName: \"Surname\",\n    task: bf\n}",
  "\tvar planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"];\n\tvar i = planets.indexOf(planet1);\n\tvar j = planets.indexOf(planet2);\n\
    \tif(i === -1 || j === -1){\n\t\treturn [];\n\t}\n\tif(i<j){\n\t\treturn planets.slice(i+1,\
    \ j);\n\t}\n\telse{\n\t\treturn planets.slice(j+1, i);\n\t}\n}", "    var planets\
    \ = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\
    \    var index1 = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n\
    \    if(index1 === -1 || index2 === -1){\n        return [];\n    } else if(index1\
    \ === index2){\n        return [];\n    } else if(index1 > index2){\n        var\
    \ result = [];\n        for(var i = index2 + 1; i < index1; i++){\n          \
    \  result.push(planets[i]);\n        }\n        return result;\n    } else if(index1\
    \ < index2){\n        var result = [];\n        for(var i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n        return result;\n\
    \    }\n}\n", "    let arr=[];\n    if (planet1===\"Mercury\"){\n        arr.push(...solarSystem.slice(0,solarSystem.indexOf(planet2)+1));\n\
    \    }\n    else if (planet2===\"Mercury\"){\n        arr.push(...solarSystem.slice(solarSystem.indexOf(planet1),solarSystem.length));\n\
    \    }\n    else if (planet1===\"Venus\"){\n        arr.push(...solarSystem.slice(1,solarSystem.indexOf(planet2)+1));\n\
    \    }\n    else if (planet2===\"Venus\"){\n        arr.push(...solarSystem.slice(solarSystem.indexOf(planet1),solarSystem.length));\n\
    \    }\n    else if (planet1===\"Earth\"){\n        arr.push(...solarSystem.slice(2,solarSystem.indexOf(planet2)+1));\n\
    \    }\n    else if (planet2===\"Earth\"){\n        arr.push(...solarSystem.slice(solarSystem.indexOf(planet1),solarSystem.length));\n\
    \    }\n    else if (planet1===\"Mars\"){\n        arr.push(...solarSystem.slice(3,solarSystem.indexOf(planet2)+1));\n\
    \    }\n    else if (planet2===\"Mars\"){\n        arr.push(...solarSystem.slice(solarSystem.indexOf(planet1),solarSystem.length));\n\
    \    }\n    else if (planet1===\"Jupiter\"){\n        arr.push(...solarSystem.slice(4,solarSystem.indexOf(planet2)+1));\n\
    \    }\n    else if (planet2===\"Jupiter\"){\n        arr.push(...solarSystem.slice(solarSystem.indexOf(planet1),solarSystem.length));\n\
    \    }\n    else if (planet1===\"Saturn\"){\n        arr.push(...solarSystem.slice(5,solarSystem.indexOf(planet2)+1));\n\
    \    }\n    else if (planet2===\"Saturn\"){\n        arr.push(...solarSystem.slice(solar",
  "  var solarSystem = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\", \"Neptune\"];\n  var index1 = solarSystem.indexOf(planet1);\n\
    \  var index2 = solarSystem.indexOf(planet2);\n  var result = [];\n  if (index1\
    \ === -1 || index2 === -1){\n    return [];\n  } else if (index1 > index2){\n\
    \    for (var i = index2; i <= index1; i++){\n      result.push(solarSystem[i]);\n\
    \    }\n  } else {\n    for (var i = index1; i <= index2; i++){\n      result.push(solarSystem[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  var orbit = ['Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n  var orbit1 = orbit.indexOf(planet1);\n\
    \  var orbit2 = orbit.indexOf(planet2);\n  if (orbit1 > -1 && orbit2 > -1){\n\
    \    if (orbit1 < orbit2){\n      return orbit.slice(orbit1 + 1, orbit2);\n  \
    \  } else {\n      return orbit.slice(orbit2 + 1, orbit1);\n    }\n  } else {\n\
    \    return [];\n  }\n}\n", "    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let p1 = planets.indexOf(planet1);\n\
    \    let p2 = planets.indexOf(planet2);\n    let res = [];\n    if (p1 >= 0 &&\
    \ p2 >= 0) {\n        if (p1 > p2) {\n            for (let i = p2 + 1; i < p1;\
    \ i++) {\n                res.push(planets[i]);\n            }\n        } else\
    \ {\n            for (let i = p1 + 1; i < p2; i++) {\n                res.push(planets[i]);\n\
    \            }\n        }\n    }\n    return res;\n}", "    var planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    var\
    \ index1 = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n\
    \    if (index1 == -1 || index2 == -1) return [];\n    var ret = planets.slice(index1,\
    \ index2 + 1);\n    return ret;\n}", "    let x = ['Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    let y = [0,0];\n   \
    \ let z = [0,0];\n    if (x.includes(planet1) && x.includes(planet2)){\n     \
    \   y[0] = x.indexOf(planet1);\n        y[1] = x.indexOf(planet2);\n        if\
    \ (y[0] > y[1]){\n            let t = y[0];\n            y[0] = y[1];\n      \
    \      y[1] = t;\n        }\n        for (let i = y[0]; i <= y[1]; i++){\n   \
    \         z.push(x[i]);\n        }\n        z.shift();\n        return z;\n  \
    \  } else {\n        return z;\n    }\n}", "    let names= [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let a= names.indexOf(planet1);\n    let b= names.indexOf(planet2);\n    if(a\
    \ < 0 || b < 0){\n        return [];\n    }\n    if(a < b){\n        return names.slice(a,\
    \ b+1);\n    }\n    else{\n        return names.slice(b, a+1);\n    }\n}\n", " \
    \   let planets = [\n        'Mercury',\n        'Venus',\n        'Earth',\n\
    \        'Mars',\n        'Jupiter',\n        'Saturn',\n        'Uranus',\n \
    \       'Neptune'\n    ];\n    if(planets.indexOf(planet1) === -1 || planets.indexOf(planet2)\
    \ === -1){\n        return [];\n    }\n\n    let min = planets.indexOf(planet1);\n\
    \    let max = planets.indexOf(planet2);\n    if(min > max){\n        [min, max]\
    \ = [max, min];\n    }\n    return planets.slice(min + 1, max);\n}\n", "    const\
    \ planetNames = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'];\n    const planetPositions = {\n        Mercury: 1,\n        Venus:\
    \ 2,\n        Earth: 3,\n        Mars: 4,\n        Jupiter: 5,\n        Saturn:\
    \ 6,\n        Uranus: 7,\n        Neptune: 8\n    };\n    if(!planetPositions[planet1]\
    \ || !planetPositions[planet2]) return [];\n    const result = [];\n    let planet1Pos\
    \ = planetPositions[planet1];\n    let planet2Pos = planetPositions[planet2];\n\
    \    if(planet1Pos > planet2Pos){\n        [planet1Pos, planet2Pos] = [planet2Pos,\
    \ planet1Pos];\n    }\n    for(let i = planet1Pos; i <= planet2Pos; i++){\n  \
    \      result.push(planetNames[i - 1]);\n    }\n    return result;\n}\n", "  \
    \  let position = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'];\n    let pos1 = position.indexOf(planet1);\n    let pos2 = position.indexOf(planet2);\n\
    \    if(pos1 == -1 || pos2 == -1){\n        return [];\n    }\n    if(pos1 < pos2){\n\
    \        return position.slice(pos1+1, pos2)\n    }\n    return position.slice(pos2+1,\
    \ pos1)\n}\n", "    let planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'];\n    let index1 = planets.indexOf(planet1);\n\
    \    let index2 = planets.indexOf(planet2);\n    let planetsBtwn = [];\n    if(index1\
    \ === -1 || index2 === -1) {\n        return []\n    }\n    if(index1 < index2)\
    \ {\n        planetsBtwn = planets.slice(index1 + 1, index2);\n    } else {\n\
    \        planetsBtwn = planets.slice(index2 + 1, index1);\n    }\n    return planetsBtwn;\n\
    }\n", "\tvar solarSystem = {\n\t\t\"Mercury\": { \"next\": \"Venus\", \"previous\"\
    : null},\n\t\t\"Venus\": {\"next\": \"Earth\", \"previous\": \"Mercury\"},\n\t\
    \t\"Earth\": {\"next\": \"Mars\", \"previous\": \"Venus\"},\n\t\t\"Mars\": {\"\
    next\": \"Jupiter\", \"previous\": \"Earth\"},\n\t\t\"Jupiter\": {\"next\": \"\
    Saturn\", \"previous\": \"Mars\"},\n\t\t\"Saturn\": {\"next\": \"Uranus\", \"\
    previous\": \"Jupiter\"},\n\t\t\"Uranus\": {\"next\": \"Neptune\", \"previous\"\
    : \"Saturn\"},\n\t\t\"Neptune\": {\"next\": null, \"previous\": \"Uranus\"}\n\t\
    };\n\t//make sure planet1 and planet2 are real planets\n\tif (!solarSystem[planet1]\
    \ || !solarSystem[planet2]){\n\t\treturn [];\n\t}\n\n\tvar prevPlanet = planet1;\n\
    \tvar nextPlanet = solarSystem[planet1].next;\n\tvar planetsArr = [];\n\twhile\
    \ (prevPlanet !== planet2){\n\t\tplanetsArr.push(prevPlanet);\n\t\tprevPlanet\
    \ = nextPlanet;\n\t\tnextPlanet = solarSystem[nextPlanet].next;\n\t}\n\tplanetsArr.push(planet2);\n\
    \treturn planetsArr;\n}\n", "    var a = [\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if(a.indexOf(planet1)<0\
    \ || a.indexOf(planet2)<0)\n        return [];\n    var b = a.slice(a.indexOf(planet1)+1,\
    \ a.indexOf(planet2));\n    return b;\n}\nbf(\"Mercury\", \"Mars\");//[\"Venus\"\
    , \"Earth\"]\nbf(\"Mercury\", \"Jupiter\");//[\"Venus\", \"Earth\", \"Mars\"]\n\
    bf(\"Earth\", \"Jupiter\");//[\"Mars\"]\nbf(\"Mercury\", \"Mercury\");//[]\nbf(\"\
    Jupiter\", \"Mars\");//[]\n", "    let planets = [\n        { planet: 'Mercury',\
    \ orbit: 0 },\n        { planet: 'Venus', orbit: 0.7 },\n        { planet: 'Earth',\
    \ orbit: 1 },\n        { planet: 'Mars', orbit: 1.5 },\n        { planet: 'Jupiter',\
    \ orbit: 5.2 },\n        { planet: 'Saturn', orbit: 9.5 },\n        { planet:\
    \ 'Uranus', orbit: 19.6 },\n        { planet: 'Neptune', orbit: 30 },\n    ];\n\
    \    let index1 = planets.findIndex(function(planet){\n        return planet.planet\
    \ === planet1;\n    });\n    let index2 = planets.findIndex(function(planet){\n\
    \        return planet.planet === planet2;\n    });\n    if(index1 >= 0 && index2\
    \ >= 0){\n        if(index1 > index2){\n            let temp = index1;\n     \
    \       index1 = index2;\n            index2 = temp;\n        }\n        let planetsBetween\
    \ = planets.slice(index1, index2 + 1);\n        let result = planetsBetween.map(function(planet){\n\
    \            return planet.planet;\n        });\n        return result;\n    }\
    \ else {\n        return [];\n    }\n}", "\tvar planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\t\
    if(planets.indexOf(planet1) == -1 || planets.indexOf(planet2) == -1)\n\t\treturn\
    \ [];\n\tvar first = planets.indexOf(planet1);\n\tvar second = planets.indexOf(planet2);\n\
    \tif(first > second){\n\t\tvar temp = first;\n\t\tfirst = second;\n\t\tsecond\
    \ = temp;\n\t}\n\tvar result = [];\n\tfor(var i = first + 1; i < second; i++){\n\
    \t\tresult.push(planets[i]);\n\t}\n\treturn result;\n}\n", "    function getIndexOf(planet){\n\
    \        var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n        return planets.indexOf(planet);\n\
    \    }\n    var p1 = getIndexOf(planet1);\n    var p2 = getIndexOf(planet2);\n\
    \    if(p1==-1 || p2==-1){\n        return [];\n    }\n    var res = [];\n   \
    \ if(p1<p2){\n        for(var i=p1+1; i<p2; i++){\n            res.push(planets[i]);\n\
    \        }\n    }else{\n        for(var i=p2+1; i<p1; i++){\n            res.push(planets[i]);\n\
    \        }\n    }\n    return res;\n}", "  let planets = [\n    \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \n  ];\n  if (planets.indexOf(planet1) == -1 || planets.indexOf(planet2) == -1)\
    \ {\n    return []\n  }\n  let index1 = planets.indexOf(planet1);\n  let index2\
    \ = planets.indexOf(planet2);\n  let newplanets = planets.slice(index1, index2\
    \ + 1);\n  if (newplanets.length == 0){\n    return []\n  }\n  else {\n    return\
    \ newplanets;\n  }\n}", "  let planets = {\n    \"Mercury\":1,\n    \"Venus\"\
    :2,\n    \"Earth\":3,\n    \"Mars\":4,\n    \"Jupiter\":5,\n    \"Saturn\":6,\n\
    \    \"Uranus\":7,\n    \"Neptune\":8\n  }\n  let planet1_position = planets[planet1];\n\
    \  let planet2_position = planets[planet2];\n  if(planet1_position === undefined\
    \ || planet2_position === undefined){\n    return []\n  }\n  let result = []\n\
    \  if(planet1_position<planet2_position){\n    for(let i = planet1_position+1;\
    \ i<planet2_position; i++){\n      for(key in planets){\n        if(planets[key]===i){\n\
    \          result.push(key)\n        }\n      }\n    }\n  }\n  else{\n    for(let\
    \ i = planet2_position+1; i<planet1_position; i++){\n      for(key in planets){\n\
    \        if(planets[key]===i){\n          result.push(key)\n        }\n      }\n\
    \    }\n  }\n  return result\n}\n", "    let planets = {\n        \"Mercury\"\
    : 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n   \
    \     \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n      \
    \  \"Neptune\": 8\n    }\n    let a = planets[planet1]\n    let b = planets[planet2]\n\
    \    if(a == undefined || b == undefined) return ()\n    let listOfPlanets = []\n\
    \    if(a>b){\n        let r = a\n        a = b\n        b = r\n    }\n    for(let\
    \ i = a; i<=b; i++){\n        for(key in planets){\n            if(planets[key]==i){\n\
    \                listOfPlanets.push(key)\n            }\n        }\n    }\n  \
    \  return listOfPlanets\n}", "  let arr = ['Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n  let found1 = arr.indexOf(planet1);\n\
    \  let found2 = arr.indexOf(planet2);\n  let middle = [];\n  if (found1 > -1 &&\
    \ found2 > -1) {\n    if (found1 > found2) {\n      for (let i = found2 + 1; i\
    \ < found1; i++) {\n        middle.push(arr[i]);\n      }\n    } else {\n    \
    \  for (let i = found1 + 1; i < found2; i++) {\n        middle.push(arr[i]);\n\
    \      }\n    }\n  }\n  return middle;\n}\n", "    const planets = {\n       \
    \ \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\"\
    : 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n\
    \        \"Neptune\": 8\n    }\n    // check to see if planet1 and planet2 are\
    \ planets in solar system\n    let planet1Ord, planet2Ord;\n    if(planets[planet1]\
    \ !== undefined && planets[planet2] !== undefined){\n        planet1Ord = planets[planet1];\n\
    \        planet2Ord = planets[planet2];\n    }\n    else{\n        return [];\n\
    \    }\n    // figure out which one is closer to the sun\n    let closer, farther;\n\
    \    if(planet1Ord < planet2Ord){\n        closer = planet1Ord;\n        farther\
    \ = planet2Ord;\n    }\n    else{\n        closer = planet2Ord;\n        farther\
    \ = planet1Ord;\n    }\n    // build array of planets between closer and farther\n\
    \    let result = [];\n    for(let i = closer+1; i < farther; i++){\n        let\
    \ key = Object.keys(planets).find(key => planets[key] === i);\n        result.push(key);\n\
    \    }\n    return result;\n}\n", "  let s = ['Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n  let r = s.filter(x => x > planet1\
    \ && x < planet2);\n  console.log(r);\n}\n\nbf('Mars', 'Jupiter');", "\tconst\
    \ planets = {\n\t\tMercury: 1,\n\t\tVenus: 2,\n\t\tEarth: 3,\n\t\tMars: 4,\n\t\
    \tJupiter: 5,\n\t\tSaturn: 6,\n\t\tUranus: 7,\n\t\tNeptune: 8\n\t}\n\tif(!planets[planet1]\
    \ || !planets[planet2]){\n\t\treturn []\n\t}\n\tlet min = Math.min(planets[planet1],\
    \ planets[planet2])\n\tlet max = Math.max(planets[planet1], planets[planet2])\n\
    \tlet res = []\n\tfor(let planet in planets){\n\t\tif(planets[planet] > min &&\
    \ planets[planet] < max){\n\t\t\tres.push(planet)\n\t\t}\n\t}\n\treturn res\n}",
  "\t\nlet arr = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"];\nlet index1 = arr.indexOf(planet1);\nlet index2 =\
    \ arr.indexOf(planet2);\nlet ans = [];\nif (index1 > index2) {\n\tfor (let i =\
    \ index2; i <= index1; i++) {\n\t\tans.push(arr[i]);\n\t}\n}\nelse {\n\tfor (let\
    \ i = index1; i <= index2; i++) {\n\t\tans.push(arr[i]);\n\t}\n}\nreturn ans;\n\
    }\n", "    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n    let pos1 = planets.indexOf(planet1);\n\
    \    let pos2 = planets.indexOf(planet2);\n    let output = [];\n    if(pos1 ===\
    \ -1 || pos2 === -1){\n        return output;\n    }\n    if(pos1 > pos2){\n \
    \       let temp = pos1;\n        pos1 = pos2;\n        pos2 = temp;\n    }\n\
    \    for(let i = pos1 + 1; i < pos2; i++){\n        output.push(planets[i]);\n\
    \    }\n    return output;\n}", "  const res = []\n  const planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  const\
    \ planet1Idx = planets.indexOf(planet1)\n  const planet2Idx = planets.indexOf(planet2)\n\
    \  if(planet1Idx === -1 || planet2Idx === -1){\n    return res\n  }\n  if(planet1Idx\
    \ < planet2Idx){\n    for(let i = planet1Idx + 1; i < planet2Idx; i++){\n    \
    \  res.push(planets[i])\n    }\n  }else{\n    for(let i = planet2Idx + 1; i <\
    \ planet1Idx; i++){\n      res.push(planets[i])\n    }\n  }\n  return res\n}\n\
    \nconst res = bf('Mars', 'Earth')", "\tvar planets = [];\n\tif(planet1 == planet2){\n\
    \t\treturn planets;\n\t}\n\tvar index1 =  [\"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"].indexOf(planet1);\n\
    \tvar index2 =  [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"].indexOf(planet2);\n\tif(index1 == -1 || index2\
    \ == -1){\n\t\treturn planets;\n\t}\n\tif(index1 < index2){\n\t\tfor(var i = index1\
    \ + 1; i < index2; i++){\n\t\t\tplanets.push([\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"][i]);\n\t\t}\n\t\
    }\n\telse if(index1 > index2){\n\t\tfor(var i = index2 + 1; i < index1; i++){\n\
    \t\t\tplanets.push([\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\", \"Neptune\"][i]);\n\t\t}\n\t}\n\treturn planets;\n}\n",
  "    var planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'];\n    planet1 = planets.indexOf(planet1);\n    planet2 = planets.indexOf(planet2);\n\
    \    if(planet1 == -1 || planet2 == -1) {\n        return [];\n    }\n    if(planet1\
    \ <= planet2) {\n        return planets.slice(planet1+1, planet2);\n    } else\
    \ {\n        return planets.slice(planet2+1, planet1);\n    }\n}", "  let p =\
    \ ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\
    \  let b = p.indexOf(planet1), e = p.indexOf(planet2);\n  return (b < 0 || e <\
    \ 0 || b >= e) ? [] : p.slice(b+1, e);\n}", "    \n    var planets =[\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    var n1=planets.indexOf(planet1);\n    var n2=planets.indexOf(planet2);\n\
    \    var res=[];\n    if(n1<0 || n2<0){\n        return res;\n    }\n    if(n1<n2){\n\
    \        for(i=n1+1;i<n2;i++){\n            res.push(planets[i]);\n        }\n\
    \    }else{\n        for(i=n2+1;i<n1;i++){\n            res.push(planets[i]);\n\
    \        }\n    }\n    return res;\n}", "    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if(index1 < 0 || index2 < 0){\n        return [];\n    }\n    return planets.slice(index1\
    \ + 1, index2);\n}\n", "\tvar res = [];\n\tvar index1 = 0;\n\tvar index2 = 0;\n\
    \tvar planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"];\n\tif(planets.indexOf(planet1) != -1 && planets.indexOf(planet2)\
    \ != -1){\n\t\tindex1 = planets.indexOf(planet1);\n\t\tindex2 = planets.indexOf(planet2);\n\
    \t\tif(index1 < index2){\n\t\t\tfor(var i = index1+1; i < index2; i++){\n\t\t\t\
    \tres.push(planets[i]);\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tfor(var i = index2+1;\
    \ i < index1; i++){\n\t\t\t\tres.push(planets[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ res;\n}\n", "    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let sPlanets = planets.slice(planets.indexOf(planet1),\
    \ planets.indexOf(planet2)+1);\n    return sPlanets;\n}", "\tvar pos1 = [], pos2\
    \ = [], px = [], result = [], object, object2, a=0, b=0;\n\tvar system = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n\tfor(var i=0; i<system.length; i++){\n\t\tif(system[i] == planet1){\n\t\t\
    \tobject = system[i];\n\t\t\tpos1 = system.slice(i);\n\t\t\ta = 1;\n\t\t} else\
    \ if(system[i] == planet2){\n\t\t\tobject2 = system[i];\n\t\t\tpos2 = system.slice(i);\n\
    \t\t\tb = 1;\n\t\t}\n\t}\n\tvar r1 = pos1.indexOf(object2);\n\tvar r2 = pos2.indexOf(object);\n\
    \tif(r1 != -1 && r2 != -1 && a == 1 && b == 1){\n\t\tpx = pos1.slice(0, r1);\n\
    \t\tfor(var i=0; i<px.length; i++){\n\t\t\tif(px[i] != object){\n\t\t\t\tresult.push(px[i]);\n\
    \t\t\t}\n\t\t}\n\t\tpx = pos2.slice(r2);\n\t\tfor(var i=0; i<px.length; i++){\n\
    \t\t\tif(px[i] != object2){\n\t\t\t\tresult.push(px[i]);\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn result;\n}\n", "    // the function should return planets between planet1\
    \ and planet2\n    let all = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'];\n    let index1 = all.indexOf(planet1);\n  \
    \  let index2 = all.indexOf(planet2);\n    let a = all.slice(index1, index2 +\
    \ 1);\n    return a;\n}", "  let result = [];\n  const order = ['Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n  if(order.indexOf(planet1)\
    \ === -1 || order.indexOf(planet2) === -1) return [];\n  if(order.indexOf(planet1)\
    \ > order.indexOf(planet2)){\n    for(let i = order.indexOf(planet2); i <= order.indexOf(planet1);\
    \ i++){\n      result.push(order[i]);\n    }\n  }else{\n    for(let i = order.indexOf(planet1);\
    \ i <= order.indexOf(planet2); i++){\n      result.push(order[i]);\n    }\n  }\n\
    \  return result;\n}", "    let res = [];\n    const planets = ['Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    const p1 =\
    \ planets.indexOf(planet1);\n    const p2 = planets.indexOf(planet2);\n    const\
    \ sorted = planets.sort((a, b) => planets.indexOf(a) - planets.indexOf(b));\n\
    \    if (p1 == -1 || p2 == -1) return res;\n    for (let i = 0; i < sorted.length;\
    \ i++) {\n        if (sorted[i] == planet1) {\n            for (let j = i + 1;\
    \ j < sorted.length; j++) {\n                if (sorted[j] == planet2) {\n   \
    \                 break;\n                }\n                res.push(sorted[j]);\n\
    \            }\n        }\n    }\n    return res;\n}", "\tlet planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\t\n\t\
    \n\treturn [planet1, planet2];\n}", "\tlet planets = [\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\t\
    if (planets.indexOf(planet1) == -1 || planets.indexOf(planet2) == -1){\n\t\treturn\
    \ [];\n\t}\n\telse if (planets.indexOf(planet1) < planets.indexOf(planet2)){\n\
    \t\treturn planets.slice(planets.indexOf(planet1) + 1, planets.indexOf(planet2));\n\
    \t}\n\telse{\n\t\treturn planets.slice(planets.indexOf(planet2) + 1, planets.indexOf(planet1));\n\
    \t}\n}\nbf(\"Earth\", \"Mars\");//('Venus', 'Earth')\nbf(\"Mars\", \"Earth\");//('Venus',\
    \ 'Earth')\nbf(\"Uranus\", \"Mars\");//('Jupiter', 'Saturn', 'Uranus')\nbf(\"\
    Saturn\", \"Uranus\");//('Saturn', 'Uranus')\nbf(\"Venus\", \"Mercury\");//('Venus')\n\
    bf(\"Mercury\", \"Venus\");//('Venus')\nbf(\"Mercury\", \"Earth\");//('Venus',\
    \ 'Earth')\nbf(\"Earth\", \"Mercury\");//('Venus', 'Earth')\nbf(\"Mercury\", \"\
    Jupiter\");//('Venus', 'Earth', 'Mars', 'Jupiter')\nbf(\"Earth\", \"Neptune\"\
    );//('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nbf(\"\
    Saturn\", \"Pluto\");//()\nbf(\"Pluto\", \"Saturn\");//()\nbf(\"\", \"\");//()\n\
    bf(\"Jupiter\", \"Jupiter\");//()\nbf(\"Jupiter\", \"Saturn\");//('Jupiter')\n\
    bf(\"Saturn\", \"Jupiter\");//('Jupiter')\nbf(\"Earth\", \"Jupiter\");//('Venus',\
    \ 'Earth', 'Mars', 'Jupiter')\nbf(\"Jupiter\", \"Earth\");//('Venus', 'Earth',\
    \ 'Mars', 'Jupiter')\nbf(\"Mercury\", \"Mars\");//('Venus', 'Earth', '", "   \
    \ let res = [];\n    let ans = [];\n    let planets = ['Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    if(!planets.includes(planet1)\
    \ || !planets.includes(planet2)) return [];\n    for(let i = 0; i < planets.length;\
    \ i++){\n        if(planets[i] === planet1 || planets[i] === planet2){\n     \
    \       if(res.length === 0){\n                res.push(planets[i]);\n       \
    \     }\n            else{\n                ans = res;\n                return\
    \ ans;\n            }\n        }\n        else{\n            res.push(planets[i]);\n\
    \        }\n    }\n}", "    let result = [...arguments].sort((a,b)=>a-b)\n   \
    \ return result\n}", "  let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  if (planets.indexOf(planet1)\
    \ === -1 || planets.indexOf(planet2) === -1){\n    return [];\n  }\n  let newArr\
    \ = [];\n  if (planets.indexOf(planet1) > planets.indexOf(planet2)){\n    newArr\
    \ = planets.slice(planets.indexOf(planet2), planets.indexOf(planet1)+1);\n  }\
    \ else {\n    newArr = planets.slice(planets.indexOf(planet1), planets.indexOf(planet2)+1);\n\
    \  }\n  return newArr;\n}", "    var planets = {\n        Mercury: 1,\n      \
    \  Venus: 2,\n        Earth: 3,\n        Mars: 4,\n        Jupiter: 5,\n     \
    \   Saturn: 6,\n        Uranus: 7,\n        Neptune: 8\n    }\n    if(!(planet1\
    \ in planets) || !(planet2 in planets)){\n        return [];\n    }\n    var ans\
    \ = [];\n    var min, max;\n    if(planets[planet1] > planets[planet2]){\n   \
    \     min = planets[planet2];\n        max = planets[planet1];\n    }else{\n \
    \       min = planets[planet1];\n        max = planets[planet2];\n    }\n    for(var\
    \ i = min + 1; i < max; i++){\n        for(var planet in planets){\n         \
    \   if(planets[planet] == i){\n                ans.push(planet);\n           \
    \ }\n        }\n    }\n    return ans;\n}\n", "    let planets = {\n        mercury:1,\n\
    \        venus:2,\n        earth:3,\n        mars:4,\n        jupiter:5,\n   \
    \     saturn:6,\n        uranus:7,\n        neptune:8\n    }\n    let res = []\n\
    \    let p1 = planets[planet1]\n    let p2 = planets[planet2]\n    if(p1 > p2){\n\
    \        for(let i = p2; i <= p1; i++){\n            for(let [k,v] of Object.entries(planets)){\n\
    \                if(v === i){\n                    res.push(k)\n             \
    \   }\n            }\n        }\n    }else{\n        for(let i = p1; i <= p2;\
    \ i++){\n            for(let [k,v] of Object.entries(planets)){\n            \
    \    if(v === i){\n                    res.push(k)\n                }\n      \
    \      }\n        }\n    }\n    return res\n}\n", "    let planets = {\n     \
    \   Mercury: 1,\n        Venus: 2,\n        Earth: 3,\n        Mars: 4,\n    \
    \    Jupiter: 5,\n        Saturn: 6,\n        Uranus: 7,\n        Neptune: 8\n\
    \    }\n    let result = []\n    if (planets[planet1] && planets[planet2]){\n\
    \        for (let key in planets){\n            if (planets[key] < planets[planet2]\
    \ && planets[key] > planets[planet1]){\n                result.push(key)\n   \
    \         }\n        }\n    }\n    return result\n}\n", "    var planets = [\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"];\n    var ans = [];\n    var a = planets.indexOf(planet1);\n  \
    \  var b = planets.indexOf(planet2);\n    if(a==-1 || b==-1){\n        return\
    \ [];\n    }\n    if(a>b){\n        [a,b] = [b,a];\n    }\n    for(var i=a+1;i<b;i++){\n\
    \        ans.push(planets[i]);\n    }\n    return ans;\n}", "  //your code here\n\
    }\n\nbf('Mars', 'Jupiter'); // Returns ('Earth', 'Mars')\nbf('Saturn', 'Mars');\
    \ // Returns ('Earth', 'Mars')\nbf('Uranus', 'Saturn'); // Returns ('Jupiter',\
    \ 'Saturn')\nbf('Jupiter', 'Saturn'); // Returns ('Jupiter', 'Saturn')\nbf('Venus',\
    \ 'Earth'); // Returns ('Venus',)\nbf('Venus', 'Venus'); // Returns ()\nbf('Venus',\
    \ 'Mars'); // Returns ('Venus', 'Earth')\nbf('Saturn', 'Uranus'); // Returns ('Jupiter',\
    \ 'Saturn')\nbf('Uranus', 'Saturn'); // Returns ('Jupiter', 'Saturn')\nbf('Pluto',\
    \ 'Mars'); // Returns ()\nbf('Foo', 'Bar'); // Returns ()\n", "    let planets\
    \ = {\n        Mercury: 1,\n        Venus: 2,\n        Earth: 3,\n        Mars:\
    \ 4,\n        Jupiter: 5,\n        Saturn: 6,\n        Uranus: 7,\n        Neptune:\
    \ 8\n    }\n    if (planets[planet1] === undefined || planets[planet2] === undefined){\n\
    \        return [];\n    }\n    let newPlanets = [];\n    let max = Math.max(planets[planet1],\
    \ planets[planet2]);\n    let min = Math.min(planets[planet1], planets[planet2]);\n\
    \    for (let key in planets){\n        if (planets[key] > min && planets[key]\
    \ < max){\n            newPlanets.push(key);\n        }\n    }\n    return newPlanets;\n\
    }\n", "    let planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\n    let pl = planets.slice(planets.indexOf(planet1)+1,\
    \ planets.indexOf(planet2));\n    return pl.length > 0 ? pl : 'None';\n}", " \
    \   let planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'];\n    let allP = [];\n    for(i=0; i<planets.length; i++){\n    \
    \    if(planets[i] === planet1 || planets[i] === planet2){\n            allP.push(planets[i]);\n\
    \        }\n    }\n    if(allP.length === 0){\n        return allP;\n    }else\
    \ if(allP.length === 1){\n        return planet1;\n    }else{\n        let or1\
    \ = planets.indexOf(planet1);\n        let or2 = planets.indexOf(planet2);\n \
    \       let mid = [];\n        for(i=0; i<planets.length; i++){\n            if(i>=or1\
    \ && i<=or2){\n                mid.push(planets[i]);\n            }\n        }\n\
    \        return mid;\n    }\n}", "    let planets = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let\
    \ result = [];\n    let from = planets.indexOf(planet1);\n    let to = planets.indexOf(planet2);\n\
    \    if(from >= 0 && to >= 0 && from < to){\n        for(let i = from + 1; i <\
    \ to; i++){\n            result.push(planets[i]);\n        }\n    }\n    return\
    \ result;\n}\n", "\tlet planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'];\n\tlet set1 = new Set();\n\tlet set2 = new Set();\n\
    \tlet re = null;\n\tif(planets.indexOf(planet1) > -1 && planets.indexOf(planet2)\
    \ > -1){\n\t\tset1 = new Set(planets.slice(planets.indexOf(planet1) + 1, planets.indexOf(planet2)));\n\
    \t\tset2 = new Set(planets.slice(planets.indexOf(planet2) + 1, planets.indexOf(planet1)));\n\
    \t\tif(planets.indexOf(planet1) > planets.indexOf(planet2)){\n\t\t\tre = Array.from(set2);\n\
    \t\t}else{\n\t\t\tre = Array.from(set1);\n\t\t}\n\t}\n\treturn re;\n}\n", "  \
    \  const planets = [\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\"\
    ,\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\"\
    ,\n        \"Neptune\"\n    ];\n    let index1 = planets.indexOf(planet1);\n \
    \   let index2 = planets.indexOf(planet2);\n    let result = [];\n    if(index1\
    \ > index2){\n        let save = index1;\n        index1 = index2;\n        index2\
    \ = save;\n    }\n    for(let i = index1+1; i < index2; i++){\n        result.push(planets[i]);\n\
    \    }\n    return result;\n}\n", "\tif(!(planet1 in planets) || !(planet2 in\
    \ planets)){\n\t\treturn [];\n\t}\n\tif(planets[planet1] > planets[planet2]){\n\
    \t\tvar temp = planet1;\n\t\tplanet1 = planet2;\n\t\tplanet2 = temp;\n\t}\n\t\
    var res = Object.keys(planets).filter(function(planet){\n\t\treturn planets[planet]\
    \ > planets[planet1] && planets[planet] < planets[planet2];\n\t});\n\treturn res;\n\
    }\nvar planets = {\n\t\"Mercury\": 1,\n\t\"Venus\": 2,\n\t\"Earth\": 3,\n\t\"\
    Mars\": 4,\n\t\"Jupiter\": 5,\n\t\"Saturn\": 6,\n\t\"Uranus\": 7,\n\t\"Neptune\"\
    : 8\n};\n", "  var planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'];\n  var planet1 = planets.indexOf(planet1);\n\
    \  var planet2 = planets.indexOf(planet2);\n  var planets = [];\n  var str = '\
    \ ';\n  if (planet1 < 0 || planet2 < 0){\n      return [];\n  }\n  else if (planet1\
    \ > planet2){\n    for (var i = planet2 + 1; i < planet1; i++){\n      planets.push(planets[i]);\n\
    \    }\n  }\n  else if (planet1 < planet2){\n    for (var i = planet1 + 1; i <\
    \ planet2; i++){\n      planets.push(planets[i]);\n    }\n  }\n  else {\n    return\
    \ [];\n  }\n  return planets;\n}\nvar test_01 = bf('Jupiter', 'Saturn');", " \
    \ var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"];\n  var res = [];\n  if(planets.indexOf(planet1)\
    \ === -1 || planets.indexOf(planet2) === -1) return res;\n  if(planets.indexOf(planet1)\
    \ > planets.indexOf(planet2)){\n    var temp = planet1;\n    planet1 = planet2;\n\
    \    planet2 = temp;\n  }\n  for(var i = planets.indexOf(planet1) + 1; i < planets.indexOf(planet2);\
    \ i++){\n    res.push(planets[i]);\n  }\n  return res;\n}", "\tvar planets = [\n\
    \t\t{name: \"Mercury\", orbit: 87.969},\n\t\t{name: \"Venus\", orbit: 224.701},\n\
    \t\t{name: \"Earth\", orbit: 365.256363004},\n\t\t{name: \"Mars\", orbit: 686.971},\n\
    \t\t{name: \"Jupiter\", orbit: 4332.59},\n\t\t{name: \"Saturn\", orbit: 10759.22},\n\
    \t\t{name: \"Uranus\", orbit: 30688.5},\n\t\t{name: \"Neptune\", orbit: 60182}\n\
    \t];\n\tvar start = 0;\n\tvar end = 0;\n\tfor(var i = 0; i < planets.length; i++){\n\
    \t\tif(planets[i].name == planet1){\n\t\t\tstart = i;\n\t\t}\n\t\tif(planets[i].name\
    \ == planet2){\n\t\t\tend = i;\n\t\t}\n\t}\n\tif(start != 0 && end != 0){\n\t\t\
    var result = [];\n\t\tfor(var i = 0; i < planets.length; i++){\n\t\t\tif(planets[i].orbit\
    \ > planets[start].orbit && planets[i].orbit < planets[end].orbit){\n\t\t\t\t\
    result.push(planets[i].name);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}else{\n\t\
    \treturn [];\n\t}\n}", "    let p1 = p.indexOf(planet1);\n    let p2 = p.indexOf(planet2);\n\
    \    if(p1 >= 0 && p2 >= 0){\n        if(p1 < p2){\n            return p.slice(p1+1,\
    \ p2);\n        }\n        else{\n            return p.slice(p2+1, p1);\n    \
    \    }\n    }\n    else{\n        return [];\n    }\n}\n", "    const planets\
    \ = [\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"\
    Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n    \
    \    \"Neptune\",\n    ];\n    if(!planets.includes(planet1) || !planets.includes(planet2)){\n\
    \        return [];\n    }\n\n    const result = [];\n    let index1 = planets.indexOf(planet1);\n\
    \    let index2 = planets.indexOf(planet2);\n    if(index1>index2){\n        const\
    \ t = index1;\n        index1 = index2;\n        index2 = t;\n    }\n    for(let\
    \ i=index1+1; i<index2; i++){\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n", "\tvar planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\tvar planet1, planet2;\n\
    \tvar orbit1 = planets.indexOf(planet1);\n\tvar orbit2 = planets.indexOf(planet2);\n\
    \tvar str = \"\";\n\tfor(var i = orbit1; i < orbit2; i++){\n\t\tif(orbit1 ===\
    \ -1 || orbit2 === -1){\n\t\t\treturn \"empty\";\n\t\t}\n\t\telse{\n\t\t\tvar\
    \ newPlanet = planets[i];\n\t\t\tvar addPlanet = str + newPlanet;\n\t\t\tstr =\
    \ addPlanet;\n\t\t}\n\t}\n\treturn str;\n}", "    var planets = [\n        'Mercury',\n\
    \        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n   \
    \     'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    var orbit =\
    \ [];\n    var ret = [];\n    if(planet1 === planet2)\n        return [];\n  \
    \  if(planets.indexOf(planet1) === -1 || planets.indexOf(planet2) === -1)\n  \
    \      return [];\n    var l = Math.min(planets.indexOf(planet1), planets.indexOf(planet2));\n\
    \    var r = Math.max(planets.indexOf(planet1), planets.indexOf(planet2));\n \
    \   for(var i = l + 1; i < r; i++){\n        ret.push(planets[i]);\n    }\n  \
    \  return ret;\n}\n", "    const planets = {\n        'Mercury': 1,\n        'Venus':\
    \ 2,\n        'Earth': 3,\n        'Mars': 4,\n        'Jupiter': 5,\n       \
    \ 'Saturn': 6,\n        'Uranus': 7,\n        'Neptune': 8\n    }\n    if (planets[planet1]\
    \ && planets[planet2]){\n        const res = []\n        for (let i = Math.min(planets[planet1],\
    \ planets[planet2]); i <= Math.max(planets[planet1], planets[planet2]); i++){\n\
    \            res.push(Object.keys(planets).find(key => planets[key] === i))\n\
    \        }\n        return res\n    } else {\n        return []\n    }\n}", " \
    \ const planets = [\n    {planet: 'Mercury', order: 1},\n    {planet: 'Venus',\
    \ order: 2},\n    {planet: 'Earth', order: 3},\n    {planet: 'Mars', order: 4},\n\
    \    {planet: 'Jupiter', order: 5},\n    {planet: 'Saturn', order: 6},\n    {planet:\
    \ 'Uranus', order: 7},\n    {planet: 'Neptune', order: 8}\n  ];\n  const exist1\
    \ = planets.filter(planet => planet.planet === planet1);\n  const exist2 = planets.filter(planet\
    \ => planet.planet === planet2);\n  if (exist1.length === 0 || exist2.length ===\
    \ 0) {\n    return []\n  }\n  const min = Math.min(exist1[0].order, exist2[0].order);\n\
    \  const max = Math.max(exist1[0].order, exist2[0].order);\n  const list = planets.filter(planet\
    \ => planet.order >= min && planet.order <= max)\n  const res = list.map(planet\
    \ => planet.planet)\n  return res\n}\n\nconst assert = require('assert')\nassert.deepEqual(bf('Mercury',\
    \ 'Neptune'), ['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'])\n\
    assert.deepEqual(bf('Mercury', 'Mercury'), [])\nassert.deepEqual(bf('Mercury',\
    \ 'Earth'), ['Venus', 'Earth'])\nassert.deepEqual(bf('Neptune', 'Mercury'), [])\n\
    assert.deepEqual(bf('Neptune', 'Venus'), [])\nassert.deepEqual(bf('Neptune', 'Earth'),\
    \ ['Venus', 'Earth'])\nassert.deepEqual(bf('Neptune', 'Mars'), ['Venus', 'Earth',\
    \ 'Mars'])\nassert.deepEqual(bf('Neptune', 'Jupiter'), ['Venus', 'Earth', 'Mars',\
    \ 'Jupiter'])\nassert.deepEqual(bf('Neptune', 'Saturn'), ['Venus', 'Earth', 'Mars',\
    \ '", "\tvar solarSystem = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n\tvar i, j, p1, p2, tup = [];\n\tfor(i\
    \ = 0; i < solarSystem.length; i++){\n\t\tif(solarSystem[i] == planet1){\n\t\t\
    \tp1 = i;\n\t\t}\n\t\tif(solarSystem[i] == planet2){\n\t\t\tp2 = i;\n\t\t}\n\t\
    }\n\tif(!p1 && !p2){\n\t\treturn tup;\n\t}\n\tif(p1 > p2){\n\t\tvar temp = p1;\n\
    \t\tp1 = p2;\n\t\tp2 = temp;\n\t}\n\tif(p1 + 1 == p2){\n\t\treturn tup;\n\t}\n\
    \tfor(i = p1 + 1; i < p2; i++){\n\t\ttup.push(solarSystem[i]);\n\t}\n\treturn\
    \ tup;\n}", "    const planets = [\n        'Mercury',\n        'Venus',\n   \
    \     'Earth',\n        'Mars',\n        'Jupiter',\n        'Saturn',\n     \
    \   'Uranus',\n        'Neptune'\n    ];\n    let first = planets.indexOf(planet1);\n\
    \    let second = planets.indexOf(planet2);\n    let result = [];\n    if(first\
    \ > -1 && second > -1){\n        if(first < second){\n            for(let i =\
    \ first + 1; i < second; i++){\n                result.push(planets[i]);\n   \
    \         }\n        } else {\n            for(let i = second + 1; i < first;\
    \ i++){\n                result.push(planets[i]);\n            }\n        }\n\
    \    }\n    return result;\n}", "\tlet planets = [ 'Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ];\n\tlet p1 = planets.indexOf(planet1);\n\
    \tlet p2 = planets.indexOf(planet2);\n\tif(p1 === -1 || p2 === -1){\n\t\treturn\
    \ [];\n\t}\n\tif(p1 < p2){\n\t\treturn planets.slice(p1 + 1, p2);\n\t}else{\n\t\
    \treturn planets.slice(p2 + 1, p1);\n\t}\n}", "    //your code here\n    let x\
    \ = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\
    \    let y = [];\n    if (x.indexOf(planet1) < x.indexOf(planet2)){\n        for\
    \ (let i = x.indexOf(planet1) + 1; i < x.indexOf(planet2); i++){\n           \
    \ y.push(x[i]);\n        }\n    } else if (x.indexOf(planet1) > x.indexOf(planet2)){\n\
    \        for (let i = x.indexOf(planet2) + 1; i < x.indexOf(planet1); i++){\n\
    \            y.push(x[i]);\n        }\n    } else if (x.indexOf(planet1) == x.indexOf(planet2)){\n\
    \        y = [];\n    }\n    return y;\n  }\n  \n  console.log(bf('Earth', 'Mars'));\
    \ // ('Venus', 'Earth')\n  console.log(bf('Mars', 'Saturn')); // ('Mars', 'Jupiter',\
    \ 'Saturn')\n  console.log(bf('Mars', 'Jupiter')); // ('Mars')\n  console.log(bf('Uranus',\
    \ 'Neptune')); // ('Uranus')\n  console.log(bf('Uranus', 'Venus')); // ('Uranus',\
    \ 'Neptune')\n  console.log(bf('Neptune', 'Neptune')); // ()\n  console.log(bf('Mars',\
    \ 'Pluto')); // ()", "    let pl1 = 0;\n    let pl2 = 0;\n    let plan = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    let\
    \ res = [];\n    for(let i = 0; i < plan.length; i++){\n        if(plan[i] ==\
    \ planet1){\n            pl1 = i;\n        }\n        if(plan[i] == planet2){\n\
    \            pl2 = i;\n        }\n    }\n    if(pl1 >= pl2){\n        for(let\
    \ i = pl2; i <= pl1; i++){\n            res.push(plan[i]);\n        }\n    }\n\
    \    else{\n        for(let i = pl1; i <= pl2; i++){\n            res.push(plan[i]);\n\
    \        }\n    }\n    return res;\n}\n", "    let solarSystem = ['Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    if(!solarSystem.includes(planet1)\
    \ || !solarSystem.includes(planet2)){\n        return [];\n    }\n    let left\
    \ = solarSystem.indexOf(planet1);\n    let right = solarSystem.indexOf(planet2);\n\
    \    if(left > right){\n        let t = left;\n        left = right;\n       \
    \ right = t;\n    }\n    return solarSystem.slice(left+1, right);\n}\n", "\tlet\
    \ planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"];\n\tlet ans = [];\n\tlet start = planets.indexOf(planet1);\n\
    \tlet end = planets.indexOf(planet2);\n\tif(start == -1 || end == -1)\n\t\treturn\
    \ ans;\n\tif(start>end){\n\t\tlet tmp = start;\n\t\tstart = end;\n\t\tend = tmp;\n\
    \t}\n\tfor(let i = start+1; i<end; i++){\n\t\tans.push(planets[i]);\n\t}\n\treturn\
    \ ans;\n}\n", "    var planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'];\n    var p1 = planets.indexOf(planet1), p2 =\
    \ planets.indexOf(planet2);\n    if(p1 == -1 || p2 == -1)\n        return [];\n\
    \    if(p1>p2){\n        var d = p1;\n        p1 = p2;\n        p2 = d;\n    }\n\
    \    return planets.slice(p1+1, p2);\n}", "  let a = [\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let\
    \ i1 = a.indexOf(planet1);\n  let i2 = a.indexOf(planet2);\n  let ans = [];\n\
    \  for(let i = i1; i <= i2; i++){\n    ans.push(a[i]);\n  }\n  return ans;\n}\n",
  "    let result = [];\n    let planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'];\n    let myPlanets = planets.slice(planets.indexOf(planet1),\
    \ planets.indexOf(planet2) + 1);\n    if(planets.indexOf(planet1) > -1 && planets.indexOf(planet2)\
    \ > -1){\n        for(let i = 0; i < myPlanets.length; i++){\n            result.push(myPlanets[i]);\n\
    \        }\n    }\n    return result;\n}", "    if(planet1.toLowerCase() == \"\
    mercury\"){\n        if(planet2.toLowerCase() == \"mercury\"){\n            return\
    \ [];\n        }\n        if(planet2.toLowerCase() == \"venus\"){\n          \
    \  return [\"mercury\"];\n        }\n        if(planet2.toLowerCase() == \"earth\"\
    ){\n            return [\"mercury\", \"venus\"];\n        }\n        if(planet2.toLowerCase()\
    \ == \"mars\"){\n            return [\"mercury\", \"venus\", \"earth\"];\n   \
    \     }\n        if(planet2.toLowerCase() == \"jupiter\"){\n            return\
    \ [\"mercury\", \"venus\", \"earth\", \"mars\"];\n        }\n        if(planet2.toLowerCase()\
    \ == \"saturn\"){\n            return [\"mercury\", \"venus\", \"earth\", \"mars\"\
    , \"jupiter\"];\n        }\n        if(planet2.toLowerCase() == \"uranus\"){\n\
    \            return [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\"\
    , \"saturn\"];\n        }\n        if(planet2.toLowerCase() == \"neptune\"){\n\
    \            return [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\"\
    , \"saturn\", \"uranus\"];\n        }\n    }\n    if(planet1.toLowerCase() ==\
    \ \"venus\"){\n        if(planet2.toLowerCase() == \"venus\"){\n            return\
    \ [];\n        }\n        if(planet2.toLowerCase() == \"earth\"){\n          \
    \  return [\"venus\"];\n        }\n        if(planet2.toLowerCase() == \"mars\"\
    ){\n            return [\"venus\", \"earth\"];\n        }\n        if(planet2.toLowerCase()\
    \ == \"jupiter\"){\n            return [\"venus\", \"earth\", \"mars\"];\n   \
    \     }\n        if(planet2.toLowerCase() == \"saturn\"){\n            return\
    \ [\"venus\", \"earth\", \"mars\", \"jupiter\"];\n        }\n        if(planet2.toLowerCase()",
  "    const planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\n    let inx1 = planets.indexOf(planet1), inx2 = planets.indexOf(planet2);\n\
    \    if (inx1 < 0 || inx2 < 0){\n        return [];\n    }\n    if (inx1 > inx2){\n\
    \        [inx1, inx2] = [inx2, inx1];\n    }\n    return planets.slice(inx1 +\
    \ 1, inx2);\n}", "    let orbit = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'];\n    if (orbit.indexOf(planet1) === -1 || orbit.indexOf(planet2)\
    \ === -1){\n        return []\n    }\n    let p1 = orbit.indexOf(planet1);\n \
    \   let p2 = orbit.indexOf(planet2);\n    let ret = [];\n    for (let i = Math.min(p1,\
    \ p2) + 1; i < Math.max(p1, p2); i++){\n        ret.push(orbit[i]);\n    }\n \
    \   return ret;\n}", "\t\n}", "\tconst sys = ['Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\tlet idx1 = sys.indexOf(planet1);\n\
    \tlet idx2 = sys.indexOf(planet2);\n\tif(idx1<0 || idx2<0) return [];\n\tidx1<idx2\
    \ ? sys.splice(idx2+1, sys.length-idx2) : sys.splice(idx1+1, sys.length-idx1);\n\
    \tidx1<idx2 ? sys.splice(0, idx1) : sys.splice(0, idx2);\n\treturn sys;\n}\n",
  "    let planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'];\n    let p1 = planets.indexOf(planet1);\n    let p2 = planets.indexOf(planet2);\n\
    \    let result = []\n    for(let i = p1+1; i < p2; i++){\n        result.push(planets[i])\n\
    \    }\n    return result;\n}\n", "  let planets = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  if (planets.indexOf(planet1)\
    \ > planets.indexOf(planet2)){\n    return planets.slice(planets.indexOf(planet2),\
    \ planets.indexOf(planet1));\n  }\n  else if (planets.indexOf(planet1) < planets.indexOf(planet2)){\n\
    \    return planets.slice(planets.indexOf(planet1), planets.indexOf(planet2));\n\
    \  }\n  else {\n    return [];\n  }\n}", "\tvar planets = {\n\t\t\"Mercury\":1,\n\
    \t\t\"Venus\":2,\n\t\t\"Earth\":3,\n\t\t\"Mars\":4,\n\t\t\"Jupiter\":5,\n\t\t\"\
    Saturn\":6,\n\t\t\"Uranus\":7,\n\t\t\"Neptune\":8\n\t};\n\tvar answer = [];\n\t\
    var num1 = planets[planet1];\n\tvar num2 = planets[planet2];\n\tvar answer = [];\n\
    \tif (num1 && num2){\n\t\tfor (var i = num1; i <= num2; i++){\n\t\t\tif (i ==\
    \ num1 || i == num2){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tanswer.push(i);\n\
    \t\t\t}\n\t\t}\n\t}\n\telse{\n\t\treturn \"error\";\n\t}\n\treturn answer;\n}\n\
    \nvar planets = {\n\t\t\"Mercury\":1,\n\t\t\"Venus\":2,\n\t\t\"Earth\":3,\n\t\t\
    \"Mars\":4,\n\t\t\"Jupiter\":5,\n\t\t\"Saturn\":6,\n\t\t\"Uranus\":7,\n\t\t\"\
    Neptune\":8\n\t};\n\nvar planets2 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];", "  const planets = [\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"];\n  let planet = planets.indexOf(planet1);\n  let planet2 = planets.indexOf(planet2);\n\
    \  let result = [];\n  if (planet1 === -1 || planet2 === -1){\n    return [];\n\
    \  } else if (planet1 > planet2){\n    for (let i = planet1; i <= planet2; i++){\n\
    \      result.push(planets[i]);\n    }\n  } else {\n    for (let i = planet1;\
    \ i <= planet2; i++){\n      result.push(planets[i]);\n    }\n  }\n  return result;\n\
    }", "    if(planet1 == \"Mercury\"){\n        if(planet2 == \"Venus\"){\n    \
    \        return \"Mercury\";\n        }\n        else if(planet2 == \"Earth\"\
    ){\n            return \"Mercury\" + \"Venus\";\n        }\n        else if(planet2\
    \ == \"Mars\"){\n            return \"Mercury\" + \"Venus\" + \"Earth\";\n   \
    \     }\n        else if(planet2 == \"Jupiter\"){\n            return \"Mercury\"\
    \ + \"Venus\" + \"Earth\" + \"Mars\";\n        }\n        else if(planet2 == \"\
    Saturn\"){\n            return \"Mercury\" + \"Venus\" + \"Earth\" + \"Mars\"\
    \ + \"Jupiter\";\n        }\n        else if(planet2 == \"Uranus\"){\n       \
    \     return \"Mercury\" + \"Venus\" + \"Earth\" + \"Mars\" + \"Jupiter\" + \"\
    Saturn\";\n        }\n        else if(planet2 == \"Neptune\"){\n            return\
    \ \"Mercury\" + \"Venus\" + \"Earth\" + \"Mars\" + \"Jupiter\" + \"Saturn\" +\
    \ \"Uranus\";\n        }\n        else {\n            return \"Mercury\" + \"\
    Venus\" + \"Earth\" + \"Mars\" + \"Jupiter\" + \"Saturn\" + \"Uranus\" + \"Neptune\"\
    ;\n        }\n    }\n    else if(planet1 == \"Venus\"){\n        if(planet2 ==\
    \ \"Earth\"){\n            return \"Venus\";\n        }\n        else if(planet2\
    \ == \"Mars\"){\n            return \"Venus\" + \"Earth\";\n        }\n      \
    \  else if(planet2 == \"Jupiter\"){\n            return \"Venus\" + \"Earth\"\
    \ + \"Mars\";\n        }\n        else if(planet2 == \"Saturn\"){\n          \
    \  return \"Venus\" + \"Earth\" + \"Mars\" + \"Jupiter\";\n        }\n       \
    \ else if(planet2 == \"Uranus\"){\n            return \"Venus\" + \"Earth\" +\
    \ \"Mars\" + \"Jupiter\" + \"Saturn\";\n        }\n        else if(planet2 ==\
    \ \"Neptune\"){\n            return \"Venus\" +", "    var planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    var\
    \ a = planets.indexOf(planet1), b = planets.indexOf(planet2);\n    if (a==-1 ||\
    \ b==-1) return [];\n    if (a>b) [a,b] = [b,a];\n    return planets.slice(a+1,b);\n\
    }", "    // your code here\n}\n\nconst result1 = bf('Venus', 'Mars');", "\t\n\t\
    \tlet planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'];\n\t\tlet index1 = planets.indexOf(planet1);\n\t\tlet index2 = planets.indexOf(planet2);\n\
    \t\tlet result =[];\n\t\tlet temp =[];\n\t\tif(planet1===undefined || planet2===undefined)\n\
    \t\t\treturn [];\n\t\tif(index1>index2){\n\t\t\tresult = planets.slice(index2,index1+1);\n\
    \t\t}\n\t\telse{\n\t\t\tresult = planets.slice(index1,index2+1);\n\t\t}\n\t\t\
    for(let i = 0; i<result.length; i++){\n\t\t\tif(result[i]===planet1 || result[i]===planet2)\n\
    \t\t\t\tcontinue;\n\t\t\ttemp.push(result[i]);\n\t\t}\n\t\treturn temp;\n}", " \
    \   let res = []\n    let result = []\n    let planets = ['Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    let index1 =\
    \ planets.indexOf(planet1)\n    let index2 = planets.indexOf(planet2)\n    if\
    \ (index1 < 0 || index2 < 0) {\n        return result\n    }\n    if (index1 <\
    \ index2) {\n        for (let i = index1 + 1; i < index2; i++) {\n           \
    \ res.push(planets[i])\n        }\n    } else {\n        for (let i = index2 +\
    \ 1; i < index1; i++) {\n            res.push(planets[i])\n        }\n    }\n\
    \    return res\n}\n", "    let planets = ['Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    let planetsSorted = planets.sort((a,\
    \ b) => a.length - b.length)\n    let result = []\n    for(let i = 0; i < planetsSorted.length;\
    \ i++){\n        if(planetsSorted[i] === planet1 || planetsSorted[i] === planet2){\n\
    \            if(planetsSorted[i] === planet1){\n                for(let j = i\
    \ + 1; j < planetsSorted.length; j++){\n                    if(planetsSorted[j]\
    \ === planet2){\n                        for(let p = i + 1; p < j; p++){\n   \
    \                         result.push(planetsSorted[p])\n                    \
    \    }\n                        return result\n                    }\n       \
    \         }\n            }\n            if(planetsSorted[i] === planet2){\n  \
    \              for(let j = i + 1; j < planetsSorted.length; j++){\n          \
    \          if(planetsSorted[j] === planet1){\n                        for(let\
    \ p = i + 1; p < j; p++){\n                            result.push(planetsSorted[p])\n\
    \                        }\n                        return result\n          \
    \          }\n                }\n            }\n        }\n    }\n    return result\n\
    }\n\nlet planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\nlet planet1 = 'Venus'\nlet planet2 = 'Mars'", "  let\
    \ a = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\
    \  let i = a.indexOf(planet1);\n  let j = a.indexOf(planet2);\n  if(i === -1 ||\
    \ j === -1){\n    return [];\n  }\n  let r = [];\n  if(i > j){\n    let tmp =\
    \ i;\n    i = j;\n    j = tmp;\n  }\n  for(; i <= j; i++){\n    r.push(a[i]);\n\
    \  }\n  return r;\n}\n", "    const planets = [\n        \"Mercury\",\n      \
    \  \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n \
    \       \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    ];\n    let\
    \ [i1, i2] = [planets.indexOf(planet1), planets.indexOf(planet2)];\n    if(i1\
    \ < 0 || i2 < 0) return [];\n    if(i1 > i2) [i1, i2] = [i2, i1];\n    return\
    \ planets.slice(i1, i2 + 1);\n}\n", "    let planets = ['Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    let i1 = planets.indexOf(planet1);\n\
    \    let i2 = planets.indexOf(planet2);\n    if(i1 == -1 || i2 == -1) return [];\n\
    \    let res = [];\n    if(i1 < i2){\n        for(let i = i1 + 1; i < i2; i++){\n\
    \            res.push(planets[i]);\n        }\n    }else{\n        for(let i =\
    \ i2 + 1; i < i1; i++){\n            res.push(planets[i]);\n        }\n    }\n\
    \    return res;\n}", "\tvar planets = [\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\tvar index1 = planets.indexOf(planet1);\n\
    \tvar index2 = planets.indexOf(planet2);\n\tif (index1 === -1 || index2 === -1)\
    \ {\n\t\treturn [];\n\t}\n\t\n\tif (index1 > index2) {\n\t\treturn planets.slice(index2,\
    \ index1 + 1);\n\t}\n\n\treturn planets.slice(index1, index2 + 1);\n}\n", "  \
    \  let  planetNumber = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n   \
    \     \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"\
    Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n    if (!planetNumber[planet1]\
    \ || !planetNumber[planet2]) {\n        return []\n    }\n    return Object.keys(planetNumber).filter(function(x){\n\
    \        if (planetNumber[x] > planetNumber[planet1] && planetNumber[x] < planetNumber[planet2])\
    \ {\n            return x\n        }\n    })\n}\n", "    let planets = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let pos1 = planets.indexOf(planet1);\n    let pos2 = planets.indexOf(planet2);\n\
    \    let newArr = planets.splice(pos1, pos2-pos1);\n    return newArr;\n}\n",
  "    let planets =  ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'];\n    let p1 = planets.indexOf(planet1);\n    let p2 = planets.indexOf(planet2);\n\
    \    if(p1 == -1 || p2 == -1) return [];\n    if(p1 > p2){\n        let temp =\
    \ p1;\n        p1 = p2;\n        p2 = temp;\n    }\n    let result = [];\n   \
    \ for(let i = p1 + 1; i < p2; i++){\n        result.push(planets[i]);\n    }\n\
    \    return result;\n}\n", "    if(planet1 === \"Mercury\" || planet1 === \"Venus\"\
    \ || planet1 === \"Earth\" || planet1 === \"Mars\" || planet1 === \"Jupiter\"\
    \ || planet1 === \"Saturn\" || planet1 === \"Uranus\" || planet1 === \"Neptune\"\
    ){\n        if(planet2 === \"Mercury\" || planet2 === \"Venus\" || planet2 ===\
    \ \"Earth\" || planet2 === \"Mars\" || planet2 === \"Jupiter\" || planet2 ===\
    \ \"Saturn\" || planet2 === \"Uranus\" || planet2 === \"Neptune\"){\n        \
    \    if(planet1 == planet2){\n                return []\n            }else if(planet1\
    \ === \"Mercury\" && planet2 === \"Venus\"){\n                return []\n    \
    \        }else if(planet1 === \"Mercury\" && planet2 === \"Earth\"){\n       \
    \         return [\"Venus\"]\n            }else if(planet1 === \"Mercury\" &&\
    \ planet2 === \"Mars\"){\n                return [\"Venus\", \"Earth\"]\n    \
    \        }else if(planet1 === \"Mercury\" && planet2 === \"Jupiter\"){\n     \
    \           return [\"Venus\", \"Earth\", \"Mars\"]\n            }else if(planet1\
    \ === \"Mercury\" && planet2 === \"Saturn\"){\n                return [\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\"]\n            }else if(planet1 === \"Mercury\"\
    \ && planet2 === \"Uranus\"){\n                return [\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\"]\n            }else if(planet1 === \"Mercury\"\
    \ && planet2 === \"Neptune\"){\n                return [\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]\n            }else if(planet1\
    \ === \"Venus\" && planet2 === \"Mercury\"){\n                return []\n    \
    \        }else if(planet1 === \"Venus\" && planet2 === \"Earth\"){\n         \
    \       return []\n            }else if(planet1 === \"Venus\" && planet2 === \"\
    Mars\"){\n                return [\"Earth\"]\n            }else if(planet1 ===\
    \ \"Venus\" && planet2 === \"Jupiter\"){\n                return [\"Earth\", \"\
    Mars\"]\n", "    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let getPlanet = (x) => {\n\
    \        for(let i = 0; i < planets.length; i++){\n            if(planets[i] ===\
    \ x){\n                return i;\n            }\n        }\n        return -1;\n\
    \    }\n    let p1 = getPlanet(planet1);\n    let p2 = getPlanet(planet2);\n \
    \   if(p1 < 0 || p2 < 0){\n        return [];\n    }\n    if(p1 === p2){\n   \
    \     return [planet1];\n    }\n    let slice = planets.slice(p1, p2 + 1);\n \
    \   if(p1 > p2){\n        slice = planets.slice(p2, p1 + 1);\n    }\n    return\
    \ slice;\n}\n", "  let system = \"Mercury,Venus,Earth,Mars,Jupiter,Saturn,Uranus,Neptune\"\
    .split(\",\");\n  let [p1, p2] = [system.indexOf(planet1), system.indexOf(planet2)];\n\
    \  if(p1 == -1 || p2 == -1) return [];\n  [p1, p2] = [p1 < p2 ? p1 : p2, p1 <\
    \ p2 ? p2 : p1];\n  return system.slice(p1 + 1, p2);\n}", "  let planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n  let\
    \ i1 = planets.indexOf(planet1);\n  let i2 = planets.indexOf(planet2);\n  if(i1\
    \ === -1 || i2 === -1) return [];\n  if(i1 < i2){\n    return planets.slice(i1+1,\
    \ i2);\n  }\n  else{\n    return planets.slice(i2+1, i1);\n  }\n}\n", "  var planets\
    \ = {\n    Mercury: 0,\n    Venus: 1,\n    Earth: 2,\n    Mars: 3,\n    Jupiter:\
    \ 4,\n    Saturn: 5,\n    Uranus: 6,\n    Neptune: 7\n  };\n  var ans = [];\n\
    \  for(key in planets){\n    if(planets[planet1] < planets[key] && planets[key]\
    \ < planets[planet2]){\n      ans.push(key);\n    }\n  }\n  return ans;\n}", " \
    \ // let planets = [\n  //   \"Mercury\",\n  //   \"Venus\",\n  //   \"Earth\"\
    ,\n  //   \"Mars\",\n  //   \"Jupiter\",\n  //   \"Saturn\",\n  //   \"Uranus\"\
    ,\n  //   \"Neptune\"\n  // ];\n  let planets = {\n    \"Mercury\": 1,\n    \"\
    Venus\": 2,\n    \"Earth\": 3,\n    \"Mars\": 4,\n    \"Jupiter\": 5,\n    \"\
    Saturn\": 6,\n    \"Uranus\": 7,\n    \"Neptune\": 8\n  };\n  let s = planets[planet1];\n\
    \  let e = planets[planet2];\n  let r = [];\n  if (s < e){\n    for (var i = s\
    \ + 1; i < e; i++){\n      r.push(Object.keys(planets).find(key => planets[key]\
    \ === i));\n    }\n  }\n  else if (s > e){\n    for (var i = e + 1; i < s; i++){\n\
    \      r.push(Object.keys(planets).find(key => planets[key] === i));\n    }\n\
    \  }\n  return r;\n}", "    const arr = [\n        'Mercury',\n        'Venus',\n\
    \        'Earth',\n        'Mars',\n        'Jupiter',\n        'Saturn',\n  \
    \      'Uranus',\n        'Neptune'\n    ];\n    const arr1 = [...arr];\n    let\
    \ i1 = arr.indexOf(planet1);\n    let i2 = arr.indexOf(planet2);\n    if(i1 <\
    \ 0 || i2 < 0) return [];\n    if(i1 > i2){\n        [i1, i2] = [i2, i1];\n  \
    \  }\n    return arr1.slice(i1+1, i2);\n}\n", "\t\tvar planets = ['Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\t\tvar planetsArr\
    \ = [];\n\t\tif(planets.indexOf(planet1) !== -1 && planets.indexOf(planet2) !==\
    \ -1){\n\t\t\tvar a = planets.indexOf(planet1);\n\t\t\tvar b = planets.indexOf(planet2);\n\
    \t\t\tif(a < b){\n\t\t\t\twhile(a <= b){\n\t\t\t\t\tplanetsArr.push(planets[a]);\n\
    \t\t\t\t\ta++;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\twhile(b <= a){\n\t\t\t\t\tplanetsArr.push(planets[b]);\n\
    \t\t\t\t\tb++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn planetsArr;\n}", "    let\
    \ index1, index2;\n    for(let i = 0; i < planets.length; i++){\n        if(planets[i]\
    \ === planet1){\n            index1 = i;\n        }\n        if(planets[i] ===\
    \ planet2){\n            index2 = i;\n        }\n    }\n    if(typeof index1 ===\
    \ 'undefined' || typeof index2 === 'undefined'){\n        return [];\n    }\n\
    \    if(index1 > index2){\n        return [];\n    }\n    return planets.slice(index1\
    \ + 1, index2);\n}\n", "\tlet order = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'];\n\tif (order.indexOf(planet1) === -1 || order.indexOf(planet2)\
    \ === -1){\n\t\treturn [];\n\t}\n\tif (order.indexOf(planet1) < order.indexOf(planet2)){\n\
    \t\treturn order.slice(order.indexOf(planet1) + 1, order.indexOf(planet2));\n\t\
    } else {\n\t\treturn order.slice(order.indexOf(planet2) + 1, order.indexOf(planet1));\n\
    \t}\n}", "    let planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\n    let i1 = planets.indexOf(planet1);\n    let i2 =\
    \ planets.indexOf(planet2);\n    if (i1 < 0 || i2 < 0){\n        return ();\n\
    \    }\n    if (i1 > i2){\n        i1 = [i2, i2 = i1][0];\n    }\n    let between\
    \ = planets.slice(i1 + 1, i2);\n    return between;\n}\n", "    var arr=['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    var\
    \ first=arr.indexOf(planet1);\n    var second=arr.indexOf(planet2);\n    var result=[];\n\
    \    if (first<second && first!=-1 && second!=-1){\n        for (var i=first+1;\
    \ i<second; i++){\n            result.push(arr[i]);\n        }\n    } else if\
    \ (first>second && first!=-1 && second!=-1){\n        for (var i=second+1; i<first;\
    \ i++){\n            result.push(arr[i]);\n        }\n    }\n    return result;\n\
    }", "let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\", \"Neptune\"];\nlet output = [];\nlet planet1index =\
    \ planets.indexOf(planet1);\nlet planet2index = planets.indexOf(planet2);", " \
    \   // planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'];\n    if(planets.indexOf(planet1)<planets.indexOf(planet2)){\n  \
    \      var output=[];\n        for(var i=planets.indexOf(planet1)+1;i<planets.indexOf(planet2);i++){\n\
    \            output.push(planets[i]);\n        }\n        return output;\n   \
    \ }\n    else{\n        return [];\n    }\n}", "    let p = ['Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    let i1 = p.indexOf(planet1);\n\
    \    let i2 = p.indexOf(planet2);\n    if(i1 >= 0 && i2 >= 0){\n        if(i1\
    \ < i2){\n            return p.slice(i1+1, i2);\n        }else{\n            return\
    \ p.slice(i2+1, i1);\n        }\n    }else{\n        return [];\n    }\n}\n",
  "    var planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'];\n    var length = planets.length;\n    var result = [];\n    var\
    \ j = length - 1;\n    var i = length - 1;\n    while(i >= 0 && j >= 0){\n   \
    \     if(planets[i] === planet1){\n            break;\n        }\n        i--;\n\
    \    }\n    while(j >= 0){\n        if(planets[j] === planet2){\n            break;\n\
    \        }\n        j--;\n    }\n    for(var k = i+1; k < j; k++){\n        result.push(planets[k]);\n\
    \    }\n    return result;\n}\n", "  var a = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n    c = [],\n\
    \    p1 = a.indexOf(planet1),\n    p2 = a.indexOf(planet2),\n    d = Math.abs(p1\
    \ - p2);\n  if(p1 < 0 || p2 < 0) return c;\n  if(p1 < p2){\n    while(p1 < p2){\n\
    \      c.push(a[p1++]);\n    }\n  }else{\n    while(p2 < p1){\n      c.push(a[p2++]);\n\
    \    }\n  }\n  return c;\n}", "    planets = ['Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    planets_i = planets.indexOf(planet1);\n\
    \    if (planets_i == -1) {\n        return ()\n    }\n    var planets_j = planets.indexOf(planet2);\n\
    \    if (planets_j == -1) {\n        return ()\n    }\n    if (planets_i < planets_j)\
    \ {\n        planets_i++;\n        return planets.slice(planets_i, planets_j);\n\
    \    }\n    planets_j++;\n    return planets.slice(planets_j, planets_i).reverse();\n\
    }", "    let planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\n    let close = planets.indexOf(planet1);\n    let far\
    \ = planets.indexOf(planet2);\n    let temp = [];\n    if(close >= 0 && far >=\
    \ 0){\n        for(let i = close + 1; i < far; i++){\n            temp.push(planets[i]);\n\
    \        }\n    }\n    return temp;\n}", "    var result = [];\n    var planets\
    \ = {\n        mercury: 1,\n        venus: 2,\n        earth: 3,\n        mars:\
    \ 4,\n        jupiter: 5,\n        saturn: 6,\n        uranus: 7,\n        neptune:\
    \ 8\n    };\n    if(planet1 in planets && planet2 in planets){\n        for(var\
    \ i = Math.min(planets[planet1], planets[planet2]); i <= Math.max(planets[planet1],\
    \ planets[planet2]); i++){\n            for(var key in planets){\n           \
    \     if(planets[key] == i){\n                    result.push(key);\n        \
    \        }\n            }\n        }\n    }\n    return result;\n}\n", "  let\
    \ planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"];\n  let min = planets.indexOf(planet1)\n  let max =\
    \ planets.indexOf(planet2)\n  if(min < 0 || max < 0) return [];\n  let res = [];\n\
    \  while(min < max){\n    res.push(planets[min]);\n    min++;\n  }\n  return res;\n\
    }\n", "    let planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\n    let i1 = planets.indexOf(planet1);\n    let i2 =\
    \ planets.indexOf(planet2);\n    let result = [];\n    if(i1===-1 || i2===-1){\n\
    \        return result;\n    }\n    if(i1 > i2){\n        let tmp = i1;\n    \
    \    i1 = i2;\n        i2 = tmp;\n    }\n    for(let i = i1+1; i < i2; i++){\n\
    \        result.push(planets[i]);\n    }\n    return result;\n}\n", "    const\
    \ planets = {\n        Mercury: 57_910_000,\n        Venus: 108_200_000,\n   \
    \     Earth: 149_600_000,\n        Mars: 227_940_000,\n        Jupiter: 778_330_000,\n\
    \        Saturn: 1_429_400_000,\n        Uranus: 2_870_990_000,\n        Neptune:\
    \ 4_504_000_000\n    }\n    const orbit1 = planets[planet1];\n    const orbit2\
    \ = planets[planet2];\n    const names = Object.keys(planets).filter(name => \n\
    \        orbit1 < planets[name] && planets[name] < orbit2)\n    return names;\n\
    }", "    var planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\n    var p1 = planets.indexOf(planet1);\n    var p2 =\
    \ planets.indexOf(planet2);\n    if(p1 == -1 || p2 == -1)\n    {\n        return\
    \ [];\n    }\n    else if(p1 < p2)\n    {\n        var s = planets.slice(p1+1,\
    \ p2);\n        return s;\n    }\n    else\n    {\n        var s = planets.slice(p2+1,\
    \ p1);\n        return s;\n    }\n}\n", "  let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let\
    \ left = planets.indexOf(planet1);\n  let right = planets.indexOf(planet2);\n\
    \  let result = [];\n  if(left == -1 || right == -1){\n    return [];\n  }\n \
    \ if(left>right){\n    [left, right] = [right, left];\n  }\n  for(let i = left+1;\
    \ i<right; i++){\n    result.push(planets[i]);\n  }\n  return result;\n}", " \
    \   let planets = {\n        Mercury: 1,\n        Venus: 2,\n        Earth: 3,\n\
    \        Mars: 4,\n        Jupiter: 5,\n        Saturn: 6,\n        Uranus: 7,\n\
    \        Neptune: 8\n    }\n    let p1 = planets[planet1];\n    let p2 = planets[planet2];\n\
    \    let result = [];\n    if(p1 && p2){\n        if(p1 < p2){\n            for(let\
    \ i = p1 + 1; i < p2; i++){\n                for(let prop in planets){\n     \
    \               if(planets[prop] === i){\n                        result.push(prop);\n\
    \                    }\n                }\n            }\n        } else {\n \
    \           for(let i = p2 + 1; i < p1; i++){\n                for(let prop in\
    \ planets){\n                    if(planets[prop] === i){\n                  \
    \      result.push(prop);\n                    }\n                }\n        \
    \    }\n        }\n    }\n    return result;\n}", "    let orbit = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    let\
    \ newArr = [];\n    let result = [];\n    let index1 = orbit.indexOf(planet1);\n\
    \    let index2 = orbit.indexOf(planet2);\n    if(index1 > index2){\n        let\
    \ temp = index1;\n        index1 = index2;\n        index2 = temp;\n    }\n  \
    \  for(let i = index1; i < index2; i++){\n        newArr.push(orbit[i]);\n   \
    \ }\n    for(let j = 0; j < newArr.length; j++){\n        if(planet1 === newArr[j]\
    \ || planet2 === newArr[j]){\n            result.push(newArr[j]);\n        }\n\
    \    }\n    return result;\n}", "    let planets = \"Mercury Venus Earth Mars\
    \ Jupiter Saturn Uranus Neptune\".split(\" \");\n    let lst = [];\n    if(!(planets.includes(planet1)\
    \ && planets.includes(planet2))){\n        return [];\n    }\n    for(let i =\
    \ planets.indexOf(planet1); i < planets.indexOf(planet2); i++){\n        lst.push(planets[i]);\n\
    \    }\n    return lst;\n}\n", "    // your code here\n}\nbf(\"Mercury\", \"Venus\"\
    ) ", "    let orbits = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\n    let planet1Index = orbits.indexOf(planet1);\n   \
    \ let planet2Index = orbits.indexOf(planet2);\n    let orbitInterval = [];\n \
    \   if(planet1Index === -1 || planet2Index === -1){\n        return [];\n    }else\
    \ if(planet1Index < planet2Index){\n        for(let i = planet1Index + 1; i <\
    \ planet2Index; i++){\n            orbitInterval.push(orbits[i]);\n        }\n\
    \    }else{\n        for(let i = planet2Index + 1; i < planet1Index; i++){\n \
    \           orbitInterval.push(orbits[i]);\n        }\n    }\n    return orbitInterval;\n\
    }\n\nbf('Jupiter', 'Mars');", "\tvar planets = ['Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\tvar p1 = planets.indexOf(planet1);\n\
    \tvar p2 = planets.indexOf(planet2);\n\tvar result = [];\n\tif (p1 < 0 || p2 <\
    \ 0){\n\t\treturn []\n\t}\n\tif (p1 < p2){\n\t\tfor (var i = p1 + 1; i < p2; i++){\n\
    \t\t\tresult.push(planets[i]);\n\t\t}\n\t} else {\n\t\tfor (var i = p2 + 1; i\
    \ < p1; i++){\n\t\t\tresult.push(planets[i]);\n\t\t}\n\t}\n\treturn result;\n\
    }\n", "    let orbits = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\n    let n1 = orbits.indexOf(planet1);\n    let n2 = orbits.indexOf(planet2);\n\
    \    let res = [];\n    if (n1 === -1 || n2 === -1){\n        return res;\n  \
    \  }\n    if (n1 < n2){\n        for (let i = n1 + 1; i < n2; i++){\n        \
    \    res.push(orbits[i]);\n        }\n    } else {\n        for (let i = n2 +\
    \ 1; i < n1; i++){\n            res.push(orbits[i]);\n        }\n    }\n    return\
    \ res;\n}", "let planets= [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\nlet index1 = planets.indexOf(planet1);\n\
    let index2 = planets.indexOf(planet2);\nlet result = planets.slice(index1, index2);\n\
    return result;\n}", "  if (planet1==='Mercury'){\n    if (planet2==='Venus'){\n\
    \      return ['Mercury','Venus'];\n    } else if (planet2==='Earth'){\n     \
    \ return ['Mercury','Venus','Earth'];\n    } else if (planet2==='Mars'){\n   \
    \   return ['Mercury','Venus','Earth','Mars'];\n    } else if (planet2==='Jupiter'){\n\
    \      return ['Mercury','Venus','Earth','Mars','Jupiter'];\n    } else if (planet2==='Saturn'){\n\
    \      return ['Mercury','Venus','Earth','Mars','Jupiter','Saturn'];\n    } else\
    \ if (planet2==='Uranus'){\n      return ['Mercury','Venus','Earth','Mars','Jupiter','Saturn','Uranus'];\n\
    \    } else if (planet2==='Neptune'){\n      return ['Mercury','Venus','Earth','Mars','Jupiter','Saturn','Uranus','Neptune'];\n\
    \    } else{\n      return [];\n    }\n  } else if (planet1==='Venus'){\n    if\
    \ (planet2==='Earth'){\n      return ['Venus','Earth'];\n    } else if (planet2==='Mars'){\n\
    \      return ['Venus','Earth','Mars'];\n    } else if (planet2==='Jupiter'){\n\
    \      return ['Venus','Earth','Mars','Jupiter'];\n    } else if (planet2==='Saturn'){\n\
    \      return ['Venus','Earth','Mars','Jupiter','Saturn'];\n    } else if (planet2==='Uranus'){\n\
    \      return ['Venus','Earth','Mars','Jupiter','Saturn','Uranus'];\n    } else\
    \ if (planet2==='Neptune'){\n      return ['Venus','Earth','Mars','Jupiter','Saturn','Uranus','Neptune'];\n\
    \    } else{\n      return [];\n    }\n  } else if (planet1==='Earth'){\n    if\
    \ (planet2==='Mars'){\n      return ['Earth','Mars'];\n    } else if (planet2==='Jupiter'){\n\
    \     ", "    let sol = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1 = sol.indexOf(planet1);\n\
    \    let index2 = sol.indexOf(planet2);\n    if (index1 === -1 || index2 === -1){\n\
    \        return [];\n    }\n    if (index1 > index2){\n        return sol.slice(index2,\
    \ index1+1);\n    }\n    else{\n        return sol.slice(index1, index2+1);\n\
    \    }\n}\n", "\tvar planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'];\n\tvar index1 = 0;\n\tvar index2 = 0;\n\tvar\
    \ planet_list = [];\n\tfor(var i = 0; i < planets.length; i++){\n\t\tif(planets[i]\
    \ == planet1){\n\t\t\tindex1 = i;\n\t\t}\n\t\tif(planets[i] == planet2){\n\t\t\
    \tindex2 = i;\n\t\t}\n\t}\n\t\n\tif(index1 == 0 && index2 == 0){\n\t\treturn planet_list;\n\
    \t}\n\tif(index1 < index2){\n\t\tfor(var i = index1 + 1; i < index2; i++){\n\t\
    \t\tplanet_list.push(planets[i]);\n\t\t}\n\t}else{\n\t\tfor(var i = index2 + 1;\
    \ i < index1; i++){\n\t\t\tplanet_list.push(planets[i]);\n\t\t}\n\t}\n\treturn\
    \ planet_list;\n}\n", "  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  if (planets.indexOf(planet1)\
    \ === -1 || planets.indexOf(planet2) === -1) {\n    return [];\n  }\n  const min\
    \ = Math.min(planets.indexOf(planet1), planets.indexOf(planet2));\n  const max\
    \ = Math.max(planets.indexOf(planet1), planets.indexOf(planet2));\n  return planets.slice(min\
    \ + 1, max);\n}\n", "    let planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'];\n    let p1=planets.indexOf(planet1);\n    let\
    \ p2=planets.indexOf(planet2);\n    if(p1==-1 || p2==-1){\n        return ()=>{};\n\
    \    }else{\n        let max = Math.max(p1,p2);\n        let min = Math.min(p1,p2);\n\
    \        let res = [];\n        for(let i=min+1;i<max;i++){\n            res.push(planets[i]);\n\
    \        }\n        return res;\n    }\n}", "    let a = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  if(a.indexOf(planet1)<0 || a.indexOf(planet2)<0){\n        return [];\n   \
    \ }\n    let b = a.slice(a.indexOf(planet1)+1, a.indexOf(planet2));\n    return\
    \ b;\n}", "    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if(planets.indexOf(planet1)>=0\
    \ && planets.indexOf(planet2)>=0){\n        let res = []\n        if(planets.indexOf(planet1)>planets.indexOf(planet2)){\n\
    \            let start = planets.indexOf(planet2);\n            let end = planets.indexOf(planet1);\n\
    \            for(let i=start; i<end; i++){\n                res.push(planets[i])\n\
    \            }\n        }else{\n            let start = planets.indexOf(planet1);\n\
    \            let end = planets.indexOf(planet2);\n            for(let i=start;\
    \ i<end; i++){\n                res.push(planets[i])\n            }\n        }\n\
    \        return res;\n    }else{\n        return []\n    }\n}", "    let solarSys\
    \ = {\n      \"Mercury\": 57.9,\n      \"Venus\": 108.2,\n      \"Earth\": 149.6,\n\
    \      \"Mars\": 227.9,\n      \"Jupiter\": 778.3,\n      \"Saturn\": 1427.0,\n\
    \      \"Uranus\": 2871.0,\n      \"Neptune\": 4497.1\n    }\n    let p1 = solarSys[planet1];\n\
    \    let p2 = solarSys[planet2];\n    if(p1 === undefined || p2 === undefined)\
    \ return [];\n    let res = [];\n    for(let k in solarSys){\n      if(solarSys[k]\
    \ >= p1 && solarSys[k] <= p2) res.push(k);\n    }\n    return res;\n  }\n  \n\
    \  //console.log(betweenThePlanets(\"Venus\", \"Earth\"));\n  // Output:\n  //\
    \ (\"Venus\", \"Earth\")\n  //console.log(betweenThePlanets(\"Jupiter\", \"Mars\"\
    ));\n  // Output:\n  // (\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n \
    \ //console.log(betweenThePlanets(\"Neptune\", \"Jupiter\"));\n  // Output:\n\
    \  // ()\n  //console.log(betweenThePlanets(\"Venus\", \"Earth\"));\n  // Output:\n\
    \  // (\"Venus\", \"Earth\")\n  //console.log(betweenThePlanets(\"Mercury\", \"\
    E\"));\n  // Output:\n  // ()\n  \n  //e.g\n  function betweenThePlanets(planet1,\
    \ planet2) {\n    let solarSys = {\n      \"Mercury\": 57.9,\n      \"Venus\"\
    : 108.2,\n      \"Earth\": 149.6,\n      \"Mars\": 227.9,\n      \"Jupiter\":\
    \ 778.3,\n      \"Saturn\": 1427.0,\n      \"Uranus\": 2871.0,\n      \"Neptune\"\
    : 4497.1\n    }\n    let p1 = solarSys[planet1];\n    let p2 = solarSys[planet2];\n\
    \    if(p1 === undefined || p", "    var res = [];\n    var planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    if(planets.indexOf(planet1)\
    \ < 0 || planets.indexOf(planet2) < 0){\n        return \"planet1 or planet2 are\
    \ not correct planet names\";\n    }\n    var first = planets.indexOf(planet1);\n\
    \    var second = planets.indexOf(planet2);\n    if(first > second){\n       \
    \ for(var i = second + 1; i < first; i++){\n            res.push(planets[i]);\n\
    \        }\n    }else{\n        for(var i = first + 1; i < second; i++){\n   \
    \         res.push(planets[i]);\n        }\n    }\n    return res;\n}", "\tvar\
    \ ans = [];\n\tvar order = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\n\tvar i = order.indexOf(planet1);\n\tvar j = order.indexOf(planet2);\n\
    \tvar temp;\n\tif(i > j){\n\t\ttemp = i;\n\t\ti = j;\n\t\tj = temp;\n\t}\n\tfor(var\
    \ k = i + 1; k < j; k++){\n\t\tans.push(order[k]);\n\t}\n\treturn ans;\n}", " \
    \   \n}\n", "\t// let planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'];\n\tlet planets = {'Mercury':1, 'Venus':2, 'Earth':3,\
    \ 'Mars':4, 'Jupiter':5, 'Saturn':6, 'Uranus':7, 'Neptune':8};\n\tlet res = [];\n\
    \tif(!planets[planet1] || !planets[planet2]){\n\t\treturn res;\n\t}\n\tlet ind1\
    \ = planets[planet1];\n\tlet ind2 = planets[planet2];\n\tlet max = Math.max(ind1,\
    \ ind2);\n\tlet min = Math.min(ind1, ind2);\n\tconsole.log(planets);\n\tconsole.log(max,\
    \ min);\n\tfor(let i = min; i <= max; i++){\n\t\tfor(let j in planets){\n\t\t\t\
    if(planets[j] === i){\n\t\t\t\tres.push(j);\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n\
    }", "  var planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\n  var p1 = planets.indexOf(planet1);\n  var p2 = planets.indexOf(planet2);\n\
    \  var temp;\n  var res = [];\n  if(p1>p2){\n    temp = p1;\n    p1 = p2;\n  \
    \  p2 = temp;\n  }\n  if(p1==-1 || p2==-1){\n    return [];\n  }\n  for(var i=p1+1;\
    \ i<p2; i++){\n    res.push(planets[i]);\n  }\n  return res;\n}\nbf('Earth', 'Mars');\
    \ // => ['Venus', 'Earth']\nbf('Mars', 'Jupiter'); // => ['Mars', 'Earth', 'Venus']\n\
    bf('Saturn', 'Jupiter'); // => []\nbf('Venus', 'Saturn'); // => ['Venus', 'Earth',\
    \ 'Mars']\nbf('Venus', 'Earth'); // => ['Venus']\nbf('Earth', 'Venus'); // =>\
    \ ['Venus']", "  var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  var index1 = planets.indexOf(planet1);\n\
    \  var index2 = planets.indexOf(planet2);\n  var inBetween = [];\n  if (index1\
    \ === -1 || index2 === -1){\n    return [];\n  }\n  if (index1 > index2){\n  \
    \  var temp = index1;\n    index1 = index2;\n    index2 = temp;\n  }\n  for (var\
    \ i = index1 + 1; i < index2; i++){\n    inBetween.push(planets[i]);\n  }\n  return\
    \ inBetween;\n}\n", "    var li = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'];\n    var res = [];\n    var start = li.indexOf(planet1);\n\
    \    var end = li.indexOf(planet2);\n    if(start > -1 && end > -1 && start <=\
    \ end){\n        for(var i = start; i <= end; i++){\n            res.push(li[i]);\n\
    \        }\n    }\n    return res;\n}\n", "    \n    var arr = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    var index1 = arr.indexOf(planet1);\n    var index2 = arr.indexOf(planet2);\n\
    \    var newArr = [];\n    if(index1 != -1 && index2 != -1 && index1 != index2){\n\
    \        if(index1 < index2){\n            for(var i = index1+1; i < index2; i++){\n\
    \                newArr.push(arr[i]);\n            }\n        }\n        else{\n\
    \            for(var i = index2+1; i < index1; i++){\n                newArr.push(arr[i]);\n\
    \            }\n        }\n    }\n    return newArr;\n}", "    let arr = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let result = [];\n    if (arr.indexOf(planet1) < 0 || arr.indexOf(planet2)\
    \ < 0) return [];\n    for (let i = arr.indexOf(planet1) + 1; i < arr.indexOf(planet2);\
    \ i++){\n        result.push(arr[i]);\n    }\n    return result;\n}\n", "    let\
    \ planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"];\n    let startIndex = planets.indexOf(planet1);\n\
    \    let endIndex = planets.indexOf(planet2);\n    if(startIndex === -1 || endIndex\
    \ === -1){\n        return [];\n    } else if(startIndex > endIndex){\n      \
    \  return [];\n    }\n    return planets.slice(startIndex + 1, endIndex);\n}\n",
  "    let position1 = -1;\n    let position2 = -1;\n    let res = [];\n    let planets\
    \ = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"];\n    for(let i = 0; i < planets.length; i++){\n      \
    \  if(planets[i] === planet1){\n            position1 = i;\n        }\n      \
    \  if(planets[i] === planet2){\n            position2 = i;\n        }\n    }\n\
    \    if(position1 === -1 || position2 === -1){\n        return [];\n    }\n  \
    \  if(position1 > position2){\n        for(let i = position2 + 1; i < position1;\
    \ i++){\n            res.push(planets[i]);\n        }\n    }\n    else if(position1\
    \ < position2){\n        for(let i = position1 + 1; i < position2; i++){\n   \
    \         res.push(planets[i]);\n        }\n    }\n    return res;\n}", "    let\
    \ planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if(index1 === -1 || index2 === -1){\n        return [];\n    }\n    if(index1\
    \ < index2){\n        return planets.slice(index1 + 1, index2);\n    }\n    return\
    \ planets.slice(index2 + 1, index1);\n}\n", "  let planets = {\n    Mercury: 1,\n\
    \    Venus: 2,\n    Earth: 3,\n    Mars: 4,\n    Jupiter: 5,\n    Saturn: 6,\n\
    \    Uranus: 7,\n    Neptune: 8\n  }\n  let p1 = planets[planet1]\n  let p2 =\
    \ planets[planet2]\n  let sorted = Object.keys(planets).sort((a,b) => planets[a]\
    \ - planets[b])\n  let slice = sorted.slice(p1 - 1, p2)\n  return slice\n}", " \
    \   let result = [];\n    if(planet1===planet2) return result;\n    let leftIdx\
    \ = orbits.indexOf(planet1);\n    let rightIdx = orbits.indexOf(planet2);\n  \
    \  // if(leftIdx===-1||rightIdx===-1) return [];\n    let min = Math.min(leftIdx,\
    \ rightIdx);\n    let max = Math.max(leftIdx, rightIdx);\n    for(let i=min+1;\
    \ i<max; i++){\n        result.push(orbits[i]);\n    }\n    return result;\n}\n",
  "\tvar allplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"];\n\tvar index1 = allplanets.indexOf(planet1);\n\
    \tvar index2 = allplanets.indexOf(planet2);\n\tvar result = [];\n\tvar i;\n\t\
    var j;\n\tif(index1 == -1 || index2 == -1){\n\t\treturn [];\n\t}\n\tif(index1\
    \ > index2){\n\t\ti = index2;\n\t\tj = index1;\n\t}\n\telse{\n\t\ti = index1;\n\
    \t\tj = index2;\n\t}\n\tfor(i; i <= j; i++){\n\t\tresult.push(allplanets[i]);\n\
    \t}\n\treturn result;\n}", "    if(Array.from(arguments).some(arg => !planets.has(arg)))\
    \ return [];\n    if(planets.get(planet1) > planets.get(planet2)) return [];\n\
    \    const p1 = planets.get(planet1), p2 = planets.get(planet2);\n    return [...planets.keys()].slice(p1,\
    \ p2).sort((a, b) => planets.get(a) - planets.get(b));\n}\n", "    const names\
    \ = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\
    \    const idx1 = names.indexOf(planet1);\n    const idx2 = names.indexOf(planet2);\n\
    \    if(idx1 == -1 || idx2 == -1){\n        return [];\n    }\n    if(idx1 > idx2){\n\
    \        return names.slice(idx2, idx1 + 1);\n    }\n    return names.slice(idx1,\
    \ idx2 + 1);\n}", "\tconst planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\tconst len = planets.length;\n\
    \tlet indices = [];\n\tlet temp = [];\n\tfor(let i = 0; i < len; i++){\n\t\tif(planets[i]\
    \ === planet1){\n\t\t\tindices.push(i);\n\t\t}\n\t\tif(planets[i] === planet2){\n\
    \t\t\tindices.push(i);\n\t\t}\n\t}\n\tlet min = Math.min(...indices);\n\tlet max\
    \ = Math.max(...indices);\n\tfor(let i = min; i <= max; i++){\n\t\ttemp.push(planets[i]);\n\
    \t}\n\treturn temp;\n}\n\nconst planets = [\"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];", "    let arr\
    \ = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\
    \    // return arr.indexOf(planet1);\n    if((arr.indexOf(planet1) !== -1) &&\
    \ (arr.indexOf(planet2) !== -1)){\n        let first = arr.indexOf(planet1) +\
    \ 1;\n        let second = arr.indexOf(planet2) + 1;\n        return arr.slice(first,\
    \ second);\n    } else {\n        return [];\n    }\n}\n", "\tlet planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\tlet\
    \ p1Index = planets.indexOf(planet1);\n\tlet p2Index = planets.indexOf(planet2);\n\
    \tlet tmp;\n\tif(p1Index === -1 || p2Index === -1) return [];\n\tif(p1Index >\
    \ p2Index){\n\t\ttmp = p1Index;\n\t\tp1Index = p2Index;\n\t\tp2Index = tmp;\n\t\
    }\n\treturn planets.slice(p1Index+1, p2Index);\n}", "    var planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    var\
    \ i1 = planets.indexOf(planet1);\n    var i2 = planets.indexOf(planet2);\n   \
    \ if(i1 == -1 || i2 == -1){\n        return [];\n    }\n    if(i1 < i2){\n   \
    \     return planets.slice(i1+1, i2);\n    }\n    return planets.slice(i2+1, i1);\n\
    }\nvar pp = bf('Earth', 'Mars');", "\tvar planets = [ \"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" ];\n\t\
    var index1 = planets.indexOf(planet1);\n\tvar index2 = planets.indexOf(planet2);\n\
    \tvar res = [];\n\tif (index1 !== -1 && index2 !== -1) {\n\t\tif (index1 < index2)\
    \ {\n\t\t\tres = planets.slice(index1+1, index2);\n\t\t} else {\n\t\t\tres = planets.slice(index2+1,\
    \ index1);\n\t\t}\n\t}\n\treturn res;\n}\n\nvar planets = [ \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" ];\n",
  "    var planets = {\n        Mercury: 58,\n        Venus: 108,\n        Earth:\
    \ 150,\n        Mars: 228,\n        Jupiter: 778,\n        Saturn: 1427,\n   \
    \     Uranus: 2869,\n        Neptune: 4497\n    };\n    var start = planets[planet1]\
    \ || 0;\n    var end = planets[planet2] || Infinity;\n    var res = Object.keys(planets).filter(function(n){\n\
    \        return planets[n] > start && planets[n] < end;\n    });\n    return res.sort(function(a,\
    \ b){\n        return planets[a] - planets[b];\n    });\n}", "    let planets\
    \ = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\
    \    let planetIndex1 = planets.indexOf(planet1);\n    let planetIndex2 = planets.indexOf(planet2);\n\
    \    let betweenPlanets = planets.slice(planetIndex1, planetIndex2 + 1);\n   \
    \ let result = [];\n    if(planetIndex1 >= 0 && planetIndex2 >= 0 && planetIndex1\
    \ < planetIndex2){\n        result = betweenPlanets;\n    }\n    return result;\n\
    }\n", "    let planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\n    if(!planets.includes(planet1) || !planets.includes(planet2)){\n\
    \        return [];\n    }\n    let p1 = planets.indexOf(planet1);\n    let p2\
    \ = planets.indexOf(planet2);\n    if(p1 > p2){\n        return planets.slice(p2,\
    \ p1+1);\n    }\n    return planets.slice(p1, p2+1);\n}", "  let planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n  let\
    \ result = [];\n  if(planets.indexOf(planet1) < 0 || planets.indexOf(planet2)\
    \ < 0){\n    return [];\n  }else if(planets.indexOf(planet1) < planets.indexOf(planet2)){\n\
    \    for(let i = planets.indexOf(planet1); i < planets.indexOf(planet2); i++){\n\
    \      result.push(planets[i + 1]);\n    }\n  }else{\n    for(let i = planets.indexOf(planet2);\
    \ i < planets.indexOf(planet1); i++){\n      result.push(planets[i + 1]);\n  \
    \  }\n  }\n  return result;\n}\n", "    \n    // let solarSystem = {\n    // \
    \    \"mercury\": 1,\n    //     \"venus\": 2,\n    //     \"earth\": 3,\n   \
    \ //     \"mars\": 4,\n    //     \"jupiter\": 5,\n    //     \"saturn\": 6,\n\
    \    //     \"uranus\": 7,\n    //     \"neptune\": 8\n    // }\n    let numPlanet1\
    \ = 0;\n    let numPlanet2 = 0;\n    let solarSystem = [\n        [\"mercury\"\
    , 1],\n        [\"venus\", 2],\n        [\"earth\", 3],\n        [\"mars\", 4],\n\
    \        [\"jupiter\", 5],\n        [\"saturn\", 6],\n        [\"uranus\", 7],\n\
    \        [\"neptune\", 8]\n    ]\n    let solarResult = [];\n    let finalResult\
    \ = [];\n    // let result = solarSystem.hasOwnProperty(planet1);\n    // console.log(result);\n\
    \    for(let i = 0; i < solarSystem.length; i++){\n        if(solarSystem[i][0]\
    \ === planet1){\n            numPlanet1 = solarSystem[i][1];\n        }\n    \
    \    if(solarSystem[i][0] === planet2){\n            numPlanet2 = solarSystem[i][1];\n\
    \        }\n    }\n    // console.log(numPlanet1);\n    // console.log(numPlanet2);\n\
    \    if(numPlanet1 === 0 || numPlanet2 === 0){\n        return finalResult;\n\
    \    } else if(numPlanet1 > numPlanet2){\n        for(let i = numPlanet2 + 1;\
    \ i < numPlanet1; i++){\n            for(let j = 0; j < solarSystem.length; j++){\n\
    \                if(solarSystem[j][1] === i){\n                    solarResult.push(solarSystem[j][0]);\n\
    \                }\n            }\n        }\n    } else {\n        for(let i\
    \ = numPlanet1 + 1; i < numPlanet2; i++){\n            for(let j = 0; j < solarSystem.length;\
    \ j++){\n                if(solarSystem[j][1] === i){\n", "    let list = [\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"];\n    let p1 = list.indexOf(planet1);\n    let p2 = list.indexOf(planet2);\n\
    \    let notFound = [];\n    let result = [];\n    if (p1 < 0) {notFound.push(planet1)}\n\
    \    if (p2 < 0) {notFound.push(planet2)}\n    if (notFound.length > 0) {\n  \
    \      console.log(\"Planet \" + notFound.join(\" or \") + \" not found.\")\n\
    \    } else {\n        if (p1 < p2) {\n            for (i = p1+1; i < p2; i++)\
    \ {\n                result.push(list[i]);\n            }\n        } else {\n\
    \            for (i = p2+1; i < p1; i++) {\n                result.push(list[i]);\n\
    \            }\n        }\n        console.log(result);\n    }\n}\nbf(\"Mercury\"\
    , \"Mars\");\nbf(\"Mars\", \"Mercury\");\nbf(\"Earth\", \"Mercury\");\nbf(\"Sun\"\
    , \"Jupiter\");\n", "let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\nif(!planets.includes(planet1)\
    \ || !planets.includes(planet2)){\n    return []\n}else{\n    let index1 = planets.indexOf(planet1);\n\
    \    let index2 = planets.indexOf(planet2);\n    let result = [];\n    if(index1>index2){\n\
    \        planets.forEach((planet,index)=>{\n            if(index>index2 && index<index1){\n\
    \                result.push(planet)\n            }\n        })\n    }else{\n\
    \        planets.forEach((planet,index)=>{\n            if(index>index1 && index<index2){\n\
    \                result.push(planet)\n            }\n        })\n    }\n    return\
    \ result\n}\n}", "    let arr = [];\n    if(planets.includes(planet1) && planets.includes(planet2)){\n\
    \        let first = planets.indexOf(planet1);\n        let second = planets.indexOf(planet2);\n\
    \        if(first < second){\n            for(let i = first + 1; i < second; i++){\n\
    \                arr.push(planets[i]);\n            }\n        } else {\n    \
    \        for(let i = second + 1; i < first; i++){\n                arr.push(planets[i]);\n\
    \            }\n        }\n    }\n    return arr;\n}\n", "    let planets = [\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"];\n    if (planets.indexOf(planet1) > planets.indexOf(planet2))\
    \ {\n        return planets.slice(planets.indexOf(planet2), planets.indexOf(planet1))\n\
    \    }\n    else {\n        return planets.slice(planets.indexOf(planet1), planets.indexOf(planet2))\n\
    \    }\n}", "    let planetss = {\n        Mercury:1,\n        Venus:2,\n    \
    \    Earth:3,\n        Mars:4,\n        Jupiter:5,\n        Saturn:6,\n      \
    \  Uranus:7,\n        Neptune:8\n    }\n    if(planetss[planet1] === undefined\
    \ || planetss[planet2] === undefined){\n        return []\n    }\n    let planets\
    \ = [planet1, planet2].sort((a,b)=>planetss[a]-planetss[b])\n    let arr = []\n\
    \    for(let i=planetss[planets[0]]; i<=planetss[planets[1]]; i++){\n        arr.push(Object.keys(planetss).find(e=>planetss[e]===i))\n\
    \    }\n    return arr\n}", "    const planets = [ \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" ];\n    var\
    \ indx1 = planets.indexOf(planet1);\n    var indx2 = planets.indexOf(planet2);\n\
    \    var newarr = [];\n    if (indx1 > indx2){\n        for (let i = indx2 + 1;\
    \ i < indx1; i++){\n            newarr.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = indx1 + 1; i < indx2; i++){\n            newarr.push(planets[i]);\n\
    \        }\n    }\n    return newarr;\n}", "    var planets = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    var index1 = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n\
    \    if(index1 == -1 || index2 == -1) return [];\n    if(index1 > index2){\n \
    \       var temp = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    return planets.slice(index1+1, index2);\n}", "    var planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    var\
    \ arr = []\n    var inbetween;\n    if(planets.indexOf(planet1) !== -1 && planets.indexOf(planet2)\
    \ !== -1){\n        if(planets.indexOf(planet1) < planets.indexOf(planet2)){\n\
    \            inbetween = planets.indexOf(planet1) + 1;\n            while(inbetween\
    \ < planets.indexOf(planet2)){\n                arr.push(planets[inbetween]);\n\
    \                inbetween++;\n            }\n        }\n        else{\n     \
    \       inbetween = planets.indexOf(planet2) + 1;\n            while(inbetween\
    \ < planets.indexOf(planet1)){\n                arr.push(planets[inbetween]);\n\
    \                inbetween++;\n            }\n        }\n    }\n    return arr;\n\
    }", "\n}", "  var planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\n  var start = planets.indexOf(planet1);\n  var end =\
    \ planets.indexOf(planet2);\n  var result = [];\n  if(start >= 0 && end >= 0){\n\
    \    if(start < end){\n      for(var i = start + 1; i < end; i++){\n        result.push(planets[i]);\n\
    \      }\n    } else if(start > end){\n      for(var i = end + 1; i < start; i++){\n\
    \        result.push(planets[i]);\n      }\n    }\n  }\n  return result;\n}\n",
  "    let planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'];\n    if(planets.indexOf(planet1) == -1 || planets.indexOf(planet2)\
    \ == -1)\n        return [];\n    if(planets.indexOf(planet1) > planets.indexOf(planet2)){\n\
    \        let temp = planet1;\n        planet1 = planet2;\n        planet2 = temp;\n\
    \    }\n    return planets.slice(planets.indexOf(planet1) + 1, planets.indexOf(planet2));\n\
    }", "    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n    const u = [];\n    const i1 = planets.indexOf(planet1);\n\
    \    const i2 = planets.indexOf(planet2);\n    if (i1 > -1 && i2 > -1){\n    \
    \    if (i1 < i2){\n            for (let i = i1+1; i < i2; i++){\n           \
    \     u.push(planets[i]);\n            }\n        } else {\n            for (let\
    \ i = i2+1; i < i1; i++){\n                u.push(planets[i]);\n            }\n\
    \        }\n    }\n    return u;\n}", "\tlet result = [];\n\tlet index1 = planets.indexOf(planet1);\n\
    \tlet index2 = planets.indexOf(planet2);\n\tif(index1 === -1 || index2 === -1){\n\
    \t\treturn result;\n\t}\n\tif(index1 < index2){\n\t\tfor(let i = index1+1; i <\
    \ index2; i++){\n\t\t\tresult.push(planets[i]);\n\t\t}\n\t}else{\n\t\tfor(let\
    \ i = index2+1; i < index1; i++){\n\t\t\tresult.push(planets[i]);\n\t\t}\n\t}\n\
    \treturn result;\n}", "    let planets = ['Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    let start=planets.indexOf(planet1);\n\
    \    let end=planets.indexOf(planet2);\n    let result=[];\n    if (start ===\
    \ -1 || end === -1) {\n        return result;\n    }\n    if (start<end) {\n \
    \       for (let i=start+1; i<end; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i=end+1; i<start; i++) {\n        \
    \    result.push(planets[i]);\n        }\n    }\n    return result;\n}", "   \
    \ const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"];\n    let answer = [];\n    let index1 = planets.indexOf(planet1);\n\
    \    let index2 = planets.indexOf(planet2);\n    if(index1 === -1 || index2 ===\
    \ -1){\n        return [];\n    }\n    if(index1 < index2){\n        for(let i\
    \ = index1 + 1; i < index2; i++){\n            answer.push(planets[i]);\n    \
    \    }\n    }\n    else{\n        for(let i = index2 + 1; i < index1; i++){\n\
    \            answer.push(planets[i]);\n        }\n    }\n    return answer;\n}",
  "    let planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'];\n    let i = planets.indexOf(planet1);\n    let j = planets.indexOf(planet2);\n\
    \    if(i == -1 || j == -1){\n        return [];\n    }\n    if(i < j){\n    \
    \    return planets.slice(i+1, j);\n    }else{\n        return planets.slice(j+1,\
    \ i);\n    }\n}", "    let p1 = \"\";\n    let p2 = \"\";\n    const obj = {\n\
    \        Mercury: 1,\n        Venus: 2,\n        Earth: 3,\n        Mars: 4,\n\
    \        Jupiter: 5,\n        Saturn: 6,\n        Uranus: 7,\n        Neptune:\
    \ 8\n    }\n    for(key in obj){\n        if(key === planet1){\n            p1\
    \ = obj[key];\n        }\n        if(key === planet2){\n            p2 = obj[key];\n\
    \        }\n    }\n    let res = [];\n    for(key in obj){\n        if(obj[key]\
    \ > p1 && obj[key] < p2){\n            res.push(key);\n        }\n    }\n    return\
    \ res;\n}", "    if (isNaN(planet1) && isNaN(planet2)){\n    let planets = [\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"];\n    let one = planets.indexOf(planet1);\n    let two = planets.indexOf(planet2);\n\
    \    console.log(one);\n    console.log(two);\n    let ar = planets.slice(one,\
    \ two+1);\n    return ar;\n    }\n    else{\n    return [];\n    }\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
