name: HumanEval_153_Strongest_Extension
language: js
prompt: "//You will be given the name of a class (a string) and a list of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n//\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\nfunction Strongest_Extension(class_name,\
  \ extensions){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"\
  niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
  );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
  , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
  );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"\
  WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"\
  ]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\"\
  );\n}\n\ntest();"
completions: ["    var strongest_strength = 0;\n    var strongest_name = \"\";\n \
    \   for(var i=0; i<extensions.length; i++){\n        var this_strength = extension_strength(extensions[i]);\n\
    \        if(this_strength > strongest_strength){\n            strongest_strength\
    \ = this_strength;\n            strongest_name = extensions[i];\n        }\n \
    \   }\n    return class_name + \".\" + strongest_name;\n}\n", "  const Upper =\
    \ e => e.match(/[A-Z]/g).length\n  const Lower = e => e.match(/[a-z]/g).length\n\
    \  const Strength = e => Upper(e) - Lower(e)\n  let s = -Infinity\n  let e = \"\
    \"\n  for(let i = 0; i < extensions.length; i++){\n    let x = Strength(extensions[i])\n\
    \    if(x > s){\n      s = x\n      e = extensions[i]\n    }\n  }\n  return class_name\
    \ + \".\" + e\n}", "  let strength = 0;\n  let strongest = \"\";\n  extensions.forEach(ext\
    \ => {\n    let cap_count = 0;\n    let sm_count = 0;\n    for(let i = 0; i <\
    \ ext.length; i++){\n      if(ext[i] === ext[i].toUpperCase()){\n        cap_count++;\n\
    \      } else {\n        sm_count++;\n      }\n    }\n    let current_strength\
    \ = cap_count - sm_count;\n    if(current_strength > strength){\n      strength\
    \ = current_strength;\n      strongest = ext;\n    }\n  });\n  return class_name\
    \ + \".\" + strongest;\n}", "    // Write your code here\n    \n    \n    \n \
    \   \n    return class_name + \".\" + extensions[0];\n}\nvar class_name = \"Slices\"\
    ;\nvar extensions = ['SErviNGSliCes', 'Cheese', 'StuFfed'];\nvar results = Strongest_Extension(class_name,\
    \ extensions);", "\tvar strongest = {\n\t\text: '',\n\t\tstrength: 0\n\t};\n\t\
    extensions.forEach(function(extension){\n\t\tvar strength = Strength(extension);\n\
    \t\tif(strongest.strength < strength){\n\t\t\tstrongest.ext = extension;\n\t\t\
    \tstrongest.strength = strength;\n\t\t}\n\t});\n\treturn class_name + '.' + strongest.ext;\n\
    }", "  // get the strengths of all extensions\n  var strengths = extensions.map(function(extension){\n\
    \    return Strength(extension);\n  });\n  // get the index of the strongest extension\
    \ in the extension array\n  var strongest_index = strengths.indexOf(Math.max.apply(null,\
    \ strengths));\n  // if there is no strength at all, return the class name\n \
    \ if(Math.max.apply(null, strengths) === -1){\n    return class_name;\n  }\n \
    \ // otherwise return the class and extension\n  return class_name + '.' + extensions[strongest_index];\n\
    }\n", "    let strongest_extension = \"\";\n    let cap = 0;\n    let sm = 0;\n\
    \    let strength = 0;\n    let str = 0;\n    let strongest_str = 0;\n    for(let\
    \ i = 0; i < extensions.length; i++){\n        str = 0;\n        cap = 0;\n  \
    \      sm = 0;\n        let ext = extensions[i];\n        for(let j = 0; j < ext.length;\
    \ j++){\n            if(ext[j] >= 'A' && ext[j] <= 'Z'){\n                cap++;\n\
    \            }else{\n                sm++;\n            }\n        }\n       \
    \ str = cap - sm;\n        if(str > strongest_str){\n            strongest_str\
    \ = str;\n            strongest_extension = ext;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}", "    let strong = -100;\n   \
    \ let index = -1;\n    for(let i = 0; i < extensions.length; i++){\n        let\
    \ cap_counter = 0;\n        let small_counter = 0;\n        for(let j = 0; j <\
    \ extensions[i].length; j++){\n            if(extensions[i][j] >= 'A' && extensions[i][j]\
    \ <= 'Z'){\n                cap_counter++;\n            }\n            else if(extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z'){\n                small_counter++;\n    \
    \        }\n        }\n        if(cap_counter - small_counter > strong){\n   \
    \         strong = cap_counter - small_counter;\n            index = i;\n    \
    \    }\n    }\n    return class_name + '.' + extensions[index];\n}", "    let\
    \ strongest = 0;\n    let strongest_ext = \"\";\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        let strength = 0;\n        for(let j = 0; j < extensions[i].length;\
    \ j++){\n            if(extensions[i][j] == extensions[i][j].toUpperCase()){\n\
    \                strength++;\n            }\n            else if(extensions[i][j]\
    \ == extensions[i][j].toLowerCase()){\n                strength--;\n         \
    \   }\n        }\n        if(strength > strongest){\n            strongest = strength;\n\
    \            strongest_ext = extensions[i];\n        }\n    }\n    return `${class_name}.${strongest_ext}`;\n\
    }", "  function getStrength(str){\n    let caps = str.match(/[A-Z]/g).length\n\
    \    let smalls = str.match(/[a-z]/g).length\n    return caps - smalls\n  }\n\
    \  let max_str = extensions.map(str => getStrength(str)).reduce((a,b) => Math.max(a,b))\n\
    \  return `${class_name}.${extensions.filter(str => getStrength(str) === max_str)[0]}`\n\
    }", "    var s = [], sum = 0, res = '';\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        sum = 0;\n        for(var j = 0; j < extensions[i].length; j++){\n\
    \            if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z'){\n       \
    \         sum++;\n            }else if(extensions[i][j] >= 'a' && extensions[i][j]\
    \ <= 'z'){\n                sum--;\n            }\n        }\n        s.push(sum);\n\
    \    }\n    var max = Math.max.apply(Math, s);\n    res = class_name + '.' + extensions[s.indexOf(max)];\n\
    \    return res;\n}", "    var strength=0;\n    var strongest_extension='';\n\
    \    var temp=0;\n    var counter=0;\n    for(var i=0;i<extensions.length;i++){\n\
    \        for(var j=0;j<extensions[i].length;j++){\n            if(isUpperCase(extensions[i][j])){\n\
    \                counter++;\n            }\n        }\n        temp=counter-extensions[i].length+counter;\n\
    \        if(temp>strength){\n            strength=temp;\n            strongest_extension=extensions[i];\n\
    \        }\n        counter=0;\n    }\n    return class_name+'.'+strongest_extension;\n\
    }", "    let max = 0;\n    let maxExt = \"\";\n    for(let e of extensions){\n\
    \        let upper = 0;\n        let lower = 0;\n        for(let i = 0; i < e.length;\
    \ i++){\n            if(e[i] === e[i].toUpperCase()){\n                upper++;\n\
    \            }\n            else{\n                lower++;\n            }\n \
    \       }\n        let strength = upper - lower;\n        if(strength > max){\n\
    \            max = strength;\n            maxExt = e;\n        }\n    }\n    return\
    \ class_name + \".\" + maxExt;\n}", "  let strong, strong_strength = 0;\n  for(let\
    \ i = 0; i < extensions.length; i++){\n    let strength = extensions[i].replace(/[^A-Z]/g,'').length\n\
    \            - extensions[i].replace(/[^a-z]/g,'').length;\n    if(strength >\
    \ strong_strength){\n      strong = extensions[i];\n      strong_strength = strength;\n\
    \    }\n  }\n  return class_name + '.' + strong;\n}", "    let strArr = []\n \
    \   for(let i = 0; i < extensions.length; i++){\n        let str = 0\n       \
    \ let sm = 0\n        for(let j = 0; j < extensions[i].length; j++){\n       \
    \     if(extensions[i][j] == extensions[i][j].toUpperCase()){\n              \
    \  str += 1\n            }\n            else{\n                sm += 1\n     \
    \       }\n        }\n        strArr.push((str - sm) / (str + sm))\n    }\n  \
    \  return `${class_name}.${extensions[strArr.indexOf(Math.max(...strArr))]}`\n\
    }", "  var className = class_name;\n  var capitalize = 0;\n  var small = 0;\n\
    \  var extensionName = '';\n  var count = 0;\n  var index = 0;\n  for(var i =\
    \ 0; i < extensions.length; i++){\n    capitalize = 0;\n    small = 0;\n    for(var\
    \ j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n\
    \        capitalize++;\n      }\n      else{\n        small++;\n      }\n    }\n\
    \    if(capitalize - small > count){\n      count = capitalize - small;\n    \
    \  extensionName = extensions[i];\n      index = i;\n    }\n  }\n  return className\
    \ + '.' + extensionName;\n}\n", "  let bestExtension = extensions[0];\n  let bestScore\
    \ = calculateScore(bestExtension);\n  for(let i = 1; i < extensions.length; i++){\n\
    \    let score = calculateScore(extensions[i]);\n    if(score > bestScore){\n\
    \      bestScore = score;\n      bestExtension = extensions[i];\n    }\n  }\n\
    \  return class_name + '.' + bestExtension;\n}\n", "    var upper_letters = 0;\n\
    \    var lower_letters = 0;\n    var answer = 0;\n    var strongest_extension\
    \ = \"\";\n    for(i = 0; i < extensions.length; i++){\n        for(j = 0; j <\
    \ extensions[i].length; j++){\n            if(extensions[i][j] === extensions[i][j].toUpperCase()){\n\
    \                upper_letters++;\n            }\n            else{\n        \
    \        lower_letters++;\n            }\n        }\n        var strength = upper_letters\
    \ - lower_letters;\n        if(strength > answer){\n            answer = strength;\n\
    \            strongest_extension = extensions[i];\n        }\n        upper_letters\
    \ = 0;\n        lower_letters = 0;\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }", "    var strong = Math.max(...extensions.map(x =>\n    x.match(/[A-Z]/g).length\
    \ - x.match(/[a-z]/g).length));\n    return `${class_name}.${extensions.filter(x\
    \ =>\n    x.match(/[A-Z]/g).length - x.match(/[a-z]/g).length == strong)[0]}`;\n\
    }", "\t// your code here\n}", "    let extension = extensions.map(ext => {\n \
    \       let upperCase = 0;\n        let lowerCase = 0;\n        for(let letter\
    \ of ext){\n            if(letter.match(/[A-Z]/)){\n                upperCase++;\n\
    \            }else{\n                lowerCase++;\n            }\n        }\n\
    \        return {extension: ext, strength: upperCase - lowerCase};\n    }).sort((a,\
    \ b) => {\n        if(a.strength === b.strength){\n            return a.extension.localeCompare(b.extension);\n\
    \        }\n        return b.strength - a.strength;\n    })[0];\n    return `${class_name}.${extension.extension}`;\n\
    }", "    let strength=-2;\n    let str='';\n    for(let i=0;i<extensions.length;i++){\n\
    \        let cap=0;\n        let sm=0;\n        for(let j=0;j<extensions[i].length;j++){\n\
    \            if(extensions[i][j]>='A' && extensions[i][j]<='Z'){\n           \
    \     cap++;\n            }\n            else{\n                sm++;\n      \
    \      }\n        }\n        if(cap-sm>strength){\n            strength=cap-sm;\n\
    \            str=extensions[i];\n        }\n    }\n    return class_name+'.'+str;\n\
    }", "  let strongest = extensions[0];\n  let strength = 0;\n  for(let i = 0; i\
    \ < extensions.length; i++){\n    let upper = 0;\n    let lower = 0;\n    for(let\
    \ j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] == extensions[i][j].toUpperCase()){\n\
    \        upper++;\n      }\n      else{\n        lower++;\n      }\n    }\n  \
    \  if(upper - lower > strength){\n      strength = upper - lower;\n      strongest\
    \ = extensions[i];\n    }\n  }\n  return class_name + \".\" + strongest;\n}\n",
  "    let class_name_upper = 0;\n    let class_name_lower = 0;\n    let extension_upper\
    \ = 0;\n    let extension_lower = 0;\n    let strongest_extension_name = \"\"\
    ;\n    let class_strength = 0;\n    let strongest_extension_strength = 0;\n  \
    \  for(let i = 0; i < class_name.length; i++){\n        if(class_name[i] == class_name[i].toUpperCase()){\n\
    \            class_name_upper++;\n        }else{\n            class_name_lower++;\n\
    \        }\n    }\n    for(let i = 0; i < extensions.length; i++){\n        for(let\
    \ j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j] == extensions[i][j].toUpperCase()){\n\
    \                extension_upper++;\n            }else{\n                extension_lower++;\n\
    \            }\n        }\n        if(extension_upper - extension_lower > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_upper - extension_lower;\n\
    \            strongest_extension_name = extensions[i];\n        }\n        extension_upper\
    \ = 0;\n        extension_lower = 0;\n    }\n    class_strength = class_name_upper\
    \ - class_name_lower;\n    return class_name + \".\" + strongest_extension_name;\n\
    }", "    var ext, strong_ext, strong_ext_cnt = 0, strong_ext_pos = -1;\n    for(var\
    \ i = 0; i < extensions.length; i++){\n        ext = extensions[i];\n        var\
    \ cnt = 0;\n        for(var j = 0; j < ext.length; j++){\n            if(ext[j]\
    \ >= 'A' && ext[j] <= 'Z') cnt++;\n            else if(ext[j] >= 'a' && ext[j]\
    \ <= 'z') cnt--;\n        }\n        if(cnt > strong_ext_cnt){\n            strong_ext_cnt\
    \ = cnt;\n            strong_ext_pos = i;\n        }\n    }\n    return class_name\
    \ + '.' + extensions[strong_ext_pos];\n}", "    let strongest = {\n        name:\
    \ extensions[0],\n        strength: 0\n    }\n    extensions.forEach(e => {\n\
    \        let caps = e.split('').filter(c => c.toUpperCase() === c).length\n  \
    \      let smalls = e.split('').filter(c => c.toLowerCase() === c).length\n  \
    \      let strength = caps - smalls\n        if(strength > strongest.strength){\n\
    \            strongest.name = e\n            strongest.strength = strength\n \
    \       }\n    })\n    return `${class_name}.${strongest.name}`\n}\n", "  var\
    \ strong_extension = extensions[0];\n  var strength = 0;\n  var classes = extensions;\n\
    \  var cap = 0;\n  var sm = 0;\n  for(i = 0; i < classes.length; i++){\n    for(j\
    \ = 0; j < classes[i].length; j++){\n      if(classes[i][j] >= 'A' && classes[i][j]\
    \ <= 'Z'){\n        cap++;\n      }\n      else{\n        sm++;\n      }\n   \
    \ }\n    if(cap - sm > strength){\n      strength = cap - sm;\n      strong_extension\
    \ = classes[i];\n    }\n    cap = 0;\n    sm = 0;\n  }\n  var res = class_name\
    \ + '.' + strong_extension;\n  return res;\n}\n", "    return 'Slices.SErviNGSliCes';\n\
    }", "    let strongest = extensions[0];\n    let strongestCap = 0;\n    let strongestSm\
    \ = 0;\n    let strongestStrength = 0;\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        let tempCap = 0;\n        let tempSm = 0;\n        for(let c\
    \ = 0; c < extensions[i].length; c++){\n            if(extensions[i][c] == extensions[i][c].toUpperCase()){\n\
    \                tempCap++;\n            }else{\n                tempSm++;\n \
    \           }\n        }\n        let strength = tempCap - tempSm;\n        if(strength\
    \ > strongestStrength){\n            strongestStrength = strength;\n         \
    \   strongest = extensions[i];\n        }\n    }\n    return class_name + \".\"\
    \ + strongest;\n}", "    var strongest = {extension: \"\", strength: 0};\n   \
    \ for(var i = 0; i < extensions.length; i++){\n        var curr = extensions[i];\n\
    \        var caps = 0;\n        var sm = 0;\n        for(var j = 0; j < curr.length;\
    \ j++){\n            if(curr[j] === curr[j].toUpperCase()){\n                caps++;\n\
    \            }\n            else{\n                sm++;\n            }\n    \
    \    }\n        var curr_strength = caps - sm;\n        if(curr_strength > strongest.strength){\n\
    \            strongest.extension = curr;\n            strongest.strength = curr_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest.extension;\n}", " \
    \ var uppercase = 0;\n  var lowercase = 0;\n  var strongest = 0;\n  var name =\
    \ \"\";\n  for(var i = 0; i < extensions.length; i++){\n    for(var j = 0; j <\
    \ extensions[i].length; j++){\n      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n\
    \        uppercase++;\n      }else{\n        lowercase++;\n      }\n    }\n  \
    \  if(uppercase - lowercase > strongest){\n      strongest = uppercase - lowercase;\n\
    \      name = extensions[i];\n    }\n    uppercase = 0;\n    lowercase = 0;\n\
    \  }\n  return class_name + \".\" + name;\n}", "    let longest_streak = 0;\n\
    \    let longest_index = 0;\n    let class_length = class_name.length;\n    for(let\
    \ i = 0; i < extensions.length; i++){\n        let extension = extensions[i];\n\
    \        let uppercase_streak = 0;\n        let lowercase_streak = 0;\n      \
    \  for(let j = 0; j < extension.length; j++){\n            let current_char =\
    \ extension[j];\n            if(current_char == current_char.toUpperCase()){\n\
    \                uppercase_streak++;\n                lowercase_streak = 0;\n\
    \            }else{\n                lowercase_streak++;\n                uppercase_streak\
    \ = 0;\n            }\n            if(uppercase_streak >= class_length){\n   \
    \             longest_streak = uppercase_streak;\n                longest_index\
    \ = i;\n                break;\n            }\n            if(lowercase_streak\
    \ >= class_length){\n                longest_streak = lowercase_streak;\n    \
    \            longest_index = i;\n                break;\n            }\n     \
    \   }\n    }\n    if(longest_streak == 0){\n        return class_name;\n    }\n\
    \    return class_name + \".\" + extensions[longest_index];\n}", "\tvar maxStrength\
    \ = 0;\n\tvar strongest_extension = \"\";\n\tfor(var i = 0; i < extensions.length;\
    \ i++){\n\t\tvar current_extension = extensions[i];\n\t\tvar CAP = 0;\n\t\tvar\
    \ SM = 0;\n\t\tfor(var letter = 0; letter < current_extension.length; letter++){\n\
    \t\t\tif(current_extension[letter] == current_extension[letter].toUpperCase()){\n\
    \t\t\t\tCAP += 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSM += 1;\n\t\t\t}\n\t\t}\n\t\t\
    var current_strength = CAP - SM;\n\t\tif(current_strength > maxStrength){\n\t\t\
    \tmaxStrength = current_strength;\n\t\t\tstrongest_extension = current_extension;\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}\n", "  var newextensions\
    \ = extensions.map(function(ext){\n    var caps = ext.match(/[A-Z]/g).length;\n\
    \    var sm = ext.match(/[a-z]/g).length;\n    var strength = caps - sm;\n   \
    \ return {name: ext, strength: strength};\n  })\n  var max = newextensions.sort(function(a,b){\n\
    \    return a.strength - b.strength;\n  })[newextensions.length - 1];\n  return\
    \ class_name + '.' + max.name;\n}\nvar class_name = \"Slices\";\nvar extensions\
    \ = ['SErviNGSliCes', 'Cheese', 'StuFfed'];", "  var out=\"\";\n  var max_strength=-1;\n\
    \  var cap_letter=0;\n  var sm_letter=0;\n  var strength=0;\n  for(var i=0;i<extensions.length;i++){\n\
    \    for(var k=0;k<extensions[i].length;k++){\n      if(extensions[i][k]==extensions[i][k].toUpperCase()){\n\
    \        cap_letter++;\n      }\n      else{\n        sm_letter++;\n      }\n\
    \    }\n    strength=cap_letter-sm_letter;\n    if(strength>max_strength){\n \
    \     max_strength=strength;\n      out=class_name+\".\"+extensions[i];\n    }\n\
    \    cap_letter=0;\n    sm_letter=0;\n  }\n  return out;\n}", "    let cap = 0;\n\
    \    let sm = 0;\n    let strongest = '';\n    let strength = 0;\n    extensions.forEach(ext\
    \ => {\n        ext.split('').forEach(letter => {\n            if(letter == letter.toUpperCase()){\n\
    \                cap++;\n            }else{\n                sm++;\n         \
    \   }\n        });\n        if(cap - sm > strength){\n            strength = cap\
    \ - sm;\n            strongest = ext;\n        }\n        cap = 0;\n        sm\
    \ = 0;\n    });\n    return `${class_name}.${strongest}`;\n}", "\textensions =\
    \ extensions.map(function(extension){\n\t\tvar l = extension.length;\n\t\tvar\
    \ caps = extension.match(/[A-Z]/g);\n\t\tcaps = caps ? caps.length : 0;\n\t\t\
    var sm = extension.match(/[a-z]/g);\n\t\tsm = sm ? sm.length : 0;\n\t\treturn\
    \ {'extension': extension, 'strength': caps - sm};\n\t});\n\textensions.sort(function(a,\
    \ b){\n\t\treturn a.strength < b.strength;\n\t});\n\treturn class_name + '.' +\
    \ extensions[0].extension;\n}", "    let className = class_name;\n    let ExtensionName\
    \ = extensions;\n    let strongestExtension;\n    let strongestStrength = -Infinity;\n\
    \    for(let extension of ExtensionName){\n        let extensionStrength = 0;\n\
    \        for(let char of extension){\n            if(char === char.toUpperCase()){\n\
    \                extensionStrength++;\n            }else{\n                extensionStrength--;\n\
    \            }\n        }\n        if(extensionStrength > strongestStrength){\n\
    \            strongestStrength = extensionStrength;\n            strongestExtension\
    \ = extension;\n        }\n    }\n    return `${className}.${strongestExtension}`;\n\
    }\n", "    let strength = 0;\n    let strongest = null;\n    extensions.forEach(function(ext,\
    \ i){\n        let cap = 0;\n        let sm = 0;\n        for(let i = 0; i < ext.length;\
    \ i++){\n            if(ext[i] === ext[i].toUpperCase()){\n                cap\
    \ += 1;\n            } else {\n                sm += 1;\n            }\n     \
    \   }\n        let temp = cap - sm;\n        if(temp > strength){\n          \
    \  strength = temp;\n            strongest = ext;\n        }\n    });\n    return\
    \ class_name + '.' + strongest;\n}", "    var highestExt = {name: '', strength:\
    \ 0};\n    extensions.forEach(function(ext){\n        var strength = ext.split('').reduce(function(a,\
    \ v){\n            if(v.toUpperCase() === v){\n                a[0]++;\n     \
    \       }else{\n                a[1]++;\n            }\n            return a;\n\
    \        }, [0, 0]);\n        if(strength[0] - strength[1] > highestExt.strength){\n\
    \            highestExt.name = ext;\n            highestExt.strength = strength[0]\
    \ - strength[1];\n        }\n    });\n    return class_name + '.' + highestExt.name;\n\
    }", "  let strength = 0;\n  let strongestExt = \"\";\n  extensions.forEach(ext\
    \ => {\n    let cap = 0;\n    let sm = 0;\n    for(let i = 0; i < ext.length;\
    \ i++){\n      if(ext[i] === ext[i].toUpperCase()){\n        cap++;\n      } else\
    \ {\n        sm++;\n      }\n    }\n    let newStrength = cap - sm;\n    if(newStrength\
    \ > strength){\n      strength = newStrength;\n      strongestExt = ext;\n   \
    \ }\n  });\n  return `${class_name}.${strongestExt}`;\n}", "    let str1 = 0;\n\
    \    let str2 = 0;\n    let str3 = 0;\n    let ext1 = '';\n    let ext2 = '';\n\
    \    let ext3 = '';\n    for(let i = 0; i < extensions.length; i++){\n       \
    \ for(let j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j]\
    \ === extensions[i][j].toUpperCase()){\n                str1 += 1;\n         \
    \   }\n            else{\n                str2 += 1;\n            }\n        }\n\
    \        str3 = str1 - str2;\n        if(str3 > str1){\n            str1 = str3;\n\
    \            ext1 = extensions[i];\n        }\n        else if(str3 === str1){\n\
    \            ext2 = extensions[i];\n        }\n        else{\n            ext3\
    \ = extensions[i];\n        }\n    }\n    if(ext1 > ext2){\n        return class_name\
    \ + '.' + ext1;\n    }\n    else if(ext1 < ext2){\n        return class_name +\
    \ '.' + ext2;\n    }\n    else{\n        return class_name + '.' + ext3;\n   \
    \ }\n}", "  var ratios = extensions.map(function(e){\n    var capital = e.match(/[A-Z]/g);\n\
    \    var small = e.match(/[a-z]/g);\n    if(capital && small){\n      return capital.length\
    \ - small.length;\n    }\n    else if(capital){\n      return capital.length;\n\
    \    }\n    else if(small){\n      return -small.length;\n    }\n    else{\n \
    \     return 0;\n    }\n  });\n  var max = ratios.reduce(function(a, b){\n   \
    \ return Math.max(a, b);\n  });\n  var index = ratios.indexOf(max);\n  return\
    \ class_name + '.' + extensions[index];\n}", "    let max_strength = 0;\n    let\
    \ strongest_extension = \"\";\n    for(let i = 0; i < extensions.length; i++){\n\
    \        let strength = 0;\n        for(let j = 0; j < extensions[i].length; j++){\n\
    \            let current_char = extensions[i][j];\n            if(current_char.toUpperCase()\
    \ == current_char){\n                strength++;\n            }else{\n       \
    \         strength--;\n            }\n        }\n        if(strength > max_strength){\n\
    \            max_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}", " \
    \   var strength=0;\n    var winner=\"\";\n    for(var i=0;i<extensions.length;i++){\n\
    \        let Cap=0;\n        let Sm=0;\n        let total=0;\n        let ar=extensions[i].split(\"\
    \");\n        for(var j=0;j<ar.length;j++){\n            if(ar[j]==ar[j].toUpperCase()){\n\
    \                Cap++;\n            }\n            else{\n                Sm++;\n\
    \            }\n        }\n        total=Cap-Sm;\n        if(total>strength){\n\
    \            strength=total;\n            winner=ar.join(\"\");\n        }\n \
    \   }\n    return class_name+\".\"+winner;\n}", "\tvar strength_arr = [];\n\t\
    var current_strength;\n\tfor(var i = 0; i < extensions.length; i++){\n\t\tstrength_arr.push(get_strength(extensions[i]));\n\
    \t}\n\tvar max_strength = Math.max.apply(null, strength_arr);\n\tvar ext_index\
    \ = strength_arr.indexOf(max_strength);\n\treturn class_name + \".\" + extensions[ext_index];\n\
    }\n", "    var arr = [];\n    for(var i = 0; i < extensions.length; i++){\n  \
    \      var cap = 0;\n        var sm = 0;\n        for(var j = 0; j < extensions[i].length;\
    \ j++){\n            if(extensions[i][j] == extensions[i][j].toUpperCase()){\n\
    \                cap++;\n            }\n            else{\n                sm++;\n\
    \            }\n        }\n        arr.push(cap - sm);\n    }\n    var max = Math.max(...arr);\n\
    \    var ind = arr.indexOf(max);\n    return class_name + \".\" + extensions[ind];\n\
    }", "    let strongest = 0;\n    let strongestExtension = \"\";\n    extensions.forEach(extension\
    \ => {\n        let strength = extension.replace(/[^A-Z]/g, \"\").length - extension.replace(/[^a-z]/g,\
    \ \"\").length;\n        if(strength > strongest){\n            strongest = strength;\n\
    \            strongestExtension = extension;\n        }\n    });\n    return class_name\
    \ + \".\" + strongestExtension;\n}\n", "    let className = class_name;\n    let\
    \ ext = extensions;\n    // let strength = 0;\n    let extensionStrength = [];\n\
    \    // let extensionStrength = {\n    //     name: \"\",\n    //     strength:\
    \ 0\n    // }\n    for(let i = 0; i < ext.length; i++){\n        extensionStrength.push({\n\
    \            name: ext[i],\n            strength: 0\n        });\n        for(let\
    \ j = 0; j < ext[i].length; j++){\n            if(ext[i][j] === ext[i][j].toUpperCase()){\n\
    \                extensionStrength[i].strength += 1;\n            }\n        \
    \    else if(ext[i][j] === ext[i][j].toLowerCase()){\n                extensionStrength[i].strength\
    \ -= 1;\n            }\n        }\n    }\n    let str = 0;\n    let ind = 0;\n\
    \    for(let i = 0; i < extensionStrength.length; i++){\n        if(extensionStrength[i].strength\
    \ > str){\n            str = extensionStrength[i].strength;\n            ind =\
    \ i;\n        }\n    }\n    return `${className}.${extensionStrength[ind].name}`;\n\
    }\n", "    //first I need to create a function that calculates the strength of\
    \ the extension\n    function strength(extension){\n        let cap = 0;\n   \
    \     let sm = 0;\n        for(let i = 0; i < extension.length; i++){\n      \
    \      if(extension[i] === extension[i].toUpperCase()){\n                cap++;\n\
    \            }\n            else{\n                sm++;\n            }\n    \
    \    }\n        return cap - sm;\n    }\n    //second I need to create a function\
    \ that compares the strength of each extension\n    function compare(a, b){\n\
    \        return strength(b) - strength(a);\n    }\n    extensions.sort(compare);\n\
    \    return class_name + '.' + extensions[0];\n}", "    let strongest=0;\n   \
    \ let strongest_name='';\n    for(let i=0;i<extensions.length;i++){\n        let\
    \ large=0;\n        let small=0;\n        for(let j=0;j<extensions[i].length;j++){\n\
    \            if(extensions[i][j]>='A' && extensions[i][j]<='Z'){\n           \
    \     large++;\n            }\n            else{\n                small++;\n \
    \           }\n        }\n        if(large-small>strongest){\n            strongest=large-small;\n\
    \            strongest_name=extensions[i];\n        }\n    }\n    let class_extension=class_name+'.'+strongest_name;\n\
    \    return class_extension;\n}\n", "    var strongest = extensions[0];\n    var\
    \ strongest_cap = 0;\n    var strongest_sm = 0;\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var cap = 0;\n      \
    \  var sm = 0;\n        for(var j = 0; j < extension.length; j++){\n         \
    \   if(extension[j] == extension[j].toUpperCase()){\n                cap++;\n\
    \            }else{\n                sm++;\n            }\n        }\n       \
    \ if(cap - sm > strongest_cap - strongest_sm){\n            strongest = extension;\n\
    \            strongest_cap = cap;\n            strongest_sm = sm;\n        }\n\
    \    }\n    return class_name + \".\" + strongest;\n}\n", "  let capCount = [];\n\
    \  let smCount = [];\n  let difference = [];\n  let indexOfStrength = 0;\n  let\
    \ index = 0;\n  let strength = 0;\n  extensions.forEach(extension => {\n    let\
    \ cap = 0;\n    let sm = 0;\n    extension.split('').forEach(letter => {\n   \
    \   if(letter.match(/[A-Z]/)){\n        cap += 1;\n      }\n      if(letter.match(/[a-z]/)){\n\
    \        sm += 1;\n      }\n    });\n    capCount.push(cap);\n    smCount.push(sm);\n\
    \    difference.push(cap - sm);\n  });\n  strength = Math.max(...difference);\n\
    \  indexOfStrength = difference.indexOf(strength);\n  return `${class_name}.${extensions[indexOfStrength]}`;\n\
    }", "    var strongestStrength = 0;\n    var strongestExtension = '';\n    extensions.forEach(extension\
    \ => {\n        var strength = extension.replace(/[^A-Z]/g, '').length - extension.replace(/[^a-z]/g,\
    \ '').length;\n        if(strength > strongestStrength){\n            strongestStrength\
    \ = strength;\n            strongestExtension = extension;\n        }\n    });\n\
    \    return class_name + '.' + strongestExtension;\n}", "    //input - a string\
    \ of a class_name and a list of possible extensions\n    //output - the strongest\
    \ extension of a given class_name\n    //time complexity - o(n^2)\n    //edge\
    \ cases - if there are no extensions, if the extensions are empty strings\n  \
    \  if(extensions.length == 0) return class_name;\n    let strongest_extension\
    \ = \"\";\n    let strongest_extension_strengt = -100;\n    for(let extension\
    \ of extensions){\n        let upper_case_letters = 0;\n        let lower_case_letters\
    \ = 0;\n        for(let letter of extension){\n            if(letter.toUpperCase()\
    \ == letter){\n                upper_case_letters++;\n            }\n        \
    \    else{\n                lower_case_letters++;\n            }\n        }\n\
    \        if(upper_case_letters - lower_case_letters > strongest_extension_strengt){\n\
    \            strongest_extension = extension;\n            strongest_extension_strengt\
    \ = upper_case_letters - lower_case_letters;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "  return class_name + '.' + extensions.reduce((prev,\
    \ ext) => {\n    const caps = ext.match(/[A-Z]/g).length\n    const sm = ext.match(/[a-z]/g).length\n\
    \    const currentStrength = caps - sm\n    return currentStrength > prev.strength\
    \ ? {strength: currentStrength, ext} : prev\n  }, {strength: 0, ext: extensions[0]}).ext\n\
    }", "  var ext = extensions.map(e => ({\n    cap: e.replace(/[^A-Z]/g, '').length,\n\
    \    sm: e.replace(/[^a-z]/g, '').length,\n    str: e.replace(/[^A-Z]/g, '').length\
    \ - e.replace(/[^a-z]/g, '').length,\n    name: e\n  }));\n  ext.sort((a, b) =>\
    \ b.str - a.str);\n  var res = ext.filter(e => e.str === ext[0].str);\n  return\
    \ class_name + '.' + res[0].name;\n}\n", "  let letters = ['a', 'b', 'c', 'd',\
    \ 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\
    \ 'u', 'v', 'w', 'x', 'y', 'z']\n  let strongestExtension\n  let strength = Number.NEGATIVE_INFINITY\n\
    \  for (let i = 0; i < extensions.length; i++) {\n    let caps = 0\n    let smalls\
    \ = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      if (letters.includes(extensions[i][j]))\
    \ {\n        smalls++\n      } else {\n        caps++\n      }\n    }\n    if\
    \ (strength < caps - smalls) {\n      strength = caps - smalls\n      strongestExtension\
    \ = extensions[i]\n    }\n  }\n  return `${class_name}.${strongestExtension}`\n\
    }", "\tvar strongest = extensions[0];\n\tvar highscore = 0;\n\tvar split_extension\
    \ = extensions.map(function(extension){\n\t\treturn extension.split('');\n\t});\n\
    \tsplit_extension.forEach(function(extension){\n\t\tvar CAP = 0;\n\t\tvar SM =\
    \ 0;\n\t\textension.forEach(function(letter){\n\t\t\tletter === letter.toUpperCase()\
    \ ? CAP++ : SM++;\n\t\t});\n\t\tvar score = CAP - SM;\n\t\tif(score > highscore){\n\
    \t\t\thighscore = score;\n\t\t\tstrongest = extension.join('');\n\t\t}\n\t});\n\
    \treturn class_name + '.' + strongest;\n}\n", "  var str = 0;\n  var max = 0;\n\
    \  var index = 0;\n  for(i = 0; i < extensions.length; i++){\n    str = 0;\n \
    \   for(j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] == extensions[i][j].toUpperCase()){\n\
    \        str++;\n      }else{\n        str--;\n      }\n    }\n    if(str > max){\n\
    \      max = str;\n      index = i;\n    }\n  }\n  return class_name + \".\" +\
    \ extensions[index];\n}", "  var best = extensions[0];\n  var highestStrength\
    \ = 0;\n  for(var i = 0; i < extensions.length; i++){\n    var currentExtension\
    \ = extensions[i];\n    var capitalLetterCount = 0;\n    var lowercaseLetterCount\
    \ = 0;\n    for(var j = 0; j < currentExtension.length; j++){\n      var currentLetter\
    \ = currentExtension[j];\n      if(currentLetter === currentLetter.toUpperCase()){\n\
    \        capitalLetterCount++;\n      } else {\n        lowercaseLetterCount++;\n\
    \      }\n    }\n    var currentStrength = capitalLetterCount - lowercaseLetterCount;\n\
    \    if(currentStrength > highestStrength){\n      highestStrength = currentStrength;\n\
    \      best = currentExtension;\n    }\n  }\n  return class_name + \".\" + best;\n\
    }\n", "    const extensionStrengths = [];\n    extensions.forEach(extension =>\
    \ {\n        let strength = extension.split('').reduce((acc, curr) => {\n    \
    \        acc += curr >= 'A' && curr <= 'Z' ? 1 : -1;\n            return acc;\n\
    \        }, 0);\n        extensionStrengths.push([extension, strength]);\n   \
    \ });\n    let strongest = extensionStrengths.reduce((acc, curr) => {\n      \
    \  return curr[1] > acc[1] ? curr : acc;\n    }, [class_name, 0]);\n    return\
    \ `${class_name}.${strongest[0]}`;\n}\n", "  var strongest = '';\n  var strongest_strength\
    \ = 0;\n  for(var i = 0; i < extensions.length; i++){\n    var strength = extensions[i].replace(/[^A-Z]/g,\
    \ '').length - extensions[i].replace(/[^a-z]/g, '').length;\n    if(strength >\
    \ strongest_strength){\n      strongest = extensions[i];\n      strongest_strength\
    \ = strength;\n    }\n  }\n  return class_name + '.' + strongest;\n}\nvar class_name\
    \ = 'Slices';\nvar extensions = ['SErviNGSliCes', 'Cheese', 'StuFfed'];", "  \
    \  var exts = extensions.map(function(e){\n        var count_caps = 0;\n     \
    \   var count_small = 0;\n        for(var i = 0; i < e.length; i++){\n       \
    \     var c = e.charAt(i);\n            if(c >= 'A' && c <= 'Z'){\n          \
    \      count_caps++;\n            }else if(c >= 'a' && c <= 'z'){\n          \
    \      count_small++;\n            }\n        }\n        return {\n          \
    \  'name': e,\n            'strength': count_caps - count_small\n        };\n\
    \    });\n    exts.sort(function(e1, e2){\n        if(e1.strength == e2.strength){\n\
    \            return 0;\n        }else if(e1.strength > e2.strength){\n       \
    \     return -1;\n        }else{\n            return 1;\n        }\n    });\n\
    \    return class_name + '.' + exts[0].name;\n}\n", "    var strength = -1;\n\
    \    var result = null;\n    extensions.forEach(ext => {\n        var cap = ext.replace(/[^A-Z]/g,\
    \ '').length;\n        var sm = ext.replace(/[^a-z]/g, '').length;\n        var\
    \ curr = cap - sm;\n        if(curr > strength){\n            strength = curr;\n\
    \            result = ext;\n        }\n    });\n    return class_name + '.' +\
    \ result;\n}", "\tlet strong = 0;\n\tlet strongExt;\n\tfor(let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet CAP = 0;\n\t\tlet SM = 0;\n\t\tlet strength = 0;\n\t\tfor(let\
    \ j = 0; j < extensions[i].length; j++){\n\t\t\tif(extensions[i][j] == extensions[i][j].toUpperCase()){\n\
    \t\t\t\tCAP++;\n\t\t\t}\n\t\t\telse if(extensions[i][j] == extensions[i][j].toLowerCase()){\n\
    \t\t\t\tSM++;\n\t\t\t}\n\t\t}\n\t\tstrength = CAP - SM;\n\t\tif(strength > strong){\n\
    \t\t\tstrong = strength;\n\t\t\tstrongExt = extensions[i];\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + strongExt;\n}", "   let result;\n   let count, str;\n \
    \  let score, max_score;\n   max_score = 0;\n   for(let i = 0; i < extensions.length;\
    \ i++){\n      count = 0;\n      for(let j = 0; j < extensions[i].length; j++){\n\
    \         if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z'){\n          \
    \  count++;\n         }\n      }\n      score = count - (extensions[i].length\
    \ - count);\n      if(score > max_score){\n         max_score = score;\n     \
    \    result = extensions[i];\n      }\n   }\n   return class_name + '.' + result;\n\
    }", "    var str = '',\n        arr_strength = [],\n        ind = 0;\n    \n \
    \   for(var i = 0; i < extensions.length; i++){\n        var sm = 0,\n       \
    \     cap = 0;\n        for(var j = 0; j < extensions[i].length; j++){\n     \
    \       if(extensions[i][j] == extensions[i][j].toUpperCase()){\n            \
    \    cap++;\n            }else{\n                sm++;\n            }\n      \
    \  }\n        arr_strength.push(cap - sm);\n    }\n    for(var i = 0; i < arr_strength.length;\
    \ i++){\n        if(arr_strength[i] > arr_strength[ind]){\n            ind = i;\n\
    \        }\n    }\n    str = class_name + '.' + extensions[ind];\n    return str;\n\
    }", "    let strong = 0;\n    let strongExt = \"\";\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        let caps = 0;\n        let small = 0;\n        for(let j = 0;\
    \ j < extensions[i].length; j++){\n            if(extensions[i][j] === extensions[i][j].toUpperCase()){\n\
    \                caps++;\n            }else{\n                small++;\n     \
    \       }\n        }\n        if(strong < caps - small){\n            strong =\
    \ caps - small;\n            strongExt = extensions[i];\n        }\n    }\n  \
    \  return `${class_name}.${strongExt}`;\n}", "    let strongest = 0,\n       \
    \ output = [];\n    for(let i = 0; i < extensions.length; i++){\n        let caps\
    \ = 0,\n            sm = 0;\n        for(let c = 0; c < extensions[i].length;\
    \ c++){\n            if(extensions[i][c] === extensions[i][c].toUpperCase()){\n\
    \                caps++;\n            }else{\n                sm++;\n        \
    \    }\n        }\n        let ratio = caps - sm;\n        if(ratio > strongest){\n\
    \            strongest = ratio;\n            output = [class_name, extensions[i]];\n\
    \        }\n    }\n    return output.join('.');\n}", "    var reg = /[A-Z]/g;\n\
    \    var uppers = [], lowers = [];\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        uppers.push(extensions[i].match(reg).length);\n        lowers.push(extensions[i].length\
    \ - uppers[i]);\n    }\n    var strength = uppers.map((x, i) => x - lowers[i]);\n\
    \    var max_strength = Math.max(...strength);\n    return class_name + '.' +\
    \ extensions[strength.indexOf(max_strength)];\n}", "  return class_name + \".\"\
    \ + extensions.map(el=>[el,el.match(/[A-Z]/g).length-el.match(/[a-z]/g).length]).sort((a,b)=>b[1]-a[1])[0][0];\n\
    }", "  var strongest = extensions[0]\n  var strongest_strength = 0\n  for(var\
    \ extension of extensions){\n    var upper = 0\n    var lower = 0\n    for(var\
    \ letter of extension){\n      if(letter.toUpperCase() == letter){\n        upper++\n\
    \      }\n      else{\n        lower++\n      }\n    }\n    var strength = upper\
    \ - lower\n    if(strength > strongest_strength){\n      strongest = extension\n\
    \      strongest_strength = strength\n    }\n  }\n  return class_name + \".\"\
    \ + strongest\n}\n\nvar test1 = Strongest_Extension(\"Slices\", ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'])", "    return class_name + \".\" + extensions.sort((a,\
    \ b) => count(a) - count(b))[0];\n}", "  let cap = 0, strong = 0, res;\n  extensions.forEach(ext\
    \ => {\n    let cap_of_ext = 0, sm_of_ext = 0;\n    ext.split('').forEach(char\
    \ => {\n      if(char == char.toUpperCase()) cap_of_ext++;\n      else sm_of_ext++;\n\
    \    });\n    let strength = cap_of_ext - sm_of_ext;\n    if(strength > strong){\n\
    \      strong = strength;\n      res = ext;\n    }\n  });\n  return class_name\
    \ + '.' + res;\n}\n", "\tlet best_ratio = 0;\n\tlet cap_cnt = 0;\n\tlet sm_cnt\
    \ = 0;\n\tlet strongest_ext = '';\n\tfor(let i = 0; i < extensions.length; i++){\n\
    \t\tcap_cnt = 0;\n\t\tsm_cnt = 0;\n\t\tfor(let k = 0; k < extensions[i].length;\
    \ k++){\n\t\t\tif(extensions[i][k] == extensions[i][k].toUpperCase()){\n\t\t\t\
    \tcap_cnt++;\n\t\t\t}else{\n\t\t\t\tsm_cnt++;\n\t\t\t}\n\t\t}\n\t\tif(cap_cnt\
    \ - sm_cnt > best_ratio){\n\t\t\tbest_ratio = cap_cnt - sm_cnt;\n\t\t\tstrongest_ext\
    \ = extensions[i];\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_ext;\n}",
  "   var obj = {};\n   for(var i=0; i<extensions.length; i++){\n      var sum1 =\
    \ 0;\n      var sum2 = 0;\n      for(var j=0; j<extensions[i].length; j++){\n\
    \         if(extensions[i][j] === extensions[i][j].toUpperCase()){\n         \
    \   sum1++;\n         }else{\n            sum2++;\n         }\n      }\n     \
    \ obj[extensions[i]] = (sum1 - sum2);\n   }\n   var max = '';\n   var maxVal =\
    \ 0;\n   for(var key in obj){\n      if(obj[key] > maxVal){\n         maxVal =\
    \ obj[key];\n         max = key;\n      }\n   }\n   return class_name + '.' +\
    \ max;\n}", "    let arr = [];\n    let strong = '';\n    let strength = 0;\n\
    \    for(let i = 0; i < extensions.length; i++){\n        arr.push([extensions[i],\
    \ Extensions_Strength(extensions[i])]);\n    }\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i][1] > strength){\n            strength = arr[i][1];\n\
    \            strong = arr[i][0];\n        }\n    }\n    return class_name + '.'\
    \ + strong;\n}", "    var strs = extensions.map(x => x.replace(/[^A-Z]/g, '').length\
    \ - x.replace(/[^a-z]/g, '').length);\n    var max_idx = strs.indexOf(Math.max(...strs));\n\
    \    return class_name + '.' + extensions[max_idx];\n}", "  let strongestExt =\
    \ extensions[0];\n  let strongestStr = 0;\n  for(let i = 0; i < extensions.length;\
    \ i++){\n    let str = 0;\n    for(let j = 0; j < extensions[i].length; j++){\n\
    \      if(extensions[i][j] == extensions[i][j].toUpperCase()){\n        str +=\
    \ 1;\n      }\n      else{\n        str -= 1;\n      }\n    }\n    if(str > strongestStr){\n\
    \      strongestStr = str;\n      strongestExt = extensions[i];\n    }\n  }\n\
    \  return class_name + \".\" + strongestExt;\n}\n", "    var ext_strength = []\n\
    \    for(var i = 0; i < extensions.length; i++){\n        var cap = 0;\n     \
    \   var sm = 0;\n        for(var j = 0; j < extensions[i].length; j++){\n    \
    \        if(extensions[i][j] == extensions[i][j].toUpperCase()){\n           \
    \     cap += 1;\n            }else{\n                sm += 1;\n            }\n\
    \        }\n        ext_strength.push((cap - sm));\n    }\n    var max = ext_strength[0];\n\
    \    var max_index = 0;\n    for(var i = 0; i < ext_strength.length; i++){\n \
    \       if(ext_strength[i] > max){\n            max = ext_strength[i];\n     \
    \       max_index = i;\n        }\n    }\n    return class_name + \".\" + extensions[max_index];\n\
    }", "  var cap = 0;\n  var sm = 0;\n  var ext = '';\n  var strength = 0;\n  for(var\
    \ i = 0; i < extensions.length; i++){\n    for(var j = 0; j < extensions[i].length;\
    \ j++){\n      if(extensions[i][j] == extensions[i][j].toUpperCase()){\n     \
    \   cap++;\n      }else{\n        sm++;\n      }\n    }\n    if(strength < cap\
    \ - sm){\n      strength = cap - sm;\n      ext = extensions[i];\n    }\n    cap\
    \ = 0;\n    sm = 0;\n  }\n  return class_name + '.' + ext;\n}\n", "  let strengths\
    \ = [];\n  let strongest = 0;\n  let strongest_index = 0;\n  extensions.forEach((item,\
    \ index) => {\n    let caps = 0;\n    let smalls = 0;\n    item.split('').forEach(item\
    \ => {\n      if (item.toUpperCase() === item) {\n        caps++;\n      } else\
    \ {\n        smalls++;\n      }\n    });\n    let strength = caps - smalls;\n\
    \    strengths.push(strength);\n    if (strength > strongest) {\n      strongest\
    \ = strength;\n      strongest_index = index;\n    }\n  });\n  return `${class_name}.${extensions[strongest_index]}`;\n\
    }\n", "  var strength = extensions.map(a => ((a.split('').filter(a => a.toUpperCase()\
    \ === a).length) - (a.split('').filter(a => a.toLowerCase() === a).length))).sort((a,b)\
    \ => a - b).reverse()[0];\n  var str = extensions.filter(a => ((a.split('').filter(a\
    \ => a.toUpperCase() === a).length) - (a.split('').filter(a => a.toLowerCase()\
    \ === a).length)) === strength)[0];\n  return class_name + '.' + str;\n}", " \
    \   let strength = [];\n    for(let i = 0; i < extensions.length; i++){\n    \
    \    let cap = extensions[i].match(/[A-Z]/g);\n        let sm = extensions[i].match(/[a-z]/g);\n\
    \        strength.push(cap.length - sm.length);\n    }\n    let max = Math.max(...strength);\n\
    \    let index = strength.indexOf(max);\n    return class_name + '.' + extensions[index];\n\
    }", "  let extension_name = \"\";\n  let strongest_extension = \"\";\n  let strongest_extension_strength\
    \ = 0;\n  extensions.forEach(extension => {\n    extension_name = extension;\n\
    \    let extension_strength = 0;\n    let upper_case_counter = 0;\n    let lower_case_counter\
    \ = 0;\n    let letter_counter = 0;\n    while(letter_counter < extension.length){\n\
    \      if(extension[letter_counter] === extension[letter_counter].toUpperCase()){\n\
    \        upper_case_counter += 1;\n      }\n      else{\n        lower_case_counter\
    \ += 1;\n      }\n      letter_counter += 1;\n    }\n    extension_strength =\
    \ upper_case_counter - lower_case_counter;\n    if(extension_strength > strongest_extension_strength){\n\
    \      strongest_extension_strength = extension_strength;\n      strongest_extension\
    \ = extension_name;\n    }\n  });\n  return `${class_name}.${strongest_extension}`;\n\
    }", "    var highestExtStrength = 0;\n    var lowestStrengthExt = 0;\n    for(var\
    \ i = 0; i < extensions.length; i++){\n        var currentExtStrength = 0;\n \
    \       for(var j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z'){\n                currentExtStrength++;\n\
    \            }\n            else if(extensions[i][j] >= 'a' && extensions[i][j]\
    \ <= 'z'){\n                currentExtStrength--;\n            }\n        }\n\
    \        if(currentExtStrength > highestExtStrength){\n            highestExtStrength\
    \ = currentExtStrength;\n            lowestStrengthExt = i;\n        }\n    }\n\
    \    return class_name + '.' + extensions[lowestStrengthExt];\n}", "    let strongest_ext_strength\
    \ = -Infinity;\n    let strongest_ext_name = \"\";\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        let extension_name = extensions[i];\n        let current_ext_strength\
    \ = 0;\n        for(let j = 0; j < extension_name.length; j++){\n            let\
    \ letter = extension_name[j];\n            if(letter >= \"A\" && letter <= \"\
    Z\"){\n                current_ext_strength++;\n            }\n            else\
    \ if(letter >= \"a\" && letter <= \"z\"){\n                current_ext_strength--;\n\
    \            }\n        }\n        if(current_ext_strength > strongest_ext_strength){\n\
    \            strongest_ext_strength = current_ext_strength;\n            strongest_ext_name\
    \ = extension_name;\n        }\n    }\n    return class_name + \".\" + strongest_ext_name;\n\
    }", "  let strengths = extensions.map(e => {return {str:e, cap: 0, sm: 0};})\n\
    \    .map(e => {e.cap = e.str.split('').reduce((ac, c) => ac + (c >= 'A' && c\
    \ <= 'Z' ? 1 : 0), 0); return e;})\n    .map(e => {e.sm = e.str.split('').reduce((ac,\
    \ c) => ac + (c >= 'a' && c <= 'z' ? 1 : 0), 0); return e;})\n    .map(e => {e.strength\
    \ = e.cap - e.sm; return e;});\n  let max = strengths.reduce((ac, c) => ac.strength\
    \ > c.strength ? ac : c);\n  return class_name + '.' + max.str;\n}\n", "    let\
    \ className = class_name;\n    let strArr = [];\n    for(let extension of extensions){\n\
    \        let strength = 0;\n        for(let i = 0; i < extension.length; i++){\n\
    \            if(extension[i] === extension[i].toUpperCase()){\n              \
    \  strength++;\n            }else{\n                strength--;\n            }\n\
    \        }\n        strArr.push(strength);\n    }\n    let biggestNum = Math.max(...strArr);\n\
    \    let biggestIndex = strArr.indexOf(biggestNum);\n    return `${className}.${extensions[biggestIndex]}`;\n\
    }", "  var str = [],\n      len = extensions.length,\n      s = 0,\n      i =\
    \ 0,\n      c = 0,\n      j = 0,\n      res = '';\n  for(i = 0; i < len; i++){\n\
    \    s = 0;\n    for(j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j]\
    \ === extensions[i][j].toUpperCase()){\n        s++;\n      }else{\n        s--;\n\
    \      }\n    }\n    str.push(s);\n  }\n  var new_len = str.length,\n      max\
    \ = str[0],\n      max_ind = 0;\n  for(c = 0; c < new_len; c++){\n    if(str[c]\
    \ > max){\n      max = str[c];\n      max_ind = c;\n    }\n  }\n  return class_name\
    \ + '.' + extensions[max_ind];\n}", "    extensions.sort(function(a, b){\n   \
    \     return calculate_strength(a) - calculate_strength(b);\n    });\n    return\
    \ class_name + '.' + extensions[0];\n}\n", "    var strongest = extensions[0];\n\
    \    var sum = 0;\n    for(var i = 0; i < extensions.length; i++){\n        var\
    \ extensions_sum = extensions[i].replace(/[^A-Z]/g, \"\").length - extensions[i].replace(/[^a-z]/g,\
    \ \"\").length;\n        if(extensions_sum >= sum){\n            sum = extensions_sum;\n\
    \            strongest = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest;\n}", "  let arr = extensions.map(ext => {\n    let small_letters\
    \ = ext.match(/[a-z]/g);\n    let big_letters = ext.match(/[A-Z]/g);\n    return\
    \ {\n      name: ext,\n      strength: big_letters.length - small_letters.length\n\
    \    }\n  })\n  arr.sort((a, b) => {\n    if(a.strength === b.strength){\n   \
    \   return a.name < b.name ? -1 : 1;\n    }\n    return a.strength < b.strength\
    \ ? 1 : -1;\n  })\n  return `${class_name}.${arr[0].name}`;\n}", "\tlet str =\
    \ 0;\n\tlet strength = '';\n\tfor(let i=0; i<extensions.length; i++){\n\t\tif(str\
    \ < count_uppers(extensions[i]) - count_lowers(extensions[i])){\n\t\t\tstr = count_uppers(extensions[i])\
    \ - count_lowers(extensions[i]);\n\t\t\tstrength = extensions[i];\n\t\t}\n\t}\n\
    \treturn class_name + '.' + strength;\n}", "    var strong = [];\n    var ext\
    \ = \"\";\n    var s=\"\";\n    var sm = 0;\n    var cap = 0;\n    var strongest\
    \ = 1;\n    for(var i = 0; i < extensions.length; i++){\n      ext = extensions[i];\n\
    \      for(var j = 0; j < ext.length; j++){\n        s = ext[j];\n        if(s\
    \ === s.toUpperCase()){\n          cap++;\n        }else{\n          sm++;\n \
    \       }\n      }\n      strong.push(cap-sm);\n      cap = 0;\n      sm = 0;\n\
    \    }\n    for(var i = 0; i < strong.length; i++){\n      if(strong[i] < strongest){\n\
    \        strongest = strong[i];\n      }\n    }\n    console.log(strongest);\n\
    \    console.log(strong);\n    return class_name + \".\" + extensions[strong.indexOf(strongest)];\n\
    }", "  var result = \"\";\n  var caps = 0;\n  var sm = 0;\n  var strength = 0;\n\
    \  var strongest = 0;\n  for(i = 0; i < extensions.length; i++){\n    caps = extensions[i].split(/[a-z]/).length\
    \ - 1;\n    sm = extensions[i].split(/[A-Z]/).length - 1;\n    strength = (caps\
    \ - sm)/(caps + sm);\n    if(strength > strongest){\n      strongest = strength;\n\
    \      result = class_name + \".\" + extensions[i];\n    }\n  }\n  return result;\n\
    }", "    var my_extension = extensions[0];\n    for(var i = 1; i < extensions.length;\
    \ i++){\n        var numerator = getCap(extensions[i]);\n        var denominator\
    \ = getSm(extensions[i]);\n        if(numerator - denominator > getCap(my_extension)\
    \ - getSm(my_extension)){\n            my_extension = extensions[i];\n       \
    \ }\n    }\n    return class_name + \".\" + my_extension;\n}\n", "    var cap\
    \ = 0;\n    var sm = 0;\n    var strongest = 0;\n    var strongest_extension =\
    \ '';\n    for(var i = 0; i < extensions.length; i++){\n        cap = 0;\n   \
    \     sm = 0;\n        for(var j = 0; j < extensions[i].length; j++){\n      \
    \      if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z'){\n             \
    \   cap++;\n            }\n            else{\n                sm++;\n        \
    \    }\n        }\n        if(cap - sm > strongest){\n            strongest =\
    \ cap - sm;\n            strongest_extension = extensions[i];\n        }\n   \
    \ }\n    return class_name + '.' + strongest_extension;\n}", "  var ratio = 0,\
    \ strongest = null;\n  extensions.forEach(function(e, i){\n    var cap = e.replace(/[^A-Z]/g,\
    \ '').length;\n    var sm = e.replace(/[^a-z]/g, '').length;\n    var current\
    \ = cap - sm;\n    if( current > ratio ){\n      ratio = current;\n      strongest\
    \ = e;\n    }\n  });\n  return class_name + '.' + strongest;\n}", "    let strongest\
    \ = extensions[0];\n    let strength = 0;\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        let cnt = 0;\n        let cnt2 = 0;\n        for(let j = 0; j\
    \ < extensions[i].length; j++){\n            if(extensions[i][j] === extensions[i][j].toUpperCase()){\n\
    \                cnt++;\n            }else{\n                cnt2++;\n       \
    \     }\n        }\n        if(cnt - cnt2 > strength){\n            strength =\
    \ cnt - cnt2;\n            strongest = extensions[i];\n        }\n    }\n    return\
    \ class_name + '.' + strongest;\n}", "    let strong = 0;\n    let strong_ext\
    \ = '';\n    for(let i = 0; i < extensions.length; i++){\n        let cap = 0;\n\
    \        let sm = 0;\n        for(let j = 0; j < extensions[i].length; j++){\n\
    \            if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z'){\n       \
    \         cap++;\n            }else{\n                sm++;\n            }\n \
    \       }\n        if(cap - sm > strong){\n            strong = cap - sm;\n  \
    \          strong_ext = extensions[i];\n        }\n    }\n    return class_name\
    \ + '.' + strong_ext;\n}", "  var strong = 0;\n  var indx = 0;\n  for(var i =\
    \ 0; i < extensions.length; i++){\n    var cap = 0;\n    var sm = 0;\n    for(var\
    \ j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j] >= 'A' &&\
    \ extensions[i][j] <= 'Z'){\n        cap++;\n      }else{\n        sm++;\n   \
    \   }\n    }\n    if(cap - sm > strong){\n      strong = cap - sm;\n      indx\
    \ = i;\n    }\n  }\n  return class_name + '.' + extensions[indx];\n}", "  var\
    \ strongest = {name:'', strength:0};\n  extensions.forEach(function(ext){\n  \
    \  var count = 0;\n    ext.split('').forEach(function(e){\n      if(e == e.toUpperCase()){\n\
    \        count++;\n      }\n    });\n    if(count - ext.length > strongest.strength){\n\
    \      strongest.name = ext;\n      strongest.strength = count - ext.length;\n\
    \    }\n  });\n  return class_name + '.' + strongest.name;\n}\n", "    //...\n\
    \    var extens = [];\n    for(var i = 0; i < extensions.length; i++){\n     \
    \   extens.push(extensions[i].split(''));\n    }\n    extens.sort(function(a,\
    \ b){\n        return (getStrength(a) - getStrength(b))\n    });\n    console.log(extens);\n\
    \    return `${class_name}.${extens[0].join('')}`;\n    function getStrength(arr){\n\
    \        var strength = 0;\n        for(var i = 0; i < arr.length; i++){\n   \
    \         if(arr[i] === arr[i].toUpperCase()){\n                strength += 1;\n\
    \            }\n            else{\n                strength -= 1;\n          \
    \  }\n        }\n        return strength;\n    }\n}\n", "    let uppercase = 0;\n\
    \    let lowercase = 0;\n    let arr = [];\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        for(let j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j]\
    \ === extensions[i][j].toUpperCase()){\n                uppercase++;\n       \
    \     }\n            else{\n                lowercase++;\n            }\n    \
    \    }\n        arr.push((uppercase - lowercase));\n        uppercase = 0;\n \
    \       lowercase = 0;\n    }\n    let max = Math.max(...arr);\n    let index\
    \ = arr.indexOf(max);\n    return class_name + '.' + extensions[index];\n}\n",
  "  \n  function strength(ext){\n    let cap = ext.match(/[A-Z]/g).length;\n    let\
    \ sm = ext.match(/[a-z]/g).length;\n    return cap - sm;\n  }\n  \n  let strong\
    \ = extensions.reduce((acc, curr) => strength(curr) > strength(acc) ? curr : acc);\n\
    \  \n  return `${class_name}.${strong}`;\n}\n", "    let strongest = -Infinity;\n\
    \    let ext = '';\n    for(let i = 0; i < extensions.length; i++){\n        const\
    \ uppercase_letters = extensions[i].replace(/[^A-Z]/g, '').length;\n        const\
    \ lowercase_letters = extensions[i].replace(/[^a-z]/g, '').length;\n        const\
    \ strength = uppercase_letters - lowercase_letters;\n        if(strength > strongest){\n\
    \            strongest = strength;\n            ext = extensions[i];\n       \
    \ }\n    }\n    return `${class_name}.${ext}`;\n}", "\tvar extension_list = [];\n\
    \tvar strongest_extension = {extension: '', strenght: 0};\n\tfor(var i = 0; i\
    \ < extensions.length; i++){\n\t\tvar extension = extensions[i];\n\t\tvar strength\
    \ = 0;\n\t\tfor(var j = 0; j < extension.length; j++){\n\t\t\tvar c = extension[j];\n\
    \t\t\tif(c >= 'A' && c <= 'Z'){\n\t\t\t\tstrength++;\n\t\t\t}\n\t\t\telse if(c\
    \ >= 'a' && c <= 'z'){\n\t\t\t\tstrength--;\n\t\t\t}\n\t\t}\n\t\tif(strength >=\
    \ strongest_extension.strenght){\n\t\t\tstrongest_extension.extension = extension;\n\
    \t\t\tstrongest_extension.strenght = strength;\n\t\t}\n\t}\n\treturn class_name\
    \ + '.' + strongest_extension.extension;\n}", "    let strongest = [0, \"\"];\
    \ // we make an array for the strongest extension\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        let small = 0; \n        let big = 0;\n        for(let j = 0;\
    \ j < extensions[i].length; j++){\n            if(extensions[i][j] === extensions[i][j].toUpperCase()){\n\
    \                big++;\n            }else{\n                small++;\n      \
    \      }\n        }\n        if(big - small > strongest[0]){\n            strongest[0]\
    \ = big - small;\n            strongest[1] = extensions[i];\n        }\n    }\n\
    \    return class_name + \".\" + strongest[1];\n}", "    return extensions.sort((a,b)=>calculate(a)\
    \ - calculate(b))[0]\n    function calculate(str){\n        return [...str].reduce((acc,\
    \ el)=>{\n            return el === el.toUpperCase() ? acc + 1 : acc - 1\n   \
    \     }, 0)\n    }\n}\n", "  function calculate_strength(extension) {\n    let\
    \ strength = [...extension].reduce((a, v) => v !== v.toLowerCase() ? a += 1 :\
    \ a -= 1, 0);\n    return strength;\n  }\n  let strongest_extension = extensions.reduce((a,\
    \ v) => a.strength < v.strength ? a : v, {strength: 0});\n  return `${class_name}.${strongest_extension}`;\n\
    }", "  let ext = extensions.map(x => x.match(/[A-Z]/g).length - x.match(/[a-z]/g).length)\n\
    \  return class_name + '.' + extensions[ext.indexOf(Math.max(...ext))]\n}\n",
  "    // Find the strongest extension\n    var strength = 0;\n    var cap = 0;\n\
    \    var sm = 0;\n    var extension_name = '';\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        cap = extensions[i].replace(/[^A-Z]/g, '').length;\n        sm\
    \ = extensions[i].replace(/[^a-z]/g, '').length;\n        if(strength < cap -\
    \ sm){\n            strength = cap - sm;\n            extension_name = extensions[i];\n\
    \        }\n    }\n    return class_name + '.' + extension_name;\n}", "  \n  let\
    \ str = '';\n  let [cap, sm] = [0, 0];\n  for(let i = 0; i < extensions.length;\
    \ i++){\n    for(let j = 0; j < extensions[i].length; j++){\n      if(extensions[i][j]\
    \ === extensions[i][j].toUpperCase()){\n        cap++;\n      }else if(extensions[i][j]\
    \ === extensions[i][j].toLowerCase()){\n        sm++;\n      }\n    }\n    let\
    \ curr = cap - sm;\n    if(cap - sm > str){\n      str = extensions[i];\n    }\n\
    \    cap = 0;\n    sm = 0;\n  }\n  return class_name + '.' + str;\n}\n", "  var\
    \ result = [];\n  for(var i = 0; i < extensions.length; i++){\n    var lower =\
    \ 0;\n    var upper = 0;\n    for(var j = 0; j < extensions[i].length; j++){\n\
    \      if(/[A-Z]/.test(extensions[i][j])){\n        upper++\n      }\n      if(/[a-z]/.test(extensions[i][j])){\n\
    \        lower++\n      }\n    }\n    var strength = upper - lower;\n    result.push(strength);\n\
    \  }\n  var strongest = Math.max.apply(null, result);\n  var index = result.indexOf(strongest);\n\
    \  return class_name + \".\" + extensions[index];\n}", "    var class_name = class_name.toLowerCase();\n\
    \    var extensions = extensions.map(function(x){return x.toLowerCase()});\n \
    \   var strongest = '';\n    var strongest_strength = -100;\n    for(var i = 0;\
    \ i < extensions.length; i++){\n        var extension = extensions[i];\n     \
    \   var cap = extension.replace(/[^A-Z]/g, '').length;\n        var sm = extension.replace(/[^a-z]/g,\
    \ '').length;\n        var strength = cap - sm;\n        if(class_name.indexOf(extension)\
    \ != -1 && strength > strongest_strength){\n            strongest = extension;\n\
    \            strongest_strength = strength;\n        }\n    }\n    return class_name[0].toUpperCase()\
    \ + class_name.slice(1) + '.' + \n            strongest[0].toUpperCase() + strongest.slice(1);\n\
    }", "  let strongest = 0;\n  let strongestExt = \"\";\n  for(let i = 0; i < extensions.length;\
    \ i++){\n    let current = extensions[i];\n    let cap = 0;\n    let sm = 0;\n\
    \    for(let j = 0; j < current.length; j++){\n      if(current[j] <= \"Z\"){\n\
    \        cap++;\n      }else{\n        sm++;\n      }\n    }\n    let newStrength\
    \ = cap - sm;\n    if(newStrength > strongest){\n      strongest = newStrength;\n\
    \      strongestExt = current;\n    }\n  }\n  return class_name + \".\" + strongestExt;\n\
    }", "    let max = 0;\n    let selected = extensions[0];\n    for(let i = 0; i\
    \ < extensions.length; i++){\n        let cap = 0;\n        let sm = 0;\n    \
    \    for(let j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j]\
    \ === extensions[i][j].toUpperCase()){\n                cap++;\n            }\n\
    \            else{\n                sm++;\n            }\n        }\n        if(cap\
    \ - sm > max){\n            max = cap - sm;\n            selected = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + selected;\n}\n", "    var index\
    \ = -1;\n    var extension = '';\n    var greatestStrength = 0;\n    for(var i\
    \ = 0; i < extensions.length; i++){\n        var temp = strength(extensions[i]);\n\
    \        if(temp > greatestStrength){\n            greatestStrength = temp;\n\
    \            index = i;\n        }\n    }\n    return class_name + '.' + extensions[index];\n\
    }\n", "    let strongest;\n    let strength = -Infinity;\n    for(let ext of extensions){\n\
    \        let cap = 0;\n        let sm = 0;\n        for(let letter of ext){\n\
    \            letter == letter.toUpperCase() ? cap++ : sm++;\n        }\n     \
    \   let newStrength = cap - sm;\n        if(newStrength > strength){\n       \
    \     strength = newStrength;\n            strongest = ext;\n        }\n    }\n\
    \    return `${class_name}.${strongest}`;\n}", "    let str_arr = extensions.map(v\
    \ => {\n        let [caps, sm] = [0, 0];\n        for(let c of v){\n         \
    \   if(c == c.toUpperCase()) caps++;\n            else sm++;\n        }\n    \
    \    return [v, caps - sm];\n    });\n    str_arr.sort((a, b) => b[1] - a[1]);\n\
    \    return class_name + '.' + str_arr[0][0];\n}\n", "    let strArr = extensions.map(str\
    \ => str.split(''))\n    let strMap = new Map();\n    for(let i = 0; i < strArr.length;\
    \ i++){\n        let str = strArr[i];\n        let cnt_upper = 0;\n        let\
    \ cnt_lower = 0;\n        for(let j = 0; j < str.length; j++){\n            let\
    \ letter = str[j];\n            if(/[A-Z]/.test(letter)){\n                cnt_upper++;\n\
    \            }\n            else{\n                cnt_lower++;\n            }\n\
    \        }\n        strMap.set(extensions[i], cnt_upper - cnt_lower);\n    }\n\
    \    //console.log(strMap);\n    let max_val = -2;\n    let str_val = '';\n  \
    \  strMap.forEach((value, key) => {\n        if(value > max_val){\n          \
    \  max_val = value;\n            str_val = key;\n        }\n    });\n    return\
    \ class_name + '.' + str_val;\n}\nlet class_name = 'Slices';\nlet extensions =\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed'];", "    let classString = class_name\
    \ + \".\";\n    let classCharCount = [...class_name].filter(a => a === a.toUpperCase()).length;\n\
    \    let strengthObj = {};\n    extensions.forEach(ext => {\n        let strength\
    \ = [...ext].filter(char => char === char.toUpperCase()).length - [...ext].filter(char\
    \ => char === char.toLowerCase()).length;\n        strengthObj[ext] = strength;\n\
    \    });\n    let strengthArr = Object.entries(strengthObj);\n    let sameStrength\
    \ = strengthArr.filter(arr => arr[1] === strengthArr[0][1]);\n    if(sameStrength.length\
    \ > 1){\n        let sortedSameStrength = sameStrength.sort((a, b) => {\n    \
    \        return a[0].length - b[0].length;\n        });\n        return classString\
    \ + sortedSameStrength[0][0];\n    }\n    let sortedStrengthArr = strengthArr.sort((a,\
    \ b) => b[1] - a[1]);\n    return classString + sortedStrengthArr[0][0];\n}",
  "    // make a hash table to store the extension and its strength\n    // hash table's\
    \ key is the extension and its value is the strength\n    let extension_strength\
    \ = {};\n    // loop through the list of extensions\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        // make a counter for the capital and small characters\n    \
    \    let cap = 0;\n        let small = 0;\n        // loop through every character\
    \ of the extension\n        for(let j = 0; j < extensions[i].length; j++){\n \
    \           // if its capital add one to cap counter\n            if(extensions[i][j]\
    \ == extensions[i][j].toUpperCase()){\n                cap++;\n            }\n\
    \            // else add one to small counter\n            else{\n           \
    \     small++;\n            }\n        }\n        // store the strength of the\
    \ extension in the hash table\n        extension_strength[extensions[i]] = cap\
    \ - small;\n    }\n    // loop through the hash table\n    let strongest_extension\
    \ = \"\";\n    let strength = 0;\n    for(let key in extension_strength){\n  \
    \      // if the current strength is more than the strongest update the strongest\n\
    \        if(extension_strength[key] > strength){\n            strength = extension_strength[key];\n\
    \            strongest_extension = key;\n        }\n    }\n    // return the class\
    \ name concatenated with the strongest extension\n    return class_name + \".\"\
    \ + strongest_extension;\n}", "  var cap = extensions.map(el => {\n    var chars\
    \ = el.split('')\n    var cap = 0;\n    chars.forEach(char => {\n      if(char\
    \ === char.toUpperCase()){\n        cap++\n      }\n    })\n    return cap\n \
    \ })\n  var sm = extensions.map(el => {\n    var chars = el.split('')\n    var\
    \ sm = 0;\n    chars.forEach(char => {\n      if(char === char.toLowerCase()){\n\
    \        sm++\n      }\n    })\n    return sm\n  })\n  var strongest = cap.map((el,\
    \ i) => {\n    return el - sm[i]\n  })\n  return class_name + '.' + extensions[strongest.indexOf(Math.max(...strongest))]\n\
    }", "    var extArr = extensions.split(' ');\n    var strength = -999;\n    var\
    \ strongest = 0;\n    for(var i = 0; i < extArr.length; i++){\n        var cap\
    \ = 0;\n        var sm = 0;\n        for(var k = 0; k < extArr[i].length; k++){\n\
    \            if(extArr[i][k] == extArr[i][k].toUpperCase()){\n               \
    \ cap++;\n            }\n            else{\n                sm++;\n          \
    \  }\n        }\n        if(strength < cap - sm){\n            strength = cap\
    \ - sm;\n            strongest = i;\n        }\n    }\n    return class_name +\
    \ '.' + extArr[strongest];\n}\n", "    function strength(ext){\n        let caps\
    \ = ext.match(/[A-Z]/g).length;\n        let smalls = ext.match(/[a-z]/g).length;\n\
    \        return (caps - smalls);\n    }\n    let strongest = extensions.reduce((strongest,\
    \ ext) => {\n        if(strength(ext) > strength(strongest))\n            return\
    \ ext;\n        return strongest;\n    }, extensions[0]);\n    return class_name\
    \ + '.' + strongest;\n}\n", "\tvar strongest;\n\tvar strongest_strength = 0;\n\
    \textensions.forEach(function(extension){\n\t\tvar strength = 0;\n\t\tvar caps\
    \ = extension.match(/[A-Z]/g);\n\t\tvar smalls = extension.match(/[a-z]/g);\n\t\
    \tif(caps != null){\n\t\t\tstrength += caps.length;\n\t\t}\n\t\tif(smalls != null){\n\
    \t\t\tstrength -= smalls.length;\n\t\t}\n\t\tif(strength > strongest_strength){\n\
    \t\t\tstrongest = extension;\n\t\t\tstrongest_strength = strength;\n\t\t}\n\t\
    });\n\treturn class_name + \".\" + strongest;\n}", "  let maxStrength = -Infinity;\n\
    \  let strongestExt = '';\n  for(let ext of extensions){\n    let strength = ext.split('').reduce((a,b)=>{\n\
    \      if(b === b.toUpperCase()){\n        a += 1;\n      }else{\n        a -=\
    \ 1;\n      }\n      return a;\n    },0);\n    if(strength > maxStrength){\n \
    \     maxStrength = strength;\n      strongestExt = ext;\n    }\n  }\n  return\
    \ `${class_name}.${strongestExt}`;\n}\nStrongest_Extension(\"Football\", [\"FootballFans\"\
    , \"FootballRules\", \"FootballGame\", \"FootballBaseball\", \"FootballPlayers\"\
    ]);\nStrongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]);", "    extensions = extensions.sort();\n    let strength = Number.NEGATIVE_INFINITY;\n\
    \    let output = class_name;\n    extensions.forEach(ext => {\n        let currentStrength\
    \ = ext.split('').filter(x => x.match(/[A-Z]/g)).length - ext.split('').filter(x\
    \ => x.match(/[a-z]/g)).length;\n        if(currentStrength > strength){\n   \
    \         strength = currentStrength;\n            output = class_name + '.' +\
    \ ext;\n        }\n    });\n    return output;\n}", "    let cap = extension =>\
    \ extension.split('').filter(char => char === char.toUpperCase()).length;\n  \
    \  let sm = extension => extension.split('').filter(char => char === char.toLowerCase()).length;\n\
    \    let strength = extension => cap(extension) - sm(extension);\n    let result\
    \ = extensions.reduce((strongest, cur_ext) => {\n        if(strength(cur_ext)\
    \ > strength(strongest))\n            return cur_ext;\n        return strongest;\n\
    \    }, extensions[0]);\n    return `${class_name}.${result}`;\n}", "    let strongExt\
    \ = 0;\n    let ext = '';\n    for(let i = 0; i < extensions.length; i++){\n \
    \       let strength = 0;\n        let upper = 0;\n        let lower = 0;\n  \
    \      for(let j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j]\
    \ == extensions[i][j].toUpperCase()){\n                upper++;\n            }\n\
    \            else{\n                lower++;\n            }\n        }\n     \
    \   strength = upper - lower;\n        if(strength > strongExt){\n           \
    \ strongExt = strength;\n            ext = extensions[i];\n        }\n    }\n\
    \    return class_name + '.' + ext;\n}", "\tlet CAPS = 0;\n\tlet SMLS = 0;\n\t\
    let strongestExt = '';\n\textensions.forEach( ext => {\n\t\tlet temp_ext = ext.split('');\n\
    \t\ttemp_ext.forEach( e => {\n\t\t\te === e.toUpperCase() ? CAPS += 1 : SMLS +=\
    \ 1;\n\t\t});\n\t\tlet strength = (CAPS - SMLS) / CAPS;\n\t\tif(strength > 0){\n\
    \t\t\tstrongestExt = ext;\n\t\t}\n\t\tCAPS = 0;\n\t\tSMLS = 0;\n\t});\n\treturn\
    \ class_name + '.' + strongestExt;\n}", "\tlet cap = 0;\n\tlet sm = 0;\n\tlet\
    \ class_extensions = [];\n\tfor(let i = 0; i < extensions.length; i++){\n\t\t\
    if(/^[A-Z]+$/.test(extensions[i])){\n\t\t\tcap = extensions[i].length;\n\t\t}\n\
    \t\tif(/^[a-z]+$/.test(extensions[i])){\n\t\t\tsm = extensions[i].length;\n\t\t\
    }\n\t\tif(cap - sm === -1){\n\t\t\tclass_extensions.push(extensions[i]);\n\t\t\
    }\n\t}\n\treturn class_name + '.' + class_extensions[0];\n}", "  var strength\
    \ = 0;\n  var strongest_extension = \"\";\n  var extension_strength = 0;\n  var\
    \ CAP = 0;\n  var SM = 0;\n  for(var i = 0; i < extensions.length; i++){\n   \
    \ CAP = 0;\n    SM = 0;\n    for(var j = 0; j < extensions[i].length; j++){\n\
    \      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n        CAP++;\n\
    \      }\n      else{\n        SM++;\n      }\n    }\n    extension_strength =\
    \ CAP - SM;\n    if(extension_strength > strength){\n      strength = extension_strength;\n\
    \      strongest_extension = extensions[i];\n    }\n  }\n  var answer = class_name\
    \ + \".\" + strongest_extension;\n  return answer;\n}", "    // your code here\n\
    }\n", "    let strongest = 0, strongestExtension = '';\n    extensions.forEach(extension\
    \ => {\n        let uppercase = 0, lowercase = 0;\n        for(let i = 0; i <\
    \ extension.length; i++){\n            if(extension[i] == extension[i].toUpperCase()){\n\
    \                uppercase++;\n            }else{\n                lowercase++;\n\
    \            }\n        }\n        let strength = uppercase - lowercase;\n   \
    \     if(strength > strongest){\n            strongest = strength;\n         \
    \   strongestExtension = extension;\n        }\n    });\n    return class_name\
    \ + '.' + strongestExtension;\n}", "\tlet strongest = 0, result = '';\n\tfor(let\
    \ i = 0; i < extensions.length; i++){\n\t\tlet cap = 0, sm = 0;\n\t\tfor(let j\
    \ = 0; j < extensions[i].length; j++){\n\t\t\tif(extensions[i][j] === extensions[i][j].toUpperCase()){\n\
    \t\t\t\tcap++;\n\t\t\t} else {\n\t\t\t\tsm++;\n\t\t\t}\n\t\t}\n\t\tif(cap - sm\
    \ > strongest){\n\t\t\tstrongest = cap - sm;\n\t\t\tresult = extensions[i];\n\t\
    \t}\n\t}\n\treturn class_name + '.' + result;\n}", "    let numCaps = 0;\n   \
    \ let numSm = 0;\n    let strongest = 0;\n    let firstIndex = 0;\n    for(let\
    \ i = 0; i < extensions.length; i++){\n        for(let j = 0; j < extensions[i].length;\
    \ j++){\n            if(extensions[i][j] == extensions[i][j].toUpperCase()){\n\
    \                numCaps++;\n            }\n            else{\n              \
    \  numSm++;\n            }\n        }\n        let extensionStrength = numCaps\
    \ - numSm;\n        if(extensionStrength > strongest){\n            strongest\
    \ = extensionStrength;\n            firstIndex = i;\n        }\n        numCaps\
    \ = 0;\n        numSm = 0;\n    }\n    return class_name + \".\" + extensions[firstIndex];\n\
    }\n", "    // Write your code here!\n    var temp = [];\n    var res = '';\n \
    \   var max_cap = 0;\n    var num_of_cap = 0;\n    var num_of_sm = 0;\n    for(var\
    \ i = 0; i < extensions.length; i++){\n        for(var j = 0; j < extensions[i].length;\
    \ j++){\n            if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z'){\n\
    \                num_of_cap++;\n            }else{\n                num_of_sm++;\n\
    \            }\n        }\n        temp.push(num_of_cap - num_of_sm);\n      \
    \  num_of_cap = 0;\n        num_of_sm = 0;\n    }\n    max_cap = Math.max(...temp);\n\
    \    for(var i = 0; i < temp.length; i++){\n        if(temp[i] == max_cap){\n\
    \            res = class_name + '.' + extensions[i];\n            break;\n   \
    \     }\n    }\n    return res;\n}", "    let output = \"\";\n    let cap_letters\
    \ = [];\n    let sm_letters = [];\n    for(let i = 0; i < extensions.length; i++){\n\
    \        cap_letters.push(extensions[i].match(/[A-Z]/g));\n        sm_letters.push(extensions[i].match(/[a-z]/g));\n\
    \    }\n    let strong = [0, \"\"];\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        if(cap_letters[i] != null && sm_letters[i] != null){\n      \
    \      if(cap_letters[i].length - sm_letters[i].length > strong[0]){\n       \
    \         strong[0] = cap_letters[i].length - sm_letters[i].length;\n        \
    \        strong[1] = extensions[i];\n            }\n        }\n    }\n    output\
    \ = class_name + \".\" + strong[1];\n    return output;\n}", "    let strongestExt\
    \ = '-1'\n    for(let ext of extensions){\n        let cap = ext.split('').filter(l\
    \ => l === l.toUpperCase()).length\n        let sm = ext.split('').filter(l =>\
    \ l === l.toLowerCase()).length\n        if(cap - sm > strongestExt){\n      \
    \      strongestExt = cap - sm\n        }\n    }\n    return class_name + '.'\
    \ + strongestExt\n}", "    //extensions = extensions.split(' ')\n    console.log(extensions)\n\
    \    var high = 0;\n    var index = 0;\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var up = 0;\n        var lo = 0;\n        for(var x = 0; x <\
    \ extensions[i].length; x++){\n            if(extensions[i][x] == extensions[i][x].toUpperCase()){\n\
    \                up++;\n            }else{\n                lo++;\n          \
    \  }\n        }\n        console.log(up, lo)\n        var strength = up - lo;\n\
    \        if(strength > high){\n            high = strength;\n            index\
    \ = i;\n        }\n    }\n    console.log(high, index)\n    return class_name\
    \ + '.' + extensions[index];\n}", "    let strongest = \"\";\n    let strength\
    \ = 0;\n    extensions.forEach(extension => {\n        // debugger;\n        let\
    \ ext_name = extension.split(\"\");\n        let upper = ext_name.filter(char\
    \ => char === char.toUpperCase()).length;\n        let lower = ext_name.filter(char\
    \ => char === char.toLowerCase()).length;\n        let new_strength = upper -\
    \ lower;\n        if(new_strength > strength){\n            strength = new_strength;\n\
    \            strongest = extension;\n        }\n    });\n    return `${class_name}.${strongest}`;\n\
    }\nlet class_name = \"Slices\";\nlet extensions = ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed'];", "    let max_strength = -Infinity;\n    let max_ext = extensions[0];\n\
    \    for(let i = 0; i < extensions.length; i++){\n        let current_ext = extensions[i];\n\
    \        let count_cap = 0;\n        let count_sm = 0;\n        for(let j = 0;\
    \ j < current_ext.length; j++){\n            if(current_ext[j] == current_ext[j].toUpperCase()){\n\
    \                count_cap++;\n            }\n            else{\n            \
    \    count_sm++;\n            }\n        }\n        let strength = count_cap -\
    \ count_sm;\n        if(strength > max_strength){\n            max_strength =\
    \ strength;\n            max_ext = current_ext;\n        }\n    }\n    return\
    \ class_name + \".\" + max_ext;\n}", "  let name = [], strength = [], output =\
    \ [], sorted = [];\n  let uppercase = [], lowercase = [];\n  let cap = 0, sm =\
    \ 0;\n  let string = '';\n  // Separate the input string into two arrays: one\
    \ for the uppercase letters,\n  // and one for the lowercase letters\n  for(var\
    \ i = 0; i < extensions.length; i++){\n    for(var j = 0; j < extensions[i].length;\
    \ j++){\n      if(extensions[i][j] === extensions[i][j].toUpperCase()){\n    \
    \    uppercase.push(extensions[i][j]);\n      }\n      else{\n        lowercase.push(extensions[i][j]);\n\
    \      }\n    }\n    // Sum the total number of letters for each array\n    for(var\
    \ k = 0; k < uppercase.length; k++){\n      cap += uppercase[k].charCodeAt(0);\n\
    \    }\n    for(var l = 0; l < lowercase.length; l++){\n      sm += lowercase[l].charCodeAt(0);\n\
    \    }\n    // Calculate the strength for each extension\n    let difference =\
    \ cap - sm;\n    strength.push(difference);\n    cap = 0;\n    sm = 0;\n    uppercase\
    \ = [];\n    lowercase = [];\n  }\n  // Put the name and strength of each extension\
    \ in separate arrays\n  for(var m = 0; m < extensions.length; m++){\n    name.push(extensions[m]);\n\
    \  }\n  // Create a new array that combines the two arrays above into objects\n\
    \  for(var n = 0; n < name.length; n++){\n    output.push({name: name[n], strength:\
    \ strength[n]});\n  }\n  // Sort the objects in the new array based on the strength\
    \ value\n  sorted = output.sort(function(a, b){\n    return b.strength - a.strength;\n\
    \  });\n  // Return the output in the format specified\n  string = class_name\
    \ + '.' + sorted[0].name;\n  return string;\n}\n", "  function strength(ext){\n\
    \    var cap = ext.split('').filter(e => e.match(/[A-Z]/)).length;\n    var sm\
    \ = ext.split('').filter(e => e.match(/[a-z]/)).length;\n    return cap - sm;\n\
    \  }\n  var extMax = extensions.map(ext => strength(ext)).reduce((max, val) =>\
    \ val > max ? val : max);\n  return class_name + '.' + extensions.filter(ext =>\
    \ strength(ext) == extMax)[0];\n}\n", "    var maxStrength = 0;\n    var strongExt\
    \ = \"\";\n    for(var i = 0; i < extensions.length; i++){\n        var strength\
    \ = (extensions[i].replace(/[^A-Z]/g, \"\").length) - (extensions[i].replace(/[^a-z]/g,\
    \ \"\").length);\n        if(strength > maxStrength){\n            maxStrength\
    \ = strength;\n            strongExt = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongExt;\n}", "    var s = {};\n    var r = '';\n   \
    \ var name = '';\n    var strength = 0;\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        s[extensions[i]] = 0;\n        for(var j = 0; j < extensions[i].length;\
    \ j++){\n            if(extensions[i][j] == extensions[i][j].toUpperCase()){\n\
    \                s[extensions[i]]++;\n            }else{\n                s[extensions[i]]--;\n\
    \            }\n        }\n        if(Math.abs(s[extensions[i]]) > strength){\n\
    \            name = extensions[i];\n            strength = Math.abs(s[extensions[i]]);\n\
    \        }\n    }\n    r = class_name + '.' + name;\n    return r;\n}\n", "  var\
    \ strongest = {\n    name: \"\",\n    strength: 0\n  };\n  for(var i = 0; i <\
    \ extensions.length; i++){\n    var a = extensions[i].split(\"\").filter(function(x){\n\
    \      return x == x.toUpperCase();\n    }).length;\n    var b = extensions[i].split(\"\
    \").filter(function(x){\n      return x == x.toLowerCase();\n    }).length;\n\
    \    var strength = a - b;\n    if(strength > strongest.strength){\n      strongest.name\
    \ = extensions[i];\n      strongest.strength = strength;\n    }\n  }\n  return\
    \ class_name + \".\" + strongest.name;\n}", "  var strong = 0;\n  var strong_str\
    \ = \"\";\n  for(var i = 0; i < extensions.length; i++){\n    var caps = 0;\n\
    \    var smalls = 0;\n    for(var j = 0; j < extensions[i].length; j++){\n   \
    \   if(extensions[i][j] === extensions[i][j].toUpperCase()){\n        caps++;\n\
    \      }else{\n        smalls++;\n      }\n    }\n    if(caps - smalls > strong){\n\
    \      strong = caps - smalls;\n      strong_str = extensions[i];\n    }\n  }\n\
    \  return class_name + \".\" + strong_str;\n}\n", "  let cap_a = 'A'.charCodeAt(0);\n\
    \  let cap_z = 'Z'.charCodeAt(0);\n  let cap_diff = cap_z - cap_a + 1;\n  let\
    \ low_a = 'a'.charCodeAt(0);\n  let low_z = 'z'.charCodeAt(0);\n  let low_diff\
    \ = low_z - low_a + 1;\n  extensions.sort((a, b) => {\n    let strength_a = 0;\n\
    \    let strength_b = 0;\n    for(let i = 0; i < a.length; i++){\n      let cur_code\
    \ = a.charCodeAt(i);\n      if(cur_code >= cap_a && cur_code <= cap_z){\n    \
    \    strength_a += (cur_code - cap_a) / cap_diff;\n      } else if(cur_code >=\
    \ low_a && cur_code <= low_z){\n        strength_a -= (cur_code - low_a) / low_diff;\n\
    \      }\n    }\n    for(let i = 0; i < b.length; i++){\n      let cur_code =\
    \ b.charCodeAt(i);\n      if(cur_code >= cap_a && cur_code <= cap_z){\n      \
    \  strength_b += (cur_code - cap_a) / cap_diff;\n      } else if(cur_code >= low_a\
    \ && cur_code <= low_z){\n        strength_b -= (cur_code - low_a) / low_diff;\n\
    \      }\n    }\n    if(strength_a === strength_b){\n      return 0;\n    } else\
    \ if(strength_a > strength_b){\n      return -1;\n    } else {\n      return 1;\n\
    \    }\n  });\n  return class_name + '.' + extensions[0];\n}\nlet test1 = 'Slices';\n\
    let test2 = ['SErviNGSliCes', 'Cheese', 'StuFfed'];", "    let extension_strength_map\
    \ = {};\n    for(let ext of extensions){\n        let ext_strength = 0;\n    \
    \    for(let i = 0; i < ext.length; i++){\n            if(ext[i] === ext[i].toUpperCase()){\n\
    \                ext_strength++;\n            }else{\n                ext_strength--;\n\
    \            }\n        }\n        extension_strength_map[ext] = ext_strength;\n\
    \    }\n    // Now calculate the Strongest Extension\n    let strongest_extension\
    \ = \"\";\n    let strongest_strength = 0;\n    for(let ext in extension_strength_map){\n\
    \        if(extension_strength_map[ext] > strongest_strength){\n            strongest_extension\
    \ = ext;\n            strongest_strength = extension_strength_map[ext];\n    \
    \    }\n    }\n    return class_name + \".\" + strongest_extension;\n}", "   \
    \ var sum = 0;\n    var extension = extensions[0];\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var small_letter = 0;\n        var capital_letter = 0;\n    \
    \    for(var j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z'){\n                small_letter++;\n     \
    \       }\n            else if(extensions[i][j] >= 'A' && extensions[i][j] <=\
    \ 'Z'){\n                capital_letter++;\n            }\n        }\n       \
    \ if(capital_letter - small_letter > sum){\n            sum = capital_letter -\
    \ small_letter;\n            extension = extensions[i];\n        }\n    }\n  \
    \  return class_name + '.' + extension;\n}", "    let strongest = 0;\n    let\
    \ strongest_extension = \"\";\n    for(let i = 0; i < extensions.length; i++){\n\
    \        let cap = 0;\n        let sm = 0;\n        for(let j = 0; j < extensions[i].length;\
    \ j++){\n            if(extensions[i][j] == extensions[i][j].toUpperCase()){\n\
    \                cap++;\n            }\n            else{\n                sm++;\n\
    \            }\n        }\n        if(cap - sm > strongest){\n            strongest\
    \ = cap - sm;\n            strongest_extension = extensions[i];\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}", "    let list1\
    \ =[];\n    let list2 =[];\n    let list3 =[];\n    // Fill the first list with\
    \ the values needed.\n    for(let i=0; i<extensions.length; i++){\n      let name\
    \ = extensions[i];\n      //let up = name.replace(/[^A-Z]/g, '').length;\n   \
    \   let up = name.match(/[A-Z]/g).length;\n      //let low = name.replace(/[^a-z]/g,\
    \ '').length;\n      let low = name.match(/[a-z]/g).length;\n      list1.push(up-low);\n\
    \      list2.push(name);\n    }\n    // Find the max value in list1.\n    let\
    \ max = Math.max(...list1);\n    // Find the index of the max value in list1.\n\
    \    let index = list1.indexOf(max);\n    // Fill list3 with the values that are\
    \ equal to the max.\n    while(list1.includes(max)){\n      list3.push(list2[index]);\n\
    \      list1.splice(index, 1);\n      list2.splice(index, 1);\n      index = list1.indexOf(max);\n\
    \    }\n    // If the list3 has more than one value, return only the first one.\n\
    \    if(list3.length>1){\n      return class_name+'.'+list3[0];\n    }\n    //\
    \ Else return the first value.\n    else{\n      return class_name+'.'+list3[0];\n\
    \    }\n  }\n  let class_name = 'Slices';\n  let extensions = ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'];\n  console.log(Strongest_Extension(class_name, extensions));\n\
    \  class_name = 'Plates';\n  extensions = ['Meat', 'FISH', 'chips']\n  console.log(Strongest_Extension(class_name,\
    \ extensions));\n  class_name = 'Cheese';\n  extensions = ['cheese', 'cheese',\
    \ 'cheese']", "    var result = '';\n    var strongest = 0;\n    for(var i = 0;\
    \ i < extensions.length; i++){\n        var ext_cap = 0;\n        var ext_sm =\
    \ 0;\n        for(var j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z'){\n                ext_cap++;\n          \
    \  }\n            else if(extensions[i][j] >= 'a' && extensions[i][j] <= 'z'){\n\
    \                ext_sm++;\n            }\n        }\n        var st_ext = ext_cap\
    \ - ext_sm;\n        if(st_ext > strongest){\n            strongest = st_ext;\n\
    \            result = class_name + '.' + extensions[i];\n        }\n    }\n  \
    \  return result;\n}", "\tlet strongest = class_name;\n\tlet strongest_strength\
    \ = 0;\n\tfor(let i = 0; i < extensions.length; i++){\n\t\tconst e = extensions[i];\n\
    \t\tlet uppercase = 0;\n\t\tlet lowercase = 0;\n\t\tfor(let j = 0; j < e.length;\
    \ j++){\n\t\t\tif(e[j] === e[j].toUpperCase()){\n\t\t\t\tuppercase++;\n\t\t\t\
    }\n\t\t\telse{\n\t\t\t\tlowercase++;\n\t\t\t}\n\t\t}\n\t\tconst strength = uppercase\
    \ - lowercase;\n\t\tif(strength > strongest_strength){\n\t\t\tstrongest = e;\n\
    \t\t\tstrongest_strength = strength;\n\t\t}\n\t}\n\treturn class_name + '.' +\
    \ strongest;\n}", "  var strengths = extensions.map(function(word){\n    var counter\
    \ = 0;\n    for(var i = 0; i < word.length; i++){\n      if(word[i] === word[i].toUpperCase()){\n\
    \        counter += 1;\n      }\n    }\n    return counter;\n  });\n  var index\
    \ = extensions.indexOf(extensions[strengths.indexOf(Math.max(...strengths))]);\n\
    \  return class_name + '.' + extensions[index];\n}", "\n}\n", "    let strongest\
    \ = extensions[0].toLowerCase();\n    let strongestVal = 0;\n    for(let i = 0;\
    \ i < extensions.length; i++){\n        let numUpper = extensions[i].match(/[A-Z]/g).length;\n\
    \        let numLower = extensions[i].match(/[a-z]/g).length;\n        let value\
    \ = numUpper-numLower;\n        if(value > strongestVal){\n            strongestVal\
    \ = value;\n            strongest = extensions[i].toLowerCase();\n        }\n\
    \    }\n    return class_name + \".\" + strongest;\n}\n", "    let class_strength\
    \ = calculate_strength(class_name);\n    let strongest_extension = '';\n    let\
    \ best_extension_strength = 0;\n    for(let i = 0; i < extensions.length; i++){\n\
    \        let extension_strength = calculate_strength(extensions[i]);\n       \
    \ if(extension_strength > best_extension_strength){\n            best_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + '.' + strongest_extension;\n}\n", " \
    \   let strongest_ext = extensions[0];\n    let strongest_strength = -Infinity;\n\
    \    for(let ext of extensions){\n        let strength = 0;\n        for(let i\
    \ = 0; i < ext.length; i++){\n            if(ext[i] >= 'A' && ext[i] <= 'Z'){\n\
    \                strength += 1;\n            }\n            else{\n          \
    \      strength -= 1;\n            }\n        }\n        if(strength > strongest_strength){\n\
    \            strongest_strength = strength;\n            strongest_ext = ext;\n\
    \        }\n    }\n    return class_name + '.' + strongest_ext;\n}", "  let strongest\
    \ = 0;\n  let index = -1;\n  for(let i = 0; i < extensions.length; i++){\n   \
    \ let strength = (extensions[i].match(/[A-Z]/g) || []).length - (extensions[i].match(/[a-z]/g)\
    \ || []).length;\n    if(strength > strongest){\n      strongest = strength;\n\
    \      index = i;\n    }\n  }\n  return class_name + '.' + extensions[index];\n\
    }", "    let highest_strength = extensions[0].split('').reduce((acc, curr) =>\
    \ {\n        curr.toUpperCase() === curr ? acc += 1 : acc -= 1;\n        return\
    \ acc;\n    }, 0);\n    let highest_extension = extensions[0];\n    extensions.forEach(extension\
    \ => {\n        let strength = extension.split('').reduce((acc, curr) => {\n \
    \           curr.toUpperCase() === curr ? acc += 1 : acc -= 1;\n            return\
    \ acc;\n        }, 0);\n        if(strength > highest_strength){\n           \
    \ highest_strength = strength;\n            highest_extension = extension;\n \
    \       }\n    });\n    return `${class_name}.${highest_extension}`;\n}", "  \
    \  let strongest = '';\n    let strength = 0;\n    for(let ext of extensions){\n\
    \        let uppers = 0;\n        let lowers = 0;\n        for(let c of ext){\n\
    \            if(c.match(/[A-Z]/)){\n                uppers++;\n            }else{\n\
    \                lowers++;\n            }\n        }\n        let curr_strength\
    \ = uppers - lowers;\n        if(curr_strength > strength){\n            strength\
    \ = curr_strength;\n            strongest = ext;\n        }\n    }\n    return\
    \ class_name + '.' + strongest;\n}\n", "    var ext_array = [];\n    var strongest\
    \ = 0;\n    var strongest_name = \"\";\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var cap = 0;\n        var sm = 0;\n        for(var j = 0; j <\
    \ extensions[i].length; j++){\n            if(extensions[i][j] === extensions[i][j].toUpperCase()){\n\
    \                cap++;\n            }else{\n                sm++;\n         \
    \   }\n        }\n        ext_array.push([extensions[i], cap - sm]);\n    }\n\
    \    for(var i = 0; i < ext_array.length; i++){\n        if(ext_array[i][1] >=\
    \ strongest){\n            strongest = ext_array[i][1];\n            strongest_name\
    \ = ext_array[i][0];\n        }\n    }\n    return class_name + \".\" + strongest_name;\n\
    }", "    // get the extensions strengths\n    // var extension_strengths = extensions.map(e\
    \ => e.split('').reduce((a, c) => a + c.toUpperCase()==c ? 1 : -1, 0));\n    //\
    \ get the strongest extension \n    // var strongest_extension = extensions[extension_strengths.indexOf(Math.max(...extension_strengths))];\n\
    \    // return `${class_name}.${strongest_extension}`;\n    return extensions.map(function(e){\n\
    \        let strength = e.split('').reduce((a, c) => a + c.toUpperCase()==c ?\
    \ 1 : -1, 0);\n        return {class_name: class_name, extension: e, strength:\
    \ strength};\n    }).sort((a, b) => a.strength < b.strength ? 1 : -1)[0].class_name\
    \ + '.' + \n       extensions.map(function(e){\n        let strength = e.split('').reduce((a,\
    \ c) => a + c.toUpperCase()==c ? 1 : -1, 0);\n        return {class_name: class_name,\
    \ extension: e, strength: strength};\n    }).sort((a, b) => a.strength < b.strength\
    \ ? 1 : -1)[0].extension;\n}\n", "    if(extensions.length === 0) return class_name;\n\
    \    let strongest = extensions[0],\n        strength = 0;\n    for(let i = 0;\
    \ i < extensions.length; i++){\n        const cap = extensions[i].match(/[A-Z]/g)\
    \ || [],\n              sm = extensions[i].match(/[a-z]/g) || [];\n        if(cap.length\
    \ - sm.length > strength){\n            strength = cap.length - sm.length;\n \
    \           strongest = extensions[i];\n        }\n    }\n    return class_name\
    \ + '.' + strongest;\n}", "    var strongest = null;\n    var strength = 0;\n\
    \    for(var i = 0; i < extensions.length; i++){\n        var uppercase = extensions[i].split('').filter(x\
    \ => x.toUpperCase() === x).length;\n        var lowercase = extensions[i].split('').filter(x\
    \ => x.toLowerCase() === x).length;\n        var temp_strength = uppercase - lowercase;\n\
    \        if(temp_strength > strength){\n            strength = temp_strength;\n\
    \            strongest = extensions[i];\n        }\n    }\n    return class_name\
    \ + '.' + strongest;\n}", "    const className = class_name;\n    const extensionStregth\
    \ = extensions.map(ext => \n        [ext, (ext.match(/[A-Z]/g)||[]).length - (ext.match(/[a-z]/g)||[]).length]);\n\
    \    const strongestExtension = extensionStregth.reduce((prev, curr) => \n   \
    \     prev[1] >= curr[1] ? prev : curr)[0];\n    return `${className}.${strongestExtension}`;\n\
    }\n", "    let strongestExtension;\n    let strongestExtensionStrength = 0;\n\
    \    for(let i = 0; i < extensions.length; i++){\n        const CAP = getUpperCaseLetters(extensions[i]);\n\
    \        const SM = getLowerCaseLetters(extensions[i]);\n        if(CAP - SM >\
    \ strongestExtensionStrength){\n            strongestExtensionStrength = CAP -\
    \ SM;\n            strongestExtension = extensions[i];\n        }\n    }\n   \
    \ return `${class_name}.${strongestExtension}`;\n}\n", "    var strength = [],\n\
    \        index = [],\n        ctr = 0;\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var uppercase = extensions[i].match(/[A-Z]/g);\n        var lowercase\
    \ = extensions[i].match(/[a-z]/g);\n        if(uppercase !== null){\n        \
    \    strength.push(uppercase.length);\n        }\n        else{\n            strength.push(0);\n\
    \        }\n        if(lowercase !== null){\n            strength[ctr] -= lowercase.length;\n\
    \        }\n        index.push(strength[ctr]);\n        ctr++;\n    }\n    if(index.every(function(x){return\
    \ x === index[0];})){\n        return class_name + '.' + extensions[0];\n    }\n\
    \    else{\n        var max = index.indexOf(Math.max.apply(null, index));\n  \
    \      return class_name + '.' + extensions[max];\n    }\n}", "    var res = \"\
    \"\n    var max = 0\n    for(var i = 0; i < extensions.length; i++){\n       \
    \ var cap = 0\n        var sm = 0\n        for(var j = 0; j < extensions[i].length;\
    \ j++){\n            if(extensions[i][j] == extensions[i][j].toUpperCase()){\n\
    \                cap += 1\n            }\n            else{\n                sm\
    \ += 1\n            }\n        }\n        if(cap - sm > max){\n            max\
    \ = cap - sm\n            res = extensions[i]\n        }\n    }\n    return class_name\
    \ + \".\" + res\n}", "\tvar strongest_extension = \"\";\n\tvar strongest_strength\
    \ = 0;\n\tfor(var i = 0; i < extensions.length; i++){\n\t\tvar strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n\t\tif(strength > strongest_strength){\n\
    \t\t\tstrongest_strength = strength;\n\t\t\tstrongest_extension = extensions[i];\n\
    \t\t}\n\t}\n\treturn class_name + \".\" + strongest_extension;\n}", "  var strongest\
    \ = 0;\n  var bestExt = \"\";\n  for(var i = 0; i < extensions.length; i++){\n\
    \    var ext = extensions[i];\n    var str = getStrength(ext);\n    if(str > strongest){\n\
    \      strongest = str;\n      bestExt = ext;\n    }\n  }\n  return class_name\
    \ + \".\" + bestExt;\n}\n", "    var results = extensions.map(function(e){\n \
    \       var str = 0;\n        for(var i = 0; i < e.length; i++){\n           \
    \ if(e[i] === e[i].toUpperCase()){\n                str++;\n            }else{\n\
    \                str--;\n            }\n        }\n        return str;\n    });\n\
    \    var index = results.indexOf(Math.max(...results));\n    return class_name\
    \ + '.' + extensions[index];\n}", "   //your code here\n   var strongest = '';\n\
    \   var stren = 0;\n   for(var i = 0; i < extensions.length; i++){\n      var\
    \ caps = 0;\n      var sm = 0;\n      for(var j = 0; j < extensions[i].length;\
    \ j++){\n         if(extensions[i][j] === extensions[i][j].toUpperCase()){\n \
    \           caps++;\n         }else{\n            sm++;\n         }\n      }\n\
    \      if(caps - sm > stren){\n         stren = caps - sm;\n         strongest\
    \ = extensions[i];\n      }\n   }\n   return class_name + '.' + strongest;\n}",
  "\tvar strong = 0;\n\tvar longest = '';\n\textensions.forEach(function(ext){\n\t\
    \tvar str = ext.split('').reduce(function(acc, letter){\n\t\t\tif(letter === letter.toUpperCase()){\n\
    \t\t\t\tacc.cap++;\n\t\t\t} else {\n\t\t\t\tacc.sm++;\n\t\t\t}\n\t\t\treturn acc;\n\
    \t\t}, {cap: 0, sm: 0});\n\t\tvar strength = str.cap - str.sm;\n\t\tif(strong\
    \ < strength){\n\t\t\tstrong = strength;\n\t\t\tlongest = ext;\n\t\t}\n\t});\n\
    \treturn class_name + '.' + longest;\n}\nvar class_name = 'Slices';\nvar extensions\
    \ = ['SErviNGSliCes', 'Cheese', 'StuFfed'];", "    let strongest_extension_name\
    \ = '', strongest_extension_strength = Number.MIN_SAFE_INTEGER;\n    extensions.forEach(extension\
    \ => {\n        let strength = 0;\n        extension.split('').forEach(c => {\n\
    \            if (c >= 'A' && c <= 'Z') {\n                strength++;\n      \
    \      } else if (c >= 'a' && c <= 'z') {\n                strength--;\n     \
    \       }\n        });\n        if (strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = strength;\n            strongest_extension_name\
    \ = extension;\n        }\n    });\n    return class_name + '.' + strongest_extension_name;\n\
    }\n", "\tfunction cal_strength(extension){\n\t\tvar res = 0;\n\t\tvar capital_count\
    \ = 0;\n\t\tvar small_count = 0;\n\t\tfor(var i = 0; i < extension.length; i++){\n\
    \t\t\tif(extension[i] >= 'A' && extension[i] <= 'Z')\n\t\t\t\tcapital_count++;\n\
    \t\t\telse\n\t\t\t\tsmall_count++;\n\t\t}\n\t\tres = capital_count - small_count;\n\
    \t\treturn res;\n\t}\n\tvar max_strength = -Infinity;\n\tvar index = -1;\n\tfor(var\
    \ i = 0; i < extensions.length; i++){\n\t\tvar cur_strength = cal_strength(extensions[i]);\n\
    \t\tif(cur_strength > max_strength){\n\t\t\tmax_strength = cur_strength;\n\t\t\
    \tindex = i;\n\t\t}\n\t}\n\treturn class_name + '.' + extensions[index];\n}\n",
  "    let i, p, u, l, power, current_power, strongest_extension;\n    strongest_extension\
    \ = extensions[0];\n    power = 0;\n    for(i = 0; i < extensions.length; i++){\n\
    \        p = 0;\n        u = 0;\n        l = 0;\n        for(let j = 0; j < extensions[i].length;\
    \ j++){\n            if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z'){\n\
    \                u++;\n            }else{\n                l++;\n            }\n\
    \        }\n        current_power = u - l;\n        if(current_power > power){\n\
    \            power = current_power;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n\nmodule.exports\
    \ = {\n    Strongest_Extension : Strongest_Extension\n};", "   let extensions_s\
    \ = extensions.map(i => i.replace(/[^A-Z]/g, '').length - i.replace(/[^a-z]/g,\
    \ '').length);\n   let str = extensions_s.reduce((acc, curr, ind) => {\n     \
    \ if(curr > acc.val){\n         acc.val = curr;\n         acc.ind = ind;\n   \
    \   }\n      return acc;\n   }, {val: extensions_s[0], ind: 0});\n   return `${class_name}.${extensions[str.ind]}`;\n\
    }\n", "    let obj = {};\n    let highest = 0;\n    let highest_ext = \"\";\n\
    \    for(let i=0; i<extensions.length; i++){\n        let cap = 0;\n        let\
    \ sm = 0;\n        for(let j=0; j<extensions[i].length; j++){\n            if(extensions[i][j]\
    \ === extensions[i][j].toUpperCase()){\n                cap++;\n            }else{\n\
    \                sm++;\n            }\n        }\n        obj[extensions[i]] =\
    \ cap - sm;\n        if(cap - sm > highest){\n            highest = cap - sm;\n\
    \            highest_ext = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + highest_ext;\n}", "    let strongest_extension = extensions[0];\n\
    \    let sm_of_strongest_extension = extensions[0].length;\n    let cap_of_strongest_extension\
    \ = 0;\n    let strength_of_strongest_extension = 0;\n    for(let extension_index\
    \ in extensions){\n        let extension = extensions[extension_index];\n    \
    \    let sm_of_extension = 0;\n        let cap_of_extension = 0;\n        for(let\
    \ i = 0; i < extension.length; i++){\n            if(extension[i] === extension[i].toUpperCase()){\n\
    \                cap_of_extension++;\n            }\n            else{\n     \
    \           sm_of_extension++;\n            }\n        }\n        let strength_of_extension\
    \ = cap_of_extension - sm_of_extension;\n        if( strength_of_extension > strength_of_strongest_extension){\n\
    \            strongest_extension = extension;\n            strength_of_strongest_extension\
    \ = strength_of_extension;\n            sm_of_strongest_extension = sm_of_extension;\n\
    \            cap_of_strongest_extension = cap_of_extension;\n        }\n     \
    \   else if(strength_of_extension === strength_of_strongest_extension){\n    \
    \        if(extension.length < strongest_extension.length){\n                strongest_extension\
    \ = extension;\n                strength_of_strongest_extension = strength_of_extension;\n\
    \                sm_of_strongest_extension = sm_of_extension;\n              \
    \  cap_of_strongest_extension = cap_of_extension;\n            }\n        }\n\
    \    }\n    return class_name + \".\" + strongest_extension;\n}\n", "    let strengths\
    \ = extensions.map(x => getStrength(x)).sort((a,b) => b - a);\n    let maxStrength\
    \ = strengths[0];\n    let extWithMaxStrength = extensions.filter(x => getStrength(x)\
    \ === maxStrength)[0];\n    return `${class_name}.${extWithMaxStrength}`;\n}",
  "    var strongest_extension = \"\";\n    var num_lowercase = 0;\n    var num_uppercase\
    \ = 0;\n    var strength = 0;\n    var extensions_array = extensions.split(\"\
    ,\");\n    for(var i = 0; i < extensions_array.length; i++){\n        num_lowercase\
    \ = 0;\n        num_uppercase = 0;\n        for(var j = 0; j < extensions_array[i].length;\
    \ j++){\n            if(extensions_array[i][j] == extensions_array[i][j].toUpperCase()){\n\
    \                num_uppercase++;\n            }\n            else{\n        \
    \        num_lowercase++;\n            }\n        }\n        if(num_uppercase\
    \ - num_lowercase > strength){\n            strength = num_uppercase - num_lowercase;\n\
    \            strongest_extension = extensions_array[i];\n        }\n    }\n  \
    \  return class_name + \".\" + strongest_extension;\n}", "  let strongest = \"\
    \";\n  let curr = 0;\n  for(let i = 0; i < extensions.length; i++){\n    let temp\
    \ = calculateStrength(extensions[i]);\n    if(temp > curr){\n      curr = temp;\n\
    \      strongest = extensions[i];\n    }\n  }\n  return class_name + \".\" + strongest;\n\
    }", "    let arr = []\n    for(let i = 0; i < extensions.length; i++){\n     \
    \   let cap = 0;\n        let sm = 0;\n        for(let j = 0; j < extensions[i].length;\
    \ j++){\n            if(extensions[i][j] == extensions[i][j].toUpperCase()){\n\
    \                cap++\n            }else{\n                sm++\n           \
    \ }\n        }\n        arr.push(cap - sm)\n    }\n    let max = Math.max(...arr)\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == max){\n      \
    \      return class_name + '.' + extensions[i]\n        }\n    }\n}", "    //coding\
    \ and coding....\n    var class_word = class_name;\n    var ext_arr = extensions;\n\
    \    var ext_word = '';\n    var ext_strength = 0;\n    var strength = 0;\n  \
    \  var CAP = 0;\n    var SM = 0;\n    for(var i = 0; i < ext_arr.length; i++){\n\
    \      ext_word = ext_arr[i];\n      CAP = 0;\n      SM = 0;\n      for(var j\
    \ = 0; j < ext_word.length; j++){\n        if(ext_word[j] === ext_word[j].toUpperCase()){\n\
    \          CAP = CAP + 1;\n        }else{\n          SM = SM + 1;\n        }\n\
    \      }\n      strength = CAP - SM;\n      if(strength > ext_strength){\n   \
    \     ext_strength = strength;\n        ext_word = ext_arr[i];\n      }\n    }\n\
    \    return class_word + '.' + ext_word;\n  }\n  console.log(Strongest_Extension('slices',\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed']));\n  console.log(Strongest_Extension('',\
    \ []));", "    var name_strength = -Infinity;\n    var name_to_return = \"\";\n\
    \    for(var i = 0; i < extensions.length; i++){\n        var capitals = extensions[i].match(/[A-Z]/g);\n\
    \        var smalls = extensions[i].match(/[a-z]/g);\n        if(capitals && smalls\
    \ && (capitals.length - smalls.length) > name_strength){\n            name_strength\
    \ = capitals.length - smalls.length;\n            name_to_return = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + name_to_return;\n}\n", "  \
    \  const regex = /[A-Z]/g;\n    const regex1 = /[a-z]/g;\n    let cap = 0;\n \
    \   let small = 0;\n    let result = '';\n    let final = '';\n    let arr = [];\n\
    \    for(let i = 0; i < extensions.length; i++){\n      if(extensions[i].match(regex)){\n\
    \          cap = extensions[i].match(regex).length;\n      }\n      if(extensions[i].match(regex1)){\n\
    \          small = extensions[i].match(regex1).length;\n      }\n      let str\
    \ = cap - small;\n      arr.push(str);\n    }\n    let largest = Math.max(...arr);\n\
    \    let index = arr.indexOf(largest);\n    result = extensions[index];\n    final\
    \ = class_name + '.' + result;\n    return final;\n}\n", "    let strongestStrength\
    \ = 0;\n    let strongestExtension = \"\";\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        let currStrength = Strength(extensions[i]);\n        if(currStrength\
    \ > strongestStrength){\n            strongestStrength = currStrength;\n     \
    \       strongestExtension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongestExtension;\n}\n", "    var indexOfStrongestExtension = 0;\n\
    \    var mostCap = 0;\n    var mostSm = 0;\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var countUpper = 0;\n        var countLower = 0;\n        for(var\
    \ j = 0; j < extensions[i].length; j++){\n            if(extensions[i][j] ===\
    \ extensions[i][j].toUpperCase()){\n                countUpper++;\n          \
    \  }\n            else if(extensions[i][j] === extensions[i][j].toLowerCase()){\n\
    \                countLower++;\n            }\n        }\n        if(countUpper\
    \ - countLower > mostCap - mostSm){\n            mostCap = countUpper;\n     \
    \       mostSm = countLower;\n            indexOfStrongestExtension = i;\n   \
    \     }\n    }\n    return class_name + \".\" + extensions[indexOfStrongestExtension];\n\
    }", "    let strength = 0;\n    let strongest_extension = \"\";\n    for(let i\
    \ = 0; i < extensions.length; i++){\n        let extension = extensions[i];\n\
    \        let cap = 0;\n        let sm = 0;\n        for(let j = 0; j < extension.length;\
    \ j++){\n            if(isUpperCase(extension[j])){\n                cap++;\n\
    \            }else{\n                sm++;\n            }\n        }\n       \
    \ let test_strength = cap - sm;\n        if(test_strength > strength){\n     \
    \       strength = test_strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    let cap = 0;\n    let sm = 0;\n    let strongest = [];\n    extensions.forEach(ext\
    \ => {\n        ext.split('').forEach(letter => {\n            letter === letter.toUpperCase()\
    \ ? cap++ : sm++;\n        });\n        strongest.push(cap - sm);\n        cap\
    \ = 0;\n        sm = 0;\n    });\n    let max = Math.max(...strongest);\n    let\
    \ index = strongest.indexOf(max);\n    return `${class_name}.${extensions[index]}`;\n\
    }\n", "    let strongest = \"\";\n    let strongestStr = 0;\n    for(let i = 0;\
    \ i < extensions.length; i++){\n        const curExt = extensions[i];\n      \
    \  let cap = 0;\n        let sm = 0;\n        for(let j = 0; j < curExt.length;\
    \ j++){\n            const curChar = curExt[j];\n            if(curChar === curChar.toUpperCase()){\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        if(cap - sm > strongestStr){\n            strongestStr\
    \ = cap - sm;\n            strongest = curExt;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest;\n}", "    // let arr = [];\n    // for(let i = 0; i < extensions.length;\
    \ i++){\n    //     arr.push(extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length);\n\
    \    // }\n    // arr.sort((a, b) => b - a);\n    // let index = extensions.indexOf(extensions.find(x\
    \ => (x.match(/[A-Z]/g).length - x.match(/[a-z]/g).length) === arr[0]));\n   \
    \ // return `${class_name}.${extensions[index]}`;\n    const sortedExtensions\
    \ = extensions.map(ext => {\n        const cap = ext.match(/[A-Z]/g) ? ext.match(/[A-Z]/g).length\
    \ : 0;\n        const sm = ext.match(/[a-z]/g) ? ext.match(/[a-z]/g).length :\
    \ 0;\n        return {\n            name: ext,\n            strength: cap - sm\n\
    \        }\n    }).sort((a, b) => b.strength - a.strength);\n    return `${class_name}.${sortedExtensions[0].name}`;\n\
    }", "   var strong_index = -1,\n       strong_strength = 0,\n       strength =\
    \ 0;\n   \n   for(let i = 0; i < extensions.length; i++){\n      var caps = 0,\
    \ sms = 0;\n      for(let j = 0; j < extensions[i].length; j++){\n         if(extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z'){\n            caps++;\n         }\n     \
    \    else if(extensions[i][j] >= 'a' && extensions[i][j] <= 'z'){\n          \
    \  sms++;\n         }\n      }\n      strength = caps - sms;\n      if(strength\
    \ > strong_strength){\n         strong_strength = strength;\n         strong_index\
    \ = i;\n      }\n   }\n   return class_name + '.' + extensions[strong_index];\n\
    }"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
