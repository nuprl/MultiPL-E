language: js
name: HumanEval_121_solution
results:
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((v, i) => i % 2 !== 0).reduce((a, b) => a + b);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpbqm51ju8.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbqm51ju8.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,b) =>\
    \ a + b, 0)\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ === 0 && lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  return lst.filter((e, i) => i % 2).reduce((a, e) => a + e)\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpw87m7q7r.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpw87m7q7r.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let result = 0;\n    for(let i = 0; i < lst.length; i++) {\n        if(i\
    \ % 2 !== 0 && lst[i] % 2 !== 0) {\n            result += lst[i];\n        }\n\
    \    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpgr029l22.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgr029l22.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    if (lst.length === 0) return 0;\n    let sum = 0;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n     \
    \       sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpph_x9pvw.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpph_x9pvw.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 &&\
    \ lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpu7qb8ina.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpu7qb8ina.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i+=2){\n    if(lst[i] % 2 !==\
    \ 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    //coding and coding..\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  return lst.filter((x, i) => i % 2 !== 0 && x % 2 !== 0).reduce((a, b) => a\
    \ + b, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpbf1mhgew.js:15:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbf1mhgew.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i+=2){\n    if(lst[i] % 2 ===\
    \ 1){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  return lst.filter((v,i)=>i%2==0).filter(v=>v%2!=0).reduce((a,b)=>a+b,0)\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpph_x9pvw.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpph_x9pvw.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((val, i) => i % 2 != 0).reduce((sum, val) => val%2==0 ?\
    \ sum + val : sum, 0);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpi2khv91l.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpi2khv91l.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var oddPositionSum = 0;\n    for(var i = 0; i < lst.length; i++){\n     \
    \   if(i % 2 === 0 && lst[i] % 2 !== 0){\n            oddPositionSum += lst[i];\n\
    \        }\n    }\n    return oddPositionSum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    //nested for loop\n    //3 pointers\n    // let i = 0\n    // let j = 1\n\
    \    // let count = 0\n    // while(i < lst.length && j < lst.length){\n    //\
    \     if(lst[i] % 2 !== 0 && lst[j] % 2 === 0){\n    //         count += lst[i]\n\
    \    //     }\n    //     i++\n    //     j+=2\n    // }\n    // return count\n\
    \    let count = 0\n    for(let i = 0; i < lst.length; i+=2){\n        if(lst[i]\
    \ % 2 !== 0){\n            count += lst[i]\n        }\n    }\n    return count\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 === 0 &&\
    \ lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    if (lst.length == 0) {\n        return 0;\n    }\n    var sum = 0;\n    for\
    \ (var i = 0; i < lst.length; i++) {\n        if (i % 2 == 0 && lst[i] % 2 ==\
    \ 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((e, i) => i % 2 === 1 && e % 2 === 1).reduce((acc, val)\
    \ => acc + val, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpohekjtgf.js:15:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpohekjtgf.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    // Type your solution here\n    return lst.filter((e, i) => i % 2 === 0).filter(e\
    \ => e % 2 === 1).reduce((a, b) => a + b);\n  }\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpbch4vn3e.js:9\n    return lst.filter((e, i) => i % 2 === 0).filter(e\
    \ => e % 2 === 1).reduce((a, b) => a + b);\n                                 \
    \                                     ^\n\nTypeError: Reduce of empty array with\
    \ no initial value\n    at Array.reduce (<anonymous>)\n    at solution (/tmp/tmpbch4vn3e.js:9:71)\n\
    \    at test (/tmp/tmpbch4vn3e.js:18:20)\n    at Object.<anonymous> (/tmp/tmpbch4vn3e.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 &&\
    \ lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  // Your solution here\n  var sum = 0;\n  var position = 0;\n  for (var i =\
    \ 0; i < lst.length; i++) {\n    if (position % 2 == 0 && lst[i] % 2 != 0) {\n\
    \      sum += lst[i];\n    }\n    position += 1;\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    let odd = [];\n    let even = [];\n    for(let i = 0; i\
    \ < lst.length; i++){\n        if(lst[i] % 2 === 0){\n            even.push(lst[i]);\n\
    \        }else{\n            odd.push(lst[i]);\n        }\n    }\n    for(let\
    \ j = 0; j < odd.length; j++){\n        sum += odd[j];\n    }\n    return sum;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n13\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpqfs7yxhf.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqfs7yxhf.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 13,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpph_x9pvw.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpph_x9pvw.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let i = 1\n    let sum = 0\n    for(i = 1; i < lst.length; i += 2){\n   \
    \     sum += lst[i]\n    }\n    return sum\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp3xjp4297.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3xjp4297.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  //your code here\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n12\n    at test (/tmp/tmp_9vpevnm.js:16:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp_9vpevnm.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    if (lst.length < 1) {\n        return 0;\n    }\n    let sum = 0;\n    for\
    \ (let i = 0; i < lst.length; i += 2) {\n        if (lst[i] % 2 != 0) {\n    \
    \        sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    // coder code here\n  \n  var sum = 0;\n  for (var i = 0; i < lst.length;\
    \ i++){\n    if (i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n   \
    \ }\n  }\n  return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    //coding and coding..\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i+=2){\n        if(lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    // Write your code here\n  }\n  \n  ////////////////////////////////////////////////////////////////////////\n\
    \  \n  //Write a function that converts camelCase strings to regular strings,\
    \ with spaces between the words.\n  // camelCaseStringToRegularString(\"theCatIsOnTheTable\"\
    )\n  // => \"the cat is on the table\"\n  function camelCaseStringToRegularString(str){\n\
    \    // Write your code here\n  }\n  \n  ////////////////////////////////////////////////////////////////////////\n\
    \  \n  //Write a function that takes in a number and returns that number with\
    \ commas every 3 digits.\n  // Examples\n  // >>> solution(12345678) \n  // \"\
    12,345,678\"\n  // >>> solution(233467) \n  // \"233,467\"\n  function solution(num){\n\
    \    // Write your code here\n  }\n  \n  ////////////////////////////////////////////////////////////////////////\n\
    \  \n  //Write a function that searches an array for a particular element.\n \
    \ // Examples\n  // >>> solution([1, 5, 2, 4, 6, 5, 2, 1], 2) \n  // [2, 5, 2]\n\
    \  // >>> solution([3, 3, 4, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8], 4) \n  //\
    \ [4, 4, 4, 4]\n  function solution(arr, num){\n    // Write your code here\n\
    \  }\n  \n  ////////////////////////////////////////////////////////////////////////\n\
    \  \n  //Write a function that takes an array of numbers and returns an array\
    \ where all the negative numbers have been replaced with the word \"negative\"\
    .\n  // Examples\n  // >>> solution([-1, -2, 3, -4, 5, 6, -7, 8, 9]) \n  // [\"\
    negative\", \"negative\", 3, \"negative\", 5, 6, \"negative\", 8, 9]\n  // >>>\
    \ solution([-3, -3, -3, -3, -3, -3, -3, -3, -3, -3]) \n  // [\"negative\", \"\
    negative\", \"negative\", \"negative\", \"negative\", \"negative\", \"negative\"\
    , \"negative\", \"negative\", \"negative\"]\n  function solution(arr){\n    //\
    \ Write your code here\n  }\n  \nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n12\n    at test (/tmp/tmp2t_p8un2.js:61:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp2t_p8un2.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((el,i)=>i%2==0&&el%2!=0).reduce((a,b)=>a+b)\n  }\n  //\
    \ ---------------------------\n  //Given a number, return the sum of all the digits\
    \ of that number that are even.\n  //Examples\n  // >>> solution(3456) \n  //\
    \ 12\n  // >>> solution(12345) \n  // 6\n  function solution(num){\n    let numStr\
    \ = num.toString()\n    let arr = numStr.split('')\n    return arr.filter(el=>Number(el)%2==0).reduce((a,b)=>Number(a)+Number(b))\n\
    \  }\n  // ---------------------------\n  //Given a string, return the sum of\
    \ each character's position in the alphabet.\n  //Examples\n  // >>> solution('abc')\
    \ \n  // 6\n  // >>> solution('abba') \n  // 25\n  function solution(str){\n \
    \   let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    let arr = str.split('')\n\
    \    return arr.reduce((a,b)=>a+alphabet.indexOf(b)+1,0)\n  }\n  // ---------------------------\n\
    \  //Given an array of numbers, return the sum of each of the numbers multiplied\
    \ by their index.\n  //Examples\n  // >>> solution([0, 1, 2, 3]) \n  // 14\n \
    \ // >>> solution([1, 2, 3, 4]) \n  // 20\n  function solution(lst){\n    return\
    \ lst.reduce((a,b,i)=>a+b*i,0)\n  }\n  // ---------------------------\n  //Given\
    \ an array of numbers, return the sum of the sum of each of the digits of each\
    \ number.\n  //Examples\n  // >>> solution([1, 1, 2, 3]) \n  // 10\n  // >>> solution([1,\
    \ 10, 100]) \n  // 6\n  function solution(lst){\n    return lst.reduce((a,b)=>a+b.toString().split('').reduce((a,b)=>Number(a)+Number\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp27aajh60.js:52\n    return lst.reduce((a,b)=>a+b.toString().split('').reduce((a,b)=>Number(a)+Number\n\
    \                                                                            \
    \  ^^^^^^\n\nSyntaxError: missing ) after argument list\n    at Object.compileFunction\
    \ (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp3lk40t4c.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3lk40t4c.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  if(lst.length < 2) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length;\
    \ i += 2){\n    if(lst[i] % 2 === 1) sum += lst[i];\n  }\n  return sum;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let evenSum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 === 0 && lst[i] % 2 !== 0){\n            evenSum += lst[i];\n        }\n\
    \    }\n    return evenSum;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let result = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 == 0\
    \ && lst[i] % 2 == 1){\n      result += lst[i];\n    }\n  }\n  return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let oddSum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i %\
    \ 2 == 0 && lst[i] % 2 == 1){\n            oddSum += lst[i];\n        }\n    }\n\
    \    return oddSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    //coding and coding..\n    let result = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            result +=\
    \ lst[i];\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((x,i)=>i%2==0).filter(x=>x%2==1).reduce((acc,val)=>acc+val)\n\
    \  }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpi0ph9_h7.js:8\n    return lst.filter((x,i)=>i%2==0).filter(x=>x%2==1).reduce((acc,val)=>acc+val)\n\
    \                                                       ^\n\nTypeError: Reduce\
    \ of empty array with no initial value\n    at Array.reduce (<anonymous>)\n  \
    \  at solution (/tmp/tmpi0ph9_h7.js:8:56)\n    at test (/tmp/tmpi0ph9_h7.js:18:20)\n\
    \    at Object.<anonymous> (/tmp/tmpi0ph9_h7.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    //coding and coding..\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0 && lst[i] % 2 === 1) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  // Your code here\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let sum = 0;\n  for(i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i]\
    \ % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpk8cm8kmn.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpk8cm8kmn.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    // Write your code here\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 === 1){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpbpfrspb8.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbpfrspb8.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let result = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i %\
    \ 2 !== 0 && lst[i] % 2 !== 0){\n            result += lst[i];\n        }\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpwwanm9un.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwwanm9un.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let total = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i %\
    \ 2 !== 0 && lst[i] % 2 !== 0){\n            total += lst[i];\n        }\n   \
    \ }\n    return total;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp70shch81.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp70shch81.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    // Write your code here\n    var res = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 != 0 && lst[i] % 2 != 0){\n            res += lst[i];\n\
    \        }\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpbfch_4mh.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbfch_4mh.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ === 0 && lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  return lst.filter((ele, idx) => idx % 2 === 1 && ele % 2 === 1).reduce((acc,\
    \ cur) => acc + cur, 0)\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpet271e9k.js:15:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpet271e9k.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    //coding and coding..\n    let ans = 0;\n    lst.forEach((value, index) =>\
    \ {\n        if(value % 2 === 1 && index % 2 === 0) {\n            ans += value;\n\
    \        }\n    });\n    return ans;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let res = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 !== 0 && i % 2 === 0){\n            res += lst[i];\n        }\n    }\n \
    \   return res;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    //coding and coding..\n    var result = 0;\n    lst.forEach((element, index)\
    \ => {\n        if(element % 2 !== 0 && index % 2 === 0){\n            result\
    \ += element;\n        }\n    });\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let newArr = [];\n    for(let i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 === 0 && lst[i] % 2 === 1){\n            newArr.push(lst[i]);\n        }\n\
    \    }\n    let sum = newArr.reduce((acc, curr) => {\n        return acc + curr;\n\
    \    }, 0);\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    let oddNum = false;\n    for(i = 0; i < lst.length; i++)\
    \ {\n        if(lst[i] % 2 !== 0 && oddNum === false) {\n            sum += lst[i];\n\
    \            oddNum = true;\n        } else if(lst[i] % 2 === 0 && oddNum ===\
    \ true) {\n            sum += lst[i];\n            oddNum = false;\n        }\n\
    \    }\n    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n20\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp7ooezlsc.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7ooezlsc.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 20,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var result = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i %\
    \ 2 == 0 && lst[i] % 2 != 0){\n            result += lst[i];\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 &&\
    \ lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    //coding and coding..\n    return lst.filter((e, i) => i % 2 === 0 && e %\
    \ 2 !== 0).reduce((a, b) => a + b, 0);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var evens = lst.filter(function(val, i){\n        return i % 2 === 0;\n \
    \   });\n    var odds = evens.filter(function(val){\n        return val % 2 ===\
    \ 1;\n    });\n    return odds.reduce(function(prev, curr){\n        return prev\
    \ + curr;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmphvz_b8hc.js:14\n    return odds.reduce(function(prev, curr){\n\
    \                ^\n\nTypeError: Reduce of empty array with no initial value\n\
    \    at Array.reduce (<anonymous>)\n    at solution (/tmp/tmphvz_b8hc.js:14:17)\n\
    \    at test (/tmp/tmphvz_b8hc.js:26:20)\n    at Object.<anonymous> (/tmp/tmphvz_b8hc.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    if(lst.length < 1){\n        return undefined;\n    }\n    let sum = 0;\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 0 && lst[i] %\
    \ 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ == 0 && lst[i] % 2 == 1){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((item, index) => index % 2 === 1 && item % 2 === 1).reduce((acc,\
    \ curr) => acc + curr);\n  }\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpjyfcwuh1.js:15:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjyfcwuh1.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2\
    \ == 0 && lst[i] % 2 == 1){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if (i % 2\
    \ === 0){\n            if (lst[i] % 2 !== 0){\n                sum += lst[i];\n\
    \            }\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpph_x9pvw.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpph_x9pvw.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    if (lst.length === 0) return 0;\n    const isEven = i => i % 2 === 0;\n \
    \   const isOdd = i => i % 2 !== 0;\n    const evenPositioned = lst.filter((_,\
    \ i) => isEven(i));\n    const sumOdd = evenPositioned.filter(isOdd).reduce((acc,\
    \ curr) => acc + curr, 0);\n    return sumOdd;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    // set a count to keep track of the index\n    let count = 0;\n    // set\
    \ an accumulator to keep the sum\n    let acc = 0;\n    // iterate over the list\n\
    \    for(let elem of lst){\n        // check if the element is odd\n        if(elem\
    \ % 2 !== 0){\n            // if it is check if the count is even and add it to\
    \ the accumulator if so\n            if(count % 2 === 0){\n                acc\
    \ += elem;\n            }\n        }\n        // increment the count\n       \
    \ count++;\n    }\n    // return the accumulator\n    return acc;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((x,i)=>i%2!==0).filter(x=>x%2!==0).reduce((a,b)=>a+b)\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmps5iizyox.js:15:10)\n    at Object.<anonymous>\
    \ (/tmp/tmps5iizyox.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var sum = 0;\n    var count = 0;\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(count % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n\
    \        }\n        count++;\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  return lst.filter((num,idx)=> idx % 2 === 1 && num % 2 === 1).reduce((acc,num)=>acc+num,0)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpirprlbqs.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpirprlbqs.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    if (lst.length === 0) return 0;\n    // return lst.reduce((acc, cv, idx)\
    \ => acc + (idx % 2 === 0 && cv % 2 === 1 ? cv : 0), 0);\n    let res = 0;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i]\
    \ % 2 === 1) {\n            res += lst[i];\n        }\n    }\n    return res;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i+=2){\n        if(lst[i]\
    \ % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    if (lst.length==0) return 0;\n    var a = lst.filter((x,i)=>i%2==0).filter(x=>x%2==1).reduce((a,b)=>a+b,0);\n\
    \    return a;\n  }\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    if (lst.length === 0) {\n        return 0;\n    }\n    let sum = 0;\n   \
    \ for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] %\
    \ 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    // Your code here\n    let lstEven = lst.filter((num, index) => index % 2\
    \ === 0);\n    let lstOdd = lstEven.filter(num => num % 2 !== 0);\n    return\
    \ lstOdd.reduce((acc, num) => acc + num, 0);\n  }\n  \n  // Given a list of integers,\
    \ return the sum of every element multiplied by its index.\n  // Examples\n  //\
    \ >>> solution([10, 3, 7, 8]) \n  // 69\n  // >>> solution([10, 3, 7, 8, 11, 3,\
    \ 5, 2]) \n  // 144\n  function solution(lst){\n    // Your code here\n    return\
    \ lst.reduce((acc, num, index) => acc + num * index, 0);\n  }\n  \n  // Given\
    \ a list of integers, return a list of integers with the duplicates removed.\n\
    \  // Examples\n  // >>> solution([8, 8, 9, 10, 10, 10, 11, 11, 11, 11, 12, 13,\
    \ 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 17, 18, 18, 18, 18, 18, 18, 18, 18,\
    \ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\
    \ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\
    \ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\
    \ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\
    \ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\
    \ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n25\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp8mn0p1zn.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8mn0p1zn.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 25,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 &&\
    \ lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 &&\
    \ lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpu7qb8ina.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpu7qb8ina.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    //coding and coding..\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  //Code Here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n12\n    at test (/tmp/tmpe2r0f97q.js:16:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpe2r0f97q.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \tlet sum = 0;\n\tfor(let i = 0; i < lst.length; i++){\n\t\tif (i % 2 === 0 &&\
    \ lst[i] % 2 !== 0){\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    if(!lst.length) return 0;\n    return lst.filter((_, i) => i % 2 === 1 &&\
    \ _ % 2 !== 0).reduce((acc, x) => acc + x);\n  }\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpghkzwler.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpghkzwler.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ == 0 && lst[i] % 2 == 1){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  if(lst.length == 0) return 0;\n  else {\n    var sum = 0;\n    for(var i =\
    \ 0; i < lst.length; i++){\n      if(i % 2 != 0 && lst[i] % 2 != 0) sum += lst[i];\n\
    \    }\n    return sum;\n  }\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp9rfygz3j.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9rfygz3j.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((el, i) => i % 2 === 0 && el % 2 !== 0).reduce((acc, el)\
    \ => acc + el, 0)\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let count = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i %\
    \ 2 == 0 && lst[i] % 2 != 0){\n            count += lst[i];\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    // Write your code here...\n    let oddList = []\n    for(let i = 0; i <\
    \ lst.length; i++){\n        if(i % 2 == 0 && lst[i] % 2 != 0){\n            oddList.push(lst[i])\n\
    \        }\n    }\n    return oddList.reduce((a,b) => a + b, 0)\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  return lst.filter((x,i) => i % 2).reduce((a,b) => a + b);\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpd5mb3ioc.js:15:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpd5mb3ioc.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  return lst.filter((_, i) => i % 2 === 1).reduce((acc, curr) => acc + curr *\
    \ (curr % 2), 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpvvbehybr.js:15:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvvbehybr.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    if(lst.length === 0) return 0;\n    let newLst = lst.filter((el, index) =>\
    \ el % 2 !== 0 && index % 2 === 0)\n    return newLst.reduce((acc, curr) => acc\
    \ + curr)\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpbk5llnyh.js:10\n    return newLst.reduce((acc, curr) => acc + curr)\n\
    \                  ^\n\nTypeError: Reduce of empty array with no initial value\n\
    \    at Array.reduce (<anonymous>)\n    at solution (/tmp/tmpbk5llnyh.js:10:19)\n\
    \    at test (/tmp/tmpbk5llnyh.js:20:20)\n    at Object.<anonymous> (/tmp/tmpbk5llnyh.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let result = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i %\
    \ 2 !== 0 && lst[i] % 2 !== 0){\n            result += lst[i];\n        }\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpwwanm9un.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwwanm9un.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let total = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0\
    \ && lst[i] % 2 !== 0){\n      total += lst[i];\n    }\n  }\n  return total;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpnol1megy.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnol1megy.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i += 2){\n        if(lst[i]\
    \ % 2 == 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((v, i) => v % 2 == 1 && i % 2 == 0).reduce((a, b) => a\
    \ + b, 0);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let newArr = [];\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 ===\
    \ 0 && lst[i] % 2 === 1){\n      newArr.push(lst[i]);\n    }\n  }\n  return newArr.reduce((acc,\
    \ el) => acc + el, 0);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((x, index) => index % 2 === 1 && x % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp2_dvgpfu.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2_dvgpfu.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  var total = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 !== 0\
    \ && lst[i] % 2 !== 0){\n      total += lst[i];\n    }\n  }\n  return total;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpoebckxcy.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpoebckxcy.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 == 0 &&\
    \ lst[i] % 2 == 1){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let oddSum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i %\
    \ 2 === 0 && lst[i] % 2 !== 0){\n            oddSum += lst[i];\n        }\n  \
    \  }\n    return oddSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let evenOdd = [];\n    for(let i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 !== 0){\n            evenOdd.push(lst[i]);\n        }\n    }\n    let odd\
    \ = evenOdd.filter(function(num){\n        return num % 2 !== 0;\n    })\n   \
    \ let oddSum = odd.reduce(function(a, b){\n        return a + b;\n    }, 0)\n\
    \    return oddSum;\n  }\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp7tstiyis.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7tstiyis.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \treturn lst.filter((num, index) => {\n\t\treturn num % 2 === 1 && index % 2 ===\
    \ 0;\n\t}).reduce((acc, val) => {\n\t\treturn acc + val;\n\t}, 0);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let odd = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ === 0 && lst[i] % 2 !== 0){\n            odd += lst[i];\n        }\n    }\n\
    \    return odd;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  var result = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 === 0\
    \ && lst[i] % 2 !== 0){\n      result += lst[i];\n    }\n  }\n  return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let lst2 = lst.filter((el,i)=>i%2==0 && el%2==1);\n  let sum = lst2.reduce((acc,\
    \ el)=> acc + el);\n  return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpgedcsid1.js:9\n  let sum = lst2.reduce((acc, el)=> acc + el);\n\
    \                 ^\n\nTypeError: Reduce of empty array with no initial value\n\
    \    at Array.reduce (<anonymous>)\n    at solution (/tmp/tmpgedcsid1.js:9:18)\n\
    \    at test (/tmp/tmpgedcsid1.js:20:20)\n    at Object.<anonymous> (/tmp/tmpgedcsid1.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((n, i) => n % 2 == 1 && i % 2 == 0).reduce((a, n) => a\
    \ + n, 0);\n  }\n  \n  // ********************************************\n  // Given\
    \ a list of numbers, return the difference between the largest and smallest numbers\
    \ in the list.\n  // Examples\n  // >>> solution([2, 5, 9, 12, 1]) \n  // 11\n\
    \  // >>> solution([1, 2, 3, 4, 5]) \n  // 4\n  function solution(lst){\n    return\
    \ Math.max(...lst) - Math.min(...lst);\n  }\n  \n  // ********************************************\n\
    \  // Given a list of numbers, return the sum of each number in the list, but\
    \ only if it is divisible by 3 or 5.\n  // Examples\n  // >>> solution([2, 3,\
    \ 8, 15, 1]) \n  // 24\n  // >>> solution([4, 5, 6, 7, 8]) \n  // 0\n  function\
    \ solution(lst){\n    return lst.filter(n => n % 3 == 0 || n % 5 == 0).reduce((a,\
    \ n) => a + n, 0);\n  }\n  \n  // ********************************************\n\
    \  // Given a list of numbers, return the sum of all of the numbers that are strictly\
    \ greater than 8.\n  // Examples\n  // >>> solution([2, 5, 9, 12, 1]) \n  // 23\n\
    \  // >>> solution([1, 2, 3, 4, 5]) \n  // 0\n  function solution(lst){\n    return\
    \ lst.filter(n => n > 8).reduce((a, n) => a + n, 0);\n  }\n  \n  // ********************************************\n\
    \  // Given a list of numbers, return the sum of the first two numbers (if they\
    \ exist) plus the sum of the next two numbers (if they exist).\n  // Examples\n\
    \  // >>> solution([5, 4, 7, 8, 2]) \n  // 18\n  // >>> solution([2, 3, 1, 9,\
    \ 5]) \n  // 9\n  function solution(lst){\n    let sum = 0;\n    for (let i =\
    \ 0; i < lst.\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpz7khm5ar.js:54\nconst assert = require('node:assert');\n      ^^^^^^\n\
    \nSyntaxError: Unexpected identifier\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((e,i)=>i%2==0&&e%2==1).reduce((a,c)=>a+c,0)\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var oddSum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i %\
    \ 2 === 0 && lst[i] % 2 === 1){\n            oddSum += lst[i];\n        }\n  \
    \  }\n    return oddSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 &&\
    \ lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp8ocu04oy.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8ocu04oy.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ == 0 && lst[i] % 2 == 1){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    //coding and coding..\n    var sum = 0;\n    for(var i = 0; i < lst.length;\
    \ i++) {\n        if(i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    //coding and coding....\n    return lst.filter((x,i)=>i%2===0).filter(x=>x%2===1).reduce((a,b)=>a+b,0)\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp9des5nr1.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9des5nr1.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 &&\
    \ lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    if(lst.length == 0) return 0;\n    let res = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 == 0 && lst[i] % 2 != 0){\n            res += lst[i];\n\
    \        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    let even = lst.filter((element, index) => index % 2 ===\
    \ 0)\n    sum = even.reduce((acc, element) => element % 2 !== 0 ? acc + element\
    \ : acc, 0)\n    return sum\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let i = 0;\n    let sum = 0;\n    for(i; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 !== 0 && i % 2 === 0){\n            sum += lst[i];\n        }\n    }\n \
    \   return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(i = 0; i < lst.length; i++){\n        if(i % 2 !==\
    \ 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpm0fi0w79.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpm0fi0w79.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    // Insert solution here\n    let newArr = []\n    for(let i = 0; i < lst.length;\
    \ i++) {\n        if(i % 2 === 0 && lst[i] % 2 !== 0) {\n            newArr.push(lst[i])\n\
    \        }\n    }\n    return newArr.reduce((a, b) => a + b, 0)\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 &&\
    \ lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  var result = 0;\n  for(var i = 0; i < lst.length; i+=2){\n    if(lst[i] % 2\
    \ != 0){\n      result+=lst[i];\n    }\n  }\n  return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var oddTotal = 0;\n    for(var i = 0; i < lst.length; i+=2){\n        if(lst[i]\
    \ % 2 !== 0){\n            oddTotal += lst[i];\n        }\n    }\n    return oddTotal;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ === 0 && lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(i=0; i<lst.length; i++){\n        if(i%2==0 && lst[i]%2==1){\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  //TODO: complete the solution, return an integer\n  let sum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  //your code here\n  let x = 0;\n  let y = 0;\n  while (y < lst.length) {\n\
    \    if (lst[y] % 2 === 1 && y % 2 === 0) {\n      x += lst[y];\n    }\n    y++;\n\
    \  }\n  return x;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpcpd65puk.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcpd65puk.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpph_x9pvw.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpph_x9pvw.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  return lst.filter((item, index) => item % 2 === 1 && index % 2 === 0).reduce((total,\
    \ current) => total + current, 0);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let total = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i %\
    \ 2 === 0 && lst[i] % 2 !== 0){\n            total += lst[i];\n        }\n   \
    \ }\n    return total;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  //coding and coding..\n   var sum = 0;\n   for(var i = 1; i < lst.length; i+=2){\n\
    \       if(lst[i] % 2 !== 0){\n           sum+=lst[i];\n       }\n   }\n   return\
    \ sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmprmbc99cd.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprmbc99cd.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if (i % 2 !== 0 &&\
    \ lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpr75d5uqu.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpr75d5uqu.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  //#1 way\n  var n = 0;\n  for(var i = 0; i < lst.length; i++) {\n    if(i %\
    \ 2 == 0 && lst[i] % 2 != 0) {\n      n += lst[i];\n    }\n  }\n  return n;\n\
    \  \n  //#2 way\n  var oddPos = [];\n  var evenPos = [];\n  for(var i = 0; i <\
    \ lst.length; i++) {\n    if(i % 2 == 0) {\n      oddPos.push(lst[i]);\n    }\n\
    \    else {\n      evenPos.push(lst[i]);\n    }\n  }\n  var sum = 0;\n  for(var\
    \ i = 0; i < oddPos.length; i++) {\n    if(oddPos[i] % 2 != 0) {\n      sum +=\
    \ oddPos[i];\n    }\n  }\n  return sum;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(i % 2 !== 0 &&\
    \ lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpj15dwoc3.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpj15dwoc3.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n12\n    at test (/tmp/tmpgviyg6xc.js:16:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpgviyg6xc.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  var even_indices = [];\n  var odd_sum = 0;\n  for (var i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0) {\n      even_indices.push(lst[i]);\n    }\n  }\n\
    \  for (var j = 0; j < even_indices.length; j++) {\n    if (even_indices[j] %\
    \ 2 !== 0) {\n      odd_sum += even_indices[j];\n    }\n  }\n  return odd_sum;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var lst2 = lst.filter(function(e,i) {\n        return i % 2 !== 0;\n    });\n\
    \    lst2 = lst2.filter(function(e) {\n        return e % 2 === 1;\n    });\n\
    \    return lst2.reduce(function(a,b) {\n        return a + b;\n    });\n};\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpz5u6pffn.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpz5u6pffn.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    // good luck!\n    let count = 0;\n    lst.forEach((ele,i)=>{\n        if(i%2\
    \ !== 0 && ele%2 !== 0){\n            count += ele;\n        }\n    })\n    return\
    \ count;\n  }\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpfn869vjl.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfn869vjl.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 === 0 &&\
    \ lst[i] % 2 === 1){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 &&\
    \ lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((val, index) => index % 2 != 0 && val % 2 != 0).reduce((acc,\
    \ val) => acc + val);\n};\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp3qrah0ze.js:15:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3qrah0ze.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let result = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0\
    \ && lst[i] % 2 !== 0){\n      result += lst[i];\n    }\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2\
    \ == 0 && lst[i] % 2 == 1){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((element, index) => index % 2 === 0 && element % 2 !==\
    \ 0).reduce((acc, curr) => acc + curr, 0);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i+=2){\n        if(lst[i]\
    \ % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 0 &&\
    \ lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  var s = 0;\n  for (var i = 0; i < lst.length; i++) {\n    if(i % 2 != 0 &&\
    \ lst[i] % 2 != 0) {\n      s += lst[i];\n    }\n  }\n  return s;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp0s0pljhh.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0s0pljhh.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    let pos = 0;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(pos % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n  \
    \      }\n        pos++;\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var odds = lst.filter(function(num, i){\n        return (i % 2 !== 0) &&\
    \ (num % 2 !== 0);\n    });\n    return odds.reduce(function(acc, num){\n    \
    \    return acc + num;\n    }, 0);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp7zawhn48.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7zawhn48.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((n, i) => i % 2 === 1 && n % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmptk656too.js:15:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptk656too.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp3lk40t4c.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3lk40t4c.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    //YOUR CODE HERE\n    let oddSum = 0;\n    for (let i = 0; i < lst.length;\
    \ i++){\n        if (i % 2 !== 0 && lst[i] % 2 !== 0){\n            oddSum +=\
    \ lst[i];\n        }\n    }\n    return oddSum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpuu9x84xr.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuu9x84xr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((item,index)=>(index % 2 == 0 && item % 2 !== 0)).reduce((a,b)=>a+b,0)\n\
    \  }\n  solution([5, 8, 7, 1]) \nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  if (lst.length === 0) {\n    return 0;\n  }\n  return lst.filter((num, index)\
    \ => index % 2 === 0).filter(num => num % 2 !== 0).reduce((acc, current) => acc\
    \ + current, 0);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2\
    \ === 0 && lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((x,i)=>i%2!==0).filter(x=>x%2!==0).reduce((a,b)=>a+b)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp0lg2lknp.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0lg2lknp.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let accum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i %\
    \ 2 === 0 && lst[i] % 2 !== 0){\n            accum += lst[i];\n        }\n   \
    \ }\n    return accum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  var total = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 == 0 &&\
    \ lst[i] % 2 != 0){\n      total += lst[i];\n    }\n  }\n  return total;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    //coding and coding..\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 === 1){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  return lst.filter((val, i) => {\n    return (i + 1) % 2 === 0 && val % 2 !==\
    \ 0;\n  }).reduce((sum, val) => {\n    return sum + val;\n  }, 0);\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp8qprpmk1.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8qprpmk1.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  return lst.filter((e,i)=>i%2 && e%2).reduce((a,b)=>a+b,0)\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpov0zps5b.js:15:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpov0zps5b.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    // only change code below this line\n    let sum = 0;\n    let even = false;\n\
    \    for(let i = 0; i < lst.length; i++){\n      if(even){\n        sum += lst[i];\n\
    \      }\n      even = !even;\n    }\n    return sum;\n    // only change code\
    \ above this line\n  }\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpn8f_vf4x.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpn8f_vf4x.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    // Your code here\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n12\n    at test (/tmp/tmpp_f54fwa.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpp_f54fwa.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2\
    \ === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  // Type your solution here\n  let sum = 0;\n  for(let i = 0; i < lst.length;\
    \ i++){\n    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2\
    \ == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    if (lst.length === 0) {\n        return 0;\n    }\n    let total = 0;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i]\
    \ % 2 !== 0) {\n            total += lst[i];\n        }\n    }\n    return total;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((x, i) => x % 2 && i % 2).reduce((a, b) => a + b, 0);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpeg6m4uoc.js:16:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpeg6m4uoc.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((a,b)=>b%2!=0).filter(a=>a%2!=0).reduce((a,b)=>a+b,0)\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpp1s6nnjk.js:15:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpp1s6nnjk.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((acc, num)\
    \ => acc + num, 0)\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i+=2){\n    if(lst[i] % 2 ===\
    \ 1){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 == 0 &&\
    \ lst[i] % 2 != 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let evens = lst.filter((e, i) => i % 2 === 0);\n    let odds = evens.filter(e\
    \ => e % 2 !== 0);\n    return odds.reduce((acc, i) => acc + i);\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpbkquj3l0.js:10\n    return odds.reduce((acc, i) => acc + i);\n\
    \                ^\n\nTypeError: Reduce of empty array with no initial value\n\
    \    at Array.reduce (<anonymous>)\n    at solution (/tmp/tmpbkquj3l0.js:10:17)\n\
    \    at test (/tmp/tmpbkquj3l0.js:19:20)\n    at Object.<anonymous> (/tmp/tmpbkquj3l0.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ == 0 && lst[i] % 2 == 1){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var finalSum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 == 1){\n            finalSum += lst[i];\n        }\n\
    \    }\n    return finalSum;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  if(lst.length == 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length;\
    \ i++){\n    if(i % 2 !== 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmpq2egd2vg.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpq2egd2vg.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    return lst.filter((e, i) => i % 2 == 0 && e % 2 != 0).reduce((acc, cur) =>\
    \ acc + cur, 0)\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ == 0 && lst[i] % 2 == 1){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let odds = 0;\n    let count = 0;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(count % 2 === 0 && lst[i] % 2 === 1){\n            odds += lst[i];\n\
    \        }\n        count++;\n    }\n    return odds;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let oddNumber = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 !== 0 && i % 2 === 0){\n            oddNumber += lst[i];\n        }\n  \
    \  }\n    return oddNumber;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i+=2){\n        if(lst[i]\
    \ % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ == 0 && lst[i] % 2 == 1){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823084
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++) {\n        if(i % 2\
    \ === 0 && lst[i] % 2 === 1) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823085
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  return lst.filter((num,idx)=>(idx%2===0 && num%2!==0)).reduce((x,y)=>x+y,0)\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823085
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \  let sum = 0;\n  for(i=0; i<lst.length; i++){\n    if(i%2 !== 0 && lst[i]%2\
    \ !== 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp5a9l1_9p.js:21:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5a9l1_9p.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823085
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp3lk40t4c.js:22:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3lk40t4c.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823084
- exit_code: 1
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \treturn lst.filter((el, idx) => el % 2 !== 0 && idx % 2 === 0).reduce((a, b)\
    \ => a + b);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpvaquxe68.js:8\n\treturn lst.filter((el, idx) => el % 2 !== 0 &&\
    \ idx % 2 === 0).reduce((a, b) => a + b);\n\t                                \
    \                              ^\n\nTypeError: Reduce of empty array with no initial\
    \ value\n    at Array.reduce (<anonymous>)\n    at solution (/tmp/tmpvaquxe68.js:8:64)\n\
    \    at test (/tmp/tmpvaquxe68.js:17:20)\n    at Object.<anonymous> (/tmp/tmpvaquxe68.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659823085
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    var temp = [];\n    var odd = [];\n    var result = 0;\n    for(var i = 0;\
    \ i < lst.length; i++){\n        if(i % 2 === 0){\n            temp.push(lst[i]);\n\
    \        }\n    }\n    for(var j = 0; j < temp.length; j++){\n        if(temp[j]\
    \ % 2 !== 0){\n            odd.push(temp[j]);\n        }\n    }\n    for(var k\
    \ = 0; k < odd.length; k++){\n        result += odd[k];\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823085
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let oddElementsInEvenPositions = 0;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] % 2 === 1 && i % 2 === 0){\n            oddElementsInEvenPositions\
    \ += lst[i];\n        }\n    }\n    return oddElementsInEvenPositions;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823085
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    // Your code here\n    let arr = lst.filter((v, i) => {\n      return i %\
    \ 2 === 0 && v % 2 !== 0;\n    })\n    let sum = arr.reduce((acc, cur) => {\n\
    \      return acc + cur;\n    }, 0)\n    return sum;\n  }\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823085
- exit_code: 0
  program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7,\
    \ 1]) \n// 12\n// >>> solution([3, 3, 3, 3, 3]) \n// 9\nfunction solution(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823083
