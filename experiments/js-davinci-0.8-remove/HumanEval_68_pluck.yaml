name: HumanEval_68_pluck
language: js
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction\
  \ pluck(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
  \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
  \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
  \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["  let min = 0;\n  let minIndex = 0;\n  let flag = false;\n  if(arr.length\
    \ === 0){\n    return [];\n  }\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i]\
    \ % 2 === 0){\n      if(arr[i] < min || !flag){\n        min = arr[i];\n     \
    \   minIndex = i;\n        flag = true;\n      }\n    }\n  }\n  if(!flag){\n \
    \   return [];\n  }\n  return [min, minIndex];\n}", "    let result = [];\n  \
    \  if(!arr.length){\n        return result;\n    }\n    let evens = [];\n    let\
    \ even_indexes = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            evens.push(arr[i]);\n            even_indexes.push(i);\n\
    \        }\n    }\n    if(!evens.length){\n        return result;\n    }\n   \
    \ else{\n        let even_min = Math.min(...evens);\n        let even_min_index\
    \ = even_indexes[evens.indexOf(even_min)];\n        result.push(even_min);\n \
    \       result.push(even_min_index);\n        return result;\n    }\n}\n", " \
    \ let result = [];\n  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length\
    \ > 0) {\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n    let\
    \ index = arr.indexOf(smallest);\n    result.push(smallest, index);\n  }\n  return\
    \ result;\n}\n", "    var even = null, even_ind = null;\n    for(var i = 0; i\
    \ < arr.length; i++){\n        if(arr[i] % 2 == 0 && (even == null || arr[i] <\
    \ even)){\n            even = arr[i];\n            even_ind = i;\n        }\n\
    \    }\n    if(even_ind == null) return [];\n    return [even, even_ind];\n}\n",
  "    let result = [];\n    if (arr.length === 0){\n        return result;\n    }\n\
    \    let evenArr = arr.filter(x => x % 2 === 0).sort((a,b) => a - b);\n    if\
    \ (evenArr.length === 0){\n        return result;\n    }\n    result.push(evenArr[0]);\n\
    \    result.push(arr.indexOf(evenArr[0]));\n    return result;\n}", "    if(arr\
    \ === null) return [];\n    let evenNums = [];\n    let lowestEven;\n    let index;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         evenNums.push(arr[i]);\n        }\n    }\n    lowestEven = Math.min(...evenNums);\n\
    \    index = arr.indexOf(lowestEven);\n    if(evenNums.length === 0){\n      \
    \  return [];\n    }\n    return [lowestEven, index];\n}\n", "    let newArr =\
    \ [];\n    let answer = [];\n    for(let i = 0; i < arr.length; i++){\n      \
    \  newArr.push(arr[i]);\n    }\n    let minValue = Math.min(...newArr);\n    while(minValue\
    \ % 2 !== 0){\n        let index = newArr.indexOf(minValue);\n        newArr.splice(index,\
    \ 1);\n        minValue = Math.min(...newArr);\n    }\n    answer.push(minValue);\n\
    \    let indexOfMin = arr.indexOf(minValue);\n    answer.push(indexOfMin);\n \
    \   return answer;\n}", "    var evenArr = [], evenVal = [], smallestVal = arr[0],\
    \ index = 0;\n    if(arr.length == 0) return [];\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 == 0){\n            evenArr.push(arr[i]);\n   \
    \         evenVal.push(i);\n        }\n    }\n    if(evenArr.length != 0){\n \
    \       for(var i = 0; i < evenArr.length; i++){\n            if(evenArr[i] <\
    \ smallestVal){\n                smallestVal = evenArr[i];\n                index\
    \ = evenVal[i];\n            }\n        }\n        return [smallestVal, index];\n\
    \    }\n    else{\n        return [];\n    }\n}\nvar arr = [3,8,3,1,5,9,9,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
  "    let evens = []\n    let evenIndex = []\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            evens.push(arr[i])\n     \
    \       evenIndex.push(i)\n        }\n    }\n    if(evens.length){\n        let\
    \ min = evens[0]\n        let minIndex = evenIndex[0]\n        for(let i = 0;\
    \ i < evens.length; i++){\n            if(evens[i] < min){\n                min\
    \ = evens[i]\n                minIndex = evenIndex[i]\n            }\n       \
    \ }\n        return [min, minIndex]\n    }\n    return []\n}", "  const even =\
    \ arr.filter(el => el % 2 === 0);\n  if (even.length === 0) return [];\n  const\
    \ smallest = even.reduce((acc, curr) => acc < curr ? acc : curr);\n  return [smallest,\
    \ arr.indexOf(smallest)];\n}\n", "    let evens = [];\n    let even_indexes =\
    \ [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 ===\
    \ 0) {\n            evens.push(arr[i]);\n            even_indexes.push(i);\n \
    \       }\n    }\n    if (evens.length > 0) {\n        let minimum = Math.min(...evens);\n\
    \        let index = evens.indexOf(minimum);\n        return [minimum, even_indexes[index]];\n\
    \    }\n    return [];\n}", "    var result = [];\n    var indexes = [];\n   \
    \ var smallest;\n    var indexSmallest;\n    var newArr = arr.map(function(x)\
    \ {\n        return x % 2;\n    });\n    if(!arr.length) {\n        return result;\n\
    \    }\n    if(newArr.indexOf(0) !== -1) {\n        smallest = arr[newArr.indexOf(0)];\n\
    \        for(var i = 0; i < arr.length; i++) {\n            if(arr[i] === smallest)\
    \ {\n                indexes.push(i);\n            }\n        }\n        indexSmallest\
    \ = indexes[0];\n        for(var i = 0; i < indexes.length; i++) {\n         \
    \   if(indexes[i] < indexSmallest) {\n                indexSmallest = indexes[i];\n\
    \            }\n        }\n        result.push(smallest);\n        result.push(indexSmallest);\n\
    \    }\n    return result;\n}\nvar input = [];", "  let evens = arr.map((x,i)=>{\n\
    \    if(x%2==0){\n      return [x,i]\n    }\n  }).filter(x=>x)\n  if(evens.length\
    \ == 0){\n    return []\n  }\n  let sorted = evens.sort((a,b)=>{\n    if(a[0]>b[0]){\n\
    \      return 1\n    }\n    if(a[0]<b[0]){\n      return -1\n    }\n    if(a[1]>b[1]){\n\
    \      return 1\n    }\n    if(a[1]<b[1]){\n      return -1\n    }\n    return\
    \ 0\n  })\n  return sorted[0]\n}\n", "    let evens = arr.filter(n => n % 2 ===\
    \ 0).sort((a, b) => a - b);\n    let first = evens[0];\n    let index = arr.indexOf(first);\n\
    \    return [first, index];\n}\n", "\tlet evens = arr.filter(num => num % 2 ===\
    \ 0);\n\tif(evens.length === 0){\n\t\treturn [];\n\t}\n\tlet min = Math.min(...evens);\n\
    \treturn [min, arr.indexOf(min)];\n}\n", "    //\n    var minEven = -1;\n    var\
    \ index = -1;\n    var result = [];\n    var i = 0;\n    while(i < arr.length){\n\
    \        if(arr[i] % 2 == 0){\n            if(minEven < 0){\n                minEven\
    \ = arr[i];\n                index = i;\n            }\n            else if(arr[i]\
    \ < minEven){\n                minEven = arr[i];\n                index = i;\n\
    \            }\n        }\n        i++;\n    }\n    if(minEven < 0){\n       \
    \ return result;\n    }\n    else{\n        result.push(minEven);\n        result.push(index);\n\
    \        return result;\n    }\n}\nvar array = [5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5",
  "    // there is no even numbers or arr is empty\n    if(arr.every(num => num %\
    \ 2 !== 0) || arr.length === 0){\n        return [];\n    }\n    // find the smallest\
    \ even number by finding even numbers\n    // and than find the smallest one among\
    \ them\n    let evens = arr.filter(num => num % 2 === 0);\n    let smallestEven\
    \ = evens.reduce((acc, curr) => {\n        return acc < curr ? acc : curr;\n \
    \   });\n    // find the smallest index of the smallest even number\n    let index\
    \ = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n}\n", "  var\
    \ evens = arr.filter(function(val){\n    return val % 2 === 0;\n  });\n  if(evens.length\
    \ === 0) return [];\n  var smallest = evens.reduce(function(prev, curr){\n   \
    \ return prev < curr ? prev : curr;\n  });\n  var index = arr.indexOf(smallest);\n\
    \  return [smallest, index];\n}", "  let evens = [];\n  for(let i = 0; i < arr.length;\
    \ i++){\n    if(arr[i] % 2 === 0){\n      evens.push([arr[i], i]);\n    }\n  }\n\
    \  if(evens.length === 0){\n    return [];\n  }\n  evens.sort((a, b) => a[0] -\
    \ b[0]);\n  return evens[0];\n}\n", "    let even = arr.filter(num => num % 2\
    \ === 0);\n    let min = even.sort((a,b) => a - b)[0];\n    if(min !== undefined)\
    \ return [min, arr.indexOf(min)];\n    return [];\n}\n", "    if (arr.length ==\
    \ 0){\n        return [];\n    }\n    let evens = [];\n    for (let i = 0; i <\
    \ arr.length; i++){\n        if (arr[i] % 2 == 0){\n            evens.push(arr[i]);\n\
    \        }\n    }\n    if (evens.length == 0){\n        return [];\n    }\n  \
    \  let smallest = evens[0];\n    let smallestIndex = 0;\n    for (let i = 0; i\
    \ < evens.length; i++){\n        if (evens[i] < smallest){\n            smallest\
    \ = evens[i];\n            smallestIndex = i;\n        }\n    }\n    return [smallest,\
    \ smallestIndex];\n}\n", "    let result = [];\n    let evens = [];\n    let evenIndexes\
    \ = [];\n    if(arr.length === 0){\n        return result;\n    }\n    else {\n\
    \        for(let i = 0; i < arr.length; i++){\n            if(arr[i] % 2 === 0){\n\
    \                evens.push(arr[i]);\n                evenIndexes.push(i);\n \
    \           }\n        }\n        if(evens.length === 0){\n            return\
    \ result;\n        }\n        else {\n            let min = Math.min(...evens);\n\
    \            let minIndex = evens.indexOf(min);\n            let finalIndex =\
    \ evenIndexes[minIndex];\n            result.push(min);\n            result.push(finalIndex);\n\
    \            return result;\n        }\n    }\n}\n", "    if (arr.length <= 0)\
    \ {\n        return [];\n    }\n    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length <= 0) {\n        return [];\n    }\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n", "    let newArr = [];\n    let smallestEven\
    \ = arr.length;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] %\
    \ 2 === 0 && arr[i] <= smallestEven){\n            smallestEven = arr[i];\n  \
    \          newArr = [smallestEven, i];\n        }\n    }\n    return newArr;\n\
    }\n", "    let evens = arr.filter(num => num % 2 === 0);\n    if (evens.length\
    \ === 0){\n        return [];\n    } else {\n        let index = arr.indexOf(Math.min(...evens));\n\
    \        return [Math.min(...evens), index];\n    }\n}", "    var minIndex = 9999,\
    \ minValue = 9999;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ > 0 && arr[i] % 2 == 0 && arr[i] < minValue){\n            minValue = arr[i];\n\
    \            minIndex = i;\n        }\n    }\n    if(minIndex < 9999){\n     \
    \   return [minValue, minIndex];\n    }else{\n        return [];\n    }\n}", " \
    \   //get all even values\n    //sort the values by ascending order\n    //make\
    \ sure you get the index of the smallest value\n    //return [smallestValue, index]\n\
    \    let small = 0;\n    if(arr.length == 0) return [];\n    let evenArr = arr.filter(function(element){\n\
    \        return element % 2 == 0;\n    });\n    if(evenArr.length == 0) return\
    \ [];\n    small = evenArr[0];\n    for(let i = 0; i < evenArr.length; i++){\n\
    \        if(evenArr[i] < small){\n            small = evenArr[i];\n        }\n\
    \    }\n    let index = arr.indexOf(small);\n    return [small, index];\n}\n",
  "  let smallest_even = null;\n  let smallest_even_index = null;\n  for(let i = 0;\
    \ i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n      if(smallest_even_index\
    \ === null || arr[i] < smallest_even){\n        smallest_even = arr[i];\n    \
    \    smallest_even_index = i;\n      }\n    }\n  }\n  if(smallest_even_index ===\
    \ null){\n    return [];\n  }\n  return [smallest_even, smallest_even_index];\n\
    }", "    let even = 2\n    let min = Infinity\n    let minIdx = Infinity\n   \
    \ for(let i = 0; i < arr.length; i++){\n        if(arr[i] % even === 0 && arr[i]\
    \ < min){\n            min = arr[i]\n            minIdx = i\n        }\n    }\n\
    \    if(min === Infinity){\n        return []\n    }\n    return [min, minIdx]\n\
    }\n\nlet arr = [1,2,3,4,5,6,7,8,9,10]", "    if(arr.length === 0) return [];\n\
    \    let smallestEvenValue = Infinity;\n    let index = -1;\n    for(let i = 0;\
    \ i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallestEvenValue){\n\
    \            smallestEvenValue = arr[i];\n            index = i;\n        }\n\
    \    }\n    if(index === -1) return [];\n    return [smallestEvenValue, index];\n\
    }\n", "  var even = [];\n  var evenIndex = [];\n  var result = [];\n  for(var\
    \ i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n      even.push(arr[i]);\n\
    \      evenIndex.push(i);\n    }\n  }\n  if(even.length === 0){\n    return [];\n\
    \  }\n  var evenMin = Math.min.apply(null, even);\n  var evenMinIndex = evenIndex[even.indexOf(evenMin)];\n\
    \  result.push(evenMin);\n  result.push(evenMinIndex);\n  return result;\n}\n\
    var branch = [\n  1,  // index 0\n  2,  // index 1\n  3,  // index 2\n  4,  //\
    \ index 3\n  5,  // index 4\n  6,  // index 5\n  7,  // index 6\n  8,  // index\
    \ 7\n  9,  // index 8\n  10, // index 9\n  11, // index 10\n  12, // index 11\n\
    \  13, // index 12\n  14, // index 13\n  15, // index 14\n  16, // index 15\n\
    \  17, // index 16\n  18, // index 17\n  19, // index 18\n  20, // index 19\n\
    \  21, // index 20\n  22, // index 21\n  23, // index 22\n  24, // index 23\n\
    \  25, // index 24\n  26, // index 25\n  27, // index 26\n  28, // index 27\n\
    \  29, // index 28\n  30, // index 29\n  31, // index 30\n  32, // index 31\n\
    \  33, // index 32\n  34, // index 33\n  35, // index 34\n  36, // index 35\n\
    \  37, // index 36\n  38, // index 37\n  39, // index 38\n  40, // index 39\n\
    \  41, // index 40\n  42, // index 41\n  43, // index 42\n  44, // index 43\n\
    \  45, // index 44\n  46, // index 45\n  47, // index 46\n  48, // index 47\n\
    \  49, // index 48\n ", "    var smallestEven = 10000;\n    var smallestEvenIndex\
    \ = 10000;\n    var evenFound = false;\n    var index = 0;\n    for(var i = 0;\
    \ i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            if(arr[i] <\
    \ smallestEven){\n                smallestEven = arr[i];\n                smallestEvenIndex\
    \ = i;\n                evenFound = true;\n            }\n        }\n    }\n \
    \   return (evenFound ? [smallestEven, smallestEvenIndex] : []);\n}", "    var\
    \ result = [];\n    var index = -1;\n    var low = Math.pow(2,50);\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] === 0){\n            result\
    \ = [0, i];\n            break;\n        }else if(arr[i] % 2 === 0 && arr[i] <\
    \ low){\n            low = arr[i];\n            index = i;\n        }\n    }\n\
    \    if(index >= 0){\n        result = [low, index];\n    }\n    return result;\n\
    }", "  var evenNumbers = [];\n  var minEven = Number.MAX_SAFE_INTEGER;\n  var\
    \ index = 0;\n  var plucked = [];\n  arr.forEach(function(num, i){\n    if(num\
    \ % 2 === 0){\n      evenNumbers.push(num);\n      if(num < minEven){\n      \
    \  minEven = num;\n        index = i;\n      }\n    }\n  });\n  if(evenNumbers.length\
    \ === 0){\n    return [];\n  } else {\n    plucked.push(minEven);\n    plucked.push(index);\n\
    \    return plucked;\n  }\n}\nvar a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];", " \
    \ if(arr.length === 0){\n    return [];\n  }\n  else{\n    let lowest = arr[0];\n\
    \    let index = 0;\n    for(let i = 0; i < arr.length; i++){\n      if(arr[i]\
    \ % 2 === 0 && arr[i] < lowest){\n        lowest = arr[i];\n        index = i;\n\
    \      }\n    }\n    if(lowest % 2 === 0){\n      return [lowest, index];\n  \
    \  }\n    else{\n      return [];\n    }\n  }\n}\n", "    if (arr.length == 0)\
    \ {\n        return [];\n    }\n    let minEven = Infinity;\n    let minIndex\
    \ = Infinity;\n    for (let i = 0; i < arr.length; i++) {\n        if (isEven(arr[i])\
    \ && arr[i] < minEven) {\n            minEven = arr[i];\n            minIndex\
    \ = i;\n        }\n    }\n    if (minEven != Infinity) {\n        return [minEven,\
    \ minIndex];\n    }\n    return [];\n}\n", "  var sArr = [];\n  for(var i = 0;\
    \ i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n      sArr.push(arr[i]);\n\
    \    }\n  }\n  if(sArr.length === 0){\n    return [];\n  }\n  sArr.sort(function(a,\
    \ b){\n    return a - b;\n  });\n  var answer = [];\n  answer.push(sArr[0]);\n\
    \  for(var i = 0; i < arr.length; i++){\n    if(arr[i] === sArr[0]){\n      answer.push(i);\n\
    \      return answer;\n    }\n  }\n}", "  var index = -1;\n  var smallestEven\
    \ = 10000;\n  var output = [];\n  if(arr.length == 0){\n    return [];\n  }\n\
    \  for(var i = 0; i < arr.length; i++){\n    if(arr[i] % 2 == 0 && arr[i] < smallestEven){\n\
    \      smallestEven = arr[i];\n      index = i;\n    }\n  }\n  if(index == -1){\n\
    \    return [];\n  }\n  output.push(smallestEven);\n  output.push(index);\n  return\
    \ output;\n}", "\t\n\tvar evens = [];\n\tvar index = [];\n\tvar small = 0;\n\t\
    for(var i = 0; i < arr.length; i++){\n\t\tif(arr[i] % 2 === 0){\n\t\t\tevens.push(arr[i]);\n\
    \t\t\tindex.push(i);\n\t\t}\n\t}\n\tif(evens.length === 0){\n\t\treturn [];\n\t\
    }\n\tsmall = evens[0];\n\tfor(var j = 0; j < evens.length; j++){\n\t\tif(evens[j]\
    \ < small){\n\t\t\tsmall = evens[j];\n\t\t}\n\t}\n\tvar result = [small, index[evens.indexOf(small)]];\n\
    \treturn result;\n}\n", "    var evens = [];\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            evens.push([arr[i], i]);\n\
    \        }\n    }\n    if(evens.length > 0){\n        var smallest = evens[0];\n\
    \        for(var i = 1; i < evens.length; i++){\n            if(evens[i][0] <\
    \ smallest[0]){\n                smallest = evens[i];\n            }\n       \
    \ }\n        return smallest;\n    } else {\n        return [];\n    }\n}", " \
    \ let result = [];\n  let values = [];\n  let even = arr.map(function(v){\n  \
    \  if(v % 2 === 0){\n      values.push(v);\n    }\n  });\n  if(values.length ===\
    \ 0){\n    return [];\n  }\n  let min = Math.min(...values);\n  for(let i = 0;\
    \ i < arr.length; i++){\n    if(arr[i] === min){\n      result.push(min);\n  \
    \    result.push(i);\n      return result;\n    }\n  }\n  return result;\n}",
  "    let ans = []\n    let even_num = []\n    let index = []\n    if(arr.length\
    \ === 0){\n        return []\n    }\n    else{\n        for(let i = 0; i < arr.length;\
    \ i++){\n            if(arr[i] % 2 === 0){\n                even_num.push(arr[i])\n\
    \                index.push(i)\n            }\n        }\n        let smallest_even\
    \ = Math.min(...even_num)\n        let smallest_index = index[even_num.indexOf(smallest_even)]\n\
    \        ans.push(smallest_even)\n        ans.push(smallest_index)\n        return\
    \ ans\n    }\n}\n\nlet arr = [1,2,3,4,5,6,7,8,9,10]\nlet ans = pluck(arr)", " \
    \   if(arr.length === 0){\n        return []\n    }\n    if(arr.every(x => x %\
    \ 2 === 1)){\n        return []\n    }\n    const even = arr.filter(x => x % 2\
    \ === 0)\n    const min = Math.min(...even)\n    const index = arr.indexOf(min)\n\
    \    return [min, index]\n}\n", "  if (arr.length == 0) return [];\n  let minEven\
    \ = null;\n  let minEvenIndex = null;\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] % 2 == 0) {\n      if (minEven == null || arr[i] < minEven)\
    \ {\n        minEven = arr[i];\n        minEvenIndex = i;\n      }\n    }\n  }\n\
    \  if (minEven == null) return [];\n  return [minEven, minEvenIndex];\n}", " \
    \   //your code here\n    const smallestEvenNode = findSmallestEvenNode(arr);\n\
    \    if(smallestEvenNode){\n        const index = arr.indexOf(smallestEvenNode);\n\
    \        return [smallestEvenNode, index];\n    }\n    return [];\n}\n", "\treturn\
    \ arr.reduce((l, num, i) => {\n\t\tif(num % 2 !== 0) return l;\n\t\tif(l[0] ===\
    \ undefined || num < l[0]) return [num, i];\n\t\treturn l;\n\t}, []);\n}", " \
    \ if (arr.length === 0) return [];\n  var evens = [];\n  for (var i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0) evens.push(arr[i]);\n  }\n  if (evens.length\
    \ === 0) return [];\n  return [min(evens), arr.indexOf(min(evens))];\n}\n", " \
    \   // your code here\n    let res = [];\n    if(arr.length === 0){\n        return\
    \ res;\n    }\n    let min = Math.min(...arr);\n    if(min%2 != 0){\n        return\
    \ res;\n    }\n    for(let i =0; i<arr.length; i++){\n        if(arr[i]%2 ===\
    \ 0){\n            res.push(arr[i], i);\n            break;\n        }\n    }\n\
    \    return res;\n}", "\tif(arr.length == 0) return [];\n\tvar smallest = arr[0];\n\
    \tvar index = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tif(arr[i] % 2 ===\
    \ 0 && arr[i] < smallest){\n\t\t\tsmallest = arr[i];\n\t\t\tindex = i;\n\t\t}\n\
    \t}\n\tif(smallest % 2 === 0) return [smallest, index];\n\treturn [];\n}", " \
    \ let evenArr = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2\
    \ === 0){\n      evenArr.push(arr[i]);\n    }\n  }\n  if(evenArr.length === 0){\n\
    \    return [];\n  }\n  let smallestValue = evenArr[0];\n  let smallestValueIndex\
    \ = 0;\n  for(let i = 0; i < evenArr.length; i++){\n    if(evenArr[i] < smallestValue){\n\
    \      smallestValue = evenArr[i];\n      smallestValueIndex = i;\n    }\n  }\n\
    \  return [smallestValue, smallestValueIndex];\n}\n", "    let evenNumbers = [];\n\
    \    let evenNumbersIndex = [];\n    let result = [];\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evenNumbers.push(arr[i]);\n\
    \            evenNumbersIndex.push(i);\n        }\n    }\n    if(evenNumbers.length\
    \ === 0){\n        return [];\n    }\n    let minNumber = Math.min(...evenNumbers);\n\
    \    result.push(minNumber);\n    result.push(evenNumbersIndex[evenNumbers.indexOf(minNumber)]);\n\
    \    return result;\n}\n", "    if(!arr.length){\n        return [];\n    }\n\
    \    let even = arr.findIndex(el => el % 2 === 0);\n    if(even === -1){\n   \
    \     return [];\n    }\n    for(let i = even; i < arr.length; i++){\n       \
    \ if(arr[i] % 2 === 0 && arr[i] < arr[even]){\n            even = i;\n       \
    \ }\n    }\n    return [arr[even], even];\n}\n", "    var evenArr = [];\n    var\
    \ indexArr = [];\n    var valueArr = [];\n    var min = Infinity;\n    var index\
    \ = -1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            evenArr.push(arr[i]);\n            indexArr.push(i);\n        }\n\
    \    }\n    if(evenArr.length > 0){\n        for(var j = 0; j < evenArr.length;\
    \ j++){\n            if(evenArr[j] < min){\n                min = evenArr[j];\n\
    \                index = indexArr[j];\n            }\n        }\n        valueArr.push(min);\n\
    \        valueArr.push(index);\n    }\n    return valueArr;\n}\n", "    if(arr.length\
    \ < 1) return [];\n    let minIdx = 0;\n    let minValue = -1;\n    for(let i\
    \ = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && (minValue === -1\
    \ || arr[i] < minValue)){\n            minValue = arr[i];\n            minIdx\
    \ = i;\n        }\n    }\n    return [minValue, minIdx];\n}\n\nmodule.exports\
    \ = {\n    pluck: pluck,\n    attendance: \"much students, very wow\" \n}", " \
    \   let minEven = 0;\n    let result = [];\n    if (arr.length === 0){\n     \
    \   return result;\n    }\n    else{\n        for (let i = 0; i < arr.length;\
    \ i++){\n            if (arr[i] % 2 === 0){\n                minEven = arr[i];\n\
    \                result.push(minEven);\n                result.push(i);\n    \
    \            break;\n            }\n        }\n        for (let i = 0; i < arr.length;\
    \ i++){\n            if (arr[i] % 2 === 0 && arr[i] < minEven){\n            \
    \    minEven = arr[i];\n                result.pop();\n                result.pop();\n\
    \                result.push(minEven);\n                result.push(i);\n    \
    \        }\n        }\n        if (result.length === 0){\n            return result;\n\
    \        }\n        else{\n            return result;\n        }\n    }\n}", " \
    \ if(arr.length == 0)\n    return [];\n  var evens = [];\n  var ind = 0;\n  arr.forEach(function(item,index){\n\
    \    if(item%2==0){\n      evens.push(item);\n      ind = index;\n    }\n  });\n\
    \  if(evens.length == 0)\n    return [];\n  var smallest = evens[0];\n  evens.forEach(function(num){\n\
    \    if(num < smallest)\n      smallest = num;\n  });\n  return [smallest,ind];\n\
    }\n", "  const evens = arr.filter(x => x % 2 === 0);\n  const smallestEven = evens.sort((a,\
    \ b) => a - b)[0];\n  if(!smallestEven) return [];\n  const index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n", "  var even = [];\n  var index = [];\n\
    \  for(var i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n      even.push(arr[i]);\n\
    \      index.push(i);\n    }\n  }\n  if(even.length === 0){\n    return [];\n\
    \  }\n  var smallest = even[0];\n  var smallestIndex = index[0];\n  for(var j\
    \ = 0; j < even.length; j++){\n    if(even[j] < smallest){\n      smallest = even[j];\n\
    \      smallestIndex = index[j];\n    }\n  }\n  return [smallest, smallestIndex];\n\
    }\nvar nodes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];", "    // ...\n}\n", "  var even\
    \ = arr.filter(function(node) {\n    return node % 2 === 0;\n  });\n  if (even.length\
    \ === 0) {\n    return [];\n  }\n  var smallestEven = even.reduce(function(prev,\
    \ curr) {\n    return prev < curr ? prev : curr;\n  });\n  var index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}", "  var smallest;\n  var arrOfEven = arr.filter(function(num){\n\
    \    return num % 2 === 0;\n  });\n  if(arrOfEven.length > 0){\n    smallest =\
    \ arrOfEven.reduce(function(a,b){\n      return Math.min(a,b);\n    });\n    return\
    \ [smallest, arr.indexOf(smallest)];\n  }\n  return [];\n}\n", "  var results\
    \ = [], smallest = 100001, smallestIndex = -1;\n  for(var i = 0; i < arr.length;\
    \ i++){\n    if(arr[i] % 2 === 0 && arr[i] < smallest){\n      smallest = arr[i];\n\
    \      smallestIndex = i;\n    }\n  }\n  if(smallestIndex > -1){\n    results.push(smallest);\n\
    \    results.push(smallestIndex);\n  }\n  return results;\n}", "    let minEven\
    \ = 0;\n    let minIndex = 0;\n    for(let i = 0; i < arr.length; i++){\n    \
    \    if(arr[i] % 2 === 0){\n            if(minEven === 0){\n                minEven\
    \ = arr[i];\n                minIndex = i;\n            }\n            else if(arr[i]\
    \ < minEven){\n                minEven = arr[i];\n                minIndex = i;\n\
    \            }\n        }\n    }\n    if(minEven === 0){\n        return [];\n\
    \    }\n    return [minEven, minIndex];\n}\n", "   return (arr.reduce((acc,cur,idx)=>{\n\
    \     if(cur%2===0){\n       acc.push([cur,idx])\n     }\n     return acc\n  \
    \ },[]).sort((a,b)=>a[0]-b[0])[0]||[])\n}\n", "    if(!arr.length) return []\n\
    \    let evenArr = arr.filter(x => x % 2 === 0)\n    if(!evenArr.length) return\
    \ []\n    let index = arr.indexOf(Math.min(...evenArr))\n    return [Math.min(...evenArr),\
    \ index]\n}", "    // your code here\n    let index_of_min = null;\n    let min\
    \ = null;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2\
    \ === 0 && (min === null || arr[i] < min)) {\n            min = arr[i];\n    \
    \        index_of_min = i;\n        }\n    }\n    if (min === null) {\n      \
    \  return [];\n    }\n    return [min, index_of_min];\n}\n", "  // Map array to\
    \ new array containing only even values\n  let evens = arr.map(val => val % 2\
    \ === 0 ? val : null)\n  // Filter out nulls\n  evens = evens.filter(val => val\
    \ !== null)\n  // Sort array from smallest to largest\n  evens.sort((a, b) =>\
    \ a - b)\n  // Return the first even value's index and the value itself in an\
    \ array\n  if (evens.length !== 0) {\n    return [evens[0], arr.indexOf(evens[0])]\n\
    \  } else {\n    return []\n  }\n}\n", "  if(arr === undefined || arr.length ===\
    \ 0) return [];\n  let evenArray = arr.filter(function(num){\n    return num %\
    \ 2 === 0;\n  });\n  if(evenArray.length === 0) return [];\n  let smallest = evenArray[0];\n\
    \  let index = arr.indexOf(smallest);\n  for(let i = 1; i < evenArray.length;\
    \ i++){\n    if(evenArray[i] < smallest){\n      smallest = evenArray[i];\n  \
    \    index = arr.indexOf(smallest);\n    }\n  }\n  return [smallest, index];\n\
    }\n", "  const even = arr.find(item => item % 2 === 0);\n  if (even === undefined)\
    \ return [];\n  return [even, arr.indexOf(even)];\n}\n\nconst pluck = a => {\n\
    \  let e = -1, i = -1;\n  for (j = 0; j < a.length; j++) {\n    if (a[j] % 2 ==\
    \ 0 && (i == -1 || a[j] < e)) {\n      e = a[j];\n      i = j;\n    }\n  }\n \
    \ return [e, i];\n}\n\nconst pluck = a => {\n  let e = -1, i = -1;\n  for (j =\
    \ 0; j < a.length; j++) {\n    if (a[j] % 2 == 0 && (i == -1 || a[j] < e)) {\n\
    \      e = a[j];\n      i = j;\n    }\n  }\n  return [e, i];\n}\n", "    //sort\
    \ the array and find the first even value\n    var s = arr.sort(function(a,b){return\
    \ a-b});\n    var index = 0;\n    for(var i = 0; i < s.length; i++){\n       \
    \ if(s[i] % 2 == 0){\n            index = i;\n            break;\n        }\n\
    \    }\n    //pluck the even value, if there are no even values or the array is\
    \ empty return []\n    if(index == 0 && s[index] % 2 != 0){\n        return [];\n\
    \    }\n    else{\n        return [s[index],index];\n    }\n}\n", "  return arr.map((node,\
    \ index) => [node, index]).filter(item => item[0] % 2 === 0).sort((a, b) => a[0]\
    \ - b[0])[0] || [];\n}\n", "    if (arr.length === 0) {\n        return [];\n\
    \    }\n    // find all evens\n    let evens = arr.filter(e => e % 2 === 0);\n\
    \    // if none return [], else find lowest value, find lowest index\n    let\
    \ evenVal = evens.length === 0 ? [] : evens.reduce((a, b) => Math.min(a, b));\n\
    \    let evenIndex = arr.indexOf(evenVal);\n    return [evenVal, evenIndex];\n\
    }\n", "  let copy = arr.slice();\n  let sorted = copy.sort(function(a,b){\n  \
    \  return a - b;\n  });\n  let evens = sorted.filter(function(num){\n    return\
    \ num % 2 === 0;\n  });\n  if(evens.length === 0){\n    return [];\n  }\n  let\
    \ smallest = evens[0];\n  let index = copy.indexOf(smallest);\n  return [smallest,\
    \ index];\n}", "    var even = [];\n    var n = 0;\n    var count = 0;\n    var\
    \ minimal;\n    if(arr.length === 0){\n        return [];\n    }\n    for(var\
    \ i = 0; i < arr.length; i++){\n        n = arr[i];\n        if(n % 2 === 0){\n\
    \            even.push(n);\n        }\n    }\n    minimal = Math.min.apply(null,\
    \ even);\n    for(var j = 0; j < arr.length; j++){\n        if(arr[j] === minimal){\n\
    \            count = j;\n            break;\n        }\n    }\n    return [minimal,\
    \ count];\n}\n", "    let smallestEven = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            smallestEven.push(arr[i]);\n\
    \        }\n    }\n    smallestEven.sort((a,b) => a - b);\n    let newArr = [];\n\
    \    newArr.push(smallestEven[0]);\n    newArr.push(arr.indexOf(smallestEven[0]));\n\
    \    return newArr;\n}\n", "    let evenNums = arr.filter(ele => ele % 2 === 0);\n\
    \    if (evenNums.length === 0) return [];\n    let smallestEvenNum = evenNums.reduce((a,b)\
    \ => a < b ? a : b);\n    let index = arr.indexOf(smallestEvenNum);\n    return\
    \ [smallestEvenNum, index];\n}\n", "    if(arr.length == 0){\n        return []\n\
    \    }\n    let smallest = 2 ** 63\n    let smallestIndex = 0\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0 && arr[i] < smallest){\n\
    \            smallest = arr[i]\n            smallestIndex = i\n        }\n   \
    \ }\n    if(smallest == 2 ** 63){\n        return []\n    }\n    return [smallest,\
    \ smallestIndex]\n}", "    let evenVal=[];\n    let index=[]\n    if(arr.length==0){\n\
    \        return [];\n    }\n    if(arr.length>10000 || arr.length<1){\n      \
    \  return \"Array out of bound\";\n    }\n    for(let i=0;i<arr.length;i++){\n\
    \        if(arr[i]%2==0){\n            evenVal.push(arr[i]);\n            index.push(i);\n\
    \        }\n    }\n    if(evenVal.length==0){\n        return [];\n    }\n   \
    \ let minIndex=index[0];\n    let min=evenVal[0];\n    for(let i=0;i<evenVal.length;i++){\n\
    \        if(evenVal[i]<min){\n            min=evenVal[i];\n            minIndex=index[i];\n\
    \        }\n    }\n    return [min,minIndex];\n}\n", "    let evens = []\n   \
    \ let idx = []\n    if(arr.length === 0){\n        return []\n    }\n    arr.forEach((e,i)=>{\n\
    \        if(e % 2 === 0){\n            evens.push(e)\n            idx.push(i)\n\
    \        }\n    })\n    if(evens.length === 0){\n        return []\n    }\n  \
    \  else{\n        evens.sort()\n        let smallest = evens[0]\n        let smallestIdx\
    \ = idx[evens.indexOf(smallest)]\n        return [smallest, smallestIdx]\n   \
    \ }\n}\n", "    return arr.reduce((p, c, i) => {\n        if(c%2 == 0 && p[0]\
    \ == undefined) {\n            p[0] = c;\n            p[1] = i;\n        }\n \
    \       if(c%2 == 0 && c < p[0]) {\n            p[0] = c;\n            p[1] =\
    \ i;\n        }\n        return p;\n    }, []);\n}\n", "  if(arr.length === 0)\
    \ {\n    return [];\n  }\n  var evenArr = arr.filter(function(val) {\n    return\
    \ val % 2 === 0;\n  });\n  if(evenArr.length === 0) {\n    return [];\n  }\n \
    \ var smallestEvenVal = evenArr.reduce(function(a, b) {\n    return Math.min(a,\
    \ b);\n  });\n  var smallestEvenValIndex = arr.indexOf(smallestEvenVal);\n  var\
    \ node = [smallestEvenVal, smallestEvenValIndex];\n  return node;\n}", "    let\
    \ evens = arr.filter(val => val % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let small = Math.min(...evens);\n    return [small, arr.indexOf(small)];\n\
    }\n", "  var min = Infinity;\n  var minIndex = 0;\n  var newArr = [];\n  if(arr.length\
    \ <= 0){\n    return newArr;\n  }\n  for(var i = 0; i < arr.length; i++){\n  \
    \  if(arr[i]%2 === 0 && arr[i] < min){\n      min = arr[i];\n      minIndex =\
    \ i;\n    }\n  }\n  if(min === Infinity){\n    return newArr;\n  }\n  newArr.push(min);\n\
    \  newArr.push(minIndex);\n  return newArr;\n}\n", "\tif (arr.length == 0) {\n\
    \t\treturn [];\n\t}\n\tvar smallestIndex = null;\n\tvar smallestValue = null;\n\
    \tfor (var i = 0; i < arr.length; i++) {\n\t\tif (arr[i] % 2 == 0 && arr[i] <\
    \ smallestValue) {\n\t\t\tsmallestIndex = i;\n\t\t\tsmallestValue = arr[i];\n\t\
    \t}\n\t}\n\tif (smallestIndex == null) {\n\t\treturn [];\n\t}\n\treturn [smallestValue,\
    \ smallestIndex];\n}", "  return arr.reduce((a, e, i) => {\n    if (e%2===0 &&\
    \ a[0]===undefined || e%2===0 && e<a[0]) {\n      a = [e, i];\n    }\n    return\
    \ a;\n  }, []);\n}\n", "    // find smallest even\n    // if there's no even,\
    \ return []\n    //\n    let smallestEven = arr.filter(v => !(v % 2)).sort((a,\
    \ b) => a - b)[0];\n    let index = arr.indexOf(smallestEven);\n    if (smallestEven\
    \ !== undefined) return [smallestEven, index];\n    return [];\n}", "    //Your\
    \ code here\n    let evenValues = []\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            evenValues.push(arr[i])\n        }\n\
    \    }\n    if(evenValues.length === 0){\n        return []\n    }\n    else{\n\
    \        let index = arr.indexOf(Math.min(...evenValues))\n        return [Math.min(...evenValues),\
    \ index]\n    }\n}\n", "\tif(arr.length === 0){\n\t\treturn [];\n\t}\n\tif(arr.find(num\
    \ => num % 2 === 0) === undefined){\n\t\treturn [];\n\t}\n\tconst evenArr = arr.filter(num\
    \ => num % 2 === 0);\n\tconst smallestEven = evenArr.reduce((acc, val) => acc\
    \ < val ? acc : val);\n\tconst smallestEvenIndex = arr.indexOf(smallestEven);\n\
    \treturn [smallestEven, smallestEvenIndex];\n}", "  var smalestEven;\n  var indexOfSmalestEven;\n\
    \  var result;\n  if (arr.length === 0){\n    return [];\n  }\n  for (var i =\
    \ 0; i < arr.length; i++){\n    if (arr[i] % 2 === 0){\n      if (typeof smalestEven\
    \ === 'undefined'){\n        smalestEven = arr[i];\n        indexOfSmalestEven\
    \ = i;\n      } else if (arr[i] < smalestEven){\n        smalestEven = arr[i];\n\
    \        indexOfSmalestEven = i;\n      }\n    }\n  }\n  if (typeof smalestEven\
    \ === 'undefined'){\n    return [];\n  }\n  result = [smalestEven, indexOfSmalestEven];\n\
    \  return result;\n}\n\nvar arr = [9, 6, 9, 5, 1, 0, 4, 5, 3, 3, 9, 5, 5, 8, 6,\
    \ 5, 2, 1, 7, 8, 2, 3, 7, 8, 3, 8, 7, 1, 8, 6, 7, 5, 2, 6, 7, 3, 3, 4, 2, 5, 2,\
    \ 4, 7, 5, 2, 4, 7, 1, 2, 6, 7, 5, 4, 1, 6, 5, 2, 3, 7, 4, 3, 3, 6, 4, 3, 3, 4,\
    \ 5, 2, 8, 7, 5, 1, 6, 8, 8, 2, 7, 6, 4, 1, 7, 6, 2, 5, 6, 0, 2, 4, 7, 3, 3, 3,\
    \ 6, 3, 3, 3, 6, 8, 8, 1, 7, 6, 1, 5, 7, 6, 4, 8, 7, 8, 8, 5, 7, 1, 4, 8, 7, 3,\
    \ 3, 3, 7, 6, 2, 1, 7, 6, 2, 4, 7, 3, 3, 3, 2, 7, 4, 5, 2, 4, 2, 5, 6, 3, 3, 5,\
    \ 7, 1, 3, 5, 7, 8, 8", "    var evenArray = [];\n    var i;\n    if(arr.length\
    \ === 0){\n        return [];\n    }\n    for(i = 0; i < arr.length; i++){\n \
    \       if(arr[i] % 2 === 0){\n            evenArray.push(arr[i]);\n        }\n\
    \    }\n    if(evenArray.length === 0){\n        return [];\n    }\n    var min\
    \ = evenArray[0];\n    var minIndex = 0;\n    for(i = 0; i < evenArray.length;\
    \ i++){\n        if(evenArray[i] < min){\n            min = evenArray[i];\n  \
    \          minIndex = i;\n        }\n    }\n    return [min, minIndex];\n}\n",
  "    let evenNums = [];\n    if (arr.length === 0) {\n        return [];\n    }\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n\
    \            evenNums.push(arr[i]);\n        }\n    }\n    if (evenNums.length\
    \ === 0) {\n        return [];\n    }\n    let min = Math.min(...evenNums);\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === min) {\n \
    \           return [min, i];\n        }\n    }\n}\n", "    let final=[];\n   \
    \ let even= [];\n    let arr1= arr.filter(x=>x%2===0);\n    if(arr1.length===0){\n\
    \        return final;\n    }else{\n        let num= arr1.reduce((a,b)=> a<b?a:b);\n\
    \        even.push(num);\n        for(let i=0; i<arr.length; i++){\n         \
    \   if(arr[i]===num){\n                even.push(i);\n                final.push(even);\n\
    \                return final;\n            }\n        }\n    }\n}", "    let\
    \ minEven = Infinity;\n    let minIndex = Infinity;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0 && arr[i] < minEven){\n            minEven\
    \ = arr[i];\n            minIndex = i;\n        }\n    }\n    if(minEven === Infinity){\n\
    \        return [];\n    }\n    return [minEven, minIndex];\n}\n", "    let evenNums\
    \ = arr.filter(n => n % 2 === 0)\n    if (evenNums.length === 0) return []\n \
    \   let smallestEven = evenNums.reduce((a,b) => a > b ? b : a)\n    return [smallestEven,\
    \ arr.indexOf(smallestEven)]\n}", "  let even = arr.filter(a => a % 2 === 0);\n\
    \  let index = arr.indexOf(Math.min(...even));\n  let res = [Math.min(...even),\
    \ index];\n  return res;\n}", "    if (arr.length < 1) return [];\n    var smallestValue\
    \ = arr[0];\n    var index = 0;\n    for (var i = 0; i < arr.length; i++) {\n\
    \        if (arr[i] % 2 === 0 && arr[i] < smallestValue) {\n            smallestValue\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if (smallestValue %\
    \ 2 !== 0) return [];\n    return [smallestValue, index];\n}\n", "  // Initialise\
    \ a variable for the minimum even value found\n  let minEven = Infinity;\n  //\
    \ Initialise a variable for the index of the minimum even value\n  let minEvenIndex\
    \ = -1;\n  // If the array is empty return an empty array\n  if (arr.length ===\
    \ 0) return [];\n  // Loop through the array\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    // If the value at the current index is an even number, and if it\
    \ is less than the minimum even value\n    if (arr[i] % 2 === 0 && arr[i] < minEven)\
    \ {\n      // Replace the minimum even value with the value at the current index\n\
    \      minEven = arr[i];\n      // Replace the minimum even index with the current\
    \ index\n      minEvenIndex = i;\n    }\n  }\n  // If the minimum even value is\
    \ still Infinity, there are no even values, so return an empty array\n  if (minEven\
    \ === Infinity) return [];\n  // Return an array containing the minimum even value\
    \ and the minimum even index\n  return [minEven, minEvenIndex];\n}", "    let\
    \ branch = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] %\
    \ 2 === 0){\n            branch.push([arr[i], i]);\n        }\n    }\n    return\
    \ branch.length > 0 ? branch.sort((a, b) => a[0] - b[0])[0] : [];\n}", "  if(arr.length\
    \ === 0) return [];\n  let evens = arr.filter(num => num % 2 === 0);\n  if(evens.length\
    \ === 0) return [];\n  let smallestEven = evens.reduce((acc, curr) => curr < acc\
    \ ? curr : acc);\n  let smallestEvenIndex = arr.indexOf(smallestEven);\n  return\
    \ [smallestEven, smallestEvenIndex];\n}", "    let evenNumbers = arr.filter(x\
    \ => x % 2 === 0);\n    let smallestEven = Math.min(...evenNumbers);\n    return\
    \ arr.includes(smallestEven) ? [smallestEven, arr.indexOf(smallestEven)] : [];\n\
    }\n", "  const evens = arr.filter(function(node){\n    return node.value % 2 ===\
    \ 0;\n  });\n  if (evens.length === 0) return [];\n  let smallest = evens[0];\n\
    \  for (let i = 1; i < evens.length; i++){\n    if (evens[i].value < smallest.value){\n\
    \      smallest = evens[i];\n    }\n  }\n  return [smallest.value, arr.indexOf(smallest)];\n\
    }\n", "    if(arr.length === 0){\n        return [];\n    }\n    var even = [];\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         even.push(arr[i]);\n        }\n    }\n    if(even.length === 0){\n \
    \       return [];\n    }\n    var smallest = even[0];\n    for(var x = 0; x <\
    \ even.length; x++){\n        if(even[x] < smallest){\n            smallest =\
    \ even[x];\n        }\n    }\n    var index = arr.indexOf(smallest);\n    return\
    \ [smallest, index];\n}", "    // create a list to collect the even values\n \
    \   let evens = [];\n    // create a list to collect the even values' indexes\n\
    \    let evensIndexes = [];\n    // if arr is empty or there is no even value\
    \ return empty list\n    if(arr.length == 0){\n        return [];\n    }\n   \
    \ for(let i = 0; i < arr.length; i++){\n        // if the current element is even\
    \ push it to the evens list and push its index to the evensIndexes list\n    \
    \    if(arr[i] % 2 == 0){\n            evens.push(arr[i]);\n            evensIndexes.push(i);\n\
    \        }\n    }\n    // if the evens list is empty return empty list\n    if(evens.length\
    \ == 0){\n        return [];\n    }\n    // find the lowest even value's index\n\
    \    let lowestEvenIndex = evensIndexes[0];\n    for(let i = 0; i < evensIndexes.length;\
    \ i++){\n        if(evensIndexes[i] < lowestEvenIndex){\n            lowestEvenIndex\
    \ = evensIndexes[i];\n        }\n    }\n    // return a list containing the lowest\
    \ even value and its index\n    return [arr[lowestEvenIndex], lowestEvenIndex];\n\
    }\n", "    var index = null, smallIndex = 10001, value = null;\n    for(var i\
    \ = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallIndex){\n\
    \            smallIndex = arr[i];\n            index = i;\n            value =\
    \ arr[i];\n        }\n    }\n    if(index == null){\n        return [];\n    }\n\
    \    return [value, index];\n}", "    var even = [],\n        res = [],\n    \
    \    i;\n    for(i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            even.push(arr[i]);\n        }\n    }\n    if(even.length === 0){\n\
    \        return [];\n    }\n    var smallest = Math.min.apply(null, even);\n \
    \   var index = arr.indexOf(smallest);\n    res.push(smallest);\n    res.push(index);\n\
    \    return res;\n}\n", "    // let a = arr.filter( e => e % 2 === 0);\n    //\
    \ let b = a.indexOf(Math.min(...a));\n    // return [Math.min(...a), b];\n   \
    \ let even = arr.filter( e => e % 2 === 0);\n    let min = Math.min(...even);\n\
    \    let minIndex = arr.indexOf(min);\n    return [min, minIndex];\n}", "\tvar\
    \ evens = [];\n\tvar min = Infinity;\n\tvar result = [];\n\tif(arr.length ===\
    \ 0){\n\t\treturn result;\n\t}\n\tfor(var i = 0; i < arr.length; i++){\n\t\tif(arr[i]\
    \ % 2 === 0){\n\t\t\tevens.push(arr[i]);\n\t\t}\n\t}\n\tfor(var i = 0; i < evens.length;\
    \ i++){\n\t\tif(evens[i] < min){\n\t\t\tmin = evens[i];\n\t\t}\n\t}\n\tif(min\
    \ === Infinity){\n\t\treturn result;\n\t}\n\tresult.push(min);\n\tresult.push(arr.indexOf(min));\n\
    \treturn result;\n}\n", "    let result = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            result.push(arr[i]);\n   \
    \     }\n    }\n    result.sort((a, b) => a - b);\n    if(result.length > 0){\n\
    \        let index = arr.indexOf(result[0]);\n        return [result[0], index];\n\
    \    }\n    return [];\n}\nlet test1 = [5,5,5,5,5,5,0,0,0,0,0,2,2,1,1,3,3,3,3,3,3,3,3,2,2,1,1,1,1,1,1,1,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5",
  "    let result = [];\n    let min = -1;\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            if(min === -1 || arr[i] < min){\n\
    \                min = arr[i];\n                result = [arr[i], i];\n      \
    \      }\n        }\n    }\n    return result;\n}\n", "  let evens = arr.filter(e\
    \ => e % 2 === 0);\n  let minEven = evens.reduce((a, b) => a < b ? a : b);\n \
    \ return [minEven, arr.indexOf(minEven)];\n}", "    if (arr.length === 0) {\n\
    \        return [];\n    }\n    let newArr = [];\n    let index = 0;\n    let\
    \ lowestValue = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ % 2 === 0) {\n            newArr.push(arr[i]);\n        }\n    }\n    if (newArr.length\
    \ > 0) {\n        lowestValue = Math.min(...newArr);\n        index = arr.indexOf(lowestValue);\n\
    \    }\n    return [lowestValue, index];\n}\n", "  var even = []\n  var last =\
    \ []\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n    \
    \  even.push(arr[i])\n      last.push(i)\n    }\n  }\n  if(even.length === 0){\n\
    \    return []\n  }\n  for(var j = 0; j < even.length; j++){\n    if(even[j] <\
    \ even[0]){\n      even[0] = even[j]\n    }\n  }\n  var smallest = even[0]\n \
    \ for(var k = 0; k < last.length; k++){\n    if(arr[last[k]] === smallest){\n\
    \      last[0] = last[k]\n    }\n  }\n  var index = last[0]\n  var list = [smallest,\
    \ index]\n  return list\n}\n", "    if(arr.length <= 0){\n        return [];\n\
    \    }\n    let even = false;\n    let currentEven = 10001;\n    let index = -1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         even = true;\n            if(arr[i] < currentEven){\n              \
    \  currentEven = arr[i];\n                index = i;\n            }\n        }\n\
    \    }\n    if(even){\n        return [currentEven, index];\n    }\n    return\
    \ [];\n}", "    // your code goes here\n    //let count = 0;\n    let smallest;\n\
    \    let smallestIndex;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            if(!smallest || arr[i] < smallest){\n             \
    \   smallest = arr[i];\n                smallestIndex = i;\n            }\n  \
    \      }\n    }\n    if(smallest){\n        return [smallest, smallestIndex];\n\
    \    }\n    return [];\n}", "  let evens = []\n  let index = []\n  let ans = []\n\
    \  if(arr.length === 0){\n    return []\n  }\n  for(let i = 0; i < arr.length;\
    \ i++){\n    if(arr[i] % 2 === 0){\n      evens.push(arr[i])\n      index.push(i)\n\
    \    }\n  }\n  if(evens.length === 0){\n    return []\n  }\n  else{\n    let min\
    \ = Math.min(...evens)\n    let ind = evens.indexOf(min)\n    ans.push(min)\n\
    \    ans.push(index[ind])\n    return ans\n  }\n}\n", "  var smallestEven = [];\n\
    \  arr.map(function(ele,idx){\n    if(ele%2===0){\n      if(smallestEven.length\
    \ === 0){\n        smallestEven = [ele,idx];\n      }else if(ele < smallestEven[0]){\n\
    \        smallestEven = [ele,idx];\n      }\n    }\n  });\n  return smallestEven;\n\
    }\npluck([1,2,3,4,5,6,7,8,9]);", "    var smallestEven = Infinity;\n    var smallestEvenIndex\
    \ = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0\
    \ && arr[i] < smallestEven){\n            smallestEven = arr[i];\n           \
    \ smallestEvenIndex = i;\n        }\n    }\n    if(smallestEven === Infinity){\n\
    \        return [];\n    }\n    return [smallestEven, smallestEvenIndex];\n}",
  "  let evenNums = arr.filter(e => e % 2 === 0)\n  if(evenNums.length === 0){\n \
    \   return []\n  }\n  let min = Math.min(...evenNums)\n  let index = arr.indexOf(min)\n\
    \  return [min, index]\n}", "    let evenArr = arr.filter(el => el % 2 === 0);\n\
    \    let minEven = evenArr.reduce((a, b) => Math.min(a, b));\n    let smallEvenIdx\
    \ = arr.indexOf(minEven);\n    return arr.length > 0 ? [minEven, smallEvenIdx]\
    \ : [];\n}\n", "  let evens = [];\n  for(let i = 0; i < arr.length; i++){\n  \
    \  if(arr[i] % 2 === 0){\n      evens.push([arr[i], i]);\n    }\n  }\n  if(evens.length\
    \ === 0){\n    return [];\n  }\n  let smallest = evens[0];\n  for(let j = 1; j\
    \ < evens.length; j++){\n    if(evens[j][0] < smallest[0]){\n      smallest =\
    \ evens[j];\n    }\n  }\n  return smallest;\n}\n", "  let smalest_value, index;\n\
    \  arr.forEach((e, i) => {\n    if (e % 2 === 0) {\n      if (smalest_value ===\
    \ undefined || e < smalest_value) {\n        smalest_value = e;\n        index\
    \ = i;\n      }\n    }\n  });\n  return smalest_value === undefined ? [] : [smalest_value,\
    \ index];\n}\n", "    let result = [];\n    let even = [];\n    if (arr.length\
    \ === 0){\n        return result;\n    }\n    for (let i = 0; i < arr.length;\
    \ i++){\n        if (arr[i] % 2 === 0){\n            even.push(arr[i]);\n    \
    \    }\n    }\n    if (even.length === 0){\n        return result;\n    }\n  \
    \  result.push(Math.min(...even));\n    result.push(arr.indexOf(Math.min(...even)));\n\
    \    return result;\n}\n", "  let evens = arr.filter(n => n % 2 === 0)\n  let\
    \ smallestEven = Math.min(...evens)\n  let index = arr.indexOf(smallestEven)\n\
    \  if (evens.length === 0) {\n    return []\n  } else {\n    return [smallestEven,\
    \ index]\n  }\n}\n", "  var i = 0;\n  var smallestEven = [99999,0];\n  if(!arr[0]){\n\
    \    return [];\n  }\n  for(i = 0; i < arr.length; i++){\n    if(arr[i] % 2 ===\
    \ 0 && arr[i] < smallestEven[0]){\n      smallestEven[0] = arr[i];\n      smallestEven[1]\
    \ = i;\n    }\n  }\n  if(smallestEven[0] === 99999){\n    return [];\n  }\n  return\
    \ smallestEven;\n}", "    const evens = arr.filter(node => node.value % 2 ===\
    \ 0);\n    if (evens.length === 0) return [];\n    const smallest = evens.reduce((a,\
    \ b) => a.value < b.value ? a : b);\n    return [smallest.value, arr.indexOf(smallest)];\n\
    }\n", "  // your code here\n  if(arr.length < 1) {\n    return [];\n  }\n  for(let\
    \ i = 0; i < arr.length; i++) {\n    if(arr[i] % 2 == 0) {\n      return [arr[i],\
    \ i];\n    }\n  }\n  return [];\n}", "  let smallIndex = null;\n  let smallVal\
    \ = null;\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n\
    \      if(smallVal === null){\n        smallVal = arr[i];\n        smallIndex\
    \ = i;\n      }\n      else if(arr[i] < smallVal){\n        smallVal = arr[i];\n\
    \        smallIndex = i;\n      }\n    }\n  }\n  if(smallVal === null){\n    return\
    \ [];\n  }\n  return [smallVal, smallIndex];\n}\npluck([1,2,3,4,5,6,7,8,9]);",
  "    let even = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            even.push(arr[i]);\n        }\n    }\n    if(even.length\
    \ === 0){\n        return [];\n    } else {\n        return [Math.min(...even),\
    \ arr.indexOf(Math.min(...even))];\n    }\n}", "  if(!arr.length) return [];\n\
    \  let min = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  for(let i = 0; i <\
    \ arr.length; i++){\n    if(arr[i] % 2 === 0 && arr[i] < min){\n      min = arr[i];\n\
    \      index = i;\n    }\n  }\n  return min === Number.MAX_SAFE_INTEGER ? [] :\
    \ [min, index];\n}\n", "    let smallestEven;\n    let smallestEvenIndex;\n  \
    \  arr.forEach((val, i) => {\n        if (val % 2 === 0 && smallestEven === undefined)\
    \ {\n            smallestEven = val;\n            smallestEvenIndex = i;\n   \
    \     } else if (val % 2 === 0 && val < smallestEven) {\n            smallestEven\
    \ = val;\n            smallestEvenIndex = i;\n        }\n    });\n    if (smallestEven\
    \ === undefined) {\n        return [];\n    }\n    return [smallestEven, smallestEvenIndex];\n\
    }\n", "    let even = false;\n    let evens = [];\n    let index = 0;\n    for(let\
    \ i=0; i<arr.length; i++){\n        if(arr[i]%2===0){\n            evens.push(arr[i]);\n\
    \            even = true;\n        }\n    }\n    if(even){\n        evens.sort((a,b)=>a-b);\n\
    \        for(let i=0; i<arr.length; i++){\n            if(arr[i] === evens[0]){\n\
    \                index = i;\n                break;\n            }\n        }\n\
    \        evens.push(index);\n        return evens;\n    }\n    return [];\n}",
  "    var evenArr = [];\n    var count = 0;\n    var smallestEven = 0;\n    var answer\
    \ = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            evenArr.push(arr[i]);\n        }\n    }\n    if(evenArr.length >\
    \ 0){\n        smallestEven = evenArr[0];\n        for(var j = 0; j < evenArr.length;\
    \ j++){\n            if(evenArr[j] < smallestEven){\n                smallestEven\
    \ = evenArr[j];\n            }\n        }\n        for(var k = 0; k < arr.length;\
    \ k++){\n            if(arr[k] === smallestEven){\n                answer.push(smallestEven);\n\
    \                answer.push(k);\n                break;\n            }\n    \
    \    }\n    }\n    return answer;\n}\n", "    var even = true;\n    var smallestEven\
    \ = 0;\n    var smallestEvenIndex = 0;\n    var smallIndex = 0;\n    var output\
    \ = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            if(even === true){\n                even = false;\n             \
    \   smallestEven = arr[i];\n                smallestEvenIndex = i;\n         \
    \   }else if(arr[i] < smallestEven){\n                smallestEven = arr[i];\n\
    \                smallestEvenIndex = i;\n            }\n        }\n    }\n   \
    \ if(even === true){\n        output = [];\n    }else{\n        output.push(smallestEven);\n\
    \        output.push(smallestEvenIndex);\n    }\n    return output;\n}", "  if(arr.length\
    \ === 0) return [];\n  var evens = [];\n  var index = [];\n  var smallest = [];\n\
    \  for(var i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n      evens.push(arr[i]);\n\
    \      index.push(i);\n    }\n  }\n  if(evens.length === 0) return [];\n  var\
    \ min = evens[0];\n  for(var j = 0; j < evens.length; j++){\n    if(evens[j] <\
    \ min){\n      min = evens[j];\n    }\n  }\n  for(var k = 0; k < evens.length;\
    \ k++){\n    if(evens[k] === min){\n      smallest.push(min);\n      smallest.push(index[k]);\n\
    \      return smallest;\n    }\n  }\n}", "    if (arr.length === 0) return [];\n\
    \    let smallest = Infinity;\n    let smallestIndex = -1;\n    for (let i = 0;\
    \ i < arr.length; i++) {\n        if (arr[i] < smallest && arr[i] % 2 === 0) {\n\
    \            smallest = arr[i];\n            smallestIndex = i;\n        }\n \
    \   }\n    if (smallest === Infinity) return [];\n    return [smallest, smallestIndex];\n\
    }", "    let smallest = [Infinity,0];\n    if(arr.length === 0) return [];\n \
    \   for(let i = 0; i < arr.length; i++){\n        if(arr[i]%2 === 0 && arr[i]\
    \ < smallest[0]){\n            smallest[0] = arr[i];\n            smallest[1]\
    \ = i;\n        }\n    }\n    if(smallest[0] === Infinity) return [];\n    return\
    \ smallest;\n}", "\tlet even = arr.filter( e => e % 2 === 0 );\n\tlet smallest\
    \ = even.reduce( (a, b) => Math.min(a, b) );\n\tlet index = arr.indexOf(smallest);\n\
    \tlet result = [smallest, index];\n\treturn result;\n}", "    //find the nodes\
    \ that are even\n    let evenValues = arr.filter(x => x % 2 === 0);\n    if(evenValues.length\
    \ === 0){\n        return [];\n    }\n    //find the smallest even value\n   \
    \ let smallestEven = evenValues.reduce((a,b) => a < b ? a : b);\n    //find the\
    \ smallest even value index\n    let index = arr.indexOf(smallestEven);\n    //return\
    \ in list\n    return [smallestEven, index];\n}\npluck([1,2,3,4,5,6,7,8,9,10]);",
  "  if(arr.length < 1) return [];\n  let evens = arr.filter(num => num % 2 === 0);\n\
    \  let smallestEven = evens.sort((a,b) => a - b)[0];\n  if(evens.length === 0)\
    \ return [];\n  let index = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ index];\n}", "    if(arr.length === 0) return [];\n    let smallestEvenNode;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         if(!smallestEvenNode || arr[i] < smallestEvenNode[0]){\n           \
    \     smallestEvenNode = [arr[i], i];\n            }\n        }\n    }\n    return\
    \ smallestEvenNode ? smallestEvenNode : [];\n}\n", "  let minEven;\n  let minEvenIndex;\n\
    \  let minEvenValue;\n  arr.forEach((element, index) => {\n    if (element % 2\
    \ === 0 && (minEven === undefined || element < minEven)) {\n      minEven = element;\n\
    \      minEvenIndex = index;\n      minEvenValue = element;\n    }\n  });\n  return\
    \ minEven !== undefined ? [minEvenValue, minEvenIndex] : [];\n}\n", "  let result\
    \ = [];\n  let evens = [];\n  let index = arr.length - 1;\n  while(index >= 0){\n\
    \    if(arr[index] % 2 === 0){\n      evens.push(arr[index]);\n    }\n    index--;\n\
    \  }\n  let minEven = Math.min(...evens);\n  index = arr.indexOf(minEven);\n \
    \ result.push(minEven, index);\n  return result;\n}\n", "    let results = [];\n\
    \    // let evens = [];\n    let arrOfEvens = []\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            arrOfEvens.push(arr[i])\n\
    \        }\n    }\n    if(arrOfEvens.length === 0){\n        return results\n\
    \    }\n    let smallest = arrOfEvens[0]\n    for(let i = 0; i < arrOfEvens.length;\
    \ i++){\n        if(arrOfEvens[i] < smallest){\n            smallest = arrOfEvens[i]\n\
    \        }\n    }\n    results.push(smallest)\n    let index = arr.indexOf(smallest)\n\
    \    results.push(index)\n    return results\n}", "    if(arr.length <= 0){\n\
    \        return []\n    }\n    let evens = arr.filter(x => x % 2 === 0);\n   \
    \ if(evens.length === 0){\n        return []\n    }\n    let smallestEven = evens.reduce((a,\
    \ b) => Math.min(a, b));\n    return [ smallestEven, arr.indexOf(smallestEven)\
    \ ]\n}\n", "  var minEven,\n      minEvenIndex,\n      index = 0;\n  for(var value\
    \ of arr){\n    if(!minEven && value % 2 === 0){\n      minEven = value;\n   \
    \   minEvenIndex = index;\n    } else if(value % 2 === 0 && value < minEven){\n\
    \      minEven = value;\n      minEvenIndex = index;\n    }\n    index++;\n  }\n\
    \  return minEven ? [minEven, minEvenIndex] : [];\n}\n", "    let result = [];\n\
    \    let smallestEven = Infinity;\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0 && arr[i] < smallestEven){\n            smallestEven\
    \ = arr[i];\n            result[0] = smallestEven;\n            result[1] = i;\n\
    \        }\n    }\n    return result;\n}", "  let res = [];\n  let even = [];\n\
    \  if (arr.length == 0){\n    return res;\n  }\n  for (let i = 0; i < arr.length;\
    \ i++){\n    if (arr[i] % 2 == 0){\n      even.push(arr[i]);\n    }\n  }\n  if\
    \ (even.length == 0){\n    return res;\n  }\n  let min = even[0];\n  for (let\
    \ i = 0; i < even.length; i++){\n    if (even[i] < min){\n      min = even[i];\n\
    \    }\n  }\n  for (let i = 0; i < arr.length; i++){\n    if (arr[i] == min){\n\
    \      res.push(min);\n      res.push(i);\n      return res;\n    }\n  }\n}",
  "\tlet evens = arr.filter(num => num % 2 === 0);\n\tif (evens.length === 0) return\
    \ [];\n\tlet min = Math.min(...evens);\n\treturn [min, arr.indexOf(min)];\n}\n",
  "    let evenNums = []\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            evenNums.push(arr[i])\n        }\n    }\n    if(evenNums.length\
    \ === 0){\n        return []\n    }\n    let smallestEven = evenNums[0]\n    for(let\
    \ j = 0; j < evenNums.length; j++){\n        if(evenNums[j] < smallestEven){\n\
    \            smallestEven = evenNums[j]\n        }\n    }\n    return [arr.indexOf(smallestEven),\
    \ smallestEven]\n}", "  let toBeReturned = []\n  for(let i = 0; i < arr.length;\
    \ i++){\n    if(arr[i] % 2 === 0){\n      toBeReturned.push(arr[i])\n    }\n \
    \ }\n  if(toBeReturned.length === 0){\n    return []\n  } else {\n    let smallestEven\
    \ = Math.min(...toBeReturned)\n    let indexOfSmallestEven = arr.indexOf(smallestEven)\n\
    \    return [smallestEven, indexOfSmallestEven]\n  }\n}", "    var filtered =\
    \ arr.filter(function(num){\n        return num % 2 === 0;\n    });\n    if(filtered.length\
    \ === 0){\n        return [];\n    }\n    var smallestValue = Math.min.apply(null,\
    \ filtered);\n    var index = arr.indexOf(smallestValue);\n    return [smallestValue,\
    \ index];\n}\n", "  // ...\n  console.log(arr);\n  let index = arr.length;\n \
    \ let smallest = 0;\n  let answer = [];\n  if(arr.length === 0){\n    return [];\n\
    \  } else if(arr.length >= 1){\n    for(let i = 0; i < arr.length; i++){\n   \
    \   if(arr[i] % 2 === 0){\n        smallest = arr[i];\n        index = i;\n  \
    \      break;\n      }\n    }\n    for(let i = 0; i < arr.length; i++){\n    \
    \  if(arr[i] % 2 === 0 && arr[i] < smallest){\n        smallest = arr[i];\n  \
    \      index = i;\n      }\n    }\n    if(smallest === 0){\n      return [];\n\
    \    } else {\n      answer.push(smallest);\n      answer.push(index);\n     \
    \ return answer;\n    }\n  }\n}\n", "  var even = null,\n      evenI = null;\n\
    \  for(var i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n      if(even\
    \ === null){\n        even = arr[i];\n        evenI = i;\n      } else if(arr[i]\
    \ < even){\n        even = arr[i];\n        evenI = i;\n      }\n    }\n  }\n\
    \  if(even === null){\n    return [];\n  }\n  return [even, evenI];\n}", "   \
    \ if (arr.length === 0){\n        return [];\n    }\n    let minEven = 10001;\n\
    \    let minIndex = 0;\n    for (let i = 0; i < arr.length; i++){\n        if\
    \ (arr[i] % 2 === 0 && arr[i] < minEven){\n            minEven = arr[i];\n   \
    \         minIndex = i;\n        }\n    }\n    if (minEven === 10001){\n     \
    \   return [];\n    }\n    else {\n        return [minEven, minIndex];\n    }\n\
    }\nlet test = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100];",
  "\tvar index,\n\t\tvalue;\n\t\n\t// filter out odd numbers\n\tvar evens = arr.filter(function(val,\
    \ idx) {\n\t\tif (val % 2 === 0) {\n\t\t\tif (value === undefined || val < value)\
    \ {\n\t\t\t\tvalue = val;\n\t\t\t\tindex = idx;\n\t\t\t}\n\t\t\treturn true;\n\
    \t\t}\n\t});\n\t\n\treturn evens.length > 0 ? [value, index] : [];\n}\n", "  //your\
    \ code here\n}\n\nmodule.exports = {\n  pluck\n}", "  var even = true;\n  for(var\
    \ i = 0; i < arr.length; i++){\n    if(arr[i] % 2 == 0){\n      even = false;\n\
    \      break;\n    }\n  }\n  if(even == true){\n    return [];\n  }\n  var small\
    \ = arr[0];\n  var smallIdx = 0;\n  for(var i = 0; i < arr.length; i++){\n   \
    \ if(arr[i] % 2 == 0 && arr[i] < small){\n      small = arr[i];\n      smallIdx\
    \ = i;\n    }\n  }\n  return [small, smallIdx];\n}\n", "  var even = []\n  if(arr.length\
    \ == 0) return []\n  arr.forEach(function(e, i){\n    if(e % 2 == 0){\n      even.push([e,\
    \ i])\n    }\n  })\n  if(even.length == 0) return []\n  var min = even[0]\n  even.forEach(function(e){\n\
    \    if(e[0] < min[0]){\n      min = e\n    }\n  })\n  return min\n}\n", "   \
    \ var smallEven = 10000;\n    var index = 0;\n    var arrToReturn = []\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < smallEven){\n\
    \            smallEven = arr[i];\n            index = i;\n        }\n    }\n \
    \   if(smallEven === 10000){\n        return arrToReturn;\n    }\n    arrToReturn.push(smallEven);\n\
    \    arrToReturn.push(index);\n    return arrToReturn;\n}", "    var even = Infinity;\n\
    \    var index = -1;\n    for(var i = 0; i < arr.length; i++){\n        if(even\
    \ >= arr[i] && arr[i] % 2 === 0){\n            even = arr[i];\n            index\
    \ = i;\n        }\n    }\n    if(index !== -1){\n        return [even, index];\n\
    \    }\n    return [];\n}\n", "    if (arr.length == 0){\n        return [];\n\
    \    }\n    var evenArr = [];\n    for (var i = 0; i < arr.length; i++){\n   \
    \     if (arr[i] % 2 == 0){\n            evenArr.push(arr[i]);\n        }\n  \
    \  }\n    var min;\n    if (evenArr.length > 0){\n        min = evenArr[0];\n\
    \        for (var i = 0; i < evenArr.length; i++){\n            if (evenArr[i]\
    \ < min){\n                min = evenArr[i];\n            }\n        }\n    }\
    \ else {\n        return [];\n    }\n    var index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let\
    \ minEven = evens.length !== 0 ? Math.min(...evens) : undefined;\n    let index\
    \ = arr.indexOf(minEven);\n    return index === -1 ? [] : [minEven, index];\n\
    }\n", "    if (arr.length == 0){\n        return []\n    }\n    var minNode =\
    \ arr[0];\n    var evenArr = arr.filter(function(node){\n        return node %\
    \ 2 == 0;\n    });\n    var oddArr = arr.filter(function(node){\n        return\
    \ node % 2 != 0;\n    });\n    if (evenArr.length == 0){\n        return [];\n\
    \    }\n    minNode = evenArr[0];\n    var minIndex = 0;\n    for (var i = 0;\
    \ i < evenArr.length; i++){\n        if (evenArr[i] < minNode){\n            minNode\
    \ = evenArr[i];\n            minIndex = i;\n        }\n    }\n    return [minNode,\
    \ minIndex];\n}", "  var min = arr[0];\n  var min_index = 0;\n  for(var i = 0;\
    \ i < arr.length; i++){\n    if(arr[i] < min && arr[i] % 2 == 0){\n      min =\
    \ arr[i];\n      min_index = i;\n    }\n  }\n  if(min == 0){\n    min = arr[0];\n\
    \    min_index = 0;\n    for(var i = 0; i < arr.length; i++){\n      if(arr[i]\
    \ % 2 != 0){\n        min = arr[i];\n        min_index = i;\n      }\n    }\n\
    \  }\n  if(min % 2 == 0){\n    return [min, min_index];\n  }\n  else{\n    return\
    \ [];\n  }\n}\n", "  if (arr.length === 0) return [];\n  let evens = arr.filter(n\
    \ => n % 2 === 0);\n  if (evens.length === 0) return [];\n  let sorted = evens.sort((a,\
    \ b) => a - b);\n  return [sorted[0], arr.indexOf(sorted[0])];\n}\n", "    let\
    \ even = arr.map(e => e % 2 === 0);\n    if (even.includes(true)){\n        let\
    \ min = Math.min(...arr.filter(e => e % 2 === 0));\n        return [min, arr.indexOf(min)];\n\
    \    } else {\n        return [];\n    }\n}", "    let even = []\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i])\n\
    \        }\n    }\n    if(even.length === 0){\n        return []\n    }\n    let\
    \ smallest = even[0]\n    for(let i = 0; i < even.length; i++){\n        if(even[i]\
    \ < smallest){\n            smallest = even[i]\n        }\n    }\n    let index\
    \ = arr.indexOf(smallest)\n    return [smallest, index]\n}", "    var smallest\
    \ = [];\n    var smallest_index = 0;\n    for(var i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            if(smallest.length === 0){\n     \
    \           smallest.push(arr[i]);\n                smallest_index = i;\n    \
    \        }else if(arr[i] < smallest[0]){\n                smallest.pop();\n  \
    \              smallest.push(arr[i]);\n                smallest_index = i;\n \
    \           }\n        }\n    }\n    if(smallest.length === 0){\n        return\
    \ [];\n    }else{\n        return [smallest[0], smallest_index];\n    }\n}", " \
    \   let result = [];\n    if(arr.length === 0){\n        return result;\n    }\n\
    \    //find the smallest even and its index\n    let smallestEven = Infinity;\n\
    \    let smallestEvenIndex = 0;\n    arr.forEach((e, i) => {\n        if(e % 2\
    \ === 0 && e < smallestEven){\n            smallestEven = e;\n            smallestEvenIndex\
    \ = i;\n        }\n    });\n    //check if even exists\n    if(smallestEven ===\
    \ Infinity){\n        return result;\n    }\n    result.push(smallestEven);\n\
    \    result.push(smallestEvenIndex);\n    return result;\n}\n", "    var smallest\
    \ = null;\n    var idx = null;\n    for(var i = 0; i < arr.length; i++){\n   \
    \     if(arr[i] % 2 === 0){\n            if(smallest === null || arr[i] < smallest){\n\
    \                smallest = arr[i];\n                idx = i;\n            }\n\
    \        }\n    }\n    if(smallest === null){\n        return [];\n    }\n   \
    \ return [smallest, idx];\n}", "\tlet newArr = [];\n\tfor(let i = 0; i < arr.length;\
    \ i++){\n\t\tif(arr[i] % 2 === 0){\n\t\t\tnewArr.push(arr[i]);\n\t\t}\n\t}\n\t\
    if(newArr.length === 0){\n\t\treturn [];\n\t}\n\tlet smallest = Math.min(...newArr);\n\
    \tlet newNewArr = [];\n\tfor(let i = 0; i < arr.length; i++){\n\t\tif(arr[i] ===\
    \ smallest){\n\t\t\tnewNewArr.push(i);\n\t\t}\n\t}\n\treturn [smallest, Math.min(...newNewArr)];\n\
    }\npluck([9,2,1,8,7,6,3,4,5,0]); // [0, 9]\npluck([9,7,3,1,8,7,3,4,2,0]); // [2,\
    \ 8]\npluck([9,7,3,1,8,7,3,4,1,0]); // [0, 9]\npluck([4,9,7,3,1,8,7,3,4,2,0]);\
    \ // [2, 9]\npluck([4,9,7,3,1,8,7,3,4,2,2]); // [2, 8]\npluck([4,9,7,3,1,8,7,3,4,2,6]);\
    \ // [6, 10]\npluck([4,9,7,3,1,8,7,3,4,2,6,2]); // [2, 8]\npluck([2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
  "  let smallestValue = null;\n  let smallestIndex = null;\n  for(let i = 0; i <\
    \ arr.length; i++){\n    if(arr[i] % 2 === 0){\n      if(smallestValue === null\
    \ || arr[i] < smallestValue){\n        smallestValue = arr[i];\n        smallestIndex\
    \ = i;\n      }\n    }\n  }\n  if(smallestValue === null){\n    return [];\n \
    \ }\n  return [smallestValue, smallestIndex];\n}", "  //store all even values\n\
    \  let evens = [];\n  //store all even values indexes\n  let evenIndexes = [];\n\
    \  //loop through arr\n  for(let i = 0; i < arr.length; i++){\n    //if node is\
    \ even\n    if(arr[i] % 2 === 0){\n      //push value and index to respective\
    \ arrays\n      evens.push(arr[i]);\n      evenIndexes.push(i);\n    }\n  }\n\
    \  //if arrays have length\n  if(evens.length){\n    //find smallest even value\n\
    \    let min = Math.min(...evens);\n    //return min value and index of min value\n\
    \    return [min, evenIndexes[evens.indexOf(min)]];\n  }\n  //return empty array\
    \ if no evens found\n  return [];\n}", "\tvar evenValue=[];\n\tvar index=0;\n\t\
    for(i=0;i<arr.length;i++){\n\t\tif(arr[i]%2==0){\n\t\t\tevenValue.push(arr[i]);\n\
    \t\t\tindex=i;\n\t\t}\n\t}\n\tif(evenValue.length==0){\n\t\treturn [];\n\t}\n\t\
    else{\n\t\tvar smallest=evenValue[0];\n\t\tfor(j=0;j<evenValue.length;j++){\n\t\
    \t\tif(evenValue[j]<smallest){\n\t\t\t\tsmallest=evenValue[j];\n\t\t\t\tindex=j;\n\
    \t\t\t}\n\t\t}\n\t\treturn [smallest,index];\n\t}\n}\n", "  if (arr.length ===\
    \ 0) return [];\n  let even = arr.filter(n => n % 2 === 0);\n  if (even.length\
    \ === 0) return [];\n  let smallest = even.reduce((a, b) => a < b ? a : b);\n\
    \  return [smallest, arr.indexOf(smallest)];\n}\n", "  if(!arr.length){\n    return\
    \ [];\n  }\n  const evenNums = arr.filter(val => val % 2 === 0);\n  const smallestEven\
    \ = evenNums.length ? Math.min(...evenNums) : [];\n  const index = arr.indexOf(smallestEven);\n\
    \  return smallestEven && smallestEven.length ? [smallestEven, index] : [];\n\
    }\n", "  //if there are no even values\n  if(!arr.includes(0) && arr.filter(e\
    \ => e % 2 === 0).length === 0){\n    return [];\n  }\n  //if the given array\
    \ is empty\n  if(arr.length === 0){\n    return [];\n  }\n  let evenArr = arr.filter(e\
    \ => e % 2 === 0).sort((a,b) => a - b);\n  let smallestEven = evenArr[0];\n  return\
    \ [smallestEven, arr.indexOf(smallestEven)];\n}\n", "    let even = [];\n    let\
    \ odd = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 ===\
    \ 0){\n            even.push(arr[i]);\n        }else{\n            odd.push(arr[i]);\n\
    \        }\n    }\n    if(even.length === 0){\n        return [];\n    }\n   \
    \ for(let i = 0; i < even.length; i++){\n        for(let j = i + 1; j < even.length;\
    \ j++){\n            if(even[i] > even[j]){\n                let temp = even[i];\n\
    \                even[i] = even[j];\n                even[j] = temp;\n       \
    \     }\n        }\n    }\n    let idx = arr.indexOf(even[0]);\n    return [even[0],\
    \ idx];\n}", "    if(arr.length === 0){\n        return [];\n    }\n    // let\
    \ evens = [];\n    // for(let i = 0; i < arr.length; i++){\n    //     if(arr[i]\
    \ % 2 === 0){\n    //         evens.push([arr[i], i]);\n    //     }\n    // }\n\
    \    // if(evens.length === 0){\n    //     return [];\n    // }\n    // let min\
    \ = evens[0];\n    // for(let i = 1; i < evens.length; i++){\n    //     if(evens[i][0]\
    \ < min[0]){\n    //         min = evens[i];\n    //     }\n    // }\n    // return\
    \ min;\n    let minEven = Infinity;\n    let index;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0 && arr[i] < minEven){\n            minEven\
    \ = arr[i];\n            index = i;\n        }\n    }\n    if(minEven === Infinity){\n\
    \        return [];\n    }\n    return [minEven, index];\n}\n", "  var even =\
    \ [];\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n   \
    \   even.push(arr[i]);\n    }\n  }\n  if(even.length === 0){\n    return [];\n\
    \  }\n  var min = even[0];\n  for(var j = 0; j < even.length; j++){\n    if(even[j]\
    \ < min){\n      min = even[j];\n    }\n  }\n  var index = arr.indexOf(min);\n\
    \  return [min, index];\n}", "    if(arr.length < 1) return [];\n    let evenNums\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            evenNums.push(arr[i]);\n        }\n    }\n    if(evenNums.length\
    \ < 1) return [];\n    let min = Math.min(...evenNums);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}", "  if (arr.length <= 0) return [];\n  let smallest\
    \ = Number.MAX_SAFE_INTEGER;\n  let index = 0;\n  let evens = [];\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i]%2===0 && arr[i] < smallest) {\n\
    \      smallest = arr[i];\n      index = i;\n    }\n  }\n  return [smallest, index];\n\
    }\nmodule.exports = pluck;", "    if(arr.length === 0) return [];\n    var evenArr\
    \ = arr.filter(function(ele){\n        return ele % 2 === 0;\n    });\n    if(evenArr.length\
    \ === 0) return [];\n    var smallest = evenArr[0];\n    for(var i = 1; i < evenArr.length;\
    \ i++){\n        if(evenArr[i] < smallest){\n            smallest = evenArr[i];\n\
    \        }\n    }\n    var index = arr.indexOf(smallest);\n    var answer = [smallest,\
    \ index];\n    return answer;\n}\n", "    return [arr.indexOf(Math.min(...arr.filter(num\
    \ => num % 2 === 0))), Math.min(...arr.filter(num => num % 2 === 0))]\n}", " \
    \   var sEv = false;\n    var ind= false;\n    for(var i=0; i<arr.length; i++){\n\
    \        if(arr[i]%2==0){\n            if(sEv==false){\n                sEv =\
    \ arr[i];\n                ind = i;\n            }\n            else if(arr[i]<sEv){\n\
    \                sEv = arr[i];\n                ind = i;\n            }\n    \
    \    }\n    }\n    if(sEv!=false){\n        var ret = [];\n        ret.push(sEv);\n\
    \        ret.push(ind);\n        return ret;\n    }\n    else{\n        return\
    \ [];\n    }\n}\n", "  if(arr.length === 0) return [];\n  let result = [];\n \
    \ let evenNums = [];\n  let resultValue = 0;\n  let index = 0;\n  for(let i =\
    \ 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0) evenNums.push(arr[i]);\n\
    \  }\n  if(evenNums.length === 0) return [];\n  resultValue = evenNums[0];\n \
    \ for(let i = 0; i < evenNums.length; i++){\n    if(evenNums[i] < resultValue){\n\
    \      resultValue = evenNums[i];\n      index = i;\n    }\n  }\n  result.push(resultValue);\n\
    \  result.push(index);\n  return result;\n}\n", "    let indexes = [];\n    let\
    \ even = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2\
    \ === 0){\n            even.push(arr[i]);\n            indexes.push(i);\n    \
    \    }\n    }\n    even.sort((a,b) => a - b);\n    let min = even[0];\n    let\
    \ minIndex = indexes[0];\n    for(let i = 0; i < even.length; i++){\n        if(even[i]\
    \ === min){\n            minIndex = Math.min(indexes[i], minIndex);\n        }\n\
    \    }\n    return even.length === 0 ? [] : [min, minIndex];\n}\n", "\tif (arr.length\
    \ < 1) return [];\n\tvar evenArr = arr.filter(function(x){return x % 2 === 0});\n\
    \tif (evenArr.length < 1) return [];\n\tvar smalestEven = evenArr.reduce(function(a,b){return\
    \ a < b ? a : b;});\n\treturn [smalestEven, arr.indexOf(smalestEven)];\n}\n",
  "  if(arr.length === 0) return [];\n  let arrEven = [];\n  let index = -1;\n  for(let\
    \ i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n      arrEven.push(arr[i]);\n\
    \      index = i;\n    }\n  }\n  if(arrEven.length === 0) return [];\n  return\
    \ [Math.min(...arrEven), index];\n}", "  return arr.reduce((acc, item, index)\
    \ => {\n    if (item%2 === 0 && (item < acc[0] || acc[0] === undefined)) {\n \
    \     acc[0] = item;\n      acc[1] = index;\n    }\n    return acc;\n  }, []);\n\
    }", "  let evens = arr.map((num, i) => [num, i]).filter(e => e[0] % 2 === 0);\n\
    \  return evens.length === 0 ? [] : evens.reduce((min, curr) => min[0] < curr[0]\
    \ ? min : curr);\n}", "    if(!arr || arr.length === 0){\n        return [];\n\
    \    }\n    let evens = [];\n    for(let i = 0; i < arr.length; i++){\n      \
    \  if(arr[i] % 2 === 0){\n            evens.push([arr[i], i]);\n        }\n  \
    \  }\n    if(evens.length === 0){\n        return [];\n    }\n    evens.sort((a,\
    \ b) => {\n        if(a[0] === b[0]){\n            return a[1] - b[1];\n     \
    \   }\n        return a[0] - b[0];\n    });\n    return evens[0];\n}\n", "   \
    \ let min_even = Number.MAX_SAFE_INTEGER;\n    let min_even_index = -1;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i] < min_even){\n\
    \            min_even = arr[i];\n            min_even_index = i;\n        }\n\
    \    }\n    if(min_even_index === -1){\n        return [];\n    }\n    return\
    \ [min_even, min_even_index];\n}\n", "  if(arr.length === 0) return [];\n  var\
    \ evenArr = [];\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] % 2 ===\
    \ 0){\n      evenArr.push([arr[i], i]);\n    }\n  }\n  if(evenArr.length === 0)\
    \ return [];\n  return evenArr.sort(function(a, b){\n    if(a[0] === b[0]){\n\
    \      return a[1] - b[1];\n    }\n    return a[0] - b[0];\n  })[0];\n}\n", "\t\
    // console.log(arr);\n\tif (arr.length === 0) {\n\t\treturn [];\n\t}\n\tlet evens\
    \ = arr.filter( x => x % 2 === 0);\n\t// console.log(evens);\n\tif (evens.length\
    \ > 0) {\n\t\tlet sml = Math.min(...evens);\n\t\tlet idx = arr.indexOf(sml);\n\
    \t\t// console.log(sml, idx);\n\t\treturn [sml, idx];\n\t} else {\n\t\treturn\
    \ [];\n\t}\n\t// console.log(evens);\n}\n", "  if(arr.length===0 || !arr.some(a=>a%2===0))\
    \ return [];\n  const evens=arr.map((a,i)=>[a,i]).filter(a=>a[0]%2===0);\n  const\
    \ [v,i]=evens.reduce((p,c)=>p[0]<c[0]?p:c);\n  return [v,i];\n}\n", "  if (arr.length\
    \ === 0) return [];\n  let evens = arr.filter(num => num % 2 === 0).sort((a,b)\
    \ => a - b);\n  if (evens.length === 0) return [];\n  let smallestEven = evens[0];\n\
    \  return [smallestEven, arr.indexOf(smallestEven)];\n}\n", "    if (arr.length\
    \ == 0){\n        return [];\n    }\n    let even = false;\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minIndex = Number.MAX_SAFE_INTEGER;\n    for (let i = 0; i < arr.length;\
    \ i++){\n        if (arr[i] % 2 == 0){\n            even = true;\n           \
    \ if (arr[i] < min){\n                min = arr[i];\n                minIndex\
    \ = i;\n            } else if (arr[i] == min){\n                if (i < minIndex){\n\
    \                    minIndex = i;\n                }\n            }\n       \
    \ }\n    }\n    if (even){\n        return [min, minIndex];\n    } else {\n  \
    \      return [];\n    }\n}\n", "    let even = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n     \
    \   }\n    }\n    let smallestEven = Math.min(...even);\n    let result = [smallestEven,\
    \ arr.indexOf(smallestEven)];\n    if(result[0] == Infinity || result[1] == -1){\n\
    \        return [];\n    }\n    return result;\n}\n\nlet array = [3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,255,257,259,261,263,265,267,269,271,273,275,277,279,281,283,285,287,289,291,293,295,297,299,301,303,305,307,309,311,313,315,317,319,321,323,325,327,329,331,333,335,337,339,341,343,345,347,349,351,353,355,357,359,361,363,365,367,369,371,373,375,377,379,381,383,385,387,389",
  "    if(!arr || arr.length === 0){\n        return [];\n    }\n    let arr2 = arr.filter(x\
    \ => x % 2 === 0);\n    if(arr2.length === 0){\n        return [];\n    }\n  \
    \  let smallestEven = Math.min(...arr2);\n    let index = arr.indexOf(smallestEven);\n\
    \    return [smallestEven, index];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
