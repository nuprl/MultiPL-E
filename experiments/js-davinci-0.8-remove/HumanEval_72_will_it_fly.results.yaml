language: js
name: HumanEval_72_will_it_fly
results:
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tfunction\
    \ sum(q){\n\t\tvar p =0;\n\t\tfor(var i =0; i<q.length; i++){\n\t\t\tp+=q[i];\n\
    \t\t}\n\t\treturn p;\n\t}\n\tfunction palindrome(q){\n\t\tvar s = '';\n\t\tfor(var\
    \ i =0; i<q.length; i++){\n\t\t\ts+=q[i];\n\t\t}\n\t\tvar n = s.split('').reverse().join('');\n\
    \t\tif(s===n){\n\t\t\treturn true;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif(sum(q)<=w && palindrome(q)){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\
    \t}\n}\nwill_it_fly([3, 2, 3], 5);\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum\
    \ = 0;\n    let isBalanced = false;\n    let reverseArr = [];\n    //First check\
    \ if it's a palindrome\n    if(q.length === 1){\n        isBalanced = true;\n\
    \    }\n    else{\n        for(let i = q.length - 1; i >= 0; i--){\n         \
    \   reverseArr.push(q[i]);\n        }\n        for(let i = 0; i < q.length; i++){\n\
    \            if(q[i] === reverseArr[i]){\n                isBalanced = true;\n\
    \            }\n            else{\n                isBalanced = false;\n     \
    \           break;\n            }\n        }\n    }\n    //Then check if the sum\
    \ is less than or equal to the maximum possible weight\n    for(let i = 0; i <\
    \ q.length; i++){\n        sum += q[i];\n    }\n    if(sum <= w && isBalanced){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var result\
    \ = false;\n    var sum = 0;\n    for(var i = 0; i < q.length; i++){\n       \
    \ sum += q[i];\n    }\n    if(sum <= w){\n        var list = q.slice();\n    \
    \    var tmp = list.reverse();\n        var result2 = tmp.join(\"\");\n      \
    \  var result3 = list.join(\"\");\n        if(result2 == result3){\n         \
    \   result = true;\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_a7idb3j.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_a7idb3j.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum\
    \ = 0;\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n\
    \    if(sum <= w){\n        let isPal = true;\n        for(let i = 0; i < q.length;\
    \ i++){\n            if(q[i] != q[q.length - i - 1]){\n                isPal =\
    \ false;\n            }\n        }\n        if(isPal){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  return (check_balance(q)\
    \ && count(q) <= w)\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpjcgylujp.js:11\n  return (check_balance(q) && count(q) <= w)\n\
    \  ^\n\nReferenceError: check_balance is not defined\n    at will_it_fly (/tmp/tmpjcgylujp.js:11:3)\n\
    \    at test (/tmp/tmpjcgylujp.js:18:20)\n    at Object.<anonymous> (/tmp/tmpjcgylujp.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum\
    \ = 0;\n  for(let i=0; i<q.length; i++){\n    sum += q[i];\n  }\n  console.log(sum);\n\
    \  let reversed = q.slice(0).reverse();\n  let check = true;\n  for(let i=0; i<q.length;\
    \ i++){\n    if(q[i] !== reversed[i]){\n      check = false;\n    }\n  }\n  if(sum\
    \ <= w && check === true){\n    return true;\n  }\n  else{\n    return false;\n\
    \  }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '8

    3

    3

    8

    6

    5

    '
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var sum\
    \ = 0;\n  for(var i = 0; i < q.length; i++){\n    sum += q[i];\n  }\n  return\
    \ ((isPalindrome(q) && sum <= w) ? true : false);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpibqu1b97.js:15\n  return ((isPalindrome(q) && sum <= w) ? true\
    \ : false);\n  ^\n\nReferenceError: isPalindrome is not defined\n    at will_it_fly\
    \ (/tmp/tmpibqu1b97.js:15:3)\n    at test (/tmp/tmpibqu1b97.js:22:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpibqu1b97.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    //Write\
    \ your solution here\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2,\
    \ 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9w9wjs8q.js:19:10)\n \
    \   at Object.<anonymous> (/tmp/tmp9w9wjs8q.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if (q.length\
    \ === 0) return true;\n  if (q.reduce((a, b) => a + b) > w) return false;\n  let\
    \ p = [];\n  while (q.length !== 0) {\n    let value = q.shift();\n    p.push(value);\n\
    \    if (q.length === 0) break;\n    value = q.pop();\n    p.push(value);\n  }\n\
    \  return p.every((element, index) => element === p[p.length - 1 - index]);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpj62d29__.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpj62d29__.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var str\
    \ = q.join('');\n  var strReverse = q.reverse().join('');\n  var sum = q.reduce(function(a,\
    \ b) { return a + b; }, 0);\n  if (sum <= w && str == strReverse) {\n    return\
    \ true;\n  }\n  else {\n    return false;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\t// define\
    \ variables\n\tvar balanced = false;\n\tvar total_weight = 0;\n\t// loop through\
    \ array, check if number equal to its mirrored spot\n\tfor(var i = 0; i < q.length;\
    \ i++){\n\t\tif(q[i] == q[q.length - 1 - i]){\n\t\t\tbalanced = true;\n\t\t}\n\
    \t\telse{\n\t\t\tbalanced = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t// if balanced,\
    \ check sum of numbers\n\tif(balanced){\n\t\tfor(var i = 0; i < q.length; i++){\n\
    \t\t\ttotal_weight += q[i];\n\t\t}\n\t\t// if sum equals or less than weight limit\n\
    \t\tif(total_weight <= w){\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if(!Array.isArray(q)){\n\
    \        return false;\n    }\n    if(q.length <= 1){\n        return true;\n\
    \    }\n    var total = 0;\n    var reverse_array = [];\n    for(var i = q.length-1;\
    \ i >= 0; i--){\n        reverse_array.push(q[i]);\n        total += q[i];\n \
    \   }\n    if(total <= w && q.join('') === reverse_array.join('')){\n        return\
    \ true;\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let e =\
    \ q.slice(0)\n  let f = q.slice(0)\n  f.reverse()\n  e = e.join('')\n  f = f.join('')\n\
    \  let total = 0\n  for(let i = 0; i < q.length; i++){\n    total += q[i]\n  }\n\
    \  if(e === f && total <= w){\n    return true\n  }else{\n    return false\n \
    \ }\n}\nwill_it_fly([3,2,3], 10)\nwill_it_fly([3,2,1], 10)\nwill_it_fly([1,2],\
    \ 5)\nwill_it_fly([3], 10)\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2,\
    \ 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // return\
    \ true if the queue is balanced and sum of elements is < = max weight\n    //\
    \ balanced means palindrome\n    // true/false\n    // need to find the first\
    \ half of the queue\n    let count = q.length\n    let first_half = []\n    //\
    \ count will always be odd or even\n    // if it's odd, then count will be odd\
    \ and we can put half of it in first_half\n    if (count % 2 !== 0){\n       \
    \ first_half = q.slice(0, Math.floor(count/2))\n    }\n    // if it's even, we\
    \ can still put half of it in first_half\n    else{\n        first_half = q.slice(0,\
    \ count/2)\n    }\n    // need to reverse the queue\n    let reversed_q = q.reverse()\n\
    \    // slice from index 0 to the length of first_half\n    let second_half =\
    \ reversed_q.slice(0, first_half.length)\n    let sum = 0\n    // check to see\
    \ if first_half is the same as second_half\n    for (let i = 0; i < first_half.length;\
    \ i++){\n        if (first_half[i] !== second_half[i]){\n            return false\n\
    \        }\n        sum += first_half[i]\n    }\n    if (sum <= w){\n        return\
    \ true\n    }\n    return false\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum\
    \ = 0;\n    for(let e of q){\n        sum += e;\n    }\n    if(sum <= w){\n  \
    \      //console.log(w)\n        //console.log(sum)\n        let revlist = q.reverse();\n\
    \        //console.log(revlist)\n        if(q === revlist){\n            return\
    \ true;\n        }\n        else{\n            return false;\n        }\n    }\n\
    \    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo_m4y7eu.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpo_m4y7eu.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n   return\
    \ w >= sum(q) && q == q.reverse();\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6b9d0mcs.js:11\n   return w >= sum(q) && q == q.reverse();\n  \
    \ ^\n\nReferenceError: sum is not defined\n    at will_it_fly (/tmp/tmp6b9d0mcs.js:11:4)\n\
    \    at test (/tmp/tmp6b9d0mcs.js:18:20)\n    at Object.<anonymous> (/tmp/tmp6b9d0mcs.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum\
    \ = 0;\n  let reversed = q.slice().reverse();\n  for(let i = 0; i < q.length;\
    \ i++){\n    sum += q[i];\n    if(sum <= w && JSON.stringify(q) === JSON.stringify(reversed)){\n\
    \      return true;\n    }\n  }\n  return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var res\
    \ = [];\n    for(var i = 0; i < q.length; i++){\n        res.push(q[i]);\n   \
    \     var sum = 0;\n        for(var j = 0; j < res.length; j++){\n           \
    \ sum += res[j];\n        }\n        if(sum <= w && isPalindrome(res)){\n    \
    \        return true;\n        }\n    }\n    return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpunmuxia2.js:18\n        if(sum <= w && isPalindrome(res)){\n  \
    \             ^\n\nReferenceError: isPalindrome is not defined\n    at will_it_fly\
    \ (/tmp/tmpunmuxia2.js:18:16)\n    at test (/tmp/tmpunmuxia2.js:30:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpunmuxia2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tif (q.length\
    \ == 0) {\n\t\treturn true;\n\t}\n\tvar sum = 0;\n\tfor (var i = 0; i < q.length;\
    \ i++) {\n\t\tsum += q[i];\n\t}\n\tif (sum > w) {\n\t\treturn false;\n\t}\n\t\
    var is_palindrome = true;\n\tfor (var i = 0; i < Math.floor(q.length/2); i++)\
    \ {\n\t\tif (q[i] != q[q.length-1-i]) {\n\t\t\tis_palindrome = false;\n\t\t}\n\
    \t}\n\treturn is_palindrome;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // your\
    \ code goes here\n    var leftSum = 0;\n    var rightSum = 0;\n    for(var i =\
    \ 0; i < q.length; i++){\n        leftSum += q[i];\n        rightSum += q[q.length\
    \ - 1 - i];\n        if(leftSum == rightSum){\n            if(leftSum <= w){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpylchcnn7.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpylchcnn7.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum\
    \ = 0;\n    for(i in q){\n        sum += q[i];\n    }\n    if(sum > w) return\
    \ false;\n    let p = q.slice(0);\n    p.reverse();\n    let t = JSON.stringify(q);\n\
    \    let u = JSON.stringify(p);\n    if(t == u) return true;\n    return false;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tfor(var\
    \ i = 0; i < q.length; i++){\n\t\tvar sum = 0;\n\t\tsum += q[i];\n\t\tif(sum <=\
    \ w){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmph4zd6ks2.js:27:10)\n    at\
    \ Object.<anonymous> (/tmp/tmph4zd6ks2.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var qStr\
    \ = \"\";\n    var qSum = 0;\n    for(var i = 0; i < q.length; i++){\n       \
    \ qStr += q[i];\n        qSum += q[i];\n    }\n    if(qSum <= w && qStr == qStr.split(\"\
    \").reverse().join(\"\")){\n        return true;\n    }else{\n        return false;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\treturn (balanced(q)\
    \ && arraySum(q) <= w);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2,\
    \ 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp1x1rol99.js:11\n\treturn (balanced(q) && arraySum(q) <= w);\n\t\
    ^\n\nReferenceError: balanced is not defined\n    at will_it_fly (/tmp/tmp1x1rol99.js:11:2)\n\
    \    at test (/tmp/tmp1x1rol99.js:19:20)\n    at Object.<anonymous> (/tmp/tmp1x1rol99.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tvar p =\
    \ q.join('').split('');\n\tvar r = p.reverse();\n\tvar isPal = true;\n\tfor(var\
    \ i = 0; i < p.length; i++){\n\t\tif(p[i] !== r[i]){\n\t\t\tisPal = false;\n\t\
    \t}\n\t}\n\tif(isPal){\n\t\tvar sum = 0;\n\t\tfor(var x = 0; x < q.length; x++){\n\
    \t\t\tsum += q[x];\n\t\t}\n\t\tif(sum <= w){\n\t\t\treturn true;\n\t\t}\n\t}\n\
    \treturn false;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpt7l9v4yk.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpt7l9v4yk.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if (q.length\
    \ == 0){\n        return true;\n    }\n    if (q.length == 1){\n        return\
    \ q[0] <= w;\n    }\n    let left = q.slice(0, q.length / 2);\n    let right =\
    \ q.slice(q.length % 2 == 0 ? q.length / 2 : q.length / 2 + 1);\n    right.reverse();\n\
    \    if (!(left.join('') == right.join(''))){\n        return false;\n    }\n\
    \    let sub_result = [];\n    for (let i = 0; i < left.length; i++){\n      \
    \  sub_result.push(left[i] + right[i]);\n    }\n    let res = 0;\n    for (let\
    \ i = 0; i < sub_result.length; i++){\n        res += sub_result[i];\n    }\n\
    \    return res <= w;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2,\
    \ 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if (q.length\
    \ == 0) {\n        return true;\n    } else if (q.length == 1) {\n        return\
    \ q[0] <= w;\n    } else {\n        var is_balanced = true;\n        var r = q[0];\n\
    \        var i = 1;\n        while (is_balanced && i < q.length) {\n         \
    \   is_balanced = q[i] == r;\n            r = q[i];\n            i = i + 1;\n\
    \        }\n        return is_balanced && sum(q) <= w;\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8n6l14ws.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8n6l14ws.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if (q.length\
    \ === 0 || q.length === 1) return true;\n    let sum = 0;\n    for (let i = 0;\
    \ i < q.length; i++){\n        sum += q[i];\n    }\n    if (sum > w) return false;\n\
    \    let rev = q.slice().reverse();\n    return (q.toString() === rev.toString());\n\
    \  }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  return q.join('')\
    \ == q.reverse().join('') && q.reduce((a, b) => a + b) <= w\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  return q.length\
    \ <= w && w >= q.reduce((a, b) => a + b, 0) && (q.join('') === q.reverse().join(''));\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var _q =\
    \ q.slice(0);\n  var forward = _q.join('');\n  var backward = _q.reverse().join('');\n\
    \  if (forward == backward){\n    if (q.reduce(function(a, b){return a+b}) <=\
    \ w){\n      return true;\n    }\n  }\n  return false;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var sum\
    \ = 0;\n    for(var i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n\
    \    if(q[0] === q[q.length-1] && sum <= w){\n        return true;\n    }\n  \
    \  return false;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let max\
    \ = 0;\n    for(let i=0; i<q.length; i++){\n        max += q[i];\n    }\n    if(max\
    \ <= w){\n        if(q.join('') === q.reverse().join('')){\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let weightsSum\
    \ = 0;\n  for(let i = 0; i < q.length; i++){\n    weightsSum += q[i];\n  }\n \
    \ return weightsSum <= w && palindrome(q);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp577qhncj.js:15\n  return weightsSum <= w && palindrome(q);\n  \
    \                  ^\n\nReferenceError: palindrome is not defined\n    at will_it_fly\
    \ (/tmp/tmp577qhncj.js:15:21)\n    at test (/tmp/tmp577qhncj.js:22:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp577qhncj.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let t\
    \ = false;\n    let s = 0;\n    for(let i = 0; i < q.length; i++){\n        s\
    \ += q[i];\n    }\n    if(s <= w){\n        for(let i = 0; i < q.length; i++){\n\
    \            if(q[i] != q[q.length - i - 1]){\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    return false;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var sum\
    \ = 0;\n  var reverseArr = q.slice().reverse();\n  if(q.length == 0){\n    return\
    \ true;\n  }\n  for(var i = 0; i < q.length; i++){\n    sum += q[i];\n  }\n  if(sum\
    \ > w){\n    return false;\n  }\n  if(!isPalindrome(q)){\n    return false;\n\
    \  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2,\
    \ 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp47xtawp_.js:22\n  if(!isPalindrome(q)){\n  ^\n\nReferenceError:\
    \ isPalindrome is not defined\n    at will_it_fly (/tmp/tmp47xtawp_.js:22:3)\n\
    \    at test (/tmp/tmp47xtawp_.js:33:20)\n    at Object.<anonymous> (/tmp/tmp47xtawp_.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n     return\
    \ is_balanced(q) && sum_of_digits(q) <= w;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_n29gypg.js:11\n     return is_balanced(q) && sum_of_digits(q)\
    \ <= w;\n     ^\n\nReferenceError: is_balanced is not defined\n    at will_it_fly\
    \ (/tmp/tmp_n29gypg.js:11:6)\n    at test (/tmp/tmp_n29gypg.js:19:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp_n29gypg.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tlet sum=0;\n\
    \tlet list=q.slice();\n\tfor(let i=0;i<list.length;i++){\n\t\tsum+=list[i];\n\t\
    }\n\tlet left=0;\n\tlet right=list.length-1;\n\twhile(left<right){\n\t\tif(list[left]!=list[right]){\n\
    \t\t\treturn false;\n\t\t}\n\t\tleft++;\n\t\tright--;\n\t}\n\tif(sum<=w){\n\t\t\
    return true;\n\t}\n\treturn false;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum\
    \ = 0;\n    for(i in q){\n        sum += q[i];\n    }\n    if(sum > w){\n    \
    \    return false;\n    }\n    let firstHalf = q.slice(0,q.length/2);\n    let\
    \ secondHalf = q.slice(q.length/2);\n    if(q.length % 2 == 1){\n        secondHalf\
    \ = secondHalf.slice(1);\n    }\n    secondHalf = secondHalf.reverse();\n    for(i\
    \ in firstHalf){\n        if(firstHalf[i] != secondHalf[i]){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let fly\
    \ = true;\n    let sum = q.reduce((a, b) => a + b, 0);\n    for(let i = 0; i <\
    \ q.length; i++){\n        if(q[i] !== q[q.length - 1 - i]){\n            fly\
    \ = false;\n        }\n    }\n    if(sum > w){\n        fly = false;\n    }\n\
    \    return fly;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var temp\
    \ = q.slice();\n    var left = 0;\n    var right = q.length - 1;\n    var count\
    \ = 0;\n    var temp2 = w;\n    for(var i = 0; i < q.length; i++){\n        if(q[left]\
    \ != q[right]){\n            count++;\n        }\n        left++;\n        right--;\n\
    \    }\n    if(count == 0){\n        for(var i = 0; i < q.length; i++){\n    \
    \        temp2 -= q[i];\n        }\n        if(temp2 >= 0){\n            return\
    \ true;\n        }else{\n            return false;\n        }\n    }else{\n  \
    \      return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(is_palindrome(q)\
    \ && sum_of_elements(q) <= w){\n    return true;\n  }\n  return false;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmph1_gyt3d.js:11\n  if(is_palindrome(q) && sum_of_elements(q) <=\
    \ w){\n  ^\n\nReferenceError: is_palindrome is not defined\n    at will_it_fly\
    \ (/tmp/tmph1_gyt3d.js:11:3)\n    at test (/tmp/tmph1_gyt3d.js:22:20)\n    at\
    \ Object.<anonymous> (/tmp/tmph1_gyt3d.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if (q.length\
    \ % 2 === 0){\n      let half = q.length / 2;\n      let front = q.slice(0, half);\n\
    \      let back = q.slice(half);\n      back.reverse();\n      //console.log(front);\n\
    \      //console.log(back);\n      if (front.join('') === back.join('')){\n  \
    \      //console.log(q.join(''));\n        let sum = 0;\n        for (let i =\
    \ 0; i < q.length; i++){\n          sum += q[i];\n        }\n        //console.log(sum);\n\
    \        if (sum <= w){\n          return true;\n        }\n      }\n    } else\
    \ {\n      let half = Math.floor(q.length / 2);\n      let front = q.slice(0,\
    \ half);\n      let back = q.slice(half+1);\n      back.reverse();\n      //console.log(front);\n\
    \      //console.log(back);\n      if (front.join('') === back.join('')){\n  \
    \      //console.log(q.join(''));\n        let sum = 0;\n        for (let i =\
    \ 0; i < q.length; i++){\n          sum += q[i];\n        }\n        //console.log(sum);\n\
    \        if (sum <= w){\n          return true;\n        }\n      }\n    }\n \
    \   return false;\n  }\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    //write\
    \ your code here\n    var sum = 0;\n    for(var i = 0; i < q.length; i++){\n \
    \       sum += q[i];\n    }\n    if(sum <= w){\n        var initialArray = [];\n\
    \        var finalArray = [];\n        for(var j = 0; j < q.length; j++){\n  \
    \          initialArray.push(q[j]);\n        }\n        for(var k = q.length-1;\
    \ k >= 0; k--){\n            finalArray.push(q[k]);\n        }\n        if(initialArray.toString()\
    \ == finalArray.toString()){\n            return true;\n        }\n        else{\n\
    \            return false;\n        }\n    }\n    else{\n        return false;\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var sum\
    \ = 0;\n    for(var i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n\
    \    if(sum > w){\n        return false;\n    }\n    for(var i = 0; i < q.length;\
    \ i++){\n        if(q[i] != q[q.length - 1 - i]){\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if (q.length\
    \ == 0) return false;\n  let sum = 0;\n  for (let i = 0; i < q.length; i++){\n\
    \    sum += q[i];\n  }\n  return sum <= w && is_palindrome(q);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpocuad5xg.js:16\n  return sum <= w && is_palindrome(q);\n      \
    \       ^\n\nReferenceError: is_palindrome is not defined\n    at will_it_fly\
    \ (/tmp/tmpocuad5xg.js:16:14)\n    at test (/tmp/tmpocuad5xg.js:24:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpocuad5xg.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  return (is_balanced(q)\
    \ && (q.reduce((a,b)=>a+b) <= w)) ? true : false;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpt3fm2wix.js:11\n  return (is_balanced(q) && (q.reduce((a,b)=>a+b)\
    \ <= w)) ? true : false;\n  ^\n\nReferenceError: is_balanced is not defined\n\
    \    at will_it_fly (/tmp/tmpt3fm2wix.js:11:3)\n    at test (/tmp/tmpt3fm2wix.js:18:20)\n\
    \    at Object.<anonymous> (/tmp/tmpt3fm2wix.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Write\
    \ code here.\n    let sum = 0;\n    for(let i = 0; i < q.length; i++){\n     \
    \   sum += q[i];\n    }\n    if(is_palindrome(q) && sum <= w){\n        return\
    \ true;\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpdqga6q_c.js:16\n    if(is_palindrome(q) && sum <= w){\n    ^\n\n\
    ReferenceError: is_palindrome is not defined\n    at will_it_fly (/tmp/tmpdqga6q_c.js:16:5)\n\
    \    at test (/tmp/tmpdqga6q_c.js:26:20)\n    at Object.<anonymous> (/tmp/tmpdqga6q_c.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var isBalanced\
    \ = true;\n    if(q.length < 2){\n        return isBalanced;\n    }else{\n   \
    \     var arr = q.slice();\n        arr.sort(function(a, b){return a-b});\n  \
    \      if(arr[0] === 1 && arr[arr.length-1] === 1){\n            var wSum = arr.reduce(function(a,\
    \ b){return a+b});\n            if(wSum > w){\n                isBalanced = false;\n\
    \            }\n        }else{\n            isBalanced = false;\n        }\n \
    \   }\n    return isBalanced;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpl9lnb0qr.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpl9lnb0qr.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\t\tvar str\
    \ = q.join('');\n\t\tvar strRev = str.split('').reverse().join('');\n\t\tvar test\
    \ = 0;\n\t\t\n\t\tif(q.length === 1){\n\t\t\tif(q[0] <= w){\n\t\t\t\treturn true;\n\
    \t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}else{\n\t\t\t\tif(str === strRev){\n\
    \t\t\t\t\tfor(var i = 0; i < q.length; i++){\n\t\t\t\t\t\ttest += q[i];\n\t\t\t\
    \t\t}\n\t\t\t\t\tif(test <= w){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}else{\n\t\
    \t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\treturn false;\n\
    \t\t\t\t}\n\t\t}\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tif(q.length\
    \ === 0 || w<0){\n\t\treturn false;\n\t}\n\tvar sum = 0;\n\tfor(var i=0; i<q.length;\
    \ i++){\n\t\tsum += q[i];\n\t}\n\tif(sum <= w){\n\t\tvar left = 0;\n\t\tvar right\
    \ = q.length-1;\n\t\twhile(left<right){\n\t\t\tif(q[left] !== q[right]){\n\t\t\
    \t\treturn false;\n\t\t\t}\n\t\t\tleft++;\n\t\t\tright--;\n\t\t}\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2,\
    \ 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var list\
    \ = q.length;\n    var sum = 0;\n    for(var i = 0; i < list; i++){\n        sum\
    \ += q[i];\n    }\n    if(sum <= w){\n        if(q.join(\"\") === q.reverse().join(\"\
    \")){\n            return true;\n        }else{\n            return false;\n \
    \       }\n    }else{\n        return false;\n    }\n    \n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var sum\
    \ = 0;\n    for(var i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n\
    \    if(sum <= w){\n        return true;\n    }else{\n        return false;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfh7sqs0t.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpfh7sqs0t.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var sum\
    \ = 0;\n    for(var i = 0; i < q.length; i++){\n      sum += q[i];\n    }\n  \
    \  if(sum <= w && is_palindrome(q)){\n      return true;\n    }\n    return false;\n\
    \  }\n  console.log(will_it_fly([3,3,2],5));\n  function is_palindrome(a){\n \
    \   for(var i = 0; i < a.length/2; i++){\n      if(a[i] != a[a.length-1-i]){\n\
    \        return false;\n      }\n    }\n    return true;\n  }\n  console.log(is_palindrome([1,2,1]));\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    true

    '
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var palindrome\
    \ = isPalindrome(q);\n  var weight = lessOrEqual(q, w);\n  if (palindrome && weight){\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpdaf_vgfz.js:11\n  var palindrome = isPalindrome(q);\n         \
    \          ^\n\nReferenceError: isPalindrome is not defined\n    at will_it_fly\
    \ (/tmp/tmpdaf_vgfz.js:11:20)\n    at test (/tmp/tmpdaf_vgfz.js:25:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpdaf_vgfz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var sum=0,\n\
    \        boo=0;\n    if(q.length%2){\n        for(i=0;i<q.length/2;i++){\n   \
    \         if(q[i]==q[q.length-1-i]){\n                boo++;\n            }\n\
    \        }\n        if(boo==q.length/2){\n            for(i=0;i<q.length;i++){\n\
    \                sum+=q[i];\n            }\n            if(sum<=w){\n        \
    \        return true;\n            }\n            else{\n                return\
    \ false;\n            }\n        }\n        else{\n            return false;\n\
    \        }\n    }\n    else{\n        for(i=0;i<q.length/2;i++){\n           \
    \ if(q[i]==q[q.length-1-i]){\n                boo++;\n            }\n        }\n\
    \        if(boo==q.length/2){\n            for(i=0;i<q.length;i++){\n        \
    \        sum+=q[i];\n            }\n            if(sum<=w){\n                return\
    \ true;\n            }\n            else{\n                return false;\n   \
    \         }\n        }\n        else{\n            return false;\n        }\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz5qprs7r.js:61:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpz5qprs7r.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var sum\
    \ = 0;\n    var middle = Math.floor(q.length/2);\n    var palindrome = true;\n\
    \    for(var i = 0; i < middle; i++){\n        sum += q[i];\n        if(q[i] !=\
    \ q[q.length - i - 1]){\n            palindrome = false;\n        }\n    }\n \
    \   return palindrome && sum <= w;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\treturn q.reduce((a,b)=>a+b)<=w\
    \ && q.join('')==q.reverse().join('')\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum\
    \ = 0;\n    let reversed = '';\n    for(let i = 0; i < q.length; i++){\n     \
    \   sum += q[i];\n        reversed = q[i] + reversed;\n    }\n    if(w < sum){\n\
    \        return false;\n    }\n    else if(sum === reversed){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpo3onnj93.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpo3onnj93.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var weight\
    \ = 0;\n  var is_balanced = false;\n  var is_equal = false;\n  for(var i = 0;\
    \ i < q.length; i++){\n    weight += q[i];\n  }\n  if(weight <= w){\n    is_equal\
    \ = true;\n  }\n  if(q.join(\"\") === q.reverse().join(\"\")){\n    is_balanced\
    \ = true;\n  }\n  if(is_balanced === true && is_equal === true){\n    return true;\n\
    \  }\n  else {\n    return false;\n  }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if(q.length===0){\n\
    \        return false;\n    }\n    var left = 0;\n    var right = q.length-1;\n\
    \    var sum = 0;\n    while(left<right){\n        if(q[left]===q[right]){\n \
    \           sum+=q[left];\n            left++;\n            right--;\n       \
    \ }else{\n            return false;\n        }\n    }\n    if(left===right){\n\
    \        sum+=q[left];\n    }\n    if(sum<=w){\n        return true;\n    }else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let palin\
    \ = isPalindrome(q);\n  let sum = q.reduce((a, b) => a + b, 0);\n  if (palin ===\
    \ true && sum <= w){\n    return true;\n  }\n  else {\n    return false;\n  }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0cj8lidw.js:11\n  let palin = isPalindrome(q);\n              ^\n\
    \nReferenceError: isPalindrome is not defined\n    at will_it_fly (/tmp/tmp0cj8lidw.js:11:15)\n\
    \    at test (/tmp/tmp0cj8lidw.js:26:20)\n    at Object.<anonymous> (/tmp/tmp0cj8lidw.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var x\
    \ = q.length - 1;\n    var y = 0;\n    var sum = 0;\n    while (y <= x){\n   \
    \     sum += q[y];\n        if (sum > w){\n            return false;\n       \
    \ }\n        if (q[y] != q[x]){\n            return false;\n        }\n      \
    \  y += 1;\n        x -= 1;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var q2\
    \ = q.concat(q.slice().reverse()); // check if the sequence is palindromic\n \
    \   var s = 0;\n    for (var i = 0; i < q.length; i++){\n        s += q[i];\n\
    \    }\n    return (q2.toString() == q.toString() && s <= w);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1wmo9g80.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp1wmo9g80.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if (q.length\
    \ === 0) return true;\n  var sum = q.reduce(function(a, b) { return a + b; });\n\
    \  if (sum <= w && isPalindrome(q)) {\n    return true;\n  }\n  return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmprl2eu06o.js:13\n  if (sum <= w && isPalindrome(q)) {\n        \
    \  ^\n\nReferenceError: isPalindrome is not defined\n    at will_it_fly (/tmp/tmprl2eu06o.js:13:11)\n\
    \    at test (/tmp/tmprl2eu06o.js:24:20)\n    at Object.<anonymous> (/tmp/tmprl2eu06o.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // input\
    \ list and weight\n    // return boolean\n    let sum = 0;\n    for(let i = 0;\
    \ i < q.length; i++){\n        sum += q[i];\n    }\n    if(q.length > 0 && w >=\
    \ sum){\n        if(q.length % 2 === 0){\n            return false;\n        }\n\
    \        let left = q.slice(0, Math.floor(q.length/2));\n        let right = q.slice(Math.floor(q.length/2)\
    \ + 1, q.length);\n        for(let i = 0; i < left.length; i++){\n           \
    \ if(left[i] !== right[right.length - i - 1]){\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    return false;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    return\
    \ isBalanced(q) && sum(q) <= w;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp98d7a3x_.js:11\n    return isBalanced(q) && sum(q) <= w;\n    ^\n\
    \nReferenceError: isBalanced is not defined\n    at will_it_fly (/tmp/tmp98d7a3x_.js:11:5)\n\
    \    at test (/tmp/tmp98d7a3x_.js:19:20)\n    at Object.<anonymous> (/tmp/tmp98d7a3x_.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Write\
    \ your code here!\n    // object q will fly if it's balanced and the sum of its\
    \ elements <= w \n    // w = maximum possible weight\n    let sum = 0;\n    for\
    \ (i=0; i<q.length; i++){\n        sum += q[i];\n    }\n    let isPalindrome =\
    \ true;\n    for (j=0; j<q.length; j++){\n        if (q[j] != q[q.length - 1 -\
    \ j]){\n            isPalindrome = false;\n        }\n    }\n    if (sum <= w\
    \ && isPalindrome == true){\n        return true;\n    }\n    else {\n       \
    \ return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2,\
    \ 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let total\
    \ = 0;\n    let firstHalf = q.slice(0, q.length/2);\n    let secondHalf = q.slice(q.length/2,\
    \ q.length);\n    if(!isPalindrome(q)){\n        return false;\n    }\n    for(let\
    \ i = 0; i < q.length; i++){\n        total += q[i];\n    }\n    if(total > w){\n\
    \        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp2gryjmux.js:14\n    if(!isPalindrome(q)){\n    ^\n\nReferenceError:\
    \ isPalindrome is not defined\n    at will_it_fly (/tmp/tmp2gryjmux.js:14:5)\n\
    \    at test (/tmp/tmp2gryjmux.js:31:20)\n    at Object.<anonymous> (/tmp/tmp2gryjmux.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let q2 =\
    \ q.slice();\n  q2.push(q[0]);\n  console.log(q2);\n  let sum = 0;\n  for(let\
    \ i = 0; i < q.length; i++){\n    sum += q[i];\n  }\n  console.log(sum);\n  for(let\
    \ i = 0; i < q.length; i++){\n    if(q[i] !== q2[q.length - i]){\n      console.log(q[i],\
    \ q2[q.length - i]);\n      return false;\n    }\n  }\n  if(sum <= w){\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa2mmauh3.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpa2mmauh3.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 3, 2, 3, 3 ]

    8

    2 3

    '
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if(q.length\
    \ === 0){\n        return true;\n    }\n    var q_test = q.slice();\n    var q_test_2\
    \ = q.slice();\n    var half = q_test.length/2;\n    if(q_test.length % 2 !==\
    \ 0){\n        q_test.splice(half, 1);\n    }\n    var back = q_test.slice(-1);\n\
    \    var front = q_test.slice(0, -1);\n    for(var i = 0; i < half; i++){\n  \
    \      if(back[i] !== front[front.length - 1 - i]){\n            return false;\n\
    \        }\n    }\n    var sum = 0;\n    for(var j = 0; j < q_test_2.length; j++){\n\
    \        sum += q_test_2[j];\n    }\n    if(sum <= w){\n        return true;\n\
    \    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2,\
    \ 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var sum\
    \ = 0;\n  var clone = q.slice();\n  clone.reverse();\n  console.log(clone);\n\
    \  console.log(q);\n  if(q[0] === q[q.length-1]){\n    for(var i = 0; i < q.length;\
    \ i++){\n      sum += q[i];\n    }\n    if(sum <= w){\n      return true;\n  \
    \  }\n  }\n  return false;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 3, 2, 3 ]

    [ 3, 2, 3 ]

    [ 2, 1 ]

    [ 1, 2 ]

    [ 3 ]

    [ 3 ]

    [ 3, 2, 3 ]

    [ 3, 2, 3 ]

    [ 3, 2, 1 ]

    [ 1, 2, 3 ]

    [ 5 ]

    [ 5 ]

    '
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if(!q\
    \ || q.length == 0) return false;\n    if(q.length == 1) return q[0] <= w;\n \
    \   let sum = 0;\n    for(let i=0; i<q.length; i++){\n        sum += q[i];\n \
    \   }\n    if(sum > w) return false;\n    if(q.length == 2) return true;\n   \
    \ for(let i=0; i<q.length/2; i++){\n        if(q[i] != q[q.length-1-i]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpkxxktauo.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpkxxktauo.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\t//Code here!\n\
    \tlet sum = q.reduce((acc,elem)=>acc+elem,0);\n\tif(sum > w) return false;\n\t\
    if(q.length == 0) return true;\n\treturn q.join('') === q.reverse().join('');\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let evenArr\
    \ = q.slice(0, q.length/2)\n  let oddArr = q.slice(Math.ceil(q.length/2))\n  console.log(evenArr,\
    \ oddArr)\n  for(let i = 0; i < evenArr.length; i++){\n    if(evenArr[i] === oddArr[evenArr.length\
    \ - 1 - i]){\n      evenArr[i] + oddArr[evenArr.length - 1 - i] <= w ? console.log(true)\
    \ : console.log(false)\n    }\n  }\n}\nwill_it_fly([1, 2], 5)\nwill_it_fly([3,\
    \ 2, 3], 5)\nwill_it_fly([3, 2, 3], 6)\nwill_it_fly([3], 5)\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu5yv4pjb.js:29:10)\n \
    \   at Object.<anonymous> (/tmp/tmpu5yv4pjb.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 1 ] [ 2 ]

    [ 3 ] [ 3 ]

    false

    [ 3 ] [ 3 ]

    true

    [] []

    [ 3 ] [ 3 ]

    true

    '
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum=0\n\
    \    if(q.length % 2 == 0){\n      let qEven = q.slice(0, q.length/2)\n      for(let\
    \ i=0; i<qEven.length; i++){\n        sum+=qEven[i]\n      }\n      for(let j=q.length/2-1;\
    \ j>=0; j--){\n        sum+=q[j]\n      }\n      if(sum <= w){\n        return\
    \ true\n      }\n      else {\n        return false\n      }\n    }\n    else{\n\
    \      let qOdd = q.slice(0, (q.length-1)/2)\n      for(let i=0; i<qOdd.length;\
    \ i++){\n        sum+=qOdd[i]\n      }\n      for(let j=(q.length-1)/2; j>=0;\
    \ j--){\n        sum+=q[j]\n      }\n      if(sum <= w){\n        return true\n\
    \      }\n      else {\n        return false\n      }\n    }\n  }\n  console.log(will_it_fly([1,\
    \ 2], 5))\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzcogd4un.js:50:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpzcogd4un.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    '
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tif(!Array.isArray(q)){\n\
    \t\treturn false;\n\t}\n\tif(sum(q) <= w && is_palindrome(q)){\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2,\
    \ 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpncxrnx92.js:14\n\tif(sum(q) <= w && is_palindrome(q)){\n\t^\n\n\
    ReferenceError: sum is not defined\n    at will_it_fly (/tmp/tmpncxrnx92.js:14:2)\n\
    \    at test (/tmp/tmpncxrnx92.js:24:20)\n    at Object.<anonymous> (/tmp/tmpncxrnx92.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var sum\
    \ = 0;\n  var t = q.length;\n  for(var i = 0; i < t/2; i++){\n    if(q[i] == q[t-i-1]){\n\
    \      sum += q[i];\n    }else{\n      return false;\n    }\n  }\n  if(sum <=\
    \ w){\n    return true;\n  }else{\n    return false;\n  }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let t =\
    \ 0;\n  for(var i=0; i<q.length; i++){\n    t += q[i];\n  }\n  let str = q.join('');\n\
    \  let strreverse = q.reverse().join('');\n  if (t <= w && str === strreverse){\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    return\
    \ q.every(n => n <= w) && q.join('') === q.reverse().join('');\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n   let total\
    \ = q.reduce((acc, curr) => acc + curr);\n   if(total <= w && q.toString() ===\
    \ q.reverse().toString()){\n       return true;\n   }\n   return false;\n}\nwill_it_fly([1,2],\
    \ 5);\nwill_it_fly([1, 2, 3, 2, 3], 4);\nwill_it_fly([1, 2, 3, 2, 3], 5);\nwill_it_fly([1,\
    \ 2, 3], 3);\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822305
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var total\
    \ = 0;\n    var reverse = [];\n    var half = Math.floor(q.length/2);\n    for(var\
    \ i = 0; i < q.length; i++){\n        total += q[i];\n        reverse.unshift(q[i]);\n\
    \    }\n    if(reverse.length % 2 == 0){\n        if(total <= w && JSON.stringify(q.slice(0,\
    \ half)) == JSON.stringify(reverse.slice(0, half))){\n            return true;\n\
    \        }\n    }\n    else if(reverse.length % 2 == 1){\n        if(total <=\
    \ w && JSON.stringify(q.slice(0, half)) == JSON.stringify(reverse.slice(0, half\
    \ + 1))){\n            return true;\n        }\n    }\n    return false;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7sbclx5n.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7sbclx5n.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822305
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var sum\
    \ = 0\n    var arr = []\n    q.forEach(val => sum += val)\n    console.log(sum)\n\
    \    q.forEach(val => arr.push(val))\n    var arr2 = arr.map(x => x).reverse()\n\
    \    if(sum <= w && JSON.stringify(arr) === JSON.stringify(arr2)){\n        return\
    \ true\n    }\n    else {\n        return false\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '8

    3

    3

    8

    6

    5

    '
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    return\
    \ (sorted(q) === reverse(q)) && (sum(q) <= w)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpgo_628ck.js:11\n    return (sorted(q) === reverse(q)) && (sum(q)\
    \ <= w)\n    ^\n\nReferenceError: sorted is not defined\n    at will_it_fly (/tmp/tmpgo_628ck.js:11:5)\n\
    \    at test (/tmp/tmpgo_628ck.js:19:20)\n    at Object.<anonymous> (/tmp/tmpgo_628ck.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var balanced\
    \ = false;\n  if(is_palindrome(q)){\n    balanced = true;\n  }\n  var sum = 0;\n\
    \  for(var i = 0; i < q.length; i++){\n    sum += q[i];\n  }\n  if(sum <= w &&\
    \ balanced == true){\n    return true;\n  }\n  else{\n    return false;\n  }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpfiwsi_co.js:12\n  if(is_palindrome(q)){\n  ^\n\nReferenceError:\
    \ is_palindrome is not defined\n    at will_it_fly (/tmp/tmpfiwsi_co.js:12:3)\n\
    \    at test (/tmp/tmpfiwsi_co.js:32:20)\n    at Object.<anonymous> (/tmp/tmpfiwsi_co.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    //checking\
    \ for balanced\n    let arr=q.slice(0);\n    let temp_list=[];\n    while(arr.length!=0){\n\
    \        if(arr.length%2==0){\n            let first=arr.shift();\n          \
    \  let last=arr.pop();\n            if(first!=last){\n                return false;\n\
    \            }\n        }\n        else{\n            let first=arr.shift();\n\
    \            let middle=arr.splice(Math.floor(arr.length/2),1);\n            let\
    \ last=arr.pop();\n            if(first!=last){\n                return false;\n\
    \            }\n        }\n    }\n    //checking for weight\n    let sum=0;\n\
    \    for(let i=0;i<q.length;i++){\n        sum+=q[i];\n    }\n    if(sum<=w){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4mu0c5yn.js:49:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp4mu0c5yn.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let str\
    \ = q.join('');\n  if (str === str.split('').reverse().join('') && q.reduce((a,\
    \ b) => a + b) <= w){\n    return true;\n  }\n  return false;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var t\
    \ = 0;\n    var z = [];\n    for(var i=0; i<q.length; i++){\n        t += q[i];\n\
    \        z.push(q[i]);\n    }\n    if(t <= w){\n        if(z.toString() === z.reverse().toString()){\n\
    \            return true;\n        }\n    }\n    return false;\n}\nwill_it_fly([3,2,3],\
    \ 5);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var queue_sum\
    \ = 0;\n    if(q.length%2 == 0){\n        for(i=0; i<q.length/2; i++){\n     \
    \       if(q[i]==q[q.length-1-i]){\n                queue_sum += q[i];\n     \
    \       }else{\n                return false;\n            }\n        }\n    }else{\n\
    \        for(i=0; i<Math.floor(q.length/2); i++){\n            if(q[i]==q[q.length-1-i]){\n\
    \                queue_sum += q[i];\n            }else{\n                return\
    \ false;\n            }\n        }\n    }\n    if(queue_sum<=w){\n        return\
    \ true;\n    }else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var sum\
    \ = 0;\n    var newArr = [];\n    for(var i = 0; i < q.length; i++){\n       \
    \ if(q[i] != q[q.length - 1 - i]){\n            return false;\n        }\n   \
    \     else{\n            sum += q[i];\n        }\n    }\n    if(sum <= w){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var sum=0;\n\
    \  var t=0;\n  for(var i=0;i<q.length;i++){\n    if(q[i]==q[q.length-1-i]){\n\
    \      sum=sum+q[i];\n      t++;\n    }\n  }\n  if(t==q.length){\n    if(sum<=w){\n\
    \      return true;\n    }\n    else{\n      return false;\n    }\n  }\n  else{\n\
    \    return false;\n  }\n}\nwill_it_fly([1, 2], 5);\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // your\
    \ code here\n    return (q.reverse().join('') === q.join('') && q.reduce((a,b)\
    \ => a+b) <= w) ? true : false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2ua5h_n_.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp2ua5h_n_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let a\
    \ = q.map(x => x);\n    a.sort((a, b) => b - a);\n    let left = 0;\n    let right\
    \ = a.length - 1;\n    let weight = 0;\n    while (left <= right) {\n        if\
    \ (a[left] !== a[right]) {\n            return false;\n        }\n        weight\
    \ += a[left];\n        weight += a[right];\n        left++;\n        right--;\n\
    \    }\n    return weight <= w;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmppoiwv85u.js:32:10)\n    at\
    \ Object.<anonymous> (/tmp/tmppoiwv85u.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if (q.length\
    \ < 2) {\n        return true;\n    }\n    let inBalance = isPalindrome(q);\n\
    \    let flyable = (q.reduce((a, b) => a + b) <= w);\n    return inBalance &&\
    \ flyable;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9d197bbf.js:14\n    let inBalance = isPalindrome(q);\n        \
    \            ^\n\nReferenceError: isPalindrome is not defined\n    at will_it_fly\
    \ (/tmp/tmp9d197bbf.js:14:21)\n    at test (/tmp/tmp9d197bbf.js:24:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp9d197bbf.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tconst qSum\
    \ = q.reduce((acc, curr) => acc + curr);\n\tif(qSum > w){\n\t\treturn false;\n\
    \t}\n\treturn q.join('') === q.reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum\
    \ = 0;\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n\
    \    if(sum <= w){\n        let bool = isPalindrome(q);\n        if(bool == true){\n\
    \            return true;\n        }\n        else {\n            return false;\n\
    \        }\n    }\n    else {\n        return false;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0z7gg6wx.js:16\n        let bool = isPalindrome(q);\n         \
    \          ^\n\nReferenceError: isPalindrome is not defined\n    at will_it_fly\
    \ (/tmp/tmp0z7gg6wx.js:16:20)\n    at test (/tmp/tmp0z7gg6wx.js:34:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp0z7gg6wx.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let q1\
    \ = 0;\n    let q2 = 0;\n    let q3 = 0;\n    let q4 = 0;\n    let sumq = 0;\n\
    \    let diff = 0;\n    let is_balanced = false;\n    let wtf = false;\n    let\
    \ rango = (q.length/2);\n    if (rango % 2 == 0){\n        q1 = q.slice(0,rango);\n\
    \        q2 = q.slice(rango,q.length);\n        for (x of q1){\n            q3\
    \ += x;\n        }\n        for (x of q2){\n            q4 += x;\n        }\n\
    \        diff = Math.abs(q3 - q4);\n        if (diff < 2){\n            is_balanced\
    \ = true;\n        }\n    }else{\n        q1 = q.slice(0,rango-1);\n        q2\
    \ = q.slice(rango,q.length);\n        for (x of q1){\n            q3 += x;\n \
    \       }\n        for (x of q2){\n            q4 += x;\n        }\n        diff\
    \ = Math.abs(q3 - q4);\n        if (diff < 2){\n            is_balanced = true;\n\
    \        }\n    }\n    for (x of q){\n        sumq += x;\n    }\n    if (sumq\
    \ <= w && is_balanced == true){\n        wtf = true;\n    }\n    return wtf;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpit43m9m2.js:60:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpit43m9m2.js:68:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var sum\
    \ = q.reduce(function(a, b){\n    return a + b;\n  });\n  var balanced = q.reverse().toString()\
    \ === q.toString();\n  var result =  balanced && sum <= w;\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbihrl1is.js:25:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbihrl1is.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum=0;\n\
    \  let check=0;\n  let palindrome=0;\n  q.forEach(element => {\n    sum+=element;\n\
    \  });\n  if(sum<=w){\n    for(let i=0; i<q.length; i++){\n      for(let j=q.length-1;\
    \ j>=0; j--){\n        if(q[i]==q[j]){\n          check++;\n        }\n      }\n\
    \    }\n    if(check==q.length){\n      palindrome=1;\n    }\n  }\n  if(palindrome==1){\n\
    \    return true;\n  }else{\n    return false;\n  }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpperboold.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpperboold.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var sum\
    \ = 0;\n    for(var i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n\
    \    if(sum <= w){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgll5www2.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgll5www2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let reverse\
    \ = [...q].reverse()\n    let sum = q.reduce((acc, val) => acc+val, 0)\n    if(q.toString()\
    \ == reverse.toString() && sum <= w){\n        return true\n    }\n    return\
    \ false\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if (q.length\
    \ < 2) return true;\n    if (q.length > 1 && q[0] + q[q.length - 1] <= w) return\
    \ will_it_fly(q.slice(1, q.length - 1), w);\n    return false;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpko__ayph.js:21:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpko__ayph.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tvar sum\
    \ = 0;\n\tvar half = Math.floor(q.length/2);\n\tvar i;\n\tfor(i = 0; i < half;\
    \ i++){\n\t\tif(q[i] !== q[q.length-1-i]){\n\t\t\treturn false;\n\t\t}\n\t\tsum\
    \ += q[i];\n\t}\n\tif(q.length % 2 === 1){\n\t\tsum += q[half];\n\t}\n\treturn\
    \ sum <= w;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(q.length\
    \ % 2 == 0){\n    var left = q.splice(0, q.length/2);\n    var right = q.splice(q.length/2);\n\
    \    var left_sum = left.reduce(function(a, b){return a + b;}, 0);\n    var right_sum\
    \ = right.reduce(function(a, b){return a + b;}, 0);\n    return left_sum == right_sum\
    \ && left_sum <= w;\n  }\n  else{\n    var mid = q.splice(q.length/2);\n    var\
    \ left = q.splice(0, q.length/2);\n    var right = q.splice(q.length/2);\n   \
    \ var left_sum = left.reduce(function(a, b){return a + b;}, 0);\n    var right_sum\
    \ = right.reduce(function(a, b){return a + b;}, 0);\n    return left_sum == right_sum\
    \ && left_sum + mid[0] <= w;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpir0cddbd.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpir0cddbd.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if (q.length\
    \ === 0) {\n    return true;\n  }\n  for (let i = 0; i < q.length; i++) {\n  \
    \  if (q[i] === q[q.length - 1 - i]) {\n      let new_arr = q.splice(i + 1, q.length\
    \ - i)\n      return will_it_fly(new_arr, w)\n    }\n  }\n  return false;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0jac7f8h.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0jac7f8h.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum\
    \ = 0;\n  for(let i = 0; i < q.length; i++){\n    sum += q[i];\n  }\n  for(let\
    \ i = 0; i < q.length; i++){\n    if(is_palindrome(q)){\n      if(sum <= w){\n\
    \        return true;\n      }\n    }\n  }\n  return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpggl9s7kz.js:16\n    if(is_palindrome(q)){\n    ^\n\nReferenceError:\
    \ is_palindrome is not defined\n    at will_it_fly (/tmp/tmpggl9s7kz.js:16:5)\n\
    \    at test (/tmp/tmpggl9s7kz.js:30:20)\n    at Object.<anonymous> (/tmp/tmpggl9s7kz.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tlet sum\
    \ = 0;\n\tlet qRev = q.slice().reverse();\n\tfor(let x of q){\n\t\tsum += x;\n\
    \t}\n\tif(sum > w){\n\t\treturn false;\n\t}\n\tfor(let i = 0; i < q.length; i++){\n\
    \t\tif(q[i] !== qRev[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tif (q.length\
    \ == 0) {\n\t\treturn true;\n\t}\n\tif (q.length == 1) {\n\t\treturn q[0] <= w;\n\
    \t}\n\tvar m = Math.floor(q.length / 2);\n\tvar arr1 = q.slice(0, m);\n\tvar arr2\
    \ = q.slice(m, q.length);\n\treturn sum(arr1) <= w && sum(arr2) <= w && \n\t\t\
    will_it_fly(arr1, w) && will_it_fly(arr2, w);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5ks9q8hb.js:20\n\treturn sum(arr1) <= w && sum(arr2) <= w && \n\
    \t^\n\nReferenceError: sum is not defined\n    at will_it_fly (/tmp/tmp5ks9q8hb.js:20:2)\n\
    \    at test (/tmp/tmp5ks9q8hb.js:29:20)\n    at Object.<anonymous> (/tmp/tmp5ks9q8hb.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let mid\
    \ = Math.floor(q.length/2);\n  let curr = 0;\n  for(let i = 0; i < mid; i++){\n\
    \    curr += q[i] + q[q.length-1-i];\n    if(curr > w){\n      return false;\n\
    \    }\n  }\n  if(q.length % 2 !== 0){\n    curr += q[mid];\n  }\n  if(curr >\
    \ w){\n    return false;\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa3xl2qe5.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpa3xl2qe5.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var qsum\
    \ = 0;\n  var qcheck = [];\n  var qlen = q.length;\n  if (qlen % 2 != 0){\n  \
    \  return false;\n  }\n  for (var i = 0; i < qlen; i++){\n    qsum += q[i];\n\
    \    qcheck.push(q[i]);\n  }\n  if (qsum > w){\n    return false;\n  }\n  var\
    \ qhalf = Math.floor(qlen/2);\n  for (var i = 0; i < qhalf; i++){\n    if (qcheck[i]\
    \ != qcheck[qlen-1-i]){\n      return false;\n    }\n  }\n  return true;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf1mx2nbe.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpf1mx2nbe.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var notFly\
    \ = false;\n    if (is_balanced(q) && sum(q) > w){\n        return notFly;\n \
    \   } else {\n        return !notFly;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5f6sn4bq.js:12\n    if (is_balanced(q) && sum(q) > w){\n    ^\n\
    \nReferenceError: is_balanced is not defined\n    at will_it_fly (/tmp/tmp5f6sn4bq.js:12:5)\n\
    \    at test (/tmp/tmp5f6sn4bq.js:23:20)\n    at Object.<anonymous> (/tmp/tmp5f6sn4bq.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if (q\
    \ === null){\n        return true;\n    }\n    var head = q;\n    var list = [];\n\
    \    var listSum = 0;\n    while (head){\n        list.push(head.value);\n   \
    \     listSum += head.value;\n        head = head.next;\n    }\n    if (listSum\
    \ > w){\n        return false;\n    }\n    var palindrome = true;\n    for (var\
    \ i = 0; i < Math.floor(list.length/2); i++){\n        if (list[i] !== list[list.length\
    \ - 1 - i]){\n            palindrome = false;\n        }\n    }\n    return palindrome;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnedsud2o.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpnedsud2o.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\t//we first\
    \ verify if it's balanced\n\tvar lis;\n\tvar res = false;\n\tfor(var i=0; i<q.length;\
    \ i++){\n\t\tlis = q.slice(i);\n\t\tif(lis.length<=1)\n\t\t\tbreak;\n\t\tif(is_palindrome(lis)){\n\
    \t\t\t//if it's balanced, we check the sum\n\t\t\tif(sum_array(lis)<=w){\n\t\t\
    \t\tres = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\n\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0lqj2jcy.js:18\n\t\tif(is_palindrome(lis)){\n\t\t^\n\nReferenceError:\
    \ is_palindrome is not defined\n    at will_it_fly (/tmp/tmp0lqj2jcy.js:18:3)\n\
    \    at test (/tmp/tmp0lqj2jcy.js:35:20)\n    at Object.<anonymous> (/tmp/tmp0lqj2jcy.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var pal\
    \ = false;\n  var weight = 0;\n  for(var i = 0; i < q.length; i++){\n    weight\
    \ += q[i];\n  }\n  if(q.join(\"\") === q.reverse().join(\"\")){\n    pal = true;\n\
    \  }\n  return (pal && weight <= w);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if (typeof\
    \ q === 'number') {\n        return q <= w;\n    } else if (!is_balanced(q)) {\n\
    \        return false;\n    } else {\n        var sum = 0;\n        var i = 0;\n\
    \        while (i < q.length) {\n            sum += q[i];\n            i = i +\
    \ 1;\n        }\n        return sum <= w;\n    }\n}\n\nvar test_list = list(\"\
    MOM\");\nvar test_list2 = list(\"MOM\");\nvar test_list3 = list(\"MOM\");\nvar\
    \ test_list4 = list(\"MOM\");\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpwhvybj50.js:26\nvar test_list = list(\"MOM\");\n              \
    \  ^\n\nReferenceError: list is not defined\n    at Object.<anonymous> (/tmp/tmpwhvybj50.js:26:17)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var sum\
    \ = 0;\n    for(var i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n\
    \    return sum <= w && q == q.reverse();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_nb9fj3f.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_nb9fj3f.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\t\n\tif(q.length\
    \ == 0) return false;\n\t\n\tfor(var i = 0; i < q.length; i++){\n\t\tif(q[i] >\
    \ w) return false;\n\t}\n\tvar sum = 0;\n\tfor(var i = 0; i < q.length; i++){\n\
    \t\tsum = sum + q[i];\n\t}\n\tif(sum > w) return false;\n\t\n\tif(q.length % 2\
    \ == 0){\n\t\tfor(var i = 0; i < q.length/2; i++){\n\t\t\tif(q[i] != q[q.length\
    \ - 1 - i]) return false;\n\t\t}\n\t}\n\t\n\tif(q.length % 2 != 0){\n\t\tfor(var\
    \ i = 0; i < (q.length - 1)/2; i++){\n\t\t\tif(q[i] != q[q.length - 1 - i]) return\
    \ false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum\
    \ = 0;\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n\
    \    if(isPalindrome(q) && sum <= w){\n        return true;\n    }else{\n    \
    \    return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2,\
    \ 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmppm4msi3_.js:15\n    if(isPalindrome(q) && sum <= w){\n    ^\n\n\
    ReferenceError: isPalindrome is not defined\n    at will_it_fly (/tmp/tmppm4msi3_.js:15:5)\n\
    \    at test (/tmp/tmppm4msi3_.js:27:20)\n    at Object.<anonymous> (/tmp/tmppm4msi3_.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if(q ===\
    \ []){\n        return \"Too light.\";\n    } else {\n        var i = 0;\n   \
    \     var j = q.length - 1;\n        var total = 0;\n        for(var i = 0; i\
    \ < q.length; i++){\n            total += q[i];\n        }\n        if(total >\
    \ w){\n            return \"Too heavy.\";\n        } else {\n            for(var\
    \ i = 0; i < q.length; i++){\n                if(q[i] !== q[j]){\n           \
    \         return \"Too light.\";\n                }\n                j--;\n  \
    \          }\n            return \"Just right!\";\n        }\n    }\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Just right!'\n\
    \nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnk3qvo5y.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnk3qvo5y.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Just right!',\n\
    \  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if(q ===\
    \ null){\n        return false;\n    }\n    if(q.length === 1){\n        return\
    \ true;\n    }\n    let arr = q.reverse();\n    let sum = 0;\n    for(let i=0;\
    \ i<arr.length; i++){\n        sum = sum + arr[i];\n    }\n    if(sum > w){\n\
    \        return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfmym1hgt.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpfmym1hgt.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum\
    \ = 0;\n    let t = q.length-1;\n    let b = 0;\n    let flag = false;\n    for(let\
    \ i = 0; i < q.length; i++){\n        sum += q[i];\n        if(q[i] != q[t]){\n\
    \            flag = true;\n        }\n        t--;\n    }\n    if(sum<=w && flag\
    \ == false){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let queue\
    \ = [];\n  let sum = 0;\n  while(q.length !== 0){\n    let current = q.shift();\n\
    \    queue.push(current);\n    sum += current;\n    if(sum > w){\n      queue.splice(0,\
    \ queue.length-1);\n      sum = 0;\n      for(let i = 0; i < queue.length; i++){\n\
    \        sum += queue[i];\n      }\n    }\n  }\n  let queue2 = [...queue];\n \
    \ let reverse_queue = [];\n  while(queue2.length !== 0){\n    reverse_queue.push(queue2.pop());\n\
    \  }\n  if(JSON.stringify(queue) === JSON.stringify(reverse_queue) && sum <= w){\n\
    \    return true;\n  }\n  return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var total\
    \ = 0;\n  for(var i = 0; i < q.length; i++){\n    total += q[i];\n  }\n  if(is_balanced(q)\
    \ && total <= w){\n    return true;\n  }\n  return false;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpjs3_f3qq.js:15\n  if(is_balanced(q) && total <= w){\n  ^\n\nReferenceError:\
    \ is_balanced is not defined\n    at will_it_fly (/tmp/tmpjs3_f3qq.js:15:3)\n\
    \    at test (/tmp/tmpjs3_f3qq.js:26:20)\n    at Object.<anonymous> (/tmp/tmpjs3_f3qq.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyzbbl2iq.js:18:10)\n \
    \   at Object.<anonymous> (/tmp/tmpyzbbl2iq.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let weight\
    \ = q.reduce((acc, curr) => acc + curr, 0);\n  let palindrome = q.join('') ===\
    \ q.reverse().join('');\n  if (weight <= w && palindrome) {\n    return true;\n\
    \  }\n  return false;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2,\
    \ 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    \n   \
    \ var sum = 0;\n    var balanced = 0;\n    for(var i = 0; i < q.length; i++){\n\
    \        sum += q[i];\n        if(q[i] == q[q.length-1-i]){\n            balanced++;\n\
    \        }\n    }\n    if(sum <= w && balanced == q.length){\n        return true;\n\
    \    }\n    return false;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2,\
    \ 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var sum\
    \ = 0;\n    var temp = 0;\n    var check = true;\n    for(var i = 0; i < q.length;\
    \ i++){\n        sum += q[i];\n    }\n    if(sum > w){\n        return false;\n\
    \    }\n    else if(q.length < 3){\n        return true;\n    }\n    else{\n \
    \       for(var i = 0; i < q.length; i++){\n            temp += q[i];\n      \
    \      if(temp * 2 > sum){\n                check = false;\n            }\n  \
    \      }\n        return check;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4dwfmy_r.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp4dwfmy_r.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var sum\
    \ = 0;\n  for(i = 0; i < q.length; i++){\n    sum += q[i];\n  }\n  if(sum <= w\
    \ && isPalindrome(q)){\n    return true;\n  }\n  return false;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpwy7oalwn.js:15\n  if(sum <= w && isPalindrome(q)){\n         ^\n\
    \nReferenceError: isPalindrome is not defined\n    at will_it_fly (/tmp/tmpwy7oalwn.js:15:10)\n\
    \    at test (/tmp/tmpwy7oalwn.js:26:20)\n    at Object.<anonymous> (/tmp/tmpwy7oalwn.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if (q.length\
    \ == 0){\n        return true;\n    } else if (q.length == 1){\n        return\
    \ q[0] <= w;\n    } else {\n        var sum = 0;\n        for (var i = 0; i <\
    \ q.length; i++){\n            sum += q[i];\n        }\n        return is_palindrome(q)\
    \ && sum <= w;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2,\
    \ 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpq6uwg24y.js:20\n        return is_palindrome(q) && sum <= w;\n\
    \        ^\n\nReferenceError: is_palindrome is not defined\n    at will_it_fly\
    \ (/tmp/tmpq6uwg24y.js:20:9)\n    at test (/tmp/tmpq6uwg24y.js:29:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpq6uwg24y.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  \n  var\
    \ sum = 0;\n  var i = 0;\n  var j = q.length - 1;\n  var count = 0;\n  if(q.length\
    \ == 0){\n    return true;\n  }\n  for(i=0; i<q.length; i++){\n    sum = sum +\
    \ q[i];\n  }\n  if(sum > w){\n    return false;\n  }\n  for(i=0; i<j; i++){\n\
    \    if(q[i] == q[j]){\n      count = count + 1;\n    }\n    j = j - 1;\n  }\n\
    \  if(count == q.length){\n    return true;\n  }\n  else{\n    return false;\n\
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcaj51zm5.js:44:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpcaj51zm5.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if(q.length\
    \ === 0){\n        return true;\n    }\n    if(q.length === 1){\n        return\
    \ true;\n    }\n    var isBalance = checkPalindrome(q);\n    if(isBalance ===\
    \ false){\n        return false;\n    }\n    if(q.length === 2){\n        return\
    \ q[0] + q[1] <= w;\n    }\n    if(q.length > 2){\n        var sum = 0;\n    \
    \    for(var i = 0; i < q.length; i++){\n            sum += q[i];\n        }\n\
    \        return sum <= w;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp123nsvsz.js:17\n    var isBalance = checkPalindrome(q);\n     \
    \               ^\n\nReferenceError: checkPalindrome is not defined\n    at will_it_fly\
    \ (/tmp/tmp123nsvsz.js:17:21)\n    at test (/tmp/tmp123nsvsz.js:38:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp123nsvsz.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum\
    \ = 0;\n    for(let i = 0; i < q.length; i++){\n        sum += q[i];\n    }\n\
    \    if(sum <= w){\n        let pali = true;\n        for(let i = 0; i < q.length/2;\
    \ i++){\n            if(q[i] != q[q.length-1-i]){\n                pali = false;\n\
    \            }\n        }\n        if(pali){\n            return true;\n     \
    \   }\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum=0;\n\
    \    let isBalanced=true;\n    for(let i=0;i<q.length;i++){\n        if(sum>w){\n\
    \            return false;\n        }\n        if(q[i]!=q[q.length-1-i]){\n  \
    \          isBalanced=false;\n        }\n        sum+=q[i];\n    }\n    return\
    \ isBalanced;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let weight\
    \ = 0;\n    let balanced = false;\n    let flight = false;\n    for(i=0; i<q.length;\
    \ i++){\n        weight += q[i];\n    }\n    if(q.toString() == q.reverse().toString()){\n\
    \        balanced = true;\n    }\n    if(weight <= w && balanced == true){\n \
    \       flight = true;\n    }\n    return flight;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var summ\
    \ = 0;\n    var rev_q = q.slice().reverse();\n    var n = q.length;\n    for (var\
    \ i = 0; i < n; i++){\n        summ += q[i];\n    }\n    var balance = true;\n\
    \    for (var i = 0; i < n; i++){\n        if (q[i] != rev_q[i]){\n          \
    \  balance = false;\n        }\n    }\n    if (balance && summ <= w){\n      \
    \  return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  \n  if (q.length\
    \ % 2 === 0){\n    for (let i = 0; i < q.length; i++){\n      if (q[i] !== q[q.length\
    \ - 1 - i]){\n        return false;\n      }\n    }\n  } else {\n    for (let\
    \ i = 0; i < q.length; i++){\n      if (q[i] !== q[q.length - 1 - i]){\n     \
    \   return false;\n      }\n    }\n  }\n  \n  let sum = 0;\n  for (let i = 0;\
    \ i < q.length; i++){\n    sum += q[i];\n  }\n  \n  if (sum <= w){\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let result\
    \ = 0;\n    for(let i = 0; i < q.length; i++){\n        result += q[i];\n    }\n\
    \    for(let i = 0; i < q.length; i++){\n        if(q[i] === q[q.length - 1 -\
    \ i]){\n            if(result < w){\n                return true;\n          \
    \  }\n        }\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpr2h4iffh.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpr2h4iffh.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tq.sort(function(a,\
    \ b){return a-b});\n\tvar weight = 0;\n\tfor(var i = 0; i < q.length; i++){\n\t\
    \tweight += q[i];\n\t}\n\tif(weight <= w){\n\t\tvar qs = q.slice();\n\t\tvar pal\
    \ = qs.reverse();\n\t\tvar check = true;\n\t\tfor(var i = 0; i < q.length; i++){\n\
    \t\t\tif(q[i] !== pal[i]){\n\t\t\t\tcheck = false;\n\t\t\t}\n\t\t}\n\t\tif(check\
    \ === true){\n\t\t\treturn true;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}else{\n\
    \t\treturn false;\n\t}\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2,\
    \ 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmbvlacjf.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpmbvlacjf.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tq.sort((a,b)=>a-b);\n\
    \tconst sum = q.reduce((acc,curr)=>acc+curr,0);\n\tif(sum > w){\n\t\treturn false;\n\
    \t}\n\tfor(let i = 0; i < q.length; i++){\n\t\tif(q[i] !== q[q.length-1-i]){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpindsifog.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpindsifog.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let half_of_queue\
    \ = Math.floor(q.length/2);\n    let first_half = 0;\n    let second_half = 0;\n\
    \    if(q.length%2!==0){\n        half_of_queue = Math.floor(q.length/2)+1;\n\
    \    }\n    for(let i=0; i<half_of_queue; i++){\n        first_half += q[i];\n\
    \    }\n    for(let i=q.length-1; i>=half_of_queue; i--){\n        second_half\
    \ += q[i];\n    }\n    if(first_half === second_half && first_half+second_half\
    \ <= w){\n        return true;\n    }\n    return false;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsysw7j8i.js:34:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpsysw7j8i.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\treturn sumOfArr(q)\
    \ <= w && is_palindrome(q);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpnlyxdyke.js:11\n\treturn sumOfArr(q) <= w && is_palindrome(q);\n\
    \t^\n\nReferenceError: sumOfArr is not defined\n    at will_it_fly (/tmp/tmpnlyxdyke.js:11:2)\n\
    \    at test (/tmp/tmpnlyxdyke.js:19:20)\n    at Object.<anonymous> (/tmp/tmpnlyxdyke.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // check\
    \ balance\n    if (q.length === 1) {\n        return true;\n    }\n    var mid\
    \ = Math.floor(q.length / 2);\n    var firstHalf = q.slice(0, mid);\n    var secondHalf\
    \ = q.slice(mid + 1);\n    if (q.length % 2 === 1) {\n        secondHalf = q.slice(mid\
    \ + 1);\n    } else {\n        secondHalf = q.slice(mid);\n    }\n    var reverseHalf\
    \ = secondHalf.reverse();\n    var i = 0;\n    while (i < firstHalf.length) {\n\
    \        if (firstHalf[i] !== reverseHalf[i]) {\n            return false;\n \
    \       }\n        i++;\n    }\n    // if not balanced, return false\n    if (checkBalance(q)\
    \ === false) {\n        return false;\n    }\n    // check for max weight \n \
    \   var sum = 0;\n    for (var j = 0; j < q.length; j++) {\n        sum += q[j];\n\
    \    }\n    if (sum <= w) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpz5vy6ap7.js:32\n    if (checkBalance(q) === false) {\n    ^\n\n\
    ReferenceError: checkBalance is not defined\n    at will_it_fly (/tmp/tmpz5vy6ap7.js:32:5)\n\
    \    at test (/tmp/tmpz5vy6ap7.js:51:20)\n    at Object.<anonymous> (/tmp/tmpz5vy6ap7.js:59:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if (is_balanced(q)\
    \ && sum(q) <= w) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpnygwmu84.js:11\n  if (is_balanced(q) && sum(q) <= w) {\n  ^\n\n\
    ReferenceError: is_balanced is not defined\n    at will_it_fly (/tmp/tmpnygwmu84.js:11:3)\n\
    \    at test (/tmp/tmpnygwmu84.js:23:20)\n    at Object.<anonymous> (/tmp/tmpnygwmu84.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var i =\
    \ 0;\n  var result = false;\n  var sum = 0;\n  var is_palindrome = true;\n  var\
    \ length = q.length;\n  while(i < length){\n    sum += q[i];\n    if(q[i] !==\
    \ q[length - 1 - i]){\n      is_palindrome = false;\n    }\n    i++;\n  }\n  if(is_palindrome\
    \ && sum <= w){\n    result = true;\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tif(q.length\
    \ == 0){\n\t\treturn true;\n\t}else{\n\t\tvar sum = 0;\n\t\tvar i = 0;\n\t\twhile(i\
    \ < q.length){\n\t\t\tsum += q[i];\n\t\t\ti++;\n\t\t}\n\t\tif(sum <= w){\n\t\t\
    \tvar j = 0;\n\t\t\tvar y = q.length - 1;\n\t\t\twhile(j < y){\n\t\t\t\tif(q[j]\
    \ != q[y]){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t\ty--;\n\t\
    \t\t}\n\t\t\treturn true;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum\
    \ = 0;\n    let qr = [];\n    for(let i = 0; i < q.length; i++){\n        sum\
    \ += q[i];\n        qr.push(q[i]);\n    }\n    qr.reverse();\n    let qReverse\
    \ = qr.toString();\n    let qStr = q.toString();\n    let result = false;\n  \
    \  if(sum <= w && qReverse == qStr){\n        result = true;\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var res\
    \ = false;\n    var sum = 0;\n    var str = '';\n    for(var i = 0; i < q.length;\
    \ i++){\n        str = str + q[i];\n        sum = sum + q[i];\n    }\n    var\
    \ rev = q.reverse();\n    var str2 = '';\n    for(var i = 0; i < rev.length; i++){\n\
    \        str2 = str2 + rev[i];\n    }\n    if(str == str2 && sum <= w){\n    \
    \    res = true;\n    }\n    return res;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var sum\
    \ = 0;\n  for(var i = 0; i < q.length; i++){\n    sum += q[i];\n  }\n  if(sum\
    \ > w) return false;\n  else{\n    if(is_palindrome(q)){\n      return true;\n\
    \    }\n    else{\n      return false;\n    }\n  }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvhj905bh.js:17\n    if(is_palindrome(q)){\n    ^\n\nReferenceError:\
    \ is_palindrome is not defined\n    at will_it_fly (/tmp/tmpvhj905bh.js:17:5)\n\
    \    at test (/tmp/tmpvhj905bh.js:30:20)\n    at Object.<anonymous> (/tmp/tmpvhj905bh.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n   return\
    \ q.join(\"\") === q.reverse().join(\"\") && q.reduce((acc, x) => acc + x) <=\
    \ w;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(q.length\
    \ === 0){\n    return true;\n  }\n  var sum = 0;\n  for(var i = 0; i < q.length;\
    \ i++){\n    sum += q[i];\n  }\n  if(sum <= w){\n    for(var i = 0; i < Math.floor(q.length/2);\
    \ i++){\n      if(q[i] !== q[q.length-1-i]){\n        return false;\n      }\n\
    \    }\n    return true;\n  }\n  return false;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let left\
    \ = 0;\n    let right = q.length - 1;\n    let sum = 0;\n    while(left < right){\n\
    \        sum += q[left];\n        sum += q[right];\n        if(sum > w) return\
    \ false;\n        left++;\n        right--;\n    }\n    if(left == right) sum\
    \ += q[left];\n    return sum <= w;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxz9lsk_g.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxz9lsk_g.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var total\
    \ = 0;\n    var i = 0;\n    var j = q.length - 1;\n    var balanced = true;\n\
    \    while (i <= j){\n        total += q[i];\n        if (q[i] != q[j]){\n   \
    \         balanced = false;\n        }\n        i++;\n        j--;\n    }\n  \
    \  return (balanced && total <= w);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    return\
    \ isBalanced(q) && sum(q) <= w;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpdhlpyxvo.js:11\n    return isBalanced(q) && sum(q) <= w;\n    ^\n\
    \nReferenceError: isBalanced is not defined\n    at will_it_fly (/tmp/tmpdhlpyxvo.js:11:5)\n\
    \    at test (/tmp/tmpdhlpyxvo.js:18:20)\n    at Object.<anonymous> (/tmp/tmpdhlpyxvo.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let arr_q\
    \ = [...q];\n    let sum = 0;\n    for(let i = 0; i < arr_q.length; i++){\n  \
    \      sum += arr_q[i];\n    }\n    if(sum <= w){\n        for(let i = 0; i <\
    \ arr_q.length; i++){\n            if(arr_q[i] === arr_q[arr_q.length - i - 1]){\n\
    \                return true;\n            }else{\n                return false;\n\
    \            }\n        }\n    }else{\n        return false;\n    }\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(q.length==0)\
    \ return true;\n  if(q.length==1) return true;\n  var arr=q.sort(function(a,b){return\
    \ a-b;});\n  var sum=arr.reduce(function(a,b){return a+b;});\n  if(sum<=w) return\
    \ true;\n  return false;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2,\
    \ 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4c3w7c7v.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp4c3w7c7v.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    function\
    \ is_balanced(q){\n        return q.toString() === q.reverse().toString();\n \
    \   }\n    return is_balanced(q) && q.reduce((a,b) => a+b) <= w;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tvar sum\
    \ = 0;\n\tfor(var i = 0; i < q.length; i++){\n\t\tsum += q[i];\n\t}\n\tvar flag\
    \ = false;\n\tfor(var i = 0; i < q.length; i++){\n\t\tif(q[i] == q[q.length -\
    \ 1 - i]){\n\t\t\tflag = true;\n\t\t}\n\t\telse{\n\t\t\tflag = false;\n\t\t\t\
    break;\n\t\t}\n\t}\n\tif(sum <= w && flag == true){\n\t\treturn true;\n\t}\n\t\
    else{\n\t\treturn false;\n\t}\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var l\
    \ = q.length,\n        n = q.slice(0, l/2),\n        m = q.slice(l/2 + l%2, l),\n\
    \        s = 0;\n    \n    for(var i = 0; i < l/2; i++){\n        if(n[i] != m[l/2\
    \ - 1 - i]) return false;\n        s += n[i];\n    }\n    if(l%2) s += q[(l-1)/2];\n\
    \    return s <= w;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsbi3dm8g.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpsbi3dm8g.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    return\
    \ q.reduce((a, b) => a + b, 0) <= w\n    && q.join('') === q.reverse().join('')\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var b =\
    \ true;\n  var s = 0;\n  for(var i = 0; i < q.length; i++){\n    s += q[i];\n\
    \    if(q[i] !== q[q.length - 1 - i]){\n      b = false;\n    }\n  }\n  if(s <=\
    \ w && b){\n    return true;\n  }else{\n    return false;\n  }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if(q.length\
    \ === 0 || w === 0){\n        return false;\n    }\n    var result = {\n     \
    \   sum : 0,\n        balanced : false\n    };\n    checkSum(q, result);\n   \
    \ var balanced = isBalanced(q);\n    if(result.sum <= w && balanced){\n      \
    \  return true;\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp1j72_shm.js:18\n    checkSum(q, result);\n    ^\n\nReferenceError:\
    \ checkSum is not defined\n    at will_it_fly (/tmp/tmp1j72_shm.js:18:5)\n   \
    \ at test (/tmp/tmp1j72_shm.js:30:20)\n    at Object.<anonymous> (/tmp/tmp1j72_shm.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  q.sort();\n\
    \  var f = 0;\n  if(q.length === 1) { return q[0] <= w; }\n  for(var i = 0; i\
    \ <= q.length/2; i++){\n    if(q[i] !== q[q.length-1-i]){\n      f = 1;\n    \
    \  break;\n    }\n  }\n  if(f === 1){ return false; }\n  if(q.length%2 === 0){\
    \ return (q[0]*2) <= w; }\n  return (q[0]*2+q[(q.length-1)/2]) <= w;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjszqe2_q.js:30:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpjszqe2_q.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if (is_balanced(q)\
    \ && sum(q) <= w) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpnygwmu84.js:11\n  if (is_balanced(q) && sum(q) <= w) {\n  ^\n\n\
    ReferenceError: is_balanced is not defined\n    at will_it_fly (/tmp/tmpnygwmu84.js:11:3)\n\
    \    at test (/tmp/tmpnygwmu84.js:23:20)\n    at Object.<anonymous> (/tmp/tmpnygwmu84.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  const sum\
    \ = q.reduce((acc, curr) => acc + curr, 0);\n  let list = JSON.stringify(q);\n\
    \  return (w >= sum && list === JSON.stringify(q.reverse()));\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tif(q.length\
    \ === 0){\n\t\treturn false;\n\t}\n\t\n\tvar q1 = q.slice(0);\n\tvar q2 = q.slice(0);\n\
    \tq1.pop();\n\tq2.shift();\n\t\n\treturn (q1.length === 0 && q[0] <= w) || (will_it_fly(q1,\
    \ w - q[0]) && will_it_fly(q2, w - q[q.length - 1]));\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3mpbrd5x.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp3mpbrd5x.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var totalWeight\
    \ = 0;\n  for(i=0; i<q.length; i++){\n    totalWeight += q[i];\n  }\n  if(w>=totalWeight\
    \ && is_palindrome(q)){\n    return true;\n  } else {\n    return false;\n  }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpu_hovtzw.js:15\n  if(w>=totalWeight && is_palindrome(q)){\n   \
    \   ^\n\nReferenceError: is_palindrome is not defined\n    at will_it_fly (/tmp/tmpu_hovtzw.js:15:7)\n\
    \    at test (/tmp/tmpu_hovtzw.js:27:20)\n    at Object.<anonymous> (/tmp/tmpu_hovtzw.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  let sum\
    \ = 0;\n  for(let i = 0; i < q.length; i++){\n    sum += q[i];\n  }\n  if(sum\
    \ > w){\n    return false;\n  }\n  if(q.length > 1){\n    if(q[0] !== q[q.length\
    \ - 1]){\n      return false;\n    }\n    q.pop();\n    q.shift();\n    return\
    \ will_it_fly(q, w);\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if(q.length\
    \ == 0){\n        return false;\n    }else if(q.length == 1){\n        return\
    \ true;\n    }else{\n        var sum = 0;\n        for(var i = 0; i < q.length;\
    \ i++){\n            sum += q[i];\n        }\n        if(sum <= w){\n        \
    \    var middle = Math.floor(q.length/2);\n            var first = q.slice(0,\
    \ middle);\n            var second = q.slice(middle, q.length);\n            var\
    \ reverse = second.reverse();\n            var i = 0;\n            var count =\
    \ 0;\n            for(i = 0; i < middle; i++){\n                if(first[i] ==\
    \ reverse[i]){\n                    count += 1;\n                }\n         \
    \   }\n            if(count == middle){\n                return true;\n      \
    \      }else{\n                return false;\n            }\n        }else{\n\
    \            return false;\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var sum\
    \ = 0;\n    var i = 0;\n    while(i < q.length){\n        sum += q[i];\n     \
    \   i++\n    }\n    if(sum <= w){\n        return true;\n    }\n    return false;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7ys8plga.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7ys8plga.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tif(w < sum(q)){\n\
    \t\treturn false;\n\t} else if(!is_palindrome(q)){\n\t\treturn false;\n\t} else\
    \ {\n\t\treturn true;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqiie4gss.js:11\n\tif(w < sum(q)){\n\t^\n\nReferenceError: sum is\
    \ not defined\n    at will_it_fly (/tmp/tmpqiie4gss.js:11:2)\n    at test (/tmp/tmpqiie4gss.js:25:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqiie4gss.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var sum\
    \ = q.reduce(function(a, b){\n    return a + b;\n  }, 0);\n  var pal = q.map(function(elem,\
    \ i, arr){\n    return elem === arr[arr.length - 1 - i];\n  });\n  return (sum\
    \ <= w && pal.every(function(elem){\n    return elem === true;\n  }));\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var sum\
    \ = 0;\n  for(var i = 0; i < q.length; i++){\n    sum += q[i];\n  }\n  if(is_palindrome(q)\
    \ && sum <= w){\n    return true;\n  }\n  return false;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpgw421l4d.js:15\n  if(is_palindrome(q) && sum <= w){\n  ^\n\nReferenceError:\
    \ is_palindrome is not defined\n    at will_it_fly (/tmp/tmpgw421l4d.js:15:3)\n\
    \    at test (/tmp/tmpgw421l4d.js:25:20)\n    at Object.<anonymous> (/tmp/tmpgw421l4d.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(q.length\
    \ == 0) return true;\n  var sum = 0;\n  for(var i = 0; i < q.length; i++){\n \
    \   sum += q[i];\n  }\n  if(sum > w) return false;\n  var midpoint = q.length\
    \ / 2;\n  var left = q.slice(0, midpoint);\n  var right = q.slice(Math.ceil(midpoint));\n\
    \  right.reverse();\n  return left.join('') == right.join('');\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if(q.length\
    \ < 1){\n        return false;\n    }\n\n    if(q.length === 1){\n        return\
    \ true;\n    }\n\n    let sum = 0;\n    for(let i = 0; i < q.length; i++){\n \
    \       sum += q[i];\n    }\n\n    if(sum > w){\n        return false;\n    }\n\
    \n    let i = 0;\n    let j = q.length - 1;\n    while(i < j){\n        if(q[i]\
    \ !== q[j]){\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2,\
    \ 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tif(q.length===0){\n\
    \t\treturn true;\n\t}\n\tvar sum = 0;\n\tfor(var i=0; i<q.length; i++){\n\t\t\
    sum+=q[i];\n\t}\n\tif(sum<=w){\n\t\tif(isPalindrome(q)){\n\t\t\treturn true;\n\
    \t\t}\n\t}\n\treturn false;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmptr9vdda3.js:19\n\t\tif(isPalindrome(q)){\n\t\t^\n\nReferenceError:\
    \ isPalindrome is not defined\n    at will_it_fly (/tmp/tmptr9vdda3.js:19:3)\n\
    \    at test (/tmp/tmptr9vdda3.js:31:20)\n    at Object.<anonymous> (/tmp/tmptr9vdda3.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  return isBalanced(q)\
    \ && q.reduce((acc, x) => acc + x, 0) <= w;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpep4wzg11.js:11\n  return isBalanced(q) && q.reduce((acc, x) =>\
    \ acc + x, 0) <= w;\n  ^\n\nReferenceError: isBalanced is not defined\n    at\
    \ will_it_fly (/tmp/tmpep4wzg11.js:11:3)\n    at test (/tmp/tmpep4wzg11.js:18:20)\n\
    \    at Object.<anonymous> (/tmp/tmpep4wzg11.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822306
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if (q.length\
    \ === 0) return true;\n    else {\n        let sum = q.reduce((acc, val) => acc\
    \ + val);\n        if (sum > w) return false;\n        else {\n            let\
    \ i = 0;\n            let j = q.length - 1;\n            while (i < j) {\n   \
    \             if (q[i] === q[j]) {\n                    i++;\n               \
    \     j--;\n                } else {\n                    return false;\n    \
    \            }\n            }\n            return true;\n        }\n    }\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822307
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var sum\
    \ = 0;\n  var ok = true;\n  var qlen = q.length;\n  for(var i = 0; i < qlen; i++){\n\
    \    sum += q[i];\n    if(sum > w){\n      ok = false;\n      break;\n    }\n\
    \  }\n  var slen = qlen -1;\n  for(var j = 0; j < qlen; j++){\n    if(q[j] !=\
    \ q[slen]){\n      ok = false;\n      break;\n    }\n    slen--;\n  }\n  return\
    \ ok;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822307
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tif(q.length\
    \ === 0)\n\t\treturn true;\n\tif(q.length === 1)\n\t\treturn true;\n\tif(q.length\
    \ === 2)\n\t\treturn q[0] == q[1];\n\treturn will_it_fly(q.slice(1), w) && will_it_fly(q.slice(0,\
    \ q.length - 1), w) && q.reduce((x, y) => x + y) <= w;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgnrekncb.js:25:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgnrekncb.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822307
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if(q.length\
    \ >1 && q.reverse().join('') == q.join('')){\n        let sum = 0;\n        for(let\
    \ i = 0; i < q.length; i++){\n            sum += q[i];\n        }\n        if(sum\
    \ <= w){\n            return true;\n        }\n    }\n    return false;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpd3bcgf29.js:28:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpd3bcgf29.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822307
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var sum\
    \ = 0;\n    var p = q.join(\"\");\n    var x = p.split(\"\").reverse().join(\"\
    \");\n    for(var i = 0; i < q.length; i++){\n      sum += q[i];\n    }\n    if(sum\
    \ <= w && p == x){\n      return true;\n    }else{\n      return false;\n    }\n\
    \  }\n  \n  console.log(will_it_fly([3, 2, 3], 5));\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    '
  timestamp: 1659822307
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum\
    \ = 0;\n    let left = 0;\n    let right = q.length - 1;\n    let balanced = true;\n\
    \    while(left < right){\n        sum += q[left] + q[right];\n        if(q[left]\
    \ != q[right]){\n            balanced = false;\n        }\n        left++;\n \
    \       right--;\n    }\n    return sum <= w && balanced;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822307
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  return q.length\
    \ <= w && q.join('') === q.reverse().join('');\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822307
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var sum\
    \ = q.reduce(function(a, b){\n        return a + b;\n    }, 0);\n    var rq =\
    \ q.slice().reverse();\n    var temp = true;\n    for(i=0; i<q.length; i++){\n\
    \        if(q[i] != rq[i]){\n            temp = false;\n        }\n    }\n   \
    \ if(sum<=w && temp == true){\n        return true;\n    }else{\n        return\
    \ false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822307
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    // Write\
    \ your code here.\n    var l = 0, r = q.length - 1;\n    while (l < r){\n    \
    \    if (q[l] == q[r]){\n            l++;\n            r--;\n        } else {\n\
    \            return false;\n        }\n    }\n    return q.reduce((a, b) => a\
    \ + b) <= w;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822307
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(q.length\
    \ < 2){\n    return false;\n  }\n  let sum = 0;\n  for(let i = 0; i < q.length;\
    \ i++){\n    sum += q[i];\n  }\n  if(sum <= w){\n    return true;\n  }\n  return\
    \ false;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmqvrj28e.js:29:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpmqvrj28e.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822307
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if(q.length<1){\n\
    \        return true;\n    }\n    if(q.length===1){\n        return true;\n  \
    \  }\n    var head = q[0];\n    var tail = q[q.length-1];\n    var weight = head\
    \ + tail;\n    if(weight<=w){\n        var recursive_will_it_fly = will_it_fly(q.slice(1,q.length-1),w);\n\
    \        if(recursive_will_it_fly){\n            return true;\n        }\n   \
    \ }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2,\
    \ 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzpdqysra.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpzpdqysra.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822307
- exit_code: 0
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(q.length\
    \ == 0){\n    return false;\n  }\n  if(q.length == 1){\n    return true;\n  }\n\
    \  for(let i = 0; i < Math.floor(q.length/2); i++){\n    if(q[i] !== q[q.length-1-i]){\n\
    \      return false;\n    }\n  }\n  let sum = 0;\n  for(let i = 0; i < q.length;\
    \ i++){\n    sum += q[i];\n  }\n  if(sum <= w){\n    return true;\n  }\n  return\
    \ false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822307
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    const\
    \ qweigh = [];\n    for(let i = 0; i < q.length; i++){\n        qweigh.push(q[i])\n\
    \    }\n    for(let i = 0; i < q.length / 2; i++){\n        if(q[i] != q[q.length\
    \ - i - 1]){\n            return 'not balanced, no fly'\n        }\n    }\n  \
    \  let sum = 0;\n    for(let i = 0; i < qweigh.length; i++){\n        sum += qweigh[i]\n\
    \    }\n    if(sum <= w){\n        return 'sum less than or equal to weight, fly'\n\
    \    }\n    else{\n        return 'sum is more than weight, dont fly'\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'sum less than\
    \ or equal to weight, fly'\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpacgeq23_.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpacgeq23_.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'sum less\
    \ than or equal to weight, fly',\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822307
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let sum\
    \ = q.reduce((a, b) => a + b, 0);\n    if (isPalindrome(q) && sum <= w) {\n  \
    \      return true;\n    } else {\n        return false;\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpyo31q29s.js:12\n    if (isPalindrome(q) && sum <= w) {\n    ^\n\
    \nReferenceError: isPalindrome is not defined\n    at will_it_fly (/tmp/tmpyo31q29s.js:12:5)\n\
    \    at test (/tmp/tmpyo31q29s.js:24:20)\n    at Object.<anonymous> (/tmp/tmpyo31q29s.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822307
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var sum\
    \ = 0;\n    for(var i = 0; i < q.length; i++){\n        sum = sum + q[i];\n  \
    \  }\n    if(palindrome(q) && sum <= w){\n        return true;\n    }else{\n \
    \       return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpxl4bjgfa.js:15\n    if(palindrome(q) && sum <= w){\n    ^\n\nReferenceError:\
    \ palindrome is not defined\n    at will_it_fly (/tmp/tmpxl4bjgfa.js:15:5)\n \
    \   at test (/tmp/tmpxl4bjgfa.js:27:20)\n    at Object.<anonymous> (/tmp/tmpxl4bjgfa.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822307
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if (q.length\
    \ === 0) {\n        return \"False\"\n    }\n    var sum = 0;\n    for (var i\
    \ = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    if (isPalindrome(q)\
    \ && sum <= w) {\n        return \"True\"\n    } else {\n        return \"False\"\
    \n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n\
    \  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpdf8u1hwc.js:18\n    if (isPalindrome(q) && sum <= w) {\n    ^\n\
    \nReferenceError: isPalindrome is not defined\n    at will_it_fly (/tmp/tmpdf8u1hwc.js:18:5)\n\
    \    at test (/tmp/tmpdf8u1hwc.js:30:20)\n    at Object.<anonymous> (/tmp/tmpdf8u1hwc.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822307
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tvar sum\
    \ = 0;\n\tfor(var i = 0; i < q.length; i++){\n\t\tsum += q[i];\n\t}\n\tif(is_palindrome(q)\
    \ == true && sum <= w){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t\
    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp55al0mxb.js:15\n\tif(is_palindrome(q) == true && sum <= w){\n\t\
    ^\n\nReferenceError: is_palindrome is not defined\n    at will_it_fly (/tmp/tmp55al0mxb.js:15:2)\n\
    \    at test (/tmp/tmp55al0mxb.js:27:20)\n    at Object.<anonymous> (/tmp/tmp55al0mxb.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822307
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  var weight\
    \ = 0;\n  for(var i = 0; i < q.length; i++){\n    weight += q[i];\n  }\n  if(weight\
    \ <= w && isPalindrome(q)){\n    return true;\n  }\n  return false;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = will_it_fly;\n\
    \  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpva7e15mw.js:15\n  if(weight <= w && isPalindrome(q)){\n       \
    \     ^\n\nReferenceError: isPalindrome is not defined\n    at will_it_fly (/tmp/tmpva7e15mw.js:15:13)\n\
    \    at test (/tmp/tmpva7e15mw.js:26:20)\n    at Object.<anonymous> (/tmp/tmpva7e15mw.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822307
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n\tlet str\
    \ = q.join('');\n\treturn (isPalindrome(str) && sum_of_elements(q) <= w);\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3vmafgmt.js:12\n\treturn (isPalindrome(str) && sum_of_elements(q)\
    \ <= w);\n\t^\n\nReferenceError: isPalindrome is not defined\n    at will_it_fly\
    \ (/tmp/tmp3vmafgmt.js:12:2)\n    at test (/tmp/tmp3vmafgmt.js:20:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp3vmafgmt.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822307
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    var k\
    \ = 0;\n    for(var i = 0; i < q.length; i++){\n        k = k + q[i];\n    }\n\
    \    console.log(k);\n    var reverse = q.reverse();\n    console.log(reverse);\n\
    \    var u = 0;\n    for(var j = 0; j < reverse.length; j++){\n        u = u +\
    \ reverse[j];\n    }\n    console.log(u);\n    if(k == u && k <= w){\n       \
    \ return true;\n    }\n    else if(k == u && k > w){\n        return false;\n\
    \    }\n    else if(k != u && k <= w){\n        return false;\n    }\n    else\
    \ if(k != u && k > w){\n        return false;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0alqzp35.js:42:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp0alqzp35.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '8

    [ 3, 2, 3 ]

    8

    3

    [ 2, 1 ]

    3

    '
  timestamp: 1659822307
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    let weight\
    \ = 0;\n    for(let i=0; i<q.length; i++){\n        weight+=q[i];\n    }\n   \
    \ for(let i=0; i<q.length; i++){\n        if(weight<=w){\n            if(isPalindrome(q)){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = will_it_fly;\n  assert.deepEqual(candidate([3, 2, 3], 9),true);\n  assert.deepEqual(candidate([1,\
    \ 2], 5),false);\n  assert.deepEqual(candidate([3], 5),true);\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 1),false);\n  assert.deepEqual(candidate([1, 2, 3], 6),false);\n  assert.deepEqual(candidate([5],\
    \ 5),true);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpm2ww7n0r.js:17\n            if(isPalindrome(q)){\n            ^\n\
    \nReferenceError: isPalindrome is not defined\n    at will_it_fly (/tmp/tmpm2ww7n0r.js:17:13)\n\
    \    at test (/tmp/tmpm2ww7n0r.js:29:20)\n    at Object.<anonymous> (/tmp/tmpm2ww7n0r.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822307
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  //first\
    \ get the sum of all of the items\n  var sum = 0;\n  for(var i = 0; i < q.length;\
    \ i++){\n    sum += q[i];\n  }\n  //if that sum is bigger than the total weight\
    \ of the bird, return false\n  if(sum > w){\n    return false;\n  }\n  //now check\
    \ to see if the list is a palindrome\n  //make a list of the last half of the\
    \ items in the list\n  var list2 = [];\n  for(var i = q.length - Math.ceil(q.length/2);\
    \ i < q.length; i++){\n    list2.push(q[i]);\n  }\n  //and check to see if the\
    \ first half of the list is the same as the last half of the list\n  //we use\
    \ a while loop because we need the ability to skip elements of the list\n  var\
    \ i = 0;\n  var j = 0;\n  while(i < q.length/2){\n    if(q[i] == list2[j]){\n\
    \      i++;\n      j++;\n    }\n    else{\n      i++;\n    }\n  }\n  //if we made\
    \ it to the end of the list without finding a mistake, then it is a palindrome\n\
    \  //otherwise the list was not a palindrome and will not fly\n  if(i >= q.length/2){\n\
    \    return true;\n  }\n  else{\n    return false;\n  }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp35geuawo.js:54:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp35geuawo.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822307
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n   var total\
    \ = 0;\n   for(var i = 0; i < q.length; i++){\n    total += q[i];\n   }\n   if(total\
    \ > w){\n     return false;\n   }\n   var firstHalf = q.slice(0, q.length/2);\n\
    \   var secondHalf = q.slice(q.length/2);\n   var midElement = secondHalf.pop();\n\
    \   if(firstHalf.length > secondHalf.length){\n     secondHalf.unshift(midElement);\n\
    \   }\n   var isPalindrome = true;\n   for(var i = 0; i < firstHalf.length; i++){\n\
    \     if(firstHalf[i] !== secondHalf[i]){\n       isPalindrome = false;\n    \
    \ }\n   }\n   return isPalindrome;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_zrbettd.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_zrbettd.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822307
- exit_code: 1
  program: "//Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n// The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n// Example:\n// >>> will_it_fly([1, 2], 5) \n// False \n// # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n// # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n// # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n// # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  q.sort();\n\
    \  var q_reversed = q.slice(0).reverse();\n  return (q.toString() == q_reversed.toString()\
    \ && q.reduce((a, b) => a + b, 0) <= w) ? true : false;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = will_it_fly;\n  assert.deepEqual(candidate([3,\
    \ 2, 3], 9),true);\n  assert.deepEqual(candidate([1, 2], 5),false);\n  assert.deepEqual(candidate([3],\
    \ 5),true);\n  assert.deepEqual(candidate([3, 2, 3], 1),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3], 6),false);\n  assert.deepEqual(candidate([5], 5),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3_gq3728.js:20:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp3_gq3728.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822307
