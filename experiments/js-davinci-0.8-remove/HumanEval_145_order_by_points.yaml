name: HumanEval_145_order_by_points
language: js
prompt: "//Write a function which sorts the given list of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ list.\n// For example:\nfunction order_by_points(nums){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11,\
  \ 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423,\
  \ 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
  \ 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
  \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
completions: ["    let dic = {}\n    let res = []\n    let sum = 0\n    for(let i\
    \ = 0; i < nums.length; i++){\n        let num = nums[i]\n        while(num >\
    \ 0){\n            sum += num % 10\n            num = Math.floor(num / 10)\n \
    \       }\n        dic[sum] = dic[sum] === undefined ? [i] : dic[sum].concat(i)\n\
    \        sum = 0\n    }\n    for(let key in dic){\n        for(let i = 0; i <\
    \ dic[key].length; i++){\n            res.push(nums[dic[key][i]])\n        }\n\
    \    }\n    return res\n}\norder_by_points([4,3,5,3,3,5,3,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5",
  "    return nums.map(e=> e.toString().split('').reduce((a, b) => parseInt(a) + parseInt(b))).sort((a,\
    \ b) => a - b).map(e => nums[nums.indexOf(parseInt(e.toString()))]);\n}", "  \
    \  nums.sort(function(a, b){\n        if(sumDigits(a) == sumDigits(b)){\n    \
    \        return a - b;\n        }\n        return sumDigits(a) - sumDigits(b);\n\
    \    });\n    return nums;\n}\n", "    return nums.sort((a, b) => {\n        let\
    \ aSum = a.toString().split('').reduce((sum, curr) => sum + Number(curr), 0);\n\
    \        let bSum = b.toString().split('').reduce((sum, curr) => sum + Number(curr),\
    \ 0);\n        return aSum - bSum;\n    });\n}\n", "    return nums.map(function(x,\
    \ index){\n      return [x, index];\n    }).sort(function(a, b){\n      var sumOfDigitsA\
    \ = String(a[0]).split('').reduce(function(a, b){return +a + +b});\n      var\
    \ sumOfDigitsB = String(b[0]).split('').reduce(function(a, b){return +a + +b});\n\
    \      if(sumOfDigitsA < sumOfDigitsB) return -1;\n      if(sumOfDigitsA > sumOfDigitsB)\
    \ return 1;\n      if(sumOfDigitsA === sumOfDigitsB){\n        if(a[1] < b[1])\
    \ return -1;\n        if(a[1] > b[1]) return 1;\n      }\n    }).map(function(x){\n\
    \      return x[0];\n    });\n}", "  //nums = [12, 6, 11, 5, 2, 0, 10, 4, 1, 3,\
    \ 9, 8, 7];\n  nums.sort(function(a, b){\n    var sumA = a.toString().split('').reduce(function(sum,\
    \ digit){\n      return sum += Number(digit);\n    }, 0);\n    var sumB = b.toString().split('').reduce(function(sum,\
    \ digit){\n      return sum += Number(digit);\n    }, 0);\n    if(sumA > sumB){\n\
    \      return 1;\n    }\n    if(sumA < sumB){\n      return -1;\n    }\n    if(sumA\
    \ === sumB){\n      return a - b;\n    }\n  });\n  return nums;\n}\n", "    var\
    \ sum = 0;\n    var array = [];\n    var result =[];\n    for(var i = 0; i < nums.length;\
    \ i++){\n        sum = 0;\n        for(var j = 0; j < nums[i].toString().length;\
    \ j++){\n            sum += Number(nums[i].toString()[j]);\n        }\n      \
    \  array.push(sum);\n    }\n    var array = array.sort(function(a,b){return a-b});\n\
    \    for(var i = 0; i < array.length; i++){\n        for(var j = 0; j < nums.length;\
    \ j++){\n            if(array[i] == nums[j]){\n                result.push(nums[j]);\n\
    \                nums.splice(j,1);\n                break;\n            }\n  \
    \      }\n    }\n    return result;\n}", "    //var sum = [];\n    var sum = nums.map(nums\
    \ => {\n        return nums.toString().split('').reduce((acc, num) => +acc + +num);\n\
    \    });\n    return nums.sort((a, b) => sum[nums.indexOf(a)] - sum[nums.indexOf(b)]);\n\
    }", "    nums.sort(function(a, b){\n        return a-b;\n    });\n    let arr\
    \ = [];\n    for(let i = 0; i < nums.length; i++){\n        let sum = 0;\n   \
    \     let number = nums[i];\n        while(number){\n            sum += number\
    \ % 10;\n            number = Math.floor(number / 10);\n        }\n        arr.push({\n\
    \            point: sum,\n            original: nums[i]\n        });\n    }\n\
    \    arr.sort(function(a, b){\n        if(a.point === b.point){\n            return\
    \ a.original - b.original;\n        }\n        return a.point - b.point;\n   \
    \ });\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n      \
    \  result.push(arr[i].original);\n    }\n    return result;\n}\n", "    let arr\
    \ = nums.map(function(elem,index){\n        let sum = 0;\n        while(elem >\
    \ 0){\n            sum += elem % 10;\n            elem = Math.floor(elem / 10);\n\
    \        }\n        return {\n            number: nums[index],\n            sum:\
    \ sum,\n            index: index\n        }\n    });\n    arr.sort(function(a,b){\n\
    \        if(a.sum > b.sum){\n            return 1;\n        }\n        if(a.sum\
    \ < b.sum){\n            return -1;\n        }\n        if(a.index > b.index){\n\
    \            return 1;\n        }\n        if(a.index < b.index){\n          \
    \  return -1;\n        }\n        return 0;\n    });\n    return arr.map(function(elem){\n\
    \        return elem.number;\n    });\n}\n\nmodule.exports = {\n    get_length_of_missing_array:\
    \ get_length_of_missing_array,\n    get_number_from_string: get_number_from_string,\n\
    \    order_by_points: order_by_points\n};", "    return nums.sort((a, b) => {\n\
    \        let arrA = Array.from(a.toString());\n        let arrB = Array.from(b.toString());\n\
    \        let sumA = arrA.reduce((acc, value) => {\n            return acc + parseInt(value);\n\
    \        }, 0);\n        let sumB = arrB.reduce((acc, value) => {\n          \
    \  return acc + parseInt(value);\n        }, 0);\n        if (sumA === sumB) {\n\
    \            return nums.indexOf(a) - nums.indexOf(b);\n        }\n        return\
    \ sumA - sumB;\n    });\n}", "    function points(num){\n        let sum = 0;\n\
    \        while(num > 0){\n            sum += num % 10;\n            num = Math.floor(num\
    \ / 10);\n        }\n        return sum;\n    }\n    return nums.sort((a, b) =>\
    \ points(a) > points(b) ? 1 : (points(a) < points(b) ? -1 : 0))\n}\n", "    var\
    \ arr = new Array();\n    for(var i = 0; i < nums.length; i++){\n        arr.push(sumOfDigits(nums[i]));\n\
    \    }\n    var sorted = false;\n    while(!sorted){\n        sorted = true;\n\
    \        for(var i = 0; i < arr.length - 1; i++){\n            if(arr[i] > arr[i+1]){\n\
    \                var temp = arr[i];\n                arr[i] = arr[i+1];\n    \
    \            arr[i+1] = temp;\n                var temp = nums[i];\n         \
    \       nums[i] = nums[i+1];\n                nums[i+1] = temp;\n            \
    \    sorted = false;\n            }\n        }\n    }\n    return nums;\n}", " \
    \   for(var i = 0; i < nums.length; i++){\n        var sum = 0;\n        var arr\
    \ = nums[i].toString().split('').map(Number);\n        for(var j = 0; j < arr.length;\
    \ j++){\n            sum += arr[j];\n        }\n        nums[i] = [sum, nums[i]];\n\
    \    }\n    nums.sort(function(a, b){\n        return a[0] - b[0];\n    });\n\
    \    var solution = [];\n    for(var i = 0; i < nums.length; i++){\n        solution.push(nums[i][1]);\n\
    \    }\n    return solution;\n}", "    let arr = nums.map(el => {\n        let\
    \ sum = 0;\n        el.toString().split('').forEach(e => sum += +e);\n       \
    \ return {\n            index: nums.indexOf(el),\n            sum: sum\n     \
    \   }\n    })\n    arr.sort((a, b) => a.sum - b.sum);\n    let result = [];\n\
    \    arr.forEach(el => result.push(nums[el.index]));\n    return result;\n}",
  "    nums.sort(function(a, b){\n        var sumA = a.toString().split('').reduce(function(a,\
    \ b){\n            return parseInt(a)+parseInt(b);\n        });\n        var sumB\
    \ = b.toString().split('').reduce(function(a, b){\n            return parseInt(a)+parseInt(b);\n\
    \        });\n        return sumA - sumB;\n    });\n    return nums;\n}", "  \
    \  for(let i = 0; i < nums.length; i++){\n        let sum = 0;\n        let item\
    \ = nums[i];\n        while(item > 0){\n            sum += item % 10;\n      \
    \      item = Math.floor(item / 10);\n        }\n        nums[i] = [sum, i, nums[i]];\n\
    \    }\n    nums.sort( (a, b) => {\n        if(a[0] < b[0]) return -1;\n     \
    \   if(a[0] > b[0]) return 1;\n        if(a[1] < b[1]) return -1;\n        if(a[1]\
    \ > b[1]) return 1;\n        return 0;\n    });\n    return nums.map( el => el[2]);\n\
    }", "    return nums.map(function(n,i){\n        return {\n            ind: i,\n\
    \            num: n,\n            digits: n.toString().split('').map(Number).reduce(function(a,b){\n\
    \                return a+b;\n            },0)\n        }\n    }).sort(function(a,b){\n\
    \        return a.digits-b.digits;\n    }).map(function(obj){\n        return\
    \ obj.num;\n    });\n}\n", "    return nums.map(function(num, index) {\n     \
    \   return { index: index, value: num.toString(), sum: num.toString().split('').reduce(function(a,\
    \ b) { return +a + +b; }, 0) };\n    }).sort(function(a, b) {\n        return\
    \ a.sum - b.sum;\n    }).map(function(item) {\n        return +item.value;\n \
    \   });\n}", "  nums.sort(function(a, b){\n    if(getSum(a) === getSum(b)){\n\
    \      return nums.indexOf(a) - nums.indexOf(b);\n    }\n    return getSum(a)\
    \ - getSum(b);\n  });\n  return nums;\n}\n", "    let result = [];\n    for (let\
    \ num of nums) {\n        let sum = num.toString().split('').reduce((total, element)\
    \ => total + Number(element), 0);\n        let index = nums.indexOf(num);\n  \
    \      let obj = {sum: sum, index: index, num: num};\n        result.push(obj);\n\
    \    }\n    result.sort((a, b) => {\n        if (a.sum < b.sum) {\n          \
    \  return -1;\n        } else if (a.sum > b.sum) {\n            return 1;\n  \
    \      } else {\n            if (a.index < b.index) {\n                return\
    \ -1;\n            } else if (a.index > b.index) {\n                return 1;\n\
    \            } else {\n                return 0;\n            }\n        }\n \
    \   });\n    return result.map(element => element.num);\n}", "    let index =\
    \ [];\n    for(let i = 0; i < nums.length; i++){\n        nums[i] = nums[i].toString().split('');\n\
    \        let sum = 0;\n        for(let j = 0; j < nums[i].length; j++){\n    \
    \        sum += Number(nums[i][j]);\n        }\n        nums[i] = sum;\n     \
    \   index.push(i);\n    }\n    let sortNum = nums.slice();\n    nums.sort((a,\
    \ b) => a - b);\n    return index.map(el => nums[sortNum.indexOf(el)]);\n}\n",
  "  return nums.map(function(n, i){\n    return {\n      index: i,\n      value:\
    \ n,\n      sumOfDigits: n.toString().split('').reduce(function(a, v){\n     \
    \   return a + parseInt(v);\n      }, 0)\n    };\n  }).sort(function(a, b){\n\
    \    return a.sumOfDigits > b.sumOfDigits ? 1 : -1;\n  }).map(function(o){\n \
    \   return o.value;\n  });\n}\n", "    nums.sort(function(a, b){\n        return\
    \ (sum_digits(a) < sum_digits(b)) ? -1 : 1;\n    });\n    return nums;\n}\n",
  "    let numsArr = nums.map(num => {\n        return [num, sumDigits(num)];\n  \
    \  });\n    return numsArr.sort((a, b) => {\n        return a[1] - b[1] || a[0]\
    \ - b[0];\n    }).map(a => a[0]);\n}", "    return nums.sort((a, b) => sum_of_digits(a)\
    \ - sum_of_digits(b));\n}\n", "  return nums.sort((a, b) => \n  sumOfDigits(a)\
    \ > sumOfDigits(b) ? 1 : sumOfDigits(a) < sumOfDigits(b) ? -1 : a - b)\n}\n\n\
    const sumOfDigits = (num) => {\n  let sum = 0;\n  const split = num.toString().split('');\n\
    \  split.forEach(item => {\n    sum += parseInt(item);\n  })\n  return sum;\n\
    }\n", "  var arr = nums.map(function(x){\n    var sum = x.toString().split('').reduce(function(a,b){\n\
    \      return parseInt(a) + parseInt(b);\n    });\n    return {number: x, sum:\
    \ sum};\n  });\n  arr.sort(function(a,b){\n    if(a.sum > b.sum){\n      return\
    \ 1;\n    }\n    if(a.sum < b.sum){\n      return -1;\n    }\n    if(a.sum ===\
    \ b.sum){\n      return a.number - b.number;\n    }\n  });\n  return arr.map(function(x){\n\
    \    return x.number;\n  });\n}", "  return nums.sort((a, b) => {\n    return\
    \ sumOfDigits(a) - sumOfDigits(b);\n  });\n}\n", "    var result = [];\n    var\
    \ sum = [];\n    nums.forEach(function(num){\n        var number = num;\n    \
    \    var sumOfDigits = 0;\n        while(number > 0){\n            sumOfDigits\
    \ += number % 10;\n            number = parseInt(number / 10);\n        }\n  \
    \      result.push(num);\n        sum.push(sumOfDigits);\n    });\n    for(var\
    \ i = 0; i < sum.length; i++){\n        for(var j = i; j < sum.length; j++){\n\
    \            if(sum[i] > sum[j]){\n                var temp = sum[i];\n      \
    \          sum[i] = sum[j];\n                sum[j] = temp;\n                var\
    \ tempNum = result[i];\n                result[i] = result[j];\n             \
    \   result[j] = tempNum;\n            }\n        }\n    }\n    return result;\n\
    }\nvar test = [1,40,5,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6",
  "    const points = nums.map(function(el){\n        let elPoints = 0;\n        el.toString().split('').forEach(function(num){\n\
    \            elPoints += +num;\n        });\n        return elPoints;\n    });\n\
    \    const sortedPoints = points.sort(function(a, b){\n        return a - b;\n\
    \    });\n    const sortedNums = [];\n    sortedPoints.forEach(function(el){\n\
    \        const index = points.indexOf(el);\n        sortedNums.push(nums[index]);\n\
    \        points[index] = null;\n    });\n    return sortedNums;\n}\n", "    let\
    \ sum = 0;\n    for(let i = 0; i < nums.length; i++){\n        sum += nums[i];\n\
    \    }\n    let newNums = [];\n    while(nums.length > 0){\n        let max =\
    \ Math.max(...nums);\n        newNums.push(max);\n        nums.splice(nums.indexOf(max),\
    \ 1);\n    }\n    return newNums;\n}", "    return nums.map(a => a + '')\n   \
    \     .map(a => a.split('').map(a => parseInt(a)))\n        .map(a => a.reduce((a,\
    \ b) => a + b))\n        .map((a, i) => ({value: nums[i], count: a}))\n      \
    \  .sort((a, b) => a.count - b.count)\n        .map(a => a.value);\n}", "    return\
    \ nums.sort((a, b) => sumDigits(a) - sumDigits(b));\n}\n", "    return nums.sort((a,\
    \ b) => {\n        return a%10 + Math.floor(a/10) > b%10 + Math.floor(b/10) ?\
    \ 1 : -1;\n    });\n}", "    for(let i = 0; i < nums.length; i++){\n        for(let\
    \ j = i; j < nums.length; j++){\n            if(nums[i] > nums[j]){\n        \
    \        let temp = nums[i];\n                nums[i] = nums[j];\n           \
    \     nums[j] = temp;\n            }\n        }\n    }\n    return nums;\n}\n",
  "    return nums.sort((a, b) => sumDigits(a) - sumDigits(b) || a - b);\n}\n", " \
    \   nums.sort(function(a, b){\n        let a_sum = sum_digits(a),\n          \
    \  b_sum = sum_digits(b);\n        if(a_sum === b_sum){\n            return a\
    \ - b;\n        }\n        return a_sum - b_sum;\n    });\n    return nums;\n}",
  "    for(let i = 0; i < nums.length; i++){\n        for(let j = 0; j < nums.length;\
    \ j++){\n            if(nums[i] < nums[j]){\n                let temp = nums[i];\n\
    \                nums[i] = nums[j];\n                nums[j] = temp;\n       \
    \     }\n        }\n    }\n    return nums;\n}\n", "\tlet getScore = function(num){\n\
    \t\tlet sum = 0;\n\t\tlet arr = String(num).split('');\n\t\tarr.forEach(function(value){\n\
    \t\t\tsum += Number(value);\n\t\t});\n\t\treturn sum;\n\t};\n\tlet scores = [];\n\
    \tnums.forEach(function(value){\n\t\tscores.push(getScore(value));\n\t});\n\t\
    let obj = {};\n\tfor(let i = 0; i < scores.length; i++){\n\t\tif(obj[scores[i]]\
    \ === undefined){\n\t\t\tobj[scores[i]] = [nums[i]];\n\t\t}else{\n\t\t\tobj[scores[i]].push(nums[i]);\n\
    \t\t}\n\t}\n\tlet newArray = [];\n\tfor(let key in obj){\n\t\tnewArray.push(obj[key]);\n\
    \t}\n\tlet result = [];\n\tnewArray.sort().forEach(function(value){\n\t\tresult\
    \ = result.concat(value);\n\t});\n\treturn result;\n}\n", "    let copy = nums.slice();\n\
    \    function compare(a, b) {\n        const sum1 = parseInt(`${a}`[0]) + parseInt(`${a}`[1]);\n\
    \        const sum2 = parseInt(`${b}`[0]) + parseInt(`${b}`[1]);\n        return\
    \ sum1 - sum2;\n    }\n    return copy.sort(compare);\n}\n", "    return nums.map(el\
    \ => {\n        if (el <= 9) return el;\n        let b = el.toString().split('').map(Number).reduce((a,\
    \ b) => a + b);\n        return b;\n    }).sort((a, b) => {\n        if (a > b)\
    \ return 1;\n        if (a < b) return -1;\n        if (a === b) return 0;\n \
    \   });\n}\n", "  return nums.sort((a, b) => getDigitSum(a) - getDigitSum(b));\n\
    }\n", "    let sumFunc = function(x) {\n        return x.toString().split('').reduce((acc,\
    \ x) => acc + +x, 0);\n    };\n    return nums.sort((a, b) => sumFunc(a) - sumFunc(b)\
    \ || nums.indexOf(a) - nums.indexOf(b));\n}\norder_by_points([5, 9, 1, 4, 2]);\
    \ // [1, 5, 2, 4, 9]\n", "    var points = [];\n    var sorted = [];\n    for(var\
    \ i = 0; i < nums.length; i++){\n        var sum = 0;\n        var temp = nums[i].toString().split('');\n\
    \        for(var j = 0; j < temp.length; j++){\n            sum += parseInt(temp[j]);\n\
    \        }\n        points.push(sum);\n    }\n    var sortedPoints = points.slice().sort(function(a,b){return\
    \ a-b});\n    for(var k = 0; k < sortedPoints.length; k++){\n        for(var l\
    \ = 0; l < points.length; l++){\n            if(sortedPoints[k] === points[l]){\n\
    \                sorted.push(nums[l]);\n                points[l] = null;\n  \
    \          }\n        }\n    }\n    return sorted;\n}\nvar nums = [10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1];", "    // let set = new Set();\n    // let sorted_nums =\
    \ nums.sort(function(a,b){\n    //     if(a.toString().split('').reduce((sum,\
    \ digit) => sum += parseInt(digit), 0) > b.toString().split('').reduce((sum, digit)\
    \ => sum += parseInt(digit), 0)) return 1;\n    //     else if(a.toString().split('').reduce((sum,\
    \ digit) => sum += parseInt(digit), 0) < b.toString().split('').reduce((sum, digit)\
    \ => sum += parseInt(digit), 0)) return -1;\n    //     else if(a.toString().split('').reduce((sum,\
    \ digit) => sum += parseInt(digit), 0) === b.toString().split('').reduce((sum,\
    \ digit) => sum += parseInt(digit), 0)) return 0;\n    // });\n    // return sorted_nums;\n\
    \    function digits_sum(number){\n        return number.toString().split('').reduce((sum,\
    \ digit) => sum += parseInt(digit), 0);\n    }\n    return nums.sort((a,b) =>\
    \ digits_sum(a) - digits_sum(b) || nums.indexOf(a) - nums.indexOf(b));\n}", " \
    \ const pointIndex = [];\n  for (let i = 0; i < nums.length; i++) {\n    pointIndex.push({\
    \ index: i, point: nums[i] });\n  }\n  pointIndex.sort((a, b) => (sumDigits(a.point)\
    \ > sumDigits(b.point) ? 1 : -1));\n  return pointIndex.map(i => nums[i.index]);\n\
    }\n", "  return nums.sort((a, b) => {\n    let sumA = sumDigits(a);\n    let sumB\
    \ = sumDigits(b);\n    return sumA > sumB ? 1 : sumA < sumB ? -1 : nums.indexOf(a)\
    \ - nums.indexOf(b);\n  });\n}\n", "    return nums.sort((a, b) =>{\n        let\
    \ firstSum = a.toString().split('').reduce((a,b) => parseInt(a) + parseInt(b));\n\
    \        let secondSum = b.toString().split('').reduce((a,b) => parseInt(a) +\
    \ parseInt(b));\n        if(firstSum === secondSum){\n            return a - b;\n\
    \        }\n        return firstSum - secondSum;\n    });\n}\n", "    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((a, b) => Number(a)\
    \ + Number(b));\n        let sumB = b.toString().split('').reduce((a, b) => Number(a)\
    \ + Number(b));\n        return sumA - sumB\n    })\n}\n", "    let numsObj =\
    \ nums.map((num, index) => ({num, index}))\n    numsObj.sort((a, b) => getSumOfDigits(a.num)\
    \ - getSumOfDigits(b.num))\n    return numsObj.map(numObj => numObj.num)\n}",
  "  var num_arr = []\n  for(var i = 0; i < nums.length; i++){\n    var num_arr_obj\
    \ = {}\n    num_arr_obj.index = i\n    num_arr_obj.number = nums[i]\n    num_arr_obj.sum\
    \ = 0\n    while(nums[i] > 0){\n      num_arr_obj.sum += nums[i] % 10\n      nums[i]\
    \ = Math.floor(nums[i] / 10)\n    }\n    num_arr.push(num_arr_obj)\n  }\n  console.log(num_arr)\n\
    \  num_arr.sort(function(a, b){\n    return a.sum - b.sum\n  })\n  console.log(num_arr)\n\
    \  var solution = []\n  for(var i = 0; i < num_arr.length; i++){\n    solution.push(num_arr[i].number)\n\
    \  }\n  return solution\n}\n\norder_by_points([5, 3, 13, 24, 64, 13])", "   //\
    \ Array.prototype.sum = function(){\n   //     var s = 0;\n   //     for(var i=0;\
    \ i<this.length; i++){\n   //         s+=this[i];\n   //     }\n   //     return\
    \ s;\n   // }\n   return nums.sort(function(a,b){\n       // return a.toString().split('').sum()\
    \ - b.toString().split('').sum();\n       return a.toString().split('').reduce(function(s,\
    \ el){\n           return s + +el;\n       }, 0) - b.toString().split('').reduce(function(s,\
    \ el){\n           return s + +el;\n       }, 0);\n   });\n}\n", "    for(var\
    \ i = 0; i < nums.length; i++){\n        nums[i] = nums[i].toString().split('');\n\
    \        var sum = 0;\n        for(var j = 0; j < nums[i].length; j++){\n    \
    \        sum += parseInt(nums[i][j]);\n        }\n        nums[i] = [nums[i].join(''),\
    \ sum];\n    }\n    return nums.sort(function(a, b){return a[1] - b[1]});\n}",
  "    function sum(n){\n        return n.toString().split('').reduce((x,y)=>+x+ +y,0);\n\
    \    }\n    let res = [];\n    nums.forEach((val,idx)=>res.push({val,idx}));\n\
    \    res.sort((a,b)=>sum(a.val)-sum(b.val));\n    return res.map(x=>x.val);\n\
    }\n", "    var result = nums.sort(function(a, b){\n        var aSum = sumDigits(a);\n\
    \        var bSum = sumDigits(b);\n        return aSum > bSum;\n    });\n    return\
    \ result;\n}\n", "  return nums.sort((a, b) => {\n    return sumDigits(a) - sumDigits(b);\n\
    \  });\n}\n", "    var arr = [];\n    for(var i = 0; i < nums.length; i++){\n\
    \        var sum = nums[i].toString().split('').reduce(function(a,b){\n      \
    \      return parseInt(a) + parseInt(b);\n        });\n        arr.push({index:\
    \ i, num: nums[i], sum: sum});\n    }\n    arr.sort(function(a,b){\n        if(a.sum\
    \ < b.sum){\n            return -1;\n        }\n        if(a.sum > b.sum){\n \
    \           return 1;\n        }\n        if(a.sum === b.sum){\n            if(a.index\
    \ < b.index){\n                return -1;\n            }\n            if(a.index\
    \ > b.index){\n                return 1;\n            }\n        }\n        return\
    \ 0;\n    });\n    var newArr = [];\n    for(var j = 0; j < arr.length; j++){\n\
    \        newArr.push(arr[j].num);\n    }\n    return newArr;\n}\n", "  let bySum\
    \ = nums.slice().sort((a, b) => sumOfDigits(a) - sumOfDigits(b));\n  return bySum.map(num\
    \ => nums.indexOf(num));\n}", "    return nums.sort((a, b) => {\n        return\
    \ sum(a) - sum(b) || nums.indexOf(a) - nums.indexOf(b);\n    });\n}\n", "    for(var\
    \ i = 0; i < nums.length; i++){\n        var firstSum = findSum(nums[i]);\n  \
    \      for(var j = 0; j < nums.length; j++){\n            var secondSum = findSum(nums[j]);\n\
    \            if(firstSum > secondSum){\n                var tmp = nums[i];\n \
    \               nums[i] = nums[j];\n                nums[j] = tmp;\n         \
    \   }\n        }\n    }\n    return nums;\n}", "    return nums.sort((a, b) =>\
    \ {\n        let sum1 = a.toString().split('').reduce((p, c) => p + +c, 0);\n\
    \        let sum2 = b.toString().split('').reduce((p, c) => p + +c, 0);\n    \
    \    return sum1 - sum2;\n    });\n}\n", "  function digit_sum(n){\n    var sum\
    \ = 0;\n    while(n > 0){\n      sum += n % 10;\n      n = Math.floor(n / 10);\n\
    \    }\n    return sum;\n  }\n  var points = new Array(nums.length);\n  for(var\
    \ i = 0; i < nums.length; i++){\n    points[i] = digit_sum(nums[i]);\n  }\n  function\
    \ compare(a, b){\n    if(a[0] != b[0]) return a[0] - b[0];\n    return a[1] -\
    \ b[1];\n  }\n  var list = [];\n  for(var i = 0; i < nums.length; i++){\n    list.push([points[i],\
    \ i]);\n  }\n  list.sort(compare);\n  var result = [];\n  for(var i = 0; i < nums.length;\
    \ i++){\n    result.push(nums[list[i][1]]);\n  }\n  return result;\n}\n", "  var\
    \ swap;\n  do {\n    swap = false;\n    for (var i=0; i < nums.length-1; i++)\
    \ {\n      if (sumOfNumbers(nums[i]) > sumOfNumbers(nums[i+1])) {\n        var\
    \ temp = nums[i];\n        nums[i] = nums[i+1];\n        nums[i+1] = temp;\n \
    \       swap = true;\n      }\n    }\n  } while (swap);\n  return nums;\n}", " \
    \   // code here\n    const sum = n => n.toString().split('').reduce((acc, n)\
    \ => parseInt(acc) + parseInt(n), 0);\n    const obj = {};\n    for (let i = 0;\
    \ i < nums.length; i++) {\n        obj[sum(nums[i])] = [obj[sum(nums[i])] || [],\
    \ nums[i]];\n    }\n    return Object.values(obj).reduce((acc, value) => acc.concat(value),\
    \ []);\n}\n\n", "  const sum = (arr) => arr.reduce((a,b) => a + b);\n  const toArray\
    \ = (int) => int.toString().split('').map(item => parseInt(item));\n  return nums.sort((a,b)\
    \ => sum(toArray(a)) > sum(toArray(b)));\n}\n", "    nums.sort(function(a, b){\n\
    \        return sumDigits(a) - sumDigits(b);\n    });\n    return nums;\n}", " \
    \   function getSumOfDigits(num){\n        return num.toString().split('').reduce((sum,\
    \ digit) => sum + parseInt(digit), 0);\n    }\n    var tmp = [];\n    for(var\
    \ i = 0; i < nums.length; i++){\n        tmp.push({\n            index: i,\n \
    \           value: nums[i],\n            sumOfDigits: getSumOfDigits(nums[i])\n\
    \        });\n    }\n    tmp.sort((a, b) => a.sumOfDigits - b.sumOfDigits);\n\
    \    for(var i = 0; i < tmp.length; i++){\n        nums[i] = tmp[i].value;\n \
    \   }\n    return nums;\n}", "    var arr=[];\n    var arr1=[];\n    var arr2=[];\n\
    \    var c = 0;\n    var d = 0;\n    var sum = 0;\n    var sum1 = 0;\n    for(var\
    \ i = 0; i < nums.length; i++){\n        arr.push(nums[i]);\n        var a = nums[i].toString();\n\
    \        for(var j = 0; j < a.length; j++){\n            c = a[j];\n         \
    \   sum += parseInt(c);\n        }\n        arr1.push(sum);\n        sum = 0;\n\
    \    }\n    var copy = arr1.slice();\n    copy.sort();\n    for(var i = 0; i <\
    \ copy.length; i++){\n        var index = arr1.indexOf(copy[i]);\n        arr2.push(arr[index]);\n\
    \    }\n    return arr2;\n}\n\n", "  var sorted = nums.slice(0).sort(function(a,\
    \ b){\n    var sumA = 0;\n    var sumB = 0;\n    var digitsA = a.toString().split('');\n\
    \    var digitsB = b.toString().split('');\n    for (var i = 0; i < digitsA.length;\
    \ i++) {\n      sumA += parseInt(digitsA[i]);\n    }\n    for (var j = 0; j <\
    \ digitsB.length; j++) {\n      sumB += parseInt(digitsB[j]);\n    }\n    if (sumA\
    \ === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n    }\n    return\
    \ sumA - sumB;\n  });\n  return sorted;\n}\n", "  function compare(a, b) {\n \
    \   var digitA = digitsSum(a);\n    var digitB = digitsSum(b);\n    if (digitA\
    \ < digitB) {\n      return -1;\n    }\n    if (digitA > digitB) {\n      return\
    \ 1;\n    }\n    return 0;\n  }\n  function digitsSum(num) {\n    var sum = 0;\n\
    \    var digits = num.toString().split('');\n    for (var i = 0; i < digits.length;\
    \ i++) {\n      sum += Number(digits[i]);\n    }\n    return sum;\n  }\n  return\
    \ nums.sort(compare);\n}", "    nums.sort(function(a, b){\n        var c = 0;\n\
    \        var d = 0;\n        var x = a.toString();\n        var y = b.toString();\n\
    \        for(var i = 0; i < x.length; i++){\n            c += parseInt(x[i]);\n\
    \        }\n        for(var i = 0; i < y.length; i++){\n            d += parseInt(y[i]);\n\
    \        }\n        if(c < d){\n            return -1;\n        }\n        if(c\
    \ > d){\n            return 1;\n        }\n        if(c === d){\n            return\
    \ 0;\n        }\n    });\n    return nums;\n}", "  return nums.sort((a, b) =>\
    \ {\n    const sumA = a.toString().split('').reduce((total, char) => total + parseInt(char),\
    \ 0);\n    const sumB = b.toString().split('').reduce((total, char) => total +\
    \ parseInt(char), 0);\n    return sumA - sumB || nums.indexOf(a) - nums.indexOf(b);\n\
    \  });\n}\n", "  return nums.sort((a, b) => sumDigits(a) - sumDigits(b));\n}",
  "  return nums.sort((a, b) => a.reduce((a, b) => a + b) - b.reduce((a, b) => a +\
    \ b));\n}\n", "    const copy = [...nums];\n    copy.sort((a, b) => {\n      \
    \  return sumOfDigits(a) - sumOfDigits(b);\n    });\n    return copy;\n}\n", "\t\
    nums.sort(function(a,b){\n\t\treturn sumDigits(a) - sumDigits(b);\n\t});\n\treturn\
    \ nums;\n}", "    var pnums = nums.slice(0);\n    return pnums.sort(function(a,b){\n\
    \        var a1 = a.toString().split('').reduce(function(a,b){\n            return\
    \ parseInt(a)+parseInt(b);\n        });\n        var b1 = b.toString().split('').reduce(function(a,b){\n\
    \            return parseInt(a)+parseInt(b);\n        });\n        return a1 -\
    \ b1;\n    });\n}", "  var sorted = nums.slice().sort(function(a, b){\n    var\
    \ aPoints = getPoints(a);\n    var bPoints = getPoints(b);\n    if (aPoints ===\
    \ bPoints) {\n      return a - b;\n    }\n    return aPoints - bPoints;\n  });\n\
    \  return sorted;\n}\n", "    nums.sort(function(a, b){\n        a = (''+a).split('').reduce(function(x,\
    \ y){return Number(x)+Number(y)}, 0);\n        b = (''+b).split('').reduce(function(x,\
    \ y){return Number(x)+Number(y)}, 0);\n        return a-b;\n    });\n    return\
    \ nums;\n}", "  var sorted = [];\n  for (var i = 0; i < nums.length; i++) {\n\
    \    var sum = 0;\n    var len = String(nums[i]).length;\n    for (var j = 0;\
    \ j < len; j++) {\n      sum += parseInt(String(nums[i])[j]);\n    }\n    sorted.push({value:\
    \ nums[i], sum: sum, index: i});\n  }\n  sorted.sort(function(a, b) {\n    if\
    \ (a.sum > b.sum) {\n      return 1;\n    } else if (a.sum < b.sum) {\n      return\
    \ -1;\n    } else {\n      if (a.index > b.index) {\n        return 1;\n     \
    \ } else {\n        return -1;\n      }\n    }\n  });\n  return sorted.map(function(item)\
    \ {\n    return item.value;\n  });\n}", "    var arr = nums.map(function(i){\n\
    \        return i;\n    });\n    return arr.sort(function(a,b){\n        var a\
    \ = a.toString().split('').reduce(function(x,y){\n            return x*1 + y*1;\n\
    \        });\n        var b = b.toString().split('').reduce(function(x,y){\n \
    \           return x*1 + y*1;\n        });\n        return a-b;\n    });\n}",
  "\t//pass through numbers and gather a new array of numbers.\n\t//each number will\
    \ be [the number itself, then an array of the digits, then the sum of those digits]\n\
    \t//return the array of numbers sorted by the sum of the digits in ascending order.\n\
    \tvar all_nums = []\n\tnums.forEach(function(num, index) {\n\t\tvar digits = num.toString().split('').map(function(str)\
    \ {\n\t\t\treturn parseInt(str);\n\t\t});\n\t\tvar sum = digits.reduce(function(sum,\
    \ digit) {\n\t\t\treturn sum + digit;\n\t\t}, 0);\n\t\tall_nums.push([num, digits,\
    \ sum]);\n\t});\n\tall_nums.sort(function(a, b) {\n\t\tif (a[2] > b[2]) {\n\t\t\
    \treturn 1;\n\t\t} else if (a[2] < b[2]) {\n\t\t\treturn -1;\n\t\t} else {\n\t\
    \t\treturn a[0] - b[0];\n\t\t}\n\t});\n\tvar result = all_nums.map(function(num_info)\
    \ {\n\t\treturn num_info[0];\n\t});\n\treturn result;\n}\n", "    nums.sort(function(a,\
    \ b){\n        return sum(a) - sum(b);\n    });\n    return nums;\n}\n", "   \
    \ var sum = function(n){\n        var s = 0;\n        while(n > 0){\n        \
    \    s += n % 10;\n            n = Math.floor(n / 10);\n        }\n        return\
    \ s;\n    };\n    var sums = nums.map(function(n, index){\n        return [sum(n),\
    \ index];\n    });\n    sums.sort(function(a, b){\n        return a[0] - b[0];\n\
    \    });\n    var ret = sums.map(function(item){\n        return nums[item[1]];\n\
    \    });\n    return ret;\n}", "\t\n\treturn nums.sort(function(a,b){\n\t\tvar\
    \ aa = a.toString().split('');\n\t\tvar bb = b.toString().split('');\n\t\tvar\
    \ i = 0;\n\t\twhile(aa[i]!=undefined)\n\t\t{\n\t\t\taa[i] = parseInt(aa[i]);\n\
    \t\t\ti++;\n\t\t}\n\t\ti = 0;\n\t\twhile(bb[i]!=undefined)\n\t\t{\n\t\t\tbb[i]\
    \ = parseInt(bb[i]);\n\t\t\ti++;\n\t\t}\n\t\tvar suma = aa.reduce(function(x,y){return\
    \ x+y;});\n\t\tvar sumb = bb.reduce(function(x,y){return x+y;});\n\t\treturn suma\
    \ - sumb;\n\t});\n}", "    const points = nums.map(num => {\n        const numToString\
    \ = num.toString();\n        let sum = 0;\n        for (let i = 0; i < numToString.length;\
    \ i++) {\n            sum += Number(numToString[i]);\n        }\n        return\
    \ sum;\n    });\n    const indexes = points.map((item, index) => index);\n   \
    \ return sort(points, indexes);\n}\n", "    let x = nums.map(function(num){\n\
    \        return [num, num.toString().split('').reduce((total, digit) => parseInt(total)\
    \ + parseInt(digit))];\n    });\n    x.sort(function(a, b){\n        if(a[1] ===\
    \ b[1]){\n            return a[0] - b[0];\n        } else {\n            return\
    \ a[1] - b[1];\n        }\n    });\n    return x.map(function(arr){\n        return\
    \ arr[0];\n    });\n}\n", "  var point = [], result = [];\n  for(var i = 0; i\
    \ < nums.length; i++){\n    var number = nums[i];\n    point.push(sumDigits(number));\n\
    \  }\n  point.sort(function(a, b){return a - b});\n  for(var i = 0; i < point.length;\
    \ i++){\n    for(var j = 0; j < nums.length; j++){\n      if(sumDigits(nums[j])\
    \ === point[i]){\n        result.push(nums[j]);\n      }\n    }\n  }\n  return\
    \ result;\n}", "\treturn nums.sort(function(a,b){\n\t\treturn sum(a) - sum(b);\n\
    \t});\n}\n", "  return nums.map(num => {return {index: nums.indexOf(num), value:\
    \ num, sum: sumOfDigits(num)}})\n          .sort((a, b) => a.sum - b.sum || a.index\
    \ - b.index)\n          .map(obj => obj.value);\n}\n", "    return nums.sort((a,\
    \ b) => (\n        sum_digits(a) - sum_digits(b) || nums.indexOf(a) - nums.indexOf(b)\n\
    \    ));\n}\n", "    var numstr=nums.join(\" \");\n    var num_num=[];\n    var\
    \ num_str=[];\n    var num_arr=[];\n    var sum=0;\n    var numb_arr=[];\n   \
    \ for(var i=0;i<nums.length;i++){\n        num_num.push(nums[i]);\n        num_num.push(String(nums[i]));\n\
    \        num_arr.push(num_num);\n        num_num=[];\n    }\n    for(var j=0;j<num_arr.length;j++){\n\
    \        var str=num_arr[j][1];\n        for(var k=0;k<str.length;k++){\n    \
    \        sum+=parseInt(str[k]);\n        }\n        num_arr[j].push(sum);\n  \
    \      sum=0;\n    }\n    num_arr.sort(function(a,b){\n        return a[2]-b[2];\n\
    \    });\n    for(var l=0;l<num_arr.length;l++){\n        numb_arr.push(num_arr[l][0]);\n\
    \    }\n    return numb_arr;\n}", "    let newArr = [];\n    for(let i = 0; i\
    \ < nums.length; i++){\n        let num = 0;\n        nums[i].toString().split('').forEach(el\
    \ => num += Number(el));\n        newArr.push(`${nums[i]}|${num}`);\n    }\n \
    \   return newArr.sort((a, b) => a.split('|')[1] - b.split('|')[1]).map(el =>\
    \ Number(el.split('|')[0]));\n}\n", "  var arr = [];\n  for(var i = 0; i < nums.length;\
    \ i++){\n    var str = nums[i] + '';\n    var count = 0;\n    for(var j = 0; j\
    \ < str.length; j++){\n      count += parseInt(str[j]);\n    }\n    arr.push({\n\
    \      index: i,\n      sum: count,\n      value: nums[i]\n    });\n  }\n  arr.sort(function(a,\
    \ b){\n    if(a.sum === b.sum){\n      return a.index - b.index;\n    }\n    return\
    \ a.sum - b.sum;\n  });\n  var newArr = [];\n  for(var i = 0; i < arr.length;\
    \ i++){\n    newArr.push(arr[i].value);\n  }\n  return newArr;\n}", "\tlet sum=0;\n\
    \tlet ind=0;\n\tlet sumOfDigits=[];\n\tlet arr=[];\n\tfor(let i=0;i<nums.length;i++){\n\
    \t\tlet num=nums[i];\n\t\tind=0;\n\t\tsum=0;\n\t\twhile(num>0){\n\t\t\tsum+=num%10;\n\
    \t\t\tnum=Math.floor(num/10);\n\t\t\tind++;\n\t\t}\n\t\tsumOfDigits.push([sum,i]);\n\
    \t}\n\tsumOfDigits.sort((a,b)=>{\n\t\tif(a[0]===b[0]){\n\t\t\treturn a[1]-b[1];\n\
    \t\t}\n\t\treturn a[0]-b[0];\n\t});\n\tsumOfDigits.forEach(function(item){\n\t\
    \tarr.push(nums[item[1]]);\n\t});\n\treturn arr;\n}", "var sorted = nums.sort(function(a,b){\n\
    \    return sum(a) - sum(b);\n})\n    return sorted;\n}\n", "    return nums.sort((a,\
    \ b) => sum(a) - sum(b) || a - b);\n}", "  const sorted = [];\n  for (let i =\
    \ 0; i < nums.length; i++) {\n    if (sorted.length === 0) {\n      sorted.push(nums[i]);\n\
    \    } else {\n      let isAdded = false;\n      for (let j = 0; j < sorted.length;\
    \ j++) {\n        if (getSumOfDigits(nums[i]) < getSumOfDigits(sorted[j])) {\n\
    \          sorted.splice(j, 0, nums[i]);\n          isAdded = true;\n        \
    \  break;\n        }\n      }\n      if (!isAdded) {\n        sorted.push(nums[i]);\n\
    \      }\n    }\n  }\n  return sorted;\n}\n", "    var newArray=[];\n    var sum=0;\n\
    \    for(var i=0;i<nums.length;i++){\n        while(nums[i]>0){\n            sum+=nums[i]%10;\n\
    \            nums[i]=Math.floor(nums[i]/10);\n        }\n        newArray.push(sum);\n\
    \        sum=0;\n    }\n    for(var j=0;j<newArray.length;j++){\n        for(var\
    \ k=0;k<newArray.length;k++){\n            if(newArray[j]<newArray[k]){\n    \
    \            var temp=newArray[j];\n                newArray[j]=newArray[k];\n\
    \                newArray[k]=temp;\n                var temp2=nums[j];\n     \
    \           nums[j]=nums[k];\n                nums[k]=temp2;\n            }\n\
    \        }\n    }\n    return nums;\n}", "    var ordered = [];\n    nums.sort(function(a,\
    \ b){\n        return (sumDigits(a) > sumDigits(b)) ? 1 : -1;\n    });\n    return\
    \ nums;\n}\n", "    function sum(num){\n        num = num.toString().split('');\n\
    \        return num.reduce((acc, curr) => Number(acc) + Number(curr), 0);\n  \
    \  }\n    const result = nums.sort((a, b) => sum(a) - sum(b));\n    return result;\n\
    }\n", "    var sum = 0;\n    var result = [];\n    var index = 0;\n    var test\
    \ = [], testResult = [];\n    for(var i = 0; i < nums.length; i++){\n        for(var\
    \ j = 0; j < nums[i].toString().length; j++){\n            sum += parseInt(nums[i].toString()[j]);\n\
    \        }\n        result.push([sum, nums[i]]);\n        sum = 0;\n    }\n  \
    \  result.sort(function(a, b){\n        return a[0] - b[0];\n    });\n    for(var\
    \ i = 0; i < result.length; i++){\n        test.push(result[i][1]);\n    }\n \
    \   for(var i = 0; i < test.length; i++){\n        for(var j = 0; j < nums.length;\
    \ j++){\n            if(test[i] === nums[j]){\n                index = j;\n  \
    \              break;\n            }\n        }\n        testResult.push(index);\n\
    \    }\n    return testResult;\n}", "  return nums.sort((a, b) => sum_of_digits(a)\
    \ - sum_of_digits(b))\n}\n", "    let newArr = nums.slice();\n    for(let i =\
    \ 0; i < newArr.length; i++){\n        for(let j = 0; j < newArr.length; j++){\n\
    \            let num1 = sumOfDigits(newArr[i]);\n            let num2 = sumOfDigits(newArr[j]);\n\
    \            if(num1 > num2){\n                let temp = newArr[i];\n       \
    \         newArr[i] = newArr[j];\n                newArr[j] = temp;\n        \
    \    }\n        }\n    }\n    return newArr;\n}", "\tnums.sort(function(a,b){\n\
    \t\tvar get_sum = function(value){\n\t\t\tvar d = value.toString();\n\t\t\tvar\
    \ sum = 0;\n\t\t\tfor(var i = 0; i < d.length; i++){\n\t\t\t\tsum += parseInt(d[i]);\n\
    \t\t\t}\n\t\t\treturn sum;\n\t\t}\n\t\tvar sum_a = get_sum(a);\n\t\tvar sum_b\
    \ = get_sum(b);\n\t\tif(sum_a == sum_b){\n\t\t\treturn a - b;\n\t\t}\n\t\treturn\
    \ sum_a - sum_b;\n\t});\n\treturn nums;\n}\n", "   function sum_of_digits(n){\n\
    \     let sum = 0;\n     for(let i = n; i > 0; i = parseInt(i/10)){\n       sum\
    \ += i % 10;\n     }\n     return sum;\n   }\n   nums.sort((a, b) => sum_of_digits(a)\
    \ - sum_of_digits(b));\n   return nums;\n}", "    for(let i = 0; i < nums.length\
    \ - 1; i++){\n        for(let j = i + 1; j < nums.length; j++){\n            let\
    \ sumDigits1 = getSumOfDigits(nums[i]);\n            let sumDigits2 = getSumOfDigits(nums[j]);\n\
    \            if(sumDigits1 > sumDigits2){\n                [nums[i], nums[j]]\
    \ = [nums[j], nums[i]];\n            } else if(sumDigits1 === sumDigits2){\n \
    \               if(nums[i] > nums[j]){\n                    [nums[i], nums[j]]\
    \ = [nums[j], nums[i]];\n                }\n            }\n        }\n    }\n\
    \    return nums;\n}\n", "    let sums = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        let sum = 0;\n        for (let j = 0; j < nums[i].toString().length;\
    \ j++) {\n            sum += parseInt(nums[i].toString()[j]);\n        }\n   \
    \     sums.push(sum);\n    }\n    return sums.sort((a, b) => a - b);\n}", "  \
    \  let result = nums.sort((a, b) => {\n        let a1 = a.toString().split('').reduce((a,\
    \ b) => a + Number(b), 0);\n        let b1 = b.toString().split('').reduce((a,\
    \ b) => a + Number(b), 0);\n        return a1 - b1;\n    });\n    return result;\n\
    }", "    var sums = nums.map(sum_digits);\n    return nums.sort(function(x, y){\n\
    \        return sums[x] - sums[y];\n    });\n}\n", "    nums.sort(function(a,\
    \ b){\n        return sum_digits(a) - sum_digits(b);\n    });\n    return nums;\n\
    }\n", "    var newArray = [];\n    newArray = nums.slice(0);\n    for(var i =\
    \ 0; i < newArray.length; i++){\n        if(newArray[i] > 10){\n            var\
    \ numToString = newArray[i].toString();\n            var sum = 0;\n          \
    \  for(var j = 0; j < numToString.length; j++){\n                sum += parseInt(numToString[j]);\n\
    \            }\n            newArray[i] = sum;\n        }\n    }\n    var result\
    \ = [];\n    for(var i = 0; i < newArray.length; i++){\n        if(newArray[i]\
    \ > 10){\n            var min = newArray[i];\n            var indexOfMin = i;\n\
    \            for(var j = i + 1; j < newArray.length; j++){\n                if(newArray[j]\
    \ < min){\n                    min = newArray[j];\n                    indexOfMin\
    \ = j;\n                }\n            }\n            var temp = newArray[i];\n\
    \            newArray[i] = newArray[indexOfMin];\n            newArray[indexOfMin]\
    \ = temp;\n            var temp = nums[i];\n            nums[i] = nums[indexOfMin];\n\
    \            nums[indexOfMin] = temp;\n        }\n    }\n    return nums;\n}",
  "  return nums.sort((a, b) => digitSum(a) - digitSum(b));\n}\n", "    return nums.map(x\
    \ => x.toString().split('').reduce((x, y) => Number(x) + Number(y)))\n       \
    \ .map((x, i) => {\n            return {\n                num: nums[i],\n    \
    \            num_sum: x\n            }\n        })\n        .sort((a, b) => a.num_sum\
    \ - b.num_sum)\n        .map(x => x.num)\n}", "  var index_map = {};\n  var sorted_nums\
    \ = nums.slice().sort((a, b) => {\n    var a_sum = get_sum(a);\n    var b_sum\
    \ = get_sum(b);\n    if (a_sum < b_sum) return -1;\n    if (a_sum > b_sum) return\
    \ 1;\n    return 0;\n  });\n  sorted_nums.forEach((num, index) => {\n    var sum\
    \ = get_sum(num);\n    if (!index_map[sum]) index_map[sum] = [];\n    index_map[sum].push(index);\n\
    \  });\n  var result = [];\n  for (var i = 0; i < nums.length; i++) {\n    var\
    \ sum = get_sum(nums[i]);\n    result.push(sorted_nums[index_map[sum].shift()]);\n\
    \  }\n  return result;\n}", "    var arr = nums.map(function(num){\n        return\
    \ {\n            num: num,\n            sum: num.toString().split('').reduce(function(acc,\
    \ curr){\n                return acc + +curr;\n            }, 0)\n        }\n\
    \    });\n    return arr.sort(function(a, b){\n        if(a.sum === b.sum){\n\
    \            return a.num - b.num;\n        }\n        return a.sum - b.sum;\n\
    \    }).map(function(obj){\n        return obj.num;\n    });\n}", "    let temp\
    \ = [];\n    nums.forEach(n => {\n        temp.push(Array.from(n.toString()).reduce((a,b)\
    \ => parseInt(a) + parseInt(b)));\n    });\n    let result = [];\n    for(let\
    \ i = 0; i < temp.length; i++){\n        let min = temp[i];\n        let index\
    \ = i;\n        for(let j = i + 1; j < temp.length; j++){\n            if(temp[j]\
    \ < min){\n                min = temp[j];\n                index = j;\n      \
    \      }\n        }\n        temp[index] = temp[i];\n        temp[i] = min;\n\
    \        result.push(nums[index]);\n        nums[index] = nums[i];\n        nums[i]\
    \ = result[i];\n    }\n    return result;\n}", "    var numsCopy = nums.slice();\n\
    \    numsCopy.sort(function(a, b){\n        var sumA = sumDigits(a);\n       \
    \ var sumB = sumDigits(b);\n        if(sumA == sumB){\n            return nums.indexOf(a)\
    \ - nums.indexOf(b);\n        } else{\n            return sumA - sumB;\n     \
    \   }\n    });\n    return numsCopy;\n}", "    return nums.sort((a, b) => {\n\
    \        let sumA = a.toString().split('').reduce((a, b) => a + +b);\n       \
    \ let sumB = b.toString().split('').reduce((a, b) => a + +b);\n        return\
    \ sumA - sumB || nums.indexOf(a) - nums.indexOf(b);\n    });\n}\n", "    let arr\
    \ = [];\n    for (let i = 0; i < nums.length; i++) {\n        arr.push(sumDigits(nums[i]))\n\
    \    }\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j\
    \ < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                let\
    \ temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n\
    \                let temp2 = nums[i];\n                nums[i] = nums[j];\n  \
    \              nums[j] = temp2;\n            }\n        }\n    }\n    return nums;\n\
    }", "    const nums_arr = nums.map(elem => elem.toString().split('').map(elem\
    \ => parseInt(elem)));\n    const nums_sum = nums_arr.map(elem => elem.reduce((acc,\
    \ elem) => acc + elem));\n    const nums_sum_sorted = nums_sum.map((elem, i) =>\
    \ i).sort((a, b) => nums_sum[a] - nums_sum[b]);\n    return nums_sum_sorted.map(elem\
    \ => nums[elem]);\n}", "    // PUT YOUR CODE HERE\n    let solution = [];\n  \
    \  let zero = [];\n    let num = [];\n    let newNums = [...nums];\n    newNums.sort(function(a,\
    \ b){return a - b});\n    for (let i = 0; i < newNums.length; i++) {\n       \
    \ solution.push(newNums[i].toString().split('').reduce((a, b) => {return parseInt(a)\
    \ + parseInt(b)}, 0));\n    }\n    let max = Math.max(...solution);\n    let min\
    \ = Math.min(...solution);\n    while (solution.length > 0) {\n        if (solution.indexOf(max)\
    \ === solution.lastIndexOf(max)) {\n            num.push(nums[solution.indexOf(max)]);\n\
    \            solution.splice(solution.indexOf(max), 1);\n            nums.splice(solution.indexOf(max),\
    \ 1);\n        } else {\n            zero.push(nums[solution.indexOf(max)]);\n\
    \            solution.splice(solution.indexOf(max), 1);\n            nums.splice(solution.indexOf(max),\
    \ 1);\n        }\n    }\n    zero.sort(function(a, b){return a - b});\n    num\
    \ = num.concat(zero);\n    return num;\n}", "    var result = [];\n    var items\
    \ = [];\n    for(var i = 0; i < nums.length; i++){\n        var num = nums[i];\n\
    \        var str = String(num);\n        var sum = 0;\n        for(var j = 0;\
    \ j < str.length; j++){\n            sum += parseInt(str[j]);\n        }\n   \
    \     items.push({'num': num, 'sum': sum, 'index': i});\n    }\n    items.sort(function(a,\
    \ b){\n        if(a.sum != b.sum){\n            return a.sum - b.sum;\n      \
    \  }\n        return a.index - b.index;\n    });\n    for(var i = 0; i < items.length;\
    \ i++){\n        result.push(items[i].num);\n    }\n    return result;\n}", " \
    \ // brute force it I guess...\n  let sorted = nums.sort(function(a, b){\n   \
    \ if (sum_of_digits(a) < sum_of_digits(b)) {\n      return -1;\n    } else if\
    \ (sum_of_digits(a) > sum_of_digits(b)) {\n      return 1;\n    } else {\n   \
    \   return 0;\n    }\n  });\n  return sorted;\n}", "    let result = [];\n   \
    \ let numsMap = {};\n    nums.forEach((num, i) => {\n        let sum = num.toString().split('').reduce((a,\
    \ b) => +a + +b);\n        if(numsMap[sum]){\n            numsMap[sum].push(num);\n\
    \        } else {\n            numsMap[sum] = [num];\n        }\n    });\n   \
    \ for(let key in numsMap){\n        result = result.concat(numsMap[key]);\n  \
    \  }\n    return result;\n}", "    return nums.map(function(n, i){\n        return\
    \ [n, i, +String(n).split('').reduce(function(a, b){return a + +b}, 0)];\n   \
    \ }).sort(function(a, b){\n        return a[2] - b[2] || a[1] - b[1];\n    }).map(function(a){\n\
    \        return a[0];\n    });\n}", "    let arr = [];\n    for (let i = 0; i\
    \ < nums.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < String(nums[i]).length;\
    \ j++) {\n            sum += +String(nums[i])[j];\n        }\n        arr.push([sum,\
    \ nums[i]]);\n    }\n    arr.sort((a, b) => a[0] - b[0]);\n    let arr1 = [];\n\
    \    for (let el of arr) {\n        arr1.push(el[1]);\n    }\n    return arr1;\n\
    }\n", "    let newArr = [];\n    for(let i = 0; i < nums.length; i++){\n     \
    \   newArr.push(nums[i]);\n    }\n    newArr.sort(function(a, b){\n        let\
    \ num1 = getSum(a);\n        let num2 = getSum(b);\n        if(num1 < num2){\n\
    \            return -1;\n        }\n        if(num1 > num2){\n            return\
    \ 1;\n        }\n        if(num1 === num2){\n            return a - b;\n     \
    \   }\n    });\n    return newArr;\n}", "var newObj = {};\nvar pointsSum;\nvar\
    \ newArray = [];\nvar lowerIndex = [];\n", "    let summ = nums.map(function(value){\n\
    \        return value.toString().split('').reduce(function(a,b){\n           \
    \ return +a + +b;\n        })\n    });\n    return nums.map(function(value,index){\n\
    \        return summ.indexOf(summ[index])\n    })\n}", "\tlet obj = {};\n\tfor(let\
    \ i = 0; i < nums.length; i++){\n\t\tlet sum = 0;\n\t\tlet stringified = nums[i].toString();\n\
    \t\tfor(let j = 0; j < stringified.length; j++){\n\t\t\tsum += parseInt(stringified[j])\n\
    \t\t}\n\t\tobj[nums[i]] = sum;\n\t}\n\tlet sorted_array = [];\n\tlet sorted =\
    \ Object.keys(obj).sort(function(a,b){return obj[a]-obj[b]});\n\tfor(let key in\
    \ sorted){\n\t\tsorted_array.push(parseInt(sorted[key]))\n\t}\n\treturn sorted_array;\n\
    }", "  return nums.sort((a, b) => {\n    return (a + '').split('').reduce((sum,\
    \ num) => {\n      return sum + (+num);\n    }, 0) - (b + '').split('').reduce((sum,\
    \ num) => {\n      return sum + (+num);\n    }, 0);\n  });\n}", "    var output\
    \ = [];\n    var sumArr = [];\n    for(var i = 0; i < nums.length; i++){\n   \
    \     var sum = 0;\n        var num = nums[i];\n        while(num > 0){\n    \
    \        sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n\
    \        sumArr.push(sum);\n    }\n    for(var i = 0; i < sumArr.length; i++){\n\
    \        for(var j = i; j < sumArr.length; j++){\n            if(sumArr[i] > sumArr[j]){\n\
    \                var temp = sumArr[i];\n                sumArr[i] = sumArr[j];\n\
    \                sumArr[j] = temp;\n                temp = nums[i];\n        \
    \        nums[i] = nums[j];\n                nums[j] = temp;\n            }\n\
    \        }\n    }\n    return nums;\n}", "\tnums.sort(function(a,b){\n\t\tvar\
    \ sumA = a.toString().split('').reduce(function(sum,current){\n\t\t\treturn sum\
    \ + parseInt(current);\n\t\t},0);\n\t\tvar sumB = b.toString().split('').reduce(function(sum,current){\n\
    \t\t\treturn sum + parseInt(current);\n\t\t},0);\n\t\tif(sumA === sumB){\n\t\t\
    \treturn nums.indexOf(a) - nums.indexOf(b);\n\t\t}else{\n\t\t\treturn sumA - sumB;\n\
    \t\t}\n\t});\n\treturn nums;\n}\n", "    let result = [];\n    for (let i = 0;\
    \ i < nums.length; i++) {\n        let splittedNum = nums[i].toString().split('');\n\
    \        let sumOfNums = 0;\n        for (let j = 0; j < splittedNum.length; j++)\
    \ {\n            sumOfNums += Number(splittedNum[j]);\n        }\n        result.push({\n\
    \            num: nums[i],\n            sum: sumOfNums,\n            index: i\n\
    \        });\n    }\n    result.sort((a, b) => {\n        if (a.sum === b.sum)\
    \ {\n            return a.index - b.index;\n        }\n        return a.sum -\
    \ b.sum;\n    });\n    for (let i = 0; i < result.length; i++) {\n        result[i]\
    \ = result[i].num;\n    }\n    return result;\n}", "    let ordered = nums.map((e,i)=>{\n\
    \        let result = 0;\n        for(let j = 0; j < e.toString().length; j++){\n\
    \            result += parseInt(e.toString()[j]);\n        }\n        return [result,\
    \ i];\n    }).sort((a,b)=>{\n        if(a[0] === b[0]){\n            return a[1]\
    \ - b[1];\n        }\n        return a[0] - b[0];\n    });\n    return ordered.map(e=>{\n\
    \        return nums[e[1]];\n    });\n}\n", "    let a = [];\n    let b = [];\n\
    \    let res = [];\n    nums.forEach(function(num){\n        a.push(sum(num));\n\
    \    });\n    a.forEach(function(num, index){\n        b.push([num, index]);\n\
    \    });\n    b.sort();\n    b.forEach(function(num){\n        res.push(nums[num[1]]);\n\
    \    });\n    return res;\n}", "    var num = 0;\n    var container = [];\n  \
    \  for(var i = 0; i < nums.length; i++){\n        num = 0;\n        var temp =\
    \ nums[i].toString().split('');\n        for(var j = 0; j < temp.length; j++){\n\
    \            num += parseInt(temp[j]);\n        }\n        container.push(num);\n\
    \    }\n    var newArr = [];\n    for(var k = 0; k < container.length; k++){\n\
    \        newArr.push(container.indexOf(Math.min.apply(null, container)));\n  \
    \      container[container.indexOf(Math.min.apply(null, container))] = Number.MAX_VALUE;\n\
    \    }\n    var finalArr = [];\n    for(var l = 0; l < newArr.length; l++){\n\
    \        finalArr.push(nums[newArr[l]]);\n    }\n    return finalArr;\n}\norder_by_points([109,\
    \ 5, 25])", "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        let sumB = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return sumA - sumB;\n    });\n}\n",
  "    function sum_of_digits(num){\n        var count = 0;\n        var n = num;\n\
    \        while(n > 0){\n            var last_digit = n % 10;\n            count\
    \ += last_digit;\n            n = (n - last_digit) / 10;\n        }\n        return\
    \ count;\n    }\n    var obj = {}\n    for(var i = 0; i < nums.length; i++){\n\
    \        obj[nums[i]] = sum_of_digits(nums[i]);\n    }\n    var sorted_nums =\
    \ Object.keys(obj).sort(function(a, b){\n        return obj[a] - obj[b];\n   \
    \ });\n    for(var i = 0; i < sorted_nums.length; i++){\n        sorted_nums[i]\
    \ = parseInt(sorted_nums[i]);\n    }\n    return sorted_nums;\n}", "    let sums\
    \ = []\n    for(let num of nums){\n        let sum = 0\n        while(num > 0){\n\
    \            sum += num % 10\n            num = Math.floor(num / 10)\n       \
    \ }\n        sums.push(sum)\n    }\n    console.log(sums)\n    let sorted = []\n\
    \    while(nums.length > 0){\n        let index = 0\n        let max = sums[0]\n\
    \        for(let i=1; i<sums.length; i++){\n            if(sums[i] > max){\n \
    \               max = sums[i]\n                index = i\n            }\n    \
    \    }\n        sorted.push(nums[index])\n        sums.splice(index, 1)\n    \
    \    nums.splice(index, 1)\n    }\n    return sorted\n}\n", "    nums.sort(function(a,\
    \ b){\n        return digit_sum(a) - digit_sum(b);\n    });\n    return nums;\n\
    }", "    var result = [];\n    nums.forEach(function(num){\n        var sum =\
    \ num.toString().split('').reduce(function(a,b){\n            return parseInt(a)\
    \ + parseInt(b);\n        });\n        var index = result.findIndex(function(elem){\n\
    \            return elem.sum < sum;\n        });\n        if(index !== -1){\n\
    \            result.splice(index, 0, {sum: sum, num: num});\n        } else {\n\
    \            result.push({sum: sum, num: num});\n        }\n    });\n    return\
    \ result.map(function(elem){\n        return elem.num;\n    });\n}\n", "    return\
    \ nums.sort((a, b) => {\n        return (a + '').split('').reduce((acc, current)\
    \ => {\n            return acc + parseInt(current);\n        }, 0) - (b + '').split('').reduce((acc,\
    \ current) => {\n            return acc + parseInt(current);\n        }, 0);\n\
    \    });\n}\n", "    return nums.sort((a, b) => sumDigits(a) - sumDigits(b));\n\
    }\n", "    // let {reduce, call, concat, sort, map} = Array.prototype;\n    //\
    \ return reduce.call(nums, (acc, num) => {\n    //     return concat.call(acc,\
    \ call.call(reduce.call(String(num), (sum, i) => {\n    //         return sum\
    \ + parseInt(i);\n    //     }, 0), (a, b) => {\n    //         return a - b;\n\
    \    //     }))\n    // }, []);\n    // return nums.reduce((acc, num) => {\n \
    \   //     return acc.concat(Array.prototype.reduce.call(String(num), (sum, i)\
    \ => {\n    //         return sum + parseInt(i);\n    //     }, 0).sort((a, b)\
    \ => {\n    //         return a - b;\n    //     }))\n    // }, []);\n    // return\
    \ nums.reduce((acc, num) => {\n    //     return acc.concat(Array.prototype.reduce.call(String(num),\
    \ (sum, i) => {\n    //         return sum + parseInt(i);\n    //     }, 0).sort((a,\
    \ b) => {\n    //         return a - b;\n    //     }));\n    // }, []);\n   \
    \ return nums.reduce((acc, num) => {\n        return acc.concat(Array.prototype.reduce.call(String(num),\
    \ (sum, i) => {\n            return sum + parseInt(i);\n        }, 0).sort((a,\
    \ b) => {\n            return a - b;\n        }));\n    }, []);\n}", "    let\
    \ result = [];\n    result = nums.map(num => {\n      let digits = num.toString().split('');\n\
    \      let sum = digits.reduce((a,b) => {\n        return parseInt(a) + parseInt(b);\n\
    \      }, 0);\n      return [num, sum];\n    });\n    result.sort((a,b) => {\n\
    \      if (a[1] === b[1]) {\n        return a[0] - b[0];\n      } else {\n   \
    \     return a[1] - b[1];\n      }\n    });\n    return result.map(item => item[0]);\n\
    \  }\n  ", "    // console.log(nums);\n    for(let i = 0; i < nums.length; i++){\n\
    \        for(let j = 0; j < nums.length - 1; j++){\n            if(getSum(nums[j])\
    \ > getSum(nums[j+1])){\n                let temp = nums[j];\n               \
    \ nums[j] = nums[j+1];\n                nums[j+1] = temp;\n            }\n   \
    \     }\n    }\n    return nums;\n}", "  return nums.map(function(num, idx) {\n\
    \    return {\n      'num': num,\n      'points': (num + '').split('').reduce(function(a,\
    \ b) {\n        return a + parseInt(b);\n      }, 0),\n      'idx': idx\n    };\n\
    \  }).sort(function(a, b) {\n    if (a.points > b.points) {\n      return 1;\n\
    \    } else if (a.points < b.points) {\n      return -1;\n    } else {\n     \
    \ return a.idx - b.idx;\n    }\n  }).map(function(el) {\n    return el.num;\n\
    \  });\n}\n", "\tvar x = [];\n\tvar y = [];\n\tvar z = [];\n\tvar sum = 0;\n\t\
    var count = 0;\n\tfor(var i = 0; i < nums.length; i++){\n\t\tsum = nums[i].toString().split('').reduce(function(a,b){return\
    \ parseInt(a) + parseInt(b)});\n\t\tx.push(sum);\n\t\ty.push(i);\n\t}\n\tx.forEach(function(a,b){\n\
    \t\tz.push([a,y[b]]);\n\t});\n\tz.sort(function(a,b){\n\t\tif(a[0] == b[0]){\n\
    \t\t\treturn a[1] - b[1];\n\t\t}else{\n\t\t\treturn a[0] - b[0];\n\t\t}\n\t});\n\
    \tconsole.log(z);\n\tconsole.log(z.map(function(a){return a[1]}));\n\tconsole.log(z.map(function(a){return\
    \ a[1]}).map(function(a){return nums[a]}));\n\treturn z.map(function(a){return\
    \ a[1]}).map(function(a){return nums[a]});\n}", "  return nums.sort((a, b) =>\
    \ sum(a) == sum(b) ? a - b : sum(a) - sum(b));\n}\n", "    for(var i = 0; i <\
    \ nums.length; i++){\n        nums[i] = nums[i].toString();\n    }\n    var index\
    \ = 0;\n    var array = [];\n    while(index < nums.length){\n        array.push(nums[index].split('').reduce(function(a,b){return\
    \ parseInt(a) + parseInt(b);}));\n        index++;\n    }\n    var points = array.slice(0);\n\
    \    points.sort(function(a,b){return a - b;});\n    var sorted = [];\n    var\
    \ index2 = 0;\n    while(index2 < nums.length){\n        sorted.push(nums[array.indexOf(points[index2])]);\n\
    \        index2++;\n    }\n    return sorted;\n}\n", "  let arr=[]\n  for(let\
    \ i=0;i<nums.length;i++){\n    let chars=String(nums[i]).split('')\n    let sum=0\n\
    \    for(let j=0;j<chars.length;j++){\n      sum+=Number(chars[j])\n    }\n  \
    \  arr.push({index:i,sum:sum,value:nums[i]})\n  }\n  return arr.sort((a,b)=>{\n\
    \    if(a.sum===b.sum){\n      return a.index-b.index\n    }\n    return a.sum-b.sum\n\
    \  }).map(x=>x.value)\n}", "  // ...\n  let newArr = [];\n  nums.forEach(function(num)\
    \ {\n      let sum = 0;\n      let arr = num.toString().split('');\n      arr.forEach(function(ele)\
    \ {\n          sum += parseInt(ele);\n      });\n      newArr.push([num, sum]);\n\
    \  });\n  let sorted = newArr.sort(function(a, b) {\n      if (a[1] === b[1])\
    \ {\n          return a[0] - b[0];\n      } else {\n          return a[1] - b[1];\n\
    \      }\n  });\n  for (let i = 0; i < sorted.length; i++) {\n      sorted[i]\
    \ = sorted[i][0];\n  }\n  return sorted;\n}", "    let arr = [];\n    for (let\
    \ num of nums){\n        let sum = 0;\n        while (num > 0){\n            sum\
    \ += num % 10;\n            num = Math.floor(num / 10);\n        }\n        arr.push(sum);\n\
    \    }\n    return arr;\n}", "    return nums.sort((a, b) => {\n        let sumA\
    \ = sumDigits(a),\n            sumB = sumDigits(b);\n        if (sumA === sumB)\
    \ return a - b;\n        return sumA - sumB;\n    });\n}", "  nums.sort(function(a,\
    \ b){\n    return sum(a) - sum(b);\n  });\n  return nums;\n}", "     return nums.sort((a,b)=>{\n\
    \         if(sumOfDigits(a) == sumOfDigits(b)){\n             return nums.indexOf(a)\
    \ - nums.indexOf(b);\n         }\n         return sumOfDigits(a) - sumOfDigits(b);\n\
    \     });\n}\n", "    let string = '';\n    let arr = [];\n    for(let i = 0;\
    \ i < nums.length; i++){\n        string = '' + nums[i];\n        let sum = 0;\n\
    \        for(let j = 0; j < string.length; j++){\n            sum += parseInt(string[j]);\n\
    \        }\n        arr.push(sum);\n    }\n    for(let i = 0; i < arr.length;\
    \ i++){\n        for(let j = 0; j < arr.length; j++){\n            if(arr[i] <\
    \ arr[j]){\n                let temp = arr[i];\n                arr[i] = arr[j];\n\
    \                arr[j] = temp;\n                let temp2 = nums[i];\n      \
    \          nums[i] = nums[j];\n                nums[j] = temp2;\n            }\n\
    \        }\n    }\n    return nums;\n}", "    const ordered = [];\n    const loop\
    \ = nums.length;\n    for(let i = 0; i < loop; i++){\n        let highest = nums[0];\n\
    \        let index = 0;\n        nums.forEach((num, index2) => {\n           \
    \ if(get_sum(num) > get_sum(highest)){\n                highest = num;\n     \
    \           index = index2;\n            }\n        });\n        ordered.push(highest);\n\
    \        nums.splice(index, 1);\n    }\n    return ordered;\n}", "    var index\
    \ = 0;\n    var max_index = 0;\n    var max_sum = 0;\n    var sum = 0;\n    var\
    \ sum_list = [];\n    var result = [];\n    var asc = [];\n    var order = 0;\n\
    \    var temp;\n    while(index < nums.length){\n        sum = 0;\n        var\
    \ num = nums[index];\n        while(num > 0){\n            sum += num % 10;\n\
    \            num = Math.floor(num / 10);\n        }\n        if(sum > max_sum){\n\
    \            max_sum = sum;\n            max_index = index;\n        }\n     \
    \   sum_list.push(sum);\n        index++;\n    }\n    var length = sum_list.length;\n\
    \    for(var i = 0; i < length; i++){\n        for(var j = i + 1; j < length;\
    \ j++){\n            if(sum_list[i] > sum_list[j]){\n                temp = sum_list[i];\n\
    \                sum_list[i] = sum_list[j];\n                sum_list[j] = temp;\n\
    \                temp = nums[i];\n                nums[i] = nums[j];\n       \
    \         nums[j] = temp;\n            }\n        }\n    }\n    return nums;\n\
    }\n", '//solution #1', "    let comparator = function(a, b) {\n        let a_sum\
    \ = a.toString().split('').reduce((sum, curr) => sum + parseInt(curr), 0);\n \
    \       let b_sum = b.toString().split('').reduce((sum, curr) => sum + parseInt(curr),\
    \ 0);\n        return a_sum - b_sum;\n    };\n    return nums.sort(comparator);\n\
    }\n", "    return nums.sort((a, b) => {\n        let num1 = a.toString().split('').reduce((sum,\
    \ num) => sum + +num, 0);\n        let num2 = b.toString().split('').reduce((sum,\
    \ num) => sum + +num, 0);\n        return num1 > num2 ? 1 : -1;\n    });\n}\n",
  "  let obj = nums.map((x, i) => {\n    return {\n      item: x,\n      sum: x.toString().split('').reduce((a,b)\
    \ => +a + +b),\n      index: i\n    }\n  })\n  obj.sort((a,b) => {\n    if (a.sum\
    \ === b.sum) {\n      return a.index - b.index\n    } else {\n      return a.sum\
    \ - b.sum\n    }\n  })\n  return obj.map(x => x.item)\n}", "    return nums.sort((a,\
    \ b) => {\n        if (sum_of_digits(a) == sum_of_digits(b)) {\n            return\
    \ nums.indexOf(a) - nums.indexOf(b);\n        }\n        return sum_of_digits(a)\
    \ - sum_of_digits(b);\n    });\n}\n", "    return nums.sort((a, b) => (sum(a)\
    \ > sum(b)) ? 1 : -1);\n}", "    const myObj = nums.reduce((a, b, i) => (a[b]\
    \ = i, a), {});\n    return nums.sort((a, b) => sumOfDigits(a) - sumOfDigits(b)\
    \ || myObj[a] - myObj[b]);\n}\n", "    let sum = (a) => {\n        return a.reduce((a,b)\
    \ => a+b, 0);\n    }\n    let digits = nums.map(a => a.toString().split('').map(n\
    \ => parseInt(n)));\n    return nums.sort((a,b) => {\n        if(sum(digits[nums.indexOf(a)])\
    \ > sum(digits[nums.indexOf(b)])) return 1;\n        if(sum(digits[nums.indexOf(a)])\
    \ < sum(digits[nums.indexOf(b)])) return -1;\n        return 0;\n    });\n}",
  "  \n  return nums.map(function(el){\n    return {\n      num: el,\n      sum: el.toString().split('').reduce(function(a,b){\n\
    \        return parseInt(a) + parseInt(b);\n      }, 0)\n    }\n  }).sort(function(a,b){\n\
    \    if(a.sum > b.sum) {\n      return 1;\n    }\n    if(a.sum < b.sum) {\n  \
    \    return -1;\n    }\n    return 0;\n  }).map(function(el){\n    return el.num;\n\
    \  });\n}", "    nums.sort(function(a, b){\n        var num1 = a.toString().split('').reduce(function(a,\
    \ b){\n            return +a + +b;\n        });\n        var num2 = b.toString().split('').reduce(function(a,\
    \ b){\n            return +a + +b;\n        });\n        return num1 - num2;\n\
    \    });\n    return nums;\n}\n", "    return nums.sort((a, b) => {\n        a\
    \ = a.toString();\n        b = b.toString();\n        let sumA = 0;\n        let\
    \ sumB = 0;\n        for (let i = 0; i < a.length; i++) {\n            sumA +=\
    \ Number(a[i]);\n        }\n        for (let i = 0; i < b.length; i++) {\n   \
    \         sumB += Number(b[i]);\n        }\n        if (sumA === sumB) {\n   \
    \         return nums.indexOf(a) - nums.indexOf(b);\n        }\n        return\
    \ sumA - sumB;\n    });\n}", "    let numsMap = new Map();\n    for (let i = 0;\
    \ i < nums.length; i++) {\n        let sum = 0;\n        let num = nums[i];\n\
    \        let stringNum = String(num);\n        for (let j = 0; j < stringNum.length;\
    \ j++) {\n            sum += Number(stringNum[j]);\n        }\n        numsMap.set(num,\
    \ sum);\n    }\n    numsMap = new Map([...numsMap.entries()].sort((a, b) => a[1]\
    \ - b[1]));\n    return Array.from(numsMap.keys());\n}\n", "    //...\n    //\
    \ ...\n    // ...\n    //\n    let res = nums.slice(0);\n    res.sort((a, b) =>\
    \ {\n        let sumA = a.toString().split('').reduce((sum, item) => sum + +item,\
    \ 0);\n        let sumB = b.toString().split('').reduce((sum, item) => sum + +item,\
    \ 0);\n        if (sumA < sumB) {\n            return -1;\n        } else if (sumA\
    \ > sumB) {\n            return 1;\n        } else {\n            return a - b;\n\
    \        }\n    });\n    return res;\n}\n", "    let arr = [];\n    let sum =\
    \ [];\n    let arrWithSum = [];\n    let arrWithSumObj = [];\n    let sorted;\n\
    \    for (let i = 0; i < nums.length; i++) {\n        arr.push(nums[i].toString().split(''));\n\
    \    }\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n   \
    \     for (let j = 0; j < arr[i].length; j++) {\n            num += Number(arr[i][j]);\n\
    \        }\n        sum.push(num);\n    }\n    for (let i = 0; i < sum.length;\
    \ i++) {\n        arrWithSum.push([sum[i], nums[i]]);\n    }\n    arrWithSum.sort((a,\
    \ b) => {\n        return a[0] - b[0];\n    });\n    for (let i = 0; i < arrWithSum.length;\
    \ i++) {\n        arrWithSumObj.push({sum: arrWithSum[i][0], num: arrWithSum[i][1]});\n\
    \    }\n    sorted = arrWithSumObj.sort((a, b) => {\n        return a.num - b.num;\n\
    \    });\n    return sorted.map(el => el.num);\n}\norder_by_points([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10]);\n", "    let numsLen = nums.length;\n    let resultArr\
    \ = [];\n    let inputArr = [];\n    let tempArr = [];\n    for(let i = 0; i <\
    \ numsLen; i++){\n        let tempSum = 0;\n        let tempStr = nums[i].toString();\n\
    \        for(let j = 0; j < tempStr.length; j++){\n            tempSum += +tempStr[j];\n\
    \        }\n        resultArr.push(tempSum);\n        inputArr.push(nums[i]);\n\
    \    }\n    console.log(resultArr);\n    console.log(inputArr);\n    let max =\
    \ resultArr[0];\n    for(let i = 0; i < numsLen; i++){\n        if(resultArr[i]\
    \ > max){\n            max = resultArr[i];\n        }\n    }\n    let counter\
    \ = 0;\n    let numsSumLen = max.toString().length;\n    for(let i = 0; i < numsSumLen;\
    \ i++){\n        for(let j = 0; j < numsLen; j++){\n            if(resultArr[j].toString().length\
    \ === numsSumLen - i){\n                tempArr.push(inputArr[j]);\n         \
    \       counter++;\n            }\n        }\n    }\n    console.log(tempArr);\n\
    \    console.log(counter);\n    //return counter;\n}\norder_by_points([1,3,3,3,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6",
  "    let result = [];\n    nums.sort((a, b) => ('' + a).split('').reduce((acc, cur)\
    \ => acc + +cur, 0) - ('' + b).split('').reduce((acc, cur) => acc + +cur, 0))\n\
    }", "  let sums = nums.map(x => x.toString().split('').reduce((acc,curr) => acc+\
    \ +curr,0));\n  let result = [];\n  let uniq_sums = [...new Set(sums)];\n  uniq_sums.sort((a,b)\
    \ => a-b);\n  for(let i=0; i<uniq_sums.length; i++){\n    let indexes = [];\n\
    \    for(let j=0; j<sums.length; j++){\n      if(sums[j] === uniq_sums[i]){\n\
    \        indexes.push(j);\n      }\n    }\n    for(let k=0; k<indexes.length;\
    \ k++){\n      result.push(nums[indexes[k]]);\n    }\n  }\n  return result;\n\
    }\n", "    \n}\n", "   return nums.sort((a,b)=>sumDig(a)-sumDig(b));\n}\n", " \
    \   // input: list of integers\n    // output: list of integers (sorted)\n   \
    \ // return nums.sort((a, b) => a-b); // Your code here\n    return nums.sort((a,\
    \ b) => {\n        return a - b;\n    });\n}\n", "\tlet sum = n => n.toString().split('').reduce((p,\
    \ c) => +p + +c, 0);\n\treturn nums.map((n, i) => ({n, s: sum(n), i}))\n\t\t.sort((a,\
    \ b) => a.s - b.s || a.i - b.i)\n\t\t.map(a => a.n);\n}", "    var result = []\n\
    \    for(var i = 0; i < nums.length; i++){\n        result.push(digitSum(nums[i]))\n\
    \    }\n    var min = result[0]\n    var index = 0\n    for(var i = 0; i < result.length;\
    \ i++){\n        if(result[i] < min){\n            min = result[i]\n         \
    \   index = i\n        }\n    }\n    var ordered_result = []\n    for(var i =\
    \ 0; i < result.length; i++){\n        ordered_result.push(nums[index])\n    \
    \    nums.splice(index, 1)\n        result.splice(index, 1)\n        min = result[0]\n\
    \        index = 0\n        for(var j = 0; j < result.length; j++){\n        \
    \    if(result[j] < min){\n                min = result[j]\n                index\
    \ = j\n            }\n        }\n    }\n    return ordered_result\n}\n", "   \
    \ //sort the numbers\n    var l = nums.length;\n    for(var i = 0; i < l; i++){\n\
    \        for(var j = 0; j < l; j++){\n            var n1 = nums[i].toString().split('').reduce(function(a,b){return\
    \ parseInt(a) + parseInt(b)},0);\n            var n2 = nums[j].toString().split('').reduce(function(a,b){return\
    \ parseInt(a) + parseInt(b)},0);\n            if(n1 > n2){\n                var\
    \ t = nums[i];\n                nums[i] = nums[j];\n                nums[j] =\
    \ t;\n            }\n        }\n    }\n    return nums;\n}\n", "    var obj={};\n\
    \    nums.forEach(function(item,i){\n        var str=item.toString();\n      \
    \  var sum=0;\n        for(var i=0;i<str.length;i++){\n            sum+=parseInt(str[i]);\n\
    \        }\n        if(obj[sum]===undefined){\n            obj[sum]=[item];\n\
    \        }\n        else{\n            obj[sum].push(item);\n        }\n    });\n\
    \    var result=[];\n    var keys=Object.keys(obj);\n    keys.sort(function(a,b){\n\
    \        return a-b;\n    });\n    keys.forEach(function(item){\n        obj[item].forEach(function(item2){\n\
    \            result.push(item2);\n        });\n    });\n    return result;\n}",
  "    return nums.map(x => {\n        let digits = (x + '').split('').map(Number);\n\
    \        let sum = digits.reduce((a, b) => a + b, 0);\n        return {n: x, sum:\
    \ sum};\n    }).sort((a, b) => {\n        if (a.sum === b.sum) return a.n - b.n;\n\
    \        return a.sum - b.sum;\n    }).map(o => o.n);\n}\n", "  return nums.map(function(n,i){\n\
    \    return {number: n, index: i};\n  }).sort(function(a,b){\n    return a.number.toString().split('').reduce(function(sum,c){\n\
    \      return sum + parseInt(c);\n    },0) - b.number.toString().split('').reduce(function(sum,c){\n\
    \      return sum + parseInt(c);\n    },0);\n  }).map(function(n){\n    return\
    \ n.number;\n  });\n}\n", "    let array = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        let sum = 0;\n        let element = nums[i].toString();\n  \
    \      for (let j = 0; j < element.length; j++) {\n            sum += Number(element[j]);\n\
    \        }\n        array.push(sum);\n    }\n    let newArray = [];\n    let newArray2\
    \ = [];\n    for (let i = 0; i < array.length; i++) {\n        if (array[i] ===\
    \ array[i + 1]) {\n            newArray.push(nums[i]);\n            newArray2.push(array[i]);\n\
    \        } else {\n            newArray.push(nums[i]);\n            newArray2.push(array[i]);\n\
    \        }\n    }\n    console.log(newArray);\n    console.log(newArray2);\n \
    \   let sorted = newArray2.sort();\n    console.log(sorted);\n    let result =\
    \ [];\n    for (let i = 0; i < sorted.length; i++) {\n        for (let j = 0;\
    \ j < newArray2.length; j++) {\n            if (sorted[i] === newArray2[j]) {\n\
    \                result.push(newArray[j]);\n            }\n        }\n    }\n\
    \    return result;\n}", "var newArr = [];\nvar sumArr = [];\nvar sumObj = {};\n\
    var sumStr = \"\";\nvar str = \"\";\nvar sum = 0;\nfor(var i = 0; i < nums.length;\
    \ i++){\n  var num = nums[i];\n  str = num.toString();\n  sum = 0;\n  for(var\
    \ j = 0; j < str.length; j++){\n    sum += parseInt(str[j]);\n  }\n  newArr.push(sum);\n\
    \  sumObj[i] = sum;\n}\nnewArr.sort(function(a,b){return a-b});\nfor(var i = 0;\
    \ i < newArr.length; i++){\n  sumStr += newArr[i].toString();\n}\nfor(var key\
    \ in sumObj){\n  for(var i = 0; i < sumStr.length; i++){\n    if(sumObj[key] ==\
    \ parseInt(sumStr[i])){\n      sumArr.push(nums[key]);\n    }\n  }\n}\nreturn\
    \ sumArr;\n}\n", "    nums.sort(function(a, b){\n        return sum_of_digits(a)\
    \ - sum_of_digits(b);\n    });\n    return nums;\n}", "    var sortedNums = nums.sort(function(a,\
    \ b){\n        var sumA = a.toString().split('').reduce(function(acc, curr){\n\
    \            return acc + parseInt(curr);\n        }, 0);\n        var sumB =\
    \ b.toString().split('').reduce(function(acc, curr){\n            return acc +\
    \ parseInt(curr);\n        }, 0);\n        return sumA - sumB;\n    });\n    return\
    \ sortedNums;\n}\n", "    // nums = [4, 10, 6, 11]\n    return nums.sort((a, b)\
    \ => sum_of_digits(a) - sum_of_digits(b));\n}\n", "    // TODO: Your implementation\
    \ goes here\n    if(nums.length === 0){\n        return nums;\n    }\n    var\
    \ result = nums.map(function(a,b){\n        return {number: a, index: b};\n  \
    \  });\n    result.sort(function(a,b){\n        var first = a.number.toString().split('').reduce(function(a,b){\n\
    \            return parseInt(a)+parseInt(b);\n        });\n        var second\
    \ = b.number.toString().split('').reduce(function(a,b){\n            return parseInt(a)+parseInt(b);\n\
    \        });\n        if(first === second){\n            return a.index - b.index;\n\
    \        }else{\n            return first - second;\n        }\n    });\n    return\
    \ result.map(function(a){\n        return a.number;\n    });\n}\n", "    return\
    \ nums.sort((a, b) => {\n        if(a % 10 + Math.floor(a / 10) > b % 10 + Math.floor(b\
    \ / 10)){\n            return 1;\n        } else if(a % 10 + Math.floor(a / 10)\
    \ < b % 10 + Math.floor(b / 10)){\n            return -1;\n        } else {\n\
    \            return 0;\n        }\n    });\n}", "    var result = nums.map(function(num){\n\
    \        return {num: num, sum: getSumOfDigits(num)};\n    });\n    result.sort(function(a,\
    \ b){\n        return a.sum === b.sum ? a.num - b.num : a.sum - b.sum;\n    });\n\
    \    return result.map(function(item){return item.num;});\n}\n", "    var result\
    \ = nums.map(function(x){\n        return [x, x.toString().split('').reduce(function(a,b){\n\
    \            return parseInt(a) + parseInt(b);\n        }, 0)];\n    }).sort(function(a,b){\n\
    \        return a[1] - b[1];\n    });\n    return result.map(function(x){\n  \
    \      return x[0];\n    });\n}", "    var objectArr = [];\n    nums.forEach(function(num){\n\
    \        var sumOfDigits = 0;\n        var charArray = num.toString().split('');\n\
    \        charArray.forEach(function(ch){\n            sumOfDigits += parseInt(ch);\n\
    \        });\n        objectArr.push({sum: sumOfDigits, num: num});\n    });\n\
    \    return objectArr.sort(function(a, b){\n        if(a.sum === b.sum){\n   \
    \         return a.num - b.num;\n        }\n        return a.sum - b.sum;\n  \
    \  }).map(function(obj){\n        return obj.num;\n    });\n}", "    var new_nums\
    \ = [];\n    for(var i = 0; i < nums.length; i++){\n        var sum = 0;\n   \
    \     for(var j = 0; j < nums[i].toString().length; j++){\n            sum +=\
    \ parseInt(nums[i].toString()[j]);\n        }\n        var obj = {\n         \
    \   'n': nums[i],\n            's': sum\n        };\n        new_nums.push(obj);\n\
    \    }\n    console.log(new_nums);\n    new_nums.sort(function(a, b){\n      \
    \  if(a.s === b.s){\n            return a.n - b.n;\n        }\n        return\
    \ a.s - b.s;\n    });\n    for(var k = 0; k < new_nums.length; k++){\n       \
    \ nums[k] = new_nums[k].n;\n    }\n    return nums;\n}\n", "    // return nums;\n\
    \    let arrayToReturn = [];\n    let sortedArrayByAscending = nums.slice().sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < nums.length; i++) {\n        for (let\
    \ j = 0; j < nums.length; j++) {\n            if (sortedArrayByAscending[i] ===\
    \ nums[j]) {\n                arrayToReturn.push(nums[j]);\n            }\n  \
    \      }\n    }\n    return arrayToReturn;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
