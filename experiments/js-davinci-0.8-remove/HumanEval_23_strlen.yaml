name: HumanEval_23_strlen
language: js
prompt: "//Return length of given string\nfunction strlen(string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = strlen;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
  x\"),1);\n  assert.deepEqual(candidate(\"asdasnakj\"),9);\n}\n\ntest();"
completions: ["\treturn string.length;\n}\n", "\treturn string.length;\n}\n", "\t\
    return string.length;\n}\n", "\tvar i = 0;\n\twhile(string[i] != undefined){\n\
    \t\ti++;\n\t}\n\treturn i;\n}\n", "    return string.length;\n}\n", "\treturn\
    \ string.length;\n}\n", "\treturn string.length;\n}\n", "    return string.length;\n\
    }\n", "    return string.length;\n}\n", "\treturn string.length;\n}\n", "\treturn\
    \ string.length;\n}\n", "    return string.length;\n}\n", "    return string.length;\n\
    }", "    if(typeof string != \"string\"){\n        throw new TypeError();\n  \
    \  }\n    return string.length;\n}", "    return string.length;\n}\n", "    return\
    \ string.length;\n}\n", "    if (typeof string !== 'string'){\n        throw new\
    \ Error(\"The value is not a string.\");\n    }\n    return string.length;\n}\n",
  "    return string.length;\n}", "    var ret = 0;\n    for(var i = 0; i < string.length;\
    \ i++){\n        ret++;\n    }\n    return ret;\n}\n", "  return string.length;\n\
    }\n", "    return string.length;\n}\n", "\tvar count = 0;\n\tfor(var i = 0; string[i]\
    \ !== undefined; i++){\n\t\tcount ++;\n\t}\n\treturn count;\n}\n", "    var counter\
    \ = 0;\n    for(var i = 0; i < string.length; i++){\n        counter++;\n    }\n\
    \    return counter;\n}\n", "    return string.length;\n}\n", "\treturn string.length;\n\
    }\n", "    if (string === '') return 0;\n    return string.length;\n}\n", "\t\
    return string.toString().length;\n}\n", "\treturn string.length;\n}\n", "\treturn\
    \ string.length;\n}\n", "\treturn string.length;\n}\n", "    var length = 0;\n\
    \    for(var i = 0; i < string.length; i++){\n        length++;\n    }\n    return\
    \ length;\n}\n", "\treturn string.length;\n}\n", "\treturn string.length;\n}\n",
  "    string = string.trim();\n    return string.length;\n}\n", "    return string.length;\n\
    }\n", "\t//Retrieve the length of given string\n\tvar stringLength = string.length;\n\
    \t//Return length of given string\n\treturn stringLength;\n}\n", "\tvar count\
    \ = 0;\n\t\n\twhile(string[count] != undefined){\n\t\tcount++;\n\t}\n\t\n\treturn\
    \ count;\n}\n", "\treturn string.length;\n}\n", "\treturn string.length;\n}\n",
  "    let count = 0;\n    let char = string.split('');\n    for(let i = 0; i < char.length;\
    \ i++){\n        count++;\n    }\n    return count;\n}", "    return string.length;\n\
    }", "\treturn string.length;\n}\n", "\treturn string.length;\n}\n", "\tvar count\
    \ = 0;\n\tfor(var i = 0; i < string.length; i++){\n\t\tcount++;\n\t}\n\treturn\
    \ count;\n}\n", "    var strlen = 0;\n    while(string[strlen] != '\\0'){\n  \
    \      strlen++;\n    }\n    return strlen;\n}\n", "  //Trim whitespace\n  string\
    \ = string.replace(/^\\s+|\\s+$/g,\"\");\n  var i = 0;\n  while(string.charAt(i)\
    \ != \"\"){\n    i++;\n  }\n  return i;\n}\n", "\tvar length = 0;\n\tvar c = '';\n\
    \tfor(var i = 0; c = string.charAt(i); i++){\n\t\tvar cc = c.charCodeAt(0);\n\t\
    \tif(cc < 0x81){\n\t\t\tlength++;\n\t\t}else if(cc < 0x800){\n\t\t\tlength +=\
    \ 2;\n\t\t}else if(cc < 0x10000){\n\t\t\tlength += 3;\n\t\t}else{\n\t\t\tlength\
    \ += 4;\n\t\t}\n\t}\n\treturn length;\n}\n", "\tvar i = 0;\n\tfor(; i < string.length;\
    \ i++){}\n\treturn i;\n}\n", "\treturn string.length;\n}\n", "\tvar i = 0;\n\t\
    while(string[i] != null){\n\t\ti++;\n\t}\n\treturn i;\n}\n", "    return string.length;\n\
    }\n", "  var length = 0;\n  for(i = 0; i < string.length; i++){\n    if(string[i]\
    \ != ' '){\n      length++;\n    }\n  }\n  return length;\n}\n\n", "\treturn string.length;\n\
    }\n", "\treturn string.length;\n}\n", "\treturn string.length;\n}\n", "    var\
    \ length = 0;\n    for(var i = 0; i < string.length; i++){\n        length++;\n\
    \    }\n    return length;\n}\n", "\treturn string.length;\n}\n", "    return\
    \ string.length;\n}\n", "\treturn string.length;\n}\n", "    var len = 0;\n  \
    \  for(var i = 0; i < string.length; i++){\n        len++;\n    }\n    return\
    \ len;\n}\n", "    return string.length;\n}\n", "  return string.length;\n}",
  "    return string.length;\n}", "\treturn string.length;\n}\n", "    var len = 0;\n\
    \    while(string[len] != undefined){\n        len++;\n    }\n    return len;\n\
    }\n", "    var len = 0;\n    while(string[len]!==undefined){\n        len++;\n\
    \    }\n    return len;\n}\n", "    return string.length;\n}\n", "\tvar length\
    \ = 0;\n\tfor(var i = 0; i < string.length; i++){\n\t\tlength += string.charCodeAt(i)\
    \ < 0 || string.charCodeAt(i) > 255 ? 1 : 0.5;\n\t}\n\treturn length;\n}\n", "\t\
    return string.length;\n}\n", "    var count = 0;\n    while(string[count] != undefined){\n\
    \        count++;\n    }\n    return count;\n}\n", "  return string.length;\n\
    }\n", "    return string.length;\n}\n", "    return string.length;\n}\n", "\t\
    var i=0;\n\twhile(string[i] != undefined){\n\t\ti++;\n\t}\n\treturn i;\n}\n",
  "\treturn string.length;\n}\n", "  let counter = 0;\n  while(string[counter] !==\
    \ undefined){\n    counter++;\n  }\n  return counter;\n}\n", "    return string.length;\n\
    }\n", "    return string.length;\n}\n", "\treturn string.length;\n}\n", "\tif\
    \ (string == null) return -1;\n\tif (string == undefined) return -1;\n\tif (string\
    \ == \"\") return 0;\n\tif (string.length != undefined) return string.length;\n\
    \treturn -1;\n}\n", "\treturn string.length;\n}\n", "    return string.length;\n\
    }\n", "    // strlen() - A built-in JS function to return the length of string\n\
    \    var str_length = string.length;\n    return str_length;\n}\n", "    return\
    \ string.length;\n}\n", "\treturn string.length;\n}\n", "\treturn string.length;\n\
    }\n", "    return string.length;\n}\n", "\treturn string.length;\n}\n", "\treturn\
    \ string.length;\n}\n", "\treturn string.length;\n}\n", "  return string.length;\n\
    }\n", "\treturn string.length;\n}\n", "\treturn string.length;\n}\n", "\treturn\
    \ string.length;\n}\n", "    return string.length;\n}\n", "\tvar len = 0;\n\t\
    for(var i = 0; i < string.length; i++){\n\t\tvar val = string.charCodeAt(i);\n\
    \t\tlen += val < 0x0800 ? 1 : val < 0xD800 || val >= 0xE000 ? 2 : 3;\n\t}\n\t\
    return len;\n}\n", "\treturn string.length;\n}\n", "    return string.length;\n\
    }\n", "    string += '';\n    var i = 0,\n        chr = '',\n        lgth = 0;\n\
    \n    if (!this.php_js || !this.php_js.ini || !this.php_js.ini['unicode.semantics']\
    \ || this.php_js.ini['unicode.semantics'].local_value.toLowerCase() !== 'on')\
    \ {\n        return string.length;\n    }\n\n    var getWholeChar = function (str,\
    \ i) {\n        var code = str.charCodeAt(i);\n        var next = '',\n      \
    \      prev = '';\n        if (0xD800 <= code && code <= 0xDBFF) { // High surrogate\
    \ (could change last hex to 0xDB7F to treat high private surrogates as single\
    \ characters)\n            if (str.length <= (i + 1)) {\n                throw\
    \ 'High surrogate without following low surrogate';\n            }\n         \
    \   next = str.charCodeAt(i + 1);\n            if (0xDC00 > next || next > 0xDFFF)\
    \ {\n                throw 'High surrogate without following low surrogate';\n\
    \            }\n            return str.charAt(i) + str.charAt(i + 1);\n      \
    \  } else if (0xDC00 <= code && code <= 0xDFFF) { // Low surrogate\n         \
    \   if (i === 0) {\n                throw 'Low surrogate without preceding high\
    \ surrogate';\n            }\n            prev = str.charCodeAt(i - 1);\n    \
    \        if (0xD800 > prev || prev > 0xDBFF) { //(could change last hex to 0xDB7F\
    \ to treat high private surrogates as single characters)\n                throw\
    \ 'Low surrogate without preceding high surrogate';\n            }\n         \
    \   return false; // We can pass over low surrogates now as the second component\
    \ in a pair which we have already processed\n        }\n        return str.charAt(i);\n\
    \    };\n\n    for (i = 0, lgth = 0; i < string.length; i++) {\n        if ((chr\
    \ = getWholeChar(string, i)) === false) {\n            continue;\n        } //\
    \ Adapt this line at the top of any loop, passing in the whole string and the\
    \ current iteration and", "\treturn string.length;\n}\n", "\treturn string.length;\n\
    }\n", "\treturn string.length;\n}\n", "\t//Your code here\n\tvar len = 0;\n\t\
    var count = 0;\n\tvar str = \"Hello, World!\";\n\twhile(len <= str.length){\n\t\
    \tlen++;\n\t\tcount++;\n\t}\n\treturn count;\n}", "\treturn string.length;\n}\n",
  "\treturn string.length;\n}\n", "\tvar counter = 0;\n\twhile(string[counter] !=\
    \ undefined){\n\t\tcounter++;\n\t}\n\treturn counter;\n}\n", "    var length =\
    \ 0;\n    while(string[length] != undefined){\n        length++;\n    }\n    return\
    \ length;\n}\n", "    return string.length;\n}", "    return string.length;\n\
    }\n", "\treturn(string.length);\n}\n", "\treturn string.length;\n}\n", "\tvar\
    \ len = 0;\n\tfor(var i = 0; i < string.length; i++){\n\t\tif(string.charCodeAt(i)\
    \ > 127 || string.charCodeAt(i) == 94){\n\t\t\tlen += 2;\n\t\t} else {\n\t\t\t\
    len ++;\n\t\t}\n\t}\n\treturn len;\n}", "  return string.length;\n}\n", "\tvar\
    \ length = 0;\n\tfor(var i = 0; i < string.length; i++){\n\t\tif(string.charCodeAt(i)\
    \ > 128){\n\t\t\tlength += 2;\n\t\t}else{\n\t\t\tlength += 1;\n\t\t}\n\t}\n\t\
    return length;\n}\n", "\t//Source: http://www.w3schools.com/jsref/jsref_length_string.asp\n\
    \treturn string.length;\n}\n", "\treturn string.length;\n}\n", "  return string.length;\n\
    }", "    var i = 0;\n    while(string[i] != '\\0') i++;\n    return i;\n}\n",
  "    return string.length;\n}\n", "    if(!string)\n        return 0;\n    return\
    \ string.length;\n}\n", "    return string.length;\n}\n", "\treturn string.length;\n\
    }\n", "    return string.length;\n}\n", "\treturn string.length;\n}\n", "    return\
    \ string.length;\n}", "\treturn string.length;\n}\n", "\treturn string.length;\n\
    }\n", "\treturn string.length;\n}\n", "    return string.length;\n}\n", "\treturn\
    \ string.length;\n}\n", "\treturn string.toString().length;\n}\n", "    return\
    \ strnlen(string, Math.max(string.length, 0x7fffffff));\n}\n", "\tvar len = 0;\n\
    \twhile(string[len] != null){\n\t\tlen++;\n\t}\n\treturn len;\n}\n", "    return\
    \ string.length;\n}\n", "    string=string.toString();\n    string=string.replace(/<(?:.|\\\
    n)*?>/gm, '');\n    return string.length;\n}\n", "    var i = 0;\n    while(string[i]\
    \ != undefined){\n        i++;\n    }\n    return i;\n}\n", "\t//return string.length;\n\
    \treturn string.replace(/[^\\x00-\\xff]/g,\"xx\").length;\n}\n", "    return string.length;\n\
    }\n", "\treturn string.length;\n}\n", "    return string.length;\n}\n", "\treturn\
    \ string.length;\n}\n", "    if(!string || typeof string != 'string') return 0;\n\
    \    return string.length;\n}\n", "\treturn string.length;\n}\n", "\tvar pos =\
    \ 0;\n\tvar count = 0;\n\twhile(string.charAt(pos) != \"\"){\n\t\tpos++;\n\t\t\
    count++;\n\t}\n\treturn count;\n}\n", "\tvar count = 0;\n\tfor(var i = 0; i <\
    \ string.length; i++){\n\t\tcount++;\n\t}\n\treturn count;\n}\n", "\treturn string.length;\n\
    }\n", "\tvar len = 0;\n\tfor(var i = 0; i < string.length; i++){\n\t\tif(string.charCodeAt(i)\
    \ > 127){\n\t\t\tlen += 2;\n\t\t}\n\t\telse{\n\t\t\tlen += 1;\n\t\t}\n\t}\n\t\
    return len;\n}\n", "    var length = 0;\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string.charCodeAt(i) > 255){\n            length += 2;\n \
    \       }else{\n            length++;\n        }\n    }\n    return length;\n\
    }\n", "    return string.length;\n}\n", "    return string.length;\n}", "\treturn\
    \ (string.length > 0) ? string.length : 0;\n}\n", "\treturn string.length;\n}\n",
  "\tif(string.length) return string.length;\n\telse return string.byteLength;\n}\n",
  "\treturn string.length;\n}\n", "    return string.length;\n}", "    var length\
    \ = 0;\n    while(string[length] != undefined){\n        length++;\n    }\n  \
    \  return length;\n}\n", "\tvar length = 0;\n\tfor(var i = 0; i < string.length;\
    \ i++){\n\t\tlength++;\n\t}\n\treturn length;\n}\n", "    let length = 0;\n  \
    \  while(string[length] != undefined){\n        length++;\n    }\n    return length;\n\
    }\n", "    var stringLength = 0;\n    for(var pos = 0; string[pos] != null; pos++){\n\
    \        stringLength++;\n    }\n    return stringLength;\n}\n", "\treturn string.length;\n\
    }\n", "\tvar length = 0;\n\tfor(i = 0; i < string.length; i++){\n\t\tlength++;\n\
    \t}\n\treturn length;\n}\n", "\treturn string.length;\n}\n", "\treturn string.length;\n\
    }\n", "\treturn string.length;\n}\n", "\treturn string.length;\n}\n", "    return\
    \ string.length;\n}\n", "    var length = 0;\n    string = String(string);\n \
    \   for(var i = 0; i < string.length; i++){\n        if(string.charCodeAt(i) >\
    \ 255){\n            length += 2;\n        }else{\n            length++;\n   \
    \     }\n    }\n    return length;\n}\n", "\tvar i = 0;\n\twhile(string[i] !=\
    \ null){\n\t\ti++;\n\t}\n\treturn i;\n}\n", "    var i;\n    var length = 0;\n\
    \    for(i = 0; i < string.length; i++){\n        length++;\n    }\n    return\
    \ length;\n}\n", "\treturn string.length;\n}\n", "\treturn unescape(string).length;\n\
    }\n", "    return string.length;\n}\n", "\treturn string.length;\n}\n", "\treturn\
    \ string.length;\n}\n", "    //TODO: return string length\n    return string.length;\n\
    }\n", "\treturn string.length;\n}\n", "\treturn string.length;\n}\n", "    return\
    \ string.length;\n}\n", "\tif(string.length) return string.length;\n\telse if(string.byteLength)\
    \ return string.byteLength;\n\telse if(string.size) return string.size;\n\telse\
    \ if(string.total) return string.total;\n\telse return false;\n}\n", "\treturn\
    \ string.length;\n}\n", "    return string.length;\n}\n", "\treturn string.length;\n\
    }\n", "    return string.length;\n}\n", "    return String(string).length;\n}\n",
  "\treturn string.length;\n}\n", "    return string.length;\n}\n", "\tvar counter\
    \ = 0;\n\twhile(string[counter] != undefined){\n\t\tcounter++;\n\t}\n\treturn\
    \ counter;\n}\n", "    var num = 0;\n    for(var i = 0; i < string.length; i++){\n\
    \        num++;\n    }\n    return num;\n}\n", "  let counter = 0;\n  let i =\
    \ 0;\n  while(string[i] != undefined){\n    counter++;\n    i++;\n  }\n  return\
    \ counter;\n}\n", "\treturn string.length;\n}\n", "\treturn string.length;\n}\n",
  "\t//return string.length;\n\treturn string.replace(/[^\\x00-\\xff]/g,\"xx\").length;\n\
    }\n", "\tvar len = 0;\n\tfor(var i = 0; i < string.length; i++){\n\t\tvar code\
    \ = string.charCodeAt(i);\n\t\tif(code > 0x7f && code <= 0x7ff){\n\t\t\tlen +=\
    \ 2;\n\t\t}else if(code > 0x7ff && code <= 0xffff){\n\t\t\tlen += 3;\n\t\t}else{\n\
    \t\t\tlen += 1;\n\t\t}\n\t}\n\treturn len;\n}", "\tvar i = 0;\n\twhile(string[i]\
    \ != \"\\0\"){\n\t\ti++;\n\t}\n\treturn i;\n}\n", "\tvar ret_length = 0;\n\tfor(var\
    \ i = 0; i < string.length; i++){\n\t\tif(string.charCodeAt(i) > 255){\n\t\t\t\
    ret_length += 2;\n\t\t}else{\n\t\t\tret_length += 1;\n\t\t}\n\t}\n\treturn ret_length;\n\
    }\n", "    return string.length;\n}\n", "\treturn string.length;\n}\n", "    var\
    \ i;\n    var length = 0;\n    for(i = 0; string[i] != '\\0'; i++){\n        length++;\n\
    \    }\n    return length;\n}\n", "    var length = 0;\n    while(string[length]\
    \ != '\\0'){\n        length++;\n    }\n    return length;\n}\n", "\tvar result\
    \ = 0;\n\tfor(var i=0;i<string.length;i++){\n\t\tresult++;\n\t}\n\treturn result;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
