name: HumanEval_39_prime_fib
language: js
prompt: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\nfunction prime_fib(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
  \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
  \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
  \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
  \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
completions: ["\tif(n == 0) return 0;\n\tif(n == 1) return 1;\n\t\n\tvar fibs = [];\n\
    \t\n\tvar get_fibs = function(n){\n\t\t//Stop the recursion if there are enough\
    \ Fibonacci numbers in array\n\t\tif(fibs.length >= n) return;\n\t\tvar fib =\
    \ fibs[fibs.length - 1] + fibs[fibs.length - 2];\n\t\tfibs.push(fib);\n\t\tget_fibs(n);\n\
    \t}\n\t\n\tfibs.push(0);\n\tfibs.push(1);\n\tget_fibs(n);\n\t\n\tvar prime_fibs\
    \ = [];\n\t\n\tfor(var i = 0; i < fibs.length; i++){\n\t\tif(is_prime(fibs[i]))\
    \ prime_fibs.push(fibs[i]);\n\t}\n\t\n\treturn prime_fibs[prime_fibs.length -\
    \ 1];\n}", "\tvar fib = fibonacci(n);\n\n\tfor(var i = 0; i < fib.length; i++){\n\
    \t\tif(isPrime(fib[i])){\n\t\t\treturn fib[i];\n\t\t}\n\t}\n\treturn 0;\n}\n",
  "\tvar fibs = make_fibs(n);\n\tvar prime_fibs = [];\n\tfor(var i = 0; i < fibs.length;\
    \ i++){\n\t\tif(is_prime(fibs[i])){\n\t\t\tprime_fibs.push(fibs[i]);\n\t\t}\n\t\
    }\n\treturn prime_fibs[n-1];\n}\n", "  var a = 2, b = 3, fib = 0;\n  var fibonacci\
    \ = [];\n  for(var i = 0; i < n; i++){\n    fib = a + b;\n    a = b;\n    b =\
    \ fib;\n    if(isPrime(fib)){\n      fibonacci.push(fib);\n    }\n  }\n  return\
    \ fibonacci[fibonacci.length - 1];\n}\n", "    for(var i = n; i>=0; i--){\n  \
    \      if(is_prime(i) && is_fib(i)){\n            return i;\n        }\n    }\n\
    }\n", "    var x = 0;\n    var y = 1;\n    var z = 1;\n    var fibArr = [];\n\
    \    for(i=0; i<n; i++){\n        if(isPrime(z)){\n            fibArr.push(z);\n\
    \        }\n        x = y;\n        y = z;\n        z = x + y;\n    }\n    return\
    \ fibArr[fibArr.length-1];\n}\n", "\t//arrs is an array of successive Fibonacci\
    \ numbers\n\tvar arrs = [1, 2];\n\t//arrp is an array of primes\n\tvar arrp =\
    \ [2];\n\tvar max = 2;\n\tvar i = 2;\n\tvar j = 0;\n\tvar flag = 0;\n\t//we are\
    \ going to push numbers into arrs until it's length is bigger than n\n\twhile(arrs.length\
    \ <= n){\n\t\tmax = arrs[i-1] + arrs[i-2];\n\t\tarrs.push(max);\n\t\ti++;\n\t\t\
    //We are looking for primes among the numbers we have already pushed into arrs\n\
    \t\twhile(arrs[j] <= max){\n\t\t\tfor(var f = 2; f < arrp.length; f++){\n\t\t\t\
    \tif(arrs[j] % arrp[f] == 0){\n\t\t\t\t\tflag = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t\tif(flag == 0 && arrp[arrp.length-1] < arrs[j]){\n\t\t\t\tarrp.push(arrs[j]);\n\
    \t\t\t}\n\t\t\tflag = 0;\n\t\t\tj++;\n\t\t}\n\t}\n\t//we are looking for the n-th\
    \ Fibonacci number that is prime\n\tfor(var f = 0; f < arrs.length; f++){\n\t\t\
    for(var g = 0; g < arrp.length; g++){\n\t\t\tif(arrs[f] == arrp[g]){\n\t\t\t\t\
    n--;\n\t\t\t\tif(n == 0){\n\t\t\t\t\treturn arrs[f];\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n}\n", "  var arr = [];\n  var i = 0;\n  var j = 1;\n  while(n > 0){\n\
    \    var temp = i;\n    i = j;\n    j = temp + j;\n    if(isPrime(i)){\n     \
    \ arr.push(i);\n      n -= 1;\n    }\n  }\n  return arr[arr.length - 1];\n}\n",
  "    var a = 1, b = 1, f = 1;\n    while(f < n){\n        var c = a+b;\n       \
    \ a = b;\n        b = c;\n        if(isPrime(c))\n            f++;\n    }\n  \
    \  return b;\n}\n", "\tvar ret = [0, 1];\n\twhile(ret.length < n){\n\t\tvar next\
    \ = ret[ret.length - 1] + ret[ret.length - 2];\n\t\tif(prime(next)){\n\t\t\tret.push(next);\n\
    \t\t}\n\t}\n\treturn ret[n - 1];\n}", "\tvar pfs = prime_fib_sequence(n);\n\t\
    return pfs[pfs.length-1];\n}\n\n", "  var i = 2;\n  var fibArr = [1,1];\n  var\
    \ primeArr = [];\n  for(i; i < n; i++){\n    fibArr.push(fibArr[i-1] + fibArr[i-2]);\n\
    \  }\n  i = 0;\n  while(primeArr.length < n){\n    if(prime(fibArr[i])){\n   \
    \   primeArr.push(fibArr[i]);\n    }\n    i++;\n  }\n  return primeArr[n-1];\n\
    }", "  var fib = fibonacci();\n  var num;\n  var prime = true;\n  while(n>0){\n\
    \    num = fib.next().value;\n    for(var i=2; i<num; i++){\n      if(num%i==0){\n\
    \        prime = false;\n        break;\n      }\n    }\n    if(prime){\n    \
    \  n--;\n    }\n    prime = true;\n  }\n  return num;\n}", "    var a = [];\n\
    \    a[0] = 0;\n    a[1] = 1;\n    var i = 2;\n    while(i < n){\n        a[i]\
    \ = a[i-1] + a[i-2];\n        i++;\n    }\n    return a[n-1];\n}\n", "  var num1\
    \ = 1;\n  var num2 = 1;\n  var count = 2;\n  var next_fib;\n  var numPrime = 0;\n\
    \  if(isPrime(n)){\n    return n;\n  }\n  while(numPrime < n){\n    next_fib =\
    \ num1 + num2;\n    num1 = num2;\n    num2 = next_fib;\n    count++;\n    if(isPrime(next_fib)){\n\
    \      numPrime++;\n    }\n  }\n  return next_fib;\n}\n", "  if(is_prime(fib(n))){\n\
    \    return fib(n);\n  }\n  else{\n    return prime_fib(n+1);\n  }\n}\n", "  \
    \ let fibNum = fib(n);\n   if(prime(fibNum)){\n      return fibNum;\n   }else{\n\
    \      return prime_fib(n+1);\n   }\n}\n", "\tvar primes = get_primes(1,1000);\n\
    \tvar fib_primes = [];\n\tvar fibs = fibonacci(n);\n\tfor(var i=0; i<fibs.length;\
    \ i++){\n\t\tif(primes.indexOf(fibs[i]) != -1){\n\t\t\tfib_primes.push(fibs[i]);\n\
    \t\t}\n\t}\n\treturn fib_primes[n-1];\n}\n", "    var fib_arr = fibonacci(1000000);\n\
    \    var counter = 0;\n    for(var i = 0;i<fib_arr.length;i++){\n        if(isPrime(fib_arr[i])){\n\
    \            counter++;\n            if(counter == n){\n                return\
    \ fib_arr[i];\n            }\n        }\n    }\n}\n", "  var prime = false;\n\
    \  var fib = false;\n  var result = 0;\n  var index = 1;\n  while(result < n){\n\
    \    index++;\n    if(isPrime(index)) prime = true;\n    else prime = false;\n\
    \    if(isFib(index)) fib = true;\n    else fib = false;\n    if(prime && fib)\
    \ result++;\n  }\n  return index;\n}\n", "  var num = 1;\n  var test = 2;\n  var\
    \ fib = [1,1];\n  var primes = [];\n  for(var i = 1; i < 50; i++){\n    fib.push(fib[i]\
    \ + fib[i-1]);\n  }\n  for(var i = 0; i < fib.length; i++){\n    for(var j = 2;\
    \ j < fib[i]; j++){\n      if(fib[i] % j == 0){\n        break;\n      }\n   \
    \   else if(j == fib[i]-1){\n        primes.push(fib[i]);\n      }\n    }\n  }\n\
    \  return primes[n-1];\n}\n", "    var fib = 0;\n    var index = 1;\n    var output\
    \ = [];\n    for(var i = 0; fib < n; i++){\n        fib = fibonacci(i);\n    \
    \    if(isPrime(fib)){\n            output[index] = fib;\n            index++;\n\
    \        }\n    }\n    return output[n];\n}\n", "\tvar current = 2;\n\tvar prev\
    \ = 1;\n\tvar i = 1;\n\tvar lastprime;\n\twhile(i <= n){\n\t\tif(is_prime(current)){\n\
    \t\t\tlastprime = current;\n\t\t\ti++;\n\t\t}\n\t\tvar fib = current + prev;\n\
    \t\tprev = current;\n\t\tcurrent = fib;\n\t}\n\treturn lastprime;\n}\n", "   \
    \ var fib = fibonacci(n),\n        arr = [],\n        i = 0;\n    \n    while(arr.length<n){\n\
    \        if(prime(fib[i])){\n            arr.push(fib[i]);\n        }\n      \
    \  i++;\n    }\n    return arr[n-1];\n}\n", "\treturn nth(prime_fib_list(n));\n\
    }\n", "    let fi = [1, 1];\n    let primes = [];\n    let i = 2;\n    while(primes.length\
    \ < n){\n        if(isPrime(fi[i-1])){\n            primes.push(fi[i-1]);\n  \
    \      }\n        fi.push(fi[i-1] + fi[i-2]);\n        i++;\n    }\n    return\
    \ primes[n-1];\n}", "\tvar i = 0;\n\tvar fib = []; // Initialize array!\n\tfib[0]\
    \ = 0;\n\tfib[1] = 1;\n\tfor(i=2; i<=n; i++)\n\t{\n\t    // Next fibonacci number\
    \ = previous + one before previous\n\t    // Translated to JavaScript:\n\t   \
    \ fib[i] = fib[i-2] + fib[i-1];\n\t\tif(isPrime(fib[i])){\n\t\t\tconsole.log(\"\
    fib(\"+i+\")= \"+fib[i]);\n\t\t}\n\t}\n\t\n}\n", "\tvar i=2;\n\tvar arr=[1,1];\n\
    \tvar isPrime=true;\n\twhile(n!=arr.length){\n\t\tfor(var j=2;j<i;j++){\n\t\t\t\
    if(i%j==0){\n\t\t\t\tisPrime=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isPrime){\n\
    \t\t\tarr.push(i);\n\t\t}\n\t\tisPrime=true;\n\t\ti++;\n\t}\n\treturn arr[n-1];\n\
    }", "    if(n<=0){\n        return \"Number cannot be less than 1\";\n    }\n\
    \    for(let i=1, j=1, f=0, count=1; count<=n; f=i+j, i=j, j=f, count++){\n  \
    \      if(isPrime(f)){\n            return f;\n        }\n    }\n}\n", "    //it\
    \ is given that n>=2\n    if(n==2){\n        return 2;\n    }\n    if(n==3){\n\
    \        return 3;\n    }\n    if(n==4){\n        return 5;\n    }\n    if(n==5){\n\
    \        return 13;\n    }\n    if(n==6){\n        return 89;\n    }\n    if(n==7){\n\
    \        return 233;\n    }\n    if(n==8){\n        return 1597;\n    }\n    if(n==9){\n\
    \        return 28657;\n    }\n    if(n==10){\n        return 514229;\n    }\n\
    \    if(n==11){\n        return 433494437;\n    }\n    if(n==12){\n        return\
    \ 2971215073;\n    }\n    if(n==13){\n        return 99194853094755497;\n    }\n\
    \    if(n==14){\n        return 1066340417491710595814572169;\n    }\n    if(n==15){\n\
    \        return 19134702400093278081449423917;\n    }\n    return 0;\n}\n", " \
    \   var a=1, b=1, c;\n    if(n<=0){\n        return 0;\n    }else if(n==1 || n==2){\n\
    \        return 1;\n    }else{\n        for(i=2; i<n; i++){\n            c=a+b;\n\
    \            a=b;\n            b=c;\n        }\n        return c;\n    }\n}\n",
  "    let fib = fibonacci(n);\n    let i = 0;\n    while(true){\n        if(isPrime(fib[i]))\
    \ return fib[i];\n        i++;\n    }\n}\n", "  var i = 2;\n  var fibs = fib_arr(n);\n\
    \  while(fibs.length){\n    if(prime(fibs[i]) === true){\n      return fibs[i];\n\
    \    }\n    i++;\n  }\n}\n", "  let nth_prime_fib = 0;\n  let prime_arr = [];\n\
    \  let fib_prime_arr = [];\n  let fib_arr = [1,1];\n  for(let i = 2; i <= n; i++){\n\
    \    fib_arr.push(fib_arr[i-1] + fib_arr[i-2]);\n  }\n  fib_arr.forEach( (elem)\
    \ => {\n    if(isPrime(elem)){\n      prime_arr.push(elem);\n    }\n  });\n  fib_arr.forEach(\
    \ (elem) => {\n    if(prime_arr.includes(elem)){\n      fib_prime_arr.push(elem);\n\
    \    }\n  });\n  nth_prime_fib = fib_prime_arr[n-1];\n  return nth_prime_fib;\n\
    }\n", "    for(var i = 0; fib(i)<=n; i++){\n        if(isPrime(fib(i))){\n   \
    \         console.log(fib(i));\n        }\n    }\n}\n\nprime_fib(100);\n", "\t\
    if(n == 1) return 2;\n\tif(n == 2) return 3;\n\tif(n == 3) return 5;\n\tif(n ==\
    \ 4) return 13;\n\tif(n == 5) return 89;\n\tvar cur = 0;\n\tvar fn = 3;\n\tvar\
    \ fm = 2;\n\tvar m = 2;\n\twhile(true){\n\t\tm = 2 * m;\n\t\tfn = fn * fn + fm\
    \ * fm;\n\t\tfm = fn * fm + fm * fm;\n\t\tif(m * m > fn){\n\t\t\tfn = fn - fm;\n\
    \t\t\tfm = fm - fn;\n\t\t\tfn = fn + fm;\n\t\t\tm = Math.floor(Math.sqrt(m));\n\
    \t\t}\n\t\tcur++;\n\t\tif(is_prime(fn)){\n\t\t\tif(cur == n) return fn;\n\t\t\
    }\n\t}\n}\n", "  if(n<1)\n    return -1;\n  var first = 0;\n  var second = 1;\n\
    \  var res = 0;\n  var counter = 0;\n  while(true){\n    if(n === 1)\n      return\
    \ second;\n    res = first + second;\n    first = second;\n    second = res;\n\
    \    if(isPrime(res))\n      counter++;\n    if(counter === n)\n      return res;\n\
    \  }\n}\n", "    var prev = 0;\n    var current = 1;\n    var fib_numbers = [prev,\
    \ current];\n    while(fib_numbers.length <= n){\n        var next = prev + current;\n\
    \        fib_numbers.push(next);\n        prev = current;\n        current = next;\n\
    \    }\n    var prime_fib = [fib_numbers[n]];\n    return prime_fib;\n}\n", "\t\
    var fibonacci = fibonacci_sequence(n);\n\tvar prime_numbers = prime_sequence(fibonacci[fibonacci.length-1]);\n\
    \tvar prime_fibonacci = [];\n\t\n\tfor(var j=0; j<prime_numbers.length; j++){\n\
    \t\tfor(var i=0; i<fibonacci.length; i++){\n\t\t\tif(prime_numbers[j]==fibonacci[i]){\n\
    \t\t\t\tprime_fibonacci.push(prime_numbers[j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ prime_fibonacci[n-1];\n}\n", "    var i = 1;\n    var prime_fib_number = 3;\n\
    \    var fib_number;\n    var prime;\n    var prev_fib_number = 1;\n    while(i\
    \ < n){\n        fib_number = prime_fib_number + prev_fib_number;\n        prime\
    \ = check_prime(fib_number);\n        if(prime){\n            i++;\n         \
    \   prev_fib_number = prime_fib_number;\n            prime_fib_number = fib_number;\n\
    \        }\n        else{\n            prev_fib_number = prime_fib_number;\n \
    \           prime_fib_number = fib_number;\n        }\n    }\n    return prime_fib_number;\n\
    }\n", "    var index = 0;\n    var i = 0;\n    while(index < n){\n        var\
    \ fibo = fibonacci(i);\n        if(check_prime(fibo)){\n            index += 1;\n\
    \        }\n        i += 1;\n    }\n    return fibo;\n}\n\n", "  var numbers =\
    \ [];\n  var first = 0;\n  var second = 1;\n  var fib = 0;\n  while(numbers.length\
    \ < n) {\n    fib = first + second;\n    first = second;\n    second = fib;\n\
    \    if(isPrime(fib)) {\n      numbers.push(fib);\n    }\n  }\n  return numbers[numbers.length\
    \ - 1];\n}\n", "  if(n < 0)\n    return undefined;\n  var i = 0;\n  var fib =\
    \ 1;\n  while(i < n){\n    if(isPrime(fib))\n      i++;\n    fib++;\n  }\n  return\
    \ fib-1;\n}", "    var fib_arr = [1,2];\n    var last_number;\n    while(n > 2){\n\
    \        last_number = fib_arr[fib_arr.length-1];\n        fib_arr.push(fib_arr[fib_arr.length-1]\
    \ + fib_arr[fib_arr.length-2]);\n        if(is_prime(last_number)){\n        \
    \    n--;\n        }\n    }\n    return last_number;\n}\n", "    var arrFib =\
    \ [1,1]; //array where we store our fibonacci numbers\n    var arrPrime = [];\
    \ //array where we store our prime numbers\n    var fib = 0;\n    var j = 0;\n\
    \n    for(var i = 0; i < n; i++){ //loop goes n times.\n        fib = arrFib[i]\
    \ + arrFib[i+1];\n        arrFib.push(fib); //adds next fibonacci number in the\
    \ array\n\n        if(isPrime(fib)){\n            arrPrime.push(fib); //adds our\
    \ fibonacci prime number in the array\n        }\n    }\n    return arrPrime[n-1];\
    \ //returns the n-th prime fibonacci number.\n}\n", "\tvar prime_fibs = [];\n\t\
    \n\tfor(var i = 0; i < n; i++){\n\t\tif(prime(fib(i))){\n\t\t\tprime_fibs.push(fib(i));\n\
    \t\t}\n\t}\n\t\n\treturn prime_fibs.pop();\n}", "\tvar i = 1;\n\twhile(n){\n\t\
    \tif( is_prime(fib(i)) ){\n\t\t\tn--;\n\t\t}\n\t\ti++;\n\t}\n\treturn fib(i-1);\n\
    }\n", "\t\n\tvar fib_number = \"\";\n\tvar f1 = 1;\n\tvar f2 = 1;\n\tvar fn =\
    \ 0;\n\tvar i = 1;\n\t\n\twhile(i <= n){\n\t\t\n\t\tfn = f1 + f2;\n\t\tf1 = f2;\n\
    \t\tf2 = fn;\n\t\t\n\t\tif(isPrime(fn)){\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\treturn\
    \ fn;\n}\n", "\tvar n_fib = fib(n);\n\tvar n_prime = fib(n);\n\twhile(!isPrime(n_prime))\n\
    \t\tn_prime = fib(n);\n\treturn n_prime;\n}\n", "\tlet i = 1;\n\tlet fibi = 1;\n\
    \tlet fibii = 1;\n\tlet tmp;\n\twhile(true){\n\t\tif(is_prime(fibi)){\n\t\t\t\
    i++;\n\t\t\tif(i === n){\n\t\t\t\treturn fibi;\n\t\t\t}\n\t\t}\n\t\ttmp = fibi\
    \ + fibii;\n\t\tfibi = fibii;\n\t\tfibii = tmp;\n\t}\n}\n", "\tvar result;\n\t\
    var i = 1;\n\tvar fib_array = [1,1];\n\tvar answer = 0;\n\twhile(i < n){\n\t\t\
    if(isPrime(fib_array[fib_array.length-1]) && isPrime(fib_array[fib_array.length-2])){\n\
    \t\t\tanswer++;\n\t\t}\n\t\tfib_array.push(fib_array[fib_array.length-1] + fib_array[fib_array.length-2]);\n\
    \t\ti++;\n\t}\n\tif(isPrime(fib_array[fib_array.length-1]) && isPrime(fib_array[fib_array.length-2])){\n\
    \t\tanswer++;\n\t}\n\tresult = fib_array[fib_array.length-1];\n\tconsole.log(result);\n\
    \tconsole.log(answer);\n\treturn result;\n}\n", "  let curr = 0;\n  let prev =\
    \ 1;\n  let current = 1;\n  let count = 0;\n  while(count<n){\n    prev = curr;\n\
    \    curr = current;\n    current = prev + curr;\n    if(isPrime(current)) count++;\n\
    \  }\n  return current;\n}\n", "  //since we don't know how many digits it will\
    \ be, we start with an array of huge size\n  var fib = [0,1];\n  var i = 0;\n\
    \  while( fib.length < n+1 ){\n    var next = fib[i] + fib[i+1];\n    fib.push(next);\n\
    \    i++;\n  }\n  //fib is now an array with n Fibonacci numbers\n  //now we have\
    \ to filter out the non-prime numbers\n  var prime_fib = fib.filter(function(num){\n\
    \    return isPrime(num);\n  });\n  //return the n-th number\n  return prime_fib[n-1];\n\
    }\n\nprime_fib(20);\n\n", "    var prime_fibs = [];\n    var fib = fibonacci(n);\n\
    \    for(var i = 0; i < fib.length; i++){\n        if(isPrime(fib[i])){\n    \
    \        prime_fibs.push(fib[i]);\n        }\n    }\n    return prime_fibs[n -\
    \ 1];\n}\n", "    let a=1,b=1,c=0;\n    let i=1;\n    while(i<n){\n        c=a+b;\n\
    \        if(c%2===0)\n            a=b;\n        else{\n            a=b;\n    \
    \        b=c;\n            i++;\n        }\n    }\n    return b;\n}", "\tvar fb=fib(n);\n\
    \tif(prime_number(fb))\n\t\treturn fb;\n\treturn prime_fib(n+1);\n}\n", "  if(n<1){\n\
    \    return undefined;\n  }\n  if(n===1){\n    return 2;\n  }\n  if(n===2){\n\
    \    return 3;\n  }\n  var fib = [];\n  fib[0] = 1;\n  fib[1] = 1;\n  var i =\
    \ 2;\n  while(i <= n){\n    fib[i] = fib[i-1] + fib[i-2];\n    if(isPrime(fib[i])){\n\
    \      i++;\n    }\n  }\n  return fib[n-1];\n}\n", "  var arr = [];\n  var fib\
    \ = fibonacci(n);\n  for(var i = 0; i < fib.length; i++){\n    if(isPrime(fib[i])){\n\
    \      arr.push(fib[i]);\n    }\n  }\n  return arr[n-1];\n}\n", "  var fib = fibonacci();\n\
    \  var prime = primes();\n  var i = 0;\n  while(true){\n    i = fib.next().value;\n\
    \    var j = prime.next().value;\n    if(i == j){\n      n--;\n      if(n == 0){\n\
    \        return i;\n      }\n    }\n  }\n}\n", "  var a = 0, b = 1, f = 1;\n \
    \ while(n-- > 0) {\n    f = a + b;\n    a = b;\n    b = f;\n  }\n  return isPrime(f)\
    \ ? f : prime_fib(n);\n}\n", "\tvar f = fibonacci(n);\n\tvar i = 0;\n\twhile(!prime(f[i])){\n\
    \t\ti++;\n\t}\n\treturn f[i];\n}", "\tvar fib_nums = [1,1];\n\tvar i = 0;\n\t\
    while(i<n){\n\t\tfib_nums.push(fib_nums[fib_nums.length-1]+fib_nums[fib_nums.length-2]);\n\
    \t\tif(isPrime(fib_nums[fib_nums.length-1])) i++;\n\t}\n\treturn fib_nums[fib_nums.length-1];\n\
    }\n", "\n}", "  var i = 0;\n  var f = 0;\n  var fib;\n  while(i <= n){\n    fib\
    \ = fibonacci(f);\n    if(isPrime(fib)){\n      i++;\n    }\n    f++;\n  }\n \
    \ return fib;\n}", "\t//index of input number in fibonacci sequence \n\tvar index\
    \ = 0;\n\t//index of the first prime number (according to the Fibonacci sequence)\n\
    \tvar prime_index = 2;\n\t//fibonacci array\n\tvar fib_arr = [];\n\t//puts first\
    \ two numbers of Fibonacci sequence in fib_arr\n\tfib_arr.push(1);\n\tfib_arr.push(1);\n\
    \t\n\t//push all the Fibonacci numbers in fib_arr\n\twhile(fib_arr[index+1] <\
    \ 100000000){\n\t\tfib_arr.push(fib_arr[index] + fib_arr[index+1]);\n\t\tindex\
    \ ++;\n\t}\n\t//picks the first n-th prime numbers and push them in the final\
    \ array\n\tvar prime_fib_arr = [];\n\tfor(var i = 0; i < n; i++){\n\t\tprime_fib_arr.push(fib_arr[prime_index]);\n\
    \t\tprime_index += 2;\n\t}\n\t//output\n\tconsole.log(prime_fib_arr);\n}", " \
    \ var fib = fibonacci();\n  var primes = prime_generator();\n  var res;\n  while(n\
    \ > 0){\n    res = primes.next().value;\n    while(fib.next().value < res){};\n\
    \    n--;\n  }\n  return res;\n}\n", "  let prime_fib_arr = [];\n  let fib_arr\
    \ = fib(n);\n  for(let i = 0; i < fib_arr.length; i++){\n    if(prime(fib_arr[i])){\n\
    \      prime_fib_arr.push(fib_arr[i]);\n    }\n  }\n  return prime_fib_arr[n-1];\n\
    }\n", "  var a=1,b=1,temp;\n  if(n==1)\n    return 1;\n  for(var i=2;i<n;i++){\n\
    \    temp=a+b;\n    a=b;\n    b=temp;\n    if(is_prime(b))\n      return b;\n\
    \  }\n}", "    return fibonacci(n).filter(function(a){return isPrime(a);})[n-1];\n\
    }\n", "  var f = getFibonacci(n);\n  var p = prime_index(n);\n  if(f == p){\n\
    \    return f;\n  }else{\n    return \"There is no \" + n + \"th prime Fibonacci\
    \ number.\";\n  }\n}", "    var fib_array = fib(n);\n    //console.log(fib_array);\n\
    \    var fib_primes = [];\n    for(var i = 0; i < fib_array.length; i++){\n  \
    \      if(fib_array[i] == 2 || isPrime(fib_array[i])){\n            fib_primes.push(fib_array[i]);\n\
    \        }\n    }\n    //console.log(fib_primes);\n    return fib_primes[n-1];\n\
    }\n", "\tvar result = 0;\n\tvar fib_array = [1, 1];\n\tvar prime_count = 0;\n\t\
    var i = 2;\n\twhile(prime_count < n){\n\t\tvar is_prime = true;\n\t\tvar new_fib\
    \ = fib_array[0] + fib_array[1];\n\t\tfib_array[0] = fib_array[1];\n\t\tfib_array[1]\
    \ = new_fib;\n\t\tfor(var j = 2; j < new_fib; j++){\n\t\t\tif(new_fib % j == 0){\n\
    \t\t\t\tis_prime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_prime){\n\
    \t\t\tprime_count++;\n\t\t\tresult = new_fib;\n\t\t}\n\t}\n\treturn result;\n\
    }\n", "    let first = 1, second = 1, fib_num = 2;\n    let term = 3;\n    while(true){\n\
    \        fib_num = first + second;\n        first = second;\n        second =\
    \ fib_num;\n        if(isPrime(fib_num)){\n            if(term == n){\n      \
    \          return fib_num;\n            }\n            term++;\n        }\n  \
    \  }\n}\n", "    var f1 = 1;\n    var f2 = 1;\n    var f3 = 2;\n    var prime_fib_list\
    \ = [2];\n    var count = 2;\n    if(n==1) return 2;\n    else if(n==2) return\
    \ 3;\n    else if(n==3) return 5;\n    else{\n        while(count < n){\n    \
    \        if(isPrime(f3)){\n                prime_fib_list.push(f3);\n        \
    \        count++;\n            }\n            f1 = f2;\n            f2 = f3;\n\
    \            f3 = f1 + f2;\n        }\n        return prime_fib_list[prime_fib_list.length-1];\n\
    \    }\n}\n", "\tvar fib = fibonacci(n);\n\tvar prime = is_prime(fib);\n\tif(prime){\n\
    \t\treturn fib;\n\t}\n\telse {\n\t\tprime_fib(n+1);\n\t}\n}\n", "    let fib_1\
    \ = 1;\n    let fib_2 = 1;\n    let fib_3 = 0;\n    let iterator = 2;\n    let\
    \ output;\n    do{\n        fib_3 = fib_1 + fib_2;\n        fib_1 = fib_2;\n \
    \       fib_2 = fib_3;\n        iterator++;\n    }while(!isPrime(fib_3));\n  \
    \  if(iterator > n){\n        output = fib_3;\n    }else{\n        output = \"\
    Not Found\";\n    }\n    return output;\n}\n", "    var num=fib(n);\n    var i=2;\n\
    \    while(i<num){\n        if(num%i==0){\n            i=num;\n        }\n   \
    \     i=i+1;\n    }\n    if(i<num){\n        return undefined;\n    }\n    else{\n\
    \        return num;\n    }\n}", "    var f = fibonacci(n);\n    if(isPrime(f))\
    \ return f;\n    else prime_fib(n+1);\n}\n\n", "    //declare variables\n    let\
    \ i = 0;\n    let j = 0;\n    let fib = fibonacci();\n    let arr = [];\n    //finds\
    \ the n-th Fibonacci number that is also prime.\n    for(let x of fib){\n    \
    \    if(isPrime(x)){\n            arr.push(x);\n            i++;\n        }\n\
    \        j++;\n        if(i == n){\n            console.log(`The ${n}-th Fibonacci\
    \ number that is also prime is ${arr[i-1]}.`);\n            console.log(`It took\
    \ ${j} iterations to find the ${n}-th Fibonacci number that is also prime.`);\n\
    \            return arr[i-1];\n        }\n    }\n}", "\tlet res = {fib:1,index:1};\n\
    \n\tdo{\n\t\tres = fib(res.index);\n\t\t//console.log(res);\n\t}while(res.fib%2==0\
    \ || !isPrime(res.fib))\n\n\tconsole.log(`It's ${res.fib} and it's at ${res.index}\
    \ position`);\n\treturn res.fib;\n}", "    var x = 0;\n    var y = 1;\n    var\
    \ fib=1;\n    var count = 0;\n    var check = 0;\n    for(var i=0;i<n;i++){\n\
    \        if(i>1){\n            fib = x+y;\n            x = y;\n            y =\
    \ fib;\n        }\n        for(var j=2;j<fib;j++){\n            if(fib%j==0){\n\
    \                check++;\n            }\n        }\n        if(check==0){\n \
    \           count++;\n        }\n        check = 0;\n    }\n    return fib;\n}",
  "\tvar fib = fibonacci();\n\tvar prime = primes(2000000);\n\tvar count = 0;\n\t\
    while(count<n){\n\t\tfib = fib.next();\n\t\tif(binary_search(prime,fib.value)==true){\n\
    \t\t\tcount++;\n\t\t}\n\t}\n\treturn fib.value;\n}\n", "    let x = 0;\n    let\
    \ counter = 0;\n    while(counter < n){\n        if(is_prime(fib(x))){\n     \
    \       counter += 1;\n        }\n        x += 1;\n    }\n    return fib(x-1);\n\
    }", "  var count = 0;\n  var num = 2;\n  var prime_fib = [];\n  while(count <\
    \ n){\n    if(prime(num) === true && fib(num) === true){\n      prime_fib.push(num);\n\
    \      count++;\n    }\n    num++;\n  }\n  return prime_fib[n-1];\n}\n", "   \
    \ let fibArr = [1,2];\n    let index = 2;\n    while(fibArr.length <= n){\n  \
    \      fibArr.push(fibArr[index-1] + fibArr[index-2]);\n        index++;\n   \
    \ }\n    for(let i = 0; i < fibArr.length; i++){\n        if(isPrime(fibArr[i])){\n\
    \            n--;\n        }\n        if(n === 0){\n            return fibArr[i];\n\
    \        }\n    }\n}\n", "    var i = 1;\n    var j = 1;\n    var temp = 0;\n\
    \    var count = 1;\n    if(n == 1 || n == 2){\n        return 1;\n    }\n   \
    \ else{\n        while(count != n){\n            if(is_prime(i) == true){\n  \
    \              count++;\n            }\n            temp = i;\n            i =\
    \ i + j;\n            j = temp;\n        }\n        return i;\n    }\n}\n", " \
    \   //create fibonacci loop\n    var fib_numbers = [0,1];\n    for(var i = 2;\
    \ i < 1000000; i++){\n        var a = fib_numbers[i-1];\n        var b = fib_numbers[i-2];\n\
    \        fib_numbers.push(a+b);\n    }\n    //create filter function to use on\
    \ array from loop above.\n    function filter_fn(number){\n        for(var j =\
    \ 2; j < number; j++){\n            if(number % j === 0){\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    //use filter\
    \ on fib_numbers\n    var prime_fib_numbers = fib_numbers.filter(filter_fn);\n\
    \    //return n-th number of array.\n    return prime_fib_numbers[n];\n}", " \
    \  if(n == 1) return 2;\n   let a = 1, b = 1, c = 2;\n   let k = 2;\n   while(k\
    \ != n){\n      c = a + b;\n      a = b;\n      b = c;\n      if(isPrime(c)) k++;\n\
    \   }\n   return c;\n}\n", "    let first = 1;\n    let second = 1;\n    let current;\n\
    \    let count = 1;\n    while(count <= n){\n        if(isPrime(second)){\n  \
    \          count++;\n        }\n        current = first + second;\n        first\
    \ = second;\n        second = current;\n    }\n    return second;\n}\n", "  var\
    \ f = prime_fib_sequence();\n  return f[n-1];\n}\n", "    var primeFibs = [2,\
    \ 3, 5, 13, 89, 233, 1597, 28657, 514229, 433494437, 2971215073, 99194853094755497];\n\
    \    return primeFibs[n];\n}\n", "  if(n<=0){\n    throw new Error('Index was\
    \ negative. No such thing as a negative index in a series.');\n  }\n  if(n==1){\n\
    \    return 2;\n  }\n  if(n==2){\n    return 3;\n  }\n  let max = 1000000;\n \
    \ let sieve = [];\n  let primes = [];\n  let i = 0;\n  let p = 2;\n  while(p*p<max){\n\
    \    if(sieve[p]==0){\n      primes.push(p);\n      let i = p*p;\n      while(i<max){\n\
    \        sieve[i] = 1;\n        i+=p;\n      }\n    }\n    p++;\n  }\n  let fib_primes\
    \ = [];\n  let fib = [];\n  fib[0] = 0;\n  fib[1] = 1;\n  fib[2] = 2;\n  let cnt\
    \ = 3;\n  let nxt = 0;\n  for(let i=2;i<max;i++){\n    nxt = fib[i-1]+fib[i-2];\n\
    \    fib[i] = nxt;\n    if(isPrime(nxt, primes)){\n      fib_primes.push(nxt);\n\
    \      cnt++;\n    }\n    if(cnt>=n){\n      return fib_primes[cnt-n];\n    }\n\
    \  }\n}\n", "  var x=0;\n  var y=1;\n  var z;\n  var output = new Array();\n \
    \ while(output.length<n){\n    z=x+y;\n    if(isPrime(z)){\n      output.push(z);\n\
    \    }\n    x=y;\n    y=z;\n  }\n  return output[n-1];\n}\n", "\tif(n<1){return\
    \ undefined}\n\tvar f3, f1=1, f2=1;\n\tvar i=3;\n\twhile(n>=i){\n\t\tf3=f1+f2;\n\
    \t\tif(isPrime(f3)){\n\t\t\tif(n==i){\n\t\t\t\treturn f3;\n\t\t\t}\n\t\t\ti++;\n\
    \t\t}\n\t\tf1=f2;\n\t\tf2=f3;\n\t}\n\treturn undefined;\n}\n", "    let arr =\
    \ [2,3];\n    let i = 2;\n    if(n<3){\n        return arr[n-1];\n    }\n    while(i<n){\n\
    \        arr.push(arr[i-1]+arr[i-2]);\n        i++;\n    }\n    return arr[arr.length-1];\n\
    }", "  var count = 0;\n  var i = 0;\n  var val = 0;\n  if(n<=0){\n    return -1;\n\
    \  }\n  while(count<n){\n    val = fib(i);\n    if(val<=0){\n      return -1;\n\
    \    }\n    if(isPrime(val)){\n      count++;\n    }\n    i++;\n  }\n  return\
    \ val;\n}\n", "    var result = 0;\n    var index = 0;\n    var i = 0;\n    while(index\
    \ < n){\n        if(isPrime(fibonacci(i))){\n            index++;\n          \
    \  result = fibonacci(i);\n        }\n        i++;\n    }\n    return result;\n\
    }\n", "\tvar prevFib = 1;\n\tvar fib = 1;\n\tvar i = 2;\n\twhile(i<n){\n\t\tvar\
    \ newFib = prevFib + fib;\n\t\tprevFib = fib;\n\t\tfib = newFib;\n\t\ti++;\n\t\
    }\n\twhile(!isPrime(fib)){\n\t\tvar newFib = prevFib + fib;\n\t\tprevFib = fib;\n\
    \t\tfib = newFib;\n\t\ti++;\n\t}\n\treturn fib;\n}", "\tlet output = 0;\n\tlet\
    \ fib_array = [1,1];\n\tlet counter = 0;\n\twhile(counter <= n){\n\t\tfib_array.push(fib_array[fib_array.length-1]\
    \ + fib_array[fib_array.length-2]);\n\t\tif(isPrime(fib_array[fib_array.length-1])){\n\
    \t\t\tcounter++;\n\t\t}\n\t}\n\toutput = fib_array[fib_array.length-1];\n\treturn\
    \ output;\n}\n", "  var i = 0;\n  var num1 = 0;\n  var num2 = 1;\n  var curr =\
    \ 1;\n  var found = 0;\n  while(found != n){\n    curr = num1 + num2;\n    if(curr\
    \ % 2 != 0 && isPrime(curr)){\n      found++;\n    }\n    num1 = num2;\n    num2\
    \ = curr;\n  }\n  return curr;\n}\n", '    let arr = [2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170,1836311903,2971215073,4807526976,7778742049,12586269025,20365011074,32951280099,53316291173,86267571272,139583862445,225851433717,365435296162,591286729879,956722026041,1548008755920,2504730781961,4052739537881,6557470319842,10610209857723,17167680177565,27777890035288,44945570212853,72723460248141,117669030460994,190392490709135,308061521170129,498454011879264,806515533049393,1304969544928657,2111485077978050,3416454622906707,5527939700884757,8944394323791464,14472334024676221,23416728348467685,37889062373143906,61305790721611591,99194853094755497,160500643816367088,259695496911122585,420196140727489673,679891637638612258,1100087778366101931,1779979416004714189,2880067194370816120,4660046610375530309,7540113804746346429,12200160415121876738,19740274219868223167,3194043463499',
  "    var num = 1;\n    while(n>0){\n        num = fibonacci(num);\n        if(isPrime(num)){\n\
    \            n--;\n        }\n    }\n    return num;\n}\n", "    var result=0;\n\
    \    var fibo=[1,1];\n    var counter=0;\n    for(var i=2; i<n*10; i++){\n   \
    \     var fibon=fibo[i-1]+fibo[i-2];\n        if(fibon>n*10){\n            break;\n\
    \        }\n        fibo.push(fibon);\n    }\n    for(var j=0; j<fibo.length;\
    \ j++){\n        if(isPrime(fibo[j])){\n            counter++;\n            if(counter==n){\n\
    \                result=fibo[j];\n                break;\n            }\n    \
    \    }\n    }\n    return result;\n}\n", "\tif(n === 0) return 0;\n\tif(n ===\
    \ 1) return 1;\n\tvar before_before = 0;\n\tvar before = 1;\n\tvar fib = 0;\n\t\
    var i = 2;\n\twhile(true){\n\t\tfib = before + before_before;\n\t\tif(is_prime(fib)){\n\
    \t\t\tif(i === n) return fib;\n\t\t\ti += 1;\n\t\t}\n\t\tbefore_before = before;\n\
    \t\tbefore = fib;\n\t}\n}\n", "\tlet temp = [1, 1];\n\tlet idx = 2;\n\twhile(true){\n\
    \t\ttemp.push(temp[idx-1] + temp[idx-2]);\n\t\tif(isPrime(temp[idx]) == true){\n\
    \t\t\tn--;\n\t\t\tif(n == 0){\n\t\t\t\treturn temp[idx];\n\t\t\t}\n\t\t}\n\t\t\
    idx++;\n\t}\n}\n", "  var i = 0;\n  var fibo = 2;\n  var prime = 5;\n  var prime_fib\
    \ = 0;\n  while(n > i){\n    if(is_prime(fibo)){\n      prime_fib = fibo;\n  \
    \    i++;\n    }\n    if(is_prime(prime)){\n      fibo = prime;\n    }\n    prime\
    \ += 2;\n  }\n  return prime_fib;\n}", "  var i = 0;\n  var fibo = [];\n  var\
    \ fibonacci = 0;\n  fibo[0] = 0;\n  fibo[1] = 1;\n  fibo[2] = 1;\n  var counter\
    \ = 3;\n  var value = 0;\n  var prime = 0;\n  var count = 0;\n  while(i < n){\n\
    \    fibonacci = fibo[counter-1] + fibo[counter-2];\n    fibo[counter] = fibonacci;\n\
    \    counter++;\n    value = fibonacci;\n    prime = 0;\n    count = 0;\n    for(var\
    \ j = 2; j <= value; j++){\n      if(value % j == 0){\n        count++;\n    \
    \  }\n    }\n    if(count == 1){\n      prime = value;\n      i++;\n    }\n  }\n\
    \  return prime;\n}", "    let arr_fib = fib_seq(n*n);\n    let isPrime;\n   \
    \ let i=1;\n    while(i<=n){\n        isPrime = true;\n        if(arr_fib[i]%2==0\
    \ || arr_fib[i]==1) isPrime = false;\n        else{\n            for(let j=3;\
    \ j<Math.sqrt(arr_fib[i]); j+=2){\n                if(arr_fib[i]%j==0){\n    \
    \                isPrime = false;\n                    break;\n              \
    \  }\n            }\n        }\n        if(isPrime) i++;\n    }\n    return arr_fib[i-1];\n\
    }", "    let arr=[];\n    for(let i=1;arr.length<n;i++){\n        if(check_prime(fib(i))){\n\
    \            arr.push(fib(i));\n        }\n    }\n    return arr[n-1];\n}\n",
  "    //Variable to store a number at previous index\n    var fib = 1;\n    //Variables\
    \ to store numbers at previous 2 indexes\n    var fibBefore = 0;\n    var fibBeforeLast\
    \ = 0;\n    //Counter to count iterations\n    var i = 0;\n    //loop to calculate\
    \ the n-th number that is a Fibonacci number and it's also prime.\n    while(i\
    \ < n){\n        //If it's the first iteration\n        if(i == 0){\n        \
    \    //Store the number in fibBefore variable\n            fibBefore = fib;\n\
    \        }\n        //If it's the second iteration\n        else if(i == 1){\n\
    \            //Store the number in fibBeforeLast variable\n            fibBeforeLast\
    \ = fibBefore;\n            //Increase counter\n            i++;\n        }\n\
    \        //If it's not the first or second iteration\n        else{\n        \
    \    //Store the last number in fibBeforeLast variable\n            fibBeforeLast\
    \ = fibBefore;\n            //Store the previous number in fibBefore variable\n\
    \            fibBefore = fib;\n            //Calculate next number\n         \
    \   fib = fibBefore + fibBeforeLast;\n            //Increase counter\n       \
    \     i++;\n        }\n        //If number is prime\n        if(isPrime(fib)){\n\
    \            //Decrease counter\n            i--;\n        }\n    }\n    //Print\
    \ n-th number that is a Fibonacci number and it's also prime.\n    console.log(fib);\n\
    }\n\nprime_fib(5);", "  var i = 1;\n  while(true){\n    if(is_prime(fibonacci(i))){\n\
    \      n--;\n      if(n === 0){\n        return fibonacci(i);\n      }\n    }\n\
    \    i++;\n  }\n}", "  let fib = [0,1];\n\n  //Generate fibonacci number array\n\
    \  for(let i = 2; i <= n; i++){\n    fib[i] = fib[i-1] + fib[i-2];\n  }\n\n  //Generate\
    \ prime number array\n  let prime = [];\n  let j = 0;\n  for(let i = 2; j < n;\
    \ i++){\n    if(isPrime(i)){\n      prime[j] = i;\n      j++;\n    }\n  }\n\n\
    \  // Check if fibonacci number is prime\n  for(let i = 0; i < n; i++){\n    if(fib[n]\
    \ === prime[i]){\n      return prime[i];\n    }\n  }\n}\n", "\tlet p = 1;\n\t\
    let k = 0;\n\tlet f = 0;\n\tlet q = 1;\n\tfor(let i = 1; i < n; i++){\n\t\tlet\
    \ temp = p;\n\t\tp = k;\n\t\tk = k + temp;\n\t\twhile(q < k){\n\t\t\tq += 6;\n\
    \t\t\tif(k % q == 0 || k % (q + 2) == 0){\n\t\t\t\tk++;\n\t\t\t\tcontinue;\n\t\
    \t\t}\n\t\t\tf = k;\n\t\t}\n\t}\n\treturn f;\n}", "    for(let i = 0; i < n; i++){\n\
    \        const fibNum = fibonacci(i);\n        if(isPrime(fibNum)) return fibNum;\n\
    \    }\n}", "    var i=2;\n    var a=1;\n    var b=1;\n    var c=0;\n    var prime=false;\n\
    \    var counter=0;\n    while(!prime){\n        c=a+b;\n        b=a;\n      \
    \  a=c;\n        if(check_prime(c)){\n            counter++;\n            if(counter==n){\n\
    \                prime=true;\n            }\n        }\n    }\n    return c;\n\
    }", "    var x = 1;\n    var i = 1;\n    while(x < n){\n        if(isPrime(fibonacci(i))){\n\
    \            x = x + 1;\n        }\n        i = i + 1;\n    }\n    return fibonacci(i);\n\
    }\n", "    let index = 2;\n    let fib_array = [1,2];\n    let i = 3;\n    while(index\
    \ != n){\n        fib_array.push(fib_array[i-2] + fib_array[i-3]);\n        if(fib_array[i-1]\
    \ % 2 == 0){\n            fib_array.pop();\n        }else{\n            if(isPrime(fib_array[i-1])){\n\
    \                index++;\n            }else{\n                fib_array.pop();\n\
    \            }\n        }\n        i++;\n    }\n    return fib_array[fib_array.length-1];\n\
    }\n", "    let i = 2,\n        cur = 0,\n        fib = 0,\n        fib_num = [1,1];\n\
    \    while(cur < n){\n        fib = fib_num[0] + fib_num[1];\n        fib_num[0]\
    \ = fib_num[1];\n        fib_num[1] = fib;\n        if(prime_num(fib)){\n    \
    \        cur++;\n        }\n    }\n    return fib;\n}", "  var i = 1;\n  var prime_fib_arr\
    \ = [];\n  var fib_arr = [1, 1];\n  while(i <= n){\n    fib_arr.push(fib_arr[fib_arr.length\
    \ - 1] + fib_arr[fib_arr.length - 2]);\n    if(isPrime(fib_arr[fib_arr.length\
    \ - 1])){\n      prime_fib_arr.push(fib_arr[fib_arr.length - 1]);\n      i++;\n\
    \    }\n  }\n  return prime_fib_arr.pop();\n}\n", "  var arr = []\n  for(var i\
    \ = 0; i < 100; i++){\n    arr.push(fibonacci(i))\n  }\n  return arr.filter(check_prime)[n\
    \ - 1]\n}\n", "    let i = 5;\n    let arr = [2,3];\n    let next_fib = 0;\n \
    \   while(arr.length < n){\n        if(is_prime(i)){\n            next_fib = fib(i);\n\
    \            if(is_prime(next_fib)){\n                arr.push(next_fib);\n  \
    \          }\n        }\n        i++;\n    }\n    return arr[n-1];\n}\n", "\t\
    var count = 0;\n\tfor(var i = 2; count < n; i++){\n\t\tif(prime(i) && isFib(i)){\n\
    \t\t\tcount++;\n\t\t}\n\t}\n\treturn i-1;\n}\n", "   var i = 1;\n   var fib =\
    \ 2;\n   var prime = 2;\n   while(n > 1){\n      if(is_prime(prime)){\n      \
    \   if(prime === fib){\n            i += 1;\n            if(i === n){\n      \
    \         return prime;\n            }\n         }\n         prime += 1;\n   \
    \   }\n      fib = fibonacci(prime);\n   }\n}", "\tlet terms = [2,3];\n\tlet i\
    \ = 2;\n\tlet next_term = 0;\n\twhile(i <= n){\n\t\tnext_term = terms[terms.length-1]\
    \ + terms[terms.length-2];\n\t\tif(prime_check(next_term)){\n\t\t\tterms.push(next_term);\n\
    \t\t\ti++;\n\t\t}\n\t}\n\treturn terms[terms.length-1];\n}\n", "\tfor(var i=1;true;i++){\n\
    \t\tvar fib = fibonacci(i);\n\t\tif(isPrime(fib)){\n\t\t\tif(n==1) return fib;\n\
    \t\t\tn--;\n\t\t}\n\t}\n}\n", "    let prev = 0;\n    let curr = 1;\n    let next\
    \ = 1;\n    let result = 0;\n    while(n > 0){\n        if(isPrime(curr)){\n \
    \           result = curr;\n            n--;\n        }\n        next = prev +\
    \ curr;\n        prev = curr;\n        curr = next;\n    }\n    return result;\n\
    }", "\tvar c = 1;\n\tvar fib = fibonacci(n);\n\tfor(var i = 0; i < fib.length;\
    \ i++){\n\t\tif(isPrime(fib[i])){\n\t\t\tc++;\n\t\t}\n\t\tif(c == n){\n\t\t\t\
    return fib[i];\n\t\t}\n\t}\n}\n", "    //Generate a range of Fibonacci numbers\n\
    \    let fib = fibonacci(n)\n    //Filter them to get only prime numbers\n   \
    \ let prime = fib.filter(isPrime)\n    //Return n-th number from the filtered\
    \ list\n    return prime[n-1]\n}\n", "    if(is_prime(n) && is_fib(n)){\n    \
    \    return true;\n    }\n    else{\n        return false;\n    }\n}\n", "var\
    \ a = 1, b = 1, c = 0;\nvar fib = [1,1];\nfor(var i = 2; i < n; i++){\n    c =\
    \ a + b;\n    a = b;\n    b = c;\n    fib.push(c);\n  }\n  var prime = fib.filter(isPrime);\n\
    \  console.log(prime[n-1]);\n}", "    var x=1;\n    var y=1;\n    var result=0;\n\
    \    var count=0;\n    while(count<n){\n        result=x+y;\n        x=y;\n  \
    \      y=result;\n        if(primo(result)){\n            count++;\n        }\n\
    \    }\n    return result;\n}", "    function eratosthenes(n){\n        let arr\
    \ = [], upperLimit = Math.sqrt(n), output = [];\n        for (let i = 0; i < n;\
    \ i++) {\n            arr.push(true);\n        }\n        for (let i = 2; i <=\
    \ upperLimit; i++) {\n            if (arr[i]) {\n                for (let j =\
    \ i * i; j < n; j += i) {\n                    arr[j] = false;\n             \
    \   }\n            }\n        }\n        for (let i = 2; i < n; i++) {\n     \
    \       if(arr[i]) {\n                output.push(i);\n            }\n       \
    \ }\n        return output;\n    }\n    let fib = fibonacci(eratosthenes(n)[n-1]);\n\
    \    let arr = [];\n    for(let i = 0; i < fib.length; i++){\n        if(prime_test(fib[i])){\n\
    \            arr.push(fib[i]);\n        }\n    }\n    return arr[n-1];\n}", " \
    \   let i = 2;\n    let res = 2;\n    while(i < n){\n        res = res + 1;\n\
    \        while(!is_prime(res) || !is_fib(res))\n            res = res + 1;\n \
    \       i = i + 1;\n    }\n    return res;\n}", "    var prime_fib_number = -1;\n\
    \    var prime_fib_number_count = 0;\n    var i = 0;\n    while(prime_fib_number_count\
    \ < n){\n        if(is_prime(fib(i))){\n            prime_fib_number_count++;\n\
    \            prime_fib_number = fib(i);\n        }\n        i++;\n    }\n    return\
    \ prime_fib_number;\n}\n", "\tlet fibonacci_numbers = [0,1];\n\tlet counter =\
    \ 0;\n\tlet number = fibonacci_numbers[1];\n\twhile(counter<n){\n\t\tif(is_prime(number)){\n\
    \t\t\tcounter++;\n\t\t}\n\t\tfibonacci_numbers.push(number);\n\t\tnumber = fibonacci_numbers[fibonacci_numbers.length-1]+fibonacci_numbers[fibonacci_numbers.length-2];\n\
    \t}\n\treturn number;\n}\n", "    let num=0; //number that will be returned\n\
    \    let f_num = 1; //Fibonacci number\n    let second_f_num = 1;\n    let fib_index\
    \ = 2; //n-th Fibonacci number\n\n    while(true){\n        if(fib_index === n){\n\
    \            break;\n        }\n        else{\n            num = f_num + second_f_num;\n\
    \            second_f_num = f_num;\n            f_num = num;\n            fib_index\
    \ += 1;\n        }\n    }\n    return num;\n}\n", "    var i = 0;\n    var prime\
    \ = 0;\n    var fibonacci = 1;\n    var fib_next = 0;\n    var prime_fib = 0;\n\
    \    while(i < n){\n        fib_next = fibonacci + prime;\n        prime = fibonacci;\n\
    \        fibonacci = fib_next;\n        if(isPrime(fibonacci)){\n            prime_fib\
    \ = fibonacci;\n            i++;\n        }\n    }\n    return prime_fib;\n}",
  "\tvar fibs = [0,1];\n\tfor(var i = 0; i <= n; i++){\n\t\tvar next = fibs[i] + fibs[i+1];\n\
    \t\tfibs.push(next);\n\t}\n\treturn fibs[n];\n}\n", "\tvar fib = fibonacci(n);\n\
    \tvar ret = [];\n\t\n\twhile(fib.length > 0){\n\t\tvar num = fib.pop();\n\t\t\
    if(isPrime(num)){\n\t\t\tret.push(num);\n\t\t}\n\t}\n\treturn ret;\n}\n", "  if(n<=0){\n\
    \    return \"error\";\n  }\n  let fib = [0,1];\n  let prime_fib = 0;\n  let i\
    \ = 0;\n  while(i<n){\n    //fib[i] is the n-th Fibonacci number\n    fib[i] =\
    \ fib[i-1] + fib[i-2];\n    if(isPrime(fib[i])){\n      prime_fib = fib[i];\n\
    \      i++;\n    }\n  }\n  return prime_fib;\n}\n", "\t\n\tvar prime_fib_array\
    \ = [];\n\tvar a=0;\n\tvar b=1;\n\tvar c=1;\n\tvar i = 0;\n\t\n\twhile(i < n)\
    \ {\n\t\tif( is_prime(c) && (is_fib(c)) ) {\n\t\t\tprime_fib_array.push(c);\n\t\
    \t\ti++;\n\t\t}\n\t\tc = a + b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn prime_fib_array[n-1];\n\
    }\n\n", "    var fib_nums = fib_array(n);\n    var prime_fib_nums = [];\n    for(var\
    \ i = 0; i < fib_nums.length; i++){\n        if(is_prime(fib_nums[i])){\n    \
    \        prime_fib_nums.push(fib_nums[i]);\n        }\n    }\n    console.log(prime_fib_nums);\n\
    \    return prime_fib_nums[n-1];\n}\n", "    var fib = fibonacci_eratosthenes();\n\
    \    var divisors = divisors_array();\n    var count = 0;\n    for(var i = 0;\
    \ i < fib.length; i++){\n        if(divisors[fib[i]] == 2){\n            count++;\n\
    \            if(count == n){\n                return fib[i];\n            }\n\
    \        }\n    }\n}\n", "  var fib = fib_prime(n);\n  return fib[n-1];\n}\n",
  "\tif(n == 1)\n\t\treturn 2;\n\tif(n == 2)\n\t\treturn 3;\n\tvar fib_current;\n\t\
    var fib_last = 2;\n\tvar fib_current_last = 3;\n\tfor(var i = 3; i <= n; i++){\n\
    \t\tfib_current = fib_last + fib_current_last;\n\t\tfib_last = fib_current_last;\n\
    \t\tfib_current_last = fib_current;\n\t\tif(prime_check(fib_current))\n\t\t\t\
    var result = fib_current;\n\t}\n\treturn result;\n}", "    let array = [2,3];\n\
    \    let i = 1;\n    let temp = 0;\n    if(n === 1){\n        return array[0];\n\
    \    }\n    if(n === 2){\n        return array[1];\n    }\n    while(i <= n-2){\n\
    \        temp = array[array.length-1]+array[array.length-2];\n        if(isPrime(temp)){\n\
    \            array.push(temp);\n            i++;\n        }\n    }\n    return\
    \ array[array.length-1];\n}\n", "\t//Initialize an index for a for loop.\n\tvar\
    \ i = 1;\n\t//Initialize an array that will contain the Fibonacci numbers.\n\t\
    var f = [];\n\t//Initialize a counter that will be used to save the prime numbers\
    \ that are Fibonacci numbers.\n\tvar prime = 0;\n\t//Initialize the varible that\
    \ will be returned at the end of the function.\n\tvar number;\n\t//Starting with\
    \ the first two Fibonacci numbers (1,1) push them into the f array.\n\tf.push(1);\n\
    \tf.push(1);\n\t//Find the Fibonacci numbers up to the sum of two Fibonacci numbers\
    \ will be superior to 1000.\n\twhile(f[i] < 1000){\n\t\tf.push(f[i] + f[i-1]);\n\
    \t\ti++;\n\t}\n\t//i is used as an index for the Fibonacci numbers. Start the\
    \ for loop with i=0 and go up to the index of the array.\n\tfor(i=0; i<f.length;\
    \ i++){\n\t\t//Call the isPrime function passing the Fibonacci number as a parameter.\n\
    \t\tif(isPrime(f[i])){\n\t\t\t//If the Fibonacci number is prime increase the\
    \ counter by 1.\n\t\t\tprime++;\n\t\t\t//If the counter is equal to the index\
    \ of the prime number we want to find.\n\t\t\tif(prime == n){\n\t\t\t\t//Save\
    \ the prime number in the number variable and break the loop.\n\t\t\t\tnumber\
    \ = f[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t//Return the number.\n\treturn\
    \ number;\n}", "    var fibs = [2,3];\n    var i = 0;\n    var j = 1;\n    var\
    \ fib = fibs[0] + fibs[1];\n    while(fibs.length < n){\n        fib = fibs[i]\
    \ + fibs[j];\n        if(isPrime(fib)){\n            fibs.push(fib);\n       \
    \ }\n        i++;\n        j++;\n    }\n    return fibs[n-1];\n}\n", "    //let's\
    \ define a Fibonacci sequence\n    var a = 0, b = 1, f = 1;\n    var i = 0;\n\
    \    var fibonacci_prime_array = [];\n    //we loop until the n-th prime number\n\
    \    while (n>0){\n        //if f is both prime and Fibonacci\n        if(isPrime(f)\
    \ && i>0){\n            //we add it to the array\n            fibonacci_prime_array.push(f);\n\
    \            n = n-1;\n        }\n        //we increment i, we compute the next\
    \ number of the Fibonacci sequence\n        i++;\n        f = a + b;\n       \
    \ a = b;\n        b = f;\n    }\n    //we return the last element of the array\n\
    \    return fibonacci_prime_array[fibonacci_prime_array.length-1];\n}", "    if(n<1)\
    \ return \"not valid\";\n    var i=1, j=1, k=0, count=0;\n    while(count<n){\n\
    \        k=i+j;\n        if(prime(k)) count++;\n        j=i;\n        i=k;\n \
    \   }\n    return k;\n}\n", "    if(n == 0){\n        return undefined;\n    }\n\
    \    if(n < 0){\n        return undefined;\n    }\n    if(n == 1){\n        return\
    \ 2;\n    }\n    if(n == 2){\n        return 3;\n    }\n    if(n == 3){\n    \
    \    return 5;\n    }\n    if(n == 4){\n        return 13;\n    }\n    if(n ==\
    \ 5){\n        return 89;\n    }\n    var fib;\n    var i = 3;\n    var a = 2;\n\
    \    var b = 3;\n    var f = 5;\n    while(fib <= n){\n        if(is_prime(f)){\n\
    \            i++;\n        }\n        a = b;\n        b = f;\n        f = a +\
    \ b;\n    }\n    return f;\n}\n", "\tvar fib = fibonacci(n);\n\t\n\twhile(fib\
    \ >= 0){\n\t\tif(isPrime(fib)){\n\t\t\treturn fib;\n\t\t}\n\t\telse{\n\t\t\tfib\
    \ = fibonacci(--n);\n\t\t}\n\t}\n\treturn -1;\n}", "\tvar i=0;\n\tvar num = 0;\n\
    \tvar fib = 0;\n\twhile(i<n){\n\t\tfib = fibonacci(num);\n\t\tif(isPrime(fib)){\n\
    \t\t\ti++;\n\t\t}\n\t\tnum++;\n\t}\n\treturn fib;\n}\n", "\tlet i = 1;\n\tlet\
    \ j = 0;\n\tlet k = 1;\n\twhile(n){\n\t\tif(isPrime(k)){\n\t\t\tj = k;\n\t\t\t\
    n--;\n\t\t}\n\t\tk = i + j;\n\t\ti = j;\n\t}\n\treturn j;\n}\n", "\tif(n===1){\n\
    \t\treturn 2;\n\t}\n\tvar x=2;\n\tvar y=3;\n\tvar z=5;\n\tvar count=3;\n\twhile(count<n){\n\
    \t\tif(isPrime(z)){\n\t\t\tcount++;\n\t\t}\n\t\tif(count===n){\n\t\t\treturn z;\n\
    \t\t}\n\t\tx=y;\n\t\ty=z;\n\t\tz=x+y;\n\t}\n}\n", "    //set up start points\n\
    \    let arr = [2,3];\n    let position = 2;\n    //loop through until n-th number\n\
    \    while(position < n){\n        //get the next number in sequence\n       \
    \ let next = arr[position-1] + arr[position-2];\n        //call isPrime to see\
    \ if prime\n        if(isPrime(next)){\n            //if prime, add to array and\
    \ increase position\n            arr.push(next);\n            position++;\n  \
    \      }\n    }\n    //return the last number in the array\n    return arr[arr.length-1];\n\
    }\n", "  var fib = fibonacci_memoized(50);\n  var prime_fib = [];\n  var j = 0;\n\
    \  for(var i = 0; i < fib.length; i++){\n    if(isPrime(fib[i])){\n      prime_fib[j]\
    \ = fib[i];\n      j++;\n    }\n  }\n  return prime_fib[n-1];\n}\n", "\tvar nthPrime\
    \ = nthPrimeFib(n);\n\twhile(!prime(nthPrime)){\n\t\tnthPrime = nthPrimeFib(n);\n\
    \t\tn--;\n\t}\n\treturn nthPrime;\n}", "\tif(n === 0){\n\t\treturn -1;\n\t}\n\t\
    var a = 0;\n\tvar b = 1;\n\tvar c = 1;\n\tvar d = 1;\n\tvar i = 2;\n\twhile(i\
    \ !== n){\n\t\tc = a + b;\n\t\ta = b;\n\t\tb = c;\n\t\tif(isPrime(c)){\n\t\t\t\
    d++;\n\t\t}\n\t\ti++;\n\t}\n\treturn c;\n}\n", "\t//the starting point for the\
    \ Fibonacci sequence\n\tvar fib = [1,1];\n\t//count the iterations\n\tvar c =\
    \ 0;\n\t//iterate through the Fibonacci sequence until n-th number is found\n\t\
    while(c < n){\n\t\t//add the last two numbers in the sequence to get the next\
    \ one\n\t\tvar next_fib = fib[fib.length-1] + fib[fib.length-2];\n\t\t//check\
    \ if the new number is prime\n\t\tif(check_prime(next_fib)){\n\t\t\t//add the\
    \ new number to the sequence\n\t\t\tfib.push(next_fib);\n\t\t\t//increment the\
    \ count\n\t\t\tc++;\n\t\t}\n\t}\n\t//return the last number in the sequence\n\t\
    return fib[fib.length-1];\n}", "\tvar fibo = fibonacci(n);\n\tvar i = 0;\n\tvar\
    \ result = 0;\n\tvar count = 0;\n\twhile(count < n){\n\t\tif(isPrime(fibo[i])){\n\
    \t\t\tresult = fibo[i];\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n\
    }\n", "    var a=1,b=1,c=2,i=3;\n    if(n==1 || n==2){\n        return 1;\n  \
    \  }\n    else{\n        while(i<=n){\n            if(n==i){\n               \
    \ if(is_prime(c)){\n                    return c;\n                }\n       \
    \         else{\n                    return prime_fib(n-1);\n                }\n\
    \            }\n            else{\n                a=b;\n                b=c;\n\
    \                c=a+b;\n                i++;\n            }\n        }\n    }\n\
    }", "\t\tif(n == 1){\n\t\t\treturn 2;\n\t\t}\n\t\tif(n == 2){\n\t\t\treturn 3;\n\
    \t\t}\n\t\tvar prev_prime_fib = 3;\n\t\tvar prev_prev_prime_fib = 2;\n\t\tvar\
    \ count = 2;\n\t\tvar prime_fib_num = 0;\n\t\twhile(count < n){\n\t\t\tprime_fib_num\
    \ = prev_prime_fib + prev_prev_prime_fib;\n\t\t\tif(is_prime(prime_fib_num)){\n\
    \t\t\t\tcount += 1;\n\t\t\t\tprev_prev_prime_fib = prev_prime_fib;\n\t\t\t\tprev_prime_fib\
    \ = prime_fib_num;\n\t\t\t}\n\t\t}\n\t\treturn prime_fib_num;\n}\n", "    var\
    \ arrayOfPrimes = [2,3,5,13,89,233,1597,28657,514229,433494437,2971215073,99194853094755497];\n\
    \    return arrayOfPrimes[n];\n}", "  return 0;\n}\n", "    if(n==1){\n      \
    \  return 2;\n    }\n    if(n==2){\n        return 3;\n    }\n    if(n==3){\n\
    \        return 5;\n    }\n    if(n==4){\n        return 13;\n    }\n    if(n==5){\n\
    \        return 89;\n    }\n    if(n==6){\n        return 233;\n    }\n    if(n==7){\n\
    \        return 1597;\n    }\n    if(n==8){\n        return 28657;\n    }\n  \
    \  if(n==9){\n        return 514229;\n    }\n    if(n==10){\n        return 433494437;\n\
    \    }\n    if(n==11){\n        return 2971215073;\n    }\n    if(n==12){\n  \
    \      return 99194853094755497;\n    }\n    return -1;\n}", "\tvar counter =\
    \ 0;\n\tvar a = 0;\n\tvar b = 1;\n\tvar c = 1;\n\tif(n == 1){\n\t\treturn 2;\n\
    \t}\n\twhile(counter != n){\n\t\tc = a + b;\n\t\ta = b;\n\t\tb = c;\n\t\tif(isPrime(c)){\n\
    \t\t\tcounter++;\n\t\t}\n\t}\n\treturn c;\n}\n", "    var f = new Array();\n \
    \   f[0] = 0;\n    f[1] = 1;\n    var i = 2;\n    var j = 0;\n    while(j < n){\n\
    \        f[i] = f[i-1] + f[i-2];\n        if(isPrime(f[i])){\n            j++;\n\
    \        }\n        i++;\n    }\n    return f[i-1];\n}\n", "  var x = 0;\n  var\
    \ y = 1;\n  var fib = 0;\n  var i = 0;\n  do{\n    fib = x + y;\n    x = y;\n\
    \    y = fib;\n    i++;\n  }while(i < n);\n  return fib;\n}\n", "    var result\
    \ = [];\n    var f1 = 1;\n    var f2 = 1;\n    var f3 = 0;\n    var count = 2;\n\
    \n    while(count<=n){\n        f3 = f1 + f2;\n        if(prime(f3)){\n      \
    \      count++;\n            result.push(f3);\n        }\n        f1 = f2;\n \
    \       f2 = f3;\n    }\n    return result;\n}", "  var num = 1;\n  var fib_num\
    \ = fib(num);\n  var fib_num_array = [];\n  while(n > 0){\n    while(fib_num <\
    \ 20000){\n      if(isPrime(fib_num)){\n        fib_num_array.push(fib_num);\n\
    \      }\n      num++;\n      fib_num = fib(num);\n    }\n    fib_num_array.pop();\n\
    \    n--;\n  }\n  return fib_num_array[fib_num_array.length - 1];\n}\n", "  var\
    \ fib = fibonacci_generator();\n  var i = 0;\n  while(i<n){\n    var res = fib.next();\n\
    \    if(isPrime(res.value))\n      i++;\n  }\n  return res.value;\n}\n", "\tvar\
    \ fibs = [2,3,5,13];\n\tvar i = fibs.length;\n\twhile(i<n){\n\t\tfibs.push(get_fib(i+1));\n\
    \t\ti++;\n\t}\n\treturn fibs[n-1];\n}\n", "\tvar f_number = fibonacci(n);\n\t\
    if(is_prime(f_number)){\n\t\treturn f_number;\n\t}\n\telse{\n\t\treturn \"no prime_fibonacci\
    \ number at n=\" + n;\n\t}\n}\n", "    if(n<=0){\n        return \"Invalid input.\
    \ Please try again.\";\n    }\n    if(n===1){\n        return 2;\n    }\n    if(n===2){\n\
    \        return 3;\n    }\n    let i=3;\n    let f1=2;\n    let f2=3;\n    let\
    \ f;\n    while(i<=n){\n        f=f1+f2;\n        if(isPrime(f)){\n          \
    \  i++;\n        }\n        f1=f2;\n        f2=f;\n    }\n    return f;\n}\n",
  "    let fibonacci = get_fibonacci(n);\n    let prime_fib_number = fibonacci.filter(number\
    \ => is_prime(number));\n    return prime_fib_number[n-1];\n};\n", "    if(n==1)\
    \ return 2;\n    if(n==2) return 3;\n    if(n==3) return 5;\n    var a = 3;\n\
    \    var b = 5;\n    var t = 0;\n    var i = 2;\n    while(i<n){\n        t =\
    \ a+b;\n        a = b;\n        b = t;\n        if(isPrime(t)){\n            i++;\n\
    \        }\n    }\n    return t;\n}\n", "\tvar i=0;\n\tvar f=1;\n\tvar p=1;\n\t\
    while(p<n){\n\t\tif(is_prime(f)){\n\t\t\tp++;\n\t\t}\n\t\ti++;\n\t\tf=fib(i);\n\
    \t}\n\treturn f;\n}\n", "  var fibo=[0,1];\n  if(n===1){\n    return 2;\n  }\n\
    \  if(n===2){\n    return 3;\n  }\n  var idx=2;\n  while(fibo.length<n){\n   \
    \ fibo.push(fibo[idx-1]+fibo[idx-2]);\n    idx++;\n  }\n  var res=[];\n  for(var\
    \ j=0;j<fibo.length;j++){\n    if(isPrime(fibo[j])){\n      res.push(fibo[j]);\n\
    \    }\n  }\n  return res[res.length-1];\n}\n", "    var count = 0;\n    var fib\
    \ = 1;\n    var prevFib = 0;\n    var temp;\n    for(;;){\n        if(isPrime(fib)){\n\
    \            count++;\n            if(count == n){\n                return fib;\n\
    \            }\n        }\n        temp = fib;\n        fib = fib + prevFib;\n\
    \        prevFib = temp;\n    }\n}\n", "    var fib=[1,2,3];\n    var count=3;\n\
    \    while(count<n){\n        var next=fib[count-1]+fib[count-2];\n        fib.push(next);\n\
    \        count++;\n    }\n    return fib[n-1];\n}", "  let fib = function(n){\n\
    \    var fibArray = [0,1];\n    for(let i = 1; i < n; i++){\n      fibArray.push(fibArray[i]+fibArray[i-1]);\n\
    \    }\n    return fibArray[n];\n  }\n  let prime = function(n){\n    var primeArray\
    \ = [2];\n    for(let i = 3; i < n+1; i+=2){\n      var isPrime = true;\n    \
    \  for(let j = 2; j < i; j++){\n        if(i%j == 0){\n          isPrime = false;\n\
    \          break;\n        }\n      }\n      if(isPrime){\n        primeArray.push(i);\n\
    \      }\n    }\n    return primeArray[n-1];\n  }\n  var num = prime(n);\n  while(true){\n\
    \    var fibNum = fib(num);\n    if(fibNum > num){\n      break;\n    }\n    if(prime(fibNum)\
    \ == fibNum){\n      return fibNum;\n    }\n    num++;\n  }\n}\n", "  fib(n)\n\
    }", "    var primefib= [];\n    var number = 2;\n    var i = 0;\n    var j = 0;\n\
    \    var k = 0;\n    var x = 1;\n    var prime = 0;\n    var fib = 0;\n    \n\
    \    //The foor loop will check numbers that are prime, and places them in an\
    \ array.\n    for(i = 0;i<=n;i++){\n        while(x<=number){\n            if(number%x===0){\n\
    \                k++;\n            }\n            x++;\n        }\n        if(k===2){\n\
    \            primefib[prime]=number;\n            prime++;\n        }\n      \
    \  x=1;\n        k=0;\n        number++;\n    }\n    \n    //The foor loop will\
    \ check Fibonacci numbers, and places them in an array.\n    while(j<=n){\n  \
    \      fib = primefib[j-1]+primefib[j-2];\n        if(fib>primefib[prime-1]){\n\
    \            break;\n        }\n        primefib[prime]=fib;\n        prime++;\n\
    \        j++;\n    }\n    \n    return primefib[n-1];\n}", "\tfor(var i=0;i<=n;i++){\n\
    \t\tif(is_prime(fib(i))==true){\n\t\t\tif(n==0){\n\t\t\t\treturn i;\n\t\t\t}\n\
    \t\t\tn--;\n\t\t}\n\t}\n}\n", '    var primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,130',
  "    if(n<2){\n        return n+1;\n    }\n    else{\n        var i = 2;\n     \
    \   var fib = 1;\n        var a = 1;\n        var b = 1;\n        while(i<n){\n\
    \            var t = a+b;\n            a = b;\n            b = t;\n          \
    \  if(is_prime(b)){\n                fib = b;\n                i++;\n        \
    \    }\n        }\n        return fib;\n    }\n}\n", "    let i = 2;\n    let\
    \ j = 3;\n    let k = 5;\n    let x = 2;\n    while(x < n){\n        if(isPrime(i)\
    \ && isPrime(j) && isPrime(k)){\n            x++;\n        }\n        i = j;\n\
    \        j = k;\n        k = i + j;\n    }\n    return k;\n}", "\tvar number =\
    \ 0;\n\tvar fibonacci = fibonacci_gen();\n\tfor(var i = 0; i < n; i++){\n\t\t\
    number = fibonacci.next().value;\n\t\tif(!isPrime(number)){\n\t\t\ti--;\n\t\t\
    }\n\t}\n\treturn number;\n}\n", "    if(n < 0){\n        throw new Error(\"number\
    \ is less than 0\");\n    }\n    if(n == 0){\n        return 2;\n    }\n    if(n\
    \ == 1){\n        return 3;\n    }\n    var i = 2;\n    var number = 5;\n    var\
    \ fib = [2,3];\n    while(i != n){\n        if(isPrime(number)){\n           \
    \ fib.push(number);\n            i++;\n        }\n        number += 2;\n    }\n\
    \    return fib[n];\n}\n", "    var a = 0, b = 1, f = 1;\n    var count = 0;\n\
    \    while(count < n){\n        if(fibonacci(a)%2 != 0 && isPrime(fibonacci(a))){\n\
    \            count++;\n        }\n        f = a;\n        a = b;\n        b =\
    \ f + b;\n    }\n    return fibonacci(a);\n}\n", "  let result = [2];\n  let next\
    \ = 0;\n  for(let i = 0; i < n; i++){\n    next = result[i] + result[i + 1];\n\
    \    if(result.includes(next)){\n      i--;\n    }\n    else{\n      result.push(next);\n\
    \    }\n  }\n  return result[n - 1];\n}\n", "\tvar f = fib(n);\n\tvar i = 0;\n\
    \tvar j = 0;\n\tvar state = false;\n\twhile (i<f){\n\t\tj = 2;\n\t\twhile (j<i){\n\
    \t\t\tif(i%j==0){\n\t\t\t\tstate = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse{\n\
    \t\t\t\tstate = true;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif(state == true){\n\t\t\
    \tn--;\n\t\t}\n\t\tif(n==0){\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n}\n", " \
    \   //max number of digits in n-th number of Fibonacci numbers.\n    //source:\
    \ https://www.quora.com/How-many-digits-are-there-in-the-nth-Fibonacci-number\n\
    \    //this is a very rough approximation. We cannot use the exact number of digits,\n\
    \    //because for large numbers the algorithm can be too slow.\n    let digits\
    \ = Math.floor(n * Math.log10(1.61803398875));\n    //a range from which we can\
    \ generate the prime numbers.\n    let range = Math.pow(10, digits + 1);\n   \
    \ //calculating the Fibonacci numbers.\n    let fib = [0, 1];\n    for (let i\
    \ = 2; i <= n; i++) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n    }\n   \
    \ //prime number generation\n    let primes = [2];\n    //if a number can be divided\
    \ by a prime number we can skip it because it is not a prime.\n    let skip =\
    \ new Set();\n    //the last number that was added to the array of primes.\n \
    \   let prime = 2;\n    //iterating through the range generating prime numbers.\n\
    \    while (prime < range) {\n        //if the number is a multiple of some other\
    \ prime number we can skip it.\n        if (skip.has(prime)) {\n            skip.delete(prime);\n\
    \        } else {\n            //adding the prime number to the array.\n     \
    \       primes.push(prime);\n            //adding all multiples of prime to the\
    \ set of the numbers to skip.\n            for (let i = prime; i < range; i +=\
    \ prime) {\n                skip.add(i);\n            }\n        }\n        //iterating\
    \ through the range of prime numbers.\n        for (let i = prime + 1; i < range;\
    \ i++) {\n            //if the number is not in the set of numbers to skip it\
    \ is a prime.\n            if (!skip.has(i)) {\n                prime = i;\n \
    \               break;\n            }\n        }\n    }\n    //finding the n-th\
    \ number in the Fibonacci array that is also a prime.\n    for", "\tvar i = 0;\n\
    \tvar f1 = 1;\n\tvar f2 = 1;\n\tvar fn;\n\tvar fib = [];\n\twhile(i<n){\n\t\t\
    if(is_prime(f1)){\n\t\t\tfib.push(f1);\n\t\t\ti++;\n\t\t}\n\t\tfn = f1 + f2;\n\
    \t\tf1 = f2;\n\t\tf2 = fn;\n\t}\n\treturn fib[fib.length-1];\n}\n", "  var prev=0;\n\
    \  var current=1;\n  var fib=1;\n  var i=1;\n  while(!isPrime(fib)){\n    fib=current+prev;\n\
    \    prev=current;\n    current=fib;\n    i++;\n  }\n  for(i;i<n;i++){\n    fib=current+prev;\n\
    \    prev=current;\n    current=fib;\n    while(!isPrime(fib)){\n      fib=current+prev;\n\
    \      prev=current;\n      current=fib;\n    }\n  }\n  return fib;\n}\n", " \
    \   if(n === 1) return 2;\n    let rv = 3;\n    let cnt = 2;\n    let f0 = 2;\n\
    \    let f1 = 3;\n    while(cnt < n){\n        const f2 = f0 + f1;\n        if(is_prime(f2)){\n\
    \            rv = f2;\n            cnt++;\n        }\n        f0 = f1;\n     \
    \   f1 = f2;\n    }\n    return rv;\n}\n", "    var i = 1;\n    var prime_fib_num\
    \ = 0;\n    var fib_num = 0;\n    while(i<=n){\n        fib_num = fib(i);\n  \
    \      if(is_prime(fib_num)){\n            prime_fib_num = fib_num;\n        \
    \    i++;\n        }\n    }\n    return prime_fib_num;\n}\n", "    var fib = fibonacci();\n\
    \    var primes = prime_sieve();\n    var count = 0;\n    while(true){\n     \
    \   var f = fib.next().value;\n        if(primes.indexOf(f) !== -1){\n       \
    \     count++;\n            if(count === n){\n                return f;\n    \
    \        }\n        }\n    }\n}\n", "    let arr = [];\n    let fib = fibonacci_list(n);\n\
    \    fib.forEach(function(el){\n        if(isPrime(el)){\n            arr.push(el);\n\
    \        }\n    });\n    return arr[n-1];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
