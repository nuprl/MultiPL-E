name: HumanEval_70_strange_sort_list
language: js
prompt: "//Given list of integers, return list in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\nfunction strange_sort_list(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
  \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1,\
  \ 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n\
  \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4,\
  \ 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2,\
  \ 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
  }\n\ntest();"
completions: ["    let len = lst.length;\n    // Your code here\n}\n", "    let res\
    \ = [];\n    while(lst.length > 0){\n        res.push(Math.min(...lst));\n   \
    \     res.push(Math.max(...lst));\n        lst.splice(lst.indexOf(Math.min(...lst)),\
    \ 1);\n        lst.splice(lst.indexOf(Math.max(...lst)), 1);\n    }\n    return\
    \ res;\n}\n", "    let result = [];\n    let max = Math.max(...lst);\n    let\
    \ min = Math.min(...lst);\n    for(let i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 === 0){\n            result.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            max = Math.max(...lst);\n            min = Math.min(...lst);\n\
    \        } else {\n            result.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max(...lst);\n            min = Math.min(...lst);\n\
    \        }\n    }\n    return result;\n}\n", "    let sorted = [];\n    let sort\
    \ = (arr) => {\n        if(arr.length === 0) return sorted;\n        sorted.push(Math.min(...arr));\n\
    \        let index = arr.indexOf(Math.min(...arr));\n        arr.splice(index,\
    \ 1);\n        sorted.push(Math.max(...arr));\n        index = arr.indexOf(Math.max(...arr));\n\
    \        arr.splice(index, 1);\n        return sort(arr);\n    }\n    return sort(lst);\n\
    }\n\nlet lst = [1,2,3,4,5,6,7,8,9];", "    var l = [];\n    var r = [];\n    var\
    \ i = 0;\n    var h;\n    var d = false;\n    var t = false;\n    while(lst.length\
    \ > 0){\n        h = Math.min.apply(null, lst);\n        lst.splice(lst.indexOf(h),\
    \ 1);\n        if(i%2 == 0 || t == true){\n            l.push(h);\n          \
    \  t = false;\n        }else{\n            r.push(h);\n            d = true;\n\
    \        }\n        i++;\n    }\n    r.reverse();\n    if(d == true){\n      \
    \  return r.concat(l);\n    }else{\n        t = true;\n        return l.concat(r);\n\
    \    }\n}", "    let sorted = lst.sort((a,b) => a-b)\n    let index = 0\n    let\
    \ result = []\n    for(let i = 0; i < lst.length; i++){\n        if(i%2===0){\n\
    \            result.push(sorted[index])\n            index++\n        }else{\n\
    \            result.push(sorted[sorted.length-index])\n        }\n    }\n    return\
    \ result\n}", "    lst.sort(function(a,b){\n        return a-b;\n    });\n   \
    \ var res=[];\n    var len=lst.length;\n    var i=0;\n    while(len>0){\n    \
    \    res.push(lst[i]);\n        if(len>1){\n            res.push(lst[len-1]);\n\
    \        }\n        i++;\n        len-=2;\n    }\n    return res;\n}", "    var\
    \ ascending = lst.slice(0).sort(function(a,b){return a-b});\n    var descending\
    \ = lst.slice(0).sort(function(a,b){return b-a});\n    var result = [];\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(i % 2){\n            result.push(descending.pop());\n\
    \        }else{\n            result.push(ascending.pop());\n        }\n    }\n\
    \    return result;\n}", "    return [];\n}", "    let sorted = [];\n    while(lst.length\
    \ !== 0){\n        let min = Math.min(...lst);\n        let max = Math.max(...lst);\n\
    \        sorted.push(min);\n        sorted.push(max);\n        lst.splice(lst.indexOf(min),\
    \ 1);\n        lst.splice(lst.indexOf(max), 1);\n    }\n    return sorted;\n}",
  "  let i = 0,\n      odd_elm = lst.filter(elm => lst.indexOf(elm) % 2);\n      even_elm\
    \ = lst.filter(elm => lst.indexOf(elm) % 2 == 0);\n      new_list = [];\n  while(i\
    \ < lst.length){\n    if(i % 2 == 0){\n      new_list.push(Math.min(...even_elm));\n\
    \      even_elm.splice(even_elm.indexOf(Math.min(...even_elm)), 1);\n    }else{\n\
    \      new_list.push(Math.max(...odd_elm));\n      odd_elm.splice(odd_elm.indexOf(Math.max(...odd_elm)),\
    \ 1);\n    }\n    i++;\n  }\n  return new_list;\n}\n", "  lst.sort(function(a,b){\n\
    \    return a-b;\n  });\n  var lst1 = lst.slice(0,lst.length/2);\n  var lst2 =\
    \ lst.slice(lst.length/2,lst.length);\n  var result = [];\n  for(var i = 0; i\
    \ < lst1.length; i++){\n    result.push(lst1[i]);\n    result.push(lst2[lst2.length-1-i]);\n\
    \  }\n  return result;\n}\nvar lst = [1,2,3,4,5,6,7,8,9,10];", "    if(lst.length==0)\
    \ return [];\n    var min = Math.min.apply(null, lst);\n    var new_lst = lst.filter(function(x){return\
    \ x!=min});\n    var max = Math.max.apply(null, new_lst);\n    return [min].concat(strange_sort_list(new_lst.filter(function(x){return\
    \ x!=max})).concat([max]));\n}", "    let result = [];\n    // implement your\
    \ solution here\n    return result;\n}", "  let min = Math.min(...lst);\n  let\
    \ max = Math.max(...lst);\n  let res = [];\n  for(let i = min; i <= max; i +=\
    \ 2){\n    res.push(i);\n  }\n  for(let i = max; i >= min; i -= 2){\n    res.push(i);\n\
    \  }\n  return res;\n}\n", "    lst = lst.sort(function(a,b){return a-b});\n \
    \   let sorted = [];\n    for(let i = 0; i < lst.length; i++){\n        if(i %\
    \ 2 === 0){\n            sorted.push(lst[i]);\n        }else{\n            sorted.push(lst[lst.length\
    \ - 1 - i])\n        }\n    }\n    return sorted;\n}\n", "  var unsorted_lst =\
    \ lst;\n  var sorted_lst = [];\n  if (lst.length == 0) {\n    return [];\n  }\n\
    \  while (unsorted_lst.length != 0) {\n    var min = min_of_list(unsorted_lst);\n\
    \    sorted_lst.push(min);\n    unsorted_lst.splice(index_of_first_occurance(unsorted_lst,\
    \ min), 1);\n    if (unsorted_lst.length == 0) {\n      break;\n    }\n    var\
    \ max = max_of_list(unsorted_lst);\n    sorted_lst.push(max);\n    unsorted_lst.splice(index_of_first_occurance(unsorted_lst,\
    \ max), 1);\n  }\n  return sorted_lst;\n}", "    //   let sLst = [...lst];\n \
    \   //   let newLst = [];\n    //   for(let i = 0; i < sLst.length; i++){\n  \
    \  //     let min = Math.min(...sLst);\n    //     let max = Math.max(...sLst);\n\
    \    //     sLst.splice(sLst.indexOf(min), 1);\n    //     sLst.splice(sLst.indexOf(max),\
    \ 1);\n    //     newLst.push(min);\n    //     newLst.push(max);\n    //   }\n\
    \    //   return newLst;\n    let arr = [...lst];\n    arr.sort(function(a, b){return\
    \ a-b});\n    let min = 0;\n    let max = arr.length - 1;\n    let newArr = [];\n\
    \    while(max >= min){\n        newArr.push(arr[min]);\n        newArr.push(arr[max]);\n\
    \        min++;\n        max--;\n    }\n    return newArr;\n}\n", "  if(lst.length\
    \ < 3) return lst;\n  var min = Math.min(...lst);\n  var min_index = lst.indexOf(min);\n\
    \  var remaining = lst.slice(0, min_index).concat(lst.slice(min_index + 1));\n\
    \  var max = Math.max(...remaining);\n  var max_index = remaining.indexOf(max);\n\
    \  var end = remaining.slice(0, max_index).concat(remaining.slice(max_index +\
    \ 1));\n  return [min].concat(end).concat([max]);\n}\n", "    let arr = lst.sort((a,b)=>{\n\
    \        return a-b;\n    });\n    let max = arr.length-1;\n    let new_arr =\
    \ [];\n    let counter = 0;\n    while(new_arr.length<lst.length){\n        if(counter%2===0){\n\
    \            new_arr.push(arr[0]);\n            arr.shift();\n        }else{\n\
    \            new_arr.push(arr[max]);\n            arr.pop();\n        }\n    \
    \    counter++;\n    }\n    return new_arr;\n}", "  let min = Math.min(...lst);\n\
    \  let max = Math.max(...lst);\n  let sorted = [];\n  sorted.push(min);\n  sorted.push(max);\n\
    \  lst.splice(lst.indexOf(min), 1);\n  lst.splice(lst.indexOf(max), 1);\n  while(lst.length\
    \ > 0){\n    min = Math.min(...lst);\n    max = Math.max(...lst);\n    sorted.push(min);\n\
    \    sorted.push(max);\n    lst.splice(lst.indexOf(min), 1);\n    lst.splice(lst.indexOf(max),\
    \ 1);\n  }\n  return sorted;\n}\n", "\tif(lst.length == 0) return [];\n\tvar asc_lst\
    \ = lst.sort(function(a,b){return a-b});\n\tvar des_lst = asc_lst.reverse();\n\
    \tvar ret_lst = [];\n\tvar flag = true;\n\twhile(asc_lst.length != 0 || des_lst.length\
    \ != 0){\n\t\tif(flag){\n\t\t\tret_lst.push(asc_lst.shift());\n\t\t}else{\n\t\t\
    \tret_lst.push(des_lst.shift());\n\t\t}\n\t\tflag = !flag;\n\t}\n\treturn ret_lst;\n\
    }\n", "    let min = 0;\n    let max = lst.length - 1;\n    let newArr = [];\n\
    \    let count = 0;\n    while(min <= max){\n        let maxNum = Math.max(...lst);\n\
    \        let minNum = Math.min(...lst);\n        if(count % 2 === 0){\n      \
    \      newArr.push(minNum);\n            lst.splice(lst.indexOf(minNum), 1);\n\
    \            min++;\n        }else{\n            newArr.push(maxNum);\n      \
    \      lst.splice(lst.indexOf(maxNum), 1);\n            max--;\n        }\n  \
    \      count++;\n    }\n    return newArr;\n}\n", "  let result = [];\n  while(lst.length\
    \ > 0){\n    result.push(Math.min(...lst));\n    result.push(Math.max(...lst));\n\
    \    lst.splice(lst.indexOf(Math.min(...lst)), 1);\n    lst.splice(lst.indexOf(Math.max(...lst)),\
    \ 1);\n  }\n  return result;\n}\n", "  lst.sort(function(a,b){\n    return a-b;\n\
    \  });\n  var lstleng = lst.length;\n  var answer = [];\n  if(lstleng%2 == 0){\n\
    \    for(i=0;i<lstleng;i++){\n      answer.push(lst[i]);\n      answer.push(lst[lstleng-i-1]);\n\
    \    }\n  }else{\n    for(i=0;i<lstleng-1;i++){\n      answer.push(lst[i]);\n\
    \      answer.push(lst[lstleng-i-1]);\n    }\n    answer.push(lst[lstleng-1]);\n\
    \  }\n  return answer;\n}\nvar lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\
    \ 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\
    \ 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\
    \ 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,\
    \ 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,\
    \ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,\
    \ 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\
    \ 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,\
    \ 156, 157, 158, 159,", "    var res = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        var temp = Math.min.apply(null, lst);\n        var temp2 = Math.max.apply(null,\
    \ lst);\n        if(i % 2 === 0){\n            res.push(temp);\n            lst.splice(lst.indexOf(temp),\
    \ 1);\n        }\n        else{\n            res.push(temp2);\n            lst.splice(lst.indexOf(temp2),\
    \ 1);\n        }\n    }\n    return res;\n}\n", "    lst.sort((a,b)=>a-b);\n \
    \   let i = 0;\n    let j = lst.length-1;\n    let res = [];\n    while(i<=j){\n\
    \        res.push(lst[i++]);\n        if(i<=j) res.push(lst[j--]);\n    }\n  \
    \  return res;\n}\n", "    var min = Math.min(...lst);\n    var max = Math.max(...lst);\n\
    \    var list = [];\n    var i = 0;\n    while(i < lst.length){\n        if(i\
    \ % 2 == 0){\n            list.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min(...lst);\n        }\n        else{\n       \
    \     list.push(max);\n            lst.splice(lst.indexOf(max), 1);\n        \
    \    max = Math.max(...lst);\n        }\n        i++;\n    }\n    return list;\n\
    }", "  return lst.sort((a,b)=>{\n    if(a<b){\n      return a-b;\n    }\n    else{\n\
    \      return b-a;\n    }\n  })\n}\n", "    if(lst.length === 0) return [];\n\
    \    var min_idx = 0;\n    var max_idx = 0;\n    var min = max = lst[0];\n   \
    \ for(var i = 1; i < lst.length; i++){\n        if(lst[i] < min){\n          \
    \  min = lst[i];\n            min_idx = i;\n        }\n        if(lst[i] > max){\n\
    \            max = lst[i];\n            max_idx = i;\n        }\n    }\n    var\
    \ lst_strange = [];\n    lst_strange.push(min);\n    lst_strange.push(max);\n\
    \    lst.splice(max_idx, 1);\n    lst.splice(min_idx, 1);\n    var result = [];\n\
    \    for(var i = 0; i < lst_strange.length; i++){\n        result.push(lst_strange[i]);\n\
    \        result = result.concat(strange_sort_list(lst));\n    }\n    return result;\n\
    }", "\tlst = lst.sort(function(a,b){return a-b;});\n\tvar sorted = [];\n\twhile(lst.length){\n\
    \t\tif(lst.length==1){\n\t\t\tsorted.push(lst[0]);\n\t\t\tbreak;\n\t\t}\n\t\t\
    sorted.push(lst.shift());\n\t\tsorted.push(lst.pop());\n\t}\n\treturn sorted;\n\
    }", "    var lst = lst;\n    var new_lst = [];\n    var a = lst.sort(function(a,\
    \ b){return a-b});\n    var start = 0;\n    var end = a.length-1;\n    for(var\
    \ i = 0; i < a.length; i++){\n        if(i % 2 == 0){\n            new_lst.push(a[start]);\n\
    \            start++;\n        }else{\n            new_lst.push(a[end]);\n   \
    \         end--;\n        }\n    }\n    return new_lst;\n}\n", "    let sorted\
    \ = [];\n    while(lst.length>0){\n        sorted.push(lst.splice(lst.indexOf(Math.min(...lst)),1)[0]);\n\
    \        sorted.push(lst.splice(lst.indexOf(Math.max(...lst)),1)[0]);\n    }\n\
    \    return sorted;\n}", "    var temp_lst = lst.sort(function(a,b){return a-b;});\n\
    \    var left = 0;\n    var right = temp_lst.length-1;\n    var result = [];\n\
    \    var s_r = true;\n    for(var i=0;i<temp_lst.length;i++){\n        if(s_r){\n\
    \            result.push(temp_lst[left]);\n            left++;\n            s_r\
    \ = false;\n        }\n        else{\n            result.push(temp_lst[right]);\n\
    \            right--;\n            s_r = true;\n        }\n    }\n    return result;\n\
    }\nvar lst = [2,7,4,5,8,0,1,3,6,9];", "\tvar new_lst = [];\n\tvar max_val = max(lst);\n\
    \tvar min_val = min(lst);\n\tvar min_index = 0;\n\tvar max_index = 0;\n\tvar removal_index\
    \ = 0;\n\tif(lst.length % 2 == 0){\n\t\tfor(var i = 0; i < lst.length; i++){\n\
    \t\t\tif(lst[i] == min_val){\n\t\t\t\tremoval_index = i;\n\t\t\t\tmin_index =\
    \ i;\n\t\t\t\tnew_lst.push(min_val);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tlst.splice(removal_index,\
    \ 1);\n\t\tmax_val = max(lst);\n\t\tfor(var i = 0; i < lst.length; i++){\n\t\t\
    \tif(lst[i] == max_val){\n\t\t\t\tremoval_index = i;\n\t\t\t\tmax_index = i;\n\
    \t\t\t\tnew_lst.push(max_val);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tlst.splice(removal_index,\
    \ 1);\n\t\tmin_val = min(lst);\n\t\tfor(var i = 0; i < lst.length; i++){\n\t\t\
    \tif(lst[i] == min_val){\n\t\t\t\tremoval_index = i;\n\t\t\t\tnew_lst.push(min_val);\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tlst.splice(removal_index, 1);\n\t\tmax_val\
    \ = max(lst);\n\t\tfor(var i = 0; i < lst.length; i++){\n\t\t\tif(lst[i] == max_val){\n\
    \t\t\t\tremoval_index = i;\n\t\t\t\tnew_lst.push(max_val);\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t}\n\t\tlst.splice(removal_index", "\tvar aux=[];\n\tvar result=[];\n\
    \tfor(var i=0;i<lst.length;i++){\n\t\taux.push(lst[i]);\n\t}\n\tvar f=false;\n\
    \twhile(aux.length>0){\n\t\tif(!f){\n\t\t\tresult.push(aux.splice(aux.indexOf(Math.min.apply(Math,aux)),1)[0]);\n\
    \t\t\tf=true;\n\t\t}\n\t\telse{\n\t\t\tresult.push(aux.splice(aux.indexOf(Math.max.apply(Math,aux)),1)[0]);\n\
    \t\t\tf=false;\n\t\t}\n\t}\n\treturn result;\n}\nvar res=strange_sort_list([2,1,4,6,8,9,3,6,7,6,0]);",
  "    lst = lst.sort(function(a,b){return a-b;});\n    var i=0,j=lst.length-1;\n\
    \    var newlst = [];\n    while(i<j){\n        newlst.push(lst[i++]);\n     \
    \   newlst.push(lst[j--]);\n    }\n    if(i===j) newlst.push(lst[i]);\n    return\
    \ newlst;\n}\n", "    lst = lst.sort((a,b)=>a-b);\n    const odd_indexed = lst.filter((_,i)=>i%2===0);\n\
    \    const even_indexed = lst.filter((_,i)=>i%2!==0);\n    return odd_indexed.concat(even_indexed.reverse());\n\
    }", "    var odd_lst = [];\n    var even_lst = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 == 0){\n            odd_lst.push(lst[i]);\n        }\n\
    \        else{\n            even_lst.push(lst[i]);\n        }\n    }\n    var\
    \ result = odd_lst.sort(function(a, b){return a - b});\n    var result2 = even_lst.sort(function(a,\
    \ b){return b - a});\n    var ans = [];\n    for(var i = 0; i < result.length;\
    \ i++){\n        ans.push(result[i]);\n        ans.push(result2[i]);\n    }\n\
    \    return ans;\n}", "    if(!lst) return null;\n    var temp = lst.slice();\n\
    \    var out = [];\n    while(temp.length > 0){\n        var max = Math.max.apply(null,\
    \ temp);\n        var min = Math.min.apply(null, temp);\n        out.push(min);\n\
    \        out.push(max);\n        temp.splice(temp.indexOf(max), 1);\n        temp.splice(temp.indexOf(min),\
    \ 1);\n    }\n    return out;\n}\n", "    // Your code here\n}\n", "  lst.sort((a,b)=>{\n\
    \    return a-b;\n  });\n  var result = [];\n  while(lst.length > 0){\n    result.push(lst.pop());\n\
    \    result.push(lst.shift());\n  }\n  return result;\n}\n", "  if(lst.length\
    \ === 0){\n    return [];\n  }\n  lst.sort(function(a,b){\n    return a-b;\n \
    \ });\n  var str_sort = [];\n  while(lst.length > 0){\n    str_sort.push(lst.pop());\n\
    \    str_sort.push(lst.shift());\n  }\n  return str_sort;\n}", "    if (lst.length\
    \ === 0) {\n        return lst;\n    }\n    var res = [];\n    var n = lst.length;\n\
    \    var min = Math.min.apply(null, lst);\n    res.push(min);\n    for (var i\
    \ = 1; i < n; i++) {\n        var max = Math.max.apply(null, lst);\n        res.push(max);\n\
    \        min = Math.min.apply(null, lst);\n        res.push(min);\n    }\n   \
    \ return res;\n}\n", "  lst.sort(function(a,b){\n    return a-b;\n  });\n  var\
    \ odd_lst = lst.filter(function(x,i){\n    return i%2!==0;\n  });\n  var even_lst\
    \ = lst.filter(function(x,i){\n    return i%2===0;\n  });\n  var result = [];\n\
    \  for(var i=0;i<odd_lst.length;i++){\n    result.push(even_lst[i]);\n    result.push(odd_lst[i]);\n\
    \  }\n  if(even_lst.length>odd_lst.length){\n    result.push(even_lst[even_lst.length-1]);\n\
    \  }\n  return result;\n}\n", "    var results = [];\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var length = lst.length;\n\
    \    for(var i = 0; i < length; i++){\n        results.push(min);\n        results.push(max);\n\
    \        lst.splice(lst.indexOf(min), 1);\n        lst.splice(lst.indexOf(max),\
    \ 1);\n        min = Math.min.apply(null, lst);\n        max = Math.max.apply(null,\
    \ lst);\n    }\n    return results;\n}\n", "    if (lst.length == 0) return [];\n\
    \    if (lst.length == 1) return lst;\n    let min = lst[0];\n    let max = lst[0];\n\
    \    let minpos = 0;\n    let maxpos = 0;\n    for (let i = 0; i < lst.length;\
    \ i++){\n        if (lst[i] > max){\n            max = lst[i];\n            maxpos\
    \ = i;\n        }\n        if (lst[i] < min){\n            min = lst[i];\n   \
    \         minpos = i;\n        }\n    }\n    let begin = lst.slice(0, minpos);\n\
    \    let end = lst.slice(minpos + 1, lst.length);\n    return [min].concat(strange_sort_list(end)).concat(strange_sort_list(begin)).concat([max]);\n\
    }\n", "    return lst.sort((a,b)=>a-b).sort((a,b)=>b-a);\n}\n", "  var min = min_index(lst),\n\
    \      max = max_index(lst),\n      res = [];\n  while(lst.length){\n    res.push(lst[min]);\n\
    \    lst.splice(min,1);\n    if(lst.length){\n      res.push(lst[max]);\n    \
    \  lst.splice(max,1);\n    }\n    max = max_index(lst);\n    min = min_index(lst);\n\
    \  }\n  return res;\n}\n", "    var arr = lst.slice();\n    var sorted = [];\n\
    \    while(arr.length > 0){\n        sorted.push(Math.min.apply(null, arr));\n\
    \        arr.splice(arr.indexOf(Math.min.apply(null, arr)), 1);\n        if(arr.length\
    \ > 0){\n            sorted.push(Math.max.apply(null, arr));\n            arr.splice(arr.indexOf(Math.max.apply(null,\
    \ arr)), 1);\n        }\n    }\n    return sorted;\n}", "  var orig_lst = lst.slice();\n\
    \  var sorted_lst = [];\n  while(orig_lst.length > 0){\n    sorted_lst.push(min_val(orig_lst));\n\
    \    sorted_lst.push(max_val(orig_lst));\n  }\n  sorted_lst.pop();\n  return sorted_lst;\n\
    }\n", "    let lst_sort = [...lst];\n    lst_sort.sort((a,b) => a-b);\n    let\
    \ result = [];\n    while(lst_sort.length > 0){\n        result.push(lst_sort.shift());\n\
    \        if(lst_sort.length > 0){\n            result.push(lst_sort.pop());\n\
    \        }\n    }\n    return result;\n}", "  let odd = lst.filter((x,i) => i%2===0).sort((a,b)\
    \ => a-b);\n  let even = lst.filter((x,i) => i%2!==0).sort((a,b) => b-a);\n  return\
    \ even.concat(odd);\n}", "    var result = [];\n    while(lst.length > 0){\n \
    \       result.push(Math.min.apply(Math, lst));\n        result.push(Math.max.apply(Math,\
    \ lst));\n        lst.splice(lst.indexOf(Math.min.apply(Math, lst)), 1);\n   \
    \     lst.splice(lst.indexOf(Math.max.apply(Math, lst)), 1);\n    }\n    return\
    \ result;\n}", "    //result\n    var res = [];\n    //sort the given list\n \
    \   lst.sort(function(a,b){return a-b});\n    //find the midpoint of the list\n\
    \    var mid = Math.floor(lst.length/2);\n    //if list has odd numbers\n    if(lst.length%2){\n\
    \        //push maximum number to result\n        res.push(lst[lst.length-1]);\n\
    \        //pop the maximum number from the list\n        lst.pop();\n    }\n \
    \   //while the given list still has elements\n    while(lst.length){\n      \
    \  //push the minimum number to result\n        res.push(lst[0]);\n        //pop\
    \ the minimum number from the list\n        lst.shift();\n        //push the maximum\
    \ number to result\n        res.push(lst[lst.length-1]);\n        //pop the maximum\
    \ number from the list\n        lst.pop();\n    }\n    //return result\n    return\
    \ res;\n}\n", "  var min = Math.min.apply(null, lst), max = Math.max.apply(null,\
    \ lst), result = [];\n  while(lst.length > 0){\n    result.push(min);\n    result.push(max);\n\
    \    lst.splice(lst.indexOf(min), 1);\n    lst.splice(lst.indexOf(max), 1);\n\
    \    min = Math.min.apply(null, lst);\n    max = Math.max.apply(null, lst);\n\
    \  }\n  return result;\n}\n", "\tvar newLst = [], tempLst = lst.slice();\n\tfor(var\
    \ i = 0; i < lst.length; i++){\n\t\tif(i % 2 === 0){\n\t\t\tnewLst.push(tempLst.splice(0,\
    \ 1));\n\t\t} else {\n\t\t\tnewLst.push(tempLst.splice(tempLst.length - 1, 1));\n\
    \t\t}\n\t}\n\tconsole.log(newLst);\n\treturn newLst;\n}\n", "    var result =\
    \ [], current = lst.shift();\n    for(var i = 0; i < lst.length; i++){\n     \
    \   if(i % 2 == 0){\n            result.push(Math.min.apply(null, lst));\n   \
    \         lst.splice(lst.indexOf(Math.min.apply(null, lst)), 1);\n        } else\
    \ {\n            result.push(Math.max.apply(null, lst));\n            lst.splice(lst.indexOf(Math.max.apply(null,\
    \ lst)), 1);\n        }\n    }\n    return result;\n}\n", "    var even_indices\
    \ = lst.filter(function(val, ind){\n        return ind % 2 === 0;\n    });\n \
    \   var odd_indices = lst.filter(function(val, ind){\n        return ind % 2 !==\
    \ 0;\n    });\n    return even_indices.concat(odd_indices.reverse());\n}\n", " \
    \ var min_list = lst.filter(function(num){\n    return (num == Math.min.apply(null,\
    \ lst));\n  });\n  var max_list = lst.filter(function(num){\n    return (num ==\
    \ Math.max.apply(null, lst));\n  });\n  var mid_list = lst.filter(function(num){\n\
    \    return (num !== Math.min.apply(null, lst) && num !== Math.max.apply(null,\
    \ lst));\n  });\n  return min_list.concat(max_list, mid_list);\n}", "    let i\
    \ = 0;\n    while(i < lst.length){\n        lst.splice(i, 0, Math.min(...lst));\n\
    \        lst.splice(i + 1, 1);\n        lst.splice(i + 1, 0, Math.max(...lst));\n\
    \        lst.splice(i + 2, 1);\n        i += 2;\n    }\n    return lst;\n}\n",
  "    var arr = [];\n    var l = lst.length;\n    for(var i = 0; i < l; i++) {\n\
    \        if(i % 2) {\n            arr.push(lst.pop());\n        }\n        else\
    \ {\n            arr.push(lst.shift());\n        }\n    }\n    return arr;\n}\n",
  "  var sorted_list = [];\n  var odd_list = [];\n  var even_list = [];\n  for (var\
    \ i = 0; i < lst.length; i++){\n    if (lst[i] % 2 === 0){\n      even_list.push(lst[i]);\n\
    \    } else {\n      odd_list.push(lst[i]);\n    }\n  }\n  even_list.sort(function(a,\
    \ b){return a-b});\n  odd_list.sort(function(a, b){return a-b});\n  if (odd_list.length\
    \ % 2 === 0){\n    for (var i = 0; i < odd_list.length; i+=2){\n      sorted_list.push(odd_list[i]);\n\
    \      sorted_list.push(odd_list[i+1]);\n    }\n    for (var i = 0; i < even_list.length;\
    \ i+=2){\n      sorted_list.push(even_list[i]);\n      sorted_list.push(even_list[i+1]);\n\
    \    }\n  } else {\n    for (var i = 0; i < odd_list.length; i+=2){\n      sorted_list.push(odd_list[i]);\n\
    \      sorted_list.push(odd_list[i+1]);\n    }\n    for (var i = 0; i < even_list.length;\
    \ i+=2){\n      sorted_list.push(even_list[i]);\n      sorted_list.push(even_list[i+1]);\n\
    \    }\n  }\n  return sorted_list;\n}\n", "    // TODO: Create strange sort list\
    \ here\n    var new_lst = []\n    var min = lst[0]\n    var min_idx = 0\n    var\
    \ max = lst[0]\n    var max_idx = 0\n    for (var i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > max) {\n            max = lst[i]\n            max_idx\
    \ = i\n        }\n        if (lst[i] < min) {\n            min = lst[i]\n    \
    \        min_idx = i\n        }\n    }\n    for (var i = 0; i < lst.length; i++)\
    \ {\n        new_lst.push(min)\n        new_lst.push(max)\n        min = min +\
    \ 1\n        max = max - 1\n    }\n    return new_lst\n}\n", "    var min = Math.min(...lst),\n\
    \        max = Math.max(...lst),\n        min_ind = lst.indexOf(min),\n      \
    \  max_ind = lst.indexOf(max),\n        odd = min_ind > max_ind,\n        result\
    \ = [];\n    \n    if(odd){\n        lst.splice(min_ind, 1);\n        lst.splice(max_ind,\
    \ 1);\n        result.push(min, max);\n    } else {\n        lst.splice(max_ind,\
    \ 1);\n        lst.splice(min_ind, 1);\n        result.push(max, min);\n    }\n\
    \    \n    while(lst.length > 0){\n        if(odd){\n            max = Math.max(...lst);\n\
    \            max_ind = lst.indexOf(max);\n            lst.splice(max_ind, 1);\n\
    \            result.push(max);\n        } else {\n            min = Math.min(...lst);\n\
    \            min_ind = lst.indexOf(min);\n            lst.splice(min_ind, 1);\n\
    \            result.push(min);\n        }\n        odd = !odd;\n    }\n    return\
    \ result;\n}", "    if(lst.length === 0) return []\n    lst.sort((a,b) => a-b)\n\
    \    let strs = []\n    while(lst.length > 0){\n        strs.push(lst.pop())\n\
    \        strs.push(lst.shift())\n    }\n    return strs\n}\n", "  var str = \"\
    \";\n  var lst2 = sort_list(lst);\n  while(lst2.length>0){\n    var min = lst2[0];\n\
    \    var max = lst2[lst2.length-1];\n    var max_index = lst2.indexOf(max);\n\
    \    str += min + \"-\" + max + \"-\";\n    lst2.splice(0,1);\n    lst2.splice(max_index-1,1);\n\
    \  }\n  return str.substring(0,str.length-1);\n}", "    var newlst = [];\n   \
    \ var sortlst = lst.sort(function(a,b){\n        return a-b;\n    });\n    for(var\
    \ i = 0; i < sortlst.length; i++){\n        if(i % 2 === 0){\n            newlst.push(sortlst[i]);\n\
    \        }\n        else{\n            newlst.push(sortlst[sortlst.length - (i\
    \ + 1)]);\n        }\n    }\n    return newlst;\n}", "    var newlst = [];\n \
    \   var max_lst = max_list(lst);\n    var len = max_lst.length;\n    for(var i\
    \ = 0; i < len; i++){\n        if(i % 2 === 0){\n            newlst.push(max_lst[i]);\n\
    \        }else{\n            newlst.push(max_lst[len - i - 1]);\n        }\n \
    \   }\n    return newlst;\n}\n", "    var odd=[],even=[];\n    for(var i=0;i<lst.length;i++){\n\
    \        if(i%2==0){\n            odd.push(lst[i]);\n        }else{\n        \
    \    even.push(lst[i]);\n        }\n    }\n    odd.sort(function(a,b){return a-b});\n\
    \    even.sort(function(a,b){return b-a});\n    for(var i=0;i<lst.length;i++){\n\
    \        if(i%2==0){\n            lst[i]=odd[0];\n            odd.shift();\n \
    \       }else{\n            lst[i]=even[0];\n            even.shift();\n     \
    \   }\n    }\n    return lst;\n}\n", "    lst.sort((a,b)=>a-b);\n    let result\
    \ = [];\n    while(lst.length>0){\n        result.push(lst.shift());\n       \
    \ result.push(lst.pop());\n    }\n    return result;\n}", "  lst.sort(function(a,b){return\
    \ a-b});\n  var max_i = lst.length-1;\n  var min_i = 0;\n  var r = [];\n  while(r.length<lst.length){\n\
    \    r.push(lst[min_i++]);\n    if(r.length<lst.length){\n      r.push(lst[max_i--]);\n\
    \    }\n  }\n  return r;\n}\n", "    var sorted_array = lst.sort(function(a, b){return\
    \ a-b});\n    var min = 0;\n    var max = sorted_array.length-1;\n    var result\
    \ = [];\n    while(min<=max){\n        result.push(sorted_array[min]);\n     \
    \   if(min!=max){\n            result.push(sorted_array[max]);\n        }\n  \
    \      min++;\n        max--;\n    }\n    return result;\n}\n", "    var res =\
    \ [],\n        min = lst[0],\n        i;\n    for(i = 0; i < lst.length; i++){\n\
    \        if(lst[i] < min){\n            min = lst[i];\n        }\n    }\n    res.push(min);\n\
    \    lst.splice(lst.indexOf(min), 1);\n    while(lst.length){\n        var max\
    \ = lst[0];\n        for(i = 0; i < lst.length; i++){\n            if(lst[i] >\
    \ max){\n                max = lst[i];\n            }\n        }\n        res.push(max);\n\
    \        lst.splice(lst.indexOf(max), 1);\n        var min = lst[0];\n       \
    \ for(i = 0; i < lst.length; i++){\n            if(lst[i] < min){\n          \
    \      min = lst[i];\n            }\n        }\n        res.push(min);\n     \
    \   lst.splice(lst.indexOf(min), 1);\n    }\n    return res;\n}\n\nstrange_sort_list([1,\
    \ 2, 4, 5, 8, 7, 6, 3]);\n", "  return lst.sort((a,b)=>a-b).map((a,i)=>i%2==0?lst.shift():lst.pop())\n\
    }\n", "    var increasing = true;\n    var new_list = [];\n    while(lst.length\
    \ > 0){\n        var max_num = Math.max.apply(null, lst);\n        var min_num\
    \ = Math.min.apply(null, lst);\n        if(increasing){\n            new_list.push(min_num);\n\
    \            lst.splice(lst.indexOf(min_num), 1);\n            increasing = false;\n\
    \        }else{\n            new_list.push(max_num);\n            lst.splice(lst.indexOf(max_num),\
    \ 1);\n            increasing = true;\n        }\n    }\n    return new_list;\n\
    }", "    //Your code goes here\n    var arr = lst.sort((a,b)=>a-b);\n    var new_arr\
    \ = [];\n    var start = 0;\n    var end = arr.length-1;\n    for(var i=0;i<arr.length;i++){\n\
    \        if(i%2==0){\n            new_arr.push(arr[start]);\n            start++;\n\
    \        }else{\n            new_arr.push(arr[end]);\n            end--;\n   \
    \     }\n    }\n    return new_arr;\n}\n", "    lst = quick_sort(lst);\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(i%2 === 0){\n            lst.unshift(lst.pop());\n\
    \        }\n    }\n    return lst;\n}\n", "  let min = Math.min(...lst);\n  let\
    \ max = Math.max(...lst);\n  let reverse = [];\n  while(lst.length){\n    let\
    \ indmin = lst.indexOf(min);\n    let indmax = lst.indexOf(max);\n    lst.splice(indmin,1);\n\
    \    lst.splice(indmax-1,1);\n    reverse.push(min);\n    reverse.push(max);\n\
    \    min = Math.min(...lst);\n    max = Math.max(...lst);\n  }\n  return reverse;\n\
    }\n", "    //set the original array as well as a new array that will\n    //be\
    \ returned later\n    lst = sort_list(lst);\n    var new_list = [];\n    //set\
    \ up a counter\n    var counter = 0;\n    //loop through the list, if the counter\
    \ is even, find the max value\n    //and add to the new list, otherwise add the\
    \ minimum value and remove\n    //it from the original list\n    while(lst.length\
    \ > 0){\n        if(counter % 2 == 0){\n            new_list.push(Math.max.apply(null,\
    \ lst));\n        }\n        else{\n            new_list.push(Math.min.apply(null,\
    \ lst));\n            lst.splice(lst.indexOf(Math.min.apply(null, lst)), 1);\n\
    \        }\n        counter += 1;\n    }\n    return new_list;\n}\n", "  var sorted\
    \ = false;\n  while(!sorted){\n    sorted = true;\n    for(var i = 0; i < lst.length-1;\
    \ i++){\n      if(lst[i] > lst[i+1]){\n        var temp = lst[i];\n        lst[i]\
    \ = lst[i+1];\n        lst[i+1] = temp;\n        sorted = false;\n      }\n  \
    \  }\n  }\n  var new_list = [];\n  var len = lst.length;\n  for(var i = 0; i <\
    \ len; i++){\n    if(i%2 == 0){\n      new_list.push(lst[i/2]);\n    }\n    else{\n\
    \      new_list.push(lst[len-i/2-1]);\n    }\n  }\n  return new_list;\n}", "\n\
    }\n", "  var lst2 = lst.sort(function(a,b){return a-b});\n  var newLst = [];\n\
    \  for(var i = 0; i < lst2.length; i++){\n    var arr1 = lst2.splice(0,i+1);\n\
    \    for(var j = 0; j < arr1.length; j++){\n      newLst.push(arr1[j]);\n    }\n\
    \  }\n  return newLst;\n}\n", "  //Your code here\n  if(lst.length === 0) return\
    \ [];\n  const ans = [];\n  const n = lst.length;\n  let left = 0;\n  let right\
    \ = n - 1;\n  while(left <= right){\n    ans.push(lst[left]);\n    if(left !==\
    \ right) ans.push(lst[right]);\n    left++;\n    right--;\n  }\n  return ans;\n\
    }\n", "    var result = [];\n    var length = lst.length;\n    var min_index =\
    \ find_min_index(lst);\n    var max_index = find_max_index(lst);\n    var index\
    \ = 0;\n    while(index < length){\n        result.push(lst[min_index]);\n   \
    \     result.push(lst[max_index]);\n        lst.splice(min_index, 1);\n      \
    \  lst.splice(max_index, 1);\n        min_index = find_min_index(lst);\n     \
    \   max_index = find_max_index(lst);\n        index += 2;\n    }\n    return result;\n\
    }\n", "    var sorted_lst = lst.sort(function(a,b){return a-b;});\n    var result\
    \ = [];\n    var n = lst.length;\n    for(var i = 0; i < n; i++){\n        if(i\
    \ % 2 == 0){\n            result.push(sorted_lst[i/2]);\n        }\n        else{\n\
    \            result.push(sorted_lst[(n - 1) - Math.floor(i/2)]);\n        }\n\
    \    }\n    return result;\n}\n", "    lst.sort(function(a,b){return a-b});\n\
    \    var a=[],b=[];\n    for(var i=0;i<lst.length;i++){\n        if(i%2==0){\n\
    \            a.push(lst[i]);\n        }else{\n            b.push(lst[i]);\n  \
    \      }\n    }\n    var c=[];\n    for(var i=0;i<a.length;i++){\n        c.push(a[i]);\n\
    \        c.push(b[i]);\n    }\n    return c;\n}", "    // Loop over list to find\
    \ min and max values\n    //Make new list that starts with min\n    // then max,\
    \ then min+1 and so on\n    // return new list\n    // Need to start with initial\
    \ min and max values\n    var min = lst[0];\n    var max = lst[0];\n    for (var\
    \ i = 0; i < lst.length; i++){\n        if (lst[i] > max){\n            max =\
    \ lst[i];\n        }\n        if (lst[i] < min){\n            min = lst[i];\n\
    \        }\n    }\n    var sorted_list = [];\n    sorted_list.push(min);\n   \
    \ sorted_list.push(max);\n    var sub_lst = [];\n    var min_list = [];\n    var\
    \ max_list = [];\n    //Sort remaining values into min and max lists\n    for\
    \ (var i = 0; i < lst.length; i++){\n        if (lst[i] != min && lst[i] != max){\n\
    \            sub_lst.push(lst[i]);\n        }\n    }\n    for (var i = 0; i <\
    \ sub_lst.length; i++){\n        if (sub_lst[i] < (max - min)/2){\n          \
    \  min_list.push(sub_lst[i]);\n        } else {\n            max_list.push(sub_lst[i]);\n\
    \        }\n    }\n    //Loop to sort min/max lists\n    while (min_list.length\
    \ > 0 && max_list.length > 0){\n        sorted_list.push(min_list.pop());\n  \
    \      sorted_list.push(max_list.pop());\n    }\n    // Add any remaining values\
    \ to sorted list\n    while (min_list.length > 0){\n        sorted_list.push(min_list.pop());\n\
    \    }\n    while (max_list.length > 0){\n        sorted_list.push(max_list.pop());\n\
    \    }\n    return sorted_list;\n}\n", "    var min = Math.min(...lst);\n    var\
    \ max = Math.max(...lst);\n    var res = [];\n    while(true){\n        var index\
    \ = lst.indexOf(min);\n        res.push(min);\n        lst.splice(index, 1);\n\
    \        if(lst.length == 0){\n            break;\n        }\n        var index\
    \ = lst.indexOf(max);\n        res.push(max);\n        lst.splice(index, 1);\n\
    \        if(lst.length == 0){\n            break;\n        }\n        min = Math.min(...lst);\n\
    \        max = Math.max(...lst);\n    }\n    return res;\n}", "    var sorted_list\
    \ = [];\n    var first_half = [];\n    var second_half = [];\n    var sorted_lst\
    \ = lst.sort((a,b) => a-b);\n    var mid_index = Math.floor(sorted_lst.length/2);\n\
    \    var odd_length = sorted_lst.length % 2 == 1;\n    for(var i = 0; i < mid_index;\
    \ i++){\n        first_half.push(sorted_lst[i]);\n        second_half.push(sorted_lst[sorted_lst.length\
    \ - 1 - i]);\n    }\n    if(odd_length){\n        first_half.push(sorted_lst[mid_index]);\n\
    \    }\n    for(var i = 0; i < Math.min(first_half.length, second_half.length);\
    \ i++){\n        sorted_list.push(first_half[i]);\n        sorted_list.push(second_half[i]);\n\
    \    }\n    if(odd_length){\n        sorted_list.push(first_half[first_half.length\
    \ - 1]);\n    }\n    return sorted_list;\n}", "  let result = [];\n  while(lst.length\
    \ > 0){\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n  \
    \  let index = lst.indexOf(min);\n    let index2 = lst.indexOf(max);\n    lst.splice(index,\
    \ 1);\n    lst.splice(index2, 1);\n    result.push(min);\n    result.push(max);\n\
    \  }\n  return result;\n}", "  var result = [];\n  var min, max, min_index, max_index;\n\
    \  var min_lst = [];\n  var max_lst = [];\n  while(lst.length > 0){\n    min =\
    \ Math.min.apply(null, lst);\n    max = Math.max.apply(null, lst);\n    min_index\
    \ = lst.indexOf(min);\n    max_index = lst.indexOf(max);\n    min_lst.push(min);\n\
    \    max_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index,\
    \ 1);\n  }\n  for(var i = 0; i < min_lst.length; i++){\n    result.push(min_lst[i]);\n\
    \    result.push(max_lst[i]);\n  }\n  return result;\n}\n", "    //sort the list\
    \ (in this case js already has a built in sort function)\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let sorted_lst = lst.sort((a,b) => a-b);\n\
    \    console.log(sorted_lst);\n    let result = [];\n    let i = 0;\n    let j\
    \ = sorted_lst.length - 1;\n    for(let k = 0; k < lst.length; k++){\n       \
    \ if(k % 2 == 0){\n            result.push(sorted_lst[i]);\n            i++;\n\
    \        }else{\n            result.push(sorted_lst[j]);\n            j--;\n \
    \       }\n    }\n    return result;\n}\n", "    let sorted = [];\n    let small\
    \ = lst.slice().sort((a,b) => a-b);\n    let large = small.slice().reverse();\n\
    \    let count = 0;\n    while(count < lst.length){\n        count % 2 === 0 ?\
    \ sorted.push(small.shift()) : sorted.push(large.shift());\n        count++;\n\
    \    }\n    return sorted;\n}", "    let lst_sorted = lst.sort(function(a, b){return\
    \ a-b});\n    let lst_result = [];\n    let temp_list = lst_sorted.slice();\n\
    \    while (temp_list.length > 0){\n        lst_result.push(temp_list.shift());\n\
    \        if (temp_list.length > 0){\n            lst_result.push(temp_list.pop());\n\
    \        }\n    }\n    return lst_result;\n}\n", "    var res = [];\n    //if\
    \ list empty\n    if (lst.length == 0) {\n        return res;\n    }\n    //sort\
    \ list in ascending order\n    lst.sort(function(a, b){return a-b});\n    //variable\
    \ to track value\n    var marker = 0;\n    //go through the list\n    for (var\
    \ i = 0; i < lst.length; i++){\n        //go through the list backwards\n    \
    \    for (var j = lst.length-1; j >= 0; j--){\n            //if current value\
    \ is less then previous\n            if (lst[j] < lst[j-1]){\n               \
    \ //swap values\n                var temp = lst[j];\n                lst[j] =\
    \ lst[j-1];\n                lst[j-1] = temp;\n            }\n        }\n    \
    \    //add current minimum value to the result list\n        res.push(lst[marker]);\n\
    \        //remove current minimum value from list\n        lst.splice(marker,\
    \ 1);\n    }\n    return res;\n}\n", "    //...\n    return res;\n}\nvar lst =\
    \ [1,2,3,4,5,6,7,8,9];", "  // \u0432\u0430\u0448 \u043A\u043E\u0434\n  var lst_min_max\
    \ = [];\n  var len = lst.length;\n  var i;\n  var left = lst;\n  var min = lst[0];\n\
    \  var max = lst[0];\n  var index_min;\n  var index_max;\n  var min_max = [min,\
    \ max];\n  var left_min;\n  var left_max;\n  var max_left = [];\n  var min_left\
    \ = [];\n  var max_left_min;\n  var index_max_left_min;\n  var min_left_max;\n\
    \  var index_min_left_max;\n  var left_min_max;\n  var left_max_min;\n  var index_left_min_max;\n\
    \  var index_left_max_min;\n  var left_left_min_max;\n  var left_left_max_min;\n\
    \  var left_left_min_max_index;\n  var left_left_max_min_index;\n  var result;\n\
    \  for (i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n\
    \    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  min_max =\
    \ [min, max];\n  index_min = lst.indexOf(min);\n  index_max = lst.indexOf(max);\n\
    \  left = lst.slice(index_min + 1, index_max).concat(lst.slice(index_max + 1)).concat(lst.slice(0,\
    \ index_min));\n  left_min = left.slice(0, left.indexOf(min));\n  left_max = left.slice(left.indexOf(min)\
    \ + 1);\n  for (i = 0; i < left_max.length; i++) {\n    if (left_max[i] > max)\
    \ {\n      max = left_max[i];\n    }\n  }\n  index_max = left_max.indexOf(max);",
  "    //console.log(lst);\n    var ret = [];\n    var max_el = null;\n    var min_el\
    \ = null;\n    var max_pos = null;\n    var min_pos = null;\n    while(lst.length\
    \ > 0){\n        min_el = lst[0];\n        min_pos = 0;\n        max_el = lst[0];\n\
    \        max_pos = 0;\n        for(var i = 0; i < lst.length; i++){\n        \
    \    if(lst[i] < min_el){\n                min_el = lst[i];\n                min_pos\
    \ = i;\n            }\n            if(lst[i] > max_el){\n                max_el\
    \ = lst[i];\n                max_pos = i;\n            }\n        }\n        if(ret.length\
    \ % 2 == 0){\n            ret.push(min_el);\n            lst.splice(min_pos, 1);\n\
    \        }else{\n            ret.push(max_el);\n            lst.splice(max_pos,\
    \ 1);\n        }\n    }\n    //console.log(ret);\n    return ret;\n}\n", "\tif\
    \ (lst.length === 0) return [];\n\tlet res = [],\n\t\t\tleft = lst.slice().sort((a,b)\
    \ => a-b),\n\t\t\tright = lst.slice().sort((a,b) => b-a);\n\twhile (left.length\
    \ > 0 || right.length > 0) {\n\t\tif (left.length > 0) {\n\t\t\tres.push(left.shift());\n\
    \t\t}\n\t\tif (right.length > 0) {\n\t\t\tres.push(right.shift());\n\t\t}\n\t\
    }\n\treturn res;\n}\n", "    function sort_inner(lst, lst2){\n        if(lst.length\
    \ > 0){\n            var min = lst[0];\n            var max = lst[0];\n      \
    \      var index_min = 0;\n            var index_max = 0;\n            for(var\
    \ i = 0; i < lst.length; i++){\n                if(lst[i] < min){\n          \
    \          min = lst[i];\n                    index_min = i;\n               \
    \ }\n                if(lst[i] > max){\n                    max = lst[i];\n  \
    \                  index_max = i;\n                }\n            }\n        \
    \    lst2.push(min);\n            lst.splice(index_min, 1);\n            lst2.push(max);\n\
    \            lst.splice(index_max - 1, 1);\n            return sort_inner(lst,\
    \ lst2);\n        }\n        else{\n            return lst2;\n        }\n    }\n\
    \    return sort_inner(lst, []);\n}\n", "\tvar lst = lst.sort(function(a,b){\n\
    \t\treturn a-b;\n\t});\n\tvar lst_strange = [];\n\tvar len = lst.length;\n\twhile(len>0){\n\
    \t\tlst_strange.push(lst.pop());\n\t\tlst_strange.push(lst.shift());\n\t\tlen-=2;\n\
    \t}\n\treturn lst_strange;\n}", "    var sorted = lst.sort(function(a,b){return\
    \ a-b;});\n    var min = sorted.shift();\n    var max = sorted.pop();\n    var\
    \ result = [];\n    var l = sorted.length;\n    for(var i = 0; i < l; i++){\n\
    \        if(i % 2 == 0){\n            result.push(min);\n            min = sorted.shift();\n\
    \        }\n        else{\n            result.push(max);\n            max = sorted.pop();\n\
    \        }\n    }\n    if(min != undefined){\n        result.push(min);\n    }\n\
    \    if(max != undefined){\n        result.push(max);\n    }\n    return result;\n\
    }\n", "    var asc_order_lst = [];\n    var desc_order_lst = [];\n    var index\
    \ = 0;\n    var temp_lst = lst.slice();\n    var result = [];\n    var min_number\
    \ = Math.min.apply(null, temp_lst);\n    var min_index = temp_lst.indexOf(min_number);\n\
    \    asc_order_lst.push(min_number);\n    temp_lst.splice(min_index, 1);\n   \
    \ while(index < temp_lst.length){\n        var max_number = Math.max.apply(null,\
    \ temp_lst);\n        var max_index = temp_lst.indexOf(max_number);\n        desc_order_lst.push(max_number);\n\
    \        temp_lst.splice(max_index, 1);\n        index++;\n    }\n    index =\
    \ 0;\n    while(index < asc_order_lst.length){\n        result.push(asc_order_lst[index]);\n\
    \        if(index < desc_order_lst.length){\n            result.push(desc_order_lst[index]);\n\
    \        }\n        index++;\n    }\n    return result;\n}\n", "    var new_list\
    \ = [];\n    var ls_sort = [];\n    var ls_sort_rev = [];\n    //Sort the list\
    \ first\n    ls_sort = lst.sort(function(a, b){return a-b});\n    ls_sort_rev\
    \ = ls_sort.slice().reverse();\n    //Get the lowest and highest value of the\
    \ first pair, then remove it.\n    new_list.push(ls_sort[0]);\n    new_list.push(ls_sort_rev[0]);\n\
    \    ls_sort.splice(0,1);\n    ls_sort_rev.splice(0,1);\n    //Begin looping through.\n\
    \    while(ls_sort.length > 0){\n        new_list.push(ls_sort[0]);\n        ls_sort.splice(0,1);\n\
    \        if(ls_sort_rev.length > 0){\n            new_list.push(ls_sort_rev[0]);\n\
    \            ls_sort_rev.splice(0,1);\n        }\n    }\n    return new_list;\n\
    }\n", "  var rest = lst.slice(1),\n      min = Math.min.apply(Math,rest),\n  \
    \    max = Math.max.apply(Math,rest),\n      mid = null;\n  if(lst.length == 1){\n\
    \    return lst;\n  }else if(lst.length == 2){\n    return [min,max];\n  }else{\n\
    \    return [min].concat(strange_sort_list(rest.filter(function(item){\n     \
    \ return item !== min;\n    }))).concat([max]).concat(strange_sort_list(rest.filter(function(item){\n\
    \      return item !== max;\n    })));\n  }\n}", "\n}\n\n", "    var min = Math.min(...lst);\n\
    \    var max = Math.max(...lst);\n    var result = [];\n    result.push(min);\n\
    \    result.push(max);\n    var tmp = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] != min && lst[i] != max){\n            tmp.push(lst[i]);\n\
    \        }\n    }\n    if(tmp.length != 0){\n        for(var i = 0; i < tmp.length;\
    \ i++){\n            if(i % 2 == 0){\n                var new_min = Math.min(...tmp);\n\
    \                result.push(new_min);\n                var index = tmp.indexOf(new_min);\n\
    \                tmp.splice(index, 1);\n            }\n            else{\n   \
    \             var new_max = Math.max(...tmp);\n                result.push(new_max);\n\
    \                var index = tmp.indexOf(new_max);\n                tmp.splice(index,\
    \ 1);\n            }\n        }\n    }\n    return result;\n}", "    let newArr\
    \ = lst.sort(function(a, b){return a-b})\n    let strg = []\n    while(newArr.length>0){\n\
    \        let x = newArr.shift()\n        strg.push(x)\n        let y = newArr.pop()\n\
    \        strg.push(y)\n    }\n    return strg\n}\n", "    var result = [];\n \
    \   var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null, lst);\n\
    \    var last = 0;\n    var result = [min];\n    var idx = 0;\n    while(result.length\
    \ < lst.length){\n        for(var i = 0; i < lst.length; i++){\n            if(lst[i]\
    \ > last && lst[i] < max && lst[i] !== min){\n                max = lst[i];\n\
    \                idx = i;\n            }\n        }\n        result.push(max);\n\
    \        last = max;\n        max = Math.max.apply(null, lst);\n        lst[idx]\
    \ = min - 1;\n    }\n    return result;\n}\n", "    let left = 0;\n    let right\
    \ = lst.length - 1;\n    let list = [];\n    while (left <= right) {\n       \
    \ let min = Math.min(lst[left], lst[right]);\n        let max = Math.max(lst[left],\
    \ lst[right]);\n        list.push(min);\n        list.push(max);\n        left++;\n\
    \        right--;\n    }\n    return list;\n}\n", "    let result = [];\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(i % 2 == 0){\n            result.push(Math.min(...lst));\n\
    \        }else{\n            result.push(Math.max(...lst));\n        }\n     \
    \   lst.splice(lst.indexOf(result[i]), 1);\n    }\n    return result;\n}\n", " \
    \   var sorted = [], min = Math.min.apply(null, lst), max = Math.max.apply(null,\
    \ lst);\n    while(sorted.length < lst.length){\n        sorted.push(min);\n \
    \       sorted.push(max);\n        min = Math.min.apply(null, lst.filter(function(num){\
    \ return num != min }));\n        max = Math.max.apply(null, lst.filter(function(num){\
    \ return num != max }));\n    }\n    return sorted;\n}", "    var min = lst[0];\n\
    \    var max = lst[0];\n    var sorted_lst = [lst[0]];\n    var i;\n    for(i\
    \ = 1; i < lst.length; i++){\n        if(lst[i] < min){\n            min = lst[i];\n\
    \        }\n        if(lst[i] > max){\n            max = lst[i];\n        }\n\
    \    }\n    i = 0;\n    sorted_lst.push(max);\n    for(i = 0; i < lst.length;\
    \ i++){\n        for(var j = 0; j < lst.length; j++){\n            if(lst[j] ==\
    \ min || lst[j] == max){\n                continue;\n            }\n         \
    \   if(sorted_lst[i] > lst[j] && sorted_lst[i+1] < lst[j]){\n                sorted_lst.splice(i+1,\
    \ 0, lst[j]);\n            }\n        }\n    }\n    return sorted_lst;\n}", " \
    \   if(lst.length==0){\n        return [];\n    }\n    var c_list = [...lst];\n\
    \    var sorted_list = [];\n    var max_i = c_list.indexOf(Math.max(...c_list));\n\
    \    var min_i = c_list.indexOf(Math.min(...c_list));\n    var max_num = c_list[max_i];\n\
    \    var min_num = c_list[min_i];\n    while(sorted_list.length<lst.length){\n\
    \        sorted_list.push(min_num);\n        sorted_list.push(max_num);\n    \
    \    c_list.splice(max_i,1);\n        c_list.splice(min_i,1);\n        if(c_list.length==0){\n\
    \            break;\n        }\n        max_i = c_list.indexOf(Math.max(...c_list));\n\
    \        min_i = c_list.indexOf(Math.min(...c_list));\n        max_num = c_list[max_i];\n\
    \        min_num = c_list[min_i];\n    }\n    return sorted_list;\n}\n", "   \
    \ var new_lst = [];\n    var min, max;\n    while(lst.length){\n        min =\
    \ lst[0];\n        max = lst[0];\n        lst.forEach(function(e){\n         \
    \   if(e < min) min = e;\n            if(e > max) max = e;\n        });\n    \
    \    new_lst.push(min);\n        new_lst.push(max);\n        lst.splice(lst.indexOf(min),\
    \ 1);\n        lst.splice(lst.indexOf(max), 1);\n    }\n    return new_lst;\n\
    }\n", "\tvar new_lst = [];\n\tvar new_lst_index = 0;\n\tvar lst_index = 0;\n\t\
    var maximum = get_maximum(lst);\n\tvar minimum = get_minimum(lst);\n\tnew_lst[new_lst_index]\
    \ = minimum;\n\tnew_lst_index++;\n\twhile(new_lst_index < lst.length){\n\t\tif(lst[lst_index]\
    \ == maximum){\n\t\t\tlst_index++;\n\t\t\tcontinue;\n\t\t}\n\t\tnew_lst[new_lst_index]\
    \ = maximum;\n\t\tnew_lst_index++;\n\t\tif(new_lst_index < lst.length){\n\t\t\t\
    new_lst[new_lst_index] = lst[lst_index];\n\t\t\tnew_lst_index++;\n\t\t}\n\t\t\
    lst_index++;\n\t}\n\treturn new_lst;\n}\n", "  var sorted = lst.sort(function(a,b){return\
    \ a-b});\n  var new_list = [];\n  for(var i = 0; i < sorted.length; i++){\n  \
    \  new_list.push(sorted[i]);\n    new_list.push(sorted[sorted.length - i - 1]);\n\
    \  }\n  return new_list;\n}", "    lst = lst.sort(function(a,b){\n        return\
    \ a-b;\n    });\n    var result = [];\n    var index_to_check = 0;\n    var i\
    \ = 0;\n    while(lst.length > 0){\n        if(i % 2 == 0){\n            result.push(lst[index_to_check]);\n\
    \            lst.splice(index_to_check, 1);\n        }\n        else{\n      \
    \      result.push(lst[lst.length - 1]);\n            lst.splice(lst.length -\
    \ 1, 1);\n        }\n        i++;\n    }\n    return result;\n}", "  return lst.sort().map((value,index)=>{\n\
    \    return index%2 === 0 ? lst.pop() : lst.shift();\n  });\n}\n", "  var strSorted\
    \ = [];\n  var reduced = [];\n  for(var i = 0; i < lst.length; i++){\n    var\
    \ min = lst[0];\n    var max = lst[0];\n    for(var j = 0; j < lst.length; j++){\n\
    \      if(lst[j] < min){\n        min = lst[j];\n      }\n      if(lst[j] > max){\n\
    \        max = lst[j];\n      }\n    }\n    if(i%2 == 0){\n      strSorted.push(min);\n\
    \      reduced.push(min);\n    }else{\n      strSorted.push(max);\n      reduced.push(max);\n\
    \    }\n    lst = _.without(lst, min, max);\n  }\n  return strSorted;\n}", " \
    \   return new Promise((resolve, reject) => {\n        try {\n            let\
    \ sorted_list = lst.sort((a, b) => {\n                return a - b;\n        \
    \    });\n            let res = [];\n            let start = 0;\n            let\
    \ end = sorted_list.length - 1;\n            while (start <= end) {\n        \
    \        res.push(sorted_list[start]);\n                if (start !== end) {\n\
    \                    res.push(sorted_list[end]);\n                }\n        \
    \        start++;\n                end--;\n            }\n            resolve(res);\n\
    \        } catch (err) {\n            reject(err);\n        }\n    });\n}\n\n\
    let lst = [4, 3, 2, 1, 0];\nstrange_sort_list(lst).then(res => {\n    console.log(res);\n\
    });", "  return lst.sort(function(a,b){return a-b;})\n  .map(function(a,i){return\
    \ (i%2==0?a:lst.splice(a,1));})\n  .filter(function(a){return a!=null;});\n}",
  "    var even = [];\n    var odd = [];\n    var result = [];\n    for(var i = 0;\
    \ i < lst.length; i++){\n        if(i % 2 == 0){\n            even.push(lst[i]);\n\
    \        }else{\n            odd.push(lst[i]);\n        }\n    }\n    even.sort();\n\
    \    odd.sort();\n    odd.reverse();\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(i % 2 == 0){\n            result.push(even[i/2]);\n        }else{\n\
    \            result.push(odd[(i-1)/2]);\n        }\n    }\n    return result;\n\
    }\n", "    lst.sort(function(a,b){return a-b});\n    for(var i=1;i<lst.length;i+=2){\n\
    \        var temp = lst[i];\n        lst[i] = lst[lst.length-i];\n        lst[lst.length-i]\
    \ = temp;\n    }\n    return lst;\n}", "    var newList = [];\n    var tempList\
    \ = lst.slice();\n    var isMin = true;\n    while(tempList.length > 0){\n   \
    \     var min = Math.min.apply(null, tempList);\n        var max = Math.max.apply(null,\
    \ tempList);\n        var indexMin = tempList.indexOf(min);\n        var indexMax\
    \ = tempList.indexOf(max);\n        if(isMin){\n            newList.push(min);\n\
    \            tempList.splice(indexMin, 1);\n            isMin = false;\n     \
    \   }else{\n            newList.push(max);\n            tempList.splice(indexMax,\
    \ 1);\n            isMin = true;\n        }\n    }\n    return newList;\n}\n",
  "    var min = Math.min(...lst);\n    var index = lst.indexOf(min);\n    lst.splice(index,\
    \ 1);\n    var max = Math.max(...lst);\n    index = lst.indexOf(max);\n    lst.splice(index,\
    \ 1);\n    console.log(min, max);\n    var output = [];\n    var count = 0;\n\
    \    while(lst.length != 0){\n        if(count % 2 == 0){\n            output.push(min);\n\
    \            min = Math.min(...lst);\n            index = lst.indexOf(min);\n\
    \            lst.splice(index, 1);\n        }\n        else{\n            output.push(max);\n\
    \            max = Math.max(...lst);\n            index = lst.indexOf(max);\n\
    \            lst.splice(index, 1);\n        }\n        count++;\n    }\n    if(count\
    \ % 2 == 0){\n        output.push(min);\n        output.push(max);\n    }\n  \
    \  else{\n        output.push(max);\n        output.push(min);\n    }\n    return\
    \ output;\n}\n", "    const odd = lst.sort((a,b) => a-b).filter((x,i) => i%2===0)\n\
    \    const even = lst.sort((a,b) => b-a).filter((x,i) => i%2===0)\n    return\
    \ odd.concat(even)\n}\n", "    if (lst.length == 0) {\n        return lst;\n \
    \   }\n\n    lst.sort(function(a, b){return a-b});\n    var negative_list = [];\n\
    \    var positive_list = [];\n    var zero_list = [];\n    var result = [];\n\n\
    \    // place them in separate lists\n    for (var i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            negative_list.push(lst[i]);\n    \
    \    } else if (lst[i] > 0) {\n            positive_list.push(lst[i]);\n     \
    \   } else {\n            zero_list.push(lst[i]);\n        }\n    }\n\n    //\
    \ Fill result list with the values from each list\n    var j = 0;\n    var k =\
    \ 0;\n    while (j < negative_list.length && k < positive_list.length) {\n   \
    \     result.push(negative_list[j]);\n        result.push(positive_list[k]);\n\
    \        j++;\n        k++;\n    }\n\n    while (j < negative_list.length) {\n\
    \        result.push(negative_list[j]);\n        j++;\n    }\n\n    while (k <\
    \ positive_list.length) {\n        result.push(positive_list[k]);\n        k++;\n\
    \    }\n\n    // Add the zero list at the end\n    for (var i = 0; i < zero_list.length;\
    \ i++) {\n        result.push(zero_list[i]);\n    }\n\n    return result;\n}\n",
  "    // YOUR CODE HERE\n    var i =0;\n    var y=0;\n    var list=[];\n    for(var\
    \ x=0;x<lst.length;x++){\n      if(x===i){\n        list.push(Math.min(...lst));\n\
    \        lst.splice(lst.indexOf(Math.min(...lst)),1);\n        i+=2;\n      }\n\
    \      else if(x===y){\n        list.push(Math.max(...lst));\n        lst.splice(lst.indexOf(Math.max(...lst)),1);\n\
    \        y+=2;\n      }\n    }\n    return list;\n}\n\nvar test_list_1 = [3, 5,\
    \ 4, 6, 2, 7];\nvar test_list_2 = [2, 7, 4, 3, 5, 6];\n\nQUnit.test(\"Strange\
    \ Sort\", function(assert){\n    assert.deepEqual(strange_sort_list(test_list_1),\
    \ test_list_2);\n});\n", "  return lst.sort((a,b)=> a-b).reduce((p,c,i)=> (i%2===0)\
    \ ? p.concat(c) : p.concat(lst.pop()), []);\n}\n", "    if(!lst || lst.length\
    \ === 0) return lst;\n    const res = [];\n    let min = Math.min(...lst);\n \
    \   let max = Math.max(...lst);\n    let temp = [];\n    let isMax = true;\n \
    \   while(temp.length !== lst.length) {\n        if(isMax) {\n            temp.push(max);\n\
    \            max = Math.max(...lst.filter(val => val !== max));\n            isMax\
    \ = false;\n        }\n        else {\n            temp.push(min);\n         \
    \   min = Math.min(...lst.filter(val => val !== min));\n            isMax = true;\n\
    \        }\n    }\n    while(temp.length > 0) {\n        res.push(temp.shift());\n\
    \        res.push(temp.pop());\n    }\n    if(temp.length > 0) {\n        res.push(temp.shift());\n\
    \    }\n    return res;\n}\n\nmodule.exports = strange_sort_list;", "    let new_lst\
    \ = [];\n    lst.sort((a,b) => a-b);\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(i % 2 == 0){\n            new_lst.push(lst[i]);\n        }\n     \
    \   else{\n            new_lst.push(lst[lst.length - 1 - i]);\n        }\n   \
    \ }\n    return new_lst;\n}\n", "    let arr = lst.sort(function(a, b){return\
    \ a-b});\n    let newArr = [];\n    let left = 0;\n    let right = arr.length\
    \ - 1;\n    for(let i = 0; i < arr.length; i++){\n        if(i % 2 === 0){\n \
    \           newArr.push(arr[left]);\n            left++;\n        } else {\n \
    \           newArr.push(arr[right]);\n            right--;\n        }\n    }\n\
    \    return newArr;\n}\n", "    lst.sort(function(a,b){return a-b;});\n    var\
    \ ret = [];\n    while(lst.length > 0){\n        if(lst.length > 1){\n       \
    \     ret.push(lst.pop());\n            ret.push(lst.shift());\n        }\n  \
    \      else\n            ret.push(lst.pop());\n    }\n    return ret;\n}\n", " \
    \   var sorted_list = [];\n    var current_min = Math.min(...lst);\n    var current_max\
    \ = Math.max(...lst);\n    var rest_of_elements = lst.splice(lst.indexOf(current_min),\
    \ 1) + lst.splice(lst.indexOf(current_max), 1);\n    sorted_list.push(current_min);\n\
    \    sorted_list.push(current_max);\n    sorted_list.push(rest_of_elements);\n\
    \    return sorted_list;\n}\n", "    lst.sort((a,b)=>{return a-b})\n    let arr\
    \ = []\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 !== 0){\n \
    \           arr.push(lst.pop())\n        }else{\n            arr.push(lst.shift())\n\
    \        }\n    }\n    return arr\n}\n", "    lst.sort(function(a,b){\n      \
    \  return a-b;\n    });\n    var l = lst.length, i=0, j=l-1, result=[];\n    while(i<=j){\n\
    \        result.push(lst[i]);\n        i++;\n        if(i>j) break;\n        result.push(lst[j]);\n\
    \        j--;\n    }\n    return result;\n}\n", "    let res = [];\n    let temp\
    \ = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] < lst[i+1]){\n\
    \            res.push(lst[i])\n        }\n        else if(lst[i] > lst[i+1]){\n\
    \            res.push(lst[i])\n        }\n    }\n    //console.log(lst)\n    console.log(res)\n\
    \    return res\n}\n", "    var lst2 = lst.slice(0);\n    var result = [];\n \
    \   if (lst.length < 2) {\n        return lst;\n    }\n    while (lst2.length\
    \ != 0) {\n        var min = Math.min.apply(null, lst2);\n        result.push(min);\n\
    \        lst2.splice(lst2.indexOf(min), 1);\n        if (lst2.length === 0) {\n\
    \            break;\n        }\n        var max = Math.max.apply(null, lst2);\n\
    \        result.push(max);\n        lst2.splice(lst2.indexOf(max), 1);\n    }\n\
    \    return result;\n}\nstrange_sort_list([1,2,3,4,5,6,7,8,9,10]);\n\n", "  let\
    \ str = []\n  let max = lst.length;\n  let i = 0;\n  while(i < max){\n    let\
    \ min = Math.min(...lst);\n    str.push(min);\n    lst.splice(lst.indexOf(min),\
    \ 1);\n    if(lst.length !== 0){\n      let m = Math.max(...lst);\n      str.push(m);\n\
    \      lst.splice(lst.indexOf(m), 1);\n    }\n    i++;\n  }\n  return str;\n}",
  "    var result = [];\n    var sorted_list = lst.sort(function(a,b){return a-b});\n\
    \    var min = sorted_list[0];\n    var max = sorted_list[sorted_list.length-1];\n\
    \    var i=0;\n    var j=sorted_list.length-1;\n    while(i<=j){\n        if(i==j){\n\
    \            result.push(sorted_list[i]);\n            i++;\n        }\n     \
    \   else{\n            result.push(sorted_list[i]);\n            result.push(sorted_list[j]);\n\
    \            i++;\n            j--;\n        }\n    }\n    return result;\n}\n",
  "\tlet res = [];\n\tfor(let i = 0; i < lst.length; i++) {\n\t\tlet temp = find_min_max(lst);\n\
    \t\tlet min = temp[0];\n\t\tlet max = temp[1];\n\t\tlst.splice(lst.indexOf(min),\
    \ 1);\n\t\tlst.splice(lst.indexOf(max), 1);\n\t\tres.push(min);\n\t\tres.push(max);\n\
    \t}\n\treturn res;\n}\n", "    return lst.sort((a,b)=>b-a)\n}\n\n", "  var result\
    \ = [];\n  while(lst.length > 0){\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var min_idx = lst.indexOf(min);\n\
    \    var max_idx = lst.indexOf(max);\n    result.push(min);\n    result.push(max);\n\
    \    if(min_idx > -1){\n      lst.splice(min_idx, 1);\n    }\n    if(max_idx >\
    \ -1){\n      lst.splice(max_idx, 1);\n    }\n  }\n  return result;\n}\n", " \
    \   var result = [];\n    var left = [];\n    var right = [];\n    var temp =\
    \ [];\n    var m;\n    for(var i = 0; i < lst.length; i++){\n        temp = lst.slice();\n\
    \        m = Math.min.apply(null, temp);\n        left.push(m);\n        temp.splice(temp.indexOf(m),\
    \ 1);\n        m = Math.max.apply(null, temp);\n        right.push(m);\n     \
    \   temp.splice(temp.indexOf(m), 1);\n        lst = temp;\n    }\n    right.reverse();\n\
    \    for(var i = 0; i < lst.length; i++){\n        result.push(left[i]);\n   \
    \     result.push(right[i]);\n    }\n    return result;\n}", "    var result =\
    \ [];\n    var min = lst[0];\n    var max = lst[0];\n    var min_index = 0;\n\
    \    var max_index = 0;\n    var rem_min = 0;\n    var rem_max = 0;\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] <= min){\n            min =\
    \ lst[i];\n            min_index = i;\n        }\n        if(lst[i] >= max){\n\
    \            max = lst[i];\n            max_index = i;\n        }\n    }\n   \
    \ //console.log(\"max: \" + max + \", min: \" + min);\n    var lst_rem = [];\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(i == min_index){\n     \
    \       result.push(min);\n        }\n        else if(i == max_index){\n     \
    \       result.push(max);\n        }\n        else{\n            lst_rem.push(lst[i]);\n\
    \        }\n    }\n    if(lst_rem.length > 0){\n        result = result.concat(strange_sort_list(lst_rem));\n\
    \    }\n    return result;\n}", "    return [].concat(lst).sort((a,b)=> a-b).map((e,i,l)=>\
    \ (l.length+1-i)/2 <= i ? l[l.length-i-1] : l[i]).filter((e,i)=> i%2 === 0);\n\
    }\n", "\tvar lst1=[];\n\tvar lst2=[];\n\tvar lst3=[];\n\tfor(var i=0;i<lst.length;i++){\n\
    \t\tif(i%2==0){\n\t\t\tlst1.push(lst[i]);\n\t\t}\n\t\telse{\n\t\t\tlst2.push(lst[i]);\n\
    \t\t}\n\t}\n\tlst1.sort();\n\tlst2.sort();\n\tvar min = Math.min(lst1.length,lst2.length);\n\
    \tfor(var i=0;i<min;i++){\n\t\tlst3.push(lst1[i]);\n\t\tlst3.push(lst2[i]);\n\t\
    }\n\tif(lst1.length<lst2.length){\n\t\tfor(var i=min;i<lst2.length;i++){\n\t\t\
    \tlst3.push(lst2[i]);\n\t\t}\n\t}\n\telse{\n\t\tfor(var i=min;i<lst1.length;i++){\n\
    \t\t\tlst3.push(lst1[i]);\n\t\t}\n\t}\n\treturn lst3;\n}\nvar lst = [2,4,6,1,2,4,8,9,11,54,45,67,88,90,100,80,70,56,76,89,84,87,98,76,54,23,45,24,12,10,8,5,6,5,7,9,5,5,7,5,5,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5",
  "    // 1. start with the minimum value,\n    // then maximum of the remaining integers,\
    \ then minimum and so on.\n    let l = lst.length;\n    let i = 0;\n    lst.sort((a,b)\
    \ => a-b);\n    while(i < l){\n        // if(i === lst.length-1) break;\n    \
    \    let tmp = lst[i];\n        lst[i] = lst[l-1];\n        lst[l-1] = tmp;\n\
    \        l--;\n        i++;\n    }\n    return lst;\n}\n", "    // Your code here\n\
    \    let result = [];\n    let temp = [...lst];\n    let sorted = [...lst].sort((a,b)\
    \ => {\n        return a - b;\n    });\n    let min = sorted[0];\n    let max\
    \ = sorted[sorted.length - 1];\n    while(sorted.length > 0){\n        let minIndex\
    \ = temp.indexOf(min);\n        let maxIndex = temp.indexOf(max);\n        result.push(min);\n\
    \        result.push(max);\n        sorted.splice(sorted.indexOf(min), 1);\n \
    \       sorted.splice(sorted.indexOf(max), 1);\n        temp.splice(minIndex,\
    \ 1);\n        temp.splice(maxIndex, 1);\n        min = sorted[0];\n        max\
    \ = sorted[sorted.length - 1];\n    }\n    return result;\n}", "    var pos =\
    \ 0;\n    var neg = 0;\n    var arr = [];\n    var max = Math.max.apply(null,\
    \ lst);\n    var min = Math.min.apply(null, lst);\n    //console.log(max, min);\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(i % 2 === 0){\n        \
    \    for(var j = 0; j < lst.length; j++){\n                if(lst[j] == min){\n\
    \                    arr[i] = lst[j];\n                    lst[j] = lst[lst.length\
    \ - 1];\n                    lst[lst.length - 1] = min;\n                    min\
    \ = Math.min.apply(null, lst);\n                    break;\n                }\n\
    \            }\n        }\n        else{\n            for(var j = 0; j < lst.length;\
    \ j++){\n                if(lst[j] == max){\n                    arr[i] = lst[j];\n\
    \                    lst[j] = lst[lst.length - 1];\n                    lst[lst.length\
    \ - 1] = max;\n                    max = Math.max.apply(null, lst);\n        \
    \            break;\n                }\n            }\n        }\n    }\n    return\
    \ arr;\n}\n", "    if(lst.length == 0){\n        return lst;\n    }\n    var ret\
    \ = [];\n    var temp_arr = lst.slice();\n    var mid_point = Math.floor(temp_arr.length/2);\n\
    \    var min = temp_arr[0];\n    var max = temp_arr[temp_arr.length-1];\n    for(var\
    \ i = 0; i < mid_point; i++){\n        ret.push(min);\n        ret.push(max);\n\
    \        temp_arr.splice(0,1);\n        temp_arr.splice(temp_arr.length-1,1);\n\
    \        min = temp_arr[0];\n        max = temp_arr[temp_arr.length-1];\n    }\n\
    \    if(temp_arr.length > 0){\n        ret.push(temp_arr[0]);\n    }\n    return\
    \ ret;\n}\n\n", "    lst.sort();\n    var i = 0;\n    var j = lst.length - 1;\n\
    \    var result = [];\n    while (i <= j){\n        result.push(lst[i]);\n   \
    \     i++;\n        if (i <= j){\n            result.push(lst[j]);\n         \
    \   j--;\n        }\n    }\n    return result;\n}", "\tvar temp = [];\n\ttemp.push(lst[0]);\n\
    \tlst.shift();\n\twhile(lst.length > 0){\n\t\ttemp.push(lst.pop());\n\t\ttemp.push(lst.shift());\n\
    \t}\n\treturn temp;\n}\n", "    // Write the code here\n}\n", "  lst.sort((a,b)=>a-b);\n\
    \  let small = 0;\n  let large = lst.length-1;\n  let result = [];\n  while(small\
    \ <= large){\n    result.push(lst[small]);\n    if(small !== large){\n      result.push(lst[large]);\n\
    \    }\n    small++;\n    large--;\n  }\n  return result;\n}", "  var temp_list\
    \ = [];\n  var sorted_list = [];\n  for(var i = 0; i < lst.length; i++){\n   \
    \ temp_list.push(lst[i]);\n  }\n  for(var i = 0; i < lst.length; i++){\n    if(i\
    \ % 2 == 0){\n      sorted_list.push(Math.min.apply(null, temp_list));\n    }\n\
    \    else{\n      sorted_list.push(Math.max.apply(null, temp_list));\n    }\n\
    \    temp_list.splice(temp_list.indexOf(sorted_list[i]), 1);\n  }\n  return sorted_list;\n\
    }\n", "    lst.sort((a,b)=>{\n        return a-b;\n    });\n    let mid = parseInt(lst.length/2);\n\
    \    let result = [];\n    let left = 0;\n    let right = lst.length-1;\n    while(result.length<lst.length){\n\
    \        result.push(lst[left]);\n        result.push(lst[right]);\n        left++;\n\
    \        right--;\n    }\n    return result;\n}", "    lst.sort();\n    var result\
    \ = [];\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2 == 0){\n \
    \           result.push(lst[0]);\n            lst.splice(0, 1);\n        }\n \
    \       else{\n            result.push(lst[lst.length - 1]);\n            lst.splice(lst.length\
    \ - 1, 1);\n        }\n    }\n    return result;\n}\n", "    if(lst.length ===\
    \ 0) return [];\n    var lst_new = [];\n    var min = lst[0];\n    var max = lst[0];\n\
    \    var min_index = 0;\n    var max_index = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < min){\n            min = lst[i];\n            min_index\
    \ = i;\n        }\n        if(lst[i] > max){\n            max = lst[i];\n    \
    \        max_index = i;\n        }\n    }\n    if(min_index > max_index){\n  \
    \      min_index = min_index + max_index;\n        max_index = min_index - max_index;\n\
    \        min_index = min_index - max_index;\n    }\n    if(min_index === max_index){\n\
    \        lst.splice(min_index, 1);\n        lst_new.push(min);\n        return\
    \ lst_new.concat(strange_sort_list(lst));\n    }\n    lst.splice(min_index, 1);\n\
    \    lst.splice(max_index - 1, 1);\n    lst_new.push(min);\n    lst_new.push(max);\n\
    \    return lst_new.concat(strange_sort_list(lst));\n}\n", "    var res = [];\n\
    \    var len = lst.length;\n    var min = Math.min.apply(null, lst);\n    var\
    \ max = Math.max.apply(null, lst);\n    var inc = true;\n    while(len--){\n \
    \       if(inc){\n            res.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min.apply(null, lst);\n            inc = false;\n\
    \        }\n        else{\n            res.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max.apply(null, lst);\n            inc = true;\n\
    \        }\n    }\n    return res;\n}\n", "    var odd = [];\n    var even = [];\n\
    \    var result = [];\n    if(lst.length === 0){\n        return [];\n    }\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(i % 2 === 0){\n        \
    \    odd.push(lst[i]);\n        }\n        else{\n            even.push(lst[i]);\n\
    \        }\n    }\n    odd.sort(function(a, b){return a - b});\n    even.sort(function(a,\
    \ b){return b - a});\n    for(var j = 0; j < lst.length; j++){\n        if(j %\
    \ 2 === 0){\n            result.push(odd[0]);\n            odd.shift();\n    \
    \    }\n        else{\n            result.push(even[0]);\n            even.shift();\n\
    \        }\n    }\n    return result;\n}\n", "    if(!lst.length) return lst;\n\
    \    let newList = [];\n    let first = lst.splice(lst.indexOf(Math.min(...lst)),\
    \ 1);\n    newList.push(first[0]);\n    for(let i = 0; i < lst.length; i++){\n\
    \        let max_idx = lst.indexOf(Math.max(...lst));\n        newList.push(lst[max_idx]);\n\
    \        lst.splice(max_idx, 1);\n        let min_idx = lst.indexOf(Math.min(...lst));\n\
    \        newList.push(lst[min_idx]);\n        lst.splice(min_idx, 1);\n    }\n\
    \    return newList;\n}\n", "  if(lst.length === 0){\n    return lst;\n  }\n \
    \ var min = Math.min.apply(null, lst);\n  var idx = lst.indexOf(min);\n  lst.splice(idx,\
    \ 1);\n  return [min].concat(strange_sort_list(lst.reverse()));\n}\n", "    let\
    \ copyList = lst.slice();\n    let newList = [];\n    newList.push(Math.min(...copyList));\n\
    \    copyList.splice(copyList.indexOf(Math.min(...copyList)), 1);\n    for (let\
    \ i = 0; i < lst.length-1; i++) {\n        if (i % 2 === 0) {\n            newList.push(Math.max(...copyList));\n\
    \            copyList.splice(copyList.indexOf(Math.max(...copyList)), 1);\n  \
    \      } else {\n            newList.push(Math.min(...copyList));\n          \
    \  copyList.splice(copyList.indexOf(Math.min(...copyList)), 1);\n        }\n \
    \   }\n    return newList;\n}\n", "    return lst.sort((a,b)=>a-b)\n        .reduce((acc,current)=>{\n\
    \            acc.push(current);\n            return acc;\n        },[])\n}", " \
    \   let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let sort\
    \ = [min];\n    for(let i = 0; i < lst.length - 1; i++){\n        sort.push(max);\n\
    \        max = Math.max(...lst.filter(l => l < max));\n        if(sort.length\
    \ < lst.length){\n            sort.push(min);\n            min = Math.min(...lst.filter(l\
    \ => l > min));\n        }\n    }\n    return sort;\n}", "    var evens = lst.filter(x\
    \ => x % 2 == 0);\n    var odds = lst.filter(x => x % 2 == 1);\n    console.log(evens,\
    \ odds);\n    var result = [];\n    while(evens.length > 0 && odds.length > 0){\n\
    \        result.push(evens.shift());\n        result.push(odds.pop());\n    }\n\
    \    if(evens.length > 0){\n        result.push(evens.shift());\n    }\n    if(odds.length\
    \ > 0){\n        result.push(odds.pop());\n    }\n    return result;\n}\n\nstrange_sort_list([1,2,3,4,5,6,7,8,9]);\
    \ // 1,9,2,8,3,7,4,6,5\n", "    lst.sort(function(a,b){return a-b});\n    var\
    \ i = 0;\n    var new_list = [];\n    while(lst.length != 0){\n        new_list.push(lst.shift());\n\
    \        if(lst.length != 0){\n            new_list.push(lst.pop());\n       \
    \ }\n    }\n    return new_list;\n}", "    var result = []\n    var min = 0\n\
    \    var max = 0\n    var temp = 0\n    var len = lst.length\n    for(var i =\
    \ 0; i < len; i++){\n        for(var j = 0; j < len; j++){\n            if(lst[min]\
    \ >= lst[j]){\n                min = j\n            }\n            if(lst[max]\
    \ <= lst[j]){\n                max = j\n            }\n        }\n        temp\
    \ = lst[min]\n        lst[min] = lst[i]\n        lst[i] = temp\n        if(min\
    \ == max){\n            max = min + 1\n        }\n        temp = lst[max]\n  \
    \      lst[max] = lst[i + 1]\n        lst[i + 1] = temp\n        i++\n       \
    \ min = i + 1\n        max = i + 1\n    }\n    return lst\n}\nstrange_sort_list([4,2,8,5,1,7,6,3])",
  "\tvar min = lst[0];\n\tvar min_index = 0;\n\tvar max = lst[0];\n\tvar max_index\
    \ = 0;\n\tvar out_list = [];\n\twhile(lst.length > 0){\n\t\tfor(var i = 0; i <\
    \ lst.length; i++){\n\t\t\tif(lst[i] < min){\n\t\t\t\tmin = lst[i];\n\t\t\t\t\
    min_index = i;\n\t\t\t}\n\t\t\tif(lst[i] > max){\n\t\t\t\tmax = lst[i];\n\t\t\t\
    \tmax_index = i;\n\t\t\t}\n\t\t}\n\t\tout_list.push(min);\n\t\tlst.splice(min_index,\
    \ 1);\n\t\tif(lst.length > 0){\n\t\t\tout_list.push(max);\n\t\t\tlst.splice(max_index,\
    \ 1);\n\t\t}\n\t\tmin = lst[0];\n\t\tmin_index = 0;\n\t\tmax = lst[0];\n\t\tmax_index\
    \ = 0;\n\t}\n\treturn out_list;\n}\n\nvar lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\
    var sorted_lst = strange_sort_list(lst);", "    return lst.sort((a,b)=>a-b).reduce((arr,x,i)=>{\n\
    \        if(i%2) {\n            arr.push(x);\n        } else {\n            arr.unshift(x);\n\
    \        }\n        return arr;\n    },[]);\n}\n", "    return lst;\n}\n", " \
    \ var new_lst = [], temp = [], temp_lst = lst.slice();\n  var max = temp_lst.reduce(function(a,\
    \ b){\n    return Math.max(a, b);\n  });\n  var min = temp_lst.reduce(function(a,\
    \ b){\n    return Math.min(a, b);\n  });\n  while(temp_lst.length > 0){\n    temp\
    \ = temp_lst.splice(temp_lst.indexOf(min), 1);\n    new_lst = new_lst.concat(temp);\n\
    \    temp = temp_lst.splice(temp_lst.indexOf(max), 1);\n    new_lst = new_lst.concat(temp);\n\
    \    if(temp_lst.length > 0){\n      max = temp_lst.reduce(function(a, b){\n \
    \       return Math.max(a, b);\n      });\n      min = temp_lst.reduce(function(a,\
    \ b){\n        return Math.min(a, b);\n      });\n    }\n  }\n  return new_lst;\n\
    }\n", "    var ret = [];\n    while(lst.length > 0){\n        var min = Math.min.apply(null,\
    \ lst);\n        var max = Math.max.apply(null, lst);\n        ret.push(min);\n\
    \        ret.push(max);\n        lst.splice(lst.indexOf(min), 1);\n        lst.splice(lst.indexOf(max),\
    \ 1);\n    }\n    return ret;\n}\n\nvar list = [1,7,3,9,5,7,8,5,3,7,8,9,0,7,8,1,5,7,9,2,5,7,8,9,5,1,2,3,4,5,6,7,8,9,0,9,8,7,6,5,4,3,2,1,0];",
  "    var res = [];\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var max_pos = lst.indexOf(max);\n    var lst_new = lst.slice(0, max_pos).concat(lst.slice(max_pos\
    \ + 1));\n    var min_pos = lst_new.indexOf(min);\n    while (lst_new.length !=\
    \ 0){\n        var start = lst_new.slice(0, min_pos);\n        var end = lst_new.slice(min_pos\
    \ + 1);\n        lst_new = start.concat(end);\n        res.push(min);\n      \
    \  max = Math.max.apply(null, lst_new);\n        max_pos = lst_new.indexOf(max);\n\
    \        start = lst_new.slice(0, max_pos);\n        end = lst_new.slice(max_pos\
    \ + 1);\n        lst_new = start.concat(end);\n        res.push(max);\n      \
    \  min = Math.min.apply(null, lst_new);\n        min_pos = lst_new.indexOf(min);\n\
    \    }\n    return res;\n}\n\nvar test = strange_sort_list([1,2,3,4,5,6,7,8,9]);",
  "    //sort first\n    lst.sort(function(a,b){\n        return a-b;\n    });\n \
    \   //create new list\n    var res = [];\n    //we will shift out from both ends,\
    \ so use separate vars\n    var n = lst.length;\n    var beg = 0;\n    var end\
    \ = n-1;\n    //while list is not empty\n    while(lst.length > 0){\n        //shift\
    \ out from the beginning\n        res.push(lst.shift());\n        //if list is\
    \ not empty, shift out from the end\n        if(lst.length > 0){\n           \
    \ res.push(lst.pop());\n        }\n    }\n    return res;\n}\n", "  let temp=[...lst];\n\
    \  let res=[];\n  let max=Math.max(...temp);\n  let min=Math.min(...temp);\n \
    \ while(temp.length>0){\n    if(res.length%2===0){\n      res.push(min);\n   \
    \   temp.splice(temp.indexOf(min),1);\n      min=Math.min(...temp);\n    }else{\n\
    \      res.push(max);\n      temp.splice(temp.indexOf(max),1);\n      max=Math.max(...temp);\n\
    \    }\n  }\n  return res;\n}\n", "    var sorted_list = [];\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var pos = lst.indexOf(min);\n\
    \    var neg = lst.indexOf(max);\n    lst.splice(pos, 1);\n    lst.splice(neg,\
    \ 1);\n    sorted_list.push(min);\n    sorted_list.push(max);\n    while (lst.length\
    \ > 0){\n        min = Math.min.apply(null, lst);\n        pos = lst.indexOf(min);\n\
    \        lst.splice(pos, 1);\n        sorted_list.push(min);\n        if (lst.length\
    \ > 0){\n            max = Math.max.apply(null, lst);\n            neg = lst.indexOf(max);\n\
    \            lst.splice(neg, 1);\n            sorted_list.push(max);\n       \
    \ }\n    }\n    return sorted_list;\n}", "    var no_minimums = [];\n    var n\
    \ = lst.length;\n    if (n === 0) {\n        return [];\n    }\n    if (n ===\
    \ 1) {\n        return lst;\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    lst.splice(lst.indexOf(min), 1);\n    var max = Math.max.apply(null, lst);\n\
    \    lst.splice(lst.indexOf(max), 1);\n    no_minimums.push(min);\n    no_minimums.push(max);\n\
    \    return strange_sort_list(lst).concat(no_minimums);\n}\n", "    if(lst.length\
    \ == 0) return [];\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var out = [];\n    while(lst.length > 0){\n        min = Math.min.apply(null,\
    \ lst);\n        max = Math.max.apply(null, lst);\n        lst.splice(lst.indexOf(min),\
    \ 1);\n        lst.splice(lst.indexOf(max), 1);\n        out.push(min);\n    \
    \    out.push(max);\n    }\n    return out;\n}\n", "    var odd=[]\n    var even=[]\n\
    \    var result=[]\n    var min=Math.min(...lst)\n    var max=Math.max(...lst)\n\
    \    var minIndex=lst.indexOf(min)\n    var maxIndex=lst.indexOf(max)\n    lst.splice(minIndex,1)\n\
    \    lst.splice(maxIndex-1,1)\n    for(var i=0;i<lst.length;i++){\n        if(i%2===0){\n\
    \            even.push(lst[i])\n        }\n        else{\n            odd.push(lst[i])\n\
    \        }\n    }\n    result.push(min)\n    for(var i=0;i<lst.length;i++){\n\
    \        if(even[i]<odd[i]){\n            result.push(even[i])\n            result.push(odd[i])\n\
    \        }\n        else{\n            result.push(odd[i])\n            result.push(even[i])\n\
    \        }\n    }\n    result.push(max)\n    return result\n}\n", "    return\
    \ lst.sort((a,b)=>a-b).reduce((acc,elem,index)=>{\n        if(index%2==0){\n \
    \           acc.push(elem);\n        }\n        else{\n            acc.unshift(elem);\n\
    \        }\n        return acc;\n    },[]);\n}\n", "    var dict = {};\n    var\
    \ result = [];\n    for(var i = 0; i < lst.length; i++){\n        dict[lst[i]]\
    \ = 1;\n    }\n    var sorted_list = lst.sort(function(a,b){\n        return a\
    \ - b;\n    });\n    var j = 0;\n    while(j < sorted_list.length){\n        var\
    \ min = sorted_list[j];\n        var max = sorted_list[sorted_list.length - 1\
    \ - j];\n        if(dict[min] && dict[max]){\n            result.push(min);\n\
    \            result.push(max);\n            delete dict[min];\n            delete\
    \ dict[max];\n        }\n        else if(dict[min]){\n            result.push(min);\n\
    \            delete dict[min];\n        }\n        else if(dict[max]){\n     \
    \       result.push(max);\n            delete dict[max];\n        }\n        j++;\n\
    \    }\n    return result;\n}\n", "  var lst_sort = lst.sort(function(a,b){return\
    \ a-b});\n  var lst_len = lst_sort.length;\n  var ret = [];\n  for(var i = 0;\
    \ i < lst_len; i++){\n    ret.push(lst_sort[i]);\n    ret.push(lst_sort[lst_len-i-1]);\n\
    \  }\n  if(lst_len % 2 != 0){\n    ret.pop();\n  }\n  return ret;\n}\n", "   \
    \ //TODO: implement strange sorting algorithm\n    var minimum = Math.min.apply(null,\
    \ lst);\n    var maximum = Math.max.apply(null, lst);\n    var result = [];\n\
    \    var copy = [];\n    for (var i = 0; i < lst.length; i++) {\n        copy.push(lst[i]);\n\
    \    }\n    var element;\n    while (copy.length > 0) {\n        if (copy.length\
    \ == 1) {\n            element = copy[0];\n            copy.splice(0, 1);\n  \
    \      } else {\n            element = Math.min.apply(null, copy);\n         \
    \   copy.splice(copy.indexOf(element), 1);\n            if (copy.length > 0) {\n\
    \                element = Math.max.apply(null, copy);\n                copy.splice(copy.indexOf(element),\
    \ 1);\n            }\n        }\n        result.push(element);\n    }\n    return\
    \ result;\n}\n", "    let new_list = [];\n    let copy_lst = lst.slice();\n  \
    \  for(let i = 0; i < lst.length; i++){\n        let min = Math.min(...copy_lst);\n\
    \        let max = Math.max(...copy_lst);\n        if(i % 2 == 0){\n         \
    \   new_list.push(min);\n            copy_lst.splice(copy_lst.indexOf(min), 1);\n\
    \        }\n        else{\n            new_list.push(max);\n            copy_lst.splice(copy_lst.indexOf(max),\
    \ 1);\n        }\n    }\n    return new_list;\n}", "    var l1 = lst.slice(0).sort(function(a,b){return\
    \ a-b});\n    var l2 = lst.slice(0).sort(function(a,b){return b-a});\n    var\
    \ res = [], len = lst.length;\n    for(var i = 0; i < len; i++){\n        res.push(l1[i]);\n\
    \        res.push(l2[i]);\n    }\n    return res;\n}\n", "    var aux_lst = lst.slice();\n\
    \    aux_lst.sort(function(a,b){return a-b});\n    var result = [];\n    var n\
    \ = aux_lst.length;\n    for(var i = 0; i < n; i++){\n        if(i%2 == 0){\n\
    \            result.push(aux_lst[i/2]);\n        }else{\n            result.push(aux_lst[(n-1)-(i-1)/2]);\n\
    \        }\n    }\n    return result;\n}\n", "    var res = [lst[0]];\n    var\
    \ max = lst[0];\n    var idx = 0;\n    for(var i = 1; i < lst.length; i++){\n\
    \        var next = find_min_or_max(lst, idx, max, true);\n        max = Math.max(next,\
    \ max);\n        idx = lst.indexOf(next);\n        res.push(next);\n        next\
    \ = find_min_or_max(lst, idx, max, false);\n        idx = lst.indexOf(next);\n\
    \        res.push(next);\n    }\n    return res;\n}\n", "    var lst_len = lst.length;\n\
    \    var result = [];\n    var max_bool = false;\n    var max = Math.max.apply(null,\
    \ lst);\n    var min = Math.min.apply(null, lst);\n    while(lst_len > 0){\n \
    \       if(max_bool == false){\n            var min_index = lst.indexOf(min);\n\
    \            result.push(min);\n            lst.splice(min_index, 1);\n      \
    \      max_bool = true;\n        }\n        else{\n            var max_index =\
    \ lst.indexOf(max);\n            result.push(max);\n            lst.splice(max_index,\
    \ 1);\n            max_bool = false;\n        }\n        min = Math.min.apply(null,\
    \ lst);\n        max = Math.max.apply(null, lst);\n        lst_len = lst.length;\n\
    \    }\n    return result;\n}\nvar x = [12,11,14,13,15,16,17,18,19,20];", "  var\
    \ maximum=Math.max.apply(null,lst);\n  var minimum=Math.min.apply(null,lst);\n\
    \  var idx1 = lst.indexOf(minimum);\n  var idx2 = lst.indexOf(maximum);\n  var\
    \ copy = lst.slice();\n  var temp = copy[idx1];\n  copy[idx1] = copy[idx2];\n\
    \  copy[idx2] = temp;\n  var result = [minimum,maximum];\n  var start = true;\n\
    \  while(copy.length!=0){\n    if(start==true){\n      result.push(Math.min.apply(null,copy));\n\
    \      copy.splice(copy.indexOf(Math.min.apply(null,copy)),1);\n      start=false;\n\
    \    }\n    else{\n      result.push(Math.max.apply(null,copy));\n      copy.splice(copy.indexOf(Math.max.apply(null,copy)),1);\n\
    \      start=true;\n    }\n  }\n  return result;\n}", "    let sorted_lst = lst.sort((a,b)\
    \ => a-b);\n    console.log(sorted_lst);\n    let output = [];\n    let i = 0;\n\
    \    let j = sorted_lst.length - 1;\n    while(i <= j){\n        output.push(sorted_lst[i]);\n\
    \        i++;\n        if(i <= j){\n            output.push(sorted_lst[j]);\n\
    \            j--;\n        }\n    }\n    return output;\n}\n", "    var newList\
    \ = [],\n        minmax = [];\n    for(var i =0; i< lst.length; i++){\n      \
    \  newList.push(lst[i]);\n    }\n    while(newList.length > 0){\n        var min\
    \ = Math.min.apply(null, newList);\n        var max = Math.max.apply(null, newList);\n\
    \        minmax.push(min);\n        minmax.push(max);\n        newList.splice(newList.indexOf(min),\
    \ 1);\n        newList.splice(newList.indexOf(max), 1);\n    }\n    return minmax;\n\
    }\n", "    let strange_lst = [];\n    while(lst.length > 0){\n        let min\
    \ = lst[0];\n        let max = lst[0];\n        for(let i = 0; i < lst.length;\
    \ i++){\n            if(lst[i] > max){\n                max = lst[i];\n      \
    \      }\n            if(lst[i] < min){\n                min = lst[i];\n     \
    \       }\n        }\n        strange_lst.push(min);\n        strange_lst.push(max);\n\
    \        lst.splice(lst.indexOf(min), 1);\n        lst.splice(lst.indexOf(max),\
    \ 1);\n    }\n    return strange_lst;\n}", "    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let strange_lst = [];\n    while (lst.length\
    \ > 0){\n        strange_lst.push(min);\n        lst.splice(lst.indexOf(min),\
    \ 1);\n        if (lst.length > 0){\n            strange_lst.push(max);\n    \
    \        lst.splice(lst.indexOf(max), 1);\n        }\n        min = Math.min(...lst);\n\
    \        max = Math.max(...lst);\n    }\n    return strange_lst;\n}\n\n\n", " \
    \   // your code here\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n\
    \    let maxIndex = lst.indexOf(max);\n    let minIndex = lst.indexOf(min);\n\
    \    let newList = [];\n    newList.push(min);\n    lst.splice(minIndex, 1);\n\
    \    newList.push(max);\n    lst.splice(maxIndex, 1);\n    while (lst.length >\
    \ 0) {\n        min = Math.min(...lst);\n        minIndex = lst.indexOf(min);\n\
    \        newList.push(min);\n        lst.splice(minIndex, 1);\n        max = Math.max(...lst);\n\
    \        maxIndex = lst.indexOf(max);\n        newList.push(max);\n        lst.splice(maxIndex,\
    \ 1);\n    }\n    return newList;\n}", "    var min=0;\n    var max=0;\n    var\
    \ arr=[];\n    for(var i=0;i<lst.length;i++){\n        for(var j=i+1;j<lst.length;j++){\n\
    \            if(lst[i]>lst[j]){\n                max=lst[i];\n               \
    \ lst[i]=lst[j];\n                lst[j]=max;\n            }\n        }\n    }\n\
    \    var i=0;\n    while(lst.length!=0){\n        min=lst[0];\n        arr[i]=min;\n\
    \        lst.splice(0,1);\n        i++;\n        if(lst.length!=0){\n        \
    \    max=lst[lst.length-1];\n            arr[i]=max;\n            lst.splice(lst.length-1,1);\n\
    \            i++;\n        }\n    }\n    return arr;\n}\nstrange_sort_list([4,\
    \ 5, 9, -4, 3, 15]); // [-4, 3, 4, 5, 9, 15]", "    return lst.sort((a,b)=>a-b).sort((a,b)=>b-a)\n\
    }\n\nmodule.exports = {\n    strange_sort_list : strange_sort_list,\n    callFunction\
    \ : callFunction,\n    append_to_end : append_to_end,\n    rest_parameters : rest_parameters,\n\
    \    return_unique_numbers : return_unique_numbers,\n    is_palindrome : is_palindrome,\n\
    \    split_by_value : split_by_value,\n    create_hashmap : create_hashmap,\n\
    \    sum_hashmap_values : sum_hashmap_values,\n    count_words : count_words,\n\
    \    create_star_string : create_star_string,\n    create_star_string_v2 : create_star_string_v2,\n\
    \    fibonacci : fibonacci,\n    factorial : factorial,\n    rec_sum : rec_sum,\n\
    \    rec_multiply : rec_multiply,\n    rec_count_down : rec_count_down,\n    rec_count_up\
    \ : rec_count_up,\n    rev_string : rev_string,\n    rev_array : rev_array,\n\
    \    rev_array_in_place : rev_array_in_place,\n    is_prime : is_prime,\n    get_prime_factors\
    \ : get_prime_factors,\n    create_array_range : create_array_range,\n    factorial\
    \ : factorial,\n    factorial_tail : factorial_tail,\n    merge_sort : merge_sort,\n\
    \    merge_arrays : merge_arrays,\n    find_missing_num : find_missing_num,\n\
    \    get_random_num : get_random_num,\n    find_missing_num_in_array : find_missing_num_in_array,\n\
    \    find_missing_num_in_array_v2 : find_missing_num_in_array_v2,\n    find_duplicate_num_in_array\
    \ : find_duplicate_num_in_array,\n    find_duplicate_num_in_array_v2"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
