name: HumanEval_44_change_base
language: js
prompt: "//Change numerical base of input number x to base.\n// return string representation\
  \ after the conversion.\n// base numbers are less than 10.\nfunction change_base(x,\
  \ base){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
  \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
  \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
  \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
  \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
  \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
  \ 8),\"7\");\n}\n\ntest();"
completions: ["\t//console.log(\"inside change_base\")\n\tvar c = \"\";\n\twhile(x>0){\n\
    \t\tc = (x%base).toString() + c;\n\t\tx = parseInt(x/base);\n\t}\n\treturn c;\n\
    }\n", "  if(x<10) return x;\n  var result = new String();\n  while(x >= base){\n\
    \    remainder = x % base;\n    x = Math.floor(x / base);\n    result = remainder\
    \ + result;\n  }\n  result = x + result;\n  return result;\n}\n", "  var t, y,\
    \ z, i, v;\n  //first, verify that x is an integer.\n  //find the fractional part\
    \ of x\n  y = x - Math.floor(x);\n  //if y != 0, x is not an integer.\n  if (y\
    \ != 0){\n    //return empty string.\n    return \"\";\n  }\n  //next, verify\
    \ that base is less than 10.\n  if (base >= 10){\n    //return empty string.\n\
    \    return \"\";\n  }\n  //start with an empty result string.\n  result = \"\"\
    ;\n  //start with an empty remainder (holds an integer from 0 to base-1).\n  remainder\
    \ = 0;\n  //we will build the result string from right to left.\n  //we will build\
    \ the remainder in the same direction.\n  while (x > 0){\n    //set x to the quotient\
    \ of dividing x by base.\n    x = x / base;\n    //find the floor of x (remember,\
    \ x is a float).\n    y = Math.floor(x);\n    //set z to the difference of x and\
    \ y (the fractional part of x).\n    z = x - y;\n    //set x to y, the new value\
    \ of x.\n    x = y;\n    //set remainder to the the fractional part of z times\
    \ base.\n    remainder = z * base;\n    //convert remainder to string\n    t =\
    \ remainder.toString();\n    //add the first character of t to the left of result.\n\
    \    result = t.charAt(0) + result;\n  }\n  //return the final result string.\n\
    \  return result;\n}", "    //declare a string variable\n    var result = \"\"\
    ;\n    //Start a while loop to keep running until x < base\n    while(x >= base){\n\
    \        result = String(x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    result = String(x) + result;\n    return result;\n}\n", "\tvar result\
    \ = \"\";\n\tvar remainder = x % base;\n\tif(x >= base){\n\t\treturn (change_base(Math.floor(x/base),\
    \ base)) + String(remainder);\n\t}\n\treturn String(remainder);\n}\n", "\tvar\
    \ mod;\n\tvar res = '';\n\twhile(x != 0){\n\t\tmod = x % base;\n\t\tx = Math.floor(x\
    \ / base);\n\t\tres = String(mod) + res;\n\t}\n\treturn res;\n}\n", "    if(typeof\
    \ x != \"number\"){\n        throw \"Invalid Input\";\n    }\n    let res = \"\
    \";\n    while(x > 0){\n        res = (x % base) + res;\n        x = Math.floor(x\
    \ / base);\n    }\n    return res;\n}\n", "  var s = x.toString(base);\n  return\
    \ s;\n}\n", "  var stack = [];\n  while(x > 0){\n    var s = x % base;\n    stack.push(s);\n\
    \    x = Math.floor(x / base);\n  }\n  return stack.reverse().join(\"\");\n}\n",
  "    let output = \"\";\n    while(x > 0){\n        output = x % base + output;\n\
    \        x = Math.floor(x / base);\n    }\n    return output;\n}\n", "  let answer\
    \ = '';\n  let tens = 1;\n  let temp;\n  while(x>0){\n    temp = parseInt(x%base);\n\
    \    answer = temp.toString() + answer;\n    x = parseInt(x/base);\n  }\n  return\
    \ answer;\n}\n", "    //x is a positive integer\n    //base is a positive integer\
    \ less than 10\n    var res = \"\";\n    while(x > 0){\n        var r = x % base;\n\
    \        x = parseInt(x / base);\n        res = r + res;\n    }\n    return res;\n\
    }\n\n", "    var converted = \"\";\n    var rest;\n    while(x > 0){\n       \
    \ rest = x % base;\n        x = Math.floor(x / base);\n        converted = rest\
    \ + converted;\n    }\n    return converted;\n}\n", "  return Math.abs(parseInt(x,\
    \ 10)).toString(base);\n}\n", "\tvar ans = \"\";\n\tif(x == 0) return \"0\";\n\
    \twhile(x > 0){\n\t\tvar digit = x % base;\n\t\tans = (digit).toString() + ans;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn ans;\n}\n", "\tvar ans = \"\";\n\t\
    while(x){\n\t\trem = x % base;\n\t\tans = rem + ans;\n\t\tx = Math.floor(x / base);\n\
    \t}\n\treturn ans;\n}\n", "    var string_representation = x.toString(base);\n\
    \    return string_representation;\n}\n", "    var sum = \"\";\n    var remain\
    \ = 0;\n    while(x>0){\n        remain = x%base;\n        sum = remain + sum;\n\
    \        x = (x-remain)/base;\n    }\n    return sum;\n}\n", "\tif(x == '0'){\n\
    \t\treturn '0';\n\t}\n\tif(x == '1'){\n\t\treturn '1';\n\t}\n\tvar res = [];\n\
    \tvar quotient = x;\n\tvar remainder = 0;\n\tvar i = 0;\n\twhile(quotient != 0){\n\
    \t\tremainder = quotient % base;\n\t\tquotient = Math.floor(quotient / base);\n\
    \t\tres[i] = remainder;\n\t\ti++;\n\t}\n\treturn res.reverse().join('');\n}\n",
  "\tif(x < base){\n\t\treturn x.toString();\n\t}\n\treturn change_base(Math.floor(x/base),\
    \ base) + (x % base).toString();\n}\n", "\tvar result = [];\n\tvar current_number\
    \ = x;\n\tvar remain;\n\twhile(current_number != 0){\n\t\tremain = current_number\
    \ % base;\n\t\tcurrent_number = (current_number - remain) / base;\n\t\tresult.push(remain);\n\
    \t}\n\treturn result.reverse().join(\"\");\n}\n\n", "    if(base <= 0 || base\
    \ > 10){\n        throw \"Base \" + base + \" is not supported.\";\n    }\n  \
    \  if(x < 0){\n        throw \"Input integer \" + x + \" must be positive\";\n\
    \    }\n    if(base > x){\n        return x.toString();\n    }\n    var result\
    \ = \"\";\n    var remainder = 0;\n    while(x > 0){\n        remainder = x %\
    \ base;\n        x = Math.floor(x / base);\n        result = remainder.toString()\
    \ + result;\n    }\n    return result;\n}\n", "\tvar r; // remainder\n\tvar s\
    \ = \"\"; // string\n\t\n\twhile(x != 0){\n\t\tr = x % base;\n\t\ts = r + s;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn s;\n}\n", "  // perform modulus and\
    \ integer division by base\n  // to get the result and divide x.\n  // Math.floor\
    \ takes care of the fact that in js,\n  // 1/2 = 0.5, but it rounds down to 0.\n\
    \  let result = \"\";\n  let quotient = Math.floor(x / base);\n  let remainder\
    \ = x % base;\n  while(quotient > 0){\n    result = remainder + result;\n    x\
    \ = quotient;\n    quotient = Math.floor(x / base);\n    remainder = x % base;\n\
    \  }\n  // add the last remainder to the result\n  result = remainder + result;\n\
    \  return result;\n}\n", "\tvar number_list = [];\n\tvar result = '';\n\t//convert\
    \ input number to list of number before convert to new base.\n\twhile(x!=0){\n\
    \t\tnumber_list.push(x%10);\n\t\tx=Math.floor(x/10);\n\t}\n\t//convert to new\
    \ base.\n\twhile(number_list.length>0){\n\t\tx = number_list.pop();\n\t\tfor(var\
    \ i=0; i<x; i++){\n\t\t\tresult+=base;\n\t\t}\n\t\tbase = change_one_place(base);\n\
    \t}\n\treturn result;\n}\n", "\tvar result = [];\n\twhile(x >= base){\n\t\tvar\
    \ q = x / base;\n\t\tvar r = Math.floor(q);\n\t\tvar mod = x - r * base;\n\t\t\
    result.push(mod);\n\t\tx = r;\n\t}\n\tresult.push(x);\n\treturn result.reverse().join(\"\
    \");\n}\n", "\tvar result = '';\n\tvar remainder;\n\tvar value = x;\n\twhile(value\
    \ > 0){\n\t\tremainder = value % base;\n\t\tvalue = parseInt(value / base);\n\t\
    \tresult = remainder + result;\n\t}\n\treturn result;\n}\n\nvar assert = require('assert');\n\
    assert.equal(change_base(10, 2), '1010');\nassert.equal(change_base(12, 5), '22');\n\
    assert.equal(change_base(3, 5), '3');\nassert.equal(change_base(42, 5), '132');\n\
    assert.equal(change_base(120, 5), '442');\nassert.equal(change_base(122, 5), '232');\n\
    assert.equal(change_base(123, 5), '233');\nassert.equal(change_base(125, 5), '433');\n\
    assert.equal(change_base(15, 5), '24');\nassert.equal(change_base(17, 5), '33');\n\
    assert.equal(change_base(34, 5), '114');\nassert.equal(change_base(35, 5), '124');\n\
    assert.equal(change_base(36, 5), '134');\nassert.equal(change_base(40, 5), '144');\n\
    assert.equal(change_base(41, 5), '154');\nassert.equal(change_base(42, 5), '132');\n\
    assert.equal(change_base(43, 5), '232');\nassert.equal(change_base(44, 5), '242');\n\
    assert.equal(change_base(45, 5), '333');\nassert.equal(change_base(46, 5), '343');\n\
    assert.equal(change_base(47, 5), '353');\nassert.equal(change_base(48, 5), '443');\n\
    assert.equal(change_base(49, 5), '453');\nassert.equal(change_base(50, 5), '411');\n\
    assert.equal(change_base(60, 5), '441');\nassert.equal(change_base(70, 5), '113');\n\
    assert.equal(change_base(72, 5), '153');\n", "\tvar result = '',\n\t\ttemp = x,\n\
    \t\tnext_digit;\n\twhile(temp>0){\n\t\tnext_digit = temp%base;\n\t\tresult = next_digit\
    \ + result;\n\t\ttemp = Math.floor(temp/base);\n\t}\n\treturn result;\n}\n\nvar\
    \ input = prompt('Enter the number to find its base3 representation, x = ', 2);\n\
    var base = 3;\n\nalert('base3 represntation of ' + input + ' is ' + change_base(input,\
    \ base));", "\tvar curr_base = 10;\n\tvar str = [];\n\t\n\twhile(x>0){\n\t\tstr.push(x%base);\n\
    \t\tx = Math.floor(x/base);\n\t}\n\tstr.reverse();\n\tstr = str.join(\"\");\n\t\
    return str;\n}\n", "    if(base == 10){\n        return x;\n    }\n    if(base\
    \ == 2){\n        if(x>=0){\n            return to_binary(x);\n        }else{\n\
    \            return \"-\"+to_binary(-x);\n        }\n    }\n    if(base == 8){\n\
    \        if(x>=0){\n            return to_octal(x);\n        }else{\n        \
    \    return \"-\"+to_octal(-x);\n        }\n    }\n    if(base == 16){\n     \
    \   if(x>=0){\n            return to_hex(x);\n        }else{\n            return\
    \ \"-\"+to_hex(-x);\n        }\n    }\n}\n", "  var num = parseInt(x, 10);\n \
    \ var alphabet = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n  if(num < base){\n\
    \    return alphabet[num];\n  }\n  else{\n    return change_base(Math.floor(num/base),\
    \ base) + alphabet[num%base];\n  }\n}\n", "    x = x.toString(base);\n    return\
    \ x;\n}", "\tvar digits = {\n\t\t'0': [1, 1, 1, 0, 1, 1, 1],\n\t\t'1': [0, 0,\
    \ 1, 0, 0, 1, 0],\n\t\t'2': [1, 0, 1, 1, 1, 0, 1],\n\t\t'3': [1, 0, 1, 1, 0, 1,\
    \ 1],\n\t\t'4': [0, 1, 1, 1, 0, 1, 0],\n\t\t'5': [1, 1, 0, 1, 0, 1, 1],\n\t\t\
    '6': [1, 1, 0, 1, 1, 1, 1],\n\t\t'7': [1, 0, 1, 0, 0, 1, 0],\n\t\t'8': [1, 1,\
    \ 1, 1, 1, 1, 1],\n\t\t'9': [1, 1, 1, 1, 0, 1, 1]\n\t};\n\tvar digit_values =\
    \ {\n\t\t'0': [\" 0 \",\"0 0\",\"0 0\",\" 0 \",\"0 0\",\"0 0\",\" 0 \"],\n\t\t\
    '1': [\"   \",\" 1 \",\" 1 \",\"   \",\" 1 \",\" 1 \",\"   \"],\n\t\t'2': [\"\
    \ 0 \",\"0 0\",\"0 0\",\" 0 \",\"0 0\",\"0 0\",\" 0 \"],\n\t\t'3': [\" 0 \",\"\
    0 0\",\"0 0\",\" 0 \",\"0 0\",\"0 0\",\" 0 \"],\n\t\t'4': [\"   \",\" 1 \",\"\
    \ 1 \",\"   \",\" 1 \",\" 1 \",\"   \"],\n\t\t'5': [\" 0 \",\"0 0\",\"0 0\",\"\
    \ 0 \",\"0 0\",\"0 0\",\" 0 \"],\n\t\t'6': [\" 0 \",\"0 0\",\"0 0\",\" 0 \",\"\
    0 0\",\"0 0\",\" 0 \"],\n\t\t'7': [\" 0 \",\"0 0\",\"0 0\",\" 0 \",\"0 0\",\"\
    0 0\",\" 0 \"],\n\t\t'8': [\" 0 \",\"0 0\",\"0 0\",\" 0 \",\"0 0\",\"0 0\",\"\
    \ 0 \"],\n\t\t'9': [\" 0 \",\"0 0\",\"0 0\",\" 0 \",\"0 0\",\"0 0\",\" 0 \"]\n\
    \t};\n\t", "\tvar num_dict = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ 'A', 'B', 'C', 'D', 'E', 'F'];\n\tvar result = [];\n\tvar modulo = x % base;\n\
    \tresult.push(num_dict[modulo]);\n\tvar quotient = Math.floor(x / base);\n\twhile(quotient\
    \ > 0){\n\t\tmodulo = quotient % base;\n\t\tresult.push(num_dict[modulo]);\n\t\
    \tquotient = Math.floor(quotient / base);\n\t}\n\tresult.reverse();\n\treturn\
    \ result.join('');\n}\n", "\t\n\tif(x == 0)\n\t\treturn \"0\";\n\t\n\tvar c =\
    \ \"\";\n\t\n\twhile(x > 0){\n\t\tc = (x % base) + c;\n\t\tx = Math.floor(x /\
    \ base);\n\t}\n\t\n\treturn c;\n}\n", "    var s = \"\";\n    for(var i = 0; i\
    \ < x.length; i++){\n        s += x[i] % base;\n    }\n    return s;\n}\n", " \
    \   x = parseInt(x);\n    base = parseInt(base);\n    var res = \"\";\n    while(x\
    \ > 0){\n        var digit = x % base;\n        res = digit + res;\n        x\
    \ = parseInt(x / base);\n    }\n    return res;\n}\n", "    return x.toString(base)\n\
    }\n", "    var num_rep = '';\n    while(x > 0){\n        var r = x % base;\n \
    \       num_rep = r + num_rep;\n        x = (x - r) / base;\n    }\n    return\
    \ num_rep;\n}\n", "  var tmp = x;\n  var res = [];\n  while(tmp >= base){\n  \
    \  var r = tmp % base;\n    res.push(r);\n    tmp = Math.floor(tmp / base);\n\
    \  }\n  res.push(tmp);\n  return res.reverse().join('');\n}\n", "\tvar rem,quo,sum,tmp;\n\
    \ttmp = [];\n\twhile(x){\n\t\trem = x % base;\n\t\tquo = (x - rem) / base;\n\t\
    \ttmp.push(rem);\n\t\tx = quo;\n\t}\n\tsum = \"\";\n\tfor(var i = tmp.length -\
    \ 1; i >= 0; i--){\n\t\tsum += tmp[i];\n\t}\n\treturn sum;\n}\n", "\tvar str =\
    \ '';\n\twhile(x > 0){\n\t\tstr =  (x % base) + str;\n\t\tx = Math.floor(x / base);\n\
    \t}\n\treturn str;\n}\n", "  var L = x.length;\n  var power = 0;\n  var ret =\
    \ 0;\n  var big;\n  for(var i = L-1; i>=0; i--){\n    big = Math.pow(10, power);\n\
    \    ret += big * (parseInt(x[i]) - parseInt(base[i]));\n    power += 1;\n  }\n\
    \  return ret;\n}\n", "  var curr_base = x.split('').length;\n  var result = x;\n\
    \  var num = new BigInteger(x);\n  var carry = new BigInteger(0);\n  if(curr_base\
    \ == base){\n    return result;\n  }\n  else if(curr_base < base){\n    for(var\
    \ i = 0; i < base - curr_base; i++){\n      result = '0' + result;\n    }\n  \
    \  return result;\n  }\n  else{\n    while(result.length > base){\n      var last_digit\
    \ = parseInt(result.slice(-1));\n      var num_to_add = parseInt(last_digit /\
    \ base);\n      carry = carry.add(num_to_add);\n      result = result.slice(0,\
    \ -1);\n    }\n    return carry.toString() + result;\n  }\n}\n", "\tvar zero =\
    \ '0';\n\tvar a = [];\n\twhile(x > 0){\n\t\tvar reminder = x % base;\n\t\ta.push(zero.concat(reminder.toString()).slice(-1));\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn a.reverse().join('');\n}\n", "\t\
    return change_base_rec(x, base, \"\");\n}\n", "  var n = x.toString(base);\n \
    \ return n;\n}\n", "  if(x == 0)\n    return \"0\";\n  var result = \"\";\n  while(x\
    \ > 0){\n    result = Math.floor(x % base) + result;\n    x = Math.floor(x / base);\n\
    \  }\n  return result;\n}", "    let ans = \"\";\n    while(x>0){\n        ans\
    \ = x%base + ans;\n        x = Math.floor(x/base);\n    }\n    return ans;\n}\n",
  "\tvar x = x + '';\n\tvar result = [];\n\tvar l = x.length;\n\tfor(var i = 0; i\
    \ < l; i++){\n\t\tif(x[i] === '.'){\n\t\t\tif(i === 0){\n\t\t\t\tresult.push(0);\n\
    \t\t\t}\n\t\t\tresult.push('.');\n\t\t}else{\n\t\t\tif(i === 0){\n\t\t\t\tresult.push(parseInt(x[i]));\n\
    \t\t\t}else{\n\t\t\t\tresult.push(Math.round(parseInt(x[i])*base));\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn result.join('');\n}\n", "\tvar num = 0;\n\tvar m = 1;\n\t\
    var length = x.length;\n\tfor(var i = length - 1; i >= 0; i--){\n\t\tnum += x[i]\
    \ * m;\n\t\tm *= base;\n\t}\n\tvar s = \"\";\n\twhile(num > 0){\n\t\tvar d = num\
    \ % 10;\n\t\ts = d + s;\n\t\tnum = Math.floor(num / 10);\n\t}\n\treturn s;\n}\n",
  "\tif(x>=base)\n\t\treturn change_base(Math.floor(x/base), base) + x%base;\n\telse\n\
    \t\treturn x;\n}", "    if(x < base){\n        return x.toString();\n    }else{\n\
    \        var head = x / base >> 0;\n        var tail = x % base;\n        return\
    \ change_base(head, base) + tail.toString();\n    }\n}\n", "    var digit = 0;\n\
    \    var str = \"\";\n    while(x > 0){\n        digit = x % base;\n        x\
    \ = Math.floor(x / base);\n        str = digit.toString() + str;\n    }\n    return\
    \ str;\n}\n", "  var result = [];\n  while(x>0){\n    result.push(x%base);\n \
    \   x = Math.floor(x/base);\n  }\n  return result.reverse().join('');\n}\n", "\t\t\
    return Number(x).toString(base);\n}\n", "    //var inp_arr = [];\n    var inp_arr\
    \ = new Array(base);\n    var res = \"\";\n    for(var i = 0; i < base; i++){\n\
    \        inp_arr[i] = i;\n    }\n    while(x > 0){\n        res = res + inp_arr[x\
    \ % base];\n        x = Math.floor(x / base);\n    }\n    return res;\n}\n\n",
  "  var str = \"\";\n  var temp = x;\n  while(temp != 0){\n    var b_num = temp %\
    \ base;\n    temp = Math.floor(temp / base);\n    if(b_num > 9){\n      str =\
    \ String.fromCharCode(b_num + 55) + str;\n    }\n    else{\n      str = b_num\
    \ + str;\n    }\n  }\n  return str;\n}\n", "\tvar result = \"\";\n\twhile(x >\
    \ 0){\n\t\tresult = x % base + result;\n\t\tx = parseInt(x / base);\n\t}\n\treturn\
    \ result;\n}\n", "\tvar result = \"\";\n\tif(x < 0){\n\t\tx = -x;\n\t\tresult\
    \ += \"-\";\n\t}\n\tvar result_table = [];\n\tdo{\n\t\tvar remainder = x % base;\n\
    \t\tresult_table.push(remainder);\n\t\tx = (x - remainder) / base;\n\t}while(x\
    \ > 0);\n\tvar i = result_table.length - 1;\n\tfor(; i >= 0; i--){\n\t\tresult\
    \ += result_table[i];\n\t}\n\treturn result;\n}\n", "    x = parseInt(x);\n  \
    \  base = parseInt(base);\n    base_num = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    .split(\"\");\n    result = \"\";\n    for(var i = 0; x > 0; i++){\n        result\
    \ = base_num[x % base] + result;\n        x = parseInt(x / base);\n    }\n   \
    \ return result;\n}", "  var output = \"\";\n  var r = x % base;\n  var y = (x\
    \ - r) / base;\n  if (y == 0){\n    output = r.toString();\n  }\n  else{\n   \
    \ output = change_base(y, base).toString() + r.toString();\n  }\n  return output;\n\
    }\n", "    var temp = x;\n    var mod = 0;\n    var result = \"\";\n    while(temp\
    \ != 0){\n        mod = temp % base;\n        temp = Math.floor(temp / base);\n\
    \        result = mod + result;\n    }\n    return result;\n}\n", "    var exp\
    \ = 0;\n    var result = [];\n    while(x != 0){\n        var last = x % base;\n\
    \        result.push(last);\n        x = Math.floor(x / base);\n    }\n    return\
    \ result.reverse().join(\"\");\n}\n\n", "    var result = \"\";\n    while(x !=\
    \ 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n", "\tvar res = [];\n\tvar abs_x = x;\n\tif(x <\
    \ 0){\n\t\tabs_x = -x;\n\t}\n\twhile(abs_x > 0){\n\t\tres.push(abs_x % base);\n\
    \t\tabs_x = Math.floor(abs_x / base);\n\t}\n\tif(x < 0){\n\t\tres.push(\"-\");\n\
    \t}\n\treturn res.reverse().join(\"\");\n}\n", "\tvar result = \"\";\n\twhile(x\
    \ > 0){\n\t\tvar r = x % base;\n\t\tresult = r + result;\n\t\tx = (x - r) / base;\n\
    \t}\n\treturn result;\n}\n", "    var out = \"\";\n    while(x > 0){\n       \
    \ out = x % base + out;\n        x = Math.floor(x / base);\n    }\n    return\
    \ out;\n}\n", "\tvar output = \"\";\n\twhile(x >= base){\n\t\toutput = (x % base)\
    \ + output;\n\t\tx = parseInt(x / base);\n\t}\n\toutput = x + output;\n\treturn\
    \ output;\n}\n", "    var s = '';\n\n    while(x > 0){\n        var r = x % base;\n\
    \        s = r + s;\n        x = (x - r) / base;\n    }\n\n    return s;\n}\n\n\
    exports.change_base = change_base;\n", "\tvar limit = Math.pow(10,base);\n\tif(base==10){\n\
    \t\treturn x;\n\t}else{\n\t\treturn  x.toString(limit);\n\t}\n}\n", "\tvar res\
    \ = \"\";\n\twhile(x > 0){\n\t\tres = x % base + res;\n\t\tx = Math.floor(x /\
    \ base);\n\t}\n\treturn res;\n}\n", "\tvar ret = \"\";\n\tvar quotient = x;\n\t\
    var remainder = 0;\n\twhile(quotient > 0){\n\t\tremainder = quotient % base;\n\
    \t\tquotient = parseInt(quotient / base);\n\t\tret = remainder + ret;\n\t}\n\t\
    return ret;\n}\n", "\tvar remainders = [];\n\twhile(x != 0){\n\t\tremainders.push(x\
    \ % base);\n\t\tx = Math.floor(x / base);\n\t}\n\treturn remainders.reverse().join(\"\
    \");\n}\n", "    var output = \"\"\n    while(x >= 1){\n        output = x % base\
    \ + output\n        x = Math.floor(x / base)\n    }\n    return output\n}\n",
  "  var len = x.length;\n  var base_num = 0;\n  var sum = 0;\n  for(var i = 0; i\
    \ < len; i++){\n    base_num = (x[i] == 1)? 1 : 0;\n    sum += base_num * Math.pow(2,\
    \ len - 1 - i);\n  }\n  return sum.toString(base);\n}\n", "    if(x < base){\n\
    \        return \"\" + x;\n    }\n    return change_base(Math.floor(x/base), base)\
    \ + \"\" + (x % base);\n}\n", "    if(base < 2 || base > 9){\n        throw new\
    \ Error(\"base must be between 2 and 9\");\n    }\n    if(x < 0){\n        throw\
    \ new Error(\"x must be a positive integer\");\n    }\n    if(x === 0){\n    \
    \    return 0;\n    }\n    var result = \"\";\n    while(x > 0){\n        var\
    \ q = x % base;\n        x = Math.floor(x / base);\n        result = q + result;\n\
    \    }\n    return result;\n}", "\tvar remainders = [];\n\tvar result = \"\";\n\
    \tvar index = 0;\n\tvar index_x = 0;\n\t\n\twhile(x > 0){\n\t\tvar remainder =\
    \ x % base;\n\t\tremainders[index] = remainder;\n\t\tindex++;\n\t\tx = Math.floor(x\
    \ / base);\n\t}\n\t\n\tif(index === 0){\n\t\treturn \"0\";\n\t}\n\t\n\twhile(index_x\
    \ < index){\n\t\tresult += remainders[index_x];\n\t\tindex_x++;\n\t}\n\t\n\treturn\
    \ result;\n}\n", "    var result = [];\n    var i = 0;\n    while(x > 0){\n  \
    \      var temp = x % base;\n        x = parseInt(x / base);\n        result[i]\
    \ = temp;\n        i++;\n    }\n    return result.reverse().join(\"\");\n}\n",
  "    var x_current_base = get_base(x);\n    var output = \"\";\n    if(x_current_base\
    \ == base){\n        return x;\n    }\n    else if(x_current_base < base){\n \
    \       output = \"\";\n        var x_base10 = parseInt(x, x_current_base);\n\
    \        var x_base = parseInt(x_base10, base);\n        output = x_base.toString(base);\n\
    \        return output;\n    }\n    else{\n        output = \"\";\n        var\
    \ x_base10 = parseInt(x, x_current_base);\n        var x_base = parseInt(x_base10,\
    \ base);\n        output = x_base.toString(base);\n        return output;\n  \
    \  }\n}\n", "  // get x.toString(base) and remove 0.\n\n  x_string = x.toString(base);\n\
    \  x_string = x_string.replace(/0/g, \"\");\n  return x_string;\n}\n", "  if(x\
    \ == 0)\n    return 0;\n  var digits = ['0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n  var result = [];\n  while(x > 0){\n\
    \    var remainder = x % base;\n    x = Math.floor(x / base);\n    result.push(digits[remainder]);\n\
    \  }\n  return result.reverse().join('');\n}\n", "\tvar output = \"\";\n\twhile(x>0){\n\
    \t\tvar digit = x%base;\n\t\toutput = digit + output;\n\t\tx = Math.floor(x/base);\n\
    \t}\n\treturn output;\n}\n", "\tif(!is_integer(x) || !is_integer(base)){\n\t\t\
    throw \"change_base(x, base) requires integer input.\";\n\t}\n\tif(x >= 0){\n\t\
    \tvar representation = \"\";\n\t\tdo{\n\t\t\trepresentation = x % base + representation;\n\
    \t\t\tx = Math.floor(x / base);\n\t\t}while(x != 0);\n\t\treturn representation;\n\
    \t}else{\n\t\treturn \"-\" + change_base(-x, base);\n\t}\n}\n", "    var y = x.toString();\n\
    \    var result = '';\n    while(y!=0){\n        result = y%base + result;\n \
    \       y = Math.floor(y/base);\n    }\n    return result;\n}\n", "    var result\
    \ = \"\";\n    while(x != 0){\n        result = x % base + result;\n        x\
    \ = Math.floor(x / base);\n    }\n    return result;\n}\n\n\nvar input = prompt(\"\
    Enter a number in [0,1000)\");\nvar base = prompt(\"Change its base to what?\"\
    );\n", "    var ret = '';\n    var num_map = ['0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    do{\n        var remainder\
    \ = x % base;\n        ret = num_map[remainder] + ret;\n        x = (x - remainder)\
    \ / base;\n    }while(x > 0);\n    return ret;\n}\n", "  var val =  parseInt(x);\n\
    \  var result = [];\n  while(val>0){\n    result.push(val%base);\n    val = Math.floor(val/base);\n\
    \  }\n  return result.reverse().join(\"\");\n}\n", "    var result = '';\n   \
    \ var result2 = '';\n    var remainder;\n    var n = x;\n    while(true){\n  \
    \      remainder = n % base;\n        n = Math.floor(n / base);\n        if(n\
    \ <= 0) break;\n        result += remainder;\n    }\n    result += remainder;\n\
    \    for(var i = result.length - 1; i >= 0; i--){\n        result2 += result[i];\n\
    \    }\n    return result2;\n}\n", "\tvar str = '';\n\tvar i = 0;\n\twhile(x >\
    \ 0){\n\t\tstr = String(x % base) + str;\n\t\tx = parseInt(x / base);\n\t}\n\t\
    return str;\n}\n", "\tif(isNaN(x)) return x;\n\tvar to_return = \"\";\n\tif(x\
    \ < 0){\n\t\tto_return += \"-\";\n\t\tx = Math.abs(x);\n\t}\n\twhile(x != 0){\n\
    \t\tvar r = x % base;\n\t\tto_return += r;\n\t\tx = Math.floor(x / base);\n\t\
    }\n\treturn to_return.split(\"\").reverse().join(\"\");\n}\n", "    var result=\"\
    \";\n    var remain;\n    while(x>0){\n        remain = x%base;\n        x = Math.floor(x/base);\n\
    \        result = remain + result;\n    }\n    return result;\n}\n", "    //change\
    \ base\n    var base_x = [];\n    while(x >= base){\n        base_x.push(x % base);\n\
    \        x = Math.floor(x / base);\n    }\n    base_x.push(x);\n    base_x.reverse();\n\
    \    return base_x.join(\"\");\n}\n", "    var val = parseInt(x, 10);\n    if(val\
    \ < base){\n        return \"\" + val;\n    }\n    else{\n        var rem = val\
    \ % base;\n        var quotient = Math.floor(val / base);\n        return change_base(quotient,\
    \ base) + rem;\n    }\n}\n", "\tvar result = '';\n\tvar coeff = 0;\n\tvar rem\
    \ = 0;\n\tvar i = 0;\n\tvar flag = false;\n\n\t//check if base in range\n\tif(base\
    \ < 2 || base > 10){\n\t\treturn;\n\t}\n\n\t//convert base 10 to base, use integer\
    \ division\n\twhile(x > 0){\n\t\tcoeff = x / base;\n\t\trem = x % base;\n\t\t\
    x = Math.floor(coeff);\n\t\tif(rem != 0){\n\t\t\tflag = true;\n\t\t}\n\t\t//eliminate\
    \ leading zeros\n\t\tif(flag){\n\t\t\tresult = result + rem;\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n", "  var result = \"\";\n  while(x > 0){\n    result = (x % base)\
    \ + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n}\n", "   \
    \ var answer = \"\";\n    var convert = x;\n    while(convert != 0){\n       \
    \ var digit = convert % base;\n        convert = Math.floor(convert / base);\n\
    \        answer = digit + answer;\n    }\n    return answer;\n}\n", "\tif(base\
    \ > 10){\n\t\tthrow new Error(\"base must be smaller than 10\");\n\t}\n\tvar answer\
    \ = \"\";\n\twhile(x > 0){\n\t\tvar digit = x % base;\n\t\tanswer = digit + answer;\n\
    \t\tx = Math.floor(x / base);\n\t}\n\treturn answer;\n}\n", "    x = parseInt(x,\
    \ 2);\n    x = x.toString(base);\n    return x;\n}\n", "    // x: Input number\n\
    \    // base: base numbers less than 10\n    var result = \"\";\n    while(x >\
    \ 0){\n        var r = x % base;\n        if(r > 9){\n            result = String.fromCharCode(55\
    \ + r) + result;\n        }else{\n            result = r + result;\n        }\n\
    \        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "  var s\
    \ = '';\n\n  // (Math.floor(x/base))\n  // is floor(x/base)\n\n  s = x % base\
    \ + s; //modulus of x and base\n  x = Math.floor(x/base);\n\n  while(x > 0){\n\
    \    s = x % base + s;\n    x = Math.floor(x/base);\n  }\n  return s;\n}\n", "\t\
    if(x < 10){\n\t\treturn x;\n\t}\n\treturn change_base(Math.floor(x/base), base)\
    \ + (x % base);\n}\n", "    var result = \"\"\n    while(x > 0){\n        result\
    \ = String(x % base) + result\n        x = Math.floor(x / base)\n    }\n    return\
    \ result\n}\n\n", "  var x = x.toString();\n  var sum = 0;\n  var base_set = {\n\
    \    2: \"0\",\n    3: \"00\",\n    4: \"000\",\n    5: \"0000\",\n    6: \"00000\"\
    ,\n    7: \"000000\",\n    8: \"0000000\",\n    9: \"00000000\",\n  };\n  for(var\
    \ i = 0; i < x.length; i++){\n    sum += x[i] * Math.pow(10,x.length-i-1);\n \
    \ }\n  return sum.toString(base) + base_set[base];\n}\n", "    if(x.length ==\
    \ 0) return \"\";\n    var remain = 0;\n    var cur = 0;\n    for(var i = 0; i\
    \ < x.length; i++){\n        cur = x[i] - '0' + remain * 10;\n        remain =\
    \ cur % base;\n        x[i] = (cur / base).toString()[0];\n    }\n    return remain.toString()\
    \ + change_base(x.replace(/^0+/, ''), base);\n}\n\n", "\t//Integer part\n\tvar\
    \ it = Math.floor(x);\n\tvar str = \"\";\n\twhile(it>0){\n\t\tstr = it%base +\
    \ str;\n\t\tit = Math.floor(it/base);\n\t}\n\t//Fractional part\n\tvar fr = x\
    \ - Math.floor(x);\n\tvar small_number = 0.1;\n\twhile(small_number > 1e-5){\n\
    \t\tstr += Math.floor(fr/small_number);\n\t\tfr = fr%small_number;\n\t\tsmall_number\
    \ = small_number/base;\n\t}\n\t\n\treturn str;\n}\n", "    if(base < 2 || base\
    \ > 9)\n        return \"\";\n    var ret = \"\";\n    while(x > 0){\n       \
    \ var mod = x % base;\n        x = Math.floor(x / base);\n        ret = mod +\
    \ ret;\n    }\n    return ret;\n}\n", "    var value = 0;\n    var string = \"\
    \";\n    var power = 0;\n    while(x > 0){\n        value = x % base;\n      \
    \  x = parseInt(x / base);\n        string = value.toString() + string;\n    }\n\
    \    return string;\n}\n", "  // initialize to empty string\n  var result = \"\
    \";\n  // let the number continue to do divmod operation until\n  // number is\
    \ 0.\n  while(x != 0){\n    // using string concatenation operator + to concatenate\n\
    \    // the reminder to the string result.\n    result = x % base + result;\n\
    \    // change the number to quotient for the next loop\n    x = parseInt(x /\
    \ base);\n  }\n  return result;\n}", "\tvar converted = '';\n\tvar quotient;\n\
    \tvar remainder;\n\t\n\twhile(x > 0){\n\t\tremainder = x % base;\n\t\tconverted\
    \ = remainder + converted;\n\t\tx = Math.floor(x / base);\n\t}\n\t\n\treturn converted;\n\
    }\n", "\tvar rem = 0;\n\tvar result = \"\";\n\twhile(x > 0){\n\t\trem = x % base;\n\
    \t\tresult = String(rem) + result;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn\
    \ result;\n}\n", "  var result = [];\n  var xtemp = x;\n  while(xtemp >= base){\n\
    \    var remain = xtemp % base;\n    result.push(remain);\n    xtemp = Math.floor(xtemp\
    \ / base);\n  }\n  result.push(xtemp);\n  return result.reverse().join(\"\");\n\
    }\n", "    if(x === 0) return \"0\";\n    var ans = [];\n    while(x > 0){\n \
    \       ans.push(x % base);\n        x = parseInt(x / base);\n    }\n    return\
    \ ans.reverse().join(\"\");\n}\n", "\treturn x.toString(base);\n}\n", "    var\
    \ converted = [];\n    var remainder;\n    var xtemp = x;\n    while(xtemp >=\
    \ base){\n        remainder = xtemp % base;\n        xtemp = Math.floor(xtemp\
    \ / base);\n        converted.push(remainder);\n    }\n    if(xtemp < base){\n\
    \        converted.push(xtemp);\n    }\n    // var reversed = converted.reverse();\n\
    \    var reversed = converted;\n    console.log(\"Input: \" + x + \" converted\
    \ to base \" + base + \" is: \" + reversed);\n    var result = reversed.join(\"\
    \");\n    console.log(\"Input: \" + x + \" converted to base \" + base + \" is:\
    \ \" + result);\n    return result;\n}\n", "    var x_ = x;\n    var result =\
    \ \"\";\n    while(x_>=1){\n        result += (x_%base);\n        x_ = Math.floor(x_/base);\n\
    \    }\n    return result.split(\"\").reverse().join(\"\");\n}\n", "    var y\
    \ = [];\n    //iterate until the last digit.\n    while(x > 0){\n        var rem\
    \ = x % base;\n        y.push(rem);\n        x = Math.floor(x / base);\n    }\n\
    \    return y.reverse().join(\"\");\n}\n", "  var res = \"\";\n  var x_num = string2number(x);\n\
    \  while(x_num > 0){\n    var x_digit = x_num % base;\n    x_num = (x_num - x_digit)\
    \ / base;\n    res = number2string(x_digit) + res;\n  }\n  return res;\n}\n",
  "\t\n\t//check input constraints\n\tif( base >= 10 || x < 0 || typeof x != \"number\"\
    \ || typeof base != \"number\")\n\t\treturn NaN;\n\t\n\tvar result = [];\n\twhile(x\
    \ > 0){\n\t\tresult.push(x % base);\n\t\tx = Math.floor(x / base);\n\t}\n\tresult.reverse();\n\
    \treturn result.join(\"\");\n}\n", "\tvar res = [];\n\tvar r = 0;\n\twhile(x >\
    \ 0){\n\t\tr = x % base;\n\t\tres.push(r);\n\t\tx = Math.floor(x / base);\n\t\
    }\n\treturn res.reverse().join(\"\");\n}\n\n", "    var tmp = [];\n    while(x\
    \ > 0){\n        var last_digit = x % base;\n        tmp.push(last_digit);\n \
    \       x = (x - last_digit) / base;\n    }\n    return tmp.reverse().join(\"\"\
    );\n}\n", "    var result = [];\n    var count = 0;\n    var target = Math.floor(x);\n\
    \    var remainder = target;\n    var digit;\n    var digit_str;\n    var position;\n\
    \    var results = [];\n    var i;\n    var j;\n    var first;\n    var second;\n\
    \    var divisor;\n    var quotient;\n    var modulo;\n    var token;\n    var\
    \ sign = '';\n    var fraction;\n    var fraction_part;\n    var fraction_digit;\n\
    \    var fraction_result = '';\n    var fraction_digit_str;\n    var fraction_count\
    \ = 0;\n    var fraction_digits = [];\n    var fraction_max_digits = 10;\n\n \
    \   if(target < 0){\n        target = Math.abs(target);\n        sign = '-';\n\
    \    }\n\n    while(target){\n        remainder = target % base;\n        digit\
    \ = (remainder < 10)? remainder: String.fromCharCode(remainder + 55);\n      \
    \  count++;\n        results.push(digit);\n        target = Math.floor(target\
    \ / base);\n    }\n\n    for(i = 0; i < count; i++){\n        result.push(results.pop());\n\
    \    }\n\n    for(i = 0; i < result.length; i++){\n        if(result[i] !== '0'){\n\
    \            position = i;\n            break;\n        }\n    }\n\n    for(i\
    \ = position; i < result.length; i++){\n        digit_str = result[i];\n     \
    \   result[i] = digit_str;\n    }\n\n    token = result.slice(position);\n   \
    \ token = token.join('');\n\n    if(x % 1){\n        fraction = x % 1;\n     \
    \   fraction_result = [];\n        fraction_part = fraction;\n        fraction_count\
    \ = 0;\n        while(fraction_part){\n            fraction_count++;\n       \
    \     if(fraction_count >= fraction_max_digits){\n                break;\n   \
    \         }\n            for(i = 0; i < fraction_max_digits; i++){\n         \
    \       for(j = 0; j < base; j", "\tvar y = '';\n\tvar r = x;\n\tvar q = 0;\n\t\
    \n\tif(x == 0){\n\t\treturn '0';\n\t}\n\t\n\twhile(r > 0){\n\t\tq = Math.floor(r\
    \ / base);\n\t\tr = r % base;\n\t\ty = r.toString() + y;\n\t\tr = q;\n\t}\n\t\n\
    \treturn y;\n}\n", "\tstr = x.toString(base);\n\treturn str;\n}\n", "    var x_str\
    \ = x.toString();\n    var i, j, len;\n    var result = \"\";\n    var digit;\n\
    \    len = x_str.length;\n    for(i = 0; i < len; i++){\n        digit = x_str[i];\n\
    \        for(j = 0; j < base; j++){\n            result += digit;\n        }\n\
    \    }\n    return result;\n}\n", "\tvar result = \"\";\n\tvar temp = parseInt(x);\n\
    \twhile(temp > 0){\n\t\tresult = temp % base + result;\n\t\ttemp = parseInt(temp\
    \ / base);\n\t}\n\treturn result;\n}\n", "\t//return the value if x is less than\
    \ base.\n\tif(x < base){\n\t\treturn '' + x;\n\t}\n\treturn change_base(Math.floor(x/base),\
    \ base) + '' + x%base;\n}\n", "  x = '' + x;\n  if(x.indexOf('.') > -1){\n   \
    \ var ret = [],\n        _x = x.split('.');\n    ret.push(convertDecTo(+_x[0],\
    \ base));\n    ret.push(convertDecTo(+('0.' + _x[1]), base));\n    return ret.join('.');\n\
    \  }else{\n    return convertDecTo(+x, base);\n  }\n}\n", "    var p = 0;\n  \
    \  var ret = \"\";\n    while(pow(base, p) <= x){\n        p++;\n    }\n    while(p--){\n\
    \        var c = parseInt(x / pow(base, p));\n        x -= c * pow(base, p);\n\
    \        ret += c;\n    }\n    return ret;\n}\n", "    var symbol = [\"0\", \"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"\
    C\", \"D\", \"E\", \"F\"];\n    var quotient = x;\n    var result = [];\n    while(quotient\
    \ > 0){\n        var remainder = quotient % base;\n        quotient = Math.floor(quotient\
    \ / base);\n        result.push(symbol[remainder]);\n    }\n    var result_string\
    \ = \"\";\n    for(var i = result.length - 1; i >= 0; i--){\n        result_string\
    \ += result[i];\n    }\n    return result_string;\n}\n", "    return x.toString(base);\n\
    }\n\n\n", "    return x.toString(base);\n}\n", "\tif(x < base){\n\t\treturn x.toString();\n\
    \t}\n\telse{\n\t\treturn change_base(Math.floor(x/base), base) + (x%base).toString();\n\
    \t}\n}\n", "    let result = 0;\n    let i = 0;\n    while(x != 0){\n        result\
    \ += (x % base) * Math.pow(10, i);\n        x = Math.floor(x / base);\n      \
    \  i++;\n    }\n    return result.toString();\n}\n", "\tvar digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n\tvar result = \"\";\n\tvar remainder = 0;\n\tvar q = x;\n\n\tif(base < 2 ||\
    \ base > 36)\n\t\treturn false;\n\n\tif(x == 0)\n\t\treturn \"0\";\n\n\twhile(q\
    \ != 0){\n\t\tremainder = q % base;\n\t\tq = Math.floor(q / base);\n\t\tresult\
    \ = digits[remainder] + result;\n\t}\n\n\treturn result;\n}\n", "  if(x === 0){\n\
    \    return '';\n  }\n  return change_base(Math.floor(x/base), base) + (x % base).toString();\n\
    }\n", "  var base = base || 10;\n  return Number(x).toString(base);\n}\n", " \
    \   var output_digits = []\n    var dec_num = x\n    var mod = 0\n    var quotient\
    \ = 0\n    while(dec_num > 0){\n        mod = dec_num % base\n        dec_num\
    \ = Math.floor(dec_num / base)\n        output_digits.push(mod)\n    }\n    //\
    \ reversing the array in place\n    for(i = 0; i < output_digits.length / 2; i++){\n\
    \        var temp = output_digits[i]\n        output_digits[i] = output_digits[output_digits.length\
    \ - 1 - i]\n        output_digits[output_digits.length - 1 - i] = temp\n    }\n\
    \    return output_digits.join('')\n}\n", "    let result = \"\";\n    let tmp\
    \ = x;\n    let numerals = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    while(tmp\
    \ > 0){\n        result = numerals[tmp % base] + result;\n        tmp = Math.floor(tmp\
    \ / base);\n    }\n    return result;\n}\n", "  var str = \"\";\n  for(i = 0;\
    \ i < x.length; i++){\n    var value = parseInt(x[i]);\n    var result = value.toString(base);\n\
    \    str += result;\n  }\n  return str;\n}\n", "    num = new Number(x);\n   \
    \ return num.toString(base);\n}\n", "    var x_string = x.toString(base);\n  \
    \  return x_string;\n}\n", "    var input_base = 10;\n    if(typeof x == \"string\"\
    )\n        input_base = x.length;\n    //console.log(\"input base: \" + input_base);\n\
    \    var remainder = x;\n    var output = \"\";\n    while(remainder != 0){\n\
    \        //console.log(\"remainder: \" + remainder);\n        output = remainder\
    \ % base + output;\n        remainder = Math.floor(remainder / base);\n    }\n\
    \    return output;\n}\n", "    var res = \"\";\n    if(x>base)\n        res =\
    \ change_base(Math.floor(x/base), base) + change_base(x%base, base);\n    else\n\
    \        res = x;\n    return res;\n}\n", "  var converted_num = new Number();\n\
    \  while(x != 0){\n    converted_num += x % base;\n    x = Math.floor(x / base);\n\
    \  }\n  return converted_num.toString();\n}\n", "    var answer = [];\n    var\
    \ q = parseInt(x);\n    while(q > 0){\n        var r = q % base;\n        answer.push(r);\n\
    \        q = parseInt(q / base);\n    }\n    var result = '';\n    for(var i =\
    \ answer.length - 1; i >= 0; i--){\n        result += answer[i];\n    }\n    return\
    \ result;\n}\n", "\tvar representation = [];\n\tvar remainder = 0;\n\twhile(x\
    \ > 0){\n\t\tremainder = x % base;\n\t\tx = Math.floor(x / base);\n\t\trepresentation.push(remainder);\n\
    \t}\n\trepresentation.reverse();\n\treturn representation.join(\"\");\n}\n", "\t\
    if(base > 36){\n\t\tbase = 36;\n\t}\n\tvar r = convert_to_base(x, base);\n\treturn\
    \ r;\n}\n", "    if(base < 2){\n        console.log(\"Error: Base should be greater\
    \ than 1.\");\n        return;\n    }\n    let result = \"\";\n    while(x >=\
    \ base){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    result = x + result;\n    return result;\n}", "  var answer = [];\n\
    \n  if(x==0){\n    return 0;\n  }\n\n  while(x>0){\n    answer.push(x%base);\n\
    \    x = Math.floor(x/base);\n  }\n\n  return answer.reverse().join(\"\");\n}\n",
  "\tvar b = 0;\n\tvar c = 1;\n\twhile(x/c>1){\n\t\tc*=base;\n\t\tb++;\n\t}\n\tvar\
    \ y = '';\n\twhile(b>=0){\n\t\tvar d = Math.floor(x/Math.pow(base,b));\n\t\ty\
    \ += d.toString();\n\t\tx = x-d*Math.pow(base,b);\n\t\tb--;\n\t}\n\treturn y;\n\
    }", "    var result = \"\";\n    while(x != 0){\n        result = x % base + result;\n\
    \        x = parseInt(x / base);\n    }\n    return result;\n}\n", "\tvar r=x,\
    \ r_list=[], base_num=0;\n\tvar r_list=[];\n\twhile(r>0){\n\t\tr_list.push(r%base);\n\
    \t\tr = Math.floor(r/base);\n\t}\n\tvar i;\n\tfor(i=0; i<r_list.length; i++){\n\
    \t\tbase_num += r_list[i]*Math.pow(10,i);\n\t}\n\treturn base_num;\n}\n", "  \
    \  var res = \"\";\n    var carry = 0;\n    var rem = 0;\n    var str = \"\";\n\
    \    while(x != 0){\n        rem = x % base;\n        x = (x - rem) / base;\n\
    \        str = rem + str;\n    }\n    return str;\n}\n", "    var isNegative =\
    \ false;\n    var result = \"\";\n    if(x < 0){\n        isNegative = true;\n\
    \        x = x * -1;\n    }\n    while(x > 0){\n        result = x % base + result;\n\
    \        x = Math.floor(x / base);\n    }\n    if(isNegative){\n        result\
    \ = \"-\" + result;\n    }\n    return result;\n}\n\n\n", "\tvar sum = 0;\n\t\
    var num = x;\n\tvar arr = [];\n\tvar i = 0;\n\twhile(num > 0){\n\t\tarr[i] = num\
    \ % base;\n\t\tnum = parseInt(num / base);\n\t\ti++;\n\t}\n\treturn arr.reverse().join(\"\
    \");\n}", "\tvar a = [],\n\t\ti = 0;\n\t\t\n\tif(base < 2 || base > 10){\n\t\t\
    console.log(\"base must be less than 11 and more than 1\");\n\t\treturn;\n\t}\n\
    \t\n\twhile(x !== 0){\n\t\ta[i] = x % base;\n\t\tx = parseInt(x / base);\n\t\t\
    i++;\n\t}\n\t\n\treturn a.reverse().join(\"\");\n}\n", "    var result = \"\"\
    ;\n    if(x == 0){\n        return 0;\n    }else{\n        while(x > 0){\n   \
    \         result = x % base + result;\n            x = Math.floor(x / base);\n\
    \        }\n        return result;\n    }\n}\n", "\tvar x = x.toString();\n\t\
    var x_dec = parseInt(x,10);\n\tvar x_base = '';\n\twhile(x_dec > 0){\n\t\tvar\
    \ remainder = x_dec % base;\n\t\tx_base = remainder.toString() + x_base;\n\t\t\
    x_dec = Math.floor(x_dec / base);\n\t}\n\treturn x_base;\n}\n", "    var result\
    \ = \"\";\n    var chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    while(x\
    \ > 0){\n        var r = x % base;\n        x = (x - r) / base;\n        result\
    \ = chars[r] + result;\n    }\n    return result;\n}\n", "  var base_string =\
    \ '0123456789abcdef';\n  var result = '';\n  var alpha_digit;\n  var remain;\n\
    \  while(x > 0){\n    remain = x % base;\n    alpha_digit = base_string[remain];\n\
    \    result = alpha_digit + result;\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n\nmodule.exports = change_base;", "    var t = \"\";\n    while(x>0){\n\
    \        t = String(x%base) + t;\n        x = Math.floor(x/base);\n    }\n   \
    \ return t;\n}\n", "  var n = base;\n  var result = \"\";\n  if(n == 10){\n  \
    \  return x.toString();\n  }\n  else{\n    while(x > 0){\n      var r = x % n;\n\
    \      if(r < 10){\n        result = r.toString() + result;\n      }\n      else{\n\
    \        result = String.fromCharCode(55 + r) + result;\n      }\n      x = Math.floor(x\
    \ / n);\n    }\n    return result;\n  }\n}\n", "\tvar string = \"\";\n\tvar x\
    \ = parseInt(x);\n\tdo{\n\t\tstring = string + parseInt(x % base);\n\t\tx = parseInt(x\
    \ / base);\n\t}while(x != 0);\n\treturn string;\n}\n", "  var a = [], result =\
    \ \"\";\n  if(base === 1){\n    for(var i = 0; i < x; i++){\n      result += \"\
    1\";\n    }\n    return result;\n  }\n  else{\n    while(x > 0){\n      a.push(x\
    \ % base);\n      x = Math.floor(x / base);\n    }\n    for(var i = a.length -\
    \ 1; i >= 0; i--){\n      result += a[i];\n    }\n    return result;\n  }\n}\n",
  "    if(base == 2){\n        return x.toString(2);\n    }\n    else if(base == 8){\n\
    \        return x.toString(8);\n    }\n    else if(base == 16){\n        return\
    \ x.toString(16);\n    }\n    else{\n        return \"error\";\n    }\n}\n", " \
    \   var result = \"\";\n    while(x > 0){\n        result = (x % base) + result;\n\
    \        x = Math.floor(x / base);\n    }\n    return result;\n}\n", "    var\
    \ arr = [];\n    while(x != 0){\n        arr.push(x % base);\n        x = Math.floor(x\
    \ / base);\n    }\n    return arr.reverse().join(\"\");\n}\n", "    var res =\
    \ [];\n    while(x>0){\n        res.push(x%base);\n        x = Math.floor(x/base);\n\
    \    }\n    return res.reverse().join(\"\");\n}\n", "    let result = \"\";\n\
    \    while(x){\n        result = x % base + result;\n        x = Math.floor(x\
    \ / base);\n    }\n    return result;\n}\n", "    var ans = \"\";\n    while(x\
    \ > 0){\n        var temp = x % base;\n        x = (x - temp) / base;\n      \
    \  ans = temp + ans;\n    }\n    return ans;\n}\n", "\treturn x.toString(base);\n\
    }\n", "    // (1)\n    let result = \"\";\n    let c_base = String(base);\n  \
    \  x = new Numeric(x);\n    // (2)\n    while(!x.eq(new Numeric(0))){\n      \
    \  let r = x.mod(new Numeric(base));\n        result = c_base[r] + result;\n \
    \       x = x.divide(new Numeric(base));\n    }\n    // (3)\n    return result;\n\
    }\n", "    var stack = [];\n\n    var base_dict = {\n        0: \"0\",\n     \
    \   1: \"1\",\n        2: \"2\",\n        3: \"3\",\n        4: \"4\",\n     \
    \   5: \"5\",\n        6: \"6\",\n        7: \"7\",\n        8: \"8\",\n     \
    \   9: \"9\",\n        10: \"A\",\n        11: \"B\",\n        12: \"C\",\n  \
    \      13: \"D\",\n        14: \"E\",\n        15: \"F\"\n    };\n\n    while(x\
    \ > 0){\n        stack.push(base_dict[x % base]);\n        x = parseInt(x / base);\n\
    \    }\n\n    var res = \"\";\n    while(stack.length > 0){\n        res += stack.pop();\n\
    \    }\n\n    return res;\n}\n", "    var N = new Decimal(x);\n    var result\
    \ = \"\";\n    var D = new Decimal(base);\n    var r = N.mod(D);\n    N = N.div(D);\n\
    \    result = r.toNumber() + result;\n    while(!N.eq(0)){\n        r = N.mod(D);\n\
    \        N = N.div(D);\n        result = r.toNumber() + result;\n    }\n    return\
    \ result;\n}\n", "    var n = parseInt(x);\n    var s = \"\";\n    while(n){\n\
    \        s = (n % base) + s;\n        n = Math.floor(n / base);\n    }\n    return\
    \ s;\n}\n\n", "    var result = \"\";\n    while(x >= base){\n        result =\
    \ x % base + result;\n        x = Math.floor(x / base);\n    }\n    result = x\
    \ + result;\n    return result;\n}\n", "    var ret = \"\";\n    while(x >= base){\n\
    \        var y = x % base;\n        ret = y + ret;\n        x = (x - y) / base;\n\
    \    }\n    return x + ret;\n}\n", "\tvar n = 0;\n\tvar d = Math.floor(x);\n\t\
    \n\tfor(var i = d; i > 0; i = Math.floor(i/base)){\n\t\tn = n*base + (i%base);\n\
    \t}\n\t\n\treturn convert_to_base(n, base);\n}\n", "    if(x < 0)\n        return\
    \ \"-\" + change_base(-x, base);\n    var str = \"\";\n    while(x >= base){\n\
    \        str = (x % base) + str;\n        x = (x - x % base) / base;\n    }\n\
    \    str = x + str;\n    return str;\n}\n", "  if(x<0){\n    if(base<2){\n   \
    \   throw new Error(\"base must be greater than 1\");\n    }\n    if(base==2){\n\
    \      return \"-\"+\"1\".repeat(Math.abs(x)+1);\n    }\n    let xx = Math.abs(x);\n\
    \    return \"-\"+change_base(xx, base);\n  }\n  if(x<base){\n    return x.toString();\n\
    \  }\n  let a = Math.floor(x/base);\n  let b = x%base;\n  return change_base(a,\
    \ base)+b.toString();\n}\n", "\tvar x_arr =  parseInt(x).toString().split(\"\"\
    ).reverse();\n\tvar result = [];\n\tvar carry = 0;\n\tvar i, j;\n\tfor(i = 0;\
    \ i < x_arr.length; i++){\n\t\tvar temp = (parseInt(x_arr[i]) + carry*10) / base;\n\
    \t\tresult.push(temp >= 1 ? temp : \"0\");\n\t\tcarry = (parseInt(x_arr[i]) +\
    \ carry*10) % base;\n\t}\n\tif(carry > 0){\n\t\tresult.push(carry);\n\t}\n\treturn\
    \ result.reverse().join(\"\");\n}\n", "    var result = \"\";\n    while(x>0){\n\
    \        result = (x%base).toString() + result;\n        x = Math.floor(x/base);\n\
    \    }\n    return result;\n}\n", "    var mod = x % base;\n    var new_x = (x\
    \ - mod) / base;\n    var new_str = mod.toString();\n    while(new_x > 0){\n \
    \       mod = new_x % base;\n        new_x = (new_x - mod) / base;\n        new_str\
    \ = mod.toString() + new_str;\n    }\n    return new_str;\n}\n", "    return (x).toString(base);\n\
    }\n", "\tvar s = \"\";\n\tdo{\n\t\ts = String(x % base) + s;\n\t\tx = Math.floor(x\
    \ / base);\n\t}while(x > 0);\n\treturn s;\n}\n", "    var digits = [\"0\", \"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"\
    C\", \"D\", \"E\", \"F\"];\n    var result = \"\";\n    var temp = 1;\n    while(x\
    \ > 0){\n        result = digits[x % base] + result;\n        x = Math.floor(x\
    \ / base);\n    }\n    return result;\n}", "\tvar digits = \"0123456789\"; //\
    \ available digits\n\tvar y = \"\";\n\tvar z = x;\n\tdo{\n\t\ty = digits[z % base]\
    \ + y;\n\t\tz = Math.floor(z / base);\n\t} while(z > 0);\n\treturn y;\n}\n", " \
    \   var n = x.toString();\n    var x;\n    for(var i = 0; i < n.length; i++){\n\
    \        x = n[i];\n        if(base == 2){\n            if(x == \"0\"){\n    \
    \            n = n.substring(0, i) + \"0000\" + n.substring(i+1);\n          \
    \  }else if(x == \"1\"){\n                n = n.substring(0, i) + \"0001\" + n.substring(i+1);\n\
    \            }else if(x == \"2\"){\n                n = n.substring(0, i) + \"\
    0010\" + n.substring(i+1);\n            }else if(x == \"3\"){\n              \
    \  n = n.substring(0, i) + \"0011\" + n.substring(i+1);\n            }else if(x\
    \ == \"4\"){\n                n = n.substring(0, i) + \"0100\" + n.substring(i+1);\n\
    \            }else if(x == \"5\"){\n                n = n.substring(0, i) + \"\
    0101\" + n.substring(i+1);\n            }else if(x == \"6\"){\n              \
    \  n = n.substring(0, i) + \"0110\" + n.substring(i+1);\n            }else if(x\
    \ == \"7\"){\n                n = n.substring(0, i) + \"0111\" + n.substring(i+1);\n\
    \            }else if(x == \"8\"){\n                n = n.substring(0, i) + \"\
    1000\" + n.substring(i+1);\n            }else if(x == \"9\"){\n              \
    \  n = n.substring(0, i) + \"1001\" + n.substring(i+1);\n            }\n     \
    \   }else if(base == 3){\n            if(x == \"0\"){\n                n = n.substring(0,\
    \ i) + \"000\" + n.substring(i+1);\n            }else if(x == \"1\"){\n      \
    \          n = n.substring(", "    let m = 1, str = \"\";\n    while(x > 0){\n\
    \        str = x % base + str;\n        x = Math.floor(x / base);\n    }\n   \
    \ return str;\n}\n", "\tvar str = \"\";\n\tvar digits = [];\n\tvar r;\n\twhile(x\
    \ > 0){\n\t\tr = x % base;\n\t\tdigits.push(r);\n\t\tx = Math.floor(x / base);\n\
    \t}\n\twhile(digits.length > 0){\n\t\tr = digits.pop();\n\t\tstr += r;\n\t}\n\t\
    return str;\n}\n", "    var num_arr = [];\n    var reminder = 0;\n    var quotient\
    \ = 0;\n    var answer = '';\n    var remainder_base;\n    var z = x;\n    for(var\
    \ i = 1; z > 0; i++){\n        reminder = z % base;\n        quotient = Math.floor(z\
    \ / base);\n        num_arr.push(reminder);\n        remainder_base = num_arr.length;\n\
    \        if(remainder_base < 6){\n            z = quotient;\n        }else{\n\
    \            if(quotient == 0){\n                break;\n            }else{\n\
    \                num_arr.push('.');\n                z = quotient;\n         \
    \   }\n        }\n    }\n    for(var i = num_arr.length - 1; i >= 0; i--){\n \
    \       answer += num_arr[i];\n    }\n    return answer;\n}", "\tx = parseInt(x);\n\
    \tbase = parseInt(base);\n\tvar res = \"\";\n\twhile(x > 0){\n\t\tres = x % base\
    \ + res;\n\t\tx = parseInt(x / base);\n\t}\n\treturn res;\n}\n", "\tvar result\
    \ = \"\";\n\tvar num_array = new Array();\n\tvar index = 0;\n\tvar temp = x;\n\
    \twhile(temp > 0){\n\t\tnum_array[index] = temp % base;\n\t\ttemp = Math.floor(temp\
    \ / base);\n\t\tindex++;\n\t}\n\tfor(var i = index - 1; i >= 0; i--){\n\t\tresult\
    \ += num_array[i];\n\t}\n\treturn result;\n}\n", "    x = parseInt(x);\n    base\
    \ = parseInt(base);\n    if(x >= base){\n        var result = change_base(Math.floor(x/base),\
    \ base) + change_base(x%base, base);\n    }else{\n        var result = \"\" +\
    \ x;\n    }\n    return result;\n}\n", "    let answer = \"\";\n    while(x >\
    \ 0){\n        let rem = x % base;\n        x = Math.floor(x / base);\n      \
    \  answer = rem + answer;\n    }\n    return answer;\n}", "\tx = Math.floor(x);\n\
    \tvar converted_string = \"\";\n\twhile(x != 0){\n\t\tvar remainder = x % base;\n\
    \t\tconverted_string = remainder + converted_string;\n\t\tx = Math.floor(x / base);\n\
    \t}\n\treturn converted_string;\n}\n", "    if(x === 0){\n        return '0';\n\
    \    }\n    let res = [];\n    while(x !== 0){\n        res.push( x % base);\n\
    \        x = parseInt(x / base);\n    }\n    return res.reverse().join('');\n\
    }\n", "    if(base < 2 || base > 9){\n        console.log(\"Error: base number\
    \ is out of range 2 to 9\");\n        return;\n    }\n    if(x == 0){\n      \
    \  return \"0\";\n    }\n    var tmp = Math.abs(x);\n    var str = \"\";\n   \
    \ while(tmp > 0){\n        str = (tmp % base) + str;\n        tmp = Math.floor(tmp\
    \ / base);\n    }\n    if(x < 0){\n        str = \"-\" + str;\n    }\n    return\
    \ str;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
