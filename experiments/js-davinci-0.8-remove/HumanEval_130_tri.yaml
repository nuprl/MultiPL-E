name: HumanEval_130_tri
language: js
prompt: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n// Tribonacci sequence is defined by the recurrence:\nfunction tri(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2.0, 8.0]);\n  assert.deepEqual(candidate(4),[1,\
  \ 3, 2.0, 8.0, 3.0]);\n  assert.deepEqual(candidate(5),[1, 3, 2.0, 8.0, 3.0, 15.0]);\n\
  \  assert.deepEqual(candidate(6),[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]);\n  assert.deepEqual(candidate(7),[1,\
  \ 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]);\n  assert.deepEqual(candidate(8),[1, 3, 2.0,\
  \ 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]);\n  assert.deepEqual(candidate(9),[1, 3, 2.0,\
  \ 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]);\n  assert.deepEqual(candidate(20),[1,\
  \ 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0,\
  \ 9.0, 99.0, 10.0, 120.0, 11.0]);\n  assert.deepEqual(candidate(0),[1]);\n  assert.deepEqual(candidate(1),[1,\
  \ 3]);\n}\n\ntest();"
completions: ["    if(n <= 1){\n      return 1;\n    }\n    if(n==2){\n      return\
    \ 2;\n    }\n    return tri(n-1) + tri(n-2) + tri(n-3);\n  }", "    let a = 1;\n\
    \    let b = 1;\n    let c = 1;\n    for(let i = 0; i<n; i++){\n        let temp\
    \ = c;\n        c = a + b + c;\n        a = b;\n        b = temp;\n    }\n   \
    \ return c;\n}\n", "  let result = 0;\n  let arr = [0,1,1];\n  if(n > 2){\n  \
    \  for(let i = 3; i <= n; i++){\n      arr.push(arr[i-1] + arr[i-2] + arr[i-3]);\n\
    \    }\n    result = arr[n];\n  } else {\n    result = arr[n];\n  }\n  return\
    \ result;\n}\n\ntri(4);//4\n\n\n", "  //base case\n  if(n === 0){\n    return\
    \ 0;\n  } else if(n === 1 || n === 2){\n    return 1;\n  }\n  //recursive case\n\
    \  return tri(n-1) + tri(n-2) + tri(n-3);\n}", "    if(n == 0)\n        return\
    \ 0;\n    if(n == 1 || n == 2)\n        return 1;\n    else\n        return tri(n-1)\
    \ + tri(n-2) + tri(n-3);\n}\n", "    let arr = [0, 1, 1];\n    for (let i = 3;\
    \ i <= n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n  \
    \  }\n    return arr[n];\n}\n", "    if(n <= 0) return 0;\n    if(n <= 2) return\
    \ 1;\n    return tri(n-1) + tri(n-2) + tri(n-3);\n}\n", "    let arr = [];\n \
    \   if(n === 0) {\n        return [];\n    }\n    if(n === 1) {\n        return\
    \ [1];\n    }\n    arr[0] = 1;\n    arr[1] = 1;\n    arr[2] = 2;\n    for(let\
    \ i = 3; i < n; i++) {\n        arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n   \
    \ }\n    return arr;\n}\n", "    if(n < 3){\n        return 1;\n    }\n    return\
    \ tri(n-1) + tri(n-2) + tri(n-3);\n}\n", "    if(n == 0){\n        return 0;\n\
    \    }else if(n == 1){\n        return 1;\n    }else if(n == 2){\n        return\
    \ 1;\n    }else if(n > 2){\n        return tri(n-1) + tri(n-2) + tri(n-3);\n \
    \   }\n}\n", "    if(n===0)return 0;\n    if(n===1||n===2)return 1;\n    return\
    \ tri(n-1)+tri(n-2)+tri(n-3);\n}", "    let a = 0, b = 0, c = 1, d = 0;\n    for(let\
    \ i = 1; i <= n; i++){\n      d = a + b + c;\n      a = b;\n      b = c;\n   \
    \   c = d;\n    }\n    return a;\n  }", "    let a = 0, b = 0, c = 1;\n    for(let\
    \ i = 0; i < n; i++){\n      let d = a + b + c;\n      a = b;\n      b = c;\n\
    \      c = d;\n    }\n    return c;\n  }", "    if(n === 0){\n        return 0;\n\
    \    } else if(n === 1 || n === 2){\n        return 1;\n    } else {\n       \
    \ return tri(n-1) + tri(n-2) + tri(n-3);\n    }\n}\n\n", "    if(n < 3){\n   \
    \     return n > 0 ? 1 : 0;\n    }\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3);\n}\n", "    if(n == 0){\n        return 0;\n    }\n    if(n == 1 || n\
    \ == 2){\n        return 1;\n    }\n    return tri(n-1) + tri(n-2) + tri(n-3);\n\
    }\n", "\tif(n === 0){\n\t\treturn 0;\n\t}\n\tif(n === 1){\n\t\treturn 1;\n\t}\n\
    \tif(n === 2){\n\t\treturn 1;\n\t}\n\treturn tri(n-1) + tri(n-2) + tri(n-3);\n\
    }\n", "    if(n < 1)\n        return 0;\n    if(n == 1 || n == 2)\n        return\
    \ 1;\n    return tri(n-1) + tri(n-2) + tri(n-3);\n}\n", "    let arr = [0, 1,\
    \ 1];\n    for (let i = 3; i <= n; i++) {\n        arr.push(arr[i - 1] + arr[i\
    \ - 2] + arr[i - 3]);\n    }\n    return arr[n];\n}", "    var a = 0, b = 0, c\
    \ = 1;\n    for(var i = 0; i < n; i++){\n        var d = a + b + c;\n        a\
    \ = b;\n        b = c;\n        c = d;\n    }\n    return c;\n}", "    if(n ===\
    \ 0){\n        return 0;\n    }\n    if(n === 1){\n        return 1;\n    }\n\
    \    if(n === 2){\n        return 1;\n    }\n    return tri(n-1) + tri(n-2) +\
    \ tri(n-3);\n}", "    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n\
    \ === 2) return 1;\n    return tri(n-1) + tri(n-2) + tri(n-3);\n}", "    if(n<=1){\n\
    \        return 1;\n    }\n    return tri(n-3)+tri(n-2)+tri(n-1);\n}", "  if(n\
    \ === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  return\
    \ tri(n-1) + tri(n-2) + tri(n-3);\n}", "\tif(n === 0) return 0;\n\tif(n === 1)\
    \ return 0;\n\tif(n === 2) return 1;\n\treturn tri(n-1) + tri(n-2) + tri(n-3);\n\
    }\n", "  if(n < 2) return 0;\n  if(n === 2) return 1;\n  var a = 0, b = 0, c =\
    \ 1;\n  var temp = a + b + c;\n  while(n > 2){\n    a = b;\n    b = c;\n    c\
    \ = temp;\n    temp = a + b + c;\n    n--;\n  }\n  return temp;\n}\n", "return\
    \ n<3?1:tri(n-1)+tri(n-2)+tri(n-3)\n}", "    if(n < 2) {\n        return n;\n\
    \    }\n    let trib = [0, 1, 1];\n    for(let i = 3; i <= n; i++) {\n       \
    \ trib[i] = trib[i - 1] + trib[i - 2] + trib[i - 3];\n    }\n    return trib[n];\n\
    }", "    if(n < 3){\n        return n === 0 ? 0 : 1;\n    }\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3);\n}\n", "  return n == 0 ? 0 : n == 1 ? 1 : n\
    \ == 2 ? 1 : tri(n - 1) + tri(n - 2) + tri(n - 3);\n}\n", "    if(n === 0){\n\
    \        return 0;\n    }\n    if(n === 1){\n        return 1;\n    }\n    if(n\
    \ === 2){\n        return 1;\n    }\n\n    return tri(n-1) + tri(n-2) + tri(n-3);\n\
    }", "    return (n < 2) ? n : tri(n - 1) + tri(n - 2) + tri(n - 3);\n}", "  let\
    \ arr = [0, 1, 1];\n  for (let i = 3; i <= n; i++) {\n    arr.push(arr[i - 1]\
    \ + arr[i - 2] + arr[i - 3]);\n  }\n  return arr[n];\n}", "    if(n === 0){\n\
    \        return 0;\n    } else if(n === 1 || n === 2){\n        return 1;\n  \
    \  }\n    return tri(n-1) + tri(n-2) + tri(n-3);\n}", "    if(n === 0){\n    \
    \    return 0;\n    }\n    if(n === 1){\n        return 1;\n    }\n    if(n ===\
    \ 2){\n        return 1;\n    }\n    else{\n        return tri(n-1) + tri(n-2)\
    \ + tri(n-3);\n    }\n}", "    let arr = [0, 1, 1];\n    for (let i = 3; i <=\
    \ n; i++) {\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n\
    \    return arr[n];\n}\n", "    if(n===0 || n===1){\n        return 0;\n    }\n\
    \    if(n===2){\n        return 1;\n    }\n    return tri(n-1)+tri(n-2)+tri(n-3);\n\
    }", "    return n < 2 ? n : tri(n - 1) + tri(n - 2) + tri(n - 3);\n}\n", "   \
    \ if(n<=2) return n===2?1:0;\n    return tri(n-1)+tri(n-2)+tri(n-3);\n}\n", " \
    \   let tribArr = [0,1,1];\n    for(let i = 3; i <= n; i++){\n        tribArr.push(tribArr[i-1]\
    \ + tribArr[i-2] + tribArr[i-3]);\n    }\n    return tribArr[n];\n}", "    return\
    \ n < 2 ? 1 : tri(n - 2) + tri(n - 1) + tri(n - 3);\n}", "\tif(n<=1){\n\t\treturn\
    \ n;\n\t}else if(n==2){\n\t\treturn 2;\n\t}else if(n>2){\n\t\treturn tri(n-1)+tri(n-2)+tri(n-3);\n\
    \t}\n}", "    if(n == 0) return 0;\n    if(n == 1) return 1;\n    if(n == 2) return\
    \ 1;\n    return tri(n-1) + tri(n-2) + tri(n-3);\n}", "    if(n === 0){\n    \
    \    return 0;\n    }\n    if(n === 1){\n        return 1;\n    }\n    if(n ===\
    \ 2){\n        return 1;\n    }\n    return tri(n-1) + tri(n-2) + tri(n-3);\n\
    }\n", "    var a = [];\n    a[0] = 1;\n    a[1] = 1;\n    a[2] = 2;\n    for(var\
    \ i = 3; i < n; i++){\n        a[i] = a[i-1] + a[i-2] + a[i-3];\n    }\n    return\
    \ a[n-1];\n}", "    // function to return the nth value of the Tribonacci sequence\n\
    }\n", "    return n == 1 || n == 2 ? 1 : tri(n - 1) + tri(n - 2) + tri(n - 3);\n\
    }\n", "    let arr = [0, 1, 1]\n    for(let i = 3; i <= n; i++){\n        arr.push(arr[i-1]\
    \ + arr[i-2] + arr[i-3])\n    }\n    return arr[n]\n}\n", "    if(n === 0){return\
    \ 0;}\n    if(n === 1){return 0;}\n    if(n === 2){return 1;}\n    return tri(n-1)\
    \ + tri(n-2) + tri(n-3);\n}\n", "    if(n == 0){\n        return 0;\n    }\n \
    \   if(n == 1 || n == 2){\n        return 1;\n    }\n    return tri(n-1) + tri(n-2)\
    \ + tri(n-3);\n}\n", "    if(n<2){\n        return 0;\n    }\n    if(n<3){\n \
    \       return 1;\n    }\n    return tri(n-1)+tri(n-2)+tri(n-3);\n}", "    if(n===0)\
    \ return 0;\n    if(n===1) return 1;\n    if(n===2) return 1;\n    return tri(n-1)+tri(n-2)+tri(n-3);\n\
    }", "    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return\
    \ 1;\n    }\n    if(n === 2){\n        return 1;\n    }\n    if(n > 2){\n    \
    \    return tri(n-1) + tri(n-2) + tri(n-3);\n    }\n}", "  return n < 3 ? 1 :\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3);\n}\n", "  if(n < 3) return [0,1,1][n];\n\
    \  return tri(n-1) + tri(n-2) + tri(n-3);\n}\n", "    //(1) When n = 0, return\
    \ 0\n    if(n === 0) return 0;\n    //(2) When n = 1, return 1\n    if(n === 1)\
    \ return 1;\n    //(3) When n = 2, return 1\n    if(n === 2) return 1;\n    //(4)\
    \ Otherwise, return tri(n - 1) + tri(n - 2) + tri(n - 3)\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 3);\n}", "    if(n === 0){\n        return 0;\n    }\n\
    \    if(n === 1){\n        return 1;\n    }\n    if(n === 2){\n        return\
    \ 1;\n    }\n    if(n > 2){\n        return tri(n-1) + tri(n-2) + tri(n-3);\n\
    \    }\n}\n", "    var array=[]\n    for(let i=0;i<=n;i++){\n        if(i==0){\n\
    \            array.push(0)\n        }\n        else if(i==1){\n            array.push(1)\n\
    \        }\n        else if(i==2){\n            array.push(1)\n        }\n   \
    \     else{\n            array.push(array[i-1]+array[i-2]+array[i-3])\n      \
    \  }\n    }\n    return array[n]\n}\n", "    if(n == 0) return 0;\n    if(n ==\
    \ 1) return 1;\n    if(n == 2) return 1;\n    if(n == 3) return 2;\n    return\
    \ tri(n-1) + tri(n-2) + tri(n-3);\n}", "    let fib = [0, 1, 1];\n    if(n ===\
    \ 0) {\n        return 0;\n    }\n    for(let i = 3; i <= n; i++) {\n        fib[i]\
    \ = fib[i - 1] + fib[i - 2] + fib[i - 3];\n    }\n    return fib[n];\n}", "  \
    \  if(n <= 1){\n        return n;\n    }\n    let a = 0;\n    let b = 1;\n   \
    \ let c = 1;\n    let i = 3;\n    while(i <= n){\n        let temp = a;\n    \
    \    a = b;\n        b = c;\n        c = temp + a + b;\n        i++;\n    }\n\
    \    return c;\n}\n", "  let arr = [0,0,1];\n  for(let i = 2; i < n; i++){\n \
    \   arr.push(arr[i-1] + arr[i-2] + arr[i-3]);\n  }\n  return arr[n];\n}\n", " \
    \   if(n===0){\n        return 0;\n    }else if(n===1){\n        return 1;\n \
    \   }else if(n===2){\n        return 1;\n    }else{\n        return tri(n-1)+tri(n-2)+tri(n-3);\n\
    \    }\n}\n", "    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n\
    \ === 2) return 1;\n    return tri(n-1) + tri(n-2) + tri(n-3);\n}\n", "  if(n<3)\
    \ return n?1:0;\n  return tri(n-1)+tri(n-2)+tri(n-3);\n}", "  if(n===0)return\
    \ 0;\n  if(n===1)return 0;\n  if(n===2)return 1;\n  return tri(n-1)+tri(n-2)+tri(n-3);\n\
    }\n", "\tif(n<=2){\n\t\treturn 1;\n\t}else{\n\t\treturn tri(n-1)+tri(n-2)+tri(n-3);\n\
    \t}\n}", "    if(n===0){\n        return 0;\n    }\n    if(n===1){\n        return\
    \ 1;\n    }\n    if(n===2){\n        return 1;\n    }\n    return tri(n-1)+tri(n-2)+tri(n-3);\n\
    }", "    if(n === 0) return 0;\n    if(n === 1) return 0;\n    if(n === 2) return\
    \ 1;\n    return tri(n-1) + tri(n-2) + tri(n-3);\n}\n", "\treturn n < 3 ? n :\
    \ tri(n-1) + tri(n-2) + tri(n-3);\n}\n", "    let fib = [0,1,1]\n    if(n < 4){\n\
    \        return fib[n-1]\n    }else{\n        let index = 3\n        while(index\
    \ < n){\n            fib.push(fib[index-1] + fib[index-2] + fib[index-3])\n  \
    \          index++\n        }\n        return fib[fib.length-1]\n    }\n}\n",
  "  if(n === 0) return 0;\n  if(n === 1) return 1;\n  if(n === 2) return 1;\n  else\
    \ return tri(n-1) + tri(n-2) + tri(n-3);\n}", "  var a = 0, b = 0, c = 1;\n  if(n\
    \ == 0){\n    return 0;\n  }else if(n == 1){\n    return 1;\n  }else{\n    for(var\
    \ i = 3; i <= n; i++){\n      c = a + b + c;\n      a = b;\n      b = c;\n   \
    \ }\n    return c;\n  }\n}\n", "  \n  let a = 1, b = 1, c = 1;\n  for (let i =\
    \ 0; i < n - 3; i++) {\n    let d = a + b + c;\n    a = b;\n    b = c;\n    c\
    \ = d;\n  }\n  return c;\n}\n", "    if(n <= 2) return 1;\n    if(n < 3) return\
    \ 2;\n    let x = 1;\n    let y = 1;\n    let z = 2;\n    let newNum = 0;\n  \
    \  for(let i = 3; i <= n; i++){\n        newNum = x + y + z;\n        x = y;\n\
    \        y = z;\n        z = newNum;\n    }\n    return newNum;\n}", "    var\
    \ i=1, num,num1=0,num2=1,num3=1;\n    while(i<n){\n        num=num1+num2+num3;\n\
    \        num1=num2;\n        num2=num3;\n        num3=num;\n        i++;\n   \
    \ }\n    return num;\n}", "  var result = [0, 1, 1];\n  if (n === 0) {\n    return\
    \ 0;\n  } else if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return\
    \ 1;\n  } else {\n    for (var i = 3; i <= n; i++) {\n      result.push(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n    }\n    return result[n];\n  }\n\
    }\n", "\tlet a = 1;\n\tlet b = 1;\n\tlet c = 1;\n\tlet d = 0;\n\tfor(let i = 1;\
    \ i <= n; i++){\n\t\td = a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = d;\n\t}\n\
    \treturn d;\n}", "    return n < 3 ? n === 0 ? 0 : 1 : tri(n - 1) + tri(n - 2)\
    \ + tri(n - 3);\n}\n", "    if(n == 0){\n        return 0;\n    }else if(n ==\
    \ 1){\n        return 1;\n    }else if(n == 2){\n        return 1;\n    }else{\n\
    \        return tri(n-1) + tri(n-2) + tri(n-3);\n    }\n}\n", "    if(n<=0) return\
    \ 0;\n    if(n==1) return 1;\n    if(n==2) return 1;\n    return tri(n-1)+tri(n-2)+tri(n-3);\n\
    }", "    if(n === 0){\n        return 0;\n    }\n    if(n === 1){\n        return\
    \ 1;\n    }\n    if(n === 2){\n        return 1;\n    }\n    return tri(n-1) +\
    \ tri(n-2) + tri(n-3);\n}\n", "\tvar t = [0,0,1]\n\tfunction num(n,t){\n\t\tif(n<=2){\n\
    \t\t\treturn 0\n\t\t}else if(n===3){\n\t\t\treturn 1\n\t\t}else{\n\t\t\tif(t[n-1]==undefined){\n\
    \t\t\t\tt[n-1] = num(n-1,t)+num(n-2,t)+num(n-3,t)\n\t\t\t}\n\t\t\treturn t[n-1]\n\
    \t\t}\n\t}\n\treturn num(n,t)\n}\n", "  let a = 0;\n  let b = 1;\n  let c = 1;\n\
    \  let d = a + b + c;\n  for(let i = 4; i <= n; i++){\n    a = b;\n    b = c;\n\
    \    c = d;\n    d = a + b + c;\n  }\n  return d;\n}", "    //Base case\n    if(n\
    \ === 0) {\n        return 0;\n    }\n    if(n === 1) {\n        return 1;\n \
    \   }\n    if(n === 2) {\n        return 1;\n    }\n    //Recursive case\n   \
    \ return tri(n-1) + tri(n-2) + tri(n-3);\n}\n", "  if(n<=1){\n    return n\n \
    \ }else if(n==2){\n    return 1\n  }else if(n>2){\n    return tri(n-1)+tri(n-2)+tri(n-3)\n\
    \  }\n}", "    let a = 0;\n    let b = 1;\n    let c = 1;\n    let d = 0;\n  \
    \  for(let i = 0; i < n-1; i++){\n        d = a + b + c;\n        a = b;\n   \
    \     b = c;\n        c = d;\n    }\n    return a;\n}\n", "    if(n === 0) return\
    \ 0;\n    if(n === 1) return 0;\n    if(n === 2) return 1;\n    return tri(n-1)\
    \ + tri(n-2) + tri(n-3);\n}\n", "  return n < 2 ? n : tri(n - 1) + tri(n - 2)\
    \ + tri(n - 3);\n}\n", "    if(n<2){\n        return 1;\n    }else if(n==2){\n\
    \        return 2;\n    }else{\n        return tri(n-1)+tri(n-2)+tri(n-3);\n \
    \   }\n}\n", "    if(n == 0){return [0]}\n    if(n == 1){return [0, 1]}\n    if(n\
    \ == 2){return [0, 1, 1]}\n    let memo = [0, 1, 1]\n    let count = 3\n    while(count\
    \ <= n){\n        let next = memo[memo.length - 1] + memo[memo.length - 2] + memo[memo.length\
    \ - 3]\n        memo.push(next)\n        count++\n    }\n    return memo\n}",
  "    let a = 0, b = 0, c = 1;\n    let arr = [a, b, c];\n    if(n <= 0) return 0;\n\
    \    if(n == 1) return 1;\n    for(let i = 3; i <= n; i++){\n        a = b;\n\
    \        b = c;\n        c = a + b + c;\n        arr.push(c);\n    }\n    return\
    \ arr[n];\n}\n", "    if(n == 0){\n        return 0;\n    }\n    if(n == 1 ||\
    \ n == 2){\n        return 1;\n    }\n    return tri(n-1) + tri(n-2) + tri(n-3);\n\
    }\n", "\tif(n==0) return 0;\n\tif(n==1) return 1;\n\tif(n==2) return 1;\n\tif(n>2)\
    \ return tri(n-1)+tri(n-2)+tri(n-3);\n}", "  if(n === 0) return 0;\n  if(n ===\
    \ 1) return 1;\n  if(n === 2) return 1;\n  return tri(n-1) + tri(n-2) + tri(n-3);\n\
    }\n", "    if(n <= 2) return 1;\n    return tri(n-1) + tri(n-2) + tri(n-3);\n}",
  "    var trib = [0,1,1];\n    if(n==0){\n        return 0;\n    }\n    if(n == 1){\n\
    \        return 1;\n    }\n    if(n == 2){\n        return 1;\n    }\n    if(n>2){\n\
    \        var index = 2;\n        while(index<n){\n            trib[index+1] =\
    \ trib[index] + trib[index-1] + trib[index-2];\n            index++;\n       \
    \ }\n    }\n    return trib[index];\n}", "  var a = 0;\n  var b = 1;\n  var c\
    \ = 1;\n  var d = a + b + c;\n  for(var i = 3; i <= n; i++){\n    d = a + b +\
    \ c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\n", "    if(n<2){\n\
    \        return n;\n    }else if(n===2){\n        return 1;\n    }else if(n>2){\n\
    \        return tri(n-1)+tri(n-2)+tri(n-3);\n    }\n}", "    if(n===0){\n    \
    \    return 0;\n    }\n    if(n===1){\n        return 1;\n    }\n    if(n===2){\n\
    \        return 1;\n    }\n    if(n>2){\n        return tri(n-1)+tri(n-2)+tri(n-3);\n\
    \    }\n}", "    var a = [0,1,1];\n    for(var i = 3; i <= n; i++){\n        a[i]\
    \ = a[i-1] + a[i-2] + a[i-3];\n    }\n    return a[n];\n}\n", "    let next =\
    \ 0;\n    if(n == 0){\n        return 0;\n    }else if(n == 1){\n        return\
    \ 1;\n    }else if(n == 2){\n        return 1;\n    }else{\n        next = tri(n-1)\
    \ + tri(n-2) + tri(n-3);\n    }\n    return next;\n}\n", "    let arr = [];\n\
    \    for(let i = 0; i <= n; i++){\n        if(i == 0 || i == 1){\n           \
    \ arr.push(1);\n        }else if(i == 2){\n            arr.push(2);\n        }else{\n\
    \            arr.push(arr[i-1] + arr[i-2] + arr[i-3]);\n        }\n    }\n   \
    \ return arr[n];\n}", "    if(n === 0) return 0;\n    if(n === 1) return 0;\n\
    \    if(n === 2) return 1;\n    return tri(n-1) + tri(n-2) + tri(n-3);\n}\n",
  "  var arr =[0,0,1]\n  for(var i = 0; i<n; i++){\n    arr.push(arr[i]+arr[i+1]+arr[i+2])\n\
    \  }\n  return arr[n]\n}\n", "    if(n === 0) return 0;\n    if(n === 1) return\
    \ 0;\n    if(n === 2) return 1;\n    let a = 0;\n    let b = 0;\n    let c = 1;\n\
    \    let sum = 0;\n    for(let i = 3; i <= n; i++){\n        sum = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = sum;\n    }\n    return sum;\n}",
  "  if(n === 0) return 0;\n  if(n <= 2) return 1;\n  return tri(n-1) + tri(n-2) +\
    \ tri(n-3);\n}", "    if(n < 3){\n      return n === 0 ? 0 : 1;\n    }\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3);\n  }\n", "    let a = 0, b = 0, c = 1;\n\
    \    for(let i = 0; i < n; i++){\n      let sum = a + b + c;\n      a = b;\n \
    \     b = c;\n      c = sum;\n    }\n    return a;\n  }\n  console.log(tri(6));\n\
    \  //  0, 0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927, 1705, 3136, 5768,\
    \ 10609, 19513, 35890, 66012, 121415, 223317, 410744, 755476, 1389537, 2555757,\
    \ 4700770, 8646064, 15902591, 29249425, 53798080, 98950096, 181997601, 334745777,\
    \ 615693474, 1132436852, 2082876103,  \n  //  You will given input n, return the\
    \ n-th Tribonacci number.\n  \n  \n  \n  //  Given a list of words, find all of\
    \ the longest words.\n  //  Example:\n  //  Input: ['a', 'banana', 'app', 'appl',\
    \ 'ap', 'apply', 'apple']\n  //  Output: ['banana', 'appl', 'apply', 'apple']\n\
    \  function allLongestStrings(inputArray) {\n    let result = [];\n    let max\
    \ = Math.max(...inputArray.map(a => a.length));\n    for(let i = 0; i < inputArray.length;\
    \ i++){\n      if(inputArray[i].length === max){\n        result.push(inputArray[i]);\n\
    \      }\n    }\n    return result;\n  }\n  console.log(allLongestStrings(['a',\
    \ 'banana', 'app', 'appl', 'ap', 'apply', 'apple']));\n  \n  \n  \n  //  Given\
    \ an array of integers a, return a new array b using the following guidelines:\n\
    \  //  For each index i in b, the value of bi is the index of the aj nearest to\
    \ ai and is also \n  //  greater than a", "    if(n === 0) return 0;\n    if(n\
    \ === 1) return 0;\n    if(n === 2) return 1;\n    return tri(n-1) + tri(n-2)\
    \ + tri(n-3);\n  }\n\n  //Write a function which will output the nth number of\
    \ Tribonacci sequence.\n", "\tif(n === 0){\n\t\treturn 0;\n\t} else if(n === 1){\n\
    \t\treturn 1;\n\t} else if(n === 2){\n\t\treturn 1;\n\t} else{\n\t\treturn tri(n-1)\
    \ + tri(n-2) + tri(n-3);\n\t}\n}", "let a=0,b=0,c=1,arr=[];\nfor(let i=0;i<n;i++){\n\
    \    arr.push(a);\n    let d=a+b+c;\n    a=b;\n    b=c;\n    c=d;\n}\nreturn arr;\n\
    }", "    if(n === 0){\n        return 0;\n    } else if(n === 1){\n        return\
    \ 1;\n    } else if(n === 2){\n        return 1;\n    } else {\n        return\
    \ tri(n-1) + tri(n-2) + tri(n-3);\n    }\n}\n\n", "    if(n<2){\n        return\
    \ 1;\n    }else if(n===2){\n        return 2;\n    }else{\n        return tri(n-1)+tri(n-2)+tri(n-3);\n\
    \    }\n}\n", "    if(n == 0) return 0;\n    if(n == 1) return 1;\n    if(n ==\
    \ 2) return 1;\n    return tri(n-1) + tri(n-2) + tri(n-3);\n}", "  let last3 =\
    \ [0, 0, 1];\n  let out = last3[2];\n  for(let i = 0; i < n; i++){\n    out =\
    \ last3[0] + last3[1] + last3[2];\n    last3[0] = last3[1];\n    last3[1] = last3[2];\n\
    \    last3[2] = out;\n  }\n  return out;\n}\n", "  let arr = [0, 1, 1]\n  if(n\
    \ < 3) return arr[n]\n  for(let i = 3; i <= n; i++){\n    arr[i] = arr[i - 1]\
    \ + arr[i - 2] + arr[i - 3]\n  }\n  return arr[n]\n}", "  if(n <= 0) return 0;\n\
    \  if(n === 1) return 1;\n  if(n === 2) return 1;\n  return tri(n-1) + tri(n-2)\
    \ + tri(n-3);\n}\n", "  if(n === 0) return 0;\n  if(n === 1) return 1;\n  if(n\
    \ === 2) return 1;\n  return tri(n-1) + tri(n-2) + tri(n-3);\n}", "    var trib\
    \ = [0,1,1];\n    for(var i = 3; i <= n; i++){\n        trib[i] = trib[i-1] +\
    \ trib[i-2] + trib[i-3];\n    }\n    return trib[n];\n}\n", "    let arr = [0,\
    \ 1, 1];\n    for (var i = 3; i <= n; i++) {\n        arr.push(arr[i-1] + arr[i-2]\
    \ + arr[i-3]);\n    }\n    return arr[n];\n}\n", "  var result = [];\n  var first\
    \ = 0;\n  var second = 1;\n  var third = 2;\n  result.push(first);\n  result.push(second);\n\
    \  result.push(third);\n  for(var i = 3; i < n; i++){\n    result.push(result[i-1]\
    \ + result[i-2] + result[i-3]);\n  }\n  return result;\n}\n", "  return n<3 ?\
    \ n : tri(n-1)+tri(n-2)+tri(n-3);\n}", "\tlet arr = [0,1,1]\n\tfor(let i = 3;\
    \ i <= n; i++){\n\t\tarr.push(arr[i-1] + arr[i-2] + arr[i-3])\n\t}\n\treturn arr[n]\n\
    }\n", "    if(n == 0){\n        return 0;\n    }\n    if(n == 1 || n == 2){\n\
    \        return 1;\n    }\n    return tri(n-1) + tri(n-2) + tri(n-3);\n}", " \
    \   \n    return n < 2 ? n : tri(n-1) + tri(n-2) + tri(n-3);\n}", "   if(n < 3)\
    \ return 1;\n   return tri(n-1) + tri(n-2) + tri(n-3);\n}", "    if(n === 0){\n\
    \        return 0;\n    }\n    if(n === 1){\n        return 1;\n    }\n    if(n\
    \ === 2){\n        return 1;\n    }\n    return tri(n-1) + tri(n-2) + tri(n-3);\n\
    }", "    if(n <= 2) return 1;\n    else return tri(n-1) + tri(n-2) + tri(n-3);\n\
    }\n", "  let arr = [0,1,1];\n  for(let i = 0; i < n; i++){\n    arr.push(arr[i]\
    \ + arr[i+1] + arr[i+2]);\n  }\n  return arr[n];\n}", "  let x = 0, y = 1, z =\
    \ 1;\n  if(n === 0) return 0;\n  if(n === 1 || n === 2) return 1;\n  for(let i\
    \ = 2; i < n; i++){\n    let tmp = x + y + z;\n    x = y;\n    y = z;\n    z =\
    \ tmp;\n  }\n  return z;\n}\n", "    if(n === 0){\n        return 0;\n    }\n\
    \    if(n === 1){\n        return 1;\n    }\n    if(n === 2){\n        return\
    \ 1;\n    }\n    return tri(n-1) + tri(n-2) + tri(n-3);\n}\n", "    if(n == 0)\
    \ return 0;\n    if(n == 1) return 1;\n    if(n == 2) return 1;\n    if(n == 3)\
    \ return 2;\n    return tri(n-1) + tri(n-2) + tri(n-3);\n}\n", "    var trib =\
    \ [0,1,1];\n    for(var i = 3; i <= n; i++){\n      trib[i] = trib[i-1] + trib[i-2]\
    \ + trib[i-3];\n    }\n    return trib[n];\n  }\n", "    if(n < 2) return 0;\n\
    \    if(n < 3) return 1;\n    var a = 0, b = 1, c = 1;\n    var d = a + b + c;\n\
    \    for(var i = 3; i < n; i++){\n        a = b;\n        b = c;\n        c =\
    \ d;\n        d = a + b + c;\n    }\n    return d;\n}\n", "    var arr = [0,1,1];\n\
    \    for(var i = 0; i < n; i++){\n        arr.push(arr[i] + arr[i+1] + arr[i+2]);\n\
    \    }\n    return arr[n-1];\n}\n", "    let tribonacci = (signature, n) => {\n\
    \        for (var i = 0; i < n-3; i++) { // iterate n times\n            signature.push(signature[i]\
    \ + signature[i+1] + signature[i+2]); // add last 3 array items and push to trib\n\
    \        }\n        return signature.slice(0, n); //return trib - length of n\n\
    \    }\n    return tribonacci([1,1,1],n);\n}", "    if(n == 0) return 0;\n   \
    \ if(n == 1) return 1;\n    if(n == 2) return 1;\n    return tri(n-1) + tri(n-2)\
    \ + tri(n-3);\n}\n", "  if(n<2) return n;\n  if(n===2) return 1;\n  return tri(n-1)+tri(n-2)+tri(n-3);\n\
    }", "    let m = [0,1,1];\n    for(let i = 3; i <= n; i++){\n        m[i] = m[i-1]\
    \ + m[i-2] + m[i-3];\n    }\n    return m[n];\n}", "    if(n < 2) return 1;\n\
    \    if(n == 2) return 2;\n    let arr = [1, 1, 2];\n    for(let i = 3; i <= n;\
    \ i++){\n        arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    return\
    \ arr[n];\n}\n", "  return n<=1 ? 1 : tri(n-1) + tri(n-2) + tri(n-3);\n}\n", " \
    \   if(n == 0) {\n        return 0;\n    }\n    if(n == 1 || n == 2) {\n     \
    \   return 1;\n    }\n    return tri(n-1) + tri(n-2) + tri(n-3);\n}\n", "    if(n\
    \ <= 2) {\n        return 0;\n    }\n    if(n == 3) {\n        return 1;\n   \
    \ }\n    return tri(n-1) + tri(n-2) + tri(n-3);\n}\n", "   // fibonacci\n   if(n===0)\
    \ return 0;\n   if(n===1) return 1;\n   if(n===2) return 1;\n   return tri(n-1)\
    \ + tri(n-2) + tri(n-3);\n}", "  if(n <= 1) return 1;\n  return tri(n-1) + tri(n-2)\
    \ + tri(n-3);\n}\n", "    if(n===0) return 0;\n    if(n===1) return 1;\n    if(n===2)\
    \ return 1;\n    return tri(n-1)+tri(n-2)+tri(n-3);\n}", "    if(n === 0){\n \
    \       return 0;\n    }\n    if(n === 1){\n        return 1;\n    }\n    if(n\
    \ === 2){\n        return 1;\n    }\n    if(n > 2){\n        return tri(n-1) +\
    \ tri(n-2) + tri(n-3);\n    }\n}\n", "  if(n === 0){\n    return 0;\n  }\n  if(n\
    \ === 1){\n    return 1;\n  }\n  if(n === 2){\n    return 1;\n  }\n  if(n > 2){\n\
    \    return tri(n-1) + tri(n-2) + tri(n-3);\n  }\n}\n", "    let result = [];\n\
    \    if(n == 0)\n        return result;\n    if(n == 1)\n        return [1];\n\
    \    if(n == 2)\n        return [1,1];\n    let a = 1, b = 1, c = 1;\n    for(let\
    \ i = 3; i <= n; i++){\n        let d = a + b + c;\n        result.push(d);\n\
    \        a = b;\n        b = c;\n        c = d;\n    }\n    return [1,1,1].concat(result);\n\
    }", "  var fib = [0,1,1];\n  for(var i = 2; i < n; i++){\n    fib.push(fib[i]\
    \ + fib[i-1] + fib[i-2]);\n  }\n  return fib[n];\n}\n", "    if(n === 0){\n  \
    \      return [0];\n    }\n    if(n === 1){\n        return [0,1];\n    }\n  \
    \  if(n === 2){\n        return [0,1,1];\n    }\n    let arr = tri(n-1);\n   \
    \ arr.push(arr[arr.length-1] + arr[arr.length-2] + arr[arr.length-3]);\n    return\
    \ arr;\n}", "    if(n === 0) return 0;\n    if(n <= 2) return 1;\n    return tri(n-1)\
    \ + tri(n-2) + tri(n-3);\n}\n", "  let start = [0, 1, 1];\n  if (n === 0) return\
    \ 0;\n  for (let i = 3; i <= n; i++) {\n    start.push(start[i - 1] + start[i\
    \ - 2] + start[i - 3]);\n  }\n  return start[n];\n}", "    if(n===0){\n      \
    \  return 0;\n    }\n    if(n===1){\n        return 1;\n    }\n    if(n===2){\n\
    \        return 1;\n    }\n    return tri(n-1)+tri(n-2)+tri(n-3);\n}", "    if(n\
    \ === 0){\n        return 0;\n    }\n    if(n === 1){\n        return 1;\n   \
    \ }\n    if(n === 2){\n        return 1;\n    }\n    return tri(n-1) + tri(n-2)\
    \ + tri(n-3);\n}", "  if(n <= 0) { return 0;}\n  if(n <= 2) { return 1;}\n  return\
    \ tri(n-1) + tri(n-2) + tri(n-3);\n}", "    if(n===0){\n        return [0]\n \
    \   }\n    if(n===1){\n        return [0,1]\n    }\n    if(n===2){\n        return\
    \ [0,1,1]\n    }\n    const fib = [0,1,1]\n    for(let i=2; i<n; i++){\n     \
    \   fib.push(fib[i]+fib[i-1]+fib[i-2])\n    }\n    return fib\n}\n", "  let values\
    \ = [0,0,1];\n  for(let i = 3; i <= n; i++){\n    values[i] = values[i-1] + values[i-2]\
    \ + values[i-3];\n  }\n  return values[n];\n}", "    if(n <= 2) return 1;\n  \
    \  else return tri(n-1) + tri(n-2) + tri(n-3);\n}", "    if(n == 0) return 0;\n\
    \    if(n == 1) return 1;\n    if(n == 2) return 1;\n    return tri(n-1) + tri(n-2)\
    \ + tri(n-3);\n}\n\n", "    if(n === 0){\n        return 0;\n    }\n    if(n <=\
    \ 2){\n        return 1;\n    }\n    return tri(n-1) + tri(n-2) + tri(n-3);\n\
    }\n", "  let triSeq = []\n  let a = 0\n  let b = 0\n  let c = 1\n  if(n === 0){\n\
    \    return []\n  }\n  else if(n === 1){\n    return [1]\n  }\n  else if(n ===\
    \ 2){\n    return [1,1]\n  }\n  else{\n    for(let i = 0; i < n; i++){\n     \
    \ if(i === 0){\n        triSeq.push(1)\n      }\n      else if(i === 1){\n   \
    \     triSeq.push(1)\n      }\n      else{\n        let t = a + b + c\n      \
    \  triSeq.push(t)\n        a = b\n        b = c\n        c = t\n      }\n    }\n\
    \  }\n  return triSeq\n}", "    if(n === 0) return 0;\n    if(n === 1) return\
    \ 1;\n    if(n === 2) return 1;\n    if(n > 2) return tri(n-1) + tri(n-2) + tri(n-3);\n\
    \  }\n", "    let trib = [0,1,1];\n    for(let i = 0; i < n; i++){\n        trib.push(trib[i]+trib[i+1]+trib[i+2]);\n\
    \    }\n    return trib[n];\n}\n", "    if(n == 0){return 0;}\n    if(n == 1){return\
    \ 0;}\n    if(n == 2){return 1;}\n    if(n > 2){return tri(n-1) + tri(n-2) + tri(n-3);}\n\
    }", "  if(n<3) return n==0 ? 0 : 1;\n  return tri(n-1)+tri(n-2)+tri(n-3);\n}",
  "    return n<2 ? 1 : tri(n-1) + tri(n-2) + tri(n-3);\n}\n", "    if(n === 0) return\
    \ 0;\n    if(n === 1) return 1;\n    if(n === 2) return 1;\n    return tri(n-1)\
    \ + tri(n-2) + tri(n-3);\n}\n", "    if(n===0) return 0;\n    if(n===1) return\
    \ 1;\n    if(n===2) return 1;\n    if(n>2) return tri(n-1)+tri(n-2)+tri(n-3);\n\
    \    }", "    if(n == 0) return 0;\n    if(n == 1) return 1;\n    if(n == 2) return\
    \ 1;\n    else return tri(n-1) + tri(n-2) + tri(n-3);\n}\n", "  let memo = {0:\
    \ 0, 1: 1, 2: 1}\n  let count = 3;\n  while(count <= n){\n    memo[count] = memo[count\
    \ - 1] + memo[count - 2] + memo[count - 3];\n    count++;\n  }\n  return memo[n];\n\
    }\n", "let arr = [0,1,1];\nwhile(arr.length<n){\n    arr.push(arr[arr.length-1]+arr[arr.length-2]+arr[arr.length-3])\n\
    }\nreturn arr[n-1]\n}\ntri(5)", "\tif(n===0){\n\t\treturn 0;\n\t}\n\tif(n===1\
    \ || n===2){\n\t\treturn 1;\n\t}\n\tlet arr = [0,1,1];\n\tlet i = 3;\n\twhile(i<=n){\n\
    \t\tarr.push(arr[i-1]+arr[i-2]+arr[i-3]);\n\t\ti++;\n\t}\n\treturn arr[n];\n}",
  "    if(n == 0)\n        return 0;\n    if(n == 1 || n == 2)\n        return 1;\n\
    \    return tri(n-1) + tri(n-2) + tri(n-3);\n}\n", "    if(n === 0) return 0;\n\
    \    if(n === 1) return 0;\n    if(n === 2) return 1;\n    if(n>2) return tri(n-1)\
    \ + tri(n-2) + tri(n-3);\n}\n", "    if(n == 0) return 0;\n    if(n == 1) return\
    \ 1;\n    if(n == 2) return 1;\n    return tri(n-1) + tri(n-2) + tri(n-3);\n}",
  "    if(n < 2) return 0;\n    if(n == 2) return 1;\n    if(n == 3) return 2;\n \
    \   return tri(n-1) + tri(n-2) + tri(n-3);\n}\n", "    if(n == 0) return 0;\n\
    \    if(n == 1) return 1;\n    if(n == 2) return 1;\n    return tri(n-1) + tri(n-2)\
    \ + tri(n-3);\n  }", "let result = 0;\nconst array = [0,1,1];\nif(n == 0){\n \
    \   return 0;\n}\nif(n == 1 || n == 2){\n    return 1;\n}\nfor(let i = 2; i <\
    \ n; i++){\n    result = array[i] + array[i-1] + array[i-2];\n    array.push(result);\n\
    }\nreturn result;\n}", "  let t = 0;\n  let a = 1;\n  let b = 1;\n  let c = 2;\n\
    \  if(n === 0) {\n    return 0;\n  }\n  for(let i = 0; i <= n - 3; i++) {\n  \
    \  t = a + b + c;\n    a = b;\n    b = c;\n    c = t;\n  }\n  return t;\n}", " \
    \ if(n === 0) return 0;\n  if(n === 1) return 0;\n  if(n === 2) return 1;\n  if(n\
    \ === 3) return 1;\n  return tri(n-1) + tri(n-2) + tri(n-3);\n}\n", "    var memo\
    \ = [0,1,1];\n    for(var i = 3; i <= n; i++){\n        memo[i] = memo[i-1] +\
    \ memo[i-2] + memo[i-3];\n    }\n    return memo[n];\n}\n", "    let first = 1;\n\
    \    let second = 1;\n    let third = 2;\n    let result = 0;\n    let count =\
    \ 0;\n    while(count < n){\n        result = first + second + third;\n      \
    \  first = second;\n        second = third;\n        third = result;\n       \
    \ count++;\n    }\n    return result;\n}\n", "    if(n == 0){\n        return\
    \ 0;\n    }\n    if(n == 1 || n == 2){\n        return 1;\n    }\n    return tri(n-1)\
    \ + tri(n-2) + tri(n-3);\n}\n", "  let result = [0, 1, 1]\n  if(n < 3) return\
    \ result[n]\n  for(let i = 2; i < n; i++){\n    result.push(result[i] + result[i\
    \ - 1] + result[i - 2])\n  }\n  return result[n]\n}\n", "    if(n === 0) return\
    \ 0;\n    if(n === 1) return 0;\n    if(n === 2) return 1;\n    return tri(n-1)\
    \ + tri(n-2) + tri(n-3);\n}\n\n", "  if(n === 0){\n    return 0;\n  }\n  if(n\
    \ === 1){\n    return 1;\n  }\n  if(n === 2){\n    return 1;\n  }\n  return tri(n-1)\
    \ + tri(n-2) + tri(n-3);\n}\n", "  if(n <= 2) return n;\n  return tri(n-1) + tri(n-2)\
    \ + tri(n-3);\n}", "    if(n===0) return 0;\n    if(n===1) return 1;\n    if(n===2)\
    \ return 1;\n    return tri(n-1)+tri(n-2)+tri(n-3);\n}", "\tif(n === 0){\n\t\t\
    return 0;\n\t}\n\tif(n === 1){\n\t\treturn 1;\n\t}\n\tif(n === 2){\n\t\treturn\
    \ 1;\n\t}\n\treturn tri(n-1) + tri(n-2) + tri(n-3);\n}\n", "    if(n === 0) return\
    \ 0;\n    if(n === 1) return 0;\n    if(n === 2) return 1;\n    return tri(n-1)\
    \ + tri(n-2) + tri(n-3);\n}\n", "  let first = 0;\n  let second = 1;\n  let third\
    \ = 1;\n  let current = 0;\n  if(n == 1){\n    return 0;\n  }else if(n == 2){\n\
    \    return 1;\n  }else if(n == 3){\n    return 1;\n  }else{\n    for(let i =\
    \ 3; i < n; i++){\n      current = first + second + third;\n      first = second;\n\
    \      second = third;\n      third = current;\n    }\n    return current;\n \
    \ }\n}\n", "    if(n == 0){\n        return 0;\n    }else if(n == 1){\n      \
    \  return 1;\n    }else if(n == 2){\n        return 1;\n    }else{\n        return\
    \ tri(n-1) + tri(n-2) + tri(n-3);\n    }\n}", "    let arr = [0,1,1];\n    for(let\
    \ i = 0; i < n; i++){\n        arr.push(arr[i] + arr[i+1] + arr[i+2]);\n    }\n\
    \    return arr[n];\n}\n", "    if(n<=2){\n        return 0;\n    }else if(n==3){\n\
    \        return 1;\n    }else{\n        return tri(n-1)+tri(n-2)+tri(n-3);\n \
    \   }\n}", "    if(n<=2){\n      return 1;\n    }\n    return tri(n-1)+tri(n-2)+tri(n-3);\n\
    \  }\n  \n  function tribonacci(signature,n){\n    if(n>3){\n      let s = signature;\n\
    \      for(let i=0;i<n-3;i++){\n        s.push(tri(s.length));\n      }\n    \
    \  return s;\n    }else if(n===0){\n      return [];\n    }else{\n      return\
    \ signature.slice(0,n);\n    }\n  }\n  console.log(tribonacci([1,1,1],10));\n\
    \  //Test.assertSimilar(tribonacci([1,1,1],10),[1,1,1,3,5,9,17,31,57,105])\n \
    \ //Test.assertSimilar(tribonacci([0,0,1],10),[0,0,1,1,2,4,7,13,24,44])\n  //Test.assertSimilar(tribonacci([0,1,1],10),[0,1,1,2,4,7,13,24,44,81])\n\
    \  //Test.assertSimilar(tribonacci([1,0,0],10),[1,0,0,1,1,2,4,7,13,24])\n  //Test.assertSimilar(tribonacci([0,0,0],10),[0,0,0,0,0,0,0,0,0,0])\n\
    \  //Test.assertSimilar(tribonacci([1,2,3],10),[1,2,3,6,11,20,37,68,125,230])\n\
    \  //Test.assertSimilar(tribonacci([3,2,1],10),[3,2,1,6,9,16,31,56,103,190])\n\
    \  //Test.assertSimilar(tribonacci([1,1,1],1),[1])\n  //Test.assertSimilar(tribonacci([300,200,100],0),[])\n\
    \  //Test.assertSimilar(", "    if(n===0 || n===1 || n===2){\n        return 0;\n\
    \    }\n    if(n===3){\n        return 1;\n    }\n    return tri(n-1)+tri(n-2)+tri(n-3);\n\
    }\n", "   if(n < 2) {\n       return n;\n   }\n   if(n === 2) {\n       return\
    \ 1;\n   }\n   if(n === 3) {\n       return 2;\n   }\n   return tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3);\n}", "    if(n < 3){\n        return n < 1 ? 0 : 1;\n   \
    \ }\n    else{\n        return tri(n-1) + tri(n-2) + tri(n-3);\n    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
