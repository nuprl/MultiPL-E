name: HumanEval_69_search
language: js
prompt: "//You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n// The frequency of an integer is the number\
  \ of times it appears in the list.\n// If no such a value exist, return -1.\nfunction\
  \ search(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = search;\n  assert.deepEqual(candidate([5, 5, 5, 5, 1]),1);\n  assert.deepEqual(candidate([4,\
  \ 1, 4, 1, 4, 4]),4);\n  assert.deepEqual(candidate([3, 3]),-1);\n  assert.deepEqual(candidate([8,\
  \ 8, 8, 8, 8, 8, 8, 8]),8);\n  assert.deepEqual(candidate([2, 3, 3, 2, 2]),2);\n\
  \  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7,\
  \ 1, 7, 4, 10, 8, 1]),1);\n  assert.deepEqual(candidate([3, 2, 8, 2]),2);\n  assert.deepEqual(candidate([6,\
  \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);\n  assert.deepEqual(candidate([8, 8, 3, 6,\
  \ 5, 6, 4]),-1);\n  assert.deepEqual(candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9,\
  \ 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);\n  assert.deepEqual(candidate([1,\
  \ 9, 10, 1, 3]),1);\n  assert.deepEqual(candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);\n  assert.deepEqual(candidate([1]),1);\n\
  \  assert.deepEqual(candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4,\
  \ 2, 1, 10, 2, 1, 1, 5]),4);\n  assert.deepEqual(candidate([2, 10, 4, 8, 2, 10,\
  \ 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);\n  assert.deepEqual(candidate([1, 6,\
  \ 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);\n  assert.deepEqual(candidate([9, 2, 4, 1,\
  \ 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9,\
  \ 4]),4);\n  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3,\
  \ 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);\n  assert.deepEqual(candidate([9, 8, 6, 10,\
  \ 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);\n  assert.deepEqual(candidate([5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);\n  assert.deepEqual(candidate([10]),-1);\n\
  \  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);\n  assert.deepEqual(candidate([5,\
  \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);\n  assert.deepEqual(candidate([7, 9, 9, 9,\
  \ 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);\n  assert.deepEqual(candidate([3,\
  \ 10, 10, 9, 2]),-1);\n}\n\ntest();"
completions: ["  let obj = {}\n  for(let i = 0; i < lst.length; i++){\n      if(obj[lst[i]]){\n\
    \          obj[lst[i]] += 1\n      }else{\n          obj[lst[i]] = 1\n      }\n\
    \  }\n  let keys = Object.keys(obj)\n  for(let i = keys.length - 1; i >= 0; i--){\n\
    \      if(obj[keys[i]] >= parseInt(keys[i])){\n          return parseInt(keys[i])\n\
    \      }\n  }\n  return -1\n}\n", "    let obj = {}\n    let max = 0\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(obj[lst[i]]){\n            obj[lst[i]]\
    \ += 1\n        } else {\n            obj[lst[i]] = 1\n        }\n    }\n    for(let\
    \ j = 0; j < lst.length; j++){\n        if(obj[lst[j]] >= lst[j] && lst[j] > max){\n\
    \            max = lst[j]\n        }\n    }\n    if(max > 0){\n        return\
    \ max\n    } else {\n        return -1\n    }\n}\n", "    let obj = {};\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(obj[lst[i]]){\n            obj[lst[i]]\
    \ += 1;\n        } else {\n            obj[lst[i]] = 1;\n        }\n    }\n  \
    \  let arr = Object.entries(obj);\n    let max = -1;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i][0] <= arr[i][1] && max < arr[i][0]){\n            max\
    \ = arr[i][0];\n        }\n    }\n    return max;\n}\n", "    let newarr = lst.filter(e\
    \ => e > 0).sort((a,b) => b-a);\n    let result = [];\n    for(let i = 0; i <\
    \ newarr.length; i++){\n        if(newarr.filter(e => e === newarr[i]).length\
    \ >= newarr[i]){\n            result.push(newarr[i]);\n        }\n    }\n    return\
    \ result.length > 0 ? result[0] : -1;\n}\n", "  if (lst.length === 0) {\n    return\
    \ -1;\n  }\n  var newObj = {};\n  for (var i = 0; i < lst.length; i++) {\n   \
    \ if (newObj[lst[i]] === undefined) {\n      newObj[lst[i]] = 1;\n    } else {\n\
    \      newObj[lst[i]] += 1;\n    }\n  }\n  var keys = Object.keys(newObj);\n \
    \ var sorted = keys.sort((a, b) => (newObj[b] - newObj[a]) || (b - a));\n  var\
    \ result = -1;\n  for (var j = 0; j < sorted.length; j++) {\n    if (newObj[sorted[j]]\
    \ >= parseInt(sorted[j])) {\n      result = parseInt(sorted[j]);\n      break;\n\
    \    }\n  }\n  return result;\n}\n", "    // lst.sort();\n    let sortedLst =\
    \ lst.sort((a,b) => a-b);\n    // loop over the array\n    for(let i = 0; i <\
    \ sortedLst.length; i++){\n        // add 1 to the current number\n        let\
    \ num = sortedLst[i] + 1;\n        // loop over the array again\n        for(let\
    \ j = 0; j < sortedLst.length; j++){\n            // check for the frequency\n\
    \            if(sortedLst[j] === num){\n                // if the freq is at least\
    \ the number\n                if(lst.filter(x => x === num).length >= num){\n\
    \                    // return num\n                    return num;\n        \
    \        }\n            }\n        }\n    }\n    return -1;\n}\n", "  let count\
    \ = {};\n  let ans = -1;\n  for(let i = 0; i < lst.length; i++){\n    if(count[lst[i]]\
    \ === undefined){\n      count[lst[i]] = 1;\n    } else {\n      count[lst[i]]++;\n\
    \    }\n  }\n  for(let i = 0; i < lst.length; i++){\n    if(count[lst[i]] >= lst[i]\
    \ && lst[i] > ans){\n      ans = lst[i];\n    }\n  }\n  return ans;\n}\n", " \
    \   let map = new Map();\n    let result = -1;\n    lst.forEach(x => map.set(x,\
    \ 1 + (map.get(x) || 0)));\n    for (let [key, val] of map.entries()) {\n    \
    \    if (key <= val && key > result) {\n            result = key;\n        }\n\
    \    }\n    return result;\n}\n", "    let hash = new Map();\n    let result =\
    \ -1;\n    lst.forEach(el => hash.set(el, 0));\n    lst.forEach(el => hash.set(el,\
    \ hash.get(el) + 1));\n    for(let [key, value] of hash){\n        if(key <= value){\n\
    \            result = key;\n        }\n    }\n    return result;\n}", "  var max\
    \ = 0;\n  var count = 0;\n  for(var i = 0; i < lst.length; i++){\n    for(var\
    \ j = 0; j < lst.length; j++){\n      if(lst[i] == lst[j]){\n        count++;\n\
    \      }\n    }\n    if(count >= lst[i] && lst[i] > max){\n      max = lst[i];\n\
    \    }\n    count = 0;\n  }\n  if(max == 0){\n    return -1;\n  }\n  return max;\n\
    }\n", "    let obj = {};\n    for(let val of lst){\n        if(!obj[val]){\n \
    \           obj[val] = 1;\n        }else{\n            obj[val]++;\n        }\n\
    \    }\n    let ints = Object.keys(obj);\n    let res = -1;\n    for(let i = 0;\
    \ i < ints.length; i++){\n        if(ints[i] <= obj[ints[i]]){\n            res\
    \ = Math.max(res, ints[i]);\n        }\n    }\n    return res;\n}", "    let obj\
    \ = {}\n    for(let num of lst){\n        if(obj[num]) obj[num]++\n        else\
    \ obj[num] = 1\n    }\n    let max\n    for(let key in obj){\n        if(key <=\
    \ obj[key]) max = Math.max(max, key)\n    }\n    return max || -1\n}\n", "   \
    \ // your code here\n    let lstOfInts = lst.filter(item => Number.isInteger(item)\
    \ && item > 0)\n    let lstOfUniques = new Set(lstOfInts)\n    let lstOfFrequencies\
    \ = []\n    lstOfUniques.forEach(x => lstOfFrequencies.push(lstOfInts.filter(item\
    \ => item === x).length))\n    let maxFreq = Math.max(...lstOfFrequencies)\n \
    \   let value = lstOfFrequencies.indexOf(maxFreq)\n    let toReturn = lstOfUniques.values()\n\
    \    for (let i = 0; i <= value; i++) {\n        toReturn.next().value\n    }\n\
    \    if (maxFreq < value) {\n        return -1\n    } else {\n        return toReturn.next().value\n\
    \    }\n}\n", "  const freqObj = lst.reduce((obj, int) => {\n    obj[int] ? obj[int]++\
    \ : obj[int] = 1;\n    return obj;\n  }, {})\n  let max = Math.max(...lst);\n\
    \  while (max > 0) {\n    if (freqObj[max] >= max) return max;\n    max--;\n \
    \ }\n  return -1;\n}", "    let res = -1;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst.includes(lst[i], i+1)){\n            res = lst[i];\n \
    \       }\n    }\n    return res;\n}", "    let biggestFreq = 0;\n    let largest\
    \ = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > biggestFreq\
    \ && lst[i] > largest){\n            largest = lst[i];\n            biggestFreq\
    \ = lst.filter(elem => elem === lst[i]).length;\n        }\n    }\n    if(largest\
    \ === biggestFreq){\n        return largest;\n    }\n    return -1;\n}", "\t//lst.sort();\n\
    \tlst.sort(function(a,b){\n\t\treturn b-a;\n\t});\n\tvar the_int = -1;\n\tvar\
    \ the_int_count = 0;\n\tvar temp_int = lst[0];\n\tvar temp_int_count = 0;\n\t\
    for(var i = 0; i < lst.length; i++){\n\t\tif(lst[i] == temp_int){\n\t\t\ttemp_int_count++;\n\
    \t\t}\n\t\telse{\n\t\t\tif(temp_int_count >= temp_int){\n\t\t\t\tthe_int = temp_int;\n\
    \t\t\t\tthe_int_count = temp_int_count;\n\t\t\t}\n\t\t\ttemp_int = lst[i];\n\t\
    \t\ttemp_int_count = 1;\n\t\t}\n\t}\n\tif(temp_int_count >= temp_int){\n\t\tthe_int\
    \ = temp_int;\n\t\tthe_int_count = temp_int_count;\n\t}\n\tconsole.log(the_int);\n\
    \treturn the_int;\n}\n\nsearch([2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
  "  let numbers = lst.sort((a,b) => a - b);\n  let mapped = {};\n  let max = numbers[numbers.length\
    \ - 1];\n  numbers.forEach(num => mapped[num] = (mapped[num] || 0) + 1);\n  for\
    \ (let i = 1; i <= max; i++) {\n    if (mapped[i] >= i) {\n      return i;\n \
    \   }\n  }\n  return -1;\n}", "  var counter = 0;\n  var obj = {};\n  for(let\
    \ i=0; i<lst.length; i++){\n    counter = 0;\n    for(let j=0; j<lst.length; j++){\n\
    \      if(lst[i] == lst[j]){\n        counter++;\n      }\n    }\n    obj[lst[i]]\
    \ = counter;\n  }\n  return obj;\n}\n", "    let frequencies = {}\n    let unique\
    \ = [...new Set(lst)]\n    for(let i=0; i<unique.length; i++){\n        let count\
    \ = 0\n        for(let j=0; j<lst.length; j++){\n            if(unique[i] ===\
    \ lst[j]){\n                count++\n            }\n        }\n        frequencies[unique[i]]\
    \ = count\n    }\n    let maximum = Math.max(...Object.keys(frequencies))\n  \
    \  if(frequencies[maximum] >= maximum){\n        return maximum\n    }\n    return\
    \ -1\n}\n", "  const count = lst.reduce((acc, value) => {\n    acc[value] = (acc[value]\
    \ || 0) + 1;\n    return acc;\n  }, {});\n  let max = -1;\n  for (let key in count)\
    \ {\n    if (count[key] >= key && key > max) {\n      max = parseInt(key);\n \
    \   }\n  }\n  return max;\n}\n", "    let frqArr = [...new Set(lst)].map( x =>\
    \ lst.filter(y => y===x).length);\n    let numArr = [...new Set(lst)];\n    for(i\
    \ = frqArr.length-1; i >= 0; i--){\n        if(frqArr[i] >= numArr[i]){\n    \
    \        return numArr[i];\n        }\n    }\n    return -1;\n}\n", "  let obj\
    \ = {}\n  let result = -1\n  lst.forEach(el => {\n    obj[el] ? obj[el] += 1 :\
    \ obj[el] = 1\n  })\n  Object.keys(obj).forEach(el => {\n    if (obj[el] >= el)\
    \ {\n      result = el > result ? el : result\n    }\n  })\n  return Number(result)\n\
    }\n", "    let obj = {}\n    for(let i=0; i<lst.length; i++){\n        if(obj[lst[i]]){\n\
    \            obj[lst[i]]++\n        }else{\n            obj[lst[i]] = 1\n    \
    \    }\n    }\n    // console.log(obj)\n    let max = 0\n    for(let key in obj){\n\
    \        if(obj[key] >= key && key > max){\n            max = key\n        }\n\
    \    }\n    return max === 0 ? -1 : max\n}", "    let m = new Map();\n    let\
    \ max = -1;\n    for(let i = 0; i < lst.length; i++){\n        let num = lst[i];\n\
    \        if(m.has(num)){\n            m.set(num, m.get(num) + 1);\n        }else{\n\
    \            m.set(num, 1);\n        }\n        if(m.get(num) >= num && num >\
    \ max){\n            max = num;\n        }\n    }\n    return max;\n}\n", "  let\
    \ counter = {};\n  for (let i=0; i<lst.length; i++){\n    if (counter[lst[i]])\
    \ {\n      counter[lst[i]] += 1;\n    } else {\n      counter[lst[i]] = 1;\n \
    \   }\n  }\n  let max = -1;\n  for (let key in counter){\n    if (counter[key]\
    \ >= key && key > max){\n      max = key;\n    }\n  }\n  return max;\n}", "  var\
    \ k = {}\n  var arr = lst.sort(function(a,b){\n    return a-b\n  })\n  for(var\
    \ i = 0; i < arr.length; i++){\n    if(k[arr[i]]){\n      k[arr[i]] += 1\n   \
    \ } else {\n      k[arr[i]] = 1\n    }\n  }\n  for(var key in k){\n    if(k[key]\
    \ >= key){\n      return parseInt(key)\n    }\n  }\n  return -1\n}\n", "    if\
    \ (lst.length === 0) return -1;\n    const n = Math.max(...lst);\n    for (let\
    \ i = n; i > 0; i--) {\n        if (lst.filter(a => a === i).length >= i) return\
    \ i;\n    }\n    return -1;\n}", "  var n = new Set();\n  var n1 = new Set();\n\
    \  for(var i = 0; i < lst.length; i++){\n    if(n.has(lst[i])){\n      n1.add(lst[i]);\n\
    \    }else{\n      n.add(lst[i]);\n    }\n  }\n  var mx = -1;\n  for(let v of\
    \ n1){\n    if(v > mx){\n      mx = v;\n    }\n  }\n  return mx;\n}\n", "    let\
    \ result = []\n    let itemCount = {}\n    let highest = 0\n    for(let i = 0;\
    \ i < lst.length; i++){\n      if(itemCount[lst[i]] === undefined){\n        itemCount[lst[i]]\
    \ = 1\n      } else {\n        itemCount[lst[i]] += 1\n      }\n    }\n    //\
    \ console.log(itemCount)\n    for(let i = 0; i < lst.length; i++){\n      if(itemCount[lst[i]]\
    \ >= lst[i]){\n        result.push(lst[i])\n      }\n    }\n    // console.log(result)\n\
    \    for(let i = 0; i < result.length; i++){\n      if(result[i] > highest){\n\
    \        highest = result[i]\n      }\n    }\n    return highest\n}\n", "    let\
    \ newArr = [];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] ===\
    \ 0){\n            continue;\n        }else{\n            newArr.push(lst[i]);\n\
    \        }\n    }\n    let count = 0;\n    for(let i = 0; i < newArr.length; i++){\n\
    \        for(let j = 0; j < newArr.length; j++){\n            if(newArr[i] ===\
    \ newArr[j]){\n                count++;\n            }\n        }\n        if(count\
    \ >= newArr[i]){\n            return newArr[i];\n        }\n        count = 0;\n\
    \    }\n    return -1;\n}\n", "    let newObj = {}\n    for(let i = 0; i < lst.length;\
    \ i++){\n        newObj[lst[i]] = (newObj[lst[i]] || 0) + 1\n    }\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(newObj[lst[i]] >= lst[i]){\n      \
    \      return lst[i]\n        }\n    }\n    return -1\n}", "    let freq_map =\
    \ new Map();\n    for(let i=0; i<lst.length; i++){\n        if(freq_map.has(lst[i])){\n\
    \            freq_map.set(lst[i], freq_map.get(lst[i])+1);\n        }\n      \
    \  else{\n            freq_map.set(lst[i], 1);\n        }\n    }\n    let res\
    \ = -1;\n    for(let [key, value] of freq_map){\n        if(key <= value){\n \
    \           res = key;\n        }\n    }\n    return res;\n}\n", "    let obj\
    \ = {};\n    for(let x of lst){\n        if(obj[x]){\n            obj[x]++\n \
    \       }else{\n            obj[x] = 1;\n        }\n    }\n    let rtnVal = -1;\n\
    \    for(let x in obj){\n        if(obj[x] >= x && x > rtnVal){\n            rtnVal\
    \ = x;\n        }\n    }\n    return rtnVal;\n}", "    var freq = {};\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(!freq[lst[i]]){\n            freq[lst[i]]\
    \ = 1;\n        }else{\n            freq[lst[i]] += 1;\n        }\n    }\n   \
    \ for(var j = 0; j < lst.length; j++){\n        if(freq[lst[j]] >= lst[j]){\n\
    \            return lst[j];\n        }\n    }\n    return -1;\n}\n", "    const\
    \ freq = {};\n    for(let i=0; i<lst.length; i++){\n        freq[lst[i]] = (freq[lst[i]]\
    \ || 0) + 1;\n    }\n    let largest = 0;\n    for(let key in freq){\n       \
    \ if(parseInt(key) > largest && freq[key] >= parseInt(key)){\n            largest\
    \ = parseInt(key);\n        }\n    }\n    return largest || -1;\n}", "    let\
    \ map = new Map();\n    for(let i = 0; i < lst.length; i++){\n        if(map.has(lst[i])){\n\
    \            map.set(lst[i], map.get(lst[i]) + 1);\n        } else {\n       \
    \     map.set(lst[i], 1);\n        }\n    }\n    for(let i = lst.length; i > 0;\
    \ i--){\n        if(map.has(i) && map.get(i) >= i){\n            return i;\n \
    \       }\n    }\n    return -1;\n}", "    let newArr = [];\n    lst.forEach(num\
    \ => {\n        if(newArr.includes(num)){\n            newArr.push(num, num);\n\
    \        } else {\n            newArr.push(num);\n        }\n    });\n    newArr.sort((a,\
    \ b) => b - a);\n    for(let i = 0; i < newArr.length; i++){\n        let num\
    \ = newArr[i];\n        let numToCheck = num + 1;\n        if(num === numToCheck){\n\
    \            return num;\n        }\n    }\n    return -1;\n}", "    let map =\
    \ new Map();\n    let max = 0;\n    let result = -1;\n    for(let i=0; i<lst.length;\
    \ i++){\n        if(map.has(lst[i])){\n            map.set(lst[i], map.get(lst[i])+1);\n\
    \        }else{\n            map.set(lst[i], 1);\n        }\n        if(map.get(lst[i])>=lst[i]\
    \ && lst[i]>max){\n            max = lst[i];\n            result = max;\n    \
    \    }\n    }\n    return result;\n}\n", "  // create an object to store the integers\
    \ and their frequency\n  let obj = {};\n  // loop over the list\n  for(let num\
    \ of lst){\n    // if the current number is not a key in the object, add it and\
    \ set it's value to 1\n    if(!obj[num]){\n      obj[num] = 1;\n    } else {\n\
    \      // else increment the value by 1\n      obj[num]++;\n    }\n  }\n  // create\
    \ an array of all the numbers in the list\n  let array = lst.sort((a,b) => b -\
    \ a);\n  //loop over the array from greatest to least\n  for(let i = 0; i < array.length;\
    \ i++){\n    // get the current number\n    let num = array[i];\n    // check\
    \ if the value associated with that number is greater than or equal to the number\n\
    \    if(obj[num] >= num){\n      // if so, return that number\n      return num;\n\
    \    }\n  }\n  // if the loop completes and a number is not returned, return -1\n\
    \  return -1;\n}", "  let counts = {};\n  let max = -1;\n  lst.forEach(x => counts[x]\
    \ = (counts[x] || 0) + 1);\n  for (const key in counts) {\n    if (counts[key]\
    \ >= key && key > max) {\n      max = key;\n    }\n  }\n  return max;\n}", " \
    \   const map = {}\n    lst.forEach(l => {\n        if (map[l]) {\n          \
    \  map[l] += 1\n        } else {\n            map[l] = 1\n        }\n    })\n\
    \    console.log(map)\n    let a = map.filter(m => m.length >= m[0])\n    console.log(a)\n\
    }\nsearch([0,0,0,0,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3",
  "  let n = lst.length\n  if(n===0) return -1\n  let dict = {}\n  for(let i = 0;\
    \ i < n; i++){\n    let num = lst[i]\n    if(dict[num]){\n      dict[num] += 1\n\
    \    } else {\n      dict[num] = 1\n    }\n  }\n  let max = 0\n  for(let key in\
    \ dict){\n    if(dict[key] >= key && dict[key] >= max){\n      max = key\n   \
    \ }\n  }\n  return max ? max : -1\n}\n", "    let map = new Map();\n    let max\
    \ = -1;\n    for(let i = 0; i < lst.length; i++){\n        if(map.has(lst[i])){\n\
    \            map.set(lst[i], map.get(lst[i]) + 1);\n        }else{\n         \
    \   map.set(lst[i], 1);\n        }\n    }\n    map.forEach((k, v) => {\n     \
    \   if(v >= k && v > max){\n            max = v;\n        }\n    });\n    return\
    \ max;\n}", "    const freq = new Map();\n    lst.forEach(e => {\n        if(freq.has(e)){\n\
    \            freq.set(e, freq.get(e) + 1);\n        } else {\n            freq.set(e,\
    \ 1);\n        }\n    });\n    //console.log(freq);\n    let answer = -1;\n  \
    \  let max = 0;\n    for(let [key, value] of freq){\n        if(key > max && value\
    \ >= key){\n            max = key;\n            answer = key;\n        }\n   \
    \ }\n    return answer;\n}\n", "  var count = 0;\n  var max = lst[0];\n  var newArr\
    \ = lst.sort(function(a,b){return a-b});\n  console.log(newArr);\n  for(var i\
    \ = 0; i < newArr.length; i++){\n    if(newArr[i] === newArr[i + 1]){\n      count++;\n\
    \    }\n    if(newArr[i] === newArr[i - 1]){\n      count++;\n    }\n    if(count\
    \ >= newArr[i]){\n      max = newArr[i];\n    }\n  }\n  return max;\n}", "   \
    \ var obj = {};\n    var max = 0;\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(obj[lst[i]] == undefined){\n            obj[lst[i]] = 1;\n       \
    \ }else{\n            obj[lst[i]] += 1;\n        }\n    }\n    for(var i = 0;\
    \ i < lst.length; i++){\n        if(obj[lst[i]] >= lst[i] && obj[lst[i]] > max){\n\
    \            max = lst[i];\n        }\n    }\n    if(max == 0){\n        return\
    \ -1;\n    }\n    return max;\n}", "  var max = -1;\n  var count = 0;\n  var current\
    \ = 0;\n  for(var i = 0; i < lst.length; i++){\n    current = lst[i];\n    for(var\
    \ j = 0; j < lst.length; j++){\n      if(current == lst[j]){\n        count++;\n\
    \      }\n    }\n    if(count >= current && current > max){\n      max = current;\n\
    \    }\n    count = 0;\n  }\n  return max;\n}", "    let collection = {};\n  \
    \  for(let i = 0; i < lst.length; i++){\n        if(collection[lst[i]]){\n   \
    \         collection[lst[i]]++;\n        }else{\n            collection[lst[i]]\
    \ = 1;\n        }\n    }\n    let maxValue = 0;\n    for(let num in collection){\n\
    \        if(collection[num] >= num && num > maxValue){\n            maxValue =\
    \ num;\n        }\n    }\n    return maxValue ? maxValue : -1;\n}\n", "    let\
    \ freq = {};\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > 0){\n\
    \            freq[lst[i]] = freq[lst[i]] + 1 || 1;\n        }\n    }\n    let\
    \ keys = Object.keys(freq);\n    let values = Object.values(freq);\n    let max\
    \ = Math.max(...values);\n    let index = values.indexOf(max);\n    let result\
    \ = keys[index];\n    if(result >= max){\n        return max;\n    }\n    return\
    \ -1;\n}\n", "    let freq = [];\n    let maxFreq = Math.max(...lst);\n    for(let\
    \ i = 1; i < maxFreq; i++){\n        if(lst.indexOf(i) !== -1){\n            freq.push(lst.indexOf(i));\n\
    \        }\n    }\n    let find = [];\n    for(let i = 0; i < freq.length; i++){\n\
    \        let times = lst.slice(0, freq[i]).filter(function(num){\n           \
    \ return num === lst[freq[i]];\n        }).length;\n        if(times >= lst[freq[i]]){\n\
    \            find.push(lst[freq[i]]);\n        }\n    }\n    return find.length\
    \ > 0 ? Math.max(...find) : -1;\n}\n", "    let lst1 = lst.sort((a,b)=>a-b)\n\
    \    let dict = {}\n    for(let x of lst1){\n        if(x in dict){\n        \
    \    dict[x] += 1\n        }\n        else{\n            dict[x] = 1\n       \
    \ }\n    }\n    for(let x in dict){\n        if(dict[x] >= x){\n            return\
    \ x\n        }\n    }\n    return -1\n}", "  let lstSorted = lst.sort((a,b) =>\
    \ a-b)\n  let maxObj = {}\n  for(let i = 0; i < lstSorted.length; i++){\n    let\
    \ num = lstSorted[i]\n    if(!maxObj[num]){\n      maxObj[num] = 1\n    }else{\n\
    \      maxObj[num]++\n    }\n  }\n  let finalArr = []\n  let finalMax = -1\n \
    \ for(let key in maxObj){\n    if(key <= maxObj[key]){\n      finalArr.push(key)\n\
    \    }\n  }\n  finalArr.sort((a,b) => b-a)\n  if(finalArr.length){\n    finalMax\
    \ = finalArr[0]\n  }\n  return finalMax\n}", "    let countObj = {};\n    let\
    \ sortedLst = lst.sort((a,b) => b-a);\n    let max = -1;\n    let lstMax = sortedLst[0];\n\
    \    for(let i = 0; i < sortedLst.length; i++){\n        let num = sortedLst[i];\n\
    \        if(num === lstMax){\n            if(countObj[num] === undefined){\n \
    \               countObj[num] = 0;\n            }\n            countObj[num]++;\n\
    \            if(countObj[num] >= num){\n                max = num;\n         \
    \   }\n        }\n    }\n    return max;\n}\nsearch([3,3,3,3,3,1,1,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3",
  "    let set = new Set(lst);\n    let arr = Array.from(set);\n    arr.sort((a,b)=>a-b);\n\
    \    let ans = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(lst.filter(el=>el==arr[i]).length>=arr[i]){\n\
    \            ans = arr[i];\n        }\n    }\n    return ans;\n}", "  let obj\
    \ = {};\n  let max = -1;\n  for(let i = 0; i < lst.length; i++){\n    if(!obj[lst[i]]){\n\
    \      obj[lst[i]] = 1;\n    } else {\n      obj[lst[i]] += 1;\n    }\n  }\n \
    \ for(let key in obj){\n    if(obj[key] >= Number(key) && Number(key) > max){\n\
    \      max = Number(key);\n    }\n  }\n  return max;\n}\n", "    const sortedSet\
    \ = Array.from(new Set(lst)).sort((a,b) => b-a);\n\n    for(let i = 1; i < sortedSet.length;\
    \ i++){\n        const number = sortedSet[i];\n        const newLst = lst.filter(x\
    \ => x === number);\n        if(newLst.length >= number){\n            return\
    \ number;\n        }\n    }\n    return -1;\n}\n", "    let d = lst.reduce((acc,\
    \ cur) => {\n        if(cur>0) {\n            if(!acc[cur]) acc[cur] = 0;\n  \
    \          acc[cur]++;\n        }\n        return acc;\n    }, {});\n    let ans\
    \ = -1;\n    for(let k in d) {\n        let v = d[k];\n        if(v >= k && ans\
    \ < k) ans = +k;\n    }\n    return ans;\n}\n", "  var a = lst.sort(function(a,\
    \ b){return a-b}).map(function(e, i, arr){\n    return arr.indexOf(e) == arr.lastIndexOf(e)\
    \ ? -1 : e;\n  }).filter(function(e){return e > 0;});\n  return !a.length ? -1\
    \ : a[a.length-1];\n}", "  let counter = {};\n  let max = -1;\n  for(let i = 0;\
    \ i < lst.length; i++){\n    let key = lst[i];\n    if(counter[key]){\n      counter[key]++;\n\
    \    } else {\n      counter[key] = 1;\n    }\n  }\n  for(let i = 0; i < lst.length;\
    \ i++){\n    let key = lst[i];\n    if(counter[key] >= key && key > max){\n  \
    \    max = key;\n    }\n  }\n  return max;\n}", "    let hashMap = {};\n    let\
    \ greatestNum = 0;\n    let greatestFrequency = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(!hashMap[lst[i]]){\n            hashMap[lst[i]] = 1;\n   \
    \     }else{\n            hashMap[lst[i]]++;\n        }\n    }\n    for(let key\
    \ in hashMap){\n        if(hashMap[key] >= key && hashMap[key] > greatestFrequency){\n\
    \            greatestNum = key;\n            greatestFrequency = hashMap[key];\n\
    \        }\n    }\n    if(greatestNum === 0 || greatestFrequency < greatestNum){\n\
    \        return -1;\n    }\n    return greatestNum;\n}\n", "  if(!lst || lst.length\
    \ === 0) {\n    return -1;\n  }\n  let result = -1;\n  for(let i = 1; i <= Math.max(...lst);\
    \ i++) {\n    if(lst.filter(el => el === i).length >= i) {\n      result = i;\n\
    \    }\n  }\n  return result;\n}\n", "    const answer = [];\n    let frequency\
    \ = [];\n    for(let i = 0; i < lst.length; i++){\n        if(!answer.includes(lst[i])){\n\
    \            answer.push(lst[i]);\n            frequency.push(1);\n        } else\
    \ {\n            const index = answer.indexOf(lst[i]);\n            frequency[index]++;\n\
    \        }\n    }\n    const result = []\n    for(let i = 0; i < answer.length;\
    \ i++){\n        if(answer[i] <= frequency[i]){\n            result.push(answer[i]);\n\
    \        }\n    }\n    if(result.length === 0){\n        return -1;\n    } else\
    \ {\n        return Math.max(...result);\n    }\n}\n", "\tlet largest;\n\tfor(let\
    \ i = 0; i < lst.length; i++){\n\t\tlet n = lst[i];\n\t\tlet freq = lst.filter(val\
    \ => val === n).length;\n\t\tif(n > freq && (freq >= n || freq === lst.length)){\n\
    \t\t\tlargest = n;\n\t\t}\n\t}\n\treturn largest;\n}\n", "    var map = {};\n\
    \    var result = -1;\n    for(let i = 0; i < lst.length; i++){\n        map[lst[i]]\
    \ = map[lst[i]] + 1 || 1;\n    }\n    for(let j = 0; j < lst.length; j++){\n \
    \       if(map[lst[j]] >= lst[j] && lst[j] > result){\n            result = lst[j];\n\
    \        }\n    }\n    return result;\n}\nsearch([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
  "  let pos = lst.filter(i => i>0 && lst.indexOf(i) === lst.lastIndexOf(i));\n  let\
    \ freq = [];\n  for(let i=0; i<lst.length; i++){\n    if(freq.indexOf(lst[i])===-1\
    \ && lst[i]>0){\n      freq.push(lst[i]);\n      freq.push(1);\n    }else if(lst[i]>0){\n\
    \      freq[freq.indexOf(lst[i])+1]+=1;\n    }\n  }\n  for(let i=0; i<freq.length;\
    \ i+=2){\n    if(freq[i]===freq[i+1]){\n      pos.push(freq[i]);\n    }\n  }\n\
    \  if(pos.length===0){\n    return -1;\n  }else{\n    return Math.max(...pos);\n\
    \  }\n}", "    var dic = new Object;\n    for(var i=0; i<lst.length; i++){\n \
    \       if(dic[lst[i]] == undefined){\n            dic[lst[i]] = 1;\n        }\n\
    \        else{\n            dic[lst[i]] += 1;\n        }\n    }\n    var max =\
    \ -1;\n    for(var num in dic){\n        if(num > max && dic[num] >= parseInt(num)){\n\
    \            max = num;\n        }\n    }\n    return max;\n}", "   let freq =\
    \ lst.reduce((freq, item) => {\n      freq[item] = (freq[item] || 0) + 1;\n  \
    \    return freq;\n   }, {});\n   return Math.max(...lst.filter(item => freq[item]\
    \ >= item)) || -1;\n}\n", "    let obj = {}\n    for(let i = 0; i < lst.length;\
    \ i++){\n        let num = lst[i]\n        if(!obj[num]){\n            obj[num]\
    \ = 0\n        }\n        obj[num]++\n    }\n    let arr = Object.keys(obj)\n\
    \    for(let i = arr.length - 1; i >= 0; i--){\n        let num = arr[i]\n   \
    \     if(obj[num] >= num){\n            return num\n        }\n    }\n    return\
    \ -1\n}\n", "    let map = {};\n    for(let i = 0; i < lst.length; i++){\n   \
    \     if(map[lst[i]]){\n            map[lst[i]] += 1;\n        } else {\n    \
    \        map[lst[i]] = 1;\n        }\n    }\n    let keys = Object.keys(map);\n\
    \    for(let j = keys.length - 1; j >= 0; j--){\n        if(keys[j] >= map[keys[j]]){\n\
    \            return keys[j];\n        }\n    }\n    return -1;\n}", "  let count\
    \ = 0;\n  let frequency = {};\n  for(let i = 0; i < lst.length; i++){\n    count++;\n\
    \    if(!frequency[lst[i]]){\n      frequency[lst[i]] = 1;\n    } else {\n   \
    \   frequency[lst[i]]++;\n    }\n  }\n  for(let i = 0; i < count; i++){\n    if(frequency[i]\
    \ && frequency[i] >= i){\n      return i;\n    }\n  }\n  return -1;\n}", "   \
    \ let obj = {};\n    let max = 0;\n    for(let i=0; i<lst.length; i++){\n    \
    \    if(obj[lst[i]]){\n            obj[lst[i]] += 1;\n        } else {\n     \
    \       obj[lst[i]] = 1;\n        }\n    }\n    for(let key in obj){\n       \
    \ if(obj[key] >= key && key > max){\n            max = key;\n        }\n    }\n\
    \    return max > 0 ? max : -1;\n}", "  let freq = {};\n  let values = [];\n \
    \ let result = -1;\n  for(let i=0; i<lst.length; i++){\n    let num = lst[i];\n\
    \    if(freq[num]){\n      freq[num]++;\n    }else{\n      freq[num] = 1;\n  \
    \  }\n  }\n  for(let key in freq){\n    if(key >= freq[key]){\n      values.push(key);\n\
    \    }\n  }\n  for(let i=0; i<values.length; i++){\n    if(values[i] > result){\n\
    \      result = values[i];\n    }\n  }\n  return result;\n}\n", "  let freqMap\
    \ = {};\n  for(let num of lst){\n    if(freqMap[num]) freqMap[num]++;\n    else\
    \ freqMap[num] = 1;\n  }\n  let nums = Object.keys(freqMap).map(num => +num);\n\
    \  let max = -1;\n  for(let num of nums){\n    if(num < freqMap[num] && num >\
    \ max) max = num;\n  }\n  return max;\n}\n", "\tvar obj = {};\n\tfor(var i = 0;\
    \ i < lst.length; i++){\n\t\tif(!obj[lst[i]]){\n\t\t\tobj[lst[i]] = 1;\n\t\t}\
    \ else {\n\t\t\tobj[lst[i]]++;\n\t\t}\n\t}\n\tfor(var key in obj){\n\t\tif(obj[key]\
    \ >= key){\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn -1;\n}", "    lst.sort((a,b)=>b-a);\n\
    \    for(let i=0;i<lst.length;i++){\n        if(lst[i]===lst[i+lst[i]])return\
    \ lst[i];\n    }\n    return -1;\n}\n", "  var arr = lst.sort((a,b)=>a-b);\n \
    \ var hmap ={};\n  for(var i=0;i<arr.length;i++){\n    if(!hmap[arr[i]]){\n  \
    \    hmap[arr[i]] =1;\n    }\n    else{\n      hmap[arr[i]]++;\n    }\n  }\n \
    \ var result = -1;\n  for(var key in hmap){\n    if(parseInt(key) <= hmap[key]){\n\
    \      result = parseInt(key);\n    }\n  }\n  return result;\n}\n", "    let freq\
    \ = {};\n    let greatest = -1;\n    for(let item of lst){\n        if(freq[item]){\n\
    \            freq[item]++;\n        }else{\n            freq[item] = 1;\n    \
    \    }\n    }\n    for(let key in freq){\n        if(key>greatest && freq[key]>=key){\n\
    \            greatest = key;\n        }\n    }\n    return parseInt(greatest);\n\
    }\n", "  let obj = {}\n  let counter = 0\n  let arr = []\n  for(let i = 0; i <\
    \ lst.length; i++){\n    if(obj[lst[i]] === undefined){\n      obj[lst[i]] = 1\n\
    \    } else {\n      obj[lst[i]] += 1\n    }\n  }\n  for(let x in obj){\n    if(obj[x]\
    \ >= Number(x)){\n      arr.push(x)\n    }\n  }\n  if(arr.length < 1){\n    return\
    \ -1\n  } else {\n    return Math.max(...arr)\n  }\n}", "    var search = -1;\n\
    \    for(var i = 0; i < lst.length; i++){\n        var count = 0;\n        for(var\
    \ j = 0; j < lst.length; j++){\n            if(lst[i] === lst[j]){\n         \
    \       count++;\n            }\n        }\n        if(count >= lst[i] && lst[i]\
    \ > search){\n            search = lst[i];\n        }\n    }\n    return search;\n\
    }\n", "    var count = {};\n    for(var i = 0; i < lst.length; i++){\n       \
    \ var num = lst[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n \
    \   }\n    var max = -1;\n    for(var key in count){\n        if(count[key] >=\
    \ key){\n            if(max < key){\n                max = key;\n            }\n\
    \        }\n    }\n    return max;\n}", "    let max = lst.reduce((a, b) => Math.max(a,\
    \ b));\n    for (let i = max; i > 0; i--) {\n        if (lst.filter(x => x ===\
    \ i).length >= i) {\n            return i;\n        }\n    }\n    return -1;\n\
    }\n", "    let rev = lst.slice().sort((a,b) => b-a);\n    let set = new Set(rev);\n\
    \    let obj = {};\n    for(let i = 0; i < rev.length; i++){\n        if(!obj[rev[i]]){\n\
    \            obj[rev[i]] = 1;\n        }else{\n            obj[rev[i]]++;\n  \
    \      }\n    }\n    for(let i = 0; i < rev.length; i++){\n        if(obj[rev[i]]\
    \ === rev[i]){\n            return rev[i];\n        }\n    }\n    return -1;\n\
    }\n", "    \n}\n", "    return Math.max(...new Set(lst.filter(x => lst.filter(y\
    \ => y === x).length >= x)));\n}\n", "    const obj = {}\n    for(i of lst){\n\
    \        if(!obj[i]){\n            obj[i] = 1\n        } else{\n            obj[i]++\n\
    \        }\n    }\n    const max = Math.max(...lst)\n    for(const key in obj){\n\
    \        if(key > obj[key] && key <= max){\n            return key\n        }\n\
    \    }\n    return -1\n}", "    lst = lst.sort(function(a, b){return a-b});\n\
    \    //console.log(lst);\n    let obj = {};\n    let result = -1;\n    let v =\
    \ 0;\n    for(let i = 0; i < lst.length; i++){\n        if(obj[lst[i]] === undefined){\n\
    \            obj[lst[i]] = 1;\n        }else{\n            obj[lst[i]] += 1;\n\
    \        }\n    }\n    for(let value in obj){\n        if(obj[value] >= value){\n\
    \            if(parseInt(value) > v){\n                v = parseInt(value);\n\
    \                result = v;\n            }\n        }\n    }\n    return result;\n\
    }", "  let count = {};\n  for (let item of lst) {\n    if (!count[item]) {\n \
    \     count[item] = 1;\n    } else {\n      count[item]++;\n    }\n  }\n  let\
    \ greaterThan = -1;\n  for (let key in count) {\n    if (count[key] >= key &&\
    \ key > greaterThan) {\n      greaterThan = key;\n    }\n  }\n  return greaterThan;\n\
    }\n", "  let obj = {};\n  let highestFreq = -1;\n  let highestFreqInt = -1;\n\
    \  lst.forEach(int => {\n    obj[int] ? obj[int]++ : obj[int] = 1;\n  });\n  for\
    \ (let key in obj) {\n    if (obj[key] >= Number(key) && Number(key) > highestFreq)\
    \ {\n      highestFreq = Number(key);\n      highestFreqInt = Number(key);\n \
    \   }\n  }\n  return highestFreqInt;\n}", "  let out = [];\n  for(let i = 0; i\
    \ < lst.length; i++){\n    for(let j = 0; j < lst.length; j++){\n      if(lst[i]\
    \ === lst[j]){\n        out.push(lst[i]);\n      }\n    }\n  }\n  let c = 0;\n\
    \  for(let i = 0; i < out.length; i++){\n    if(out[i] > c){\n      c = out[i];\n\
    \    }\n  }\n  return c;\n}", "\tvar map = {};\n\tvar max = 0;\n\tvar val = 0;\n\
    \tlst.forEach(function(e){\n\t\tif(map[e]){\n\t\t\tmap[e]++;\n\t\t}else{\n\t\t\
    \tmap[e] = 1;\n\t\t}\n\t\tif(map[e] >= e && e > max){\n\t\t\tmax = e;\n\t\t\t\
    val = e;\n\t\t}\n\t});\n\treturn val;\n}", "    let result = -1;\n    let arr\
    \ = [];\n    for(let i = 0; i < lst.length; i++){\n        if(arr[lst[i]]){\n\
    \            arr[lst[i]] += 1;\n        }else{\n            arr[lst[i]] = 1;\n\
    \        }\n    }\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i]\
    \ >= i){\n            result = i;\n        }\n    }\n    return result;\n}\n",
  "    let obj = {}\n    let maxKey = -1\n    let maxVal = -1\n    for(var i = 0;\
    \ i < lst.length; i++){\n        if(obj[lst[i]] == undefined){\n            obj[lst[i]]\
    \ = 1\n        } else {\n            obj[lst[i]] += 1\n        }\n    }\n    for(key\
    \ in obj){\n        if(obj[key] >= key && obj[key] > maxVal){\n            maxKey\
    \ = key\n            maxVal = obj[key]\n        }\n    }\n    return maxKey\n}",
  "  let frequency = {};\n  let max = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(frequency[lst[i]]){\n      frequency[lst[i]] += 1;\n    } else {\n   \
    \   frequency[lst[i]] = 1;\n    }\n  }\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(frequency[lst[i]] >= lst[i] && lst[i] > max){\n      max = lst[i];\n \
    \   }\n  }\n  return max > 0 ? max : -1;\n}", "  const obj = {};\n  for(const\
    \ i of lst){\n    if(!obj[i]){\n      obj[i] = 1;\n    } else {\n      obj[i]++;\n\
    \    }\n  }\n  const arr = Object.keys(obj).map(i => parseInt(i));\n  let max\
    \ = 0;\n  for(const i of arr){\n    if(obj[i]>=i && i>max){\n      max = i;\n\
    \    }\n  }\n  return max;\n}", "    let g = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        let c = 0;\n        for(let j = 0; j < lst.length; j++){\n  \
    \          if(lst[i] == lst[j]){\n                c++\n            }\n       \
    \ }\n        if(c >= lst[i] && g < lst[i]){\n            g = lst[i];\n       \
    \ }\n    }\n    if(g > 0){\n        return g;\n    }else{\n        return -1;\n\
    \    }\n}\n", "  var highestFrequency = 0;\n  var highestNumber = -1;\n  var map\
    \ = new Map();\n  for(var i = 0; i < lst.length; i++){\n    if(map.has(lst[i])){\n\
    \      map.set(lst[i], map.get(lst[i]) + 1);\n    }\n    else{\n      map.set(lst[i],\
    \ 1);\n    }\n  }\n  var mapIterator = map.keys();\n  for(var key of mapIterator){\n\
    \    if(map.get(key) >= key && key > highestNumber){\n      highestNumber = key;\n\
    \    }\n  }\n  return highestNumber;\n}\nsearch([1,2,2,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5",
  "    for(var i = 0; i < lst.length; i++){\n        if(lst.indexOf(lst[i]) != -1){\n\
    \            return lst[i];\n        }\n    }\n    return -1;\n}", "    let newMap\
    \ = new Map();\n    let res = -1;\n    for(let i=0; i<lst.length; i++){\n    \
    \    if(newMap.has(lst[i])){\n            newMap.set(lst[i], newMap.get(lst[i])+1);\n\
    \        }\n        else{\n            newMap.set(lst[i], 1);\n        }\n   \
    \ }\n    newMap.forEach((value, key) => {\n        if(key<=value && key>res){\n\
    \            res = key;\n        }\n    });\n    return res;\n}\n", "  let nums\
    \ = [];\n  for(let i = 0; i < lst.length; i++){\n    let count = 0;\n    for(let\
    \ j = 0; j < lst.length; j++){\n      if(lst[i] === lst[j]){\n        count++;\n\
    \      }\n    }\n    if(count >= lst[i]){\n      nums.push(lst[i]);\n    }\n \
    \ }\n  if(nums.length === 0){\n    return -1;\n  }\n  return Math.max(...nums);\n\
    }\n", "    var freq = {};\n    for(var i = 0; i < lst.length; i++){\n        if(freq[lst[i]])\
    \ freq[lst[i]] += 1;\n        else freq[lst[i]] = 1;\n    }\n    var values =\
    \ Object.values(freq);\n    var items = Object.keys(freq);\n    if(Math.max(...values)\
    \ >= Math.max(...items)) return Math.max(...items);\n    else return -1;\n}",
  "    const result = lst.filter(v => lst.filter(n => n === v).length >= v).sort((a,\
    \ b) => b - a)[0];\n    return result ? result : -1;\n}", "    let unique = [...new\
    \ Set(lst)];\n    unique.sort((a,b) => b-a);\n    for(let i = 0; i < unique.length;\
    \ i++){\n        if(lst.filter(x => x == unique[i]).length >= unique[i]){\n  \
    \          return unique[i];\n        }\n    }\n    return -1;\n}", "    let freq\
    \ = {}\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] in freq){\n\
    \            freq[lst[i]] += 1\n        }else{\n            freq[lst[i]] = 1\n\
    \        }\n    }\n    let largest = Math.max(...Object.keys(freq))\n    for(let\
    \ i = largest; i > 0; i--){\n        if(freq[i] >= i){\n            return i\n\
    \        }\n    }\n    return -1\n}", "    let greatest = 0;\n    let frequency\
    \ = 0;\n    lst.sort((a,b) => a-b);\n    console.log(lst);\n    let map = new\
    \ Map();\n    for(let i = 0; i < lst.length; i++){\n        if(!map.has(lst[i])){\n\
    \            map.set(lst[i], 1);\n        }else{\n            map.set(lst[i],\
    \ map.get(lst[i]) + 1);\n        }\n    }\n    console.log(map);\n    for(let\
    \ [key, value] of map){\n        if(key > value && key > greatest){\n        \
    \    greatest = key;\n            frequency = value;\n        }\n    }\n    return\
    \ greatest;\n}\n\nlet lst = [1, 2, 2, 2, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8,\
    \ 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11,\
    \ 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13,\
    \ 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15,\
    \ 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,\
    \ 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18,\
    \ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19,\
    \ 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,\
    \ 20, 20, 20, 20, 20, 20,", "    let greatest = null;\n    let highest = 0;\n\
    \    let greatestFrequency = 0;\n    for(let i = 0; i < lst.length; i++){\n  \
    \      let frequency = 0;\n        for(let j = 0; j < lst.length; j++){\n    \
    \        if(lst[i] === lst[j]){\n                frequency++\n            }\n\
    \        }\n        if(lst[i] > greatest && frequency >= lst[i]){\n          \
    \  greatest = lst[i];\n            greatestFrequency = frequency;\n        }\n\
    \        if(frequency > highest){\n            highest = frequency;\n        }\n\
    \    }\n    if(greatest !== null){\n        return greatest;\n    }\n    return\
    \ highest;\n}\n", "  const counter = {};\n  for (let el of lst) {\n    if (counter[el])\
    \ {\n      counter[el]++;\n    } else {\n      counter[el] = 1;\n    }\n  }\n\
    \  let value = -1;\n  for (let el in counter) {\n    if (el > counter[el] && el\
    \ > value) {\n      value = el;\n    }\n  }\n  return value;\n}", "    let checked\
    \ = []\n    let highest = 0\n    let counter = 0\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(!checked.includes(lst[i])){\n            checked.push(lst[i])\n\
    \            for(let j = 0; j < lst.length; j++){\n                if(lst[i] ===\
    \ lst[j]){\n                    counter++\n                }\n            }\n\
    \            if(counter >= lst[i] && lst[i] > highest){\n                highest\
    \ = lst[i]\n            }\n            counter = 0\n        }\n    }\n    if(highest\
    \ === 0){\n        return -1\n    }\n    return highest\n}\n", "   //find the\
    \ biggest integer\n   var max = Math.max(...lst);\n   //start the loop with the\
    \ biggest integer\n   for(var i = max; i > 0; i--){\n     //look in the array\
    \ \n     var condition = lst.filter(function(word){\n       return word == i;\n\
    \     })\n     //return the biggest integer that satisfy the condition\n     if(condition.length\
    \ >= i){\n       return i;\n     }\n   }\n   //otherwise return -1\n   return\
    \ -1;\n}", "  let dict = new Map()\n  for(let el of lst){\n    if(dict.has(el)){\n\
    \      dict.set(el, dict.get(el) + 1)\n    }else{\n      dict.set(el, 1)\n   \
    \ }\n  }\n  let result = dict.forEach((value, key) => {\n    if(value >= key){\n\
    \      return key\n    }\n  })\n  return result ? result : -1\n}\n", "    let\
    \ result = lst.filter(e => e === lst.filter(e1 => e1 === e).length)\n    return\
    \ result.length > 0 ? Math.max(...result) : -1\n}", "  let arr = [...lst].sort((a,b)\
    \ => b-a)\n  for(let i=0; i<arr.length; i++){\n    if(arr[i] === arr[i+1]) continue\n\
    \    if(lst.filter(x => x === arr[i]).length >= arr[i]) return arr[i]\n  }\n \
    \ return -1\n}\n", "  let max = -1;\n  let map = new Map();\n  for(let i = 0;\
    \ i < lst.length; i++){\n    if(map.has(lst[i])){\n      map.set(lst[i], map.get(lst[i])\
    \ + 1);\n    }else{\n      map.set(lst[i], 1);\n    }\n  }\n  map.forEach((value,\
    \ key) => {\n    if(key >= value && key > max){\n      max = key;\n    }\n  });\n\
    \  return max;\n}", "    let v = {}\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(v[lst[i]]){\n            v[lst[i]] += 1\n        } else {\n      \
    \      v[lst[i]] = 1\n        }\n    }\n    let big = 0\n    let bigI = -1\n \
    \   let keys = Object.keys(v)\n    for(let i = 0; i < keys.length; i++){\n   \
    \     if(v[keys[i]] >= keys[i] && parseInt(keys[i]) > big){\n            big =\
    \ parseInt(keys[i])\n            bigI = keys[i]\n        }\n    }\n    return\
    \ bigI\n}", "    if(!lst.length) return -1;\n    const dict = {};\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(dict[lst[i]]) dict[lst[i]]++;\n   \
    \     else dict[lst[i]] = 1;\n    }\n    const keys = Object.keys(dict);\n   \
    \ const values = Object.values(dict);\n    let max = -1;\n    for(let i = 0; i\
    \ < keys.length; i++){\n        if(dict[keys[i]] >= Number(keys[i]) && Number(keys[i])\
    \ > max) max = Number(keys[i]);\n    }\n    return max;\n}\n", "    let max =\
    \ -1;\n    lst.forEach(function(item){\n        if(item >= lst.length){\n    \
    \        if(item > max){\n                if(lst.filter(i => i === item).length\
    \ >= item){\n                    max = item;\n                }\n            }\n\
    \        }\n    });\n    return max;\n}\n", "    lst.sort((a,b)=>a-b);\n    for(let\
    \ i=0;i<lst.length;i++){\n        if(lst[i]>0){\n            let counter=0;\n\
    \            for(let j=0;j<lst.length;j++){\n                if(lst[i]==lst[j]){\n\
    \                    counter++;\n                }\n            }\n          \
    \  if(counter>=lst[i]){\n                return lst[i];\n            }\n     \
    \   }\n    }\n    return -1;\n}\n", "  const result = lst.filter(x => lst.filter(a\
    \ => a === x).length >= x)\n  return result.length > 0 ? Math.max(...result) :\
    \ -1\n}", "    let obj = {};\n    for(let i = 0; i < lst.length; i++){\n     \
    \   if(obj[lst[i]]){\n            obj[lst[i]] = obj[lst[i]] + 1;\n        } else\
    \ {\n            obj[lst[i]] = 1;\n        }\n    }\n    let res = -1;\n    for(let\
    \ key in obj){\n        if(obj[key] >= key && obj[key] > res){\n            res\
    \ = obj[key];\n        }\n    }\n    return res;\n}\n", "    const sorted = lst.sort((a,b)\
    \ => a-b)\n    let bigNum = []\n    let count = 0\n    for(let i = 0; i < sorted.length;\
    \ i++){\n        if(i === sorted.length - 1){\n            if(count >= sorted[i]){\n\
    \                bigNum.push(sorted[i])\n            }\n        }\n        else\
    \ if(sorted[i] === sorted[i+1]){\n            count++\n        }\n        else\
    \ if(sorted[i] !== sorted[i+1]){\n            if(count >= sorted[i]){\n      \
    \          bigNum.push(sorted[i])\n            }\n            count = 0\n    \
    \    }\n    }\n    return bigNum.length > 0 ? bigNum[bigNum.length - 1] : -1\n\
    }\n", "  let b = Math.max(...lst)\n  for(let i = b; i > 0; i--){\n    let a =\
    \ lst.filter(v => v === i)\n    if(a.length >= i){\n      return i\n    }\n  }\n\
    \  return -1\n}\n", "    let arr = [];\n    lst.forEach(i => {\n        if (lst.filter(x\
    \ => x === i).length >= i) arr.push(i);\n    });\n    return arr.length > 0 ?\
    \ Math.max(...arr) : -1;\n}\n", "  let lstObj = lst.reduce((acc,v)=>{\n      if(!acc[v])\
    \ acc[v] = 0;\n      acc[v]++\n      return acc;\n  },{})\n  console.log(lstObj)\n\
    \  let max = 0;\n  for(let key in lstObj){\n      key = parseInt(key);\n     \
    \ if(key > max && lstObj[key] >= key){\n          max = key;\n      }\n  }\n \
    \ return max;\n}", "  if(lst.length === 0) return -1;\n  lst.sort((a,b) => a-b);\n\
    \  let f=[];\n  for(let i=0; i<lst.length; i++){\n    if(lst[i] > lst.length)\
    \ return -1;\n    if(f[lst[i]] === undefined) f[lst[i]] = 1;\n    else f[lst[i]]++;\n\
    \  }\n  for(let i=f.length-1; i>=0; i--){\n    if(f[i] !== undefined && f[i] >=\
    \ i) return i;\n  }\n  return -1;\n}", "    let nums = new Set(lst)\n    let arr\
    \ = []\n    let freq = 0\n    let result = 0\n    for(let i = 0; i < lst.length;\
    \ i++){\n        freq = lst.filter(el => el === lst[i]).length\n        if(freq\
    \ >= lst[i] && !arr.includes(lst[i])){\n            arr.push(lst[i])\n       \
    \ }\n    }\n    arr.sort((a,b) => b - a)\n    if(arr.length > 0){\n        result\
    \ = arr[0]\n    } else {\n        result = -1\n    }\n    return result\n}\n",
  "    // Frequency\n    let frequency = new Map();\n    for(let e of lst){\n    \
    \    if(frequency.has(e)){\n            frequency.set(e, frequency.get(e) + 1);\n\
    \        } else {\n            frequency.set(e, 1);\n        }\n    }\n    //\
    \ Iterate\n    let greatest = -1;\n    for(let i = 0; i < lst.length; i++){\n\
    \        let f = frequency.get(lst[i]);\n        if(f >= lst[i] && lst[i] > greatest){\n\
    \            greatest = lst[i];\n        }\n    }\n    return greatest;\n}\n",
  "\tlet count = 0;\n\tlet sum = 0;\n\tfor(let i = 0; i < lst.length; i++){\n\t\t\
    if(lst[i] > 0){\n\t\t\tcount = lst.filter(item => item === lst[i]).length;\n\t\
    \t\tif(count >= lst[i]){\n\t\t\t\tsum = lst[i];\n\t\t\t}\n\t\t} else {\n\t\t\t\
    return -1;\n\t\t}\n\t}\n\treturn sum;\n}\n", "\tvar bigNum = 0;\n\tvar bigNumFreq\
    \ = 0;\n\tvar counter = 1;\n\tfor(var i = 0; i < lst.length; i++){\n\t\tif(lst[i]\
    \ > bigNum){\n\t\t\tbigNum = lst[i];\n\t\t}\n\t}\n\tfor(var i = 0; i < lst.length;\
    \ i++){\n\t\tfor(var j = 0; j < lst.length; j++){\n\t\t\tif(lst[i] == lst[j]){\n\
    \t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\t\tif(counter >= lst[i] && lst[i] > bigNumFreq){\n\
    \t\t\tbigNumFreq = lst[i];\n\t\t}\n\t\tcounter = 1;\n\t}\n\tif(bigNumFreq == 0){\n\
    \t\treturn -1;\n\t}\n\treturn bigNumFreq;\n}\n", "    let res = [];\n    let max\
    \ = Math.max(...lst);\n    for(let i = 1; i <= max; i++){\n        let count =\
    \ 0;\n        for(let j = 0; j < lst.length; j++){\n            if(lst[j] ===\
    \ i){\n                count++;\n            }\n        }\n        if(count >=\
    \ i){\n            res.push(i);\n        }\n    }\n    if(res.length === 0){\n\
    \        return -1;\n    }\n    return Math.max(...res);\n}", "    let freq =\
    \ {}\n    let greatest = -1\n    for(let i = 0; i < lst.length; i++){\n      \
    \  if(!freq[lst[i]]){\n            freq[lst[i]] = 1\n        }else{\n        \
    \    freq[lst[i]]++\n        }\n    }\n    for(let key in freq){\n        if(key\
    \ >= freq[key] && key > greatest){\n            greatest = key\n        }\n  \
    \  }\n    return greatest\n}", "    let count = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        for(let j = 0; j < lst.length; j++){\n            if(lst[i] ===\
    \ lst[j]){\n                count++;\n            }\n        }\n        if(count\
    \ >= lst[i]){\n            return lst[i];\n        }\n        count = 0;\n   \
    \ }\n    return -1;\n}\n", "    let obj = {}\n    let max = 0\n    for(let i =\
    \ 0; i < lst.length; i++){\n        if(obj[lst[i]]){\n            obj[lst[i]]\
    \ += 1\n        } else {\n            obj[lst[i]] = 1\n        }\n    }\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(obj[lst[i]] >= lst[i] && lst[i] > max){\n\
    \            max = lst[i]\n        }\n    }\n    return max == 0 ? -1 : max\n\
    }\n", "  return +lst.filter(i => lst.filter(j => j === i).length >= i).sort((a,\
    \ b) => b - a)[0] || -1;\n}", "    let obj = {};\n    let found;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(obj[lst[i]] === undefined){\n     \
    \       obj[lst[i]] = 1;\n        } else {\n            obj[lst[i]]++;\n     \
    \   }\n    }\n    let keys = Object.keys(obj);\n    for(let i = 0; i < keys.length;\
    \ i++){\n        if(obj[keys[i]] >= keys[i]){\n            found = keys[i];\n\
    \        }\n    }\n    if(found === undefined){\n        return -1;\n    } else\
    \ {\n        return found;\n    }\n}", "    let obj = {};\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(obj[lst[i]]){\n            obj[lst[i]]++;\n\
    \        }else{\n            obj[lst[i]] = 1;\n        }\n    }\n    let max =\
    \ -1;\n    for(let key in obj){\n        if(obj[key] >= key && key > max){\n \
    \           max = key;\n        }\n    }\n    return max;\n}\n", "  var hash =\
    \ {};\n  var result = -1;\n  for(var i = 0; i < lst.length; i++){\n    if(hash[lst[i]])\
    \ hash[lst[i]]++;\n    else hash[lst[i]] = 1;\n  }\n  for(var i = 0; i < lst.length;\
    \ i++){\n    if(hash[lst[i]] >= lst[i] && result < lst[i]) result = lst[i];\n\
    \  }\n  return result;\n}\n", "  return lst.reduce((acc, item) => {\n    if (item\
    \ in acc) {\n      acc[item] += 1;\n    } else {\n      acc[item] = 1;\n    }\n\
    \    return acc;\n  }, {});\n}\n", "    var max = 1\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] > max){\n            max = lst[i]\n        }\n    }\n\
    \    var arr = new Array(max)\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(!arr[lst[i]]){\n            arr[lst[i]] = 1\n        }else{\n        \
    \    arr[lst[i]]++\n        }\n    }\n    for(var i = max; i > 0; i--){\n    \
    \    if(arr[i] && arr[i] >= i){\n            return i\n        }\n    }\n    return\
    \ -1\n}", "    var greatest = 0;\n    for(var i = 0; i < lst.length; i++){\n \
    \       var count = 0;\n        for(var j = 0; j < lst.length; j++){\n       \
    \     if(lst[i] == lst[j]){\n                count++;\n            }\n       \
    \ }\n        if(count >= lst[i] && lst[i] > greatest){\n            greatest =\
    \ lst[i];\n        }\n    }\n    if(greatest == 0){\n        return -1;\n    }\n\
    \    return greatest;\n}\nvar lst = [2, 3, 5, 2, 1, 4, 4, 2, 1, 2, 4, 2, 2, 2,\
    \ 1, 2, 2, 2, 3, 2, 3, 3, 3, 2, 1, 2, 3, 1, 3, 3, 3, 2, 1, 2, 1, 2, 2, 2, 1, 2,\
    \ 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2,\
    \ 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2,\
    \ 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2,\
    \ 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2,\
    \ 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2,\
    \ 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2,", "  const myList = lst.sort((a,b)\
    \ => a-b);\n  const freq = [...new Set(myList)].map(n => myList.filter(m => m\
    \ === n).length);\n  const max = Math.max(...freq);\n  if (max < 2) return -1;\n\
    \  return (freq.indexOf(max) > 0) ? freq.indexOf(max) : -1;\n}\n", "    let newArr\
    \ = [];\n    for(let i = 0; i < lst.length; i++){\n        if(newArr.indexOf(lst[i])\
    \ === -1){\n            newArr.push(lst[i]);\n        }\n    }\n    let count\
    \ = 0;\n    let highestCount = 0;\n    let highestNum = 0;\n    for(let j = 0;\
    \ j < newArr.length; j++){\n        for(let k = 0; k < lst.length; k++){\n   \
    \         if(newArr[j] === lst[k]){\n                count++;\n            }\n\
    \        }\n        if(count >= newArr[j] && newArr[j] > highestNum){\n      \
    \      highestNum = newArr[j];\n            highestCount = count;\n        }\n\
    \        count = 0;\n    }\n    if(highestNum === 0){\n        return -1;\n  \
    \  }\n    return highestNum;\n}", "    let  a = lst.filter(x => x > 0).map(x =>\
    \ x.toString().repeat(x)).map(Number).filter(x => x > 0).sort((a,b) => a - b)\n\
    \    return a.length == 0 ? -1 : a[a.length - 1]\n  }", "    if(lst.length ==\
    \ 0) return -1;\n    const numObj = {};\n    let maxValue = Math.max(...lst);\n\
    \    lst.forEach(num => {\n        if(num == 0) return;\n        numObj[num] =\
    \ numObj[num] + 1 || 1;\n    });\n    let largestNum = null;\n    for(let key\
    \ in numObj){\n        let num = parseInt(key);\n        if(numObj[key] >= num\
    \ && num > largestNum) largestNum = num;\n    }\n    if(largestNum === null) return\
    \ -1;\n    return largestNum;\n}", '    //lst = [2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3',
  "    var obj = {};\n    var max = 0;\n    var result = -1;\n    for(var i = 0; i\
    \ < lst.length; i++){\n        if(obj[lst[i]] === undefined){\n            obj[lst[i]]\
    \ = 1;\n        }else{\n            obj[lst[i]] += 1;\n        }\n    }\n    for(var\
    \ prop in obj){\n        if(obj[prop] >= prop && prop > max){\n            max\
    \ = prop;\n            result = max;\n        }\n    }\n    return result;\n}",
  "  let hash = {};\n  let max = -1;\n  for(let i = 0; i < lst.length; i++){\n   \
    \ if(hash[lst[i]]){\n      hash[lst[i]] = hash[lst[i]] + 1;\n    }else{\n    \
    \  hash[lst[i]] = 1;\n    }\n  }\n  for(let key in hash){\n    if(hash[key] >=\
    \ key && key > max){\n      max = key;\n    }\n  }\n  return max;\n}\n", "   \
    \ //your code here\n    let findIt = [...new Set(lst)];\n    let found = -1;\n\
    \    let foundAmount = 0;\n    for(let i = 0; i < findIt.length; i++){\n     \
    \   let amount = 0;\n        for(let j = 0; j < lst.length; j++){\n          \
    \  if(findIt[i] === lst[j]){\n                amount++;\n            }\n     \
    \   }\n        if(amount >= findIt[i] && amount > foundAmount){\n            found\
    \ = findIt[i];\n            foundAmount = amount;\n        }\n    }\n    return\
    \ found;\n}", "    var most = 1;\n    var count;\n    var num;\n    for(var i\
    \ = 0; i < lst.length; i++){\n        count = 0;\n        for(var x = 0; x < lst.length;\
    \ x++){\n            if(lst[i] == lst[x]){\n                count++;\n       \
    \     }\n        }\n        if(count >= lst[i] && count >= most){\n          \
    \  most = count;\n            num = lst[i];\n        }\n    }\n    if(most <=\
    \ 1){\n        return -1;\n    }\n    return num;\n}\n", "    let counts = new\
    \ Array(lst.length).fill(0);\n    for(let i = 0; i < lst.length; i++){\n     \
    \   counts[lst[i] - 1]++;\n    }\n    for(let i = counts.length - 1; i >= 0; i--){\n\
    \        if(counts[i] >= i + 1){\n            return i + 1;\n        }\n    }\n\
    \    return -1;\n}\n", "    let max = -1;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst.filter(a => a === lst[i]).length >= lst[i] && lst[i] >\
    \ max){\n            max = lst[i];\n        }\n    }\n    return max;\n}\n", " \
    \   let result = -1;\n    let temp = [];\n    lst.sort((a,b) => a-b);\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] === lst[i+1]){\n           \
    \ temp.push(lst[i]);\n        }\n    }\n    for(let j = 0; j < temp.length; j++){\n\
    \        if(temp[j] >= temp.length){\n            result = temp[j];\n        }\n\
    \    }\n    return result;\n}", "    let freq={};\n    for(let i=0;i<lst.length;i++){\n\
    \        let n=lst[i];\n        if(freq[n]){\n            freq[n]++;\n       \
    \ }else{\n            freq[n]=1;\n        }\n    }\n    let keys=Object.keys(freq);\n\
    \    let output=0;\n    for(let i=0;i<keys.length;i++){\n        let k=keys[i];\n\
    \        if(Number(k)<=freq[k] && output<Number(k)){\n            output=Number(k);\n\
    \        }\n    }\n    return output;\n}\n", "    // convert the input list into\
    \ a hash table with count of items\n    let myHash = {};\n    lst.forEach(x =>\
    \ {\n        myHash[x] = (myHash[x]||0) + 1;\n    });\n    // create a new list\
    \ of the integers with counts that meet the requirement\n    let myCounts = Object.keys(myHash).map(key\
    \ => parseInt(key, 10)).filter(x => x <= myHash[x]);\n    // if there are none,\
    \ return -1\n    if (myCounts.length === 0) return -1;\n    // return the max\
    \ of the counts that meet the requirement\n    return Math.max(...myCounts);\n\
    }", "   let obj = {}\n   let max = -1;\n   for(let i=0; i<lst.length; i++){\n\
    \     if(obj[lst[i]]){\n       obj[lst[i]]++;\n     }else{\n       obj[lst[i]]\
    \ = 1;\n     }\n     if(obj[lst[i]] >= lst[i] && lst[i] > max){\n       max =\
    \ lst[i];\n     }\n   }\n   return max;\n}", "  const map = lst.reduce((acc, curr)\
    \ => {\n    acc[curr] = acc[curr] ? acc[curr] + 1 : 1;\n    return acc;\n  },\
    \ {});\n  let max = -1;\n  Object.keys(map).forEach(key => {\n    if (key < map[key]\
    \ && key > max) {\n      max = key;\n    }\n  });\n  return max;\n}", "    let\
    \ hash = {}\n    let result = -1\n    for(let i=0; i<lst.length; i++){\n     \
    \   if(!hash[lst[i]]){\n            hash[lst[i]] = 1\n        } else {\n     \
    \       hash[lst[i]]++\n        }\n    }\n    for(key in hash){\n        if(hash[key]\
    \ >= key && hash[key] > result && parseInt(key) > 0){\n            result = hash[key]\n\
    \        }\n    }\n    return result\n}\n", "    //Your code here.\n    \n   \
    \ let greatestInt = 0;\n    let greatestIntCount = 0;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        let counter = 0;\n        for (let j = 0; j < lst.length;\
    \ j++) {\n            if (lst[i] === lst[j]) {\n                counter++;\n \
    \           }\n        }\n        if (counter >= lst[i] && counter > greatestIntCount)\
    \ {\n            greatestInt = lst[i];\n            greatestIntCount = counter;\n\
    \        }\n    }\n    if (greatestInt) {\n        return greatestInt;\n    }\
    \ else {\n        return -1;\n    }\n}\nsearch([2,2,3,3,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
  "  // Add your code here\n  let found = false;\n  let count;\n  let max = 0;\n \
    \ let current;\n  let greatest = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \      if(lst[i] > max){\n          max = lst[i];\n      }\n  }\n  for(let i =\
    \ 0; i < max; i++){\n      count = 0;\n      for(let j = 0; j < lst.length; j++){\n\
    \          if(lst[j] === i){\n              count++;\n          }\n      }\n \
    \     if(count >= i && i > greatest){\n          greatest = i;\n          found\
    \ = true;\n      }\n  }\n  if(found){\n      return greatest;\n  }\n  return -1;\n\
    }\n", "  let freq = {};\n  let result = -1;\n  for(let i = 0; i < lst.length;\
    \ i++){\n    let elem = lst[i];\n    if(!freq[elem]){\n      freq[elem] = 1;\n\
    \    } else {\n      freq[elem] += 1;\n    }\n  }\n  for(let i = 0; i < lst.length;\
    \ i++){\n    let elem = lst[i];\n    if(freq[elem] >= elem && elem > result){\n\
    \      result = elem;\n    }\n  }\n  return result;\n}\n", "    if(lst.length\
    \ === 0) return -1;\n    let result = [];\n    lst.forEach(element => {\n    \
    \    if(lst.filter(elem => elem === element).length >= element) result.push(element);\n\
    \    });\n    return result.length > 0 ? Math.max(...result) : -1;\n}\n", "\t\
    let map = new Map();\n\tfor(let i = 0; i < lst.length; i++){\n\t\tlet num = lst[i];\n\
    \t\tif(!map.has(num)){\n\t\t\tmap.set(num, 1);\n\t\t} else {\n\t\t\tmap.set(num,\
    \ map.get(num) + 1);\n\t\t}\n\t}\n\tlet max = -1;\n\tfor(let [key, value] of map){\n\
    \t\tif(key <= value && key > max){\n\t\t\tmax = key;\n\t\t}\n\t}\n\treturn max;\n\
    }\n", "    var searchArr = [];\n    var i = 0;\n    var j = 0;\n    var counter\
    \ = 0;\n    var greatest = 0;\n    var freq = 0;\n    var value = 0;\n    while(i\
    \ < lst.length){\n        searchArr.push(lst[i]);\n        searchArr.sort(function(a,\
    \ b){return a-b});\n        while(j < searchArr.length){\n            if(searchArr[j]\
    \ == searchArr[i]){\n                counter++;\n            }\n            if(counter\
    \ >= searchArr[i]){\n                greatest = searchArr[i];\n              \
    \  freq = counter;\n                value = greatest;\n            }\n       \
    \     j++;\n        }\n        counter = 0;\n        j = 0;\n        i++;\n  \
    \  }\n    if(value != 0){\n        return value;\n    }\n    else{\n        return\
    \ -1;\n    }\n}\n", "    let counts = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        counts[lst[i]] = (counts[lst[i]] || 0) + 1;\n    }\n    let max\
    \ = Math.max(...lst);\n    for(let i = max; i > 0; i--){\n        if(counts[i]\
    \ === i){\n            return i;\n        }\n    }\n    return -1;\n}", "    const\
    \ unique = [...new Set(lst)];\n    const result = unique.filter(num => lst.filter(item\
    \ => item === num).length >= num);\n    return result.length !== 0 ? Math.max(...result)\
    \ : -1;\n  }", "    let nums = {};\n    let count = 0;\n    for(let num of lst){\n\
    \        if(nums[num]){\n            nums[num] += 1;\n        } else {\n     \
    \       nums[num] = 1;\n        }\n    }\n    for(let num in nums){\n        if(nums[num]\
    \ >= num){\n            count = num;\n        }\n    }\n    if(count === 0){\n\
    \        return -1;\n    }\n    return count;\n}", "    let output = -1;\n   \
    \ for(let i = 0; i < lst.length; i++){\n        let key = lst[i];\n        let\
    \ count = 0;\n        for(let j = 0; j < lst.length; j++){\n            if(lst[j]\
    \ === key){\n                count++;\n            }\n        }\n        if(count\
    \ >= key && key > output){\n            output = key;\n        }\n    }\n    return\
    \ output;\n}\n", "  let intSums = {};\n  let maxNum = 1;\n  for(let i = 0; i <\
    \ lst.length; i++){\n    let curNum = lst[i];\n    if(intSums[curNum]){\n    \
    \  intSums[curNum] += 1;\n    } else {\n      intSums[curNum] = 1;\n    }\n  \
    \  if(curNum > maxNum){\n      maxNum = curNum;\n    }\n  }\n  for(let j = maxNum;\
    \ j > 0; j--){\n    if(intSums[j] >= j){\n      return j;\n    }\n  }\n  return\
    \ -1;\n}", "    //lst is a list of positive integers\n    let obj = {};\n    let\
    \ newArr = [];\n    let j = 0;\n    for(let i=0; i<lst.length; i++){\n       \
    \ if(!obj[lst[i]]){\n            obj[lst[i]] = lst[i];\n            newArr[j]\
    \ = lst[i];\n            j++;\n        }\n    }\n    newArr.sort((a,b)=>{return\
    \ a-b});\n    console.log(newArr);\n    let key = newArr.length;\n    for(let\
    \ i=0; i<newArr.length; i++){\n        if(newArr[i] === key){\n            return\
    \ newArr[i];\n        }\n        key--;\n    }\n    return -1;\n}\n", "  let gt\
    \ = lst.filter(v => v > 0).sort((a,b) => a-b);\n  if(gt.length == 0) return -1;\n\
    \  let hash = {};\n  for(let i = 0; i < gt.length; i++){\n    if(hash[gt[i]]){\n\
    \      hash[gt[i]]++;\n    } else {\n      hash[gt[i]] = 1;\n    }\n  }\n  let\
    \ freq = Object.values(hash);\n  let sortedFreq = freq.sort((a,b) => b-a);\n \
    \ let nums = Object.keys(hash);\n  for(let i = 0; i < sortedFreq.length; i++){\n\
    \    if(sortedFreq[i] >= nums[i]){\n      return nums[i];\n    }\n  }\n  return\
    \ -1;\n}", "    let table = new Map();\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(table.has(lst[i])){\n            table.set(lst[i], table.get(lst[i])\
    \ + 1);\n        }else{\n            table.set(lst[i], 1);\n        }\n    }\n\
    \    let biggestNum = -1;\n    let highestFreq = 0;\n    for(let j = 0; j < lst.length;\
    \ j++){\n        if(table.get(lst[j]) >= lst[j] && table.get(lst[j]) > highestFreq){\n\
    \            biggestNum = lst[j];\n            highestFreq = table.get(lst[j]);\n\
    \        }\n    }\n    return biggestNum;\n}\n", "   // ...\n   let map = new\
    \ Map();\n   let max = 1;\n   for(let item of lst){\n       if(!map.has(item)){\n\
    \           map.set(item, 1);\n       } else {\n           map.set(item, map.get(item)\
    \ + 1);\n       }\n   }\n   for(let item of map.keys()){\n       if(map.get(item)\
    \ >= item && map.get(item) > max){\n           max = map.get(item);\n       }\n\
    \   }\n   return max !== 1 ? max : -1;\n}", "  //create a map object to count\
    \ the number of each integer\n  let freq = {};\n  //loop through list and add\
    \ integers to the map object\n  lst.forEach(el => {\n    //initialize frequency\
    \ of the integer to zero\n    if(!freq[el]){\n      freq[el] = 0;\n    }\n   \
    \ //increment frequency of the integer\n    freq[el]++;\n  });\n  //filter out\
    \ all values below one\n  let onePlus = Object.keys(freq).filter(el => el > 0);\n\
    \  let result = -1;\n  //loop through each integer in the map object\n  onePlus.forEach(el\
    \ => {\n    //if the frequency of the integer is equal to or greater than the\
    \ value of the integer \n    //and it is greater than the current result\n   \
    \ if(freq[el] >= el && el > result){\n      //set the result to that integer\n\
    \      result = el;\n    }\n  });\n  return result;\n}", "let obj = {};\nlet max\
    \ = 0;\n\nfor(let i = 0; i < lst.length; i++){\n    if(!obj[lst[i]]){\n      \
    \  obj[lst[i]] = 1;\n    } else {\n        obj[lst[i]] += 1;\n    }\n}\n\nfor(let\
    \ key in obj){\n    if(obj[key] >= key && key > max){\n        max = key;\n  \
    \  }\n}\nif(max === 0){\n    return -1;\n} else {\n    return max;\n}\n}", " \
    \   var result = new Array();\n    lst.sort();\n    result = lst.filter(function(item,\
    \ pos) {\n        return lst.indexOf(item) == pos;\n    })\n    //console.log(result);\n\
    \    var arr = new Array();\n    for(var i = 0; i < result.length; i++){\n   \
    \     var count = 0;\n        for(var j = 0; j < lst.length; j++){\n         \
    \   if(result[i] == lst[j]){\n                count++;\n            }\n      \
    \  }\n        arr.push(count);\n    }\n    //console.log(arr);\n    var max =\
    \ 0;\n    for(var i = 0; i < arr.length; i++){\n        if(result[i] <= arr[i]){\n\
    \            max = result[i];\n        }\n    }\n    if(max == 0){\n        return\
    \ -1;\n    }else{\n        return max;\n    }\n}", "  var counts = {}\n  for (var\
    \ i = 0; i < lst.length; i++) {\n    if (!counts[lst[i]]) {\n      counts[lst[i]]\
    \ = 1\n    } else {\n      counts[lst[i]] += 1\n    }\n  }\n  var val = -1\n \
    \ for (var count in counts) {\n    if (counts[count] >= count && count > val)\
    \ {\n      val = count\n    }\n  }\n  return val\n}\n", "   let max=0\n   let\
    \ obj={}\n   for(let i=0;i<lst.length;i++){\n      if(lst[i]>max){\n         max=lst[i]\n\
    \      }\n      if(!obj[lst[i]]){\n         obj[lst[i]]=1\n      }else{\n    \
    \     obj[lst[i]]++\n      }\n   }\n   for(let i=max;i>0;i--){\n      if(obj[i]>=i){\n\
    \         return i\n      }\n   }\n   return -1\n}", "    let sorted = [...lst].sort((a,b)\
    \ => b-a)\n    let freq = {}\n    for(let i = 0; i < sorted.length; i++){\n  \
    \      if(freq[sorted[i]] === undefined){\n            freq[sorted[i]] = 1\n \
    \       } else {\n            freq[sorted[i]]++\n        }\n    }\n    for(let\
    \ key in freq){\n        if(freq[key] >= key){\n            return key\n     \
    \   }\n    }\n    return -1\n}", "    let max = Math.max(...lst);\n    for(let\
    \ i = max; i > 0; i--){\n        if(lst.filter(item => item === i).length >= i){\n\
    \            return i;\n        }\n    }\n    return -1;\n}\n\nmodule.exports\
    \ = search;", "  // your code here\n  let obj = {};\n  for(let num of lst){\n\
    \    if(obj[num]){\n      obj[num]++\n    }else{\n      obj[num] = 1;\n    }\n\
    \  }\n  for(let key in obj){\n    if(obj[key] >= key){\n      return key;\n  \
    \  }\n  }\n  return -1;\n}\n", "    let num = -1;\n    let obj = {};\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(obj[lst[i]]){\n            obj[lst[i]]\
    \ += 1;\n        } else {\n            obj[lst[i]] = 1;\n        }\n    }\n  \
    \  for(const key in obj){\n        if(obj[key] >= key && key > num){\n       \
    \     num = key;\n        }\n    }\n    return num;\n}", "    var arr = new Array(lst.length);\n\
    \    for(var i = 0; i < lst.length; i++){\n        arr[i] = 0;\n    }\n    for(var\
    \ i = 0; i < lst.length; i++){\n        arr[lst[i]]++;\n    }\n    for(var i =\
    \ lst.length; i > 0; i--){\n        if(arr[i] >= i){\n            return i;\n\
    \        }\n    }\n    return -1;\n}", "  let max = Math.max(...lst);\n  for (let\
    \ i = 1; i <= max; i++) {\n    if (lst.filter(v => v === i).length >= i) {\n \
    \     return i;\n    }\n  }\n  return -1;\n}\n", "    const nums = new Map();\n\
    \    for(let num of lst){\n        nums.set(num, nums.has(num) ? nums.get(num)\
    \ + 1 : 1);\n    }\n    return lst.filter(x => x == nums.get(x)).reduce((a, b)\
    \ => a > b ? a : b, -1);\n}", "  return lst.filter(x => lst.filter(y => y===x).length>=x).length>0?Math.max(...lst.filter(x\
    \ => lst.filter(y => y===x).length>=x)):-1\n}", "  const numMap = lst.reduce((map,\
    \ item) => {\n    map[item] = (map[item] || 0) + 1;\n    return map;\n  }, {});\n\
    \  const values = Object.keys(numMap).map(key => parseInt(key));\n  const filtered\
    \ = values.filter(val => numMap[val] >= val);\n  return filtered.length > 0 ?\
    \ Math.max(...filtered) : -1;\n}", "    let obj = {}\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(!obj[lst[i]]){\n            obj[lst[i]] = 1\n        } else\
    \ {\n            obj[lst[i]]++\n        }\n    }\n    console.log(obj)\n    let\
    \ keys = Object.keys(obj)\n    let values = Object.values(obj)\n    for(let i\
    \ = 0; i < keys.length; i++){\n        if(obj[values[i]] >= values[i]){\n    \
    \        return values[i]\n        }\n    }\n    return -1\n}\n", "    const count\
    \ = {}\n    for(let i = 0; i < lst.length; i++){\n        if(count[lst[i]]) count[lst[i]]++\n\
    \        else count[lst[i]] = 1\n    }\n    let result = -1\n    for(let key in\
    \ count){\n        if(count[key] >= key && key > result) result = key\n    }\n\
    \    return result\n}", "  const newList = lst.filter(num => num > 0)\n  const\
    \ answers = newList.filter(num => num === newList.filter(num2 => num2 === num).length)\n\
    \  return answers.length === 0 ? -1 : Math.max(...answers)\n}\n", "    let numMap\
    \ = new Map();\n    let maxFrequency = 0;\n    let result = -1;\n    lst.forEach(num\
    \ => {\n        if (numMap.has(num)) {\n            numMap.set(num, numMap.get(num)\
    \ + 1);\n        } else {\n            numMap.set(num, 1);\n        }\n      \
    \  if (numMap.get(num) > maxFrequency) {\n            maxFrequency = numMap.get(num);\n\
    \            result = num;\n        }\n    });\n    return result;\n}\n", "  \n\
    \    var newLst = [];\n    var n = 0;\n    lst.forEach(function(item){\n     \
    \ n = lst.filter(x => x == item).length;\n      if(n >= item && item > 0){\n \
    \       newLst.push(item);\n      }\n    });\n    if(newLst.length == 0){\n  \
    \    return -1;\n    }else{\n      return Math.max(...newLst);\n    }\n  }\n \
    \ \n  var arr = [2,2,2,2,1,1,1,1,0,0,0,0,2,2,2,2,1,1,1,1,0,0,0,0,2,2,2,2,1,1,1,1,0,0,0,0,2,2,2,2,1,1,1,1,0,0,0,0,2,2,2,2,1,1,1,1,0,0,0,0,2,2,2,2,1,1,1,1,0,0,0,0,2,2,2,2,1,1,1,1,0,0,0,0,2,2,2,2,1,1,1,1,0,0,0,0,2,2,2,2,1,1,1,1,0,0,0,0,2,2,2,2,1,1,1,1,0,0,0,0,2,2,2,2,1,1,1,1,0,0,0,0,2,2,2,2,1,1,1,1,0,0,0,0,2,2,2,2,1,1,1,1,0,0,0,0,2,2,2,2,1,1,1,1,0,0,0,0,2,2,2,2,1,1,1,1,0,0,0,0,2,2,2,2,1,1,1,1,0,0,0,0,2,2,2",
  "    if (lst.length == 0) return -1;\n    let freq = {};\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        let int = lst[i];\n        if (freq[int]) freq[int]++;\n\
    \        else freq[int] = 1;\n    }\n    console.log(freq);\n    let keys = Object.keys(freq);\n\
    \    let max = -1;\n    for (let i = 0; i < keys.length; i++) {\n        let key\
    \ = keys[i];\n        let val = freq[key];\n        if (key <= val && key > max)\
    \ max = key;\n    }\n    return max;\n}", "    let freq = {};\n    let keys =\
    \ [];\n    let res = -1;\n    lst.forEach(x => {\n        if(freq[x]) freq[x]++\n\
    \        else {freq[x] = 1; keys.push(x);}\n    });\n    keys.sort((a,b) => a\
    \ - b);\n    keys.forEach(x => {\n        if(x <= freq[x]) res = x;\n    });\n\
    \    return res;\n}\n", "  //..\n  const hashTable = {};\n  let greatest = -1;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    const el = lst[i];\n    hashTable[el]\
    \ = hashTable[el] + 1 || 1;\n    if (el >= hashTable[el] && el > greatest) {\n\
    \      greatest = el;\n    }\n  }\n  return greatest;\n}\n", "    const d = {}\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(d[lst[i]] === undefined){\n\
    \            d[lst[i]] = 1\n        }else{\n            d[lst[i]]++\n        }\n\
    \    }\n    let nums = []\n    for(key in d){\n        if(key == d[key]){\n  \
    \          nums.push(parseInt(key))\n        }\n    }\n    return nums.length\
    \ === 0 ? -1 : Math.max(...nums)\n}\n", "    let gte = lst.filter(x => lst.filter(n\
    \ => n === x).length >= x);\n    return gte.length > 0 ? Math.max(...gte) : -1;\n\
    }\n", "    const dict = {};\n    for(let i = 0; i < lst.length; i++){\n      \
    \  const n = lst[i];\n        if(!dict[n]){\n            dict[n] = 0;\n      \
    \  }\n        dict[n]++;\n    }\n    const keys = Object.keys(dict);\n    for(let\
    \ j = 0; j < keys.length; j++){\n        const key = parseInt(keys[j]);\n    \
    \    if(key <= dict[key]){\n            return key;\n        }\n    }\n    return\
    \ -1;\n}\n\nsearch([1, 1, 1, 2, 4, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 3, 2,\
    \ 3, 1, 2, 2, 3, 2, 3, 2, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 1, 2, 1, 2, 1, 2, 1, 2,\
    \ 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2,\
    \ 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2,\
    \ 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2,\
    \ 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2,\
    \ 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2,\
    \ 1, 2, 3, 2, 1, 2, 3, 2, 1", "    let max = -1;\n    lst.forEach(e => {\n   \
    \     let freq = lst.filter(f => f === e).length;\n        if(freq >= e && e >\
    \ max){\n            max = e;\n        }\n    });\n    return max;\n}", "    lst.sort(function(a,\
    \ b){return a-b});\n    for(let i = lst.length-1; i >= 0; i--){\n        if(lst[i]\
    \ == lst[i-1]){\n            return lst[i];\n        }\n    }\n    return -1;\n\
    }\n", "    let a = lst.filter(x => x < lst.length).filter(x => x === lst.filter(y\
    \ => y == x).length)\n    return a.length > 0 ? Math.max(...a) : -1\n}", "   \
    \ let count = {};\n    for(let i = 0; i < lst.length; i++){\n        let num =\
    \ lst[i];\n        if(count[num]){\n            count[num]++\n        } else {\n\
    \            count[num] = 1;\n        }\n    }\n    let max = -1;\n    for(let\
    \ [key, val] of Object.entries(count)){\n        if(parseInt(key) <= val && parseInt(key)\
    \ > max){\n            max = parseInt(key);\n        }\n    }\n    return max;\n\
    }"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
