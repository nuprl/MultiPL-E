name: HumanEval_96_count_up_to
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Implement a function that takes an non-negative integer and returns a list\
  \ of the first n\n    // integers that are prime numbers and less than n.\n    //\
  \ for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong, 3l.toLong))\n\
  \    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n    // >>> countUpTo((20l))\n\
  \    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong,\
  \ 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n    // (List[Long]())\n\
  \    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def countUpTo(n : Long) :\
  \ List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countUpTo((5l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong))));\n    assert(countUpTo((6l)).equals((List[Long](2l.toLong, 3l.toLong,\
  \ 5l.toLong))));\n    assert(countUpTo((7l)).equals((List[Long](2l.toLong, 3l.toLong,\
  \ 5l.toLong))));\n    assert(countUpTo((10l)).equals((List[Long](2l.toLong, 3l.toLong,\
  \ 5l.toLong, 7l.toLong))));\n    assert(countUpTo((0l)).equals((List[Long]())));\n\
  \    assert(countUpTo((22l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))));\n    assert(countUpTo((1l)).equals((List[Long]())));\n\
  \    assert(countUpTo((18l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(countUpTo((47l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong,\
  \ 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n\
  \    assert(countUpTo((101l)).equals((List[Long](2l.toLong, 3l.toLong, 5l.toLong,\
  \ 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong,\
  \ 31l.toLong, 37l.toLong, 41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong,\
  \ 61l.toLong, 67l.toLong, 71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong,\
  \ 97l.toLong))));\n    }\n\n}\n"
completions: ["        def isPrime(n : Long) : Boolean = {\n            if (n == 2)\
    \ return true\n            if (n < 2 || n % 2 == 0) return false\n           \
    \ var i = 3\n            while (i <= sqrt(n)) {\n                if (n % i ==\
    \ 0) return false\n                i += 2\n            }\n            return true\n\
    \        }\n        var result = List[Long]()\n        var i = 2l\n        while\
    \ (i < n) {\n            if (isPrime(i)) result = result :+ i\n            i +=\
    \ 1\n        }\n        return result", "        var result = List[Long]()\n \
    \       for (i <- 2l to n) {\n            if (isPrime(i)) result = result :+ i\n\
    \        }\n        result", "        def isPrime(n : Long) : Boolean = {\n  \
    \          if (n <= 1) return false\n            if (n == 2) return true\n   \
    \         if (n % 2 == 0) return false\n            val sqrtN = sqrt(n).toLong\n\
    \            for (i <- 3l to sqrtN by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        var list =\
    \ List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) list\
    \ = list :+ i\n        }\n        return list", "        // your code here\n \
    \       def isPrime(n : Long) : Boolean = {\n            if (n < 2) {\n      \
    \          return false\n            }\n            if (n == 2) {\n          \
    \      return true\n            }\n            if (n % 2 == 0) {\n           \
    \     return false\n            }\n            val sqrt = math.sqrt(n).toLong\n\
    \            var i = 3l\n            while (i <= sqrt) {\n                if (n\
    \ % i == 0) {\n                    return false\n                }\n         \
    \       i += 2\n            }\n            return true\n        }\n        var\
    \ result = List[Long]()\n        var i = 2l\n        while (i < n) {\n       \
    \     if (isPrime(i)) {\n                result = result :+ i\n            }\n\
    \            i += 1\n        }\n        return result", "        if (n < 2) return\
    \ List[Long]()\n        val primes = new ArrayBuffer[Long]\n        for (i <-\
    \ 2l to n) {\n            if (isPrime(i)) primes += i\n        }\n        primes.toList",
  "        def isPrime(n : Long) : Boolean = {\n            if (n == 1) false\n  \
    \          else if (n == 2) true\n            else if (n % 2 == 0) false\n   \
    \         else {\n                val sqrtN = sqrt(n).toLong\n               \
    \ for (i <- 3l to sqrtN by 2) {\n                    if (n % i == 0) return false\n\
    \                }\n                true\n            }\n        }\n        if\
    \ (n == 0) List[Long]()\n        else {\n            val list = new ListBuffer[Long]\n\
    \            for (i <- 2l to n) {\n                if (isPrime(i)) list += i\n\
    \            }\n            list.toList\n        }", "        val primes = new\
    \ ArrayBuffer[Long]\n        if (n > 1) {\n            val sieve = new Array[Boolean](n.toInt)\n\
    \            for (i <- 2 until n.toInt) {\n                if (!sieve(i)) {\n\
    \                    primes += i\n                    var j = i * i\n        \
    \            while (j < n) {\n                        sieve(j) = true\n      \
    \                  j += i\n                    }\n                }\n        \
    \    }\n        }\n        primes.toList", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n == 2) return true\n            if (n % 2 == 0) return\
    \ false\n            for (i <- 3l to sqrt(n).toLong by 2) {\n                if\
    \ (n % i == 0) return false\n            }\n            return true\n        }\n\
    \        var result = List[Long]()\n        for (i <- 2l to n) {\n           \
    \ if (isPrime(i)) result = result :+ i\n        }\n        return result", " \
    \       var primes = new ListBuffer[Long]()\n        for (i <- 2l to n) {\n  \
    \          if (isPrime(i)) primes += i\n        }\n        primes.toList", " \
    \       // your code here\n        var result = List[Long]()\n        for (i <-\
    \ 2l to n) {\n            if (isPrime(i)) {\n                result = result :+\
    \ i\n            }\n        }\n        result", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n < 2) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            val sqrt\
    \ = math.sqrt(n).toLong\n            for (i <- 3l to sqrt by 2) {\n          \
    \      if (n % i == 0) return false\n            }\n            return true\n\
    \        }\n        var list = List[Long]()\n        for (i <- 2l to n) {\n  \
    \          if (isPrime(i)) list = list :+ i\n        }\n        return list",
  "        // TODO: Implement this function\n        var result = List[Long]()\n \
    \       if (n == 0) return result\n        for (i <- 2l to n) {\n            var\
    \ isPrime = true\n            for (j <- 2l to i-1) {\n                if (i %\
    \ j == 0) {\n                    isPrime = false\n                    break\n\
    \                }\n            }\n            if (isPrime) result = result :+\
    \ i\n        }\n        return result", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n <= 1) return false\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            val sqrt_n = sqrt(n).toLong\n\
    \            for (i <- 3l to sqrt_n by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        var result\
    \ = List[Long]()\n        for (i <- 2l to n) {\n            if (isPrime(i)) result\
    \ = result :+ i\n        }\n        return result", "        if (n <= 1) return\
    \ List[Long]()\n        var primes = List[Long](2l)\n        var i = 3l\n    \
    \    while (i < n) {\n            var isPrime = true\n            for (p <- primes)\
    \ {\n                if (i % p == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if (isPrime)\
    \ primes = primes :+ i\n            i += 2\n        }\n        primes", "    \
    \    // your code here\n        return List[Long]()", "        var result = new\
    \ ListBuffer[Long]\n        for (i <- 2l to n) {\n            if (isPrime(i))\
    \ result += i\n        }\n        result.toList", "        var result = List[Long]()\n\
    \        for (i <- 2l to n) {\n            if (isPrime(i)) result = result :+\
    \ i\n        }\n        result", "        var result = List[Long]()\n        for\
    \ (i <- 2l to n) {\n            if (isPrime(i)) {\n                result = result\
    \ :+ i\n            }\n        }\n        result", "        // your code here\n\
    \        var primes = new ListBuffer[Long]()\n        if (n < 2) {\n         \
    \   return primes.toList\n        }\n        var current = 2l\n        while (current\
    \ < n) {\n            if (isPrime(current)) {\n                primes += current\n\
    \            }\n            current += 1\n        }\n        primes.toList", " \
    \       if (n <= 1) return List[Long]()\n        val primes = new ListBuffer[Long]()\n\
    \        var i = 2l\n        while (i < n) {\n            var j = 2l\n       \
    \     var isPrime = true\n            while (j < i) {\n                if (i %\
    \ j == 0) {\n                    isPrime = false\n                    j = i\n\
    \                }\n                j += 1\n            }\n            if (isPrime)\
    \ primes += i\n            i += 1\n        }\n        primes.toList"]
stop_tokens:
- "\n    }\n"
