name: HumanEval_94_skjkasdkd
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of integers.\n    // You need to find the largest prime\
  \ value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong,\
  \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
  \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
  \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    //\
  \ (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
  \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
  \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n\
  \    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
  \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
  \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n\
  \    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
  \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
  \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
  \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n   \
  \ // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
  \ 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
  \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
  \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
  \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
  \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
  \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
  \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong,\
  \ 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong,\
  \ 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
  \ 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong,\
  \ 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n\
  \    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
  \ 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
  \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
  \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
  \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
  \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
completions: ["        var max = 0l\n        for (i <- lst) {\n            if (isPrime(i)\
    \ && i > max) max = i\n        }\n        return sumDigits(max)", "        val\
    \ primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n  \
    \      val digits = maxPrime.toString.map(x => x.asDigit)\n        digits.sum",
  "        val primes = lst.filter(x => isPrime(x)).sortWith(_ > _)\n        if (primes.length\
    \ == 0) 0\n        else primes(0).toString.map(_.asDigit).sum", "        val primes\
    \ = new ArrayBuffer[Long]()\n        val primeSet = new HashSet[Long]()\n    \
    \    val primeMap = new HashMap[Long, Long]()\n        def isPrime(n : Long) :\
    \ Boolean = {\n            if (n < 2) return false\n            if (n == 2) return\
    \ true\n            if (n % 2 == 0) return false\n            for (i <- 3l to\
    \ sqrt(n).toLong by 2) {\n                if (n % i == 0) return false\n     \
    \       }\n            return true\n        }\n        def getPrimes(n : Long)\
    \ : List[Long] = {\n            if (n < 2) return List[Long]()\n            if\
    \ (n == 2) return List[Long](2l)\n            if (n % 2 == 0) return getPrimes(n\
    \ - 1)\n            for (i <- 3l to sqrt(n).toLong by 2) {\n                if\
    \ (n % i == 0) return getPrimes(n - 1)\n            }\n            return getPrimes(n\
    \ - 1) :+ n\n        }\n        def getPrimeSum(n : Long) : Long = {\n       \
    \     if (n < 10) return n\n            return getPrimeSum(n / 10) + n % 10\n\
    \        }\n        for (i <- lst) {\n            if (isPrime(i)) {\n        \
    \        primes += i\n                primeSet += i\n                primeMap(i)\
    \ = getPrimeSum(i)\n            }\n        }\n        val maxPrime = primes.max\n\
    \        return primeMap(maxPrime)", "        var max = 0l\n        for (i <-\
    \ lst) {\n            if (isPrime(i) && i > max) max = i\n        }\n        var\
    \ sum = 0l\n        var x = max\n        while (x > 0) {\n            sum += x\
    \ % 10\n            x /= 10\n        }\n        return sum", "        var max\
    \ = 0l\n        for (i <- lst) {\n            if (i > max && isPrime(i)) max =\
    \ i\n        }\n        var sum = 0l\n        while (max > 0) {\n            sum\
    \ += max % 10\n            max /= 10\n        }\n        return sum", "      \
    \  var primes = new ArrayBuffer[Long]()\n        for (i <- lst) {\n          \
    \  if (isPrime(i)) primes += i\n        }\n        var max = primes.max\n    \
    \    var sum = 0l\n        while (max > 0) {\n            sum += max % 10\n  \
    \          max /= 10\n        }\n        return sum", "        var primes = new\
    \ ArrayBuffer[Long]()\n        for (i <- lst) {\n            if (isPrime(i)) primes\
    \ += i\n        }\n        var max = primes.max\n        var sum = 0l\n      \
    \  while (max > 0) {\n            sum += max % 10\n            max /= 10\n   \
    \     }\n        return sum", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val maxPrime = primes.max\n        val digits = maxPrime.toString.map(_.asDigit)\n\
    \        digits.sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val max = primes.max\n        max.toString.map(x => x.asDigit).sum", "  \
    \      // Your code here\n        val primes = lst.filter(x => isPrime(x))\n \
    \       val maxPrime = primes.max\n        sumDigits(maxPrime)", "        var\
    \ max = 0l\n        for (i <- lst) {\n            if (isPrime(i) && i > max) {\n\
    \                max = i\n            }\n        }\n        var sum = 0l\n   \
    \     while (max > 0) {\n            sum += max % 10\n            max /= 10\n\
    \        }\n        return sum", "        var primes = List[Long]()\n        for\
    \ (i <- lst) {\n            if (isPrime(i)) primes = i :: primes\n        }\n\
    \        var max = 0l\n        for (i <- primes) {\n            if (i > max) max\
    \ = i\n        }\n        var sum = 0l\n        var str = max.toString\n     \
    \   for (i <- str) {\n            sum += i.toString.toLong\n        }\n      \
    \  return sum", "        val primes = lst.filter(x => isPrime(x))\n        val\
    \ maxPrime = primes.max\n        val digits = maxPrime.toString.map(_.asDigit).toList\n\
    \        digits.sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val largestPrime = primes.max\n        val digits = largestPrime.toString.map(_.asDigit)\n\
    \        digits.sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val maxPrime = primes.max\n        val digits = maxPrime.toString.map(_.asDigit)\n\
    \        digits.sum", "        var primes = new ListBuffer[Long]\n        for\
    \ (i <- lst) {\n            if (isPrime(i)) primes += i\n        }\n        var\
    \ max = 0l\n        for (i <- primes) {\n            if (i > max) max = i\n  \
    \      }\n        var sum = 0l\n        var str = max.toString\n        for (i\
    \ <- str) {\n            sum += i.toString.toLong\n        }\n        return sum",
  "        val primes = lst.filter(x => isPrime(x))\n        val largest = primes.max\n\
    \        largest.toString.map(x => x.asDigit).sum", "        var primes = List[Long]()\n\
    \        var max = 0l\n        for (i <- lst) {\n            if (isPrime(i)) {\n\
    \                primes = i :: primes\n                if (i > max) max = i\n\
    \            }\n        }\n        var sum = 0l\n        var temp = max\n    \
    \    while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n\
    \        }\n        return sum", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val max = primes.max\n        max.toString.map(x => x.asDigit).sum",
  "        var max = 0l\n        for (i <- lst) {\n            if (i > max && isPrime(i))\
    \ max = i\n        }\n        var sum = 0l\n        for (i <- max.toString) {\n\
    \            sum += i.toString.toLong\n        }\n        return sum", '        var
    primes : List[Long] = List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong,
    13l.toLong, 17l.toLong, 19l.toLong, 23l.toLong, 29l.toLong, 31l.toLong, 37l.toLong,
    41l.toLong, 43l.toLong, 47l.toLong, 53l.toLong, 59l.toLong, 61l.toLong, 67l.toLong,
    71l.toLong, 73l.toLong, 79l.toLong, 83l.toLong, 89l.toLong, 97l.toLong, 101l.toLong,
    103l.toLong, 107l.toLong, 109l.toLong, 113l.toLong, 127l.toLong, 131l.toLong,
    137l.toLong, 139l.toLong, 149l.toLong, 151l.toLong, 157l.toLong, 163l.toLong,
    167l.toLong, 173l.toLong, 179l.toLong, 181l.toLong, 191l.toLong, 193l.toLong,
    197l.toLong, 199l.toLong, 211l.toLong, 223l.toLong, 227l.toLong, 229l.toLong,
    233l.toLong, 239l.toLong, 241l.toLong, 251l.toLong, 257l.toLong, 263l.toLong,
    269l.toLong, 271l.toLong, 277l.toLong, 281l.toLong, 283l.toLong, 293l.toLong,
    307l.toLong, 311l.toLong, 313l.toLong, 317l.toLong, 331l.toLong, 337l.toLong,
    347l.toLong, 349l.toLong, 353l.toLong, 359l.toLong, 367l.toLong, 373l.toLong,
    379l.toLong, 383l.toLong, 389l.toLong, 397l.toLong, 401l.toLong, 409l.toLong,
    419l.toLong, 421l.toLong, 431l.', "        val primes = lst.filter(x => isPrime(x))\n\
    \        val maxPrime = primes.max\n        val digits = maxPrime.toString.map(_.asDigit).toList\n\
    \        digits.sum", "        var primes = new ListBuffer[Long]\n        for\
    \ (i <- lst) {\n            if (isPrime(i)) primes += i\n        }\n        var\
    \ max = primes.max\n        var sum = 0l\n        while (max > 0) {\n        \
    \    sum += max % 10\n            max /= 10\n        }\n        return sum", " \
    \       val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        max.toString.map(x => x.asDigit).sum", "        var max = 0l\n      \
    \  for (i <- lst) {\n            if (isPrime(i) && i > max) max = i\n        }\n\
    \        var sum = 0l\n        var str = max.toString\n        for (i <- 0 until\
    \ str.length) {\n            sum += str(i).toString.toInt\n        }\n       \
    \ return sum", "        var primes = new ListBuffer[Long]\n        for (i <- lst)\
    \ {\n            if (isPrime(i)) primes += i\n        }\n        var max = 0l\n\
    \        for (i <- primes) {\n            if (i > max) max = i\n        }\n  \
    \      var sum = 0l\n        for (i <- max.toString) {\n            sum += i.toString.toLong\n\
    \        }\n        return sum", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val max = primes.max\n        max.toString.map(x => x.asDigit).sum",
  "        val primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n\
    \        val digits = maxPrime.toString.map(_.asDigit).toList\n        digits.sum",
  "        var primes = new ListBuffer[Long]\n        for (i <- lst) {\n         \
    \   if (isPrime(i)) primes += i\n        }\n        var max = 0l\n        for\
    \ (i <- primes) {\n            if (i > max) max = i\n        }\n        var sum\
    \ = 0l\n        var str = max.toString\n        for (i <- str) {\n           \
    \ sum += i.toString.toLong\n        }\n        return sum", "        val primes\
    \ = lst.filter(x => isPrime(x))\n        val largestPrime = primes.max\n     \
    \   val digits = largestPrime.toString.map(_.asDigit)\n        digits.sum", " \
    \       val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        val digits = max.toString.map(_.asDigit)\n        digits.sum", "    \
    \    var max = 0l\n        for (i <- lst) {\n            if (isPrime(i) && i >\
    \ max) max = i\n        }\n        var sum = 0l\n        var temp = max\n    \
    \    while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n\
    \        }\n        return sum", "        var primes = new ListBuffer[Long]()\n\
    \        for (i <- lst) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        var max = primes.max\n        var sum = 0\n        while (max > 0) {\n\
    \            sum += (max % 10).toInt\n            max /= 10\n        }\n     \
    \   return sum", "        val primes = lst.filter(x => isPrime(x)).sorted\n  \
    \      val largest = primes.last\n        largest.toString.map(x => x.asDigit).sum",
  "        val primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n\
    \        val digits = maxPrime.toString.map(_.asDigit)\n        digits.sum", " \
    \       val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        val digits = max.toString.map(_.asDigit)\n        digits.sum", "    \
    \    val primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n\
    \        val digits = maxPrime.toString.map(_.asDigit).toList\n        digits.sum",
  "        var primes = List[Long]()\n        for (i <- lst) {\n            if (isPrime(i))\
    \ primes = i :: primes\n        }\n        var max = 0l\n        for (i <- primes)\
    \ {\n            if (i > max) max = i\n        }\n        var sum = 0l\n     \
    \   var str = max.toString\n        for (i <- str) {\n            sum += i.toString.toLong\n\
    \        }\n        return sum", "        var max = 0l\n        for (i <- lst)\
    \ {\n            if (isPrime(i) && i > max) max = i\n        }\n        var sum\
    \ = 0l\n        while (max > 0) {\n            sum += max % 10\n            max\
    \ /= 10\n        }\n        return sum", "        var max = 0l\n        for (i\
    \ <- lst) {\n            if (isPrime(i) && i > max) max = i\n        }\n     \
    \   var sum = 0l\n        while (max > 0) {\n            sum += max % 10\n   \
    \         max /= 10\n        }\n        return sum", "        def isPrime(n :\
    \ Long) : Boolean = {\n            if (n <= 1) return false\n            if (n\
    \ == 2) return true\n            if (n % 2 == 0) return false\n            for\
    \ (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        def sumDigits(n :\
    \ Long) : Long = {\n            var sum = 0l\n            var m = n\n        \
    \    while (m > 0) {\n                sum += m % 10\n                m /= 10\n\
    \            }\n            return sum\n        }\n        var max = 0l\n    \
    \    for (i <- lst) {\n            if (isPrime(i) && i > max) max = i\n      \
    \  }\n        return sumDigits(max)", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n <= 1) return false\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            val sqrtN = sqrt(n).toLong\n\
    \            for (i <- 3l to sqrtN by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        def sumOfDigits(n\
    \ : Long) : Long = {\n            var sum = 0l\n            var m = n\n      \
    \      while (m > 0) {\n                sum += m % 10\n                m /= 10\n\
    \            }\n            return sum\n        }\n        var maxPrime = 0l\n\
    \        for (i <- lst) {\n            if (isPrime(i)) {\n                maxPrime\
    \ = max(maxPrime, i)\n            }\n        }\n        return sumOfDigits(maxPrime)",
  "        val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        val digits = max.toString.map(_.asDigit).toList\n        digits.sum",
  "        var primes = List[Long]()\n        for (i <- lst) {\n            if (isPrime(i))\
    \ primes = i :: primes\n        }\n        var max = 0l\n        for (i <- primes)\
    \ {\n            if (i > max) max = i\n        }\n        var sum = 0l\n     \
    \   for (i <- max.toString) {\n            sum += i.toString.toLong\n        }\n\
    \        return sum", "        var primes = new ListBuffer[Long]()\n        for\
    \ (i <- lst) {\n            if (isPrime(i)) primes += i\n        }\n        var\
    \ max = 0l\n        for (i <- primes) {\n            if (i > max) max = i\n  \
    \      }\n        var sum = 0l\n        var maxStr = max.toString\n        for\
    \ (i <- 0 until maxStr.length) {\n            sum += maxStr(i).toString.toLong\n\
    \        }\n        return sum", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val largestPrime = primes.max\n        val digits = largestPrime.toString.map(_.asDigit)\n\
    \        digits.sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val maxPrime = primes.max\n        maxPrime.toString.map(x => x.asDigit).sum",
  "        val primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n\
    \        val digits = maxPrime.toString.map(_.asDigit)\n        digits.sum", " \
    \       var primes = new ListBuffer[Long]\n        for (i <- lst) {\n        \
    \    if (isPrime(i)) primes += i\n        }\n        var max = primes.max\n  \
    \      var sum = 0l\n        while (max > 0) {\n            sum += max % 10\n\
    \            max /= 10\n        }\n        return sum", "        val primes =\
    \ lst.filter(x => isPrime(x))\n        val max = primes.max\n        val digits\
    \ = max.toString.map(_.asDigit)\n        digits.sum", "        var max : Long\
    \ = 0\n        for (i <- lst) {\n            if (isPrime(i)) {\n             \
    \   if (i > max) max = i\n            }\n        }\n        var sum : Long = 0\n\
    \        var str = max.toString\n        for (i <- 0 until str.length) {\n   \
    \         sum += str(i).toString.toLong\n        }\n        return sum", "   \
    \     var max = 0l\n        for (i <- lst) {\n            if (isPrime(i) && i\
    \ > max) max = i\n        }\n        var sum = 0l\n        while (max > 0) {\n\
    \            sum += max % 10\n            max /= 10\n        }\n        return\
    \ sum", "        val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        max.toString.map(x => x.asDigit).sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val largest = primes.max\n        largest.toString.map(x\
    \ => x.asDigit).sum", "        def isPrime(n : Long) : Boolean = {\n         \
    \   if (n < 2) return false\n            if (n == 2 || n == 3) return true\n \
    \           if (n % 2 == 0 || n % 3 == 0) return false\n            var i = 5\n\
    \            var w = 2\n            while (i * i <= n) {\n                if (n\
    \ % i == 0) return false\n                i += w\n                w = 6 - w\n\
    \            }\n            return true\n        }\n        def sumDigits(n :\
    \ Long) : Long = {\n            var sum = 0l\n            var nn = n\n       \
    \     while (nn > 0) {\n                sum += nn % 10\n                nn /=\
    \ 10\n            }\n            return sum\n        }\n        var max = 0l\n\
    \        for (i <- lst) {\n            if (isPrime(i) && i > max) max = i\n  \
    \      }\n        return sumDigits(max)", "        val primes = lst.filter(x =>\
    \ isPrime(x))\n        val max = primes.max\n        val digits = max.toString.map(_.asDigit)\n\
    \        digits.sum", "        def isPrime(n : Long) : Boolean = {\n         \
    \   if (n == 1) return false\n            if (n == 2) return true\n          \
    \  if (n % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n     \
    \       for (i <- 3l to sqrt by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        def sumDigits(n :\
    \ Long) : Long = {\n            var sum = 0l\n            var nn = n\n       \
    \     while (nn > 0) {\n                sum += nn % 10\n                nn /=\
    \ 10\n            }\n            return sum\n        }\n        var max = 0l\n\
    \        for (i <- lst) {\n            if (isPrime(i)) {\n                max\
    \ = max max i\n            }\n        }\n        return sumDigits(max)", "   \
    \     var max = 0l\n        for (i <- lst) {\n            if (isPrime(i) && i\
    \ > max) max = i\n        }\n        var sum = 0l\n        var i = max\n     \
    \   while (i > 0) {\n            sum += i % 10\n            i /= 10\n        }\n\
    \        return sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val max = primes.max\n        max.toString.map(x => x.asDigit).sum", "  \
    \      def isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n\
    \            if (n == 2 || n == 3) return true\n            if (n % 2 == 0 ||\
    \ n % 3 == 0) return false\n            val sqrtN = sqrt(n).toLong + 1\n     \
    \       var i = 6l\n            while (i <= sqrtN) {\n                if (n %\
    \ (i - 1) == 0 || n % (i + 1) == 0) return false\n                i += 6\n   \
    \         }\n            return true\n        }\n        def sumOfDigits(n : Long)\
    \ : Long = {\n            var sum = 0l\n            var m = n\n            while\
    \ (m > 0) {\n                sum += m % 10\n                m /= 10\n        \
    \    }\n            return sum\n        }\n        var maxPrime = 0l\n       \
    \ for (i <- lst) {\n            if (isPrime(i) && i > maxPrime) maxPrime = i\n\
    \        }\n        return sumOfDigits(maxPrime)", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val max = primes.max\n        return sumDigits(max)",
  "        var primes = List[Long]()\n        for (i <- lst) {\n            if (isPrime(i))\
    \ primes = i :: primes\n        }\n        var max = 0l\n        for (i <- primes)\
    \ {\n            if (i > max) max = i\n        }\n        var sum = 0l\n     \
    \   var str = max.toString\n        for (i <- str) {\n            sum += i.toString.toLong\n\
    \        }\n        return sum", "        def isPrime(n : Long) : Boolean = {\n\
    \            if (n < 2) return false\n            if (n == 2 || n == 3) return\
    \ true\n            if (n % 2 == 0 || n % 3 == 0) return false\n            var\
    \ i = 5\n            var w = 2\n            while (i * i <= n) {\n           \
    \     if (n % i == 0) return false\n                i += w\n                w\
    \ = 6 - w\n            }\n            return true\n        }\n        def getDigits(n\
    \ : Long) : List[Long] = {\n            if (n == 0) return List[Long](0l.toLong)\n\
    \            var lst = List[Long]()\n            var nn = n\n            while\
    \ (nn > 0) {\n                lst = (nn % 10l.toLong) :: lst\n               \
    \ nn /= 10l.toLong\n            }\n            return lst\n        }\n       \
    \ var max = 0l.toLong\n        for (i <- lst) {\n            if (isPrime(i) &&\
    \ i > max) max = i\n        }\n        var sum = 0l.toLong\n        for (i <-\
    \ getDigits(max)) {\n            sum += i\n        }\n        return sum", " \
    \       val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        val digits = max.toString.map(_.asDigit)\n        digits.sum", "    \
    \    var primes = new ListBuffer[Long]()\n        for (i <- lst) {\n         \
    \   if (isPrime(i)) primes += i\n        }\n        var max = 0l\n        for\
    \ (i <- primes) {\n            if (i > max) max = i\n        }\n        var sum\
    \ = 0l\n        for (i <- max.toString) {\n            sum += i.toInt - 48\n \
    \       }\n        return sum", "        var max = 0l\n        for (i <- lst)\
    \ {\n            if (isPrime(i) && i > max) max = i\n        }\n        var sum\
    \ = 0l\n        var s = max.toString\n        for (i <- 0 until s.length) {\n\
    \            sum += s(i).toString.toInt\n        }\n        return sum", "   \
    \     var primes = new ArrayBuffer[Long]\n        for (i <- lst) {\n         \
    \   if (isPrime(i)) primes += i\n        }\n        var max = primes.max\n   \
    \     var sum = 0l\n        while (max > 0) {\n            sum += max % 10\n \
    \           max /= 10\n        }\n        return sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val maxPrime = primes.max\n        sumDigits(maxPrime)",
  "        def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrt = sqrt(n).toLong\n            for (i <- 3l to sqrt by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        var max = 0l\n        for (i <- lst) {\n   \
    \         if (isPrime(i) && i > max) max = i\n        }\n        var sum = 0l\n\
    \        while (max > 0) {\n            sum += max % 10\n            max /= 10\n\
    \        }\n        return sum", "        var max = 0l\n        for (i <- lst)\
    \ {\n            if (isPrime(i) && i > max) max = i\n        }\n        var sum\
    \ = 0l\n        var str = max.toString\n        for (i <- 0 until str.length)\
    \ {\n            sum += str(i).toString.toInt\n        }\n        return sum",
  "        val primes = lst.filter(x => isPrime(x))\n        val largest = primes.max\n\
    \        largest.toString.map(x => x.asDigit).sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val largest = primes.max\n        largest.toString.map(x\
    \ => x.asDigit).sum", "        var max = 0l\n        for (i <- lst) {\n      \
    \      if (isPrime(i) && i > max) max = i\n        }\n        var sum = 0l\n \
    \       while (max > 0) {\n            sum += max % 10\n            max /= 10\n\
    \        }\n        return sum", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val maxPrime = primes.max\n        val digits = maxPrime.toString.map(_.asDigit)\n\
    \        digits.sum", "        var primes = new ListBuffer[Long]\n        for\
    \ (i <- lst) {\n            if (isPrime(i)) primes += i\n        }\n        var\
    \ max = primes.max\n        var sum = 0l\n        while (max > 0) {\n        \
    \    sum += max % 10\n            max /= 10\n        }\n        return sum", " \
    \       var max = 0l\n        for (i <- lst) {\n            if (i > max && isPrime(i))\
    \ max = i\n        }\n        var sum = 0l\n        var temp = max\n        while\
    \ (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n       \
    \ }\n        return sum", "        var max = 0l\n        for (i <- lst) {\n  \
    \          if (i > max && isPrime(i)) max = i\n        }\n        var sum = 0l\n\
    \        var num = max\n        while (num > 0) {\n            sum += num % 10\n\
    \            num /= 10\n        }\n        return sum", "        var max = 0l\n\
    \        for (i <- lst) {\n            if (i > max && isPrime(i)) max = i\n  \
    \      }\n        var sum = 0l\n        while (max > 0) {\n            sum +=\
    \ max % 10\n            max /= 10\n        }\n        return sum", "        var\
    \ max = 0l\n        for (i <- lst) {\n            if (i > max && isPrime(i)) max\
    \ = i\n        }\n        var sum = 0l\n        while (max > 0) {\n          \
    \  sum += max % 10\n            max /= 10\n        }\n        return sum", " \
    \       val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        max.toString.map(x => x.asDigit).sum", "        var max = 0l\n      \
    \  for (i <- lst) {\n            if (i > max && isPrime(i)) max = i\n        }\n\
    \        var sum = 0l\n        for (i <- max.toString) {\n            sum += i.toString.toLong\n\
    \        }\n        return sum", "        var max = 0l\n        for (i <- lst)\
    \ {\n            if (i > max && isPrime(i)) max = i\n        }\n        var sum\
    \ = 0l\n        var temp = max\n        while (temp > 0) {\n            sum +=\
    \ temp % 10\n            temp /= 10\n        }\n        return sum", "       \
    \ val primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n\
    \        maxPrime.toString.map(x => x.asDigit).sum", "        var max = 0l\n \
    \       for (i <- lst) {\n            if (i > max && isPrime(i)) max = i\n   \
    \     }\n        var sum = 0l\n        var x = max\n        while (x > 0) {\n\
    \            sum += x % 10\n            x /= 10\n        }\n        return sum",
  "        var primes = new ArrayBuffer[Long]()\n        for (i <- lst) {\n      \
    \      if (isPrime(i)) primes += i\n        }\n        var max = 0l\n        for\
    \ (i <- primes) {\n            if (i > max) max = i\n        }\n        var sum\
    \ = 0l\n        for (i <- max.toString) {\n            sum += i.toString.toLong\n\
    \        }\n        return sum", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val max = primes.max\n        max.toString.map(x => x.asDigit).sum",
  "        var max = 0l\n        for (i <- lst) {\n            if (i > max && isPrime(i))\
    \ max = i\n        }\n        var sum = 0l\n        var temp = max\n        while\
    \ (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n       \
    \ }\n        return sum", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val largest = primes.max\n        val digits = largest.toString.map(_.asDigit).toList\n\
    \        digits.sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val max = primes.max\n        val digits = max.toString.map(_.asDigit).toList\n\
    \        digits.sum", "        var primes = new ListBuffer[Long]()\n        for\
    \ (i <- lst) {\n            if (isPrime(i)) primes += i\n        }\n        var\
    \ max = primes.max\n        var sum = 0l\n        while (max > 0) {\n        \
    \    sum += max % 10\n            max /= 10\n        }\n        return sum", " \
    \       val primes = ArrayBuffer[Long]()\n        for (i <- lst) {\n         \
    \   if (isPrime(i)) primes += i\n        }\n        val max = primes.max\n   \
    \     var sum = 0l\n        for (i <- max.toString) {\n            sum += i.toString.toLong\n\
    \        }\n        sum", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val max = primes.max\n        val digits = max.toString.map(_.asDigit)\n\
    \        digits.sum", "        var primes = new ListBuffer[Long]()\n        for\
    \ (i <- lst) {\n            if (isPrime(i)) primes += i\n        }\n        var\
    \ max = primes.max\n        var sum = 0l\n        while (max > 0) {\n        \
    \    sum += max % 10\n            max /= 10\n        }\n        return sum", " \
    \       var lst2 = lst.filter(x => x != 0l.toLong)\n        var lst3 = lst2.filter(x\
    \ => x != 1l.toLong)\n        var lst4 = lst3.filter(x => x != 2l.toLong)\n  \
    \      var lst5 = lst4.filter(x => x != 3l.toLong)\n        var lst6 = lst5.filter(x\
    \ => x != 5l.toLong)\n        var lst7 = lst6.filter(x => x != 7l.toLong)\n  \
    \      var lst8 = lst7.filter(x => x != 11l.toLong)\n        var lst9 = lst8.filter(x\
    \ => x != 13l.toLong)\n        var lst10 = lst9.filter(x => x != 17l.toLong)\n\
    \        var lst11 = lst10.filter(x => x != 19l.toLong)\n        var lst12 = lst11.filter(x\
    \ => x != 23l.toLong)\n        var lst13 = lst12.filter(x => x != 29l.toLong)\n\
    \        var lst14 = lst13.filter(x => x != 31l.toLong)\n        var lst15 = lst14.filter(x\
    \ => x != 37l.toLong)\n        var lst16 = lst15.filter(x => x != 41l.toLong)\n\
    \        var lst17 = lst16.filter(x => x != 43l.toLong)\n        var lst18 = lst17.filter(x\
    \ => x != 47l.toLong)\n        var lst19 = lst18.filter(x => x != 53l.toLong)\n\
    \        var lst20 = lst19.filter(x => x != 59l.toLong)\n        var lst21 = lst20.filter(x\
    \ => x != 61l.toLong)\n        var lst22 = lst21.filter(x => x != 67l.toLong)\n\
    \        var lst23 = lst22.filter(x => x != 71l.toLong)\n        var lst24 =",
  "        val primes = lst.filter(x => isPrime(x)).sorted\n        if (primes.length\
    \ == 0) 0\n        else {\n            val largest = primes.last\n           \
    \ largest.toString.map(x => x.asDigit).sum\n        }", "        var max = 0l\n\
    \        for (i <- lst) {\n            if (i > max && isPrime(i)) max = i\n  \
    \      }\n        var sum = 0l\n        while (max > 0) {\n            sum +=\
    \ max % 10\n            max /= 10\n        }\n        return sum", "        val\
    \ primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n       \
    \ max.toString.map(x => x.asDigit).sum", "        val primes = lst.filter(x =>\
    \ isPrime(x))\n        val max = primes.max\n        max.toString.map(x => x.asDigit).sum",
  "        val primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n\
    \        maxPrime.toString.map(x => x.asDigit).sum", "        var lst2 = lst.filter(x\
    \ => x != 0)\n        var lst3 = lst2.filter(x => x != 1)\n        var lst4 =\
    \ lst3.filter(x => x != 2)\n        var lst5 = lst4.filter(x => x != 3)\n    \
    \    var lst6 = lst5.filter(x => x != 5)\n        var lst7 = lst6.filter(x =>\
    \ x != 7)\n        var lst8 = lst7.filter(x => x != 11)\n        var lst9 = lst8.filter(x\
    \ => x != 13)\n        var lst10 = lst9.filter(x => x != 17)\n        var lst11\
    \ = lst10.filter(x => x != 19)\n        var lst12 = lst11.filter(x => x != 23)\n\
    \        var lst13 = lst12.filter(x => x != 29)\n        var lst14 = lst13.filter(x\
    \ => x != 31)\n        var lst15 = lst14.filter(x => x != 37)\n        var lst16\
    \ = lst15.filter(x => x != 41)\n        var lst17 = lst16.filter(x => x != 43)\n\
    \        var lst18 = lst17.filter(x => x != 47)\n        var lst19 = lst18.filter(x\
    \ => x != 53)\n        var lst20 = lst19.filter(x => x != 59)\n        var lst21\
    \ = lst20.filter(x => x != 61)\n        var lst22 = lst21.filter(x => x != 67)\n\
    \        var lst23 = lst22.filter(x => x != 71)\n        var lst24 = lst23.filter(x\
    \ => x != 73)\n        var lst25 = lst24.filter(x => x != 79)\n        var lst26\
    \ = lst25.filter(x => x != 83)\n        var lst27 = lst26.filter(x => x != 89)\n\
    \        var lst28 = lst27.filter(x => x != 97)", "        var lst2 = lst.filter(x\
    \ => x > 1)\n        var lst3 = lst2.filter(x => x % 2 != 0)\n        var lst4\
    \ = lst3.filter(x => x % 3 != 0)\n        var lst5 = lst4.filter(x => x % 5 !=\
    \ 0)\n        var lst6 = lst5.filter(x => x % 7 != 0)\n        var lst7 = lst6.filter(x\
    \ => x % 11 != 0)\n        var lst8 = lst7.filter(x => x % 13 != 0)\n        var\
    \ lst9 = lst8.filter(x => x % 17 != 0)\n        var lst10 = lst9.filter(x => x\
    \ % 19 != 0)\n        var lst11 = lst10.filter(x => x % 23 != 0)\n        var\
    \ lst12 = lst11.filter(x => x % 29 != 0)\n        var lst13 = lst12.filter(x =>\
    \ x % 31 != 0)\n        var lst14 = lst13.filter(x => x % 37 != 0)\n        var\
    \ lst15 = lst14.filter(x => x % 41 != 0)\n        var lst16 = lst15.filter(x =>\
    \ x % 43 != 0)\n        var lst17 = lst16.filter(x => x % 47 != 0)\n        var\
    \ lst18 = lst17.filter(x => x % 53 != 0)\n        var lst19 = lst18.filter(x =>\
    \ x % 59 != 0)\n        var lst20 = lst19.filter(x => x % 61 != 0)\n        var\
    \ lst21 = lst20.filter(x => x % 67 != 0)\n        var lst22 = lst21.filter(x =>\
    \ x % 71 != 0)\n        var lst23 = lst22.filter(x => x % 73 != 0)\n        var\
    \ lst24 = lst23.filter(x => x % 79 != 0)\n        var lst25 = lst24.filter(x =>\
    \ x % 83 != 0)\n        var lst26 = lst25.", "        def isPrime(n : Long) :\
    \ Boolean = {\n            if (n == 1) return false\n            if (n == 2) return\
    \ true\n            if (n % 2 == 0) return false\n            val sqrt = math.sqrt(n).toLong\n\
    \            for (i <- 3l to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        def sumDigits(n\
    \ : Long) : Long = {\n            var sum = 0l\n            var nn = n\n     \
    \       while (nn > 0) {\n                sum += nn % 10\n                nn /=\
    \ 10\n            }\n            return sum\n        }\n        var max = 0l\n\
    \        for (i <- lst) {\n            if (isPrime(i)) {\n                max\
    \ = max max i\n            }\n        }\n        return sumDigits(max)", "   \
    \     val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        val digits = max.toString.map(_.asDigit)\n        digits.sum", "    \
    \    var primes = List[Long]()\n        for (i <- lst) {\n            if (i.isProbablePrime(100))\
    \ primes = i :: primes\n        }\n        if (primes.isEmpty) return 0\n    \
    \    var max = primes.max\n        var sum = 0\n        while (max > 0) {\n  \
    \          sum += (max % 10).toInt\n            max /= 10\n        }\n       \
    \ return sum", "        val primes = lst.filter(x => isPrime(x))\n        val\
    \ largest = primes.max\n        largest.toString.map(x => x.asDigit).sum", " \
    \       val primes = new ArrayBuffer[Long]\n        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n == 2) return true\n            if (n == 1 || n % 2 ==\
    \ 0) return false\n            for (i <- 3 to sqrt(n).toInt by 2) {\n        \
    \        if (n % i == 0) return false\n            }\n            true\n     \
    \   }\n        for (i <- lst) {\n            if (isPrime(i)) primes += i\n   \
    \     }\n        primes.max", "        val primes = ArrayBuffer[Long]()\n    \
    \    val primeSet = HashSet[Long]()\n        def isPrime(n : Long) : Boolean =\
    \ {\n            if (primeSet.contains(n)) return true\n            if (n == 1)\
    \ return false\n            if (n == 2) return true\n            if (n % 2 ==\
    \ 0) return false\n            for (i <- 3 to sqrt(n).toInt by 2) {\n        \
    \        if (n % i == 0) return false\n            }\n            primes += n\n\
    \            primeSet += n\n            true\n        }\n        for (i <- lst)\
    \ {\n            if (isPrime(i)) {\n                val digits = i.toString.map(_.asDigit).toList\n\
    \                return digits.sum\n            }\n        }\n        0", "  \
    \      def isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n\
    \            if (n == 2 || n == 3) return true\n            if (n % 2 == 0 ||\
    \ n % 3 == 0) return false\n            var i = 5\n            var w = 2\n   \
    \         while (i * i <= n) {\n                if (n % i == 0) return false\n\
    \                i += w\n                w = 6 - w\n            }\n          \
    \  return true\n        }\n        def sumOfDigits(n : Long) : Long = {\n    \
    \        var sum = 0l\n            var m = n\n            while (m > 0) {\n  \
    \              sum += m % 10\n                m /= 10\n            }\n       \
    \     return sum\n        }\n        var max = 0l\n        for (i <- lst) {\n\
    \            if (isPrime(i) && i > max) max = i\n        }\n        return sumOfDigits(max)",
  "        var lst2 = lst.filter(x => x > 0)\n        var lst3 = lst2.filter(x =>\
    \ isPrime(x))\n        var lst4 = lst3.sortWith(_ > _)\n        var lst5 = lst4.head.toString.map(x\
    \ => x.asDigit).sum\n        return lst5", "        var primes = new ListBuffer[Long]\n\
    \        for (i <- lst) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        var max = primes.max\n        var sum = 0l\n        while (max > 0) {\n\
    \            sum += max % 10\n            max /= 10\n        }\n        return\
    \ sum", "        var primes = new ListBuffer[Long]\n        for (i <- lst) {\n\
    \            if (isPrime(i)) primes += i\n        }\n        var max = 0l\n  \
    \      for (i <- primes) {\n            if (i > max) max = i\n        }\n    \
    \    var sum = 0l\n        for (i <- max.toString) {\n            sum += i.toString.toLong\n\
    \        }\n        return sum", "        var primes = List[Long]()\n        for\
    \ (i <- lst) {\n            if (i.isPrime) primes = i :: primes\n        }\n \
    \       var max = 0l\n        for (i <- primes) {\n            if (i > max) max\
    \ = i\n        }\n        var sum = 0l\n        for (i <- max.toString) {\n  \
    \          sum += i.toString.toLong\n        }\n        return sum", "       \
    \ def isPrime(n : Long) : Boolean = {\n            if (n == 2) return true\n \
    \           if (n < 2 || n % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n\
    \            for (i <- 3l to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        var max =\
    \ 0l\n        for (i <- lst) {\n            if (isPrime(i) && i > max) max = i\n\
    \        }\n        var sum = 0l\n        while (max > 0) {\n            sum +=\
    \ max % 10\n            max /= 10\n        }\n        return sum", "        val\
    \ primes = lst.filter(isPrime(_))\n        val max = primes.max\n        val digits\
    \ = max.toString.map(_.asDigit).toList\n        digits.sum", "        val primes\
    \ = lst.filter(x => isPrime(x))\n        val max = primes.max\n        return\
    \ max.toString.map(_.asDigit).sum", "        var max = 0l\n        for (i <- lst)\
    \ {\n            if (isPrime(i) && i > max) max = i\n        }\n        var sum\
    \ = 0l\n        var str = max.toString\n        for (i <- 0 until str.length)\
    \ {\n            sum += str(i).toString.toInt\n        }\n        return sum",
  "        var max = 0l\n        for (i <- lst) {\n            if (isPrime(i) && i\
    \ > max) max = i\n        }\n        var sum = 0l\n        var temp = max\n  \
    \      while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n\
    \        }\n        return sum", "        var max = 0l\n        for (i <- lst)\
    \ {\n            if (isPrime(i) && i > max) max = i\n        }\n        var sum\
    \ = 0l\n        var temp = max\n        while (temp > 0) {\n            sum +=\
    \ temp % 10\n            temp /= 10\n        }\n        return sum", "       \
    \ var max = 0l\n        for (i <- lst) {\n            if (i > max && isPrime(i))\
    \ max = i\n        }\n        var sum = 0l\n        while (max > 0) {\n      \
    \      sum += max % 10\n            max /= 10\n        }\n        return sum",
  "        var primes = new ListBuffer[Long]\n        for (i <- lst) {\n         \
    \   if (isPrime(i)) primes += i\n        }\n        var max = primes.max\n   \
    \     var sum = 0l\n        while (max > 0) {\n            sum += max % 10\n \
    \           max /= 10\n        }\n        return sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val max = primes.max\n        max.toString.map(x =>\
    \ x.asDigit).sum", "        val primes = lst.filter(x => isPrime(x))\n       \
    \ val maxPrime = primes.max\n        val digits = maxPrime.toString.map(_.asDigit)\n\
    \        digits.sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val maxPrime = primes.max\n        val digits = maxPrime.toString.toList.map(x\
    \ => x.toString.toLong)\n        digits.sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val maxPrime = primes.max\n        val sum = maxPrime.toString.map(x\
    \ => x.asDigit).sum\n        sum", "        var primes = List[Long]()\n      \
    \  for (i <- lst) {\n            if (isPrime(i)) primes = i :: primes\n      \
    \  }\n        var max = 0l\n        for (i <- primes) {\n            if (i > max)\
    \ max = i\n        }\n        var sum = 0l\n        for (i <- max.toString) {\n\
    \            sum += i.toString.toLong\n        }\n        return sum", "     \
    \   def isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrt = sqrt(n).toLong\n            for (i <- 3l to sqrt by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        var max = 0l\n        for (i <- lst) {\n   \
    \         if (isPrime(i) && i > max) max = i\n        }\n        var sum = 0l\n\
    \        while (max > 0) {\n            sum += max % 10\n            max /= 10\n\
    \        }\n        return sum", "        var primes = new ListBuffer[Long]\n\
    \        for (i <- lst) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        var largest = 0l\n        for (i <- primes) {\n            if (i > largest)\
    \ largest = i\n        }\n        var sum = 0l\n        for (i <- largest.toString)\
    \ {\n            sum += i.toString.toLong\n        }\n        return sum", " \
    \       var max = 0l\n        for (i <- lst) {\n            if (i > max && isPrime(i))\
    \ max = i\n        }\n        var sum = 0l\n        var temp = max\n        while\
    \ (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n       \
    \ }\n        return sum", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val maxPrime = primes.max\n        val digits = maxPrime.toString.map(x\
    \ => x.asDigit)\n        digits.sum", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n == 1) return false\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n\
    \            for (i <- 3l to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        def sumDigits(n\
    \ : Long) : Long = {\n            var sum = 0l\n            var m = n\n      \
    \      while (m > 0) {\n                sum += m % 10\n                m /= 10\n\
    \            }\n            return sum\n        }\n        var max = 0l\n    \
    \    for (i <- lst) {\n            if (isPrime(i)) {\n                max = max\
    \ max i\n            }\n        }\n        return sumDigits(max)", "        def\
    \ isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n    \
    \        if (n == 2) return true\n            if (n % 2 == 0) return false\n \
    \           for (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i ==\
    \ 0) return false\n            }\n            return true\n        }\n       \
    \ var max = 0l\n        for (i <- lst) {\n            if (isPrime(i) && i > max)\
    \ max = i\n        }\n        var sum = 0l\n        var n = max\n        while\
    \ (n > 0) {\n            sum += n % 10\n            n /= 10\n        }\n     \
    \   return sum", "        var primes = List[Long]()\n        for (i <- lst) {\n\
    \            if (isPrime(i)) primes = i :: primes\n        }\n        var max\
    \ = 0l\n        for (i <- primes) {\n            if (i > max) max = i\n      \
    \  }\n        var sum = 0l\n        for (i <- max.toString) {\n            sum\
    \ += i.toString.toLong\n        }\n        return sum", "        var lst2 = lst.filter(x\
    \ => x > 1)\n        var lst3 = lst2.filter(x => lst2.forall(y => x % y != 0 ||\
    \ x == y))\n        var lst4 = lst3.sortWith(_ > _)\n        var lst5 = lst4.head.toString.map(x\
    \ => x.asDigit).sum\n        return lst5", "        var primes = new ListBuffer[Long]\n\
    \        for (i <- lst) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        var largest = 0l\n        for (i <- primes) {\n            if (i > largest)\
    \ largest = i\n        }\n        var sum = 0l\n        for (i <- largest.toString)\
    \ {\n            sum += i.toString.toLong\n        }\n        return sum", " \
    \       val primes = lst.filter(x => isPrime(x)).sortWith(_ > _)\n        if (primes.length\
    \ == 0) 0 else sumDigits(primes(0))", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val maxPrime = primes.max\n        val digits = maxPrime.toString.toList.map(x\
    \ => x.toString.toLong)\n        digits.sum", "        var primes = List[Long]()\n\
    \        for (i <- lst) {\n            if (isPrime(i)) primes = i :: primes\n\
    \        }\n        var max = 0l\n        for (i <- primes) {\n            if\
    \ (i > max) max = i\n        }\n        var sum = 0l\n        var temp = max\n\
    \        while (temp > 0) {\n            sum += temp % 10\n            temp /=\
    \ 10\n        }\n        return sum", "        var max = 0l\n        for (i <-\
    \ lst) {\n            if (isPrime(i) && i > max) max = i\n        }\n        var\
    \ sum = 0l\n        while (max > 0) {\n            sum += max % 10\n         \
    \   max /= 10\n        }\n        return sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val max = primes.max\n        sumDigits(max)", "   \
    \     val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        val digits = max.toString.map(_.asDigit).toList\n        digits.sum",
  "        val primes = lst.filter(x => isPrime(x))\n        val largest = primes.max\n\
    \        largest.toString.map(x => x.asDigit).sum", "        var primes = new\
    \ ListBuffer[Long]()\n        for (i <- lst) {\n            if (isPrime(i)) primes\
    \ += i\n        }\n        var max = 0l\n        for (i <- primes) {\n       \
    \     if (i > max) max = i\n        }\n        var sum = 0l\n        for (i <-\
    \ max.toString) {\n            sum += i.toString.toLong\n        }\n        return\
    \ sum", "        def isPrime(n : Long) : Boolean = {\n            if (n <= 1)\
    \ return false\n            if (n == 2) return true\n            if (n % 2 ==\
    \ 0) return false\n            for (i <- 3 to sqrt(n).toInt by 2) {\n        \
    \        if (n % i == 0) return false\n            }\n            return true\n\
    \        }\n        var max = 0l\n        for (i <- lst) {\n            if (isPrime(i)\
    \ && i > max) max = i\n        }\n        var sum = 0l\n        var temp = max\n\
    \        while (temp > 0) {\n            sum += temp % 10\n            temp /=\
    \ 10\n        }\n        return sum", "        var lst2 = lst.filter(x => x !=\
    \ 0)\n        var lst3 = lst2.filter(x => x != 1)\n        var lst4 = lst3.filter(x\
    \ => x != 2)\n        var lst5 = lst4.filter(x => x != 3)\n        var lst6 =\
    \ lst5.filter(x => x != 5)\n        var lst7 = lst6.filter(x => x != 7)\n    \
    \    var lst8 = lst7.filter(x => x != 11)\n        var lst9 = lst8.filter(x =>\
    \ x != 13)\n        var lst10 = lst9.filter(x => x != 17)\n        var lst11 =\
    \ lst10.filter(x => x != 19)\n        var lst12 = lst11.filter(x => x != 23)\n\
    \        var lst13 = lst12.filter(x => x != 29)\n        var lst14 = lst13.filter(x\
    \ => x != 31)\n        var lst15 = lst14.filter(x => x != 37)\n        var lst16\
    \ = lst15.filter(x => x != 41)\n        var lst17 = lst16.filter(x => x != 43)\n\
    \        var lst18 = lst17.filter(x => x != 47)\n        var lst19 = lst18.filter(x\
    \ => x != 53)\n        var lst20 = lst19.filter(x => x != 59)\n        var lst21\
    \ = lst20.filter(x => x != 61)\n        var lst22 = lst21.filter(x => x != 67)\n\
    \        var lst23 = lst22.filter(x => x != 71)\n        var lst24 = lst23.filter(x\
    \ => x != 73)\n        var lst25 = lst24.filter(x => x != 79)\n        var lst26\
    \ = lst25.filter(x => x != 83)\n        var lst27 = lst26.filter(x => x != 89)\n\
    \        var lst28 = lst27.filter(x => x != 97)", "        // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n\
    \        // (10l)\n        // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong,\
    \ 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong,\
    \ 5l.toLong, 1l.toLong)))\n        // (25l)\n        // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n        // (13l)\n        // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong,\
    \ 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    \
    \    // (11l)\n        //", "        var max = 0l\n        for (i <- lst) {\n\
    \            if (isPrime(i) && i > max) max = i\n        }\n        var sum =\
    \ 0l\n        var temp = max\n        while (temp > 0) {\n            sum += temp\
    \ % 10\n            temp /= 10\n        }\n        return sum", "        var primes\
    \ : List[Long] = List[Long]()\n        for (i <- lst) {\n            if (isPrime(i))\
    \ primes = i :: primes\n        }\n        var max : Long = 0\n        for (i\
    \ <- primes) {\n            if (i > max) max = i\n        }\n        var sum :\
    \ Long = 0\n        var str : String = max.toString\n        for (i <- str) {\n\
    \            sum += i.toString.toLong\n        }\n        return sum", "     \
    \   val primes = lst.filter(isPrime(_))\n        val maxPrime = primes.max\n \
    \       maxPrime.toString.map(_.asDigit).sum", "        var primes = List[Long]()\n\
    \        for (i <- lst) {\n            if (isPrime(i)) primes = i :: primes\n\
    \        }\n        var max = 0l\n        for (i <- primes) {\n            if\
    \ (i > max) max = i\n        }\n        var sum = 0l\n        for (i <- max.toString)\
    \ {\n            sum += i.toString.toLong\n        }\n        return sum", " \
    \       val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        max.toString.map(x => x.asDigit).sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val max = primes.max\n        var sum = 0l\n       \
    \ var n = max\n        while (n > 0) {\n            sum += n % 10\n          \
    \  n /= 10\n        }\n        sum", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val max = primes.max\n        val digits = max.toString.toList.map(x\
    \ => x.toString.toLong)\n        digits.sum", "        def isPrime(n : Long) :\
    \ Boolean = {\n            if (n < 2) return false\n            if (n == 2 ||\
    \ n == 3) return true\n            if (n % 2 == 0 || n % 3 == 0) return false\n\
    \            var i = 5\n            var w = 2\n            while (i * i <= n)\
    \ {\n                if (n % i == 0) return false\n                i += w\n  \
    \              w = 6 - w\n            }\n            return true\n        }\n\
    \        val primes = lst.filter(isPrime(_))\n        val maxPrime = primes.max\n\
    \        def sumDigits(n : Long) : Long = {\n            if (n == 0) return 0\n\
    \            return (n % 10) + sumDigits(n / 10)\n        }\n        return sumDigits(maxPrime)",
  "        var max = 0l\n        for (i <- lst) {\n            if (isPrime(i) && i\
    \ > max) max = i\n        }\n        var sum = 0l\n        var str = max.toString\n\
    \        for (i <- 0 until str.length) {\n            sum += str(i).toString.toInt\n\
    \        }\n        return sum", "        var primes = new ArrayBuffer[Long]\n\
    \        for (i <- lst) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        var max = primes.max\n        var sum = 0l\n        while (max > 0) {\n\
    \            sum += max % 10\n            max /= 10\n        }\n        return\
    \ sum", "        val primes = lst.filter(x => isPrime(x))\n        val maxPrime\
    \ = primes.max\n        val digits = maxPrime.toString.map(_.asDigit).toList\n\
    \        digits.sum", "        def isPrime(n : Long) : Boolean = {\n         \
    \   if (n <= 1) return false\n            if (n <= 3) return true\n          \
    \  if (n % 2 == 0 || n % 3 == 0) return false\n            var i = 5\n       \
    \     while (i * i <= n) {\n                if (n % i == 0 || n % (i + 2) == 0)\
    \ return false\n                i += 6\n            }\n            return true\n\
    \        }\n        def sumDigits(n : Long) : Long = {\n            var sum =\
    \ 0l\n            var nn = n\n            while (nn > 0) {\n                sum\
    \ += nn % 10\n                nn /= 10\n            }\n            return sum\n\
    \        }\n        var max = 0l\n        for (i <- lst) {\n            if (isPrime(i)\
    \ && i > max) max = i\n        }\n        return sumDigits(max)", "        val\
    \ primes = new ArrayBuffer[Long]\n        for (i <- lst) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        val max = primes.max\n        var sum = 0l\n\
    \        for (i <- max.toString) {\n            sum += i.toString.toLong\n   \
    \     }\n        sum", "        var mx = 0l\n        for (i <- lst) {\n      \
    \      if (i > mx && isPrime(i)) mx = i\n        }\n        var sum = 0l\n   \
    \     var s = mx.toString\n        for (i <- 0 until s.length) {\n           \
    \ sum += s(i).toString.toInt\n        }\n        return sum", "        var max\
    \ : Long = 0\n        for (i <- lst) {\n            if (isPrime(i)) {\n      \
    \          if (i > max) {\n                    max = i\n                }\n  \
    \          }\n        }\n        var sum : Long = 0\n        var temp : Long =\
    \ max\n        while (temp > 0) {\n            sum += temp % 10\n            temp\
    \ /= 10\n        }\n        return sum", "        val primes = lst.filter(x =>\
    \ isPrime(x))\n        val max = primes.max\n        return max.toString.map(_.asDigit).sum",
  "        var max = 0l\n        for (i <- lst) {\n            if (i > max && isPrime(i))\
    \ max = i\n        }\n        var sum = 0l\n        while (max > 0) {\n      \
    \      sum += max % 10\n            max /= 10\n        }\n        return sum",
  "        var lst2 = lst.filter(x => x != 0l.toLong && x != 1l.toLong)\n        var\
    \ lst3 = lst2.filter(x => x % 2l.toLong != 0l.toLong)\n        var lst4 = lst3.filter(x\
    \ => x % 3l.toLong != 0l.toLong)\n        var lst5 = lst4.filter(x => x % 5l.toLong\
    \ != 0l.toLong)\n        var lst6 = lst5.filter(x => x % 7l.toLong != 0l.toLong)\n\
    \        var lst7 = lst6.filter(x => x % 11l.toLong != 0l.toLong)\n        var\
    \ lst8 = lst7.filter(x => x % 13l.toLong != 0l.toLong)\n        var lst9 = lst8.filter(x\
    \ => x % 17l.toLong != 0l.toLong)\n        var lst10 = lst9.filter(x => x % 19l.toLong\
    \ != 0l.toLong)\n        var lst11 = lst10.filter(x => x % 23l.toLong != 0l.toLong)\n\
    \        var lst12 = lst11.filter(x => x % 29l.toLong != 0l.toLong)\n        var\
    \ lst13 = lst12.filter(x => x % 31l.toLong != 0l.toLong)\n        var lst14 =\
    \ lst13.filter(x => x % 37l.toLong != 0l.toLong)\n        var lst15 = lst14.filter(x\
    \ => x % 41l.toLong != 0l.toLong)\n        var lst16 = lst15.filter(x => x % 43l.toLong\
    \ != 0l.toLong)\n        var lst17 = lst16.filter(x => x % 47l.toLong != 0l.toLong)\n\
    \        var lst18 = lst17.filter(x => x % 53l.toLong != 0l.toLong)\n        var\
    \ lst19 = lst18.filter(x => x % 59", "        var primes = new ListBuffer[Long]()\n\
    \        for (i <- lst) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        var max = 0l\n        for (i <- primes) {\n            if (i > max) max\
    \ = i\n        }\n        var sum = 0l\n        var str = max.toString\n     \
    \   for (i <- str) {\n            sum += i.toString.toLong\n        }\n      \
    \  return sum", "        val primes = lst.filter(x => isPrime(x))\n        val\
    \ largest = primes.max\n        largest.toString.map(x => x.asDigit).sum", " \
    \       val primes = lst.filter(x => isPrime(x))\n        val largest = primes.max\n\
    \        sumDigits(largest)", "        var lst2 = lst.filter(x => x != 0)\n  \
    \      var lst3 = lst2.map(x => x.toString.map(y => y.asDigit).sum)\n        var\
    \ lst4 = lst3.filter(x => x != 0)\n        var lst5 = lst4.filter(x => x != 1)\n\
    \        var lst6 = lst5.filter(x => x != 2)\n        var lst7 = lst6.filter(x\
    \ => x != 3)\n        var lst8 = lst7.filter(x => x != 5)\n        var lst9 =\
    \ lst8.filter(x => x != 7)\n        var lst10 = lst9.filter(x => x != 11)\n  \
    \      var lst11 = lst10.filter(x => x != 13)\n        var lst12 = lst11.filter(x\
    \ => x != 17)\n        var lst13 = lst12.filter(x => x != 19)\n        var lst14\
    \ = lst13.filter(x => x != 23)\n        var lst15 = lst14.filter(x => x != 29)\n\
    \        var lst16 = lst15.filter(x => x != 31)\n        var lst17 = lst16.filter(x\
    \ => x != 37)\n        var lst18 = lst17.filter(x => x != 41)\n        var lst19\
    \ = lst18.filter(x => x != 43)\n        var lst20 = lst19.filter(x => x != 47)\n\
    \        var lst21 = lst20.filter(x => x != 53)\n        var lst22 = lst21.filter(x\
    \ => x != 59)\n        var lst23 = lst22.filter(x => x != 61)\n        var lst24\
    \ = lst23.filter(x => x != 67)\n        var lst25 = lst24.filter(x => x != 71)\n\
    \        var lst26 = lst25.filter(x => x != 73)\n        var lst27 = lst26.filter(x\
    \ => x != 79)\n        var lst28", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val max = primes.max\n        max.toString.map(x => x.asDigit).sum",
  "        val primes = lst.filter(x => x.isPrime)\n        primes.max.toString.map(x\
    \ => x.asDigit).sum", "        var max = 0l.toLong\n        for (i <- lst) {\n\
    \            if (isPrime(i) && i > max) max = i\n        }\n        var sum =\
    \ 0l.toLong\n        for (i <- max.toString) {\n            sum += i.toString.toLong\n\
    \        }\n        return sum", "        var max = 0l\n        for (i <- lst)\
    \ {\n            if (isPrime(i) && i > max) max = i\n        }\n        var sum\
    \ = 0l\n        while (max > 0) {\n            sum += max % 10\n            max\
    \ /= 10\n        }\n        return sum", "        var max : Long = 0\n       \
    \ for (i <- lst) {\n            if (i > max && isPrime(i)) max = i\n        }\n\
    \        return sumDigits(max)", "        def isPrime(n : Long) : Boolean = {\n\
    \            if (n == 1) return false\n            if (n == 2) return true\n \
    \           if (n % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n\
    \            for (i <- 3l to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        val primes\
    \ = lst.filter(isPrime)\n        val max = primes.max\n        var sum = 0l\n\
    \        var n = max\n        while (n > 0) {\n            sum += n % 10\n   \
    \         n /= 10\n        }\n        return sum", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n == 1) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            for (i <-\
    \ 3l to sqrt(n).toLong by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        var max = 0l\n   \
    \     for (i <- lst) {\n            if (isPrime(i) && i > max) max = i\n     \
    \   }\n        var sum = 0l\n        while (max > 0) {\n            sum += max\
    \ % 10\n            max /= 10\n        }\n        return sum", "        var primes\
    \ = List[Long]()\n        for (i <- lst) {\n            if (isPrime(i)) primes\
    \ = i :: primes\n        }\n        var max = 0l\n        for (i <- primes) {\n\
    \            if (i > max) max = i\n        }\n        var sum = 0l\n        var\
    \ str = max.toString\n        for (i <- str) {\n            sum += i.toString.toLong\n\
    \        }\n        return sum", "        var primes = new ArrayBuffer[Long]()\n\
    \        var max = 0l\n        for (i <- lst) {\n            if (isPrime(i)) {\n\
    \                primes += i\n                if (i > max) max = i\n         \
    \   }\n        }\n        var sum = 0l\n        var str = max.toString\n     \
    \   for (i <- 0 until str.length) {\n            sum += str(i).toString.toLong\n\
    \        }\n        return sum", "        var primes = new ListBuffer[Long]\n\
    \        for (i <- lst) {\n            if (i.isValidInt) {\n                if\
    \ (isPrime(i.toInt)) {\n                    primes += i\n                }\n \
    \           }\n        }\n        var max = primes.max\n        var sum = 0\n\
    \        while (max > 0) {\n            sum += (max % 10).toInt\n            max\
    \ /= 10\n        }\n        return sum", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n <= 1) return false\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            for (i <- 3l.toLong to\
    \ sqrt(n).toLong by 2) {\n                if (n % i == 0) return false\n     \
    \       }\n            return true\n        }\n        var max = 0l.toLong\n \
    \       for (i <- lst) {\n            if (isPrime(i) && i > max) max = i\n   \
    \     }\n        var sum = 0l.toLong\n        while (max > 0) {\n            sum\
    \ += max % 10\n            max /= 10\n        }\n        return sum", "      \
    \  var largestPrime = 0l\n        for (i <- lst) {\n            if (i > largestPrime\
    \ && isPrime(i)) {\n                largestPrime = i\n            }\n        }\n\
    \        var sum = 0l\n        var temp = largestPrime\n        while (temp >\
    \ 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n    \
    \    return sum", "        var max = 0l\n        for (i <- lst) {\n          \
    \  if (i > max && isPrime(i)) max = i\n        }\n        var sum = 0l\n     \
    \   while (max > 0) {\n            sum += max % 10\n            max /= 10\n  \
    \      }\n        return sum", "        def isPrime(n : Long) : Boolean = {\n\
    \            if (n == 1) return false\n            if (n == 2) return true\n \
    \           if (n % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n\
    \            for (i <- 3l to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        def sumDigits(n\
    \ : Long) : Long = {\n            var sum = 0l\n            var m = n\n      \
    \      while (m > 0) {\n                sum += m % 10\n                m /= 10\n\
    \            }\n            return sum\n        }\n        var max = 0l\n    \
    \    for (i <- lst) {\n            if (isPrime(i)) {\n                max = max\
    \ max i\n            }\n        }\n        return sumDigits(max)", "        //\
    \ Your code goes here\n        var max = 0l\n        for (i <- lst) {\n      \
    \      if (i > max && isPrime(i)) max = i\n        }\n        var sum = 0l\n \
    \       while (max > 0) {\n            sum += max % 10\n            max /= 10\n\
    \        }\n        return sum", "        def isPrime(n : Long) : Boolean = {\n\
    \            if (n <= 1) return false\n            if (n == 2) return true\n \
    \           if (n % 2 == 0) return false\n            for (i <- 3l to sqrt(n).toLong\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var max = 0l\n        for (i <- lst) {\n\
    \            if (isPrime(i) && i > max) max = i\n        }\n        var sum =\
    \ 0l\n        while (max > 0) {\n            sum += max % 10\n            max\
    \ /= 10\n        }\n        return sum", "        var max = 0l\n        for (i\
    \ <- lst) {\n            if (isPrime(i) && i > max) max = i\n        }\n     \
    \   var sum = 0l\n        var s = max.toString\n        for (i <- 0 until s.length)\
    \ {\n            sum += s(i).toString.toInt\n        }\n        return sum", " \
    \       def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n\
    \            if (n <= 3) return true\n            if (n % 2 == 0 || n % 3 == 0)\
    \ return false\n            var i = 5\n            while (i * i <= n) {\n    \
    \            if (n % i == 0 || n % (i + 2) == 0) return false\n              \
    \  i += 6\n            }\n            return true\n        }\n        def sumDigits(n\
    \ : Long) : Long = {\n            var sum = 0l\n            var nn = n\n     \
    \       while (nn > 0) {\n                sum += nn % 10\n                nn /=\
    \ 10\n            }\n            return sum\n        }\n        var maxPrime =\
    \ 0l\n        for (i <- lst) {\n            if (isPrime(i) && i > maxPrime) maxPrime\
    \ = i\n        }\n        return sumDigits(maxPrime)", "        var max = 0l\n\
    \        for (i <- lst) {\n            if (i > max && isPrime(i)) max = i\n  \
    \      }\n        var sum = 0l\n        while (max > 0) {\n            sum +=\
    \ max % 10\n            max /= 10\n        }\n        return sum", "        var\
    \ primes = List[Long]()\n        for (i <- lst) {\n            if (isPrime(i))\
    \ primes = i :: primes\n        }\n        var max = 0l\n        for (i <- primes)\
    \ {\n            if (i > max) max = i\n        }\n        var sum = 0l\n     \
    \   var str = max.toString\n        for (i <- str) {\n            sum += i.toString.toLong\n\
    \        }\n        return sum", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val largest = primes.max\n        largest.toString.map(x => x.asDigit).sum",
  "        val primes = lst.filter(x => isPrime(x))\n        val largest = primes.max\n\
    \        val digits = largest.toString.map(_.asDigit)\n        digits.sum", " \
    \       var primes = lst.filter(x => isPrime(x))\n        var max = primes.max\n\
    \        var sum = 0l\n        while (max > 0) {\n            sum += max % 10\n\
    \            max /= 10\n        }\n        return sum", "        var max = 0l\n\
    \        for (i <- lst) {\n            if (i > max && isPrime(i)) max = i\n  \
    \      }\n        var sum = 0l\n        while (max > 0) {\n            sum +=\
    \ max % 10\n            max /= 10\n        }\n        return sum", "        var\
    \ max = 0l\n        for (i <- lst) {\n            if (i > max && isPrime(i)) max\
    \ = i\n        }\n        var sum = 0l\n        while (max > 0) {\n          \
    \  sum += max % 10\n            max /= 10\n        }\n        return sum", " \
    \       var max = 0l\n        for (i <- lst) {\n            if (i > max && isPrime(i))\
    \ max = i\n        }\n        var sum = 0l\n        var str = max.toString\n \
    \       for (i <- 0 until str.length) {\n            sum += str(i).toString.toLong\n\
    \        }\n        return sum", "        def isPrime(n : Long) : Boolean = {\n\
    \            if (n <= 1) return false\n            if (n <= 3) return true\n \
    \           if (n % 2 == 0 || n % 3 == 0) return false\n            var i = 5\n\
    \            while (i * i <= n) {\n                if (n % i == 0 || n % (i +\
    \ 2) == 0) return false\n                i += 6\n            }\n            return\
    \ true\n        }\n        val primes = lst.filter(isPrime(_))\n        if (primes.isEmpty)\
    \ return 0\n        val maxPrime = primes.max\n        var sum = 0\n        var\
    \ n = maxPrime\n        while (n > 0) {\n            sum += n % 10\n         \
    \   n /= 10\n        }\n        return sum", "        val primes = lst.filter(x\
    \ => x.isPrime)\n        val largest = primes.max\n        largest.toString.map(x\
    \ => x.asDigit).sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val largest = primes.max\n        val digits = largest.toString.map(_.asDigit)\n\
    \        digits.sum", "        def isPrime(n : Long) : Boolean = {\n         \
    \   if (n == 1) return false\n            if (n == 2) return true\n          \
    \  if (n % 2 == 0) return false\n            for (i <- 3l to sqrt(n).toLong by\
    \ 2) {\n                if (n % i == 0) return false\n            }\n        \
    \    return true\n        }\n        var max = 0l\n        for (i <- lst) {\n\
    \            if (isPrime(i) && i > max) max = i\n        }\n        var sum =\
    \ 0l\n        while (max > 0) {\n            sum += max % 10\n            max\
    \ /= 10\n        }\n        return sum", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n == 2) return true\n            if (n % 2 == 0) return\
    \ false\n            val sqrt = sqrt(n).toLong\n            for (i <- 3l to sqrt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var max = 0l\n        for (i <- lst) {\n\
    \            if (isPrime(i) && i > max) max = i\n        }\n        var sum =\
    \ 0l\n        while (max > 0) {\n            sum += max % 10\n            max\
    \ /= 10\n        }\n        return sum", "        val primes = lst.filter(x =>\
    \ isPrime(x))\n        val maxPrime = primes.max\n        maxPrime.toString.map(x\
    \ => x.asDigit).sum"]
stop_tokens:
- "\n    }\n"
