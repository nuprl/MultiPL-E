language: scala
name: HumanEval_17_parse_music
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            note match {\n                case\
    \ \"o\" => beats += 4\n                case \"o|\" => beats += 2\n           \
    \     case \".|\" => beats += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpa8dy307j.scala:19)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpa8dy307j.scala:21)\n\
    \tat Problem$.main(tmpa8dy307j.scala:25)\n\tat Problem.main(tmpa8dy307j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            note\
    \ match {\n                case \"o\" => beats += 4\n                case \"o|\"\
    \ => beats += 2\n                case \".|\" => beats += 1\n            }\n  \
    \      }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpzl7rfpum.scala:20)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpzl7rfpum.scala:22)\n\
    \tat Problem$.main(tmpzl7rfpum.scala:26)\n\tat Problem.main(tmpzl7rfpum.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        var\
    \ beats = List[Long]()\n        for (note <- notes) {\n            if (note ==\
    \ \"o\") beats = beats :+ 4\n            else if (note == \"o|\") beats = beats\
    \ :+ 2\n            else if (note == \".|\") beats = beats :+ 1\n        }\n \
    \       beats\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = new ListBuffer[Long]\n        var current_beat\
    \ = 0\n        for (c <- music_string) {\n            if (c == 'o') {\n      \
    \          beats += 4\n                current_beat += 4\n            } else if\
    \ (c == '|') {\n                beats += current_beat\n                current_beat\
    \ = 0\n            } else if (c == '.') {\n                beats += 1\n      \
    \          current_beat += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkhh240_g.scala:33)\n\tat Problem.main(tmpkhh240_g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    beats += 2\n                    i += 1\n            \
    \    } else {\n                    beats += 4\n                }\n           \
    \ } else if (music_string(i) == '.') {\n                beats += 1\n         \
    \   }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpldhzcqh6.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        var result = List[Long]()\n        var i = 0\n   \
    \     while (i < music_string.length) {\n            if (music_string(i) == 'o')\
    \ {\n                if (i + 1 < music_string.length && music_string(i + 1) ==\
    \ '|') {\n                    result = result :+ 2\n                    i += 2\n\
    \                } else {\n                    result = result :+ 4\n        \
    \            i += 1\n                }\n            } else {\n               \
    \ result = result :+ 1\n                i += 2\n            }\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpewv3amaf.scala:34)\n\tat Problem.main(tmpewv3amaf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            note match {\n                case\
    \ \"o\" => beats += 4\n                case \"o|\" => beats += 2\n           \
    \     case \".|\" => beats += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpa8dy307j.scala:19)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpa8dy307j.scala:21)\n\
    \tat Problem$.main(tmpa8dy307j.scala:25)\n\tat Problem.main(tmpa8dy307j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            if (note == \"o\") beats += 4\n\
    \            else if (note == \"o|\") beats += 2\n            else if (note ==\
    \ \".|\") beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    beats += 2\n                    i += 1\n            \
    \    } else {\n                    beats += 4\n                }\n           \
    \ } else if (music_string(i) == '.') {\n                beats += 1\n         \
    \   }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpldhzcqh6.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (c <-\
    \ music_string) {\n            if (c == 'o') beats += 4\n            else if (c\
    \ == '|') beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoawna2dt.scala:25)\n\tat Problem.main(tmpoawna2dt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            note match {\n                case\
    \ \"o\" => beats += 4\n                case \"o|\" => beats += 2\n           \
    \     case \".|\" => beats += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpa8dy307j.scala:19)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpa8dy307j.scala:21)\n\
    \tat Problem$.main(tmpa8dy307j.scala:25)\n\tat Problem.main(tmpa8dy307j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = music_string.split(\" \").map(x => x match\
    \ {\n            case \"o\" => 4\n            case \"o|\" => 2\n            case\
    \ \".|\" => 1\n        }).toList\n        beats\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdh2z5jf5.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        beats\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (beats : List[Int])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        var result = List[Long]()\n        var i = 0\n   \
    \     while (i < music_string.length) {\n            if (music_string(i) == 'o')\
    \ {\n                if (i + 1 < music_string.length && music_string(i + 1) ==\
    \ '|') {\n                    result = result :+ 2\n                    i += 2\n\
    \                } else {\n                    result = result :+ 4\n        \
    \            i += 1\n                }\n            } else {\n               \
    \ result = result :+ 1\n                i += 2\n            }\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpewv3amaf.scala:34)\n\tat Problem.main(tmpewv3amaf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = notes.map(note => {\n            if (note == \"o\") 4\n            else\
    \ if (note == \"o|\") 2\n            else 1\n        })\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzde607ua.scala:20:14\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        beats.toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val map = Map('o' -> 4, '.' -> 1)\n        music_string.split(\"\
    \ \").map(x => map(x(0))).toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf0of620z.scala:15:52\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mx\e[0m => map(x(\e[31m0\e[0m))).toList\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m    \
    \    Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Your code here\n        val beats = ListBuffer[Long]()\n\
    \        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') {\n                    beats += 2\n                    i += 1\n\
    \                } else {\n                    beats += 4\n                }\n\
    \            } else if (music_string(i) == '.') {\n                beats += 1\n\
    \            }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3q98ba86.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            if (note == \"o\") beats += 4\n\
    \            else if (note == \"o|\") beats += 2\n            else if (note ==\
    \ \".|\") beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Write your code here\n        val notes = music_string.split(\"\
    \ \")\n        notes.map(note => {\n            if (note == \"o\") 4\n       \
    \     else if (note == \"o|\") 2\n            else 1\n        }).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1t_xmkto.scala:20:11\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        notes.map(\e[36mnote\e\
    [0m => {\n\e[31m17 |\e[0m            \e[33mif\e[0m (note == \e[31m\"o\"\e[0m)\
    \ \e[31m4\e[0m\n\e[31m18 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (note\
    \ == \e[31m\"o|\"\e[0m) \e[31m2\e[0m\n\e[31m19 |\e[0m            \e[33melse\e\
    [0m \e[31m1\e[0m\n\e[31m20 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m    \
    \    ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m\
    \   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until\
    \ music_string.length) {\n            if (music_string(i) == 'o') {\n        \
    \        if (i + 1 < music_string.length && music_string(i + 1) == '|') {\n  \
    \                  result = result :+ 2\n                    i += 1\n        \
    \        } else {\n                    result = result :+ 4\n                }\n\
    \            } else if (music_string(i) == '.') {\n                if (i + 1 <\
    \ music_string.length && music_string(i + 1) == '|') {\n                    result\
    \ = result :+ 1\n                    i += 1\n                }\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptg3bdy9v.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmptg3bdy9v.scala:26:22 ------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^\e[0m\n\e[31m   |\e[0m                    value += is not a member\
    \ of Int - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Fill in your code here.\n        val notes = music_string.split(\"\
    \ \")\n        val beats = new ArrayBuffer[Long]\n        for (note <- notes)\
    \ {\n            if (note == \"o\") {\n                beats += 4\n          \
    \  } else if (note == \"o|\") {\n                beats += 2\n            } else\
    \ if (note == \".|\") {\n                beats += 1\n            }\n        }\n\
    \        beats.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Write your code here\n        return List()\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8bmgvbhl.scala:19)\n\tat Problem.main(tmp8bmgvbhl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        var i = 0\n\
    \        while (i < music_string.length) {\n            if (music_string(i) ==\
    \ 'o') {\n                if (i + 1 < music_string.length && music_string(i +\
    \ 1) == '|') {\n                    beats += 2\n                    i += 2\n \
    \               } else {\n                    beats += 4\n                   \
    \ i += 1\n                }\n            } else {\n                beats += 1\n\
    \                i += 2\n            }\n        }\n        beats.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp511zio11.scala:34)\n\tat Problem.main(tmp511zio11.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_string_split = music_string.split(\" \"\
    )\n        val music_string_split_length = music_string_split.length\n       \
    \ val music_string_split_length_half = music_string_split_length / 2\n       \
    \ val music_string_split_length_quarter = music_string_split_length / 4\n    \
    \    val music_string_split_length_eighth = music_string_split_length / 8\n  \
    \      val music_string_split_length_sixteenth = music_string_split_length / 16\n\
    \        val music_string_split_length_thirtysecond = music_string_split_length\
    \ / 32\n        val music_string_split_length_sixtyfourth = music_string_split_length\
    \ / 64\n        val music_string_split_length_onethirtysecond = music_string_split_length\
    \ / 128\n        val music_string_split_length_twosixtyfourth = music_string_split_length\
    \ / 256\n        val music_string_split_length_fiveseventwentyeighth = music_string_split_length\
    \ / 528\n        val music_string_split_length_tentwofiftysixth = music_string_split_length\
    \ / 1056\n        val music_string_split_length_twentyfivethirteensecond = music_string_split_length\
    \ / 2112\n        val music_string_split_length_fiftytwotwentyfourth = music_string_split_length\
    \ / 4224\n        val music_string_split_length_onetwentyeightfortyeighth = music_string_split_length\
    \ / 8448\n        val music_string_split_length_twofiftysixninetysixth = music_string_split_length\
    \ / 16896\n        val music_string_split_length_fivetwelveonehundredninetysecond\
    \ = music_string_split_length / 33792\n        val music_string_split_length_tentwentytwohundredthirtyeighth\
    \ = music_string_split_length / 67584\n        val music_string_split_length_twentyfoureighthundredseventysixth\
    \ = music_string_split_length / 135168\n        val music_string_split_length_fortyeighthundredf\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq23352l2.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpq23352l2.scala:34:5 ---------------------\e[0m\e[0m\n\e[31m34 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        var result = List[Long]()\n        var i = 0\n   \
    \     while (i < music_string.length) {\n            if (music_string(i) == 'o')\
    \ {\n                if (i + 1 < music_string.length && music_string(i + 1) ==\
    \ '|') {\n                    result = 2l.toLong :: result\n                 \
    \   i += 2\n                } else {\n                    result = 4l.toLong ::\
    \ result\n                    i += 1\n                }\n            } else {\n\
    \                result = 1l.toLong :: result\n                i += 2\n      \
    \      }\n        }\n        result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqjgxxmgf.scala:34)\n\tat Problem.main(tmpqjgxxmgf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            note match {\n                case\
    \ \"o\" => beats += 4\n                case \"o|\" => beats += 2\n           \
    \     case \".|\" => beats += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpa8dy307j.scala:19)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpa8dy307j.scala:21)\n\
    \tat Problem$.main(tmpa8dy307j.scala:25)\n\tat Problem.main(tmpa8dy307j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        notes.map(note\
    \ => note match {\n            case \"o\" => 4\n            case \"o|\" => 2\n\
    \            case \".|\" => 1\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp60inz1tj.scala:19:11\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        notes.map(\e[36mnote\e\
    [0m => note \e[33mmatch\e[0m {\n\e[31m16 |\e[0m            \e[33mcase\e[0m \e\
    [31m\"o\"\e[0m => \e[31m4\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m \e\
    [31m\"o|\"\e[0m => \e[31m2\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m \e\
    [31m\".|\"\e[0m => \e[31m1\e[0m\n\e[31m19 |\e[0m        }).toList\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e\
    [0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    beats += 2\n                    i += 1\n            \
    \    } else {\n                    beats += 4\n                }\n           \
    \ } else if (music_string(i) == '.') {\n                beats += 1\n         \
    \   }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpldhzcqh6.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \").toList\n   \
    \     notes.map(note => {\n            note match {\n                case \"o\"\
    \ => 4\n                case \"o|\" => 2\n                case \".|\" => 1\n \
    \           }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpbxzuj16d.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.parseMusic(tmpbxzuj16d.scala:21)\n\
    \tat Problem$.main(tmpbxzuj16d.scala:24)\n\tat Problem.main(tmpbxzuj16d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Write your code here\n        var result = List[Long]()\n\
    \        var i = 0\n        while (i < music_string.length) {\n            if\
    \ (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    result = result :+ 2\n\
    \                    i += 2\n                } else {\n                    result\
    \ = result :+ 4\n                    i += 1\n                }\n            }\
    \ else {\n                result = result :+ 1\n                i += 2\n     \
    \       }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfx__3yod.scala:35)\n\tat Problem.main(tmpfx__3yod.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    beats += 2\n                    i += 1\n            \
    \    } else {\n                    beats += 4\n                }\n           \
    \ } else if (music_string(i) == '.') {\n                beats += 1\n         \
    \   }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpldhzcqh6.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            note\
    \ match {\n                case \"o\" => beats += 4\n                case \"o|\"\
    \ => beats += 2\n                case \".|\" => beats += 1\n            }\n  \
    \      }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpzl7rfpum.scala:20)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpzl7rfpum.scala:22)\n\
    \tat Problem$.main(tmpzl7rfpum.scala:26)\n\tat Problem.main(tmpzl7rfpum.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        var list = List[Long]()\n        var i = 0\n     \
    \   while (i < music_string.length) {\n            if (music_string(i) == 'o')\
    \ {\n                if (i + 1 < music_string.length && music_string(i + 1) ==\
    \ '|') {\n                    list = list :+ 2\n                    i += 2\n \
    \               } else {\n                    list = list :+ 4\n             \
    \       i += 1\n                }\n            } else {\n                list\
    \ = list :+ 1\n                i += 2\n            }\n        }\n        list\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplk5o8z47.scala:34)\n\tat Problem.main(tmplk5o8z47.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(x => x match {\n   \
    \         case \"o\" => 4l\n            case \"o|\" => 2l\n            case \"\
    .|\" => 1l\n        }).toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmp5tffkaqe.scala:17)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmp5tffkaqe.scala:18)\n\
    \tat Problem$.main(tmp5tffkaqe.scala:21)\n\tat Problem.main(tmp5tffkaqe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            note match {\n                case\
    \ \"o\" => beats += 4\n                case \"o|\" => beats += 2\n           \
    \     case \".|\" => beats += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpa8dy307j.scala:19)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpa8dy307j.scala:21)\n\
    \tat Problem$.main(tmpa8dy307j.scala:25)\n\tat Problem.main(tmpa8dy307j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        var result = List[Long]()\n        val notes = music_string.split(\"\
    \ \")\n        for (note <- notes) {\n            if (note == \"o\") result =\
    \ result :+ 4l\n            else if (note == \"o|\") result = result :+ 2l\n \
    \           else if (note == \".|\") result = result :+ 1l\n        }\n      \
    \  result\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (ch <-\
    \ music_string) {\n            if (ch == 'o') beats += 4\n            else if\
    \ (ch == '|') beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwlialces.scala:25)\n\tat Problem.main(tmpwlialces.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(x => x match {\n   \
    \         case \"o\" => 4l\n            case \"o|\" => 2l\n            case \"\
    .|\" => 1l\n        }).toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmp5tffkaqe.scala:17)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmp5tffkaqe.scala:18)\n\
    \tat Problem$.main(tmp5tffkaqe.scala:21)\n\tat Problem.main(tmp5tffkaqe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        var result : List[Long] = List()\n        var notes\
    \ = music_string.split(\" \")\n        for (note <- notes) {\n            if (note\
    \ == \"o\") {\n                result = result :+ 4\n            } else if (note\
    \ == \"o|\") {\n                result = result :+ 2\n            } else if (note\
    \ == \".|\") {\n                result = result :+ 1\n            }\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Write your code here\n        var result = List[Long]()\n\
    \        var i = 0\n        while (i < music_string.length) {\n            if\
    \ (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    result = result :+ 2\n\
    \                    i += 2\n                } else {\n                    result\
    \ = result :+ 4\n                    i += 1\n                }\n            }\
    \ else {\n                result = result :+ 1\n                i += 2\n     \
    \       }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfx__3yod.scala:35)\n\tat Problem.main(tmpfx__3yod.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Write your code here\n        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            note match {\n                case \"o\" => beats += 4\n        \
    \        case \"o|\" => beats += 2\n                case \".|\" => beats += 1\n\
    \            }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmprb4291pl.scala:21)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmprb4291pl.scala:23)\n\
    \tat Problem$.main(tmprb4291pl.scala:27)\n\tat Problem.main(tmprb4291pl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        notes.map(note\
    \ => {\n            if (note == \"o\") 4\n            else if (note == \"o|\"\
    ) 2\n            else 1\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy4iwoegt.scala:19:11\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        notes.map(\e[36mnote\e\
    [0m => {\n\e[31m16 |\e[0m            \e[33mif\e[0m (note == \e[31m\"o\"\e[0m)\
    \ \e[31m4\e[0m\n\e[31m17 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (note\
    \ == \e[31m\"o|\"\e[0m) \e[31m2\e[0m\n\e[31m18 |\e[0m            \e[33melse\e\
    [0m \e[31m1\e[0m\n\e[31m19 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m    \
    \    ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m\
    \   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Your code goes here\n        var list = List[Long]()\n\
    \        var i = 0\n        while (i < music_string.length()) {\n            if\
    \ (music_string(i) == 'o') {\n                if (i + 1 < music_string.length()\
    \ && music_string(i + 1) == '|') {\n                    list = list :+ 2\n   \
    \                 i += 2\n                } else {\n                    list =\
    \ list :+ 4\n                    i += 1\n                }\n            } else\
    \ {\n                list = list :+ 1\n                i += 2\n            }\n\
    \        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpixo49ypo.scala:35)\n\tat Problem.main(tmpixo49ypo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        var\
    \ result = List[Long]()\n        for (note <- notes) {\n            note match\
    \ {\n                case \"o\" => result = result :+ 4\n                case\
    \ \"o|\" => result = result :+ 2\n                case \".|\" => result = result\
    \ :+ 1\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpc1095cb1.scala:20)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpc1095cb1.scala:22)\n\
    \tat Problem$.main(tmpc1095cb1.scala:26)\n\tat Problem.main(tmpc1095cb1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        var\
    \ beats = List[Long]()\n        for (note <- notes) {\n            if (note ==\
    \ \"o\") beats = beats :+ 4\n            else if (note == \"o|\") beats = beats\
    \ :+ 2\n            else if (note == \".|\") beats = beats :+ 1\n        }\n \
    \       beats\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Write your code here\n        // Return list of\
    \ integers corresponding to how many beats does each not last.\n        // Example:\n\
    \        // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n        // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n        var result = List[Long]()\n     \
    \   var temp = \"\"\n        for (i <- 0 until music_string.length) {\n      \
    \      if (music_string(i) == ' ') {\n                if (temp == \"o\") {\n \
    \                   result = result :+ 4\n                } else if (temp == \"\
    o|\") {\n                    result = result :+ 2\n                } else if (temp\
    \ == \".|\") {\n                    result = result :+ 1\n                }\n\
    \                temp = \"\"\n            } else {\n                temp = temp\
    \ + music_string(i)\n            }\n        }\n        if (temp == \"o\") {\n\
    \            result = result :+ 4\n        } else if (temp == \"o|\") {\n    \
    \        result = result :+ 2\n        } else if (temp == \".|\") {\n        \
    \    result = result :+ 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        notes.map(note\
    \ => {\n            if (note == \"o\") 4\n            else if (note == \"o|\"\
    ) 2\n            else 1\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy4iwoegt.scala:19:11\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        notes.map(\e[36mnote\e\
    [0m => {\n\e[31m16 |\e[0m            \e[33mif\e[0m (note == \e[31m\"o\"\e[0m)\
    \ \e[31m4\e[0m\n\e[31m17 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (note\
    \ == \e[31m\"o|\"\e[0m) \e[31m2\e[0m\n\e[31m18 |\e[0m            \e[33melse\e\
    [0m \e[31m1\e[0m\n\e[31m19 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m    \
    \    ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m\
    \   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Write your code here\n        val l = music_string.split(\"\
    \ \").toList\n        l.map(x => x match {\n            case \"o\" => 4l\n   \
    \         case \"o|\" => 2l\n            case \".|\" => 1l\n        })\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpubp1wsk1.scala:19)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.parseMusic(tmpubp1wsk1.scala:20)\n\
    \tat Problem$.main(tmpubp1wsk1.scala:23)\n\tat Problem.main(tmpubp1wsk1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    beats += 2\n                    i += 1\n            \
    \    } else {\n                    beats += 4\n                }\n           \
    \ } else if (music_string(i) == '.') {\n                beats += 1\n         \
    \   }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpldhzcqh6.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(x => x match {\n   \
    \         case \"o\" => 4\n            case \"o|\" => 2\n            case \".|\"\
    \ => 1\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9a00yafg.scala:18:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mx\e[0m => x \e[33mmatch\e[0m {\n\e[31m15 |\e[0m    \
    \        \e[33mcase\e[0m \e[31m\"o\"\e[0m => \e[31m4\e[0m\n\e[31m16 |\e[0m   \
    \         \e[33mcase\e[0m \e[31m\"o|\"\e[0m => \e[31m2\e[0m\n\e[31m17 |\e[0m \
    \           \e[33mcase\e[0m \e[31m\".|\"\e[0m => \e[31m1\e[0m\n\e[31m18 |\e[0m\
    \        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m     \
    \   Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e\
    [1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            note\
    \ match {\n                case \"o\" => beats += 4\n                case \"o|\"\
    \ => beats += 2\n                case \".|\" => beats += 1\n            }\n  \
    \      }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpzl7rfpum.scala:20)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpzl7rfpum.scala:22)\n\
    \tat Problem$.main(tmpzl7rfpum.scala:26)\n\tat Problem.main(tmpzl7rfpum.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        var\
    \ beats = List[Long]()\n        for (note <- notes) {\n            if (note ==\
    \ \"o\") beats = beats :+ 4\n            else if (note == \"o|\") beats = beats\
    \ :+ 2\n            else if (note == \".|\") beats = beats :+ 1\n        }\n \
    \       beats\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = new ListBuffer[Long]\n        var current_beat\
    \ = 0l\n        for (c <- music_string) {\n            if (c == 'o') {\n     \
    \           beats += 4\n                current_beat += 4\n            }\n   \
    \         else if (c == '|') {\n                beats += current_beat\n      \
    \          current_beat = 0\n            }\n            else if (c == '.') {\n\
    \                beats += 1\n                current_beat += 1\n            }\n\
    \        }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpio5zq4ha.scala:35)\n\tat Problem.main(tmpio5zq4ha.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        var\
    \ beats = List[Long]()\n        for (note <- notes) {\n            if (note ==\
    \ \"o\") beats = beats :+ 4\n            else if (note == \"o|\") beats = beats\
    \ :+ 2\n            else if (note == \".|\") beats = beats :+ 1\n        }\n \
    \       beats\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        var\
    \ beats = List[Long]()\n        for (note <- notes) {\n            if (note ==\
    \ \"o\") beats = beats :+ 4\n            else if (note == \"o|\") beats = beats\
    \ :+ 2\n            else if (note == \".|\") beats = beats :+ 1\n        }\n \
    \       beats\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until\
    \ music_string.length) {\n            if (music_string(i) == 'o') {\n        \
    \        if (i + 1 < music_string.length && music_string(i + 1) == '|') {\n  \
    \                  result = result :+ 2\n                    i += 1\n        \
    \        } else {\n                    result = result :+ 4\n                }\n\
    \            } else if (music_string(i) == '.') {\n                result = result\
    \ :+ 1\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpib7cm8x8.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val map = Map('o' -> 4, '.' -> 1)\n        val result\
    \ = new ListBuffer[Long]\n        for (i <- 0 until music_string.length) {\n \
    \           if (music_string(i) == 'o' || music_string(i) == '.') {\n        \
    \        result += map(music_string(i))\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdc0g1oqj.scala:27)\n\tat Problem.main(tmpdc0g1oqj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (c <-\
    \ music_string) {\n            c match {\n                case 'o' => beats +=\
    \ 4\n                case 'o' => beats += 2\n                case '.' => beats\
    \ += 1\n            }\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:   (of class java.lang.Character)\n\tat Problem$.parseMusic$$anonfun$1(tmp91uvlv5w.scala:19)\n\
    \tat Problem$.parseMusic$$anonfun$adapted$1(tmp91uvlv5w.scala:21)\n\tat scala.collection.StringOps$.foreach$extension(StringOps.scala:1044)\n\
    \tat Problem$.parseMusic(tmp91uvlv5w.scala:21)\n\tat Problem$.main(tmp91uvlv5w.scala:26)\n\
    \tat Problem.main(tmp91uvlv5w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        val notes\
    \ = music_string.split(\" \")\n        for (note <- notes) {\n            if (note\
    \ == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n    \
    \        else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (c <-\
    \ music_string) {\n            c match {\n                case 'o' => beats +=\
    \ 4\n                case 'o' => beats += 2\n                case '.' => beats\
    \ += 1\n            }\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:   (of class java.lang.Character)\n\tat Problem$.parseMusic$$anonfun$1(tmp91uvlv5w.scala:19)\n\
    \tat Problem$.parseMusic$$anonfun$adapted$1(tmp91uvlv5w.scala:21)\n\tat scala.collection.StringOps$.foreach$extension(StringOps.scala:1044)\n\
    \tat Problem$.parseMusic(tmp91uvlv5w.scala:21)\n\tat Problem$.main(tmp91uvlv5w.scala:26)\n\
    \tat Problem.main(tmp91uvlv5w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        notes.map(note\
    \ => note match {\n            case \"o\" => 4\n            case \"o|\" => 2\n\
    \            case \".|\" => 1\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp60inz1tj.scala:19:11\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        notes.map(\e[36mnote\e\
    [0m => note \e[33mmatch\e[0m {\n\e[31m16 |\e[0m            \e[33mcase\e[0m \e\
    [31m\"o\"\e[0m => \e[31m4\e[0m\n\e[31m17 |\e[0m            \e[33mcase\e[0m \e\
    [31m\"o|\"\e[0m => \e[31m2\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m \e\
    [31m\".|\"\e[0m => \e[31m1\e[0m\n\e[31m19 |\e[0m        }).toList\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e\
    [0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            note match {\n                case\
    \ \"o\" => beats += 4\n                case \"o|\" => beats += 2\n           \
    \     case \".|\" => beats += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpa8dy307j.scala:19)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpa8dy307j.scala:21)\n\
    \tat Problem$.main(tmpa8dy307j.scala:25)\n\tat Problem.main(tmpa8dy307j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            note match {\n                case\
    \ \"o\" => beats += 4\n                case \"o|\" => beats += 2\n           \
    \     case \".|\" => beats += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpa8dy307j.scala:19)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpa8dy307j.scala:21)\n\
    \tat Problem$.main(tmpa8dy307j.scala:25)\n\tat Problem.main(tmpa8dy307j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            note match {\n                case\
    \ \"o\" => beats += 4\n                case \"o|\" => beats += 2\n           \
    \     case \".|\" => beats += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpa8dy307j.scala:19)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpa8dy307j.scala:21)\n\
    \tat Problem$.main(tmpa8dy307j.scala:25)\n\tat Problem.main(tmpa8dy307j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        var\
    \ beats = List[Long]()\n        for (note <- notes) {\n            if (note ==\
    \ \"o\") beats = beats :+ 4\n            else if (note == \"o|\") beats = beats\
    \ :+ 2\n            else if (note == \".|\") beats = beats :+ 1\n        }\n \
    \       beats\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Your code goes here\n        val beats = ListBuffer[Long]()\n\
    \        val notes = music_string.split(\" \")\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Write your code here.\n        // Return a list\
    \ of integers corresponding to how many beats does each not last.\n        //\
    \ For example, if the input string is \"o o| .| o| o| .| .| .| .| o o\"\n    \
    \    // then the output list should be (4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong)\n\
    \        // You can assume that the input string is always valid.\n        //\
    \ You can use any programming language you like.\n        // You can use any libraries\
    \ you like.\n        // You can use any data structures you like.\n        //\
    \ You can use any algorithm you like.\n        // You can use any IDE you like.\n\
    \        // You can use any operating system you like.\n        // You can use\
    \ any computer you like.\n        // You can use any compiler you like.\n    \
    \    // You can use any editor you like.\n        // You can use any programming\
    \ style you like.\n        // You can use any programming paradigm you like.\n\
    \        // You can use any programming language you like.\n        // You can\
    \ use any libraries you like.\n        // You can use any data structures you\
    \ like.\n        // You can use any algorithm you like.\n        // You can use\
    \ any IDE you like.\n        // You can use any operating system you like.\n \
    \       // You can use any computer you like.\n        // You can use any compiler\
    \ you like.\n        // You can use any editor you like.\n        // You can use\
    \ any programming style you like.\n        // You can use any programming paradigm\
    \ you like.\n        // You can use any programming language you like.\n     \
    \   // You can use any libraries you like.\n        // You can use any data structures\
    \ you like.\n        // You can use any algorithm you like.\n        // You can\
    \ use any IDE you like.\n        // You can use any operating system you like.\n\
    \        // You can use any computer you like.\n        // You can use any compiler\
    \ you like.\n        // You can use any editor you like.\n        // You can use\
    \ any programming style you\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpib7w9s8k.scala:13:57\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36mparseMusic\e\
    [0m(\e[36mmusic_string\e[0m : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mLong\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \           ^\e[0m\n\e[31m   |\e[0m                                          \
    \          Found:    Unit\n\e[31m   |\e[0m                                   \
    \                 Required: List[Long]\n\e[31m14 |\e[0m        \e[34m// Write\
    \ your code here.\e[0m\n\e[31m15 |\e[0m        \e[34m// Return a list of integers\
    \ corresponding to how many beats does each not last.\e[0m\n\e[31m16 |\e[0m  \
    \      \e[34m// For example, if the input string is \"o o| .| o| o| .| .| .| .|\
    \ o o\"\e[0m\n\e[31m17 |\e[0m        \e[34m// then the output list should be (4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong)\e[0m\n\e[31m18 |\e[0m        \e[34m// You can\
    \ assume that the input string is always valid.\e[0m\n\e[31m19 |\e[0m        \e\
    [34m// You can use any programming language you like.\e[0m\n\e[31m20 |\e[0m  \
    \      \e[34m// You can use any libraries you like.\e[0m\n\e[31m21 |\e[0m    \
    \    \e[34m// You can use any data structures you like.\e[0m\n\e[31m22 |\e[0m\
    \        \e[34m// You can use any algorithm you like.\e[0m\n\e[31m23 |\e[0m  \
    \      \e[34m// You can use any IDE you like.\e[0m\n\e[31m24 |\e[0m        \e\
    [34m// You can use any operating system you like.\e[0m\n\e[31m25 |\e[0m      \
    \  \e[34m// You can use any computer you like.\e[0m\n\e[31m26 |\e[0m        \e\
    [34m// You can use any compiler you like.\e[0m\n\e[31m27 |\e[0m        \e[34m//\
    \ You can use any editor you like.\e[0m\n\e[31m28 |\e[0m        \e[34m// You can\
    \ use any programming style you like.\e[0m\n\e[31m29 |\e[0m        \e[34m// You\
    \ can use any programming paradigm you like.\e[0m\n\e[31m30 |\e[0m        \e[34m//\
    \ You can use any programming language you like.\e[0m\n\e[31m31 |\e[0m       \
    \ \e[34m// You can use any libraries you like.\e[0m\n\e[31m32 |\e[0m        \e\
    [34m// You can use any data structures you like.\e[0m\n\e[31m33 |\e[0m        "
  stdout: ''
  timestamp: 1659799628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        var i = 0\n        while (i < music_string.length) {\n            if\
    \ (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    list = list :+ 2\n   \
    \                 i += 2\n                } else {\n                    list =\
    \ list :+ 4\n                    i += 1\n                }\n            } else\
    \ {\n                list = list :+ 1\n                i += 2\n            }\n\
    \        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr0p6z24h.scala:35)\n\tat Problem.main(tmpr0p6z24h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \").toList\n   \
    \     notes.map(note => {\n            if (note == \"o\") 4\n            else\
    \ if (note == \"o|\") 2\n            else 1\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2gk9hml5.scala:22)\n\tat Problem.main(tmp2gk9hml5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799630
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Your code goes here\n        var l = List[Long]()\n\
    \        var i = 0\n        while (i < music_string.length) {\n            if\
    \ (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    l = l :+ 2\n         \
    \           i += 2\n                } else {\n                    l = l :+ 4\n\
    \                    i += 1\n                }\n            } else {\n       \
    \         l = l :+ 1\n                i += 2\n            }\n        }\n     \
    \   l\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_au9ba9d.scala:35)\n\tat Problem.main(tmp_au9ba9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799630
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Your code here\n        val map = Map('o' -> 4,\
    \ '.' -> 1)\n        val list = music_string.split(\" \").toList\n        list.map(x\
    \ => {\n            if (x.length == 2) {\n                map(x(0)) / 2\n    \
    \        } else {\n                map(x(0))\n            }\n        })\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.parseMusic$$anonfun$1(tmpg65jgpa3.scala:21)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.parseMusic(tmpg65jgpa3.scala:23)\n\
    \tat Problem$.main(tmpg65jgpa3.scala:26)\n\tat Problem.main(tmpg65jgpa3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799630
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = ListBuffer[Long]()\n        for (note <- notes) {\n            if (note\
    \ == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n    \
    \        else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        notes.map(note\
    \ => {\n            if (note == \"o\") 4\n            else if (note == \"o|\"\
    ) 2\n            else 1\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy4iwoegt.scala:19:11\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        notes.map(\e[36mnote\e\
    [0m => {\n\e[31m16 |\e[0m            \e[33mif\e[0m (note == \e[31m\"o\"\e[0m)\
    \ \e[31m4\e[0m\n\e[31m17 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (note\
    \ == \e[31m\"o|\"\e[0m) \e[31m2\e[0m\n\e[31m18 |\e[0m            \e[33melse\e\
    [0m \e[31m1\e[0m\n\e[31m19 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m    \
    \    ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m\
    \   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            note\
    \ match {\n                case \"o\" => beats += 4\n                case \"o|\"\
    \ => beats += 2\n                case \".|\" => beats += 1\n            }\n  \
    \      }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpzl7rfpum.scala:20)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpzl7rfpum.scala:22)\n\
    \tat Problem$.main(tmpzl7rfpum.scala:26)\n\tat Problem.main(tmpzl7rfpum.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            note\
    \ match {\n                case \"o\" => beats += 4\n                case \"o|\"\
    \ => beats += 2\n                case \".|\" => beats += 1\n            }\n  \
    \      }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpzl7rfpum.scala:20)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpzl7rfpum.scala:22)\n\
    \tat Problem$.main(tmpzl7rfpum.scala:26)\n\tat Problem.main(tmpzl7rfpum.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Write your code here\n        return List[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq5b0x0y4.scala:19)\n\tat Problem.main(tmpq5b0x0y4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        val notes\
    \ = music_string.split(\" \")\n        for (note <- notes) {\n            if (note\
    \ == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n    \
    \        else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4l\n            else if (note == \"o|\") beats += 2l\n\
    \            else if (note == \".|\") beats += 1l\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    beats += 2\n                    i += 1\n            \
    \    } else {\n                    beats += 4\n                }\n           \
    \ } else if (music_string(i) == '.') {\n                beats += 1\n         \
    \   }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpldhzcqh6.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (c <- music_string)\
    \ {\n            if (c == 'o') result = result :+ 4\n            else if (c ==\
    \ '|') result = result :+ 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnt_nhk7f.scala:25)\n\tat Problem.main(tmpnt_nhk7f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        var result : List[Long] = List()\n        var i =\
    \ 0\n        while (i < music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') {\n                    result = 2l.toLong :: result\n         \
    \           i += 2\n                } else {\n                    result = 4l.toLong\
    \ :: result\n                    i += 1\n                }\n            } else\
    \ {\n                result = 1l.toLong :: result\n                i += 2\n  \
    \          }\n        }\n        result.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv8xqnj78.scala:34)\n\tat Problem.main(tmpv8xqnj78.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        var current_beat\
    \ = 0l\n        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                beats += 4l\n                current_beat += 4l\n\
    \            }\n            else if (music_string(i) == '|') {\n             \
    \   beats += current_beat\n                current_beat = 0l\n            }\n\
    \        }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqe_ru5j0.scala:31)\n\tat Problem.main(tmpqe_ru5j0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(x => x match {\n   \
    \         case \"o\" => 4\n            case \"o|\" => 2\n            case \".|\"\
    \ => 1\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9a00yafg.scala:18:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mx\e[0m => x \e[33mmatch\e[0m {\n\e[31m15 |\e[0m    \
    \        \e[33mcase\e[0m \e[31m\"o\"\e[0m => \e[31m4\e[0m\n\e[31m16 |\e[0m   \
    \         \e[33mcase\e[0m \e[31m\"o|\"\e[0m => \e[31m2\e[0m\n\e[31m17 |\e[0m \
    \           \e[33mcase\e[0m \e[31m\".|\"\e[0m => \e[31m1\e[0m\n\e[31m18 |\e[0m\
    \        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m     \
    \   Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e\
    [1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    beats += 2\n                    i += 1\n            \
    \    } else {\n                    beats += 4\n                }\n           \
    \ } else if (music_string(i) == '.') {\n                beats += 1\n         \
    \   }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpldhzcqh6.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = ListBuffer[Long]()\n        for (note <- notes) {\n            if (note\
    \ == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n    \
    \        else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    beats += 2\n                    i += 1\n            \
    \    } else {\n                    beats += 4\n                }\n           \
    \ } else if (music_string(i) == '.') {\n                beats += 1\n         \
    \   }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpldhzcqh6.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            if (note == \"o\") beats += 4\n\
    \            else if (note == \"o|\") beats += 2\n            else if (note ==\
    \ \".|\") beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(x => x match {\n   \
    \         case \"o\" => 4\n            case \"o|\" => 2\n            case \".|\"\
    \ => 1\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9a00yafg.scala:18:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mx\e[0m => x \e[33mmatch\e[0m {\n\e[31m15 |\e[0m    \
    \        \e[33mcase\e[0m \e[31m\"o\"\e[0m => \e[31m4\e[0m\n\e[31m16 |\e[0m   \
    \         \e[33mcase\e[0m \e[31m\"o|\"\e[0m => \e[31m2\e[0m\n\e[31m17 |\e[0m \
    \           \e[33mcase\e[0m \e[31m\".|\"\e[0m => \e[31m1\e[0m\n\e[31m18 |\e[0m\
    \        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m     \
    \   Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e\
    [1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (line\
    \ <- music_string.split(\" \")) {\n            line match {\n                case\
    \ \"o\" => beats += 4\n                case \"o|\" => beats += 2\n           \
    \     case \".|\" => beats += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpg775src3.scala:19)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpg775src3.scala:21)\n\
    \tat Problem$.main(tmpg775src3.scala:25)\n\tat Problem.main(tmpg775src3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        var\
    \ result = List[Long]()\n        for (note <- notes) {\n            if (note ==\
    \ \"o\") result = result :+ 4\n            else if (note == \"o|\") result = result\
    \ :+ 2\n            else if (note == \".|\") result = result :+ 1\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            note\
    \ match {\n                case \"o\" => beats += 4\n                case \"o|\"\
    \ => beats += 2\n                case \".|\" => beats += 1\n            }\n  \
    \      }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpzl7rfpum.scala:20)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpzl7rfpum.scala:22)\n\
    \tat Problem$.main(tmpzl7rfpum.scala:26)\n\tat Problem.main(tmpzl7rfpum.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = ListBuffer[Long]()\n        for (note <- notes) {\n            if (note.charAt(0)\
    \ == 'o') {\n                if (note.length() == 1) beats += 4\n            \
    \    else beats += 2\n            }\n            else beats += 1\n        }\n\
    \        beats.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.parseMusic$$anonfun$1(tmp7iq3n8wt.scala:17)\n\tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\
    \tat Problem$.parseMusic(tmp7iq3n8wt.scala:22)\n\tat Problem$.main(tmp7iq3n8wt.scala:26)\n\
    \tat Problem.main(tmp7iq3n8wt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    beats += 2\n                    i += 1\n            \
    \    } else {\n                    beats += 4\n                }\n           \
    \ } else if (music_string(i) == '.') {\n                beats += 1\n         \
    \   }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpldhzcqh6.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Write your code here\n        val beats = music_string.split(\"\
    \ \").map(x => x match {\n            case \"o\" => 4\n            case \"o|\"\
    \ => 2\n            case \".|\" => 1\n        })\n        beats.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu91zv87v.scala:20:14\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        beats.toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799638
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (c <-\
    \ music_string) {\n            if (c == 'o') beats += 4\n            else if (c\
    \ == '|') beats += 2\n            else if (c == '.') beats += 1\n        }\n \
    \       beats.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe7x63s67.scala:25)\n\tat Problem.main(tmpe7x63s67.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (c <-\
    \ music_string) {\n            c match {\n                case 'o' => beats +=\
    \ 4\n                case '|' => beats += 2\n                case '.' => beats\
    \ += 1\n                case ' ' =>\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxzude482.scala:28)\n\tat Problem.main(tmpxzude482.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799641
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        var\
    \ beats = List[Long]()\n        for (note <- notes) {\n            if (note ==\
    \ \"o\") beats = beats :+ 4\n            else if (note == \"o|\") beats = beats\
    \ :+ 2\n            else if (note == \".|\") beats = beats :+ 1\n        }\n \
    \       beats\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            note match {\n                case\
    \ \"o\" => beats += 4\n                case \"o|\" => beats += 2\n           \
    \     case \".|\" => beats += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpa8dy307j.scala:19)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpa8dy307j.scala:21)\n\
    \tat Problem$.main(tmpa8dy307j.scala:25)\n\tat Problem.main(tmpa8dy307j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Write your code here\n        var result = List[Long]()\n\
    \        var i = 0\n        while (i < music_string.length) {\n            if\
    \ (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    result = result :+ 2\n\
    \                    i += 2\n                } else {\n                    result\
    \ = result :+ 4\n                    i += 1\n                }\n            }\
    \ else {\n                result = result :+ 1\n                i += 2\n     \
    \       }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfx__3yod.scala:35)\n\tat Problem.main(tmpfx__3yod.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Write your code here\n        val result = ListBuffer[Long]()\n\
    \        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') {\n                    result += 2\n                    i += 1\n\
    \                } else {\n                    result += 4\n                }\n\
    \            } else if (music_string(i) == '.') {\n                result += 1\n\
    \            }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp64u03wu8.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        var list = List[Long]()\n        var i = 0\n     \
    \   while (i < music_string.length) {\n            if (music_string(i) == 'o')\
    \ {\n                if (i + 1 < music_string.length && music_string(i + 1) ==\
    \ '|') {\n                    list = list :+ 2\n                    i += 2\n \
    \               } else {\n                    list = list :+ 4\n             \
    \       i += 1\n                }\n            } else {\n                list\
    \ = list :+ 1\n                i += 2\n            }\n        }\n        list\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplk5o8z47.scala:34)\n\tat Problem.main(tmplk5o8z47.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            note\
    \ match {\n                case \"o\" => beats += 4\n                case \"o|\"\
    \ => beats += 2\n                case \".|\" => beats += 1\n            }\n  \
    \      }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpzl7rfpum.scala:20)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpzl7rfpum.scala:22)\n\
    \tat Problem$.main(tmpzl7rfpum.scala:26)\n\tat Problem.main(tmpzl7rfpum.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        notes.map(note\
    \ => note match {\n            case \"o\" => 4l\n            case \"o|\" => 2l\n\
    \            case \".|\" => 1l\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpdx8xlpky.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmpdx8xlpky.scala:19)\n\
    \tat Problem$.main(tmpdx8xlpky.scala:22)\n\tat Problem.main(tmpdx8xlpky.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799641
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        var result = List[Long]()\n        var i = 0\n   \
    \     while (i < music_string.length) {\n            if (music_string(i) == 'o')\
    \ {\n                if (i + 1 < music_string.length && music_string(i + 1) ==\
    \ '|') {\n                    result = result :+ 2\n                    i += 2\n\
    \                } else {\n                    result = result :+ 4\n        \
    \            i += 1\n                }\n            } else {\n               \
    \ result = result :+ 1\n                i += 2\n            }\n        }\n   \
    \     return result\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkmagqib1.scala:34)\n\tat Problem.main(tmpkmagqib1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    beats += 2\n                    i += 1\n            \
    \    } else {\n                    beats += 4\n                }\n           \
    \ } else if (music_string(i) == '.') {\n                beats += 1\n         \
    \   }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpldhzcqh6.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Write your code here\n        val beats = ListBuffer[Long]()\n\
    \        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == 'o') {\n                if (i + 1 < music_string.length && music_string(i\
    \ + 1) == '|') {\n                    beats += 2\n                    i += 1\n\
    \                } else {\n                    beats += 4\n                }\n\
    \            } else if (music_string(i) == '.') {\n                beats += 1\n\
    \            }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmzneyn3y.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    beats += 2\n                    i += 1\n            \
    \    } else {\n                    beats += 4\n                }\n           \
    \ } else if (music_string(i) == '.') {\n                beats += 1\n         \
    \   }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpldhzcqh6.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    beats += 2\n                    i += 1\n            \
    \    } else {\n                    beats += 4\n                }\n           \
    \ } else if (music_string(i) == '.') {\n                beats += 1\n         \
    \   }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpldhzcqh6.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        val notes\
    \ = music_string.split(\" \")\n        for (note <- notes) {\n            if (note\
    \ == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n    \
    \        else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            note\
    \ match {\n                case \"o\" => beats += 4\n                case \"o|\"\
    \ => beats += 2\n                case \".|\" => beats += 1\n            }\n  \
    \      }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpzl7rfpum.scala:20)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpzl7rfpum.scala:22)\n\
    \tat Problem$.main(tmpzl7rfpum.scala:26)\n\tat Problem.main(tmpzl7rfpum.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        return music_string.split(\" \").map(x => x match\
    \ {\n            case \"o\" => 4l\n            case \"o|\" => 2l\n           \
    \ case \".|\" => 1l\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpwyseyon2.scala:17)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmpwyseyon2.scala:18)\n\
    \tat Problem$.main(tmpwyseyon2.scala:21)\n\tat Problem.main(tmpwyseyon2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799641
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        var\
    \ result = List[Long]()\n        for (note <- notes) {\n            if (note ==\
    \ \"o\") result = result :+ 4\n            else if (note == \"o|\") result = result\
    \ :+ 2\n            else if (note == \".|\") result = result :+ 1\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    beats += 2\n                    i += 1\n            \
    \    } else {\n                    beats += 4\n                }\n           \
    \ } else if (music_string(i) == '.') {\n                beats += 1\n         \
    \   }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpldhzcqh6.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val result = new ListBuffer[Long]()\n        for (i\
    \ <- 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    result += 2\n                    i += 1\n           \
    \     } else {\n                    result += 4\n                }\n         \
    \   } else if (music_string(i) == '.') {\n                result += 1\n      \
    \      }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7l3n3rsf.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \").toList\n   \
    \     notes.map(note => {\n            if (note.contains(\"o\")) {\n         \
    \       if (note.length() == 1) 4 else 2\n            } else {\n             \
    \   1\n            }\n        })\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4wc_86n4.scala:24)\n\tat Problem.main(tmp4wc_86n4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799641
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = ListBuffer[Long]()\n        for (note <- notes) {\n            if (note\
    \ == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n    \
    \        else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        var result = List[Long]()\n        var i = 0\n   \
    \     while (i < music_string.length) {\n            if (music_string(i) == 'o')\
    \ {\n                if (i + 1 < music_string.length && music_string(i + 1) ==\
    \ '|') {\n                    result = result :+ 2\n                    i += 2\n\
    \                } else {\n                    result = result :+ 4\n        \
    \            i += 1\n                }\n            } else {\n               \
    \ result = result :+ 1\n                i += 2\n            }\n        }\n   \
    \     return result\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkmagqib1.scala:34)\n\tat Problem.main(tmpkmagqib1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        notes.map(note\
    \ => {\n            if (note == \"o\") 4\n            else if (note == \"o|\"\
    ) 2\n            else 1\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy4iwoegt.scala:19:11\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        notes.map(\e[36mnote\e\
    [0m => {\n\e[31m16 |\e[0m            \e[33mif\e[0m (note == \e[31m\"o\"\e[0m)\
    \ \e[31m4\e[0m\n\e[31m17 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (note\
    \ == \e[31m\"o|\"\e[0m) \e[31m2\e[0m\n\e[31m18 |\e[0m            \e[33melse\e\
    [0m \e[31m1\e[0m\n\e[31m19 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m    \
    \    ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m\
    \   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            note match {\n                case\
    \ \"o\" => beats += 4\n                case \"o|\" => beats += 2\n           \
    \     case \".|\" => beats += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpa8dy307j.scala:19)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpa8dy307j.scala:21)\n\
    \tat Problem$.main(tmpa8dy307j.scala:25)\n\tat Problem.main(tmpa8dy307j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_string_list = music_string.split(\" \").toList\n\
    \        val music_list = music_string_list.map(x => x match {\n            case\
    \ \"o\" => 4\n            case \"o|\" => 2\n            case \".|\" => 1\n   \
    \     })\n        music_list\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg548bcmo.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        music_list\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (music_list\
    \ : List[Int])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659799640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until\
    \ music_string.length) {\n            if (music_string(i) == 'o') {\n        \
    \        if (i + 1 < music_string.length && music_string(i + 1) == '|') {\n  \
    \                  result = 2l.toLong :: result\n                    i += 1\n\
    \                } else {\n                    result = 4l.toLong :: result\n\
    \                }\n            } else if (music_string(i) == '.') {\n       \
    \         result = 1l.toLong :: result\n            }\n        }\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx3ht7myy.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    beats += 2\n                    i += 1\n            \
    \    } else {\n                    beats += 4\n                }\n           \
    \ } else if (music_string(i) == '.') {\n                beats += 1\n         \
    \   }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpldhzcqh6.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Your code goes here\n        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799641
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = ListBuffer[Long]()\n        for (note <- notes) {\n            if (note\
    \ == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n    \
    \        else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            note match {\n                case\
    \ \"o\" => beats += 4\n                case \"o|\" => beats += 2\n           \
    \     case \".|\" => beats += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpa8dy307j.scala:19)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpa8dy307j.scala:21)\n\
    \tat Problem$.main(tmpa8dy307j.scala:25)\n\tat Problem.main(tmpa8dy307j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (c <-\
    \ music_string) {\n            c match {\n                case 'o' => beats +=\
    \ 4\n                case 'o' => beats += 2\n                case '.' => beats\
    \ += 1\n            }\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:   (of class java.lang.Character)\n\tat Problem$.parseMusic$$anonfun$1(tmp91uvlv5w.scala:19)\n\
    \tat Problem$.parseMusic$$anonfun$adapted$1(tmp91uvlv5w.scala:21)\n\tat scala.collection.StringOps$.foreach$extension(StringOps.scala:1044)\n\
    \tat Problem$.parseMusic(tmp91uvlv5w.scala:21)\n\tat Problem$.main(tmp91uvlv5w.scala:26)\n\
    \tat Problem.main(tmp91uvlv5w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Write your code here\n        return List[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq5b0x0y4.scala:19)\n\tat Problem.main(tmpq5b0x0y4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = ListBuffer[Long]()\n        for (note <- notes) {\n            if (note\
    \ == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n    \
    \        else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Fill in the code here\n        val music_string_list\
    \ = music_string.split(\" \")\n        val music_string_list_length = music_string_list.length\n\
    \        var music_string_list_index = 0\n        var music_string_list_result\
    \ : List[Long] = List()\n        while (music_string_list_index < music_string_list_length)\
    \ {\n            if (music_string_list(music_string_list_index) == \"o\") {\n\
    \                music_string_list_result = music_string_list_result :+ 4\n  \
    \          } else if (music_string_list(music_string_list_index) == \"o|\") {\n\
    \                music_string_list_result = music_string_list_result :+ 2\n  \
    \          } else if (music_string_list(music_string_list_index) == \".|\") {\n\
    \                music_string_list_result = music_string_list_result :+ 1\n  \
    \          }\n            music_string_list_index += 1\n        }\n        music_string_list_result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        music_string.split(\" \").map(x => x match {\n   \
    \         case \"o\" => 4\n            case \"o|\" => 2\n            case \".|\"\
    \ => 1\n        }).toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9a00yafg.scala:18:11\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        music_string.split(\e\
    [31m\" \"\e[0m).map(\e[36mx\e[0m => x \e[33mmatch\e[0m {\n\e[31m15 |\e[0m    \
    \        \e[33mcase\e[0m \e[31m\"o\"\e[0m => \e[31m4\e[0m\n\e[31m16 |\e[0m   \
    \         \e[33mcase\e[0m \e[31m\"o|\"\e[0m => \e[31m2\e[0m\n\e[31m17 |\e[0m \
    \           \e[33mcase\e[0m \e[31m\".|\"\e[0m => \e[31m1\e[0m\n\e[31m18 |\e[0m\
    \        }).toList\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m     \
    \   Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e\
    [1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = ListBuffer[Long]()\n        for (note <- notes) {\n            if (note\
    \ == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n    \
    \        else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until\
    \ music_string.length) {\n            if (music_string(i) == 'o') {\n        \
    \        if (i + 1 < music_string.length && music_string(i + 1) == '|') {\n  \
    \                  result = 2l.toLong :: result\n                    i += 1\n\
    \                } else {\n                    result = 4l.toLong :: result\n\
    \                }\n            } else if (music_string(i) == '.') {\n       \
    \         if (i + 1 < music_string.length && music_string(i + 1) == '|') {\n \
    \                   result = 1l.toLong :: result\n                    i += 1\n\
    \                }\n            }\n        }\n        result.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5e5t4lkl.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp5e5t4lkl.scala:26:22 ------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^\e[0m\n\e[31m   |\e[0m                    value += is not a member\
    \ of Int - did you mean i.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    beats += 2\n                    i += 1\n            \
    \    } else {\n                    beats += 4\n                }\n           \
    \ } else if (music_string(i) == '.') {\n                beats += 1\n         \
    \   }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpldhzcqh6.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        notes.map(note\
    \ => {\n            if (note == \"o\") 4\n            else if (note == \"o|\"\
    ) 2\n            else 1\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy4iwoegt.scala:19:11\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        notes.map(\e[36mnote\e\
    [0m => {\n\e[31m16 |\e[0m            \e[33mif\e[0m (note == \e[31m\"o\"\e[0m)\
    \ \e[31m4\e[0m\n\e[31m17 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (note\
    \ == \e[31m\"o|\"\e[0m) \e[31m2\e[0m\n\e[31m18 |\e[0m            \e[33melse\e\
    [0m \e[31m1\e[0m\n\e[31m19 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m    \
    \    ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m\
    \   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            note\
    \ match {\n                case \"o\" => beats += 4\n                case \"o|\"\
    \ => beats += 2\n                case \".|\" => beats += 1\n            }\n  \
    \      }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpzl7rfpum.scala:20)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpzl7rfpum.scala:22)\n\
    \tat Problem$.main(tmpzl7rfpum.scala:26)\n\tat Problem.main(tmpzl7rfpum.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Write your code here\n        return List[Long]()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq5b0x0y4.scala:19)\n\tat Problem.main(tmpq5b0x0y4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            note\
    \ match {\n                case \"o\" => beats += 4\n                case \"o|\"\
    \ => beats += 2\n                case \".|\" => beats += 1\n            }\n  \
    \      }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpzl7rfpum.scala:20)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpzl7rfpum.scala:22)\n\
    \tat Problem$.main(tmpzl7rfpum.scala:26)\n\tat Problem.main(tmpzl7rfpum.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (c <-\
    \ music_string) {\n            if (c == 'o') beats += 4\n            else if (c\
    \ == '|') beats += 2\n            else if (c == '.') beats += 1\n        }\n \
    \       beats.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe7x63s67.scala:25)\n\tat Problem.main(tmpe7x63s67.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                beats += 4\n            } else if (music_string(i) == '|') {\n\
    \                beats += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7cnow65h.scala:28)\n\tat Problem.main(tmp7cnow65h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        notes.map(x\
    \ => x match {\n            case \"o\" => 4l\n            case \"o|\" => 2l\n\
    \            case \".|\" => 1l\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmp6xco7mon.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmp6xco7mon.scala:19)\n\
    \tat Problem$.main(tmp6xco7mon.scala:22)\n\tat Problem.main(tmp6xco7mon.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        var i = 0\n\
    \        while (i < music_string.length) {\n            if (music_string(i) ==\
    \ 'o') {\n                if (i + 1 < music_string.length && music_string(i +\
    \ 1) == '|') {\n                    beats += 2\n                    i += 2\n \
    \               } else {\n                    beats += 4\n                   \
    \ i += 1\n                }\n            } else {\n                beats += 1\n\
    \                i += 2\n            }\n        }\n        beats.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp511zio11.scala:34)\n\tat Problem.main(tmp511zio11.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = new ListBuffer[Long]\n        for (i <-\
    \ 0 until music_string.length) {\n            music_string(i) match {\n      \
    \          case 'o' => beats += 4\n                case '.' => beats += 1\n  \
    \              case '|' =>\n                case _ =>\n            }\n       \
    \ }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpallms_7i.scala:29)\n\tat Problem.main(tmpallms_7i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        return music_string.split(\" \").map(x => x match\
    \ {\n            case \"o\" => 4l\n            case \"o|\" => 2l\n           \
    \ case \".|\" => 1l\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpwyseyon2.scala:17)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.parseMusic(tmpwyseyon2.scala:18)\n\
    \tat Problem$.main(tmpwyseyon2.scala:21)\n\tat Problem.main(tmpwyseyon2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799641
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            note\
    \ match {\n                case \"o\" => beats += 4\n                case \"o|\"\
    \ => beats += 2\n                case \".|\" => beats += 1\n            }\n  \
    \      }\n        beats.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpzl7rfpum.scala:20)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpzl7rfpum.scala:22)\n\
    \tat Problem$.main(tmpzl7rfpum.scala:26)\n\tat Problem.main(tmpzl7rfpum.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = new ListBuffer[Long]\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    beats += 2\n                    i += 1\n            \
    \    } else {\n                    beats += 4\n                }\n           \
    \ } else if (music_string(i) == '.') {\n                beats += 1\n         \
    \   }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa3xdi9kc.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        var\
    \ beats = List[Long]()\n        for (note <- notes) {\n            if (note ==\
    \ \"o\") beats = beats :+ 4\n            else if (note == \"o|\") beats = beats\
    \ :+ 2\n            else if (note == \".|\") beats = beats :+ 1\n        }\n \
    \       beats\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = ListBuffer[Long]()\n        for (note <- notes) {\n            if (note\
    \ == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n    \
    \        else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Write your code here\n        val notes = music_string.split(\"\
    \ \")\n        val beats = new ListBuffer[Long]\n        for (note <- notes) {\n\
    \            if (note == \"o\") {\n                beats += 4\n            } else\
    \ if (note == \"o|\") {\n                beats += 2\n            } else if (note\
    \ == \".|\") {\n                beats += 1\n            }\n        }\n       \
    \ beats.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Your code goes here\n        val notes = music_string.split(\"\
    \ \")\n        val beats = ListBuffer[Long]()\n        for (note <- notes) {\n\
    \            if (note == \"o\") beats += 4\n            else if (note == \"o|\"\
    ) beats += 2\n            else if (note == \".|\") beats += 1\n        }\n   \
    \     beats.toList\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        var result = List[Long]()\n        var current_note\
    \ = \"\"\n        for (i <- 0 until music_string.length) {\n            if (music_string(i)\
    \ == ' ') {\n                result = result :+ current_note.length\n        \
    \        current_note = \"\"\n            } else {\n                current_note\
    \ = current_note + music_string(i)\n            }\n        }\n        result =\
    \ result :+ current_note.length\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8hj_0w5j.scala:28)\n\tat Problem.main(tmp8hj_0w5j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = notes.map(note => {\n            if (note == \"o\") 4\n            else\
    \ if (note == \"o|\") 2\n            else 1\n        })\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzde607ua.scala:20:14\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        beats.toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[\e\
    [1m\e[31mInt\e[0m]\n\e[31m   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = ListBuffer[Long]()\n        for (note <- notes) {\n            if (note\
    \ == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n    \
    \        else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = ListBuffer[Long]()\n        for (note <- notes) {\n            if (note\
    \ == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n    \
    \        else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    beats += 2\n                    i += 1\n            \
    \    } else {\n                    beats += 4\n                }\n           \
    \ } else if (music_string(i) == '.') {\n                beats += 1\n         \
    \   }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpldhzcqh6.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Fill in your code here\n        null\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.parseMusic(String)\" is null\n\tat Problem$.main(tmpxp8t3496.scala:18)\n\
    \tat Problem.main(tmpxp8t3496.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799646
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            if (note == \"o\") beats += 4\n\
    \            else if (note == \"o|\") beats += 2\n            else if (note ==\
    \ \".|\") beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        notes.map(note\
    \ => {\n            if (note == \"o\") 4\n            else if (note == \"o|\"\
    ) 2\n            else 1\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy4iwoegt.scala:19:11\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        notes.map(\e[36mnote\e\
    [0m => {\n\e[31m16 |\e[0m            \e[33mif\e[0m (note == \e[31m\"o\"\e[0m)\
    \ \e[31m4\e[0m\n\e[31m17 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (note\
    \ == \e[31m\"o|\"\e[0m) \e[31m2\e[0m\n\e[31m18 |\e[0m            \e[33melse\e\
    [0m \e[31m1\e[0m\n\e[31m19 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m    \
    \    ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m\
    \   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (i <-\
    \ 0 until music_string.length) {\n            if (music_string(i) == 'o') {\n\
    \                if (i + 1 < music_string.length && music_string(i + 1) == '|')\
    \ {\n                    beats += 2\n                    i += 1\n            \
    \    } else {\n                    beats += 4\n                }\n           \
    \ } else if (music_string(i) == '.') {\n                beats += 1\n         \
    \   }\n        }\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpldhzcqh6.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    i += \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ += is not a member of Int - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            note match {\n                case\
    \ \"o\" => beats += 4\n                case \"o|\" => beats += 2\n           \
    \     case \".|\" => beats += 1\n            }\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmpa8dy307j.scala:19)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1328)\n\tat Problem$.parseMusic(tmpa8dy307j.scala:21)\n\
    \tat Problem$.main(tmpa8dy307j.scala:25)\n\tat Problem.main(tmpa8dy307j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        var result = List[Long]()\n        var i = 0\n   \
    \     while (i < music_string.length) {\n            if (music_string(i) == 'o')\
    \ {\n                if (i + 1 < music_string.length && music_string(i + 1) ==\
    \ '|') {\n                    result = result :+ 2\n                    i += 2\n\
    \                } else {\n                    result = result :+ 4\n        \
    \            i += 1\n                }\n            } else {\n               \
    \ result = result :+ 1\n                i += 2\n            }\n        }\n   \
    \     result\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpewv3amaf.scala:34)\n\tat Problem.main(tmpewv3amaf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val music_string_split = music_string.split(\" \"\
    )\n        var result = List[Long]()\n        for (i <- 0 until music_string_split.length)\
    \ {\n            music_string_split(i) match {\n                case \"o\" =>\
    \ result = result :+ 4\n                case \"o|\" => result = result :+ 2\n\
    \                case \".|\" => result = result :+ 1\n            }\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.parseMusic$$anonfun$1(tmp_hsasa8o.scala:20)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.parseMusic(tmp_hsasa8o.scala:22)\n\
    \tat Problem$.main(tmp_hsasa8o.scala:26)\n\tat Problem.main(tmp_hsasa8o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (note\
    \ <- music_string.split(\" \")) {\n            if (note == \"o\") beats += 4\n\
    \            else if (note == \"o|\") beats += 2\n            else if (note ==\
    \ \".|\") beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = ListBuffer[Long]()\n        for (note <- notes) {\n            if (note\
    \ == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n    \
    \        else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        // Your code goes here\n        var result = List[Long]()\n\
    \        var i = 0\n        while (i < music_string.length) {\n            if\
    \ (music_string(i) == 'o') {\n                if (i + 1 < music_string.length\
    \ && music_string(i + 1) == '|') {\n                    result = result :+ 2\n\
    \                    i += 2\n                } else {\n                    result\
    \ = result :+ 4\n                    i += 1\n                }\n            }\
    \ else {\n                result = result :+ 1\n                i += 2\n     \
    \       }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_zv6gkdi.scala:35)\n\tat Problem.main(tmp_zv6gkdi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        var\
    \ beats = List[Long]()\n        for (note <- notes) {\n            if (note ==\
    \ \"o\") beats = beats :+ 4\n            else if (note == \"o|\") beats = beats\
    \ :+ 2\n            else if (note == \".|\") beats = beats :+ 1\n        }\n \
    \       beats\n    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\
    \")).equals((List[Long]())));\n    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\"\
    )).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"\
    o| o| .| .| o o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o|\
    \ .| o| .| o o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
    \ 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        val notes\
    \ = music_string.split(\" \")\n        for (note <- notes) {\n            if (note\
    \ == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n    \
    \        else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        var result = List[Long]()\n        var curr = 0\n\
    \        while (curr < music_string.length) {\n            if (music_string(curr)\
    \ == 'o') {\n                if (curr + 1 < music_string.length && music_string(curr\
    \ + 1) == '|') {\n                    result = result :+ 2\n                 \
    \   curr += 2\n                } else {\n                    result = result :+\
    \ 4\n                    curr += 1\n                }\n            } else {\n\
    \                result = result :+ 1\n                curr += 2\n           \
    \ }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphspx2vk2.scala:34)\n\tat Problem.main(tmphspx2vk2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799647
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (c <-\
    \ music_string) {\n            if (c == 'o') beats += 4\n            else if (c\
    \ == '|') beats += 1\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoawna2dt.scala:25)\n\tat Problem.main(tmpoawna2dt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        music_string.split(\"\
    \ \").foreach(note => {\n            if (note == \"o\") beats += 4\n         \
    \   else if (note == \"o|\") beats += 2\n            else if (note == \".|\")\
    \ beats += 1\n        })\n        beats.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        notes.map(note\
    \ => {\n            if (note == \"o\") 4\n            else if (note == \"o|\"\
    ) 2\n            else 1\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy4iwoegt.scala:19:11\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        notes.map(\e[36mnote\e\
    [0m => {\n\e[31m16 |\e[0m            \e[33mif\e[0m (note == \e[31m\"o\"\e[0m)\
    \ \e[31m4\e[0m\n\e[31m17 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (note\
    \ == \e[31m\"o|\"\e[0m) \e[31m2\e[0m\n\e[31m18 |\e[0m            \e[33melse\e\
    [0m \e[31m1\e[0m\n\e[31m19 |\e[0m        }).toList\n\e[31m\e[31m   |\e[0m    \
    \    ^\e[0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m\
    \   |\e[0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659799628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = ListBuffer[Long]()\n        for (c <-\
    \ music_string) {\n            c match {\n                case 'o' => beats +=\
    \ 4\n                case 'o' => beats += 2\n                case '.' => beats\
    \ += 1\n            }\n        }\n        beats.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:   (of class java.lang.Character)\n\tat Problem$.parseMusic$$anonfun$1(tmp91uvlv5w.scala:19)\n\
    \tat Problem$.parseMusic$$anonfun$adapted$1(tmp91uvlv5w.scala:21)\n\tat scala.collection.StringOps$.foreach$extension(StringOps.scala:1044)\n\
    \tat Problem$.parseMusic(tmp91uvlv5w.scala:21)\n\tat Problem$.main(tmp91uvlv5w.scala:26)\n\
    \tat Problem.main(tmp91uvlv5w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val beats = music_string.split(\" \").map(x => x match\
    \ {\n            case \"o\" => 4\n            case \"o|\" => 2\n            case\
    \ \".|\" => 1\n        }).toList\n        beats\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n    assert(parseMusic((\"\
    o o o o\")).equals((List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong, 1l.toLong,\
    \ 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong))));\n\
    \    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((List[Long](2l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 2l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdh2z5jf5.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        beats\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (beats : List[Int])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659799617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    // Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    // not last.\n  \
    \  // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
    \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n  \
    \  // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong,\
    \ 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String)\
    \ : List[Long] = {\n        val notes = music_string.split(\" \")\n        val\
    \ beats = new ListBuffer[Long]\n        for (note <- notes) {\n            if\
    \ (note == \"o\") beats += 4\n            else if (note == \"o|\") beats += 2\n\
    \            else if (note == \".|\") beats += 1\n        }\n        beats.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(parseMusic((\"\")).equals((List[Long]())));\n\
    \    assert(parseMusic((\"o o o o\")).equals((List[Long](4l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\".| .| .| .|\")).equals((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong, 1l.toLong))));\n    assert(parseMusic((\"o| o| .| .| o\
    \ o o o\")).equals((List[Long](2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 4l.toLong, 4l.toLong, 4l.toLong))));\n    assert(parseMusic((\"o| .| o| .| o\
    \ o| o o|\")).equals((List[Long](2l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong,\
    \ 2l.toLong, 4l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799618
