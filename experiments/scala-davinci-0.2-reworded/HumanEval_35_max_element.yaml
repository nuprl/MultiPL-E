name: HumanEval_35_max_element
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
  \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
  \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l :\
  \ List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
  \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
  \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
completions: ['        return l.max', "        var max : Long = l(0)\n        for\
    \ (i <- l) {\n            if (i > max) {\n                max = i\n          \
    \  }\n        }\n        return max", '        return l.max', '        return
    l.max', '        return l.max', "        var max = l(0)\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) > max) max = l(i)\n        }\n        return\
    \ max", "        // >>> maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n\
    \        // (3l)\n        // >>> maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong,\
    \ 1l.toLong, -10l.toLong)))\n        // (123l)\n        // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n        // (3l)\n        // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n        // (123l)\n        // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n        // (3l)\n        // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n        // (123l)\n        // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n        // (3l)\n        // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n        // (123l)\n        // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.", '        l.max', '        l.max', "        var max : Long = l(0)\n   \
    \     for (i <- 1 until l.length) {\n            if (l(i) > max) {\n         \
    \       max = l(i)\n            }\n        }\n        return max", "        var\
    \ max : Long = l(0)\n        for (i <- 1 until l.length) {\n            if (l(i)\
    \ > max) {\n                max = l(i)\n            }\n        }\n        return\
    \ max", "        var max : Long = l(0)\n        for (i <- 1 until l.length) {\n\
    \            if (l(i) > max) max = l(i)\n        }\n        return max", "   \
    \     var max : Long = l(0)\n        for (i <- 1 until l.length) {\n         \
    \   if (l(i) > max) {\n                max = l(i)\n            }\n        }\n\
    \        return max", "        // >>> maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong)))\n        // (3l)\n        // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n        // (123l)\n        l.max", '        l.max',
  '        return l.max', "        var max = l(0)\n        for (i <- 1 until l.length)\
    \ {\n            if (l(i) > max) {\n                max = l(i)\n            }\n\
    \        }\n        return max", "        var m = l(0)\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) > m) m = l(i)\n        }\n        return m",
  '        return l.max', "        var max : Long = l(0)\n        for (i <- 1 until\
    \ l.length) {\n            if (l(i) > max) {\n                max = l(i)\n   \
    \         }\n        }\n        return max"]
stop_tokens:
- "\n    }\n"
