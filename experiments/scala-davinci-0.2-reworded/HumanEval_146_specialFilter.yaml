name: HumanEval_146_specialFilter
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes a list of numbers as input and returns \n  \
  \  // the number of elements in the list that are greater than 10 and both \n  \
  \  // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n\
  \    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong)))\n\
  \    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong,\
  \ 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n    def specialFilter(nums\
  \ : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
  \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
  \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
  \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n   \
  \ assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
  \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
  \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n   \
  \ assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
  \ == (0l));\n    }\n\n}\n"
completions: ['        nums.filter(x => x > 10 && x.toString.head.toString.toInt %
    2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0l\n        for (num <- nums) {\n            if (num > 10) {\n           \
    \     val firstDigit = num.toString.charAt(0).asDigit\n                val lastDigit\
    \ = num.toString.charAt(num.toString.length - 1).asDigit\n                if (firstDigit\
    \ % 2 == 1 && lastDigit % 2 == 1) count += 1\n            }\n        }\n     \
    \   count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // The\
    \ function should return the number of elements in the list that are greater than\
    \ 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n   \
    \     // For example:\n        // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0l\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                val str = num.toString\n                val first = str.charAt(0).toString.toInt\n\
    \                val last = str.charAt(str.length - 1).toString.toInt\n      \
    \          if (first % 2 != 0 && last % 2 != 0) count += 1\n            }\n  \
    \      }\n        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // `nums.length`\
    \ is the length of the list\n        // `nums(i)` is the ith element of the list\n\
    \        // `nums.head` is the first element of the list\n        // `nums.tail`\
    \ is the list of all elements except the first one\n        // `nums.last` is\
    \ the last element of the list\n        // `nums.init` is the list of all elements\
    \ except the last one\n        // `nums.reverse` is the list of all elements in\
    \ reverse order\n        // `nums.reverse.head` is the last element of the list\n\
    \        // `nums.reverse.tail` is the list of all elements except the last one\
    \ in reverse order\n        // `nums.reverse.init` is the list of all elements\
    \ except the first one in reverse order\n        // `nums.reverse.last` is the\
    \ first element of the list\n        // `nums.take(i)` is the list of the first\
    \ i elements\n        // `nums.drop(i)` is the list of all elements except the\
    \ first i elements\n        // `nums.takeRight(i)` is the list of the last i elements\n\
    \        // `nums.dropRight(i)` is the list of all elements except the last i\
    \ elements\n        // `nums.splitAt(i)` is a pair of lists: the first one is\
    \ the list of the first i elements, the second one is the list of all elements\
    \ except the first i elements\n        // `nums.indices` is the list of all indices\n\
    \        // `nums.indices.reverse` is the list of all indices in reverse order\n\
    \        // `nums.indices.reverse.head` is the last index\n        // `nums.indices.reverse.tail`\
    \ is the list of all indices except the last one in reverse order\n        //\
    \ `nums.indices.reverse.init` is the list of all indices except the first one\
    \ in reverse order\n        // `nums.indices.reverse.last` is the first index\n\
    \        // `nums.indices.take(i)` is the list of the first i indices\n      \
    \  // `", "        var count = 0l\n        for (num <- nums) {\n            if\
    \ (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", "        // Fill Up this function\
    \ body\n        // `nums` is a list of numbers\n        // The output should be\
    \ the number of elements in the list that are greater than 10 and both \n    \
    \    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n        //\
    \ For example:\n        // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0l\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                var firstDigit = num % 10\n                var lastDigit\
    \ = num / pow(10, floor(log10(num)).toInt).toLong\n                if (firstDigit\
    \ % 2 != 0 && lastDigit % 2 != 0) {\n                    count += 1\n        \
    \        }\n            }\n        }\n        count", "        var count = 0l\n\
    \        for (num <- nums) {\n            if (num > 10 && num.toString.length\
    \ > 1 && num.toString.charAt(0).asDigit % 2 == 1 && num.toString.charAt(num.toString.length\
    \ - 1).asDigit % 2 == 1) count += 1\n        }\n        count", "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // The\
    \ function should return the number of elements in the list that are greater than\
    \ 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n   \
    \     var count = 0\n        for (i <- nums) {\n            if (i > 10) {\n  \
    \              val first = i.toString.charAt(0).toString.toInt\n             \
    \   val last = i.toString.charAt(i.toString.length - 1).toString.toInt\n     \
    \           if (first % 2 != 0 && last % 2 != 0) {\n                    count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ var count = 0l\n        for (num <- nums) {\n            if (num > 10 && num\
    \ % 2 == 1 && num / 10 % 2 == 1) count += 1\n        }\n        count", "    \
    \    // Fill Up this function body\n        // `nums` is a list of numbers\n \
    \       // You have to return the number of elements in the list that are greater\
    \ than 10 and both \n        // first and last digits of a number are odd (1,\
    \ 3, 5, 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                val str = num.toString\n                val first = str.charAt(0).toString.toInt\n\
    \                val last = str.charAt(str.length - 1).toString.toInt\n      \
    \          if (first % 2 != 0 && last % 2 != 0) {\n                    count +=\
    \ 1\n                }\n            }\n        }\n        count", "        //\
    \ Fill Up this function body\n        // `nums` is a list of numbers\n       \
    \ // `return` the number of elements in the list that are greater than 10 and\
    \ both first and last digits of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x\
    \ => x > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", '        nums.filter(x => abs(x) > 10 && abs(x) % 10 % 2
    == 1 && x % 10 % 2 == 1).length', "        // Fill Up this function body\n   \
    \     // `nums` is a list of numbers\n        // You have to return the number\
    \ of elements in the list that are greater than 10 and both \n        // first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x\
    \ => x > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", "        var count = 0l\n        for (num <- nums) {\n  \
    \          if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) {\n                count += 1\n            }\n        }\n        count",
  "        // Fill Up this function body\n        // `nums` contains the list of numbers\n\
    \        // `nums.length` contains the number of elements in the list\n      \
    \  // `nums(i)` contains the ith element of the list\n        // `nums(i).toString`\
    \ contains the string representation of the ith element\n        // `nums(i).toString.length`\
    \ contains the number of digits in the ith element\n        // `nums(i).toString.charAt(j)`\
    \ contains the jth digit of the ith element\n        // `nums(i).toString.charAt(j).toString.toInt`\
    \ contains the integer value of the jth digit of the ith element\n        var\
    \ count = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i)\
    \ > 10) {\n                var first = nums(i).toString.charAt(0).toString.toInt\n\
    \                var last = nums(i).toString.charAt(nums(i).toString.length -\
    \ 1).toString.toInt\n                if (first % 2 == 1 && last % 2 == 1) {\n\
    \                    count += 1\n                }\n            }\n        }\n\
    \        return count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // You\
    \ need to return the number of elements in the list that are greater than 10 and\
    \ both \n        // first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
    \        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        nums.filter(x => x > 10 && (x % 2 != 0) && (x % 10 != 0)).size", "  \
    \      // Fill Up this function body\n        // `nums` is a list of numbers\n\
    \        // Do list traversal and return the number of elements in the list that\
    \ are greater than 10 and both first and last digits of a number are odd (1, 3,\
    \ 5, 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0l\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                val first = num.toString.charAt(0).toString.toInt\n     \
    \           val last = num.toString.charAt(num.toString.length - 1).toString.toInt\n\
    \                if (first % 2 != 0 && last % 2 != 0) {\n                    count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ // Fill Up this function body\n        // `nums` is a list of numbers\n    \
    \    // You need to return the number of elements that satisfy the condition\n\
    \        // given in the problem statement\n        nums.filter(x => x > 10 &&\
    \ x % 2 == 1 && (x % 10 == 1 || x % 10 == 3 || x % 10 == 5 || x % 10 == 7 || x\
    \ % 10 == 9)).length", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // You\
    \ have to return the number of elements in the list that are greater than 10 and\
    \ both \n        // first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
    \        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 &&\
    \ x.toString.last.toString.toInt % 2 != 0).length", "        // Fill Up this function\
    \ body\n        // `nums` is a list of numbers\n        // You need to return\
    \ the number of elements in the list that are greater than 10 and both \n    \
    \    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n        var\
    \ count = 0\n        for (num <- nums) {\n            if (num > 10) {\n      \
    \          var n = num\n                var first = n % 10\n                while\
    \ (n > 10) {\n                    n = n / 10\n                }\n            \
    \    var last = n\n                if (first % 2 != 0 && last % 2 != 0) {\n  \
    \                  count += 1\n                }\n            }\n        }\n \
    \       count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // `return`\
    \ the number of elements in the list that are greater than 10 and both \n    \
    \    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x\
    \ => x > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", "        def isSpecial(num : Long) : Boolean = {\n      \
    \      if (num < 10) return false\n            if (num % 2 == 0) return false\n\
    \            var n = num\n            while (n > 10) {\n                n /= 10\n\
    \            }\n            if (n % 2 == 0) return false\n            n = num\n\
    \            while (n > 10) {\n                n %= 10\n            }\n      \
    \      if (n % 2 == 0) return false\n            return true\n        }\n    \
    \    nums.filter(isSpecial(_)).length", "        // Fill Up this function body\n\
    \        // `nums` is a list of numbers\n        // The output should be the number\
    \ of elements in the list that are greater than 10 and both first and last digits\
    \ of a number are odd (1, 3, 5, 7, 9).\n        // For example:\n        // >>>\
    \ specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong)))\n\
    \        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n      \
    \  var count = 0l\n        for (num <- nums) {\n            if (num > 10) {\n\
    \                var firstDigit = num.toString.charAt(0).toString.toInt\n    \
    \            var lastDigit = num.toString.charAt(num.toString.length - 1).toString.toInt\n\
    \                if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n          \
    \          count += 1\n                }\n            }\n        }\n        count",
  '        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0l\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // `return`\
    \ the number of elements in the list that are greater than 10 and both first and\
    \ last digits of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x => x\
    \ > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", '        nums.filter(x => x > 10 && (x % 2 != 0) && (x %
    10 != 0)).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers\n        // `nums`\
    \ is a list of numbers\n        // `nums` is a list of numbers", "        val\
    \ result = nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 == 1\
    \ && x.toString.last.toString.toInt % 2 == 1)\n        result.length.toLong",
  '        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        var count = 0l\n        for (num <- nums) {\n    \
    \        if (num > 10 && num.toString.charAt(0).toString.toInt % 2 == 1 && num.toString.charAt(num.toString.length\
    \ - 1).toString.toInt % 2 == 1) {\n                count += 1\n            }\n\
    \        }\n        return count", "        // Fill Up this function body\n  \
    \      // `nums` is a list of numbers\n        // `return` the number of elements\
    \ in the list that are greater than 10 and both \n        // first and last digits\
    \ of a number are odd (1, 3, 5, 7, 9).\n        var count = 0\n        for (i\
    \ <- nums) {\n            if (i > 10) {\n                var s = i.toString\n\
    \                if (s(0).toString.toInt % 2 != 0 && s(s.length - 1).toString.toInt\
    \ % 2 != 0) count += 1\n            }\n        }\n        count", "        //\
    \ Fill Up this function body\n        // `nums` is a list of numbers\n       \
    \ // Compute and return the number of elements in `nums` that are greater than\
    \ 10 and both \n        // first and last digits of a number are odd (1, 3, 5,\
    \ 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0\n        for (i <- nums) {\n            var first = i.toString.charAt(0).toString.toInt\n\
    \            var last = i.toString.charAt(i.toString.length - 1).toString.toInt\n\
    \            if (i > 10 && first % 2 != 0 && last % 2 != 0) count += 1\n     \
    \   }\n        count", "        // Fill Up this function body\n        // `nums`\
    \ is a list of numbers\n        // Compute and return the number of elements in\
    \ `nums` that are greater than 10 and both first and last digits of a number are\
    \ odd (1, 3, 5, 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        nums.filter(x => x > 10 && (x % 2 == 1 || x % 2 == -1)).map(x => x.toString.map(x\
    \ => x.asDigit).toList).filter(x => x.head % 2 == 1 && x.last % 2 == 1).length.toLong",
  "        def isSpecial(n : Long) : Boolean = {\n            val s = n.toString\n\
    \            if (s.length == 1) return false\n            val first = s.head.toString.toInt\n\
    \            val last = s.last.toString.toInt\n            if (first % 2 == 0\
    \ || last % 2 == 0) return false\n            if (n < 10) return false\n     \
    \       return true\n        }\n        return nums.filter(isSpecial(_)).length",
  "        // Fill Up this function body\n        // `nums` is a list of numbers\n\
    \        // Compute and return the number of elements in `nums` that are greater\
    \ than 10 and both \n        // first and last digits of a number are odd (1,\
    \ 3, 5, 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0l\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                val str = num.toString\n                val first = str.charAt(0).toString.toInt\n\
    \                val last = str.charAt(str.length - 1).toString.toInt\n      \
    \          if (first % 2 != 0 && last % 2 != 0) {\n                    count +=\
    \ 1\n                }\n            }\n        }\n        count", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // You have to return the number of elements in the\
    \ list that are greater than 10 and both first and last digits of a number are\
    \ odd (1, 3, 5, 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 &&\
    \ x.toString.last.toString.toInt % 2 != 0).size.toLong", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // The\
    \ function should return the number of elements in the list that are greater than\
    \ 10 and both \n        // first and last digits of a number are odd (1, 3, 5,\
    \ 7, 9).\n        nums.filter(x => x > 10 && x.toString.head.toString.toInt %\
    \ 2 != 0 && x.toString.last.toString.toInt % 2 != 0).length", "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // You\
    \ have to return the number of elements in the list that are greater than 10 and\
    \ both first and last digits of a number are odd (1, 3, 5, 7, 9).\n        //\
    \ For example:\n        // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0\n        for (i <- nums) {\n            if (i > 10) {\n\
    \                var str = i.toString\n                if (str.length > 1) {\n\
    \                    var first = str.charAt(0).toString.toInt\n              \
    \      var last = str.charAt(str.length - 1).toString.toInt\n                \
    \    if (first % 2 != 0 && last % 2 != 0) {\n                        count +=\
    \ 1\n                    }\n                }\n            }\n        }\n    \
    \    count", "        var count = 0l\n        for (num <- nums) {\n          \
    \  if (num > 10 && num.toString.charAt(0).toString.toInt % 2 == 1 && num.toString.charAt(num.toString.length\
    \ - 1).toString.toInt % 2 == 1) count += 1\n        }\n        count", "     \
    \   var count = 0l\n        for (num <- nums) {\n            if (num > 10 && num.toString.charAt(0).toString.toInt\
    \ % 2 == 1 && num.toString.charAt(num.toString.length - 1).toString.toInt % 2\
    \ == 1) {\n                count += 1\n            }\n        }\n        count",
  "        // Fill Up this function body\n        // `nums` is a list of numbers\n\
    \        // `return` the number of elements in the list that are greater than\
    \ 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n   \
    \     var count = 0\n        for (i <- nums) {\n            if (i > 10) {\n  \
    \              var s = i.toString\n                if (s.length() > 1) {\n   \
    \                 if (s.charAt(0).toInt % 2 != 0 && s.charAt(s.length() - 1).toInt\
    \ % 2 != 0) {\n                        count += 1\n                    }\n   \
    \             }\n            }\n        }\n        count", '        nums.filter(x
    => x > 10 && (x % 2 == 1) && (x / 10 % 2 == 1)).length', "        // Fill Up this\
    \ function body\n        // `nums` is a list of numbers\n        // The output\
    \ should be the number of elements in the list that are greater than 10 and both\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n        // For example:\n\
    \        // >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 &&\
    \ x.toString.last.toString.toInt % 2 != 0).size.toLong", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        def isSpecial(num : Long) : Boolean = {\n        \
    \    val str = num.toString\n            if (str.length == 1) return false\n \
    \           val first = str.charAt(0).toString.toInt\n            val last = str.charAt(str.length\
    \ - 1).toString.toInt\n            if (first % 2 == 0 || last % 2 == 0) return\
    \ false\n            if (num < 10) return false\n            return true\n   \
    \     }\n        return nums.filter(isSpecial(_)).length", "        // Fill Up\
    \ this function body\n        // `nums` is a list of numbers\n        // Compute\
    \ and return the number of elements in `nums` that are greater than 10 and both\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n        def isOdd(n\
    \ : Long) : Boolean = {\n            if (n == 0) return false\n            else\
    \ if (n == 1) return true\n            else return isOdd(n / 10)\n        }\n\
    \        nums.filter(n => n > 10 && isOdd(n) && isOdd(n % 10)).length", "    \
    \    val nums2 = nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2\
    \ == 1 && x.toString.last.toString.toInt % 2 == 1)\n        nums2.length.toLong",
  "        // Fill Up this function body\n        // `nums` is a list of numbers\n\
    \        // Compute and return the number of elements in `nums` that are greater\
    \ than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
    \        var count = 0\n        for (num <- nums) {\n            if (num > 10\
    \ && num.toString.head.toString.toInt % 2 != 0 && num.toString.last.toString.toInt\
    \ % 2 != 0) count += 1\n        }\n        count", "        var count = 0l\n \
    \       for (num <- nums) {\n            if (num > 10 && num.toString.charAt(0).toString.toInt\
    \ % 2 == 1 && num.toString.charAt(num.toString.length - 1).toString.toInt % 2\
    \ == 1) count += 1\n        }\n        count", '        nums.filter(x => x > 10
    && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt %
    2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        var count = 0l\n        for (num <- nums) {\n    \
    \        if (num > 10 && (num % 10) % 2 == 1 && num / 10 % 2 == 1) count += 1\n\
    \        }\n        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0l\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        def isSpecial(num\
    \ : Long) : Boolean = {\n            if (num < 10) return false\n            var\
    \ n = num\n            var first = n % 10\n            n /= 10\n            var\
    \ last = n % 10\n            if (first % 2 == 0 || last % 2 == 0) return false\n\
    \            while (n > 0) {\n                n /= 10\n            }\n       \
    \     return true\n        }\n        return nums.filter(x => isSpecial(x)).length",
  "        // Fill Up this function body\n        // `nums` is a list of numbers\n\
    \        // You have to return the number of elements in the list that are greater\
    \ than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
    \        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 &&\
    \ x.toString.last.toString.toInt % 2 != 0).length", '        nums.filter(x =>
    x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        var count = 0l\n        for (num <- nums) {\n    \
    \        if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", "        var count = 0l\n \
    \       for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // Compute and return the number of elements in `nums`\
    \ that are greater than 10 and both first and last digits of a number are odd\
    \ (1, 3, 5, 7, 9).\n        nums.filter(x => x > 10 && x.toString.head.toString.toInt\
    \ % 2 != 0 && x.toString.last.toString.toInt % 2 != 0).length", "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // The\
    \ output should be the number of elements in the list that are greater than 10\
    \ and both \n        // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 &&\
    \ x.toString.last.toString.toInt % 2 != 0).size.toLong", "        // Fill Up this\
    \ function body\n        // `nums` is a list of numbers\n        // You have to\
    \ return the number of elements in the list that are greater than 10 and both\
    \ \n        // first and last digits of a number are odd (1, 3, 5, 7, 9).\n  \
    \      nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", "        def isSpecial(num : Long) : Boolean = {\n      \
    \      val firstDigit = num.toString.charAt(0).asDigit\n            val lastDigit\
    \ = num.toString.charAt(num.toString.length - 1).asDigit\n            num > 10\
    \ && firstDigit % 2 == 1 && lastDigit % 2 == 1\n        }\n        nums.filter(isSpecial).length",
  '        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // `return` the number of elements in the list that\
    \ are greater than 10 and both first and last digits of a number are odd (1, 3,\
    \ 5, 7, 9).\n        nums.filter(x => x > 10 && x.toString.head.toString.toInt\
    \ % 2 != 0 && x.toString.last.toString.toInt % 2 != 0).length", "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // `return`\
    \ the number of elements in the list that are greater than 10 and both first and\
    \ last digits of a number are odd (1, 3, 5, 7, 9).\n        var count = 0l\n \
    \       for (i <- nums) {\n            if (i > 10) {\n                var num\
    \ = i\n                var first = num % 10\n                while (num > 10)\
    \ {\n                    num = num / 10\n                }\n                var\
    \ last = num\n                if (first % 2 != 0 && last % 2 != 0) {\n       \
    \             count += 1\n                }\n            }\n        }\n      \
    \  count", "        var count = 0l\n        for (num <- nums) {\n            if\
    \ (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", "        def isSpecial(num\
    \ : Long) : Boolean = {\n            if (num < 10) return false\n            val\
    \ firstDigit = num % 10\n            val lastDigit = num / pow(10, floor(log10(num)).toInt).toLong\n\
    \            if (firstDigit % 2 == 0 || lastDigit % 2 == 0) return false\n   \
    \         return true\n        }\n        return nums.filter(isSpecial).length",
  "        var count = 0l\n        for (num <- nums) {\n            if (num > 10 &&\
    \ num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", '        nums.filter(x => x
    > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        def isSpecial(n\
    \ : Long) : Boolean = {\n            if (n < 10) return false\n            val\
    \ firstDigit = n % 10\n            val lastDigit = n / pow(10, floor(log10(n)).toInt).toLong\
    \ % 10\n            if (firstDigit % 2 == 0 || lastDigit % 2 == 0) return false\n\
    \            return true\n        }\n        return nums.filter(isSpecial).length",
  "        var count = 0l\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                var firstDigit = num / 10\n                var lastDigit\
    \ = num % 10\n                if (firstDigit % 2 == 1 && lastDigit % 2 == 1) count\
    \ += 1\n            }\n        }\n        return count", "        // Fill Up this\
    \ function body\n        // `nums` is a list of numbers\n        // `return` the\
    \ number of elements in the list that are greater than 10 and both \n        //\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x\
    \ => x > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // `return`\
    \ should return the number of elements in the list that are greater than 10 and\
    \ both first and last digits of a number are odd (1, 3, 5, 7, 9).\n        var\
    \ count = 0\n        for (num <- nums) {\n            if (num > 10) {\n      \
    \          var str = num.toString\n                if (str.length > 1) {\n   \
    \                 if (str.charAt(0).toString.toInt % 2 != 0 && str.charAt(str.length\
    \ - 1).toString.toInt % 2 != 0) {\n                        count += 1\n      \
    \              }\n                }\n            }\n        }\n        count",
  "        // Fill Up this function body\n        // `nums` is a list of numbers\n\
    \        // `return` the number of elements in the list that are greater than\
    \ 10 and both \n        // first and last digits of a number are odd (1, 3, 5,\
    \ 7, 9).\n        nums.filter(x => x > 10 && x.toString.head.toString.toInt %\
    \ 2 != 0 && x.toString.last.toString.toInt % 2 != 0).length", "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // `return`\
    \ should return the number of elements in the list that are greater than 10 and\
    \ both first and last digits of a number are odd (1, 3, 5, 7, 9).\n        var\
    \ count = 0\n        for (num <- nums) {\n            if (num > 10) {\n      \
    \          var numStr = num.toString\n                if (numStr.length > 1) {\n\
    \                    if (numStr.charAt(0).toString.toInt % 2 != 0 && numStr.charAt(numStr.length\
    \ - 1).toString.toInt % 2 != 0) {\n                        count += 1\n      \
    \              }\n                }\n            }\n        }\n        count",
  '        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // `return`\
    \ should be the number of elements in the list that are greater than 10 and both\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x\
    \ => x > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", "        // Fill Up this function body\n        // `nums`\
    \ is a list of numbers\n        // Compute and return the number of elements in\
    \ `nums` that are greater than 10 and both first and last digits of a number are\
    \ odd (1, 3, 5, 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0l\n        for (i <- nums) {\n            if (i > 10) {\n\
    \                var first = i.toString.charAt(0).toString.toInt\n           \
    \     var last = i.toString.charAt(i.toString.length - 1).toString.toInt\n   \
    \             if (first % 2 != 0 && last % 2 != 0) {\n                    count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ // Fill Up this function body\n        // `nums` is a list of numbers\n    \
    \    // `return` should return the number of elements in the list that are greater\
    \ than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
    \        var count = 0\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                var first = num.toString.charAt(0).toString.toInt\n     \
    \           var last = num.toString.charAt(num.toString.length - 1).toString.toInt\n\
    \                if (first % 2 != 0 && last % 2 != 0) {\n                    count\
    \ += 1\n                }\n            }\n        }\n        count", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // `return`\
    \ the number of elements in the list that are greater than 10 and both first and\
    \ last digits of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x => x\
    \ > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", "        // Fill Up this function body\n        // `nums`\
    \ is a list of numbers\n        // You have to return the number of elements in\
    \ the list that are greater than 10 and both \n        // first and last digits\
    \ of a number are odd (1, 3, 5, 7, 9).\n        var count = 0l\n        for (num\
    \ <- nums) {\n            if (num > 10) {\n                val str = num.toString\n\
    \                if (str.head.toString.toInt % 2 != 0 && str.last.toString.toInt\
    \ % 2 != 0) count += 1\n            }\n        }\n        count", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // You\
    \ have to return the number of elements in the list that are greater than 10 and\
    \ both \n        // first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
    \        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0l\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                val firstDigit = num.toString.charAt(0).toString.toInt\n\
    \                val lastDigit = num.toString.charAt(num.toString.length - 1).toString.toInt\n\
    \                if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n          \
    \          count += 1\n                }\n            }\n        }\n        count",
  '        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // `return` the number of elements in the list that\
    \ are greater than 10 and both \n        // first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n        var count = 0\n        for (i <- nums) {\n\
    \            if (i > 10 && i.toString.head.toString.toInt % 2 != 0 && i.toString.last.toString.toInt\
    \ % 2 != 0) count += 1\n        }\n        count", "        // Fill Up this function\
    \ body\n        // `nums` is a list of numbers\n        // Compute and return\
    \ the number of elements in the list that are greater than 10 and both \n    \
    \    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n        //\
    \ For example:\n        // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 &&\
    \ x.toString.last.toString.toInt % 2 != 0).size.toLong", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // `return` the number of elements in the list that\
    \ are greater than 10 and both first and last digits of a number are odd (1, 3,\
    \ 5, 7, 9).\n        nums.filter(x => x > 10 && x.toString.head.toString.toInt\
    \ % 2 != 0 && x.toString.last.toString.toInt % 2 != 0).length", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // Compute and return the number of elements in `nums`\
    \ that are greater than 10 and both first and last digits of a number are odd\
    \ (1, 3, 5, 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 &&\
    \ x.toString.last.toString.toInt % 2 != 0).size", "        // Fill Up this function\
    \ body\n        // `nums` is a list of numbers\n        // `return` the number\
    \ of elements in the list that are greater than 10 and both \n        // first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x\
    \ => x > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // Compute\
    \ and return the number of elements in the list that are greater than 10 and both\
    \ \n        // first and last digits of a number are odd (1, 3, 5, 7, 9).\n  \
    \      // For example:\n        // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                var first = num.toString.charAt(0).toString.toInt\n     \
    \           var last = num.toString.charAt(num.toString.length - 1).toString.toInt\n\
    \                if (first % 2 != 0 && last % 2 != 0) {\n                    count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ def isSpecial(n : Long) : Boolean = {\n            val s = n.toString\n    \
    \        if (s.length == 1) return false\n            val first = s.head.toString.toInt\n\
    \            val last = s.last.toString.toInt\n            if (first % 2 == 0\
    \ || last % 2 == 0) return false\n            if (n < 10) return false\n     \
    \       return true\n        }\n        nums.filter(isSpecial).length", "    \
    \    var count = 0l\n        for (num <- nums) {\n            if (num > 10 &&\
    \ num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", "        // Fill Up this function\
    \ body\n        // `nums` is a list of numbers\n        // `return` the number\
    \ of elements in the list that are greater than 10 and both \n        // first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x\
    \ => x > 10 && x % 2 == 1 && x / 10 % 2 == 1).length", "        var count = 0l\n\
    \        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // Do list traversal and return the number of elements\
    \ that satisfy the given condition\n        var count = 0l\n        for (num <-\
    \ nums) {\n            if (num > 10 && num.toString.head.toString.toInt % 2 !=\
    \ 0 && num.toString.last.toString.toInt % 2 != 0) {\n                count +=\
    \ 1\n            }\n        }\n        count", "        var count = 0l\n     \
    \   for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // `nums.size` is the size of the list\n        //\
    \ `nums(i)` is the i-th element of the list\n        // `nums.head` is the first\
    \ element of the list\n        // `nums.tail` is the list without the first element\n\
    \        // `nums.last` is the last element of the list\n        // `nums.init`\
    \ is the list without the last element\n        // `nums.reverse` is the reversed\
    \ list\n        // `nums.reverse.head` is the last element of the list\n     \
    \   // `nums.reverse.tail` is the list without the last element\n        // `nums.reverse.init`\
    \ is the list without the first element\n        // `nums.reverse.last` is the\
    \ first element of the list\n        // `nums.min` is the minimum element of the\
    \ list\n        // `nums.max` is the maximum element of the list\n        // `nums.sum`\
    \ is the sum of all elements of the list\n        // `nums.product` is the product\
    \ of all elements of the list\n        // `nums.contains(x)` is true if the list\
    \ contains `x`\n        // `nums.mkString(s)` is the list as a string using separator\
    \ `s`\n        // `nums.mkString` is the list as a string\n        // `nums.mkString(\"\
    [\", s, \"]\")` is the list as a string using separator `s` and surrounded by\
    \ `[` and `]`\n        // `nums.toArray` is the list as an array\n        // `nums.toSet`\
    \ is the list as a set\n        // `nums.toList` is the list as a list\n     \
    \   // `nums.toSeq` is the list as a sequence\n        // `nums.toBuffer` is the\
    \ list as a buffer\n        // `nums.toMap` is the list as a map\n        // `nums.toVector`\
    \ is the list as a vector\n        // `nums.toIterable` is the list as an iterable\n\
    \        // `nums.", "        var count = 0l\n        for (num <- nums) {\n  \
    \          if (num > 10) {\n                val firstDigit = num.toString.charAt(0).asDigit\n\
    \                val lastDigit = num.toString.charAt(num.toString.length - 1).asDigit\n\
    \                if (firstDigit % 2 == 1 && lastDigit % 2 == 1) count += 1\n \
    \           }\n        }\n        count", '        nums.filter(x => x > 10 &&
    x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt % 2
    == 1).length', "        // Fill Up this function body\n        // `nums` is a\
    \ list of numbers\n        // The output should be the number of elements in the\
    \ list that are greater than 10 and both first and last digits of a number are\
    \ odd (1, 3, 5, 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 &&\
    \ x.toString.last.toString.toInt % 2 != 0).size.toLong", "        // Fill Up this\
    \ function body\n        // `nums` is a list of numbers\n        // `return` the\
    \ number of elements in the list that are greater than 10 and both \n        //\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x\
    \ => x > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", "        // Fill Up this function body\n        // `nums`\
    \ is a list of numbers\n        // `return` the number of elements in the list\
    \ that are greater than 10 and both \n        // first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n        var count = 0\n        for (i <- nums) {\n\
    \            if (i > 10 && i % 2 == 1 && i % 10 == 1 || i % 10 == 3 || i % 10\
    \ == 5 || i % 10 == 7 || i % 10 == 9) {\n                count += 1\n        \
    \    }\n        }\n        return count", "        // Fill Up this function body\n\
    \        // `nums` is a list of numbers\n        // `return` the number of elements\
    \ in the list that are greater than 10 and both first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n        nums.filter(x => x > 10 && x.toString.head.toString.toInt\
    \ % 2 != 0 && x.toString.last.toString.toInt % 2 != 0).length", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // You need to return the number of elements in the\
    \ list that are greater than 10 and both \n        // first and last digits of\
    \ a number are odd (1, 3, 5, 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 &&\
    \ x.toString.last.toString.toInt % 2 != 0).size.toLong", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // Compute and return the number of elements in the\
    \ list that are greater than 10 and both first and last digits of a number are\
    \ odd (1, 3, 5, 7, 9).\n        nums.filter(x => x > 10 && x.toString.head.toString.toInt\
    \ % 2 != 0 && x.toString.last.toString.toInt % 2 != 0).length", "        def isSpecial(num\
    \ : Long) : Boolean = {\n            if (num < 10) return false\n            val\
    \ firstDigit = num % 10\n            val lastDigit = num / pow(10, floor(log10(num)).toInt).toLong\n\
    \            firstDigit % 2 == 1 && lastDigit % 2 == 1\n        }\n        nums.filter(num\
    \ => num > 10 && isSpecial(num)).length", "        // Fill Up this function body\n\
    \        // `nums` is a list of numbers\n        // `return` the number of elements\
    \ in the list that are greater than 10 and both \n        // first and last digits\
    \ of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x => x > 10 && x.toString.head.toString.toInt\
    \ % 2 != 0 && x.toString.last.toString.toInt % 2 != 0).length", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // The\
    \ output should be the number of elements in the list that are greater than 10\
    \ and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n      \
    \  return 0l", "        def isSpecial(num : Long) : Boolean = {\n            val\
    \ firstDigit = num.toString.head.asDigit\n            val lastDigit = num.toString.last.asDigit\n\
    \            firstDigit % 2 == 1 && lastDigit % 2 == 1 && num > 10\n        }\n\
    \        nums.filter(isSpecial).length", "        // Fill Up this function body\n\
    \        // `nums` is a list of numbers\n        // `return` the number of elements\
    \ in the list that are greater than 10 and both first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n        nums.filter(x => x > 10 && x.toString.head.toString.toInt\
    \ % 2 != 0 && x.toString.last.toString.toInt % 2 != 0).length", "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // `return`\
    \ should return the number of elements in the list that are greater than 10 and\
    \ both \n        // first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
    \        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 &&\
    \ x.toString.last.toString.toInt % 2 != 0).length", "        // Fill Up this function\
    \ body\n        // `nums` is a list of numbers\n        // `return` the number\
    \ of elements in the list that are greater than 10 and both \n        // first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x\
    \ => x > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", "        // Fill Up this function body\n        // `nums`\
    \ is a list of numbers\n        // You need to return the number of elements in\
    \ the list that are greater than 10 and both \n        // first and last digits\
    \ of a number are odd (1, 3, 5, 7, 9).\n        var count = 0l\n        for (num\
    \ <- nums) {\n            if (num > 10) {\n                var firstDigit = num\
    \ % 10\n                var lastDigit = num\n                while (lastDigit\
    \ > 10) {\n                    lastDigit = lastDigit / 10\n                }\n\
    \                if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n          \
    \          count += 1\n                }\n            }\n        }\n        count",
  "        // Fill Up this function body\n        // `nums` is a list of numbers\n\
    \        // Compute and return the number of elements in `nums` that are greater\
    \ than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
    \        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 &&\
    \ x.toString.last.toString.toInt % 2 != 0).length", "        var count = 0l\n\
    \        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // `return`\
    \ the number of elements in the list that are greater than 10 and both \n    \
    \    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x\
    \ => x > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", "        // Fill Up this function body\n        // `nums`\
    \ is a list of numbers\n        // `return` should return the number of elements\
    \ in the list that are greater than 10 and both first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n        var count = 0l\n        for (num <- nums)\
    \ {\n            if (num > 10) {\n                var numStr = num.toString\n\
    \                if (numStr.length > 1) {\n                    var firstDigit\
    \ = numStr.charAt(0).toString.toInt\n                    var lastDigit = numStr.charAt(numStr.length\
    \ - 1).toString.toInt\n                    if (firstDigit % 2 != 0 && lastDigit\
    \ % 2 != 0) count += 1\n                }\n            }\n        }\n        count",
  "        var count = 0l\n        for (num <- nums) {\n            if (num > 10 &&\
    \ abs(num) % 10 % 2 == 1 && num / 10 % 10 % 2 == 1) count += 1\n        }\n  \
    \      count", "        // Fill Up this function body\n        // `nums` is a\
    \ list of numbers\n        // The function should return the number of elements\
    \ in the list that are greater than 10 and both \n        // first and last digits\
    \ of a number are odd (1, 3, 5, 7, 9).\n        // For example:\n        // >>>\
    \ specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong)))\n\
    \        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n      \
    \  nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).size.toLong", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // The\
    \ function should return the number of elements in the list that are greater than\
    \ 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n   \
    \     // For example:\n        // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0\n        for (i <- nums) {\n            if (i > 10) {\n\
    \                var first = i.toString.charAt(0).toString.toInt\n           \
    \     var last = i.toString.charAt(i.toString.length - 1).toString.toInt\n   \
    \             if (first % 2 != 0 && last % 2 != 0) {\n                    count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ // Fill Up this function body\n        // `nums` is a list of numbers\n    \
    \    // Compute and return the number of elements in the list that are greater\
    \ than 10 and both \n        // first and last digits of a number are odd (1,\
    \ 3, 5, 7, 9).\n        var count = 0\n        for (num <- nums) {\n         \
    \   if (num > 10) {\n                var n = num\n                var first =\
    \ n % 10\n                while (n > 0) {\n                    first = n % 10\n\
    \                    n /= 10\n                }\n                if (first % 2\
    \ != 0 && num % 2 != 0) count += 1\n            }\n        }\n        count",
  "        // Fill Up this function body\n        // `nums` is a list of numbers\n\
    \        // The function should return the number of elements in the list that\
    \ are greater than 10 and both first and last digits of a number are odd (1, 3,\
    \ 5, 7, 9).\n        nums.filter(x => x > 10 && x.toString.head.toString.toInt\
    \ % 2 != 0 && x.toString.last.toString.toInt % 2 != 0).length", "        var count\
    \ = 0l\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // Compute and return the number of elements in the\
    \ list that are greater than 10 and both \n        // first and last digits of\
    \ a number are odd (1, 3, 5, 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 &&\
    \ x.toString.last.toString.toInt % 2 != 0).size.toLong", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        var count = 0l\n        for (num <- nums) {\n    \
    \        if (num > 10) {\n                val firstDigit = num.toString.charAt(0).asDigit\n\
    \                val lastDigit = num.toString.charAt(num.toString.length - 1).asDigit\n\
    \                if (firstDigit % 2 == 1 && lastDigit % 2 == 1) count += 1\n \
    \           }\n        }\n        count", "        // Fill Up this function body\n\
    \        // `nums` is a list of numbers\n        // `return` the number of elements\
    \ in the list that are greater than 10 and both \n        // first and last digits\
    \ of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x => x > 10 && x.toString.head.toString.toInt\
    \ % 2 != 0 && x.toString.last.toString.toInt % 2 != 0).length", "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // `return`\
    \ the number of elements in the list that are greater than 10 and both \n    \
    \    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x\
    \ => x > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", "        // Fill Up this function body\n        // `nums`\
    \ is a list of numbers\n        // Compute and return the number of elements in\
    \ the list that are greater than 10 and both \n        // first and last digits\
    \ of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x => x > 10 && x.toString.head.toString.toInt\
    \ % 2 != 0 && x.toString.last.toString.toInt % 2 != 0).size", "        var count\
    \ = 0l\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // `return` the number of elements in the list that\
    \ are greater than 10 and both first and last digits of a number are odd (1, 3,\
    \ 5, 7, 9).\n        def isOdd(n : Long) : Boolean = {\n            val s = n.toString\n\
    \            s(0).toString.toInt % 2 == 1 && s(s.length - 1).toString.toInt %\
    \ 2 == 1\n        }\n        nums.filter(n => n > 10 && isOdd(n)).length", " \
    \       def isSpecial(num : Long) : Boolean = {\n            val firstDigit =\
    \ num.toString.charAt(0).asDigit\n            val lastDigit = num.toString.charAt(num.toString.length\
    \ - 1).asDigit\n            num > 10 && firstDigit % 2 == 1 && lastDigit % 2 ==\
    \ 1\n        }\n        nums.filter(isSpecial(_)).length", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // `return` should be a number\n        var count\
    \ = 0l\n        for (num <- nums) {\n            if (num > 10 && num.toString.charAt(0).toString.toInt\
    \ % 2 != 0 && num.toString.charAt(num.toString.length - 1).toString.toInt % 2\
    \ != 0) {\n                count += 1\n            }\n        }\n        count",
  '        nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // Compute\
    \ and return the number of elements in the list that are greater than 10 and both\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n        // For example:\n\
    \        // >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0l\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                var numStr = num.toString\n                if (numStr.length\
    \ > 1) {\n                    var firstDigit = numStr.charAt(0).toString.toInt\n\
    \                    var lastDigit = numStr.charAt(numStr.length - 1).toString.toInt\n\
    \                    if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n      \
    \                  count += 1\n                    }\n                }\n    \
    \        }\n        }\n        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0l\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toString.toInt\
    \ % 2 == 1 && num.toString.last.toString.toInt % 2 == 1) count += 1\n        }\n\
    \        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && (x % 2 == 1) && (x / 10 % 2 == 1)).length', "        // Fill Up this\
    \ function body\n        // `nums` is a list of numbers\n        // `return` should\
    \ return the number of elements in the list that are greater than 10 and both\
    \ \n        // first and last digits of a number are odd (1, 3, 5, 7, 9).\n  \
    \      nums.filter(x => x > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", "        def isSpecial(num : Long) : Boolean = {\n      \
    \      if (num < 10) return false\n            var n = num\n            while\
    \ (n >= 10) n /= 10\n            if (n % 2 == 0) return false\n            n =\
    \ num\n            while (n >= 10) n %= 10\n            if (n % 2 == 0) return\
    \ false\n            return true\n        }\n        nums.filter(x => x > 10 &&\
    \ isSpecial(x)).length", "        // Fill Up this function body\n        // `nums`\
    \ is a list of numbers\n        // Compute and return the number of elements in\
    \ the list that are greater than 10 and both first and last digits of a number\
    \ are odd (1, 3, 5, 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0l\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                var first = num.toString.charAt(0).toString.toInt\n     \
    \           var last = num.toString.charAt(num.toString.length - 1).toString.toInt\n\
    \                if (first % 2 != 0 && last % 2 != 0) {\n                    count\
    \ += 1\n                }\n            }\n        }\n        count", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => (x > 10) && (x % 2 == 1) && (x.toString.head.toString.toInt
    % 2 == 1) && (x.toString.last.toString.toInt % 2 == 1)).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x % 2 == 1 && (x / 10)
    % 2 == 1).length', "        var count = 0l\n        for (num <- nums) {\n    \
    \        if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", '        nums.filter(x => x
    > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // `return` the number of elements in the list that\
    \ are greater than 10 and both first and last digits of a number are odd (1, 3,\
    \ 5, 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0\n        for (i <- nums) {\n            if (i > 10) {\n\
    \                val s = i.toString\n                val first = s.charAt(0).toString.toInt\n\
    \                val last = s.charAt(s.length - 1).toString.toInt\n          \
    \      if (first % 2 != 0 && last % 2 != 0) {\n                    count += 1\n\
    \                }\n            }\n        }\n        count", "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // Compute\
    \ and return the number of elements in the list that are greater than 10 and both\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x\
    \ => x > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", "        def isSpecial(num : Long) : Boolean = {\n      \
    \      val str = num.toString\n            val first = str.charAt(0).toString.toInt\n\
    \            val last = str.charAt(str.length - 1).toString.toInt\n          \
    \  if (num > 10 && first % 2 == 1 && last % 2 == 1) true else false\n        }\n\
    \        nums.filter(isSpecial(_)).length", "        // Fill Up this function\
    \ body\n        // `nums` is a list of numbers\n        // Compute and return\
    \ the number of elements in the list that are greater than 10 and both first and\
    \ last digits of a number are odd (1, 3, 5, 7, 9).\n        // For example:\n\
    \        // >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                var temp = num\n                var first = temp % 10\n \
    \               var last = temp % 10\n                while (temp > 0) {\n   \
    \                 last = temp % 10\n                    temp = temp / 10\n   \
    \             }\n                if (first % 2 != 0 && last % 2 != 0) {\n    \
    \                count += 1\n                }\n            }\n        }\n   \
    \     count", "        def isSpecial(num : Long) : Boolean = {\n            val\
    \ s = num.toString\n            if (s.length == 1) return false\n            val\
    \ first = s.head.toString.toInt\n            val last = s.last.toString.toInt\n\
    \            if (first % 2 == 0 || last % 2 == 0) return false\n            return\
    \ num > 10\n        }\n        return nums.filter(isSpecial).length", "      \
    \  // Fill Up this function body\n        // `nums` is a list of numbers\n   \
    \     // `return` the number of elements in the list that are greater than 10\
    \ and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n      \
    \  nums.filter(n => n > 10 && n.toString.head.toString.toInt % 2 != 0 && n.toString.last.toString.toInt\
    \ % 2 != 0).length", "        var count = 0l\n        for (num <- nums) {\n  \
    \          if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", '        nums.filter(x => x
    > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // `return` the number of elements in the list that\
    \ are greater than 10 and both first and last digits of a number are odd (1, 3,\
    \ 5, 7, 9).\n        nums.filter(x => x > 10 && x.toString.head.toString.toInt\
    \ % 2 != 0 && x.toString.last.toString.toInt % 2 != 0).length", "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // `return`\
    \ the number of elements in the list that are greater than 10 and both \n    \
    \    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x\
    \ => x > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length']
stop_tokens:
- "\n    }\n"
