name: HumanEval_146_specialFilter
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes a list of numbers as input and returns \n  \
  \  // the number of elements in the list that are greater than 10 and both \n  \
  \  // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n\
  \    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong)))\n\
  \    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong,\
  \ 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n    def specialFilter(nums\
  \ : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
  \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
  \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
  \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n   \
  \ assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
  \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
  \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n   \
  \ assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
  \ == (0l));\n    }\n\n}\n"
completions: ['        nums.filter(x => x > 10 && x.toString.head.toString.toInt %
    2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        var count\
    \ = 0l\n        for (num <- nums) {\n            if (num > 10) {\n           \
    \     val firstDigit = num.toString.charAt(0).asDigit\n                val lastDigit\
    \ = num.toString.charAt(num.toString.length - 1).asDigit\n                if (firstDigit\
    \ % 2 == 1 && lastDigit % 2 == 1) count += 1\n            }\n        }\n     \
    \   count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // The\
    \ function should return the number of elements in the list that are greater than\
    \ 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n   \
    \     // For example:\n        // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0l\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                val str = num.toString\n                val first = str.charAt(0).toString.toInt\n\
    \                val last = str.charAt(str.length - 1).toString.toInt\n      \
    \          if (first % 2 != 0 && last % 2 != 0) count += 1\n            }\n  \
    \      }\n        count", '        nums.filter(x => x > 10 && x.toString.head.toString.toInt
    % 2 == 1 && x.toString.last.toString.toInt % 2 == 1).length', "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // `nums.length`\
    \ is the length of the list\n        // `nums(i)` is the ith element of the list\n\
    \        // `nums.head` is the first element of the list\n        // `nums.tail`\
    \ is the list of all elements except the first one\n        // `nums.last` is\
    \ the last element of the list\n        // `nums.init` is the list of all elements\
    \ except the last one\n        // `nums.reverse` is the list of all elements in\
    \ reverse order\n        // `nums.reverse.head` is the last element of the list\n\
    \        // `nums.reverse.tail` is the list of all elements except the last one\
    \ in reverse order\n        // `nums.reverse.init` is the list of all elements\
    \ except the first one in reverse order\n        // `nums.reverse.last` is the\
    \ first element of the list\n        // `nums.take(i)` is the list of the first\
    \ i elements\n        // `nums.drop(i)` is the list of all elements except the\
    \ first i elements\n        // `nums.takeRight(i)` is the list of the last i elements\n\
    \        // `nums.dropRight(i)` is the list of all elements except the last i\
    \ elements\n        // `nums.splitAt(i)` is a pair of lists: the first one is\
    \ the list of the first i elements, the second one is the list of all elements\
    \ except the first i elements\n        // `nums.indices` is the list of all indices\n\
    \        // `nums.indices.reverse` is the list of all indices in reverse order\n\
    \        // `nums.indices.reverse.head` is the last index\n        // `nums.indices.reverse.tail`\
    \ is the list of all indices except the last one in reverse order\n        //\
    \ `nums.indices.reverse.init` is the list of all indices except the first one\
    \ in reverse order\n        // `nums.indices.reverse.last` is the first index\n\
    \        // `nums.indices.take(i)` is the list of the first i indices\n      \
    \  // `", "        var count = 0l\n        for (num <- nums) {\n            if\
    \ (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n        }\n        count", "        // Fill Up this function\
    \ body\n        // `nums` is a list of numbers\n        // The output should be\
    \ the number of elements in the list that are greater than 10 and both \n    \
    \    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n        //\
    \ For example:\n        // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0l\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                var firstDigit = num % 10\n                var lastDigit\
    \ = num / pow(10, floor(log10(num)).toInt).toLong\n                if (firstDigit\
    \ % 2 != 0 && lastDigit % 2 != 0) {\n                    count += 1\n        \
    \        }\n            }\n        }\n        count", "        var count = 0l\n\
    \        for (num <- nums) {\n            if (num > 10 && num.toString.length\
    \ > 1 && num.toString.charAt(0).asDigit % 2 == 1 && num.toString.charAt(num.toString.length\
    \ - 1).asDigit % 2 == 1) count += 1\n        }\n        count", "        // Fill\
    \ Up this function body\n        // `nums` is a list of numbers\n        // The\
    \ function should return the number of elements in the list that are greater than\
    \ 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n   \
    \     var count = 0\n        for (i <- nums) {\n            if (i > 10) {\n  \
    \              val first = i.toString.charAt(0).toString.toInt\n             \
    \   val last = i.toString.charAt(i.toString.length - 1).toString.toInt\n     \
    \           if (first % 2 != 0 && last % 2 != 0) {\n                    count\
    \ += 1\n                }\n            }\n        }\n        count", "       \
    \ var count = 0l\n        for (num <- nums) {\n            if (num > 10 && num\
    \ % 2 == 1 && num / 10 % 2 == 1) count += 1\n        }\n        count", "    \
    \    // Fill Up this function body\n        // `nums` is a list of numbers\n \
    \       // You have to return the number of elements in the list that are greater\
    \ than 10 and both \n        // first and last digits of a number are odd (1,\
    \ 3, 5, 7, 9).\n        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        var count = 0\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                val str = num.toString\n                val first = str.charAt(0).toString.toInt\n\
    \                val last = str.charAt(str.length - 1).toString.toInt\n      \
    \          if (first % 2 != 0 && last % 2 != 0) {\n                    count +=\
    \ 1\n                }\n            }\n        }\n        count", "        //\
    \ Fill Up this function body\n        // `nums` is a list of numbers\n       \
    \ // `return` the number of elements in the list that are greater than 10 and\
    \ both first and last digits of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x\
    \ => x > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", '        nums.filter(x => abs(x) > 10 && abs(x) % 10 % 2
    == 1 && x % 10 % 2 == 1).length', "        // Fill Up this function body\n   \
    \     // `nums` is a list of numbers\n        // You have to return the number\
    \ of elements in the list that are greater than 10 and both \n        // first\
    \ and last digits of a number are odd (1, 3, 5, 7, 9).\n        nums.filter(x\
    \ => x > 10 && x.toString.head.toString.toInt % 2 != 0 && x.toString.last.toString.toInt\
    \ % 2 != 0).length", "        var count = 0l\n        for (num <- nums) {\n  \
    \          if (num > 10 && num.toString.head.toString.toInt % 2 == 1 && num.toString.last.toString.toInt\
    \ % 2 == 1) {\n                count += 1\n            }\n        }\n        count"]
stop_tokens:
- "\n    }\n"
