name: HumanEval_83_starts_one_ends
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return the count of the numbers of n-digit\n\
  \    // positive integers that start or end with 1.\n    def startsOneEnds(n : Long)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
  \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
  \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
  \ == (18000l));\n    }\n\n}\n"
completions: ["        // The number of n-digit positive integers that start with\
    \ 1 is\n        // 9 * 10 ^ (n - 1)\n        // The number of n-digit positive\
    \ integers that end with 1 is\n        // 10 ^ (n - 1)\n        // The number\
    \ of n-digit positive integers that start and end with 1 is\n        // 9 * 10\
    \ ^ (n - 2)\n        // The number of n-digit positive integers that start or\
    \ end with 1 is\n        // 9 * 10 ^ (n - 1) + 10 ^ (n - 1) - 9 * 10 ^ (n - 2)\n\
    \        9 * pow(10, n - 1).toLong + pow(10, n - 1).toLong - 9 * pow(10, n - 2).toLong",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n  \
    \      dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n     \
    \       dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        if (n == 2) return 4\n        if (n == 3)\
    \ return 8\n        var count = 0\n        for (i <- 1 to 9) {\n            count\
    \ += pow(10, n - 2).toLong\n        }\n        count", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        var count = 0L\n        for (i <- 1 to 9) {\n            count += pow(10,\
    \ n - 1).toLong\n        }\n        count", "        if (n == 1) return 2\n  \
    \      val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i\
    \ - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n)(0) +\
    \ dp(n)(1)", "        if (n == 1) return 2\n        val m = pow(10, n - 1).toLong\n\
    \        val p = pow(10, n).toLong\n        val q = pow(10, n - 2).toLong\n  \
    \      val r = pow(10, n - 1).toLong\n        return (p - m) + (r - q)", "   \
    \     if (n == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n   \
    \     dp(1)(0) = 0\n        dp(1)(1) = 2\n        for (i <- 2 to n) {\n      \
    \      dp(i)(0) = dp(i - 1)(0) * 9 + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n        }\n        dp(n)(0) + dp(n)(1)", "        if\
    \ (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n    \
    \    dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n \
    \           dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 9\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ * 10 - dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n      \
    \  dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n        var\
    \ count = 0\n        for (i <- 1 to 9) {\n            val s = i.toString\n   \
    \         val t = (i + 1).toString\n            val u = (i - 1).toString\n   \
    \         if (i != 9) count += s.toLong * pow(10, n - 1).toLong\n            if\
    \ (i != 1) count += u.toLong * pow(10, n - 1).toLong\n            count += t.toLong\
    \ * pow(10, n - 2).toLong\n        }\n        count", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) 1\n        else if (n == 2) 21\n   \
    \     else {\n            val dp = Array.fill(n.toInt + 1)(0L)\n            dp(1)\
    \ = 1\n            dp(2) = 21\n            for (i <- 3 to n.toInt) {\n       \
    \         dp(i) = dp(i - 1) * 9 + dp(i - 2) * 10\n            }\n            dp(n.toInt)\n\
    \        }", "        if (n == 1) return 2\n        if (n == 2) return 3\n   \
    \     val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = 2\n        dp(2) =\
    \ 3\n        for (i <- 3 to n.toInt) {\n            dp(i) = dp(i - 1) + dp(i -\
    \ 2)\n        }\n        dp(n.toInt)", "        if (n == 1) return 2\n       \
    \ if (n == 2) return 4\n        var a = 2\n        var b = 4\n        for (i <-\
    \ 3 to n.toInt) {\n            val c = a + b\n            a = b\n            b\
    \ = c\n        }\n        b", "        if (n == 1) return 2\n        val dp =\
    \ Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) =\
    \ 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) +\
    \ dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n   \
    \     dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n       \
    \ dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n    \
    \        dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n ==\
    \ 1) return 2\n        if (n == 2) return 4\n        if (n == 3) return 7\n  \
    \      if (n == 4) return 13\n        if (n == 5) return 24\n        if (n ==\
    \ 6) return 44\n        if (n == 7) return 81\n        if (n == 8) return 149\n\
    \        if (n == 9) return 274\n        if (n == 10) return 504\n        if (n\
    \ == 11) return 927\n        if (n == 12) return 1705\n        if (n == 13) return\
    \ 3136\n        if (n == 14) return 5768\n        if (n == 15) return 10609\n\
    \        if (n == 16) return 19513\n        if (n == 17) return 35890\n      \
    \  if (n == 18) return 66012\n        if (n == 19) return 121415\n        if (n\
    \ == 20) return 223317\n        if (n == 21) return 410744\n        if (n == 22)\
    \ return 755476\n        if (n == 23) return 1389537\n        if (n == 24) return\
    \ 2555757\n        if (n == 25) return 4700770\n        if (n == 26) return 8646064\n\
    \        if (n == 27) return 15902591\n        if (n == 28) return 29249425\n\
    \        if (n == 29) return 53798080\n        if (n == 30) return 98950096\n\
    \        if (n == 31) return 181997601\n        if (n == 32) return 334745777\n\
    \        if (n == 33) return 615693474\n        if (n == 34) return 1132436852\n\
    \        if (n == 35) return 2082876103\n        if (n == 36) return 3831006429\n\
    \        if (n == 37) return 7046314174\n        if (n == 38) return 12964479050\n\
    \        if (n == 39) return 23925712455\n        if (n == 40) return 44134970889\n\
    \        if (n == 41) return 81294404218\n        if (n == 42) return 150052053692\n\
    \        if (n == 43) return 277348082", "        if (n == 1) return 1\n     \
    \   if (n == 2) return 10\n        var count = 0\n        for (i <- 1 to 9) {\n\
    \            count += pow(10, n - 2).toLong\n        }\n        count", "    \
    \    if (n == 1) return 2\n        var count = 0\n        for (i <- 1 to 9) {\n\
    \            var num = i\n            for (j <- 1 to n - 1) {\n              \
    \  num *= 10\n                num += i\n            }\n            count += num\n\
    \        }\n        count", "        val dp = new Array[Long](n.toInt + 1)\n \
    \       dp(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i) = dp(i\
    \ - 1) * 10 - dp(i - 2)\n        }\n        dp(n.toInt)", "        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1)\
    \ return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n\
    \        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n)(0) + dp(n)(1)", "        if (n == 1) return 2\n        if (n == 2)\
    \ return 4\n        var count = 0L\n        for (i <- 1 to 9) {\n            count\
    \ += pow(10, n - 1).toLong\n        }\n        count", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 9\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) * 10 - dp(i - 1)(1)\n      \
    \      dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return 2\n        if (n\
    \ == 2) return 3\n        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1)\
    \ = 2\n        dp(2) = 3\n        for (i <- 3 to n.toInt) {\n            dp(i)\
    \ = dp(i - 1) + dp(i - 2)\n        }\n        dp(n.toInt)", "        if (n ==\
    \ 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return 2\n        val\
    \ dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        var count = 0L\n        for (i <- 1 to n) {\n      \
    \      count += pow(10, i - 1).toLong\n        }\n        count * 2", "      \
    \  val mod = 1000000007L\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = (dp(i - 1)(0) * 10 + dp(i - 1)(1)) % mod\n           \
    \ dp(i)(1) = (dp(i - 1)(0) + dp(i - 1)(1)) % mod\n        }\n        (dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)) % mod", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 2\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) * 9 + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n        }\n        dp(n)(0) + dp(n)(1)", "  \
    \      if (n == 1) return 2\n        if (n == 2) return 3\n        var result\
    \ = 0L\n        for (i <- 1 to 9) {\n            var temp = i\n            for\
    \ (j <- 1 to n - 2) {\n                temp *= 10\n                temp += 9\n\
    \            }\n            temp *= 10\n            temp += i\n            result\
    \ += temp\n        }\n        result", "        if (n == 1) return 2\n       \
    \ val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i\
    \ - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n)(0) +\
    \ dp(n)(1)", "        if (n == 1) return 2\n        if (n == 2) return 3\n   \
    \     if (n == 3) return 5\n        if (n == 4) return 8\n        if (n == 5)\
    \ return 13\n        if (n == 6) return 21\n        if (n == 7) return 34\n  \
    \      if (n == 8) return 55\n        if (n == 9) return 89\n        if (n ==\
    \ 10) return 144\n        if (n == 11) return 233\n        if (n == 12) return\
    \ 377\n        if (n == 13) return 610\n        if (n == 14) return 987\n    \
    \    if (n == 15) return 1597\n        if (n == 16) return 2584\n        if (n\
    \ == 17) return 4181\n        if (n == 18) return 6765\n        if (n == 19) return\
    \ 10946\n        if (n == 20) return 17711\n        if (n == 21) return 28657\n\
    \        if (n == 22) return 46368\n        if (n == 23) return 75025\n      \
    \  if (n == 24) return 121393\n        if (n == 25) return 196418\n        if\
    \ (n == 26) return 317811\n        if (n == 27) return 514229\n        if (n ==\
    \ 28) return 832040\n        if (n == 29) return 1346269\n        if (n == 30)\
    \ return 2178309\n        if (n == 31) return 3524578\n        if (n == 32) return\
    \ 5702887\n        if (n == 33) return 9227465\n        if (n == 34) return 14930352\n\
    \        if (n == 35) return 24157817\n        if (n == 36) return 39088169\n\
    \        if (n == 37) return 63245986\n        if (n == 38) return 102334155\n\
    \        if (n == 39) return 165580141\n        if (n == 40) return 267914296\n\
    \        if (n == 41) return 433494437\n        if (n == 42) return 701408733\n\
    \        if (n == 43) return 1134903170\n        if (n == 44) return 1836311903\n\
    \        if (n == 45) return 297", "        if (n == 1) return 2\n        if (n\
    \ == 2) return 4\n        var result = 0L\n        for (i <- 1 to 9) {\n     \
    \       result += pow(10, n - 1).toLong\n        }\n        result", "       \
    \ if (n == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n       \
    \ dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n          \
    \  dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n\
    \        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return 2\n    \
    \    var count = 0\n        for (i <- 1 to 9) {\n            val x = pow(10, n\
    \ - 1).toLong\n            val y = pow(10, n - 2).toLong\n            count +=\
    \ (x - y) * 2\n        }\n        return count", "        // The number of n-digit\
    \ positive integers that start with 1 is\n        // 10^(n-1). The number of n-digit\
    \ positive integers that end with 1 is\n        // 9 * 10^(n-2).\n        10L\
    \ * pow(10, n - 1).toLong - 9L * pow(10, n - 2).toLong", "        if (n == 1)\
    \ return 2\n        val dp = Array.ofDim[Long](n.toInt, 2)\n        dp(0)(0) =\
    \ 1\n        dp(0)(1) = 1\n        for (i <- 1 until n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt - 1)(0) + dp(n.toInt - 1)(1)", "        if (n == 1) return\
    \ 2\n        if (n == 2) return 4\n        var result = 0L\n        for (i <-\
    \ 1 to n) {\n            result += pow(10, i - 1).toLong\n        }\n        result\
    \ * 2", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n +\
    \ 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n)\
    \ {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        // The number\
    \ of n-digit positive integers that start or end with 1 is\n        // equal to\
    \ the number of n-digit positive integers that start with 1\n        // minus\
    \ the number of n-digit positive integers that start with 1 and\n        // end\
    \ with 0.\n        // The number of n-digit positive integers that start with\
    \ 1 is equal\n        // to the number of (n - 1)-digit positive integers that\
    \ start with 1\n        // plus the number of (n - 1)-digit positive integers\
    \ that start with 1\n        // and end with 0.\n        // The number of n-digit\
    \ positive integers that start with 1 and end\n        // with 0 is equal to the\
    \ number of (n - 2)-digit positive integers\n        // that start with 1.\n \
    \       // Therefore, the number of n-digit positive integers that start or end\n\
    \        // with 1 is equal to the number of (n - 1)-digit positive integers that\n\
    \        // start with 1 plus the number of (n - 1)-digit positive integers that\n\
    \        // start with 1 and end with 0 minus the number of (n - 2)-digit\n  \
    \      // positive integers that start with 1.\n        // The base case is n\
    \ = 1, in which case the number of 1-digit positive\n        // integers that\
    \ start or end with 1 is 1.\n        // The base case is n = 2, in which case\
    \ the number of 2-digit positive\n        // integers that start or end with 1\
    \ is 10.\n        // The base case is n = 3, in which case the number of 3-digit\
    \ positive\n        // integers that start or end with 1 is 100.\n        // The\
    \ base case is n = 4, in which case the number of 4-digit positive\n        //\
    \ integers that start or end with 1 is 1000.\n        // The base case is n =\
    \ 5, in which case the number of 5-digit positive\n        // integers that start\
    \ or end with 1 is 10000.\n        // The base case is n = 6, in which case the\
    \ number of 6-digit positive\n        // integers that start or end with 1 is\
    \ 100000.\n        // The base case is n = 7, in which case the number of 7-digit\
    \ positive\n        // integers that start or end with 1 is 1000000.\n       \
    \ // The base case is n = 8, in which case the number of 8-digit", "        val\
    \ dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1)\
    \ return 2\n        if (n == 2) return 3\n        var count = 1\n        for (i\
    \ <- 1 to n - 1) {\n            count *= 10\n            count += 1\n        }\n\
    \        count", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n       \
    \ dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n    \
    \        dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n ==\
    \ 1) return 2\n        if (n == 2) return 4\n        if (n == 3) return 8\n  \
    \      if (n == 4) return 16\n        if (n == 5) return 32\n        if (n ==\
    \ 6) return 64\n        if (n == 7) return 128\n        if (n == 8) return 256\n\
    \        if (n == 9) return 512\n        if (n == 10) return 1024\n        if\
    \ (n == 11) return 2048\n        if (n == 12) return 4096\n        if (n == 13)\
    \ return 8192\n        if (n == 14) return 16384\n        if (n == 15) return\
    \ 32768\n        if (n == 16) return 65536\n        if (n == 17) return 131072\n\
    \        if (n == 18) return 262144\n        if (n == 19) return 524288\n    \
    \    if (n == 20) return 1048576\n        if (n == 21) return 2097152\n      \
    \  if (n == 22) return 4194304\n        if (n == 23) return 8388608\n        if\
    \ (n == 24) return 16777216\n        if (n == 25) return 33554432\n        if\
    \ (n == 26) return 67108864\n        if (n == 27) return 134217728\n        if\
    \ (n == 28) return 268435456\n        if (n == 29) return 536870912\n        if\
    \ (n == 30) return 1073741824\n        if (n == 31) return 2147483648L\n     \
    \   if (n == 32) return 4294967296L\n        if (n == 33) return 8589934592L\n\
    \        if (n == 34) return 17179869184L\n        if (n == 35) return 34359738368L\n\
    \        if (n == 36) return 68719476736L\n        if (n == 37) return 137438953472L\n\
    \        if (n == 38) return 274877906944L\n        if (n == 39) return 549755813888L\n\
    \        if (n == 40) return 1099511627776L\n        if (n == 41) return 2199023255552L\n\
    \        if (n", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1)\
    \ return 2\n        if (n == 2) return 3\n        var count = 0L\n        for\
    \ (i <- 1 to n) {\n            count += pow(10, i - 1).toLong\n        }\n   \
    \     count * 2", "        if (n == 1) return 2\n        if (n == 2) return 3\n\
    \        var result = 0L\n        for (i <- 1 to 9) {\n            val x = pow(10,\
    \ n - 1).toLong\n            val y = pow(10, n - 2).toLong\n            result\
    \ += x * i + y * 9\n        }\n        result", "        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1)\
    \ return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 10)\n        for (i\
    \ <- 0 to 9) dp(1)(i) = 1\n        for (i <- 2 to n.toInt) {\n            for\
    \ (j <- 0 to 9) {\n                for (k <- 0 to 9) {\n                    if\
    \ (j == 1 || k == 1) dp(i)(j) += dp(i - 1)(k)\n                }\n           \
    \ }\n        }\n        var sum = 0L\n        for (i <- 0 to 9) sum += dp(n.toInt)(i)\n\
    \        sum", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i\
    \ - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n)(0) +\
    \ dp(n)(1)", "        var result = 0L\n        for (i <- 1 to 9) {\n         \
    \   result += pow(10, n - 1).toLong\n        }\n        result", "        if (n\
    \ == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n       \
    \ dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n    \
    \        dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n ==\
    \ 1) return 2\n        if (n == 2) return 4\n        var count = 0L\n        for\
    \ (i <- 1 to 9) {\n            count += pow(10, n - 1).toLong\n        }\n   \
    \     count", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        if (n == 2) return 4\n        if (n == 3) return 8\n\
    \        var result = 0L\n        for (i <- 1 to n) {\n            result += pow(10,\
    \ i - 1).toLong\n        }\n        result", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        if (n == 2) return 4\n        if (n == 3)\
    \ return 7\n        var count = 0L\n        for (i <- 1 to 9) {\n            count\
    \ += pow(10, n - 2).toLong * 2\n        }\n        count", "        if (n == 1)\
    \ return 2\n        var count = 0\n        for (i <- 1 to 9) {\n            count\
    \ += pow(10, n - 1).toLong\n        }\n        count", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n\
    \        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        if (n == 2) return 3\n        var result = 0L\n        for (i <- 1 to\
    \ 9) {\n            result += pow(10, n - 1).toLong\n        }\n        result\
    \ += startsOneEnds(n - 1)\n        result", "        if (n == 1) return 2\n  \
    \      var result = 0L\n        for (i <- 1 to n) {\n            result += pow(10,\
    \ i - 1).toLong\n        }\n        result * 2", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        var count = 0L\n        for (i <- 1 to 9) {\n            count += pow(10,\
    \ n - 1).toLong\n        }\n        count", "        var count = 0L\n        for\
    \ (i <- 1 to n) {\n            count += pow(10, i - 1).toLong\n        }\n   \
    \     count", "        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return 2\n        var\
    \ count = 0\n        for (i <- 1 to 9) {\n            count += pow(10, n - 1).toLong\n\
    \        }\n        count", "        // The number of n-digit positive integers\
    \ that start with 1 is\n        // 9 * 10^(n-1). The number of n-digit positive\
    \ integers that end with 1\n        // is 10^(n-1).\n        9 * pow(10, n - 1).toLong\
    \ + pow(10, n - 1).toLong", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1)\
    \ return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        var count = 0\n        for (i <- 1 to 9) {\n            var x = i\n \
    \           var y = i\n            for (j <- 1 until n) {\n                x =\
    \ x * 10 + 1\n                y = y * 10 + 9\n            }\n            count\
    \ += y - x + 1\n        }\n        count", "        if (n == 1) return 2\n   \
    \     if (n == 2) return 4\n        if (n == 3) return 8\n        if (n == 4)\
    \ return 16\n        if (n == 5) return 32\n        if (n == 6) return 64\n  \
    \      if (n == 7) return 128\n        if (n == 8) return 256\n        if (n ==\
    \ 9) return 512\n        if (n == 10) return 1024\n        if (n == 11) return\
    \ 2048\n        if (n == 12) return 4096\n        if (n == 13) return 8192\n \
    \       if (n == 14) return 16384\n        if (n == 15) return 32768\n       \
    \ if (n == 16) return 65536\n        if (n == 17) return 131072\n        if (n\
    \ == 18) return 262144\n        if (n == 19) return 524288\n        if (n == 20)\
    \ return 1048576\n        if (n == 21) return 2097152\n        if (n == 22) return\
    \ 4194304\n        if (n == 23) return 8388608\n        if (n == 24) return 16777216\n\
    \        if (n == 25) return 33554432\n        if (n == 26) return 67108864\n\
    \        if (n == 27) return 134217728\n        if (n == 28) return 268435456\n\
    \        if (n == 29) return 536870912\n        if (n == 30) return 1073741824\n\
    \        if (n == 31) return 2147483648L\n        if (n == 32) return 4294967296L\n\
    \        if (n == 33) return 8589934592L\n        if (n == 34) return 17179869184L\n\
    \        if (n == 35) return 34359738368L\n        if (n == 36) return 68719476736L\n\
    \        if (n == 37) return 137438953472L\n        if (n == 38) return 274877906944L\n\
    \        if (n == 39) return 549755813888L\n        if (n == 40) return 1099511627776L\n\
    \        if (n == 41) return 2199023255552L\n        if (n", "        if (n ==\
    \ 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 9\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) * 10 - dp(i - 1)(1)\n      \
    \      dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n   \
    \     dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        var count = 0\n        for (i <- 1 to 9)\
    \ {\n            var j = i\n            var k = 1\n            while (j <= n)\
    \ {\n                count += pow(10, j - 1).toLong\n                j += 1\n\
    \            }\n        }\n        return count", "        var count = 0L\n  \
    \      for (i <- 1 to 9) {\n            var num = i\n            for (j <- 1 until\
    \ n) {\n                num *= 10\n                num += i\n            }\n \
    \           count += num\n        }\n        count", "        if (n == 1) return\
    \ 2\n        if (n == 2) return 4\n        if (n == 3) return 8\n        val dp\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        dp(2)(0) = 2\n        dp(2)(1) = 2\n        dp(3)(0) = 4\n    \
    \    dp(3)(1) = 4\n        for (i <- 4 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0) + dp(i - 1)(1)\n\
    \        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n\
    \        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n  \
    \      dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) =\
    \ dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n\
    \        dp(n.toInt)(0) + dp(n.toInt)(1)", "        var count = 0L\n        for\
    \ (i <- 1 to n) {\n            count += pow(10, i - 1).toLong\n        }\n   \
    \     count", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        var count\
    \ = 0L\n        for (i <- 1 to n) {\n            count += pow(10, i - 1).toLong\n\
    \        }\n        count", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1)\
    \ return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n\
    \        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n)(0) + dp(n)(1)", "        if (n == 1) return 2\n        var result\
    \ = 0L\n        for (i <- 1 to n) {\n            result += pow(10, i - 1).toLong\n\
    \        }\n        result * 2", "        if (n == 1) return 2\n        val dp\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        if (n == 2) return 4\n        if (n == 3) return 8\n\
    \        if (n == 4) return 16\n        if (n == 5) return 32\n        if (n ==\
    \ 6) return 64\n        if (n == 7) return 128\n        if (n == 8) return 256\n\
    \        if (n == 9) return 512\n        if (n == 10) return 1024\n        if\
    \ (n == 11) return 2048\n        if (n == 12) return 4096\n        if (n == 13)\
    \ return 8192\n        if (n == 14) return 16384\n        if (n == 15) return\
    \ 32768\n        if (n == 16) return 65536\n        if (n == 17) return 131072\n\
    \        if (n == 18) return 262144\n        if (n == 19) return 524288\n    \
    \    if (n == 20) return 1048576\n        if (n == 21) return 2097152\n      \
    \  if (n == 22) return 4194304\n        if (n == 23) return 8388608\n        if\
    \ (n == 24) return 16777216\n        if (n == 25) return 33554432\n        if\
    \ (n == 26) return 67108864\n        if (n == 27) return 134217728\n        if\
    \ (n == 28) return 268435456\n        if (n == 29) return 536870912\n        if\
    \ (n == 30) return 1073741824\n        if (n == 31) return 2147483648L\n     \
    \   if (n == 32) return 4294967296L\n        if (n == 33) return 8589934592L\n\
    \        if (n == 34) return 17179869184L\n        if (n == 35) return 34359738368L\n\
    \        if (n == 36) return 68719476736L\n        if (n == 37) return 137438953472L\n\
    \        if (n == 38) return 274877906944L\n        if (n == 39) return 549755813888L\n\
    \        if (n == 40) return 1099511627776L\n        if (n == 41) return 2199023255552L\n\
    \        if (n", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n       \
    \ dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n    \
    \        dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        def f(n\
    \ : Long) : Long = {\n            if (n == 1) 1\n            else if (n == 2)\
    \ 11\n            else {\n                val m = n / 2\n                val a\
    \ = pow(10, m).toLong\n                val b = pow(10, m - 1).toLong\n       \
    \         val c = pow(10, n - 1).toLong\n                val d = pow(10, n - 2).toLong\n\
    \                val e = pow(10, n - 3).toLong\n                val f = pow(10,\
    \ n - 4).toLong\n                val g = pow(10, n - 5).toLong\n             \
    \   val h = pow(10, n - 6).toLong\n                val i = pow(10, n - 7).toLong\n\
    \                val j = pow(10, n - 8).toLong\n                val k = pow(10,\
    \ n - 9).toLong\n                val l = pow(10, n - 10).toLong\n            \
    \    val m = pow(10, n - 11).toLong\n                val o = pow(10, n - 12).toLong\n\
    \                val p = pow(10, n - 13).toLong\n                val q = pow(10,\
    \ n - 14).toLong\n                val r = pow(10, n - 15).toLong\n           \
    \     val s = pow(10, n - 16).toLong\n                val t = pow(10, n - 17).toLong\n\
    \                val u = pow(10, n - 18).toLong\n                val v = pow(10,\
    \ n - 19).toLong\n                val w = pow(10, n - 20).toLong\n           \
    \     val x = pow(10, n - 21).toLong\n                val y = pow(10, n - 22).toLong\n\
    \                val z = pow(10, n - 23).toLong\n                val aa = pow(10,\
    \ n - 24).toLong\n                val ab = pow(10, n - 25).toLong\n          \
    \      val ac = pow(10, n - 26).toLong\n                val ad = pow(10, n - 27).toLong\n\
    \                val ae = pow(10, n - 28).toLong\n                val af = pow(10,\
    \ n - 29).toLong\n                val", "        // The number of n-digit positive\
    \ integers that start with 1 is\n        // 9 * 10^(n-1). The number of n-digit\
    \ positive integers that end with 1\n        // is 10^(n-1).\n        9 * pow(10,\
    \ n - 1).toLong + pow(10, n - 1).toLong", "        if (n == 1) return 2\n    \
    \    val dp = Array.ofDim[Long](n.toInt, 2)\n        dp(0)(0) = 1\n        dp(0)(1)\
    \ = 1\n        for (i <- 1 until n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt\
    \ - 1)(0) + dp(n.toInt - 1)(1)", "        if (n == 1) return 2\n        if (n\
    \ == 2) return 5\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n       \
    \ dp(0)(0) = 1\n        dp(0)(1) = 1\n        dp(1)(0) = 1\n        dp(1)(1) =\
    \ 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) +\
    \ dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n   \
    \     dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        if (n == 2) return 3\n        if (n == 3) return 5\n\
    \        val dp = Array.ofDim[Long](n.toInt + 1)\n        dp(1) = 2\n        dp(2)\
    \ = 3\n        dp(3) = 5\n        for (i <- 4 to n.toInt) {\n            dp(i)\
    \ = dp(i - 1) + dp(i - 2)\n        }\n        dp(n.toInt)", "        if (n ==\
    \ 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n  \
    \      dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) =\
    \ dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n\
    \        dp(n.toInt)(0) + dp(n.toInt)(1)", "        // The number of n-digit positive\
    \ integers that start with 1 is\n        // 9 * 10^(n-1). The number of n-digit\
    \ positive integers that end with 1\n        // is 10^(n-1).\n        9 * pow(10,\
    \ n - 1).toLong + pow(10, n - 1).toLong", "        if (n == 1) return 2\n    \
    \    var count = 0L\n        for (i <- 1 to 9) {\n            count += pow(10,\
    \ n - 1).toLong\n        }\n        count", "        if (n == 1) return 2\n  \
    \      if (n == 2) return 4\n        var count = 0L\n        for (i <- 1 to 9)\
    \ {\n            count += pow(10, n - 1).toLong\n        }\n        count", " \
    \       var count = 0L\n        for (i <- 1 to 9) {\n            val x = pow(10,\
    \ n - 1).toLong\n            val y = pow(10, n).toLong\n            count += (i\
    \ * x) + (y - x)\n        }\n        count", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        // The number of n-digit positive\
    \ integers that start with 1 is\n        // 9 * 10^(n-1)\n        // The number\
    \ of n-digit positive integers that end with 1 is\n        // 10^(n-1)\n     \
    \   // The number of n-digit positive integers that start or end with 1 is\n \
    \       // 9 * 10^(n-1) + 10^(n-1)\n        // The number of n-digit positive\
    \ integers that start or end with 1 is\n        // 10 * 10^(n-1)\n        10 *\
    \ pow(10, n - 1).toLong", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1)\
    \ return 2\n        val dp = Array.ofDim[Long](n.toInt, 2)\n        dp(0)(0) =\
    \ 1\n        dp(0)(1) = 1\n        for (i <- 1 until n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt - 1)(0) + dp(n.toInt - 1)(1)", "        if (n == 1) return\
    \ 1\n        var result = 0\n        for (i <- 1 to n) {\n            result +=\
    \ pow(10, i - 1).toLong\n        }\n        result", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n\
    \        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        if (n == 2) return 3\n        var result\
    \ = 3L\n        for (i <- 3 to n.toInt) {\n            result = result * 2 + 1\n\
    \        }\n        return result", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        var count = 0\n        for (i <- 1 to 9)\
    \ {\n            val digits = i.toString.toCharArray\n            val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n            dp(0)(0) = 1\n            for (j <- 1 to n) {\n       \
    \         for (k <- 0 to 1) {\n                    for (l <- 0 to 9) {\n     \
    \                   if (k == 0 && l == 0) dp(j)(k) += dp(j - 1)(k)\n         \
    \               else if (k == 0 && l == digits(0)) dp(j)(k) += dp(j - 1)(k)\n\
    \                        else if (k == 1 && l == digits(0)) dp(j)(k) += dp(j -\
    \ 1)(k)\n                        else if (k == 1 && l == digits(1)) dp(j)(k) +=\
    \ dp(j - 1)(k)\n                    }\n                }\n            }\n    \
    \        count += dp(n)(0) + dp(n)(1)\n        }\n        count", "        val\
    \ dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 1\n        var result = 0L\n\
    \        for (i <- 1 to n) {\n            result += pow(10, i - 1).toLong\n  \
    \      }\n        result", "        val dp = Array.ofDim[Long](n + 1, 2)\n   \
    \     dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n      \
    \      dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n\
    \        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return 2\n    \
    \    var count = 0L\n        for (i <- 1 to 9) {\n            val x = pow(10,\
    \ n - 1).toLong\n            val y = pow(10, n - 2).toLong\n            count\
    \ += (x - y) * 2\n        }\n        return count", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i -\
    \ 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n     \
    \   dp(n)(0) + dp(n)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt,\
    \ 2)\n        dp(0)(0) = 0\n        dp(0)(1) = 1\n        for (i <- 1 until n.toInt)\
    \ {\n            dp(i)(0) = dp(i - 1)(0) * 9 + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n.toInt - 1)(0) + dp(n.toInt - 1)(1)",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n  \
    \      dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n     \
    \       dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n\
    \        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n  \
    \      dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) =\
    \ dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n\
    \        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n   \
    \     val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i\
    \ - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n)(0) +\
    \ dp(n)(1)", "        if (n == 1) return 10\n        var count = 0\n        for\
    \ (i <- 1 to 9) {\n            count += pow(10, n - 1).toLong\n        }\n   \
    \     count", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1)\
    \ return 2\n        var result = 0L\n        for (i <- 1 to n) {\n           \
    \ result += pow(10, i - 1).toLong\n        }\n        result * 2", "        if\
    \ (n == 1) return 1\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n    \
    \    dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n \
    \           dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n       \
    \ dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n    \
    \        dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n ==\
    \ 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        var result = 0L\n        for (i <- 1 to n) {\n            result += pow(10,\
    \ i - 1).toLong\n        }\n        result * 2", "        if (n == 1) return 2\n\
    \        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n  \
    \      dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) =\
    \ dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n\
    \        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        // The number of n-digit positive integers that start with 1 is\n     \
    \   // 9 * 10^(n-1). The number of n-digit positive integers that end with 1\n\
    \        // is 10^(n-1).\n        9 * pow(10, n - 1).toLong + pow(10, n - 1).toLong",
  "        if (n == 1) return 2\n        if (n == 2) return 3\n        var result\
    \ = 0L\n        for (i <- 1 to 9) {\n            val x = pow(10, n - 1).toLong\n\
    \            val y = pow(10, n - 2).toLong\n            result += (x - y) * 2\n\
    \        }\n        result", "        if (n == 1) return 1\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        // The number\
    \ of n-digit numbers that start with 1 is 10^(n-1).\n        // The number of\
    \ n-digit numbers that end with 1 is 9 * 10^(n-1).\n        // The number of n-digit\
    \ numbers that start and end with 1 is 9 * 10^(n-2).\n        // The number of\
    \ n-digit numbers that start or end with 1 is 10^(n-1) + 9 * 10^(n-1) - 9 * 10^(n-2).\n\
    \        val start = pow(10, n - 1).toLong\n        val end = 9 * pow(10, n -\
    \ 1).toLong\n        val both = 9 * pow(10, n - 2).toLong\n        start + end\
    \ - both", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1)\
    \ return 2\n        if (n == 2) return 4\n        var result = 0L\n        for\
    \ (i <- 1 to 9) {\n            result += pow(10, n - 1).toLong\n        }\n  \
    \      result", "        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        if (n == 3) return 8\n        var result = 0L\n        for (i <- 1 to\
    \ n) {\n            result += pow(10, i - 1).toLong\n        }\n        result\
    \ * 2", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        else return (pow(10, n - 1).toLong - pow(10, n - 2).toLong) * 2 + startsOneEnds(n\
    \ - 1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt,\
    \ 2)\n        dp(0)(0) = 1\n        dp(0)(1) = 1\n        for (i <- 1 until n.toInt)\
    \ {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n.toInt - 1)(0) + dp(n.toInt - 1)(1)",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return 2\n        val\
    \ dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        var count = 0L\n        for (i <- 1 to n) {\n  \
    \          count += pow(10, i - 1).toLong\n        }\n        count", "      \
    \  val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 2\n        val m = pow(10, n).toLong\n\
    \        val d = pow(10, n - 1).toLong\n        val a = m - d\n        val b =\
    \ d - 1\n        a + b", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 9\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) * 10 - dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "     \
    \   val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n       \
    \ dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        val m = pow(10, n - 1).toLong\n        val\
    \ a = m / 10\n        val b = m - a\n        return a + b", "        if (n ==\
    \ 1) return 2\n        if (n == 2) return 3\n        val dp = Array.fill(n.toInt\
    \ + 1)(0L)\n        dp(1) = 2\n        dp(2) = 3\n        for (i <- 3 to n.toInt)\
    \ {\n            dp(i) = dp(i - 1) + dp(i - 2)\n        }\n        dp(n.toInt)",
  "        var count = 0L\n        for (i <- 1L to n) {\n            count += pow(10,\
    \ i - 1).toLong\n        }\n        count", "        if (n == 1) return 2\n  \
    \      val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        var count = 0L\n        for (i <- 1 to 9) {\n            count += (pow(10,\
    \ n - 1).toLong - pow(10, n - 2).toLong)\n        }\n        count", "       \
    \ if (n == 1) return 2\n        if (n == 2) return 4\n        var result = 0L\n\
    \        for (i <- 1 to 9) {\n            result += pow(10, n - 1).toLong\n  \
    \      }\n        result", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        if (n == 2) return 4\n        if (n == 3) return 8\n\
    \        if (n == 4) return 16\n        if (n == 5) return 32\n        if (n ==\
    \ 6) return 64\n        if (n == 7) return 128\n        if (n == 8) return 256\n\
    \        if (n == 9) return 512\n        if (n == 10) return 1024\n        if\
    \ (n == 11) return 2048\n        if (n == 12) return 4096\n        if (n == 13)\
    \ return 8192\n        if (n == 14) return 16384\n        if (n == 15) return\
    \ 32768\n        if (n == 16) return 65536\n        if (n == 17) return 131072\n\
    \        if (n == 18) return 262144\n        if (n == 19) return 524288\n    \
    \    if (n == 20) return 1048576\n        if (n == 21) return 2097152\n      \
    \  if (n == 22) return 4194304\n        if (n == 23) return 8388608\n        if\
    \ (n == 24) return 16777216\n        if (n == 25) return 33554432\n        if\
    \ (n == 26) return 67108864\n        if (n == 27) return 134217728\n        if\
    \ (n == 28) return 268435456\n        if (n == 29) return 536870912\n        if\
    \ (n == 30) return 1073741824\n        if (n == 31) return 2147483648L\n     \
    \   if (n == 32) return 4294967296L\n        if (n == 33) return 8589934592L\n\
    \        if (n == 34) return 17179869184L\n        if (n == 35) return 34359738368L\n\
    \        if (n == 36) return 68719476736L\n        if (n == 37) return 137438953472L\n\
    \        if (n == 38) return 274877906944L\n        if (n == 39) return 549755813888L\n\
    \        if (n == 40) return 1099511627776L\n        if (n == 41) return 2199023255552L\n\
    \        if (n", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1)\
    \ return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 2\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i - 1)(0) * 9 +\
    \ dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0) + dp(i - 1)(1)\n        }\n\
    \        dp(n)(0) + dp(n)(1)", "        val dp = Array.ofDim[Long](n.toInt + 1,\
    \ 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt)\
    \ {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "     \
    \   val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n       \
    \ dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  var count = 0L\n        for (i <- 1 to 9) {\n            count += pow(10, n\
    \ - 1).toLong\n        }\n        count", "        if (n == 1) return 2\n    \
    \    var count = 0\n        for (i <- 1 to 9) {\n            val x = pow(10, n\
    \ - 1).toLong\n            val y = pow(10, n - 2).toLong\n            count +=\
    \ (x - y) * 2\n        }\n        return count", "        if (n == 1) return 2\n\
    \        if (n == 2) return 4\n        var result = 0L\n        for (i <- 1 to\
    \ 9) {\n            result += pow(10, n - 1).toLong\n        }\n        result",
  "        if (n == 1) return 2\n        var count = 0L\n        for (i <- 1 to n)\
    \ {\n            count += pow(10, i - 1).toLong\n        }\n        count * 2",
  "        var count = 0L\n        for (i <- 1 to n) {\n            count += pow(10,\
    \ i - 1).toLong\n        }\n        count", "        if (n == 1) return 2\n  \
    \      var result = 0L\n        for (i <- 1 to n) result += pow(10, i - 1).toLong\n\
    \        result * 2", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n  \
    \      dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n       \
    \ dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n    \
    \        dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        val m = n - 1\n        val a = pow(10, m).toLong\n\
    \        val b = pow(10, n).toLong\n        val c = pow(10, m - 1).toLong\n  \
    \      val d = pow(10, n - 1).toLong\n        val e = pow(10, m - 2).toLong\n\
    \        val f = pow(10, n - 2).toLong\n        val g = pow(10, m - 3).toLong\n\
    \        val h = pow(10, n - 3).toLong\n        val i = pow(10, m - 4).toLong\n\
    \        val j = pow(10, n - 4).toLong\n        val k = pow(10, m - 5).toLong\n\
    \        val l = pow(10, n - 5).toLong\n        val p = pow(10, m - 6).toLong\n\
    \        val q = pow(10, n - 6).toLong\n        val r = pow(10, m - 7).toLong\n\
    \        val s = pow(10, n - 7).toLong\n        val t = pow(10, m - 8).toLong\n\
    \        val u = pow(10, n - 8).toLong\n        val v = pow(10, m - 9).toLong\n\
    \        val w = pow(10, n - 9).toLong\n        val x = pow(10, m - 10).toLong\n\
    \        val y = pow(10, n - 10).toLong\n        val z = pow(10, m - 11).toLong\n\
    \        val aa = pow(10, n - 11).toLong\n        val ab = pow(10, m - 12).toLong\n\
    \        val ac = pow(10, n - 12).toLong\n        val ad = pow(10, m - 13).toLong\n\
    \        val ae = pow(10, n - 13).toLong\n        val af = pow(10, m - 14).toLong\n\
    \        val ag = pow(10, n - 14).toLong\n        val ah = pow(10, m - 15).toLong\n\
    \        val ai = pow(10, n - 15).toLong\n        val aj = pow(10, m - 16).toLong\n\
    \        val ak = pow(10,", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        var count = 0L\n        for (i <- 1 to 9) {\n      \
    \      var temp = i\n            for (j <- 1 until n) {\n                temp\
    \ *= 10\n                temp += i\n            }\n            count += temp\n\
    \        }\n        count", "        if (n == 1) return 2\n        if (n == 2)\
    \ return 3\n        if (n == 3) return 5\n        if (n == 4) return 8\n     \
    \   if (n == 5) return 13\n        if (n == 6) return 21\n        if (n == 7)\
    \ return 34\n        if (n == 8) return 55\n        if (n == 9) return 89\n  \
    \      if (n == 10) return 144\n        if (n == 11) return 233\n        if (n\
    \ == 12) return 377\n        if (n == 13) return 610\n        if (n == 14) return\
    \ 987\n        if (n == 15) return 1597\n        if (n == 16) return 2584\n  \
    \      if (n == 17) return 4181\n        if (n == 18) return 6765\n        if\
    \ (n == 19) return 10946\n        if (n == 20) return 17711\n        if (n ==\
    \ 21) return 28657\n        if (n == 22) return 46368\n        if (n == 23) return\
    \ 75025\n        if (n == 24) return 121393\n        if (n == 25) return 196418\n\
    \        if (n == 26) return 317811\n        if (n == 27) return 514229\n    \
    \    if (n == 28) return 832040\n        if (n == 29) return 1346269\n       \
    \ if (n == 30) return 2178309\n        if (n == 31) return 3524578\n        if\
    \ (n == 32) return 5702887\n        if (n == 33) return 9227465\n        if (n\
    \ == 34) return 14930352\n        if (n == 35) return 24157817\n        if (n\
    \ == 36) return 39088169\n        if (n == 37) return 63245986\n        if (n\
    \ == 38) return 102334155\n        if (n == 39) return 165580141\n        if (n\
    \ == 40) return 267914296\n        if (n == 41) return 433494437\n        if (n\
    \ == 42) return 701408733\n        if (n == 43) return 1134903170\n        if\
    \ (n == 44) return 1836311903\n        if (n == 45) return 297", "        val\
    \ dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 10\n        var result = 0L\n\
    \        for (i <- 1 to 9) {\n            result += pow(10, n - 1).toLong\n  \
    \      }\n        result"]
stop_tokens:
- "\n    }\n"
