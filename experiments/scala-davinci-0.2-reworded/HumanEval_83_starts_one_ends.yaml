name: HumanEval_83_starts_one_ends
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return the count of the numbers of n-digit\n\
  \    // positive integers that start or end with 1.\n    def startsOneEnds(n : Long)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
  \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
  \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
  \ == (18000l));\n    }\n\n}\n"
completions: ["        // The number of n-digit positive integers that start with\
    \ 1 is\n        // 9 * 10 ^ (n - 1)\n        // The number of n-digit positive\
    \ integers that end with 1 is\n        // 10 ^ (n - 1)\n        // The number\
    \ of n-digit positive integers that start and end with 1 is\n        // 9 * 10\
    \ ^ (n - 2)\n        // The number of n-digit positive integers that start or\
    \ end with 1 is\n        // 9 * 10 ^ (n - 1) + 10 ^ (n - 1) - 9 * 10 ^ (n - 2)\n\
    \        9 * pow(10, n - 1).toLong + pow(10, n - 1).toLong - 9 * pow(10, n - 2).toLong",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n  \
    \      dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n     \
    \       dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        if (n == 2) return 4\n        if (n == 3)\
    \ return 8\n        var count = 0\n        for (i <- 1 to 9) {\n            count\
    \ += pow(10, n - 2).toLong\n        }\n        count", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        var count = 0L\n        for (i <- 1 to 9) {\n            count += pow(10,\
    \ n - 1).toLong\n        }\n        count", "        if (n == 1) return 2\n  \
    \      val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i\
    \ - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n)(0) +\
    \ dp(n)(1)", "        if (n == 1) return 2\n        val m = pow(10, n - 1).toLong\n\
    \        val p = pow(10, n).toLong\n        val q = pow(10, n - 2).toLong\n  \
    \      val r = pow(10, n - 1).toLong\n        return (p - m) + (r - q)", "   \
    \     if (n == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n   \
    \     dp(1)(0) = 0\n        dp(1)(1) = 2\n        for (i <- 2 to n) {\n      \
    \      dp(i)(0) = dp(i - 1)(0) * 9 + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n        }\n        dp(n)(0) + dp(n)(1)", "        if\
    \ (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n    \
    \    dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n \
    \           dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 9\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ * 10 - dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n      \
    \  dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n        var\
    \ count = 0\n        for (i <- 1 to 9) {\n            val s = i.toString\n   \
    \         val t = (i + 1).toString\n            val u = (i - 1).toString\n   \
    \         if (i != 9) count += s.toLong * pow(10, n - 1).toLong\n            if\
    \ (i != 1) count += u.toLong * pow(10, n - 1).toLong\n            count += t.toLong\
    \ * pow(10, n - 2).toLong\n        }\n        count", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) 1\n        else if (n == 2) 21\n   \
    \     else {\n            val dp = Array.fill(n.toInt + 1)(0L)\n            dp(1)\
    \ = 1\n            dp(2) = 21\n            for (i <- 3 to n.toInt) {\n       \
    \         dp(i) = dp(i - 1) * 9 + dp(i - 2) * 10\n            }\n            dp(n.toInt)\n\
    \        }", "        if (n == 1) return 2\n        if (n == 2) return 3\n   \
    \     val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = 2\n        dp(2) =\
    \ 3\n        for (i <- 3 to n.toInt) {\n            dp(i) = dp(i - 1) + dp(i -\
    \ 2)\n        }\n        dp(n.toInt)", "        if (n == 1) return 2\n       \
    \ if (n == 2) return 4\n        var a = 2\n        var b = 4\n        for (i <-\
    \ 3 to n.toInt) {\n            val c = a + b\n            a = b\n            b\
    \ = c\n        }\n        b", "        if (n == 1) return 2\n        val dp =\
    \ Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) =\
    \ 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) +\
    \ dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n   \
    \     dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)"]
stop_tokens:
- "\n    }\n"
