name: HumanEval_106_f
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Implement the function f that takes n as a parameter,\n    // and returns\
  \ a list of size n, such that the value of the element at index i is the factorial\
  \ of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    //\
  \ i starts from 1.\n    // the factorial of i is the multiplication of the numbers\
  \ from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n    def f(n : Long) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n \
  \   assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
completions: ["        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list = list :+ (1 to i).product\n            } else {\n               \
    \ list = list :+ (1 to i).sum\n            }\n        }\n        list", "    \
    \    // Write your code here\n        var result = List[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+ (1 to i).foldLeft(1l)(_\
    \ * _)\n            else result = result :+ (1 to i).foldLeft(0l)(_ + _)\n   \
    \     }\n        result", "        // Write your code here\n        var l = new\
    \ ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n            if (i % 2 ==\
    \ 0) l += factorial(i)\n            else l += sum(i)\n        }\n        l.toList",
  "        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n        \
    \    if (i % 2 == 0) result = result :+ factorial(i)\n            else result\
    \ = result :+ sum(i)\n        }\n        result", "        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n\
    \            else result += sum(i)\n        }\n        result.toList", "     \
    \   // Write your code here\n        var result = List[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+ factorial(i)\n\
    \            else result = result :+ sum(i)\n        }\n        result", "   \
    \     // Write your code here\n        var result = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                result = result :+ factorial\n           \
    \ } else {\n                var sum = 0\n                for (j <- 1 to i) {\n\
    \                    sum += j\n                }\n                result = result\
    \ :+ sum\n            }\n        }\n        result", "        // Write your code\
    \ here\n        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n\
    \            if (i % 2 == 0) {\n                result = result :+ (1 to i).product\n\
    \            } else {\n                result = result :+ (1 to i).sum\n     \
    \       }\n        }\n        result", "        val l = new ListBuffer[Long]\n\
    \        for (i <- 1l to n) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList", "        // Write\
    \ your code here\n        return List[Long]()", "        // Write your code here\n\
    \        var result = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                result += (1 to i).product\n\
    \            } else {\n                result += (1 to i).sum\n            }\n\
    \        }\n        result.toList", "        // Write your code here\n       \
    \ var l = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n        \
    \    if (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n       \
    \ }\n        l.toList", "        var result = List[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+ factorial(i)\n\
    \            else result = result :+ sum(i)\n        }\n        result", "   \
    \     var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) l = l :+ factorial(i)\n            else l = l :+ sum(i)\n     \
    \   }\n        l", "        // Write your code here\n        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ factorial(i)\n            else result = result :+ sum(i)\n        }\n   \
    \     result", "        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      l = l :+ (1 to i).reduceLeft(_ * _)\n            } else {\n           \
    \     l = l :+ (1 to i).reduceLeft(_ + _)\n            }\n        }\n        l",
  "        // Write your code here\n        var result = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                result = result :+ factorial\n           \
    \ } else {\n                var sum = 0\n                for (j <- 1 to i) {\n\
    \                    sum += j\n                }\n                result = result\
    \ :+ sum\n            }\n        }\n        result", "        // Write your code\
    \ here\n        var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n    \
    \        if (i % 2 == 0) {\n                l = l :+ (1l to i.toLong).product\n\
    \            } else {\n                l = l :+ (1l to i.toLong).sum\n       \
    \     }\n        }\n        l", "        // Write your code here\n        var\
    \ list = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) list += factorial(i)\n            else list += sum(i)\n       \
    \ }\n        list.toList", "        var l = List[Long]()\n        for (i <- 1l\
    \ to n) {\n            if (i % 2 == 0) {\n                var f = 1l\n       \
    \         for (j <- 1l to i) f *= j\n                l = l :+ f\n            }\
    \ else {\n                var s = 0l\n                for (j <- 1l to i) s +=\
    \ j\n                l = l :+ s\n            }\n        }\n        l", "     \
    \   var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                var factorial = 1\n                for (j <-\
    \ 1 to i) {\n                    factorial *= j\n                }\n         \
    \       list = list :+ factorial\n            } else {\n                var sum\
    \ = 0\n                for (j <- 1 to i) {\n                    sum += j\n   \
    \             }\n                list = list :+ sum\n            }\n        }\n\
    \        list", "        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1l\n     \
    \           for (j <- 1 to i) {\n                    factorial *= j\n        \
    \        }\n                list = list :+ factorial\n            } else {\n \
    \               var sum = 0l\n                for (j <- 1 to i) {\n          \
    \          sum += j\n                }\n                list = list :+ sum\n \
    \           }\n        }\n        list", "        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n\
    \            else result += sum(i)\n        }\n        result.toList", "     \
    \   var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) l = l :+ (1 to i).product\n            else l = l :+ (1 to i).sum\n\
    \        }\n        l", "        // Write your code here\n        var l = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList", "        // Write\
    \ your code here\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                l = l :+ factorial\n            } else {\n        \
    \        var sum = 0\n                for (j <- 1 to i) {\n                  \
    \  sum += j\n                }\n                l = l :+ sum\n            }\n\
    \        }\n        return l", "        var result = new ListBuffer[Long]\n  \
    \      for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n            \
    \    result += (1 to i).product\n            } else {\n                result\
    \ += (1 to i).sum\n            }\n        }\n        result.toList", "       \
    \ var result = List[Long]()\n        for (i <- 1l to n) {\n            if (i %\
    \ 2 == 0) result = result :+ factorial(i)\n            else result = result :+\
    \ sum(i)\n        }\n        result", "        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1l to n) {\n            if (i % 2 == 0) {\n               \
    \ result += (1l to i).product\n            } else {\n                result +=\
    \ (1l to i).sum\n            }\n        }\n        result.toList", "        var\
    \ result = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) result = result :+ factorial(i)\n            else result = result\
    \ :+ sum(i)\n        }\n        result", "        var result = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                result += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ result += sum\n            }\n        }\n        result.toList", "        var\
    \ l = List[Long]()\n        for (i <- 1l to n) {\n            if (i % 2 == 0)\
    \ {\n                var factorial = 1l\n                for (j <- 1l to i) {\n\
    \                    factorial *= j\n                }\n                l = l\
    \ :+ factorial\n            } else {\n                var sum = 0l\n         \
    \       for (j <- 1l to i) {\n                    sum += j\n                }\n\
    \                l = l :+ sum\n            }\n        }\n        return l", " \
    \       // Write your code here\n        val list = new ListBuffer[Long]\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n             \
    \   list += factorial(i)\n            } else {\n                list += sum(i)\n\
    \            }\n        }\n        list.toList", "        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      l = l :+ factorial(i)\n            } else {\n                l = l :+ sum(i)\n\
    \            }\n        }\n        l", "        var list = List[Long]()\n    \
    \    for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n              \
    \  list = list :+ factorial(i)\n            } else {\n                list = list\
    \ :+ sum(i)\n            }\n        }\n        list", "        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ factorial(i)\n\
    \            else l = l :+ sum(i)\n        }\n        l", "        // Write your\
    \ code here\n        var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n\
    \            if (i % 2 == 0) {\n                l = l :+ (1 to i).product\n  \
    \          } else {\n                l = l :+ (1 to i).sum\n            }\n  \
    \      }\n        l", "        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) l = l :+ (1 to i).product\n            else l\
    \ = l :+ (1 to i).sum\n        }\n        l", "        // Write your code here\n\
    \        var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                var f = 1\n                for (j <- 1 to\
    \ i) {\n                    f *= j\n                }\n                l = l :+\
    \ f.toLong\n            } else {\n                var s = 0\n                for\
    \ (j <- 1 to i) {\n                    s += j\n                }\n           \
    \     l = l :+ s.toLong\n            }\n        }\n        return l", "      \
    \  // Write your code here\n        var list = List[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                list = list\
    \ :+ (1 to i).foldLeft(1L)(_ * _)\n            } else {\n                list\
    \ = list :+ (1 to i).sum\n            }\n        }\n        list", "        var\
    \ result = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) result = result :+ factorial(i)\n            else result = result\
    \ :+ sum(i)\n        }\n        result", "        val l = new ListBuffer[Long]\n\
    \        for (i <- 1l to n) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList", "        var l =\
    \ List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0)\
    \ {\n                var f = 1\n                for (j <- 1 to i) f *= j\n   \
    \             l = l :+ f.toLong\n            } else {\n                var s =\
    \ 0\n                for (j <- 1 to i) s += j\n                l = l :+ s.toLong\n\
    \            }\n        }\n        l", "        // Write your code here\n    \
    \    var l = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n         \
    \   if (i % 2 == 0) {\n                l += (1 to i).product\n            } else\
    \ {\n                l += (1 to i).sum\n            }\n        }\n        l.toList",
  "        // Write your code here\n        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                result += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ result += sum\n            }\n        }\n        result.toList", "        //\
    \ Write your code here\n        var result = List[Long]()\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                result = result :+ factorial\n           \
    \ } else {\n                var sum = 0\n                for (j <- 1 to i) {\n\
    \                    sum += j\n                }\n                result = result\
    \ :+ sum\n            }\n        }\n        result", "        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result = result :+ (1 to i).product\n            } else {\n           \
    \     result = result :+ (1 to i).sum\n            }\n        }\n        result",
  "        // Write your code here\n        var result = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                result\
    \ = result :+ (1 to i).product\n            } else {\n                result =\
    \ result :+ (1 to i).sum\n            }\n        }\n        result", "       \
    \ val list = new ListBuffer[Long]\n        for (i <- 1l to n) {\n            if\
    \ (i % 2 == 0) {\n                var factorial = 1l\n                for (j <-\
    \ 1l to i) factorial *= j\n                list += factorial\n            }\n\
    \            else {\n                var sum = 0l\n                for (j <- 1l\
    \ to i) sum += j\n                list += sum\n            }\n        }\n    \
    \    list.toList", "        // Write your code here\n        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result = result :+ (1 to i).product\n            } else {\n           \
    \     result = result :+ (1 to i).sum\n            }\n        }\n        result",
  "        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n        \
    \    if (i % 2 == 0) result = result :+ factorial(i)\n            else result\
    \ = result :+ sum(i)\n        }\n        result", "        // Write your code\
    \ here\n        var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n \
    \           if (i % 2 == 0) {\n                var factorial = 1\n           \
    \     for (j <- 1 to i) {\n                    factorial *= j\n              \
    \  }\n                list = list :+ factorial\n            } else {\n       \
    \         var sum = 0\n                for (j <- 1 to i) {\n                 \
    \   sum += j\n                }\n                list = list :+ sum\n        \
    \    }\n        }\n        return list", "        var l = List[Long]()\n     \
    \   for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1 to i).product\n\
    \            else l = l :+ (1 to i).sum\n        }\n        l", "        // Write\
    \ your code here\n        var lst = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var fact = 1\n           \
    \     for (j <- 1 to i) {\n                    fact *= j\n                }\n\
    \                lst = lst :+ fact.toLong\n            } else {\n            \
    \    var sum = 0\n                for (j <- 1 to i) {\n                    sum\
    \ += j\n                }\n                lst = lst :+ sum.toLong\n         \
    \   }\n        }\n        return lst", "        var result = List[Long]()\n  \
    \      for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ factorial(i)\n            else result = result :+ sum(i)\n        }\n   \
    \     result", "        // Write your code here\n        var l = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList", "        // Write\
    \ your code here\n        val list = ListBuffer[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                list += factorial(i)\n\
    \            } else {\n                list += sum(i)\n            }\n       \
    \ }\n        list.toList", "        var l = List[Long]()\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1 to i).product\n     \
    \       else l = l :+ (1 to i).sum\n        }\n        l", "        // Write your\
    \ code here\n        var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n\
    \            if (i % 2 == 0) {\n                var fact = 1\n               \
    \ for (j <- 1 to i) {\n                    fact *= j\n                }\n    \
    \            l = l :+ fact\n            } else {\n                var sum = 0\n\
    \                for (j <- 1 to i) {\n                    sum += j\n         \
    \       }\n                l = l :+ sum\n            }\n        }\n        return\
    \ l", "        // Write your code here\n        var l = List[Long]()\n       \
    \ for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var\
    \ fact = 1\n                for (j <- 1 to i) {\n                    fact *= j\n\
    \                }\n                l = l :+ fact\n            } else {\n    \
    \            var sum = 0\n                for (j <- 1 to i) {\n              \
    \      sum += j\n                }\n                l = l :+ sum\n           \
    \ }\n        }\n        return l", "        var l = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ factorial(i)\n \
    \           else l = l :+ sum(i)\n        }\n        l", "        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1 to\
    \ i).product\n            else l = l :+ (1 to i).sum\n        }\n        l", " \
    \       var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) l = l :+ (1l to i.toLong).product\n            else l = l :+ (1l\
    \ to i.toLong).sum\n        }\n        l", "        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                result += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ result += sum\n            }\n        }\n        result.toList", "        var\
    \ l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 ==\
    \ 0) {\n                var fact = 1\n                for (j <- 1 to i) fact *=\
    \ j\n                l = l :+ fact\n            }\n            else {\n      \
    \          var sum = 0\n                for (j <- 1 to i) sum += j\n         \
    \       l = l :+ sum\n            }\n        }\n        l", "        // Write\
    \ your code here\n        var result = ListBuffer[Long]()\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                result += factorial\n            } else {\n\
    \                var sum = 0\n                for (j <- 1 to i) {\n          \
    \          sum += j\n                }\n                result += sum\n      \
    \      }\n        }\n        result.toList", "        var l = List[Long]()\n \
    \       for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ factorial(i)\n\
    \            else l = l :+ sum(i)\n        }\n        l", "        var result\
    \ = new ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) result += factorial(i)\n            else result += sum(i)\n      \
    \  }\n        result.toList", "        val l = new ListBuffer[Long]\n        for\
    \ (i <- 1l to n) {\n            if (i % 2 == 0) l += factorial(i)\n          \
    \  else l += sum(i)\n        }\n        l.toList", "        // Write your code\
    \ here\n        var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n \
    \           if (i % 2 == 0) {\n                var factorial = 1\n           \
    \     for (j <- 1 to i) {\n                    factorial *= j\n              \
    \  }\n                list = list :+ factorial\n            } else {\n       \
    \         var sum = 0\n                for (j <- 1 to i) {\n                 \
    \   sum += j\n                }\n                list = list :+ sum\n        \
    \    }\n        }\n        list", "        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n\
    \            else result += sum(i)\n        }\n        result.toList", "     \
    \   // Write your code here\n        var result = ListBuffer[Long]()\n       \
    \ for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                result\
    \ += (1 to i).product\n            } else {\n                result += (1 to i).sum\n\
    \            }\n        }\n        result.toList", "        // Write your code\
    \ here\n        var result = List[Long]()\n        for (i <- 1l to n) {\n    \
    \        if (i % 2 == 0) {\n                result = result :+ (1l to i).product\n\
    \            } else {\n                result = result :+ (1l to i).sum\n    \
    \        }\n        }\n        result", "        var l = List[Long]()\n      \
    \  for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var\
    \ fact = 1l\n                for (j <- 1 to i) {\n                    fact *=\
    \ j\n                }\n                l = l :+ fact\n            } else {\n\
    \                var sum = 0l\n                for (j <- 1 to i) {\n         \
    \           sum += j\n                }\n                l = l :+ sum\n      \
    \      }\n        }\n        return l", "        var l = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList", "        // Write\
    \ your code here\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) l = l :+ factorial(i)\n            else l = l\
    \ :+ sum(i)\n        }\n        l", "        var l = List[Long]()\n        for\
    \ (i <- 1l to n) {\n            if (i % 2 == 0) {\n                l = l :+ (1l\
    \ to i).product\n            } else {\n                l = l :+ (1l to i).sum\n\
    \            }\n        }\n        l", "        // Write your code here\n    \
    \    val list = new ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n    \
    \        if (i % 2 == 0) {\n                list += (1 to i).product\n       \
    \     } else {\n                list += (1 to i).sum\n            }\n        }\n\
    \        list.toList", "        var result = new ListBuffer[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result += (1l to i).product\n\
    \            else result += (1l to i).sum\n        }\n        result.toList",
  "        // Write your code here\n        var result = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1l\n                for (j <- 1 to i) {\n                    factorial *=\
    \ j\n                }\n                result = result :+ factorial\n       \
    \     } else {\n                var sum = 0l\n                for (j <- 1 to i)\
    \ {\n                    sum += j\n                }\n                result =\
    \ result :+ sum\n            }\n        }\n        result", "        var list\
    \ = new ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) list += factorial(i)\n            else list += sum(i)\n        }\n\
    \        list.toList", "        val l = ListBuffer[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n           \
    \ else l += sum(i)\n        }\n        l.toList", "        // Write your code\
    \ here\n        var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n    \
    \        if (i % 2 == 0) l = l :+ (1 to i).product\n            else l = l :+\
    \ (1 to i).sum\n        }\n        l", "        var result = List[Long]()\n  \
    \      for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 to i).product\n            else result = result :+ (1 to i).sum\n    \
    \    }\n        result", "        // Write your code here\n        var l = new\
    \ ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2\
    \ == 0) l += factorial(i)\n            else l += sum(i)\n        }\n        l.toList",
  "        // Write your code here\n        // Return the list of Long\n        var\
    \ result = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n       \
    \     if (i % 2 == 0) result += factorial(i)\n            else result += sum(i)\n\
    \        }\n        result.toList", "        // Write your code here\n       \
    \ var l = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                var p = 1\n                for (j <- 1 to i)\
    \ {\n                    p *= j\n                }\n                l += p\n \
    \           } else {\n                var p = 0\n                for (j <- 1 to\
    \ i) {\n                    p += j\n                }\n                l += p\n\
    \            }\n        }\n        l.toList", "        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ factorial(i)\n\
    \            else l = l :+ sum(i)\n        }\n        l", "        var l = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList", "        // Write\
    \ your code here\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                l = l :+ factorial(i)\n  \
    \          } else {\n                l = l :+ sum(i)\n            }\n        }\n\
    \        l", "        // Write your code here\n        var l = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList", "        // Write\
    \ your code here\n        var result = new ListBuffer[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1l\n                for (j <- 1 to i) factorial *= j\n                result\
    \ += factorial\n            }\n            else {\n                var sum = 0l\n\
    \                for (j <- 1 to i) sum += j\n                result += sum\n \
    \           }\n        }\n        result.toList", "        // Write your code\
    \ here\n        var result = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                result += factorial\n            } else {\n       \
    \         var sum = 0\n                for (j <- 1 to i) {\n                 \
    \   sum += j\n                }\n                result += sum\n            }\n\
    \        }\n        result.toList", "        // Write your code here\n       \
    \ var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i %\
    \ 2 == 0) l = l :+ factorial(i)\n            else l = l :+ sum(i)\n        }\n\
    \        l", "        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list = list :+ (1l to i.toLong).product\n            } else {\n       \
    \         list = list :+ (1l to i.toLong).sum\n            }\n        }\n    \
    \    list", "        val list = new ListBuffer[Long]\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) list += factorial(i)\n            else list +=\
    \ sum(i)\n        }\n        list.toList", "        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 to i).foldLeft(1l)(_ * _)\n            else result = result :+ (1 to i).sum\n\
    \        }\n        result", "        var l = List[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var fact = 1\n\
    \                for (j <- 1 to i) fact *= j\n                l = l :+ fact\n\
    \            }\n            else {\n                var sum = 0\n            \
    \    for (j <- 1 to i) sum += j\n                l = l :+ sum\n            }\n\
    \        }\n        l", "        var result = List[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                result = result :+ factorial\n           \
    \ } else {\n                var sum = 0\n                for (j <- 1 to i) {\n\
    \                    sum += j\n                }\n                result = result\
    \ :+ sum\n            }\n        }\n        return result", "        // Write\
    \ your code here\n        var l = ListBuffer[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n\
    \        }\n        l.toList", "        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                result += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ result += sum\n            }\n        }\n        result.toList", "        val\
    \ l = new ListBuffer[Long]\n        for (i <- 1l to n) {\n            if (i %\
    \ 2 == 0) l += factorial(i)\n            else l += sum(i)\n        }\n       \
    \ l.toList", "        var result = new ListBuffer[Long]()\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n        \
    \    else result += sum(i)\n        }\n        result.toList", "        // Write\
    \ your code here\n        var result = new ListBuffer[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1l\n                for (j <- 1 to i) {\n                    factorial *=\
    \ j\n                }\n                result += factorial\n            } else\
    \ {\n                var sum = 0l\n                for (j <- 1 to i) {\n     \
    \               sum += j\n                }\n                result += sum\n \
    \           }\n        }\n        result.toList", "        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1 to\
    \ i).product\n            else l = l :+ (1 to i).sum\n        }\n        l", " \
    \       var l = List[Long]()\n        for (i <- 1l to n) {\n            if (i\
    \ % 2 == 0) l = l :+ (1l to i).product\n            else l = l :+ (1l to i).sum\n\
    \        }\n        l", "        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      l = l :+ (1 to i).product\n            } else {\n                l = l\
    \ :+ (1 to i).sum\n            }\n        }\n        l", "        // Write your\
    \ code here\n        var result = new ListBuffer[Long]()\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) {\n                result += factorial(i)\n\
    \            } else {\n                result += sum(i)\n            }\n     \
    \   }\n        result.toList", "        // Write your code here\n        var l\
    \ = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 ==\
    \ 0) {\n                l = l :+ (1 to i).product\n            } else {\n    \
    \            l = l :+ (1 to i).sum\n            }\n        }\n        l", "  \
    \      var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n        \
    \    if (i % 2 == 0) result = result :+ (1 to i).product\n            else result\
    \ = result :+ (1 to i).sum\n        }\n        result", "        // Write your\
    \ code here\n        var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n\
    \            if (i % 2 == 0) l = l :+ factorial(i)\n            else l = l :+\
    \ sum(i)\n        }\n        l", "        var list = new ListBuffer[Long]\n  \
    \      for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n            \
    \    list += (1 to i).product\n            } else {\n                list += (1\
    \ to i).sum\n            }\n        }\n        list.toList", "        // Write\
    \ your code here\n        var list = List[Long]()\n        for (i <- 1l to n)\
    \ {\n            if (i % 2 == 0) {\n                var fact = 1l\n          \
    \      for (j <- 1l to i) {\n                    fact *= j\n                }\n\
    \                list = list :+ fact\n            } else {\n                var\
    \ sum = 0l\n                for (j <- 1l to i) {\n                    sum += j\n\
    \                }\n                list = list :+ sum\n            }\n      \
    \  }\n        list", "        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1l to n) {\n            if (i % 2 == 0) l = l :+ (1l to i).product\n\
    \            else l = l :+ (1l to i).sum\n        }\n        l", "        var\
    \ result = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ % 2 == 0) result = result :+ factorial(i)\n            else result = result\
    \ :+ sum(i)\n        }\n        result", "        // Write your code here\n  \
    \      var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                l = l :+ (1 to i).product\n            } else\
    \ {\n                l = l :+ (1 to i).sum\n            }\n        }\n       \
    \ l", "        // Write your code here\n        var list = List[Long]()\n    \
    \    for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n              \
    \  list = list :+ factorial(i)\n            } else {\n                list = list\
    \ :+ sum(i)\n            }\n        }\n        list", "        var l = List[Long]()\n\
    \        for (i <- 1l to n) {\n            if (i % 2 == 0) {\n               \
    \ l = l :+ (1l to i).product\n            } else {\n                l = l :+ (1l\
    \ to i).sum\n            }\n        }\n        l", "        // Write your code\
    \ here\n        val l = new ListBuffer[Long]\n        for (i <- 1l to n) {\n \
    \           if (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n\
    \        }\n        l.toList", "        // Write your code here\n        var l\
    \ = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 ==\
    \ 0) {\n                l = l :+ (1 to i).foldLeft(1l)(_ * _)\n            } else\
    \ {\n                l = l :+ (1 to i).foldLeft(0l)(_ + _)\n            }\n  \
    \      }\n        l", "        var result = List[Long]()\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) {\n                result = result\
    \ :+ (1 to i).foldLeft(1l)(_ * _)\n            } else {\n                result\
    \ = result :+ (1 to i).sum\n            }\n        }\n        result", "     \
    \   // Write your code here\n        var l = List[Long]()\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) {\n                l = l :+ (1 to\
    \ i).product\n            } else {\n                l = l :+ (1 to i).sum\n  \
    \          }\n        }\n        l", "        val list = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) list += factorial(i)\n\
    \            else list += sum(i)\n        }\n        list.toList", "        var\
    \ list = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n         \
    \   if (i % 2 == 0) list += factorial(i)\n            else list += sum(i)\n  \
    \      }\n        list.toList", "        // Write your code here\n        var\
    \ l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 ==\
    \ 0) {\n                l = l :+ (1 to i).foldLeft(1L)(_ * _)\n            } else\
    \ {\n                l = l :+ (1 to i).sum\n            }\n        }\n       \
    \ l", "        var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n     \
    \       if (i % 2 == 0) {\n                var fact = 1\n                for (j\
    \ <- 1 to i) {\n                    fact *= j\n                }\n           \
    \     l = l :+ fact.toLong\n            } else {\n                var sum = 0\n\
    \                for (j <- 1 to i) {\n                    sum += j\n         \
    \       }\n                l = l :+ sum.toLong\n            }\n        }\n   \
    \     return l", "        // Write your code here\n        var l = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList", "        // Write\
    \ your code here\n        var result = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                result = result :+ factorial\n            } else {\n\
    \                var sum = 0\n                for (j <- 1 to i) {\n          \
    \          sum += j\n                }\n                result = result :+ sum\n\
    \            }\n        }\n        result", "        // Write your code here\n\
    \        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n      \
    \      if (i % 2 == 0) {\n                result = result :+ (1 to i).product\n\
    \            } else {\n                result = result :+ (1 to i).sum\n     \
    \       }\n        }\n        result", "        // Write your code here\n    \
    \    val l = new ListBuffer[Long]\n        for (i <- 1l to n) {\n            if\
    \ (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n        }\n  \
    \      l.toList", "        val list = new ListBuffer[Long]()\n        for (i <-\
    \ 1l to n) {\n            if (i % 2 == 0) {\n                var factorial = 1l\n\
    \                for (j <- 1l to i) {\n                    factorial *= j\n  \
    \              }\n                list += factorial\n            } else {\n  \
    \              var sum = 0l\n                for (j <- 1l to i) {\n          \
    \          sum += j\n                }\n                list += sum\n        \
    \    }\n        }\n        list.toList", "        // Write your code here\n  \
    \      // Return the list of Long\n        var list = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                list += fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                list += sum\n    \
    \        }\n        }\n        list.toList", "        // Write your code here\n\
    \        return List()", "        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      l = l :+ (1 to i).product\n            } else {\n                l = l\
    \ :+ (1 to i).sum\n            }\n        }\n        l", "        // Write your\
    \ code here\n        var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n\
    \            if (i % 2 == 0) l = l :+ factorial(i)\n            else l = l :+\
    \ sum(i)\n        }\n        l", "        val list = new ListBuffer[Long]\n  \
    \      for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) list += factorial(i)\n\
    \            else list += sum(i)\n        }\n        list.toList", "        //\
    \ Write your code here\n        var l = ListBuffer[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                l += factorial(i)\n\
    \            } else {\n                l += sum(i)\n            }\n        }\n\
    \        l.toList", "        // Write your code here\n        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result = result :+ (1 to i).product\n            } else {\n           \
    \     result = result :+ (1 to i).sum\n            }\n        }\n        result",
  "        // Write your code here\n        var result = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                result\
    \ = result :+ (1 to i).product\n            } else {\n                result =\
    \ result :+ (1 to i).sum\n            }\n        }\n        result", "       \
    \ var list = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n     \
    \       if (i % 2 == 0) {\n                var factorial = 1\n               \
    \ for (j <- 1 to i) {\n                    factorial *= j\n                }\n\
    \                list += factorial\n            } else {\n                var\
    \ sum = 0\n                for (j <- 1 to i) {\n                    sum += j\n\
    \                }\n                list += sum\n            }\n        }\n  \
    \      list.toList", "        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      l = l :+ (1 to i).product\n            } else {\n                l = l\
    \ :+ (1 to i).sum\n            }\n        }\n        l", "        var result =\
    \ List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0)\
    \ {\n                var factorial = 1\n                for (j <- 1 to i) factorial\
    \ *= j\n                result = result :+ factorial\n            }\n        \
    \    else {\n                var sum = 0\n                for (j <- 1 to i) sum\
    \ += j\n                result = result :+ sum\n            }\n        }\n   \
    \     result", "        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      l = l :+ (1 to i).product\n            } else {\n                l = l\
    \ :+ (1 to i).sum\n            }\n        }\n        l", "        def factorial(n\
    \ : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n\
    \ - 1)\n        }\n        def sum(n : Long) : Long = {\n            if (n ==\
    \ 0) 0\n            else n + sum(n - 1)\n        }\n        def g(n : Long) :\
    \ Long = {\n            if (n % 2 == 0) factorial(n)\n            else sum(n)\n\
    \        }\n        def h(n : Long, acc : List[Long]) : List[Long] = {\n     \
    \       if (n == 0) acc\n            else h(n - 1, g(n) :: acc)\n        }\n \
    \       h(n, List())", "        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) l = l :+ factorial(i)\n            else l = l\
    \ :+ sum(i)\n        }\n        l", "        // Write your code here\n       \
    \ val l = new ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n          \
    \  if (i % 2 == 0) {\n                l += (1 to i).product\n            } else\
    \ {\n                l += (1 to i).sum\n            }\n        }\n        l.toList",
  "        // Write your code here\n        var list = List[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                list = list\
    \ :+ factorial(i)\n            } else {\n                list = list :+ sum(i)\n\
    \            }\n        }\n        list", "        val list = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) list += factorial(i)\n\
    \            else list += sum(i)\n        }\n        list.toList", "        var\
    \ list = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i %\
    \ 2 == 0) {\n                list = list :+ (1 to i).product\n            } else\
    \ {\n                list = list :+ (1 to i).sum\n            }\n        }\n \
    \       list", "        var result = new ListBuffer[Long]\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n        \
    \    else result += sum(i)\n        }\n        result.toList", "        // Write\
    \ your code here\n        var l = List[Long]()\n        for (i <- 1l to n) {\n\
    \            if (i % 2 == 0) {\n                var fact = 1l\n              \
    \  for (j <- 1l to i) {\n                    fact *= j\n                }\n  \
    \              l = l :+ fact\n            } else {\n                var sum =\
    \ 0l\n                for (j <- 1l to i) {\n                    sum += j\n   \
    \             }\n                l = l :+ sum\n            }\n        }\n    \
    \    return l", "        var l = ListBuffer[Long]()\n        for (i <- 1l to n)\
    \ {\n            if (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n\
    \        }\n        l.toList", "        // Write your code here\n        var l\
    \ = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i %\
    \ 2 == 0) l += factorial(i)\n            else l += sum(i)\n        }\n       \
    \ l.toList", "        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      l = l :+ (1 to i).product\n            } else {\n                l = l\
    \ :+ (1 to i).sum\n            }\n        }\n        l", "        var l = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList", "        // Write\
    \ your code here\n        val l = new ListBuffer[Long]\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                l += (1 to i).product\n\
    \            } else {\n                l += (1 to i).sum\n            }\n    \
    \    }\n        l.toList", "        var list = new ListBuffer[Long]()\n      \
    \  for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var\
    \ fact = 1\n                for (j <- 1 to i) {\n                    fact *= j\n\
    \                }\n                list += fact\n            } else {\n     \
    \           var sum = 0\n                for (j <- 1 to i) {\n               \
    \     sum += j\n                }\n                list += sum\n            }\n\
    \        }\n        list.toList", "        var l = List[Long]()\n        for (i\
    \ <- 1l to n) {\n            if (i % 2 == 0) l = l :+ (1l to i).product\n    \
    \        else l = l :+ (1l to i).sum\n        }\n        l", "        // Write\
    \ your code here\n        var result = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                result = result :+ (1 to i).product\n\
    \            } else {\n                result = result :+ (1 to i).sum\n     \
    \       }\n        }\n        result", "        var l = ListBuffer[Long]()\n \
    \       for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList", "        var result\
    \ = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) result += factorial(i)\n            else result += sum(i)\n   \
    \     }\n        result.toList", "        // Write your code here\n        var\
    \ result = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n           \
    \ if (i % 2 == 0) {\n                result += factorial(i)\n            } else\
    \ {\n                result += sum(i)\n            }\n        }\n        result.toList",
  "        // Write your code here\n        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n\
    \            else result += sum(i)\n        }\n        result.toList", "     \
    \   var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                list = list :+ (1 to i).product\n          \
    \  } else {\n                list = list :+ (1 to i).sum\n            }\n    \
    \    }\n        list", "        // Write your code here\n        var result =\
    \ List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0)\
    \ {\n                result = result :+ (1 to i).reduceLeft(_ * _)\n         \
    \   } else {\n                result = result :+ (1 to i).reduceLeft(_ + _)\n\
    \            }\n        }\n        result", "        // Write your code here\n\
    \        var result = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                result += factorial\n            } else {\n       \
    \         var sum = 0\n                for (j <- 1 to i) {\n                 \
    \   sum += j\n                }\n                result += sum\n            }\n\
    \        }\n        result.toList", "        var list = ListBuffer[Long]()\n \
    \       for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n           \
    \     list += (1 to i).product\n            } else {\n                list +=\
    \ (1 to i).sum\n            }\n        }\n        list.toList", "        // Write\
    \ your code here\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) l = l :+ (1 to i).product\n            else l\
    \ = l :+ (1 to i).sum\n        }\n        l", "        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) list = list :+\
    \ factorial(i)\n            else list = list :+ sum(i)\n        }\n        list",
  "        // Write your code here\n        var list = new ListBuffer[Long]\n    \
    \    for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n              \
    \  var factorial = 1\n                for (j <- 1 to i) {\n                  \
    \  factorial *= j\n                }\n                list += factorial\n    \
    \        } else {\n                var sum = 0\n                for (j <- 1 to\
    \ i) {\n                    sum += j\n                }\n                list\
    \ += sum\n            }\n        }\n        list.toList", "        // Write your\
    \ code here\n        var result = new ListBuffer[Long]()\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) {\n                result += (1 to\
    \ i).product\n            } else {\n                result += (1 to i).sum\n \
    \           }\n        }\n        result.toList", "        // Write your code\
    \ here\n        var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n    \
    \        if (i % 2 == 0) l = l :+ factorial(i)\n            else l = l :+ sum(i)\n\
    \        }\n        l", "        var result = List[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+ (1 to i).product\n\
    \            else result = result :+ (1 to i).sum\n        }\n        result",
  "        var l = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n       \
    \     if (i % 2 == 0) l += factorial(i)\n            else l += sum(i)\n      \
    \  }\n        l.toList", "        var l = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) l = l :+ factorial(i)\n            else\
    \ l = l :+ sum(i)\n        }\n        l", "        // Write your code here\n \
    \       var l = ListBuffer[Long]()\n        for (i <- 1l to n) {\n           \
    \ if (i % 2 == 0) {\n                var f = 1l\n                for (j <- 1l\
    \ to i) {\n                    f *= j\n                }\n                l +=\
    \ f\n            } else {\n                var s = 0l\n                for (j\
    \ <- 1l to i) {\n                    s += j\n                }\n             \
    \   l += s\n            }\n        }\n        l.toList", "        // Write your\
    \ code here\n        return List[Long]()", "        var l = List[Long]()\n   \
    \     for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ factorial(i)\n\
    \            else l = l :+ sum(i)\n        }\n        l", "        var result\
    \ = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 ==\
    \ 0) result = result :+ (1 to i).foldLeft(1l)(_ * _)\n            else result\
    \ = result :+ (1 to i).foldLeft(0l)(_ + _)\n        }\n        result", "    \
    \    var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) list = list :+ factorial(i)\n            else list = list :+ sum(i)\n\
    \        }\n        list", "        var result = List[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result :+ factorial(i)\n\
    \            else result = result :+ sum(i)\n        }\n        result", "   \
    \     var l = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) l = l :+ (1 to i).product\n            else l = l :+ (1 to i).sum\n\
    \        }\n        l", "        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      l = l :+ (1 to i).product\n            } else {\n                l = l\
    \ :+ (1 to i).sum\n            }\n        }\n        l", "        // Write your\
    \ code here\n        return null", "        var list = List[Long]()\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) list = list :+ factorial(i)\n\
    \            else list = list :+ sum(i)\n        }\n        list", "        //\
    \ Write your code here\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) l = l :+ factorial(i)\n            else l = l\
    \ :+ (1 to i).sum\n        }\n        l", "        def factorial(n : Long) : Long\
    \ = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n    \
    \    }\n        def sum(n : Long) : Long = {\n            if (n == 0) 0\n    \
    \        else n + sum(n - 1)\n        }\n        def f(n : Long, i : Long) : List[Long]\
    \ = {\n            if (i == n) List()\n            else if (i % 2 == 0) factorial(i)\
    \ :: f(n, i + 1)\n            else sum(i) :: f(n, i + 1)\n        }\n        f(n,\
    \ 1)", "        // Write your code here\n        var l = List[Long]()\n      \
    \  for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1l to i.toLong).product\n\
    \            else l = l :+ (1l to i.toLong).sum\n        }\n        l", "    \
    \    // Write your code here\n        var list = List[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                list = list\
    \ :+ (1 to i).product\n            } else {\n                list = list :+ (1\
    \ to i).sum\n            }\n        }\n        list", "        // Write your code\
    \ here\n        var list = List[Long]()\n        for (i <- 1 to n.toInt) {\n \
    \           if (i % 2 == 0) {\n                list = list :+ (1 to i).product\n\
    \            } else {\n                list = list :+ (1 to i).sum\n         \
    \   }\n        }\n        list", "        // Write your code here\n        var\
    \ l = new ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i % 2 == 0) {\n                var f = 1l\n                for (j <- 1 to i)\
    \ {\n                    f *= j\n                }\n                l += f\n \
    \           } else {\n                var s = 0l\n                for (j <- 1\
    \ to i) {\n                    s += j\n                }\n                l +=\
    \ s\n            }\n        }\n        l.toList", "        def factorial(n : Long)\
    \ : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n\
    \        }\n        def sum(n : Long) : Long = {\n            if (n == 0) 0\n\
    \            else n + sum(n - 1)\n        }\n        var result = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result += factorial(i)\n\
    \            else result += sum(i)\n        }\n        result.toList", "     \
    \   var l = ListBuffer[Long]()\n        for (i <- 1l to n) {\n            if (i\
    \ % 2 == 0) l += factorial(i)\n            else l += sum(i)\n        }\n     \
    \   l.toList", "        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) list = list :+ factorial(i)\n            else\
    \ list = list :+ sum(i)\n        }\n        list", "        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result = result :+ factorial(i)\n            } else {\n               \
    \ result = result :+ sum(i)\n            }\n        }\n        result", "    \
    \    // Write your code here\n        var l = List[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ factorial(i)\n       \
    \     else l = l :+ sum(i)\n        }\n        l", "        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ factorial(i)\n\
    \            else l = l :+ sum(i)\n        }\n        l", "        // Write your\
    \ code here\n        var result = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                result = result :+ (1 to i).product\n\
    \            } else {\n                result = result :+ (1 to i).sum\n     \
    \       }\n        }\n        result", "        var result = List[Long]()\n  \
    \      for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result = result\
    \ :+ (1 to i).product\n            else result = result :+ (1 to i).sum\n    \
    \    }\n        result", "        def factorial(n : Long) : Long = {\n       \
    \     if (n == 0) 1 else n * factorial(n - 1)\n        }\n        val l = new\
    \ ListBuffer[Long]\n        for (i <- 1 to n.toInt) {\n            if (i % 2 ==\
    \ 0) l += factorial(i) else l += (1 to i).sum\n        }\n        l.toList"]
stop_tokens:
- "\n    }\n"
