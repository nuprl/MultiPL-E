name: HumanEval_59_largest_prime_factor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  \    // >>> largestPrimeFactor((13195l))\n    // (29l)\n    // >>> largestPrimeFactor((2048l))\n\
  \    // (2l)\n    def largestPrimeFactor(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
  \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
  \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
  \ == (29l));\n    }\n\n}\n"
completions: ["        var m = n\n        var i = 2l\n        while (i <= m) {\n \
    \           if (m % i == 0) {\n                m /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        i", "        var i\
    \ = 2l\n        var m = n\n        while (i <= sqrt(m)) {\n            if (m %\
    \ i == 0) {\n                m /= i\n                i -= 1\n            }\n \
    \           i += 1\n        }\n        return m", "        var m = n\n       \
    \ var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          m /= i\n            } else {\n                i += 1\n            }\n\
    \        }\n        i", "        var nn = n\n        var i = 2l\n        while\
    \ (i <= nn) {\n            if (nn % i == 0) {\n                nn /= i\n     \
    \           while (nn % i == 0) nn /= i\n            }\n            i += 1\n \
    \       }\n        i - 1", "        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                m /= i\n        \
    \    } else {\n                i += 1\n            }\n        }\n        i", " \
    \       var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        i", "        var primeFactors =\
    \ List[Long]()\n        var m = n\n        for (i <- 2l to sqrt(n).toLong) {\n\
    \            while (m % i == 0) {\n                primeFactors = i :: primeFactors\n\
    \                m /= i\n            }\n        }\n        if (m > 1) primeFactors\
    \ = m :: primeFactors\n        primeFactors.max", "        var m = n\n       \
    \ var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          m /= i\n            } else {\n                i += 1\n            }\n\
    \        }\n        return i", "        var m = n\n        var i = 2l\n      \
    \  while (i <= m) {\n            if (m % i == 0) {\n                m /= i\n \
    \           } else {\n                i += 1\n            }\n        }\n     \
    \   i", "        var largest = 0l\n        var i = 2l\n        while (i <= n)\
    \ {\n            if (n % i == 0) {\n                largest = i\n            \
    \    n /= i\n            }\n            else i += 1\n        }\n        largest",
  "        var max = 1l\n        var i = 2l\n        while (i <= n) {\n          \
    \  if (n % i == 0) {\n                max = i\n                n /= i\n      \
    \      }\n            else i += 1\n        }\n        max", "        var max =\
    \ 0l\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0)\
    \ {\n                max = i\n                n /= i\n            }\n        \
    \    else i += 1\n        }\n        max", "        var m = n\n        var i =\
    \ 2l\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  m /= i\n            } else {\n                i += 1\n            }\n     \
    \   }\n        i", "        var m = n\n        var i = 2l\n        while (i <=\
    \ m) {\n            if (m % i == 0) {\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        i", "        var\
    \ i = 2l\n        var nn = n\n        while (i <= sqrt(nn)) {\n            if\
    \ (nn % i == 0) {\n                nn /= i\n                i -= 1\n         \
    \   }\n            i += 1\n        }\n        nn", "        val primes = new PrimeGenerator\n\
    \        var p = primes.next\n        var m = n\n        while (m % p != 0) {\n\
    \            p = primes.next\n        }\n        var k = m / p\n        while\
    \ (k % p == 0) {\n            k /= p\n        }\n        if (k == 1) p else largestPrimeFactor(k)",
  "        var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        return i", "        var largest\
    \ = 1l\n        var i = 2l\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest", "        var m = n\n   \
    \     var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n  \
    \              m /= i\n            } else {\n                i += 1\n        \
    \    }\n        }\n        return i", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n == 2) return true\n            if (n % 2 == 0) return\
    \ false\n            val sqrtn = sqrt(n).toLong\n            for (i <- 3l to sqrtn\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var result = 1l\n        var i = 2l\n\
    \        while (i <= n) {\n            if (n % i == 0 && isPrime(i)) {\n     \
    \           result = i\n                n /= i\n            }\n            else\
    \ i += 1\n        }\n        return result", "        var nn = n\n        var\
    \ largest = 0l\n        for (i <- 2l to nn) {\n            if (nn % i == 0) {\n\
    \                largest = i\n                nn /= i\n                while (nn\
    \ % i == 0) nn /= i\n            }\n        }\n        largest", "        var\
    \ largestPrimeFactor = 1l\n        var i = 2l\n        while (i <= n) {\n    \
    \        if (n % i == 0) {\n                largestPrimeFactor = i\n         \
    \       n /= i\n            }\n            else i += 1\n        }\n        largestPrimeFactor",
  "        var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        return i", "        var p = 2l\n\
    \        var nn = n\n        while (p * p <= nn) {\n            if (nn % p ==\
    \ 0) {\n                nn /= p\n            } else {\n                p += 1\n\
    \            }\n        }\n        nn", "        var m = n\n        var i = 2l\n\
    \        while (i <= m) {\n            if (m % i == 0) {\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        return i", "        var m = n\n        var i = 2l\n        while (i <=\
    \ m) {\n            if (m % i == 0) {\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        return i", "  \
    \      var largest = 0l\n        var i = 2l\n        while (i <= n) {\n      \
    \      if (n % i == 0) {\n                largest = i\n                n /= i\n\
    \            }\n            else i += 1\n        }\n        largest", "      \
    \  var largest = 0l\n        var i = 2l\n        while (i <= n) {\n          \
    \  if (n % i == 0) {\n                largest = i\n                n /= i\n  \
    \          }\n            else i += 1\n        }\n        largest", "        var\
    \ m = n\n        var i = 2l\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                m /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        i", "        val primes = new PrimeIterator\n\
    \        var p = primes.next\n        var m = n\n        while (p * p <= m) {\n\
    \            while (m % p == 0) m /= p\n            p = primes.next\n        }\n\
    \        m", "        def largestPrimeFactor(n : Long, i : Long) : Long = {\n\
    \            if (i > n) throw new Exception(\"n is a prime\")\n            else\
    \ if (n % i == 0) {\n                val j = n / i\n                if (j == 1)\
    \ i\n                else if (j % i == 0) largestPrimeFactor(j, i)\n         \
    \       else largestPrimeFactor(n, i + 1)\n            }\n            else largestPrimeFactor(n,\
    \ i + 1)\n        }\n        largestPrimeFactor(n, 2)", "        def largestPrimeFactor(n\
    \ : Long, p : Long) : Long = {\n            if (n % p == 0) largestPrimeFactor(n\
    \ / p, p)\n            else if (p * p > n) n\n            else largestPrimeFactor(n,\
    \ p + 1)\n        }\n        largestPrimeFactor(n, 2)", "        var m = n\n \
    \       var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n            } else {\n                i += 1\n      \
    \      }\n        }\n        return i", "        var n2 = n\n        var factor\
    \ = 2l\n        while (n2 > 1) {\n            if (n2 % factor == 0) {\n      \
    \          n2 /= factor\n                while (n2 % factor == 0) n2 /= factor\n\
    \            }\n            factor += 1\n        }\n        factor", "       \
    \ val primes = new PrimeIterator\n        var p = primes.next\n        var m =\
    \ n\n        while (p * p <= m) {\n            while (m % p == 0) m /= p\n   \
    \         p = primes.next\n        }\n        m", "        var result = 0l\n \
    \       var i = 2l\n        var m = n\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                result = i\n                m /= i\n       \
    \     }\n            else i += 1\n        }\n        result", "        var m =\
    \ n\n        var i = 2l\n        while (i <= m) {\n            if (m % i == 0)\
    \ {\n                m /= i\n                i -= 1\n            }\n         \
    \   i += 1\n        }\n        i", "        var factor = 2l\n        var n2 =\
    \ n\n        while (n2 > 1) {\n            if (n2 % factor == 0) {\n         \
    \       n2 /= factor\n                while (n2 % factor == 0) n2 /= factor\n\
    \            }\n            factor += 1\n        }\n        factor", "       \
    \ var factors = new ListBuffer[Long]\n        var i = 2l\n        var nn = n\n\
    \        while (i <= sqrt(nn)) {\n            if (nn % i == 0) {\n           \
    \     factors += i\n                nn /= i\n            }\n            else i\
    \ += 1\n        }\n        factors += nn\n        factors.max", "        var largestPrimeFactor\
    \ = 1l\n        var i = 2l\n        var nn = n\n        while (i <= nn) {\n  \
    \          if (nn % i == 0) {\n                largestPrimeFactor = i\n      \
    \          nn /= i\n            }\n            else i += 1\n        }\n      \
    \  largestPrimeFactor", "        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                m /= i\n        \
    \    } else {\n                i += 1\n            }\n        }\n        return\
    \ i", "        var nn = n\n        var i = 2l\n        while (i <= sqrt(nn)) {\n\
    \            if (nn % i == 0) {\n                nn /= i\n                i -=\
    \ 1\n            }\n            i += 1\n        }\n        nn", "        var p\
    \ = 2l\n        var nn = n\n        while (nn % p == 0) {\n            nn /= p\n\
    \        }\n        p += 1\n        while (p * p <= nn) {\n            while (nn\
    \ % p == 0) {\n                nn /= p\n            }\n            p += 2\n  \
    \      }\n        if (nn == 1) p - 2 else nn", "        var i = 2l\n        var\
    \ nn = n\n        while (i * i <= nn) {\n            if (nn % i == 0) {\n    \
    \            nn /= i\n                while (nn % i == 0) nn /= i\n          \
    \  }\n            i += 1\n        }\n        nn", "        var m = n\n       \
    \ var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          m /= i\n            } else {\n                i += 1\n            }\n\
    \        }\n        return i", "        var m = n\n        var i = 2l\n      \
    \  while (i <= m) {\n            if (m % i == 0) {\n                m /= i\n \
    \           } else {\n                i += 1\n            }\n        }\n     \
    \   return i", "        var factor = 2l\n        var nn = n\n        while (nn\
    \ > 1) {\n            while (nn % factor == 0) {\n                nn /= factor\n\
    \            }\n            factor += 1\n        }\n        factor - 1", "   \
    \     var result = 0l\n        var m = n\n        for (i <- 2 to sqrt(n).toInt)\
    \ {\n            if (m % i == 0) {\n                result = i\n             \
    \   while (m % i == 0) m /= i\n            }\n        }\n        if (m > 1) result\
    \ = m\n        result", "        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                m /= i\n        \
    \    } else {\n                i += 1\n            }\n        }\n        i", " \
    \       var largest = 0l\n        var i = 2l\n        while (i <= n) {\n     \
    \       if (n % i == 0) {\n                largest = i\n                n /= i\n\
    \            }\n            else i += 1\n        }\n        largest", "      \
    \  var x = n\n        var i = 2l\n        while (i <= x) {\n            if (x\
    \ % i == 0) {\n                x /= i\n                i -= 1\n            }\n\
    \            i += 1\n        }\n        i", "        var m = n\n        var i\
    \ = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n            \
    \    m /= i\n            } else {\n                i += 1\n            }\n   \
    \     }\n        i", "        var max = 1l\n        var i = 2l\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                max = i\n       \
    \         n /= i\n            }\n            else i += 1\n        }\n        max",
  "        var maxPrime = -1l\n        var num = n\n        while (num % 2 == 0) {\n\
    \            maxPrime = 2\n            num /= 2\n        }\n        var i = 3\n\
    \        while (i <= sqrt(num)) {\n            while (num % i == 0) {\n      \
    \          maxPrime = i\n                num /= i\n            }\n           \
    \ i += 2\n        }\n        if (num > 2) maxPrime = num\n        return maxPrime",
  "        var p = 2l\n        var m = n\n        while (m > 1) {\n            if\
    \ (m % p == 0) {\n                m /= p\n            } else {\n             \
    \   p += 1\n            }\n        }\n        p", "        var m = n\n       \
    \ var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          m /= i\n            } else {\n                i += 1\n            }\n\
    \        }\n        return i", "        var largest : Long = 0\n        var i\
    \ : Long = 2\n        while (i <= n) {\n            if (n % i == 0) {\n      \
    \          largest = i\n                n /= i\n            }\n            else\
    \ i += 1\n        }\n        largest", "        var m = n\n        var i = 2l\n\
    \        while (i <= m) {\n            if (m % i == 0) {\n                m /=\
    \ i\n                i -= 1\n            }\n            i += 1\n        }\n  \
    \      i", "        var p = 2l\n        var m = n\n        while (m % p == 0)\
    \ {\n            m /= p\n        }\n        p += 1\n        while (p * p <= m)\
    \ {\n            while (m % p == 0) {\n                m /= p\n            }\n\
    \            p += 2\n        }\n        if (m == 1) p - 2 else m", "        var\
    \ m = n\n        var i = 2l\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                m /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        i", "        var i = 2l\n        var nn = n\n\
    \        while (i * i <= nn) {\n            if (nn % i == 0) {\n             \
    \   nn /= i\n                i -= 1\n            }\n            i += 1\n     \
    \   }\n        nn", "        var m = n\n        var i = 2l\n        while (i <=\
    \ m) {\n            if (m % i == 0) {\n                m /= i\n              \
    \  i -= 1\n            }\n            i += 1\n        }\n        return i", " \
    \       var largest = 0l\n        var i = 2l\n        while (i <= sqrt(n)) {\n\
    \            if (n % i == 0) {\n                largest = i\n                n\
    \ /= i\n            }\n            else i += 1\n        }\n        if (n > largest)\
    \ n else largest", "        var m = n\n        var i = 2l\n        while (i <=\
    \ m) {\n            if (m % i == 0) {\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        i", "        var\
    \ max = 0l\n        var i = 2l\n        while (i <= sqrt(n)) {\n            if\
    \ (n % i == 0) {\n                if (isPrime(i)) max = i\n                if\
    \ (isPrime(n / i)) return n / i\n            }\n            i += 1\n        }\n\
    \        max", "        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        return i", "  \
    \      var max = 0l\n        var i = 2l\n        while (i <= n) {\n          \
    \  if (n % i == 0) {\n                max = i\n                n /= i\n      \
    \      }\n            else i += 1\n        }\n        max", "        var m = n\n\
    \        var p = 2l\n        while (m > 1) {\n            if (m % p == 0) {\n\
    \                m /= p\n            } else {\n                p += 1\n      \
    \      }\n        }\n        p", "        var x = n\n        var p = 2l\n    \
    \    while (x > 1) {\n            if (x % p == 0) {\n                x /= p\n\
    \            } else {\n                p += 1\n            }\n        }\n    \
    \    p", "        def largestPrimeFactor0(n : Long, p : Long) : Long = {\n   \
    \         if (n == 1) p\n            else if (n % p == 0) largestPrimeFactor0(n\
    \ / p, p)\n            else largestPrimeFactor0(n, p + 1)\n        }\n       \
    \ largestPrimeFactor0(n, 2)", "        var x = n\n        var i = 2l\n       \
    \ while (i <= x) {\n            if (x % i == 0) {\n                x /= i\n  \
    \              while (x % i == 0) x /= i\n            }\n            i += 1\n\
    \        }\n        x", "        var largest = 0l\n        var i = 2l\n      \
    \  while (i <= sqrt(n)) {\n            if (n % i == 0) {\n                var\
    \ j = i\n                while (j <= sqrt(n)) {\n                    if (n % j\
    \ == 0) {\n                        largest = j\n                        n /= j\n\
    \                    }\n                    j += 1\n                }\n      \
    \      }\n            i += 1\n        }\n        if (n > largest) largest = n\n\
    \        largest", "        var m = n\n        var i = 2l\n        while (i <=\
    \ m) {\n            if (m % i == 0) {\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        return i", "  \
    \      var nn = n\n        var largest = 0l\n        var i = 2l\n        while\
    \ (i <= nn) {\n            if (nn % i == 0) {\n                largest = i\n \
    \               nn /= i\n            }\n            else i += 1\n        }\n \
    \       largest", "        var max = 0l\n        var i = 2l\n        while (i\
    \ <= n) {\n            if (n % i == 0) {\n                max = i\n          \
    \      n /= i\n            }\n            else i += 1\n        }\n        max",
  "        var max = 0l\n        for (i <- 2l to sqrt(n).toLong) {\n            if\
    \ (n % i == 0) {\n                if (isPrime(i)) max = i\n                if\
    \ (isPrime(n / i)) max = n / i\n            }\n        }\n        max", "    \
    \    var largestFactor = 0l\n        var i = 2l\n        while (i <= n) {\n  \
    \          if (n % i == 0) {\n                largestFactor = i\n            \
    \    n /= i\n            }\n            else i += 1\n        }\n        largestFactor",
  "        var i = 2l\n        var m = n\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        i", "        var x = n\n       \
    \ var i = 2l\n        while (i <= x) {\n            if (x % i == 0) {\n      \
    \          x /= i\n                i -= 1\n            }\n            i += 1\n\
    \        }\n        i", "        def largestPrimeFactor(n : Long, p : Long) :\
    \ Long = {\n            if (n % p == 0) largestPrimeFactor(n / p, p)\n       \
    \     else if (p * p > n) n\n            else largestPrimeFactor(n, p + 1)\n \
    \       }\n        largestPrimeFactor(n, 2)", "        var m = n\n        var\
    \ i = 2l\n        while (i * i <= m) {\n            if (m % i == 0) {\n      \
    \          m /= i\n            } else {\n                i += 1\n            }\n\
    \        }\n        m", "        var result = 0l\n        var m = n\n        var\
    \ i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n          \
    \      result = i\n                m /= i\n            }\n            else i +=\
    \ 1\n        }\n        result", "        var largestPrimeFactor = 1l\n      \
    \  var i = 2l\n        while (i <= sqrt(n)) {\n            if (n % i == 0) {\n\
    \                if (isPrime(i)) {\n                    largestPrimeFactor = i\n\
    \                }\n            }\n            i += 1\n        }\n        largestPrimeFactor",
  "        var largestPrimeFactor = 1l\n        var i = 2l\n        while (i <= n)\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i\n \
    \               n /= i\n            }\n            else i += 1\n        }\n  \
    \      largestPrimeFactor", "        var x = n\n        var i = 2l\n        while\
    \ (i <= sqrt(x)) {\n            if (x % i == 0) {\n                x /= i\n  \
    \              while (x % i == 0) x /= i\n            }\n            i += 1\n\
    \        }\n        x", "        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                m /= i\n        \
    \    } else {\n                i += 1\n            }\n        }\n        i", " \
    \       var m = n\n        var i = 2l\n        while (i <= sqrt(m)) {\n      \
    \      if (m % i == 0) {\n                m /= i\n                i -= 1\n   \
    \         }\n            i += 1\n        }\n        m", "        var m = n\n \
    \       var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n            } else {\n                i += 1\n      \
    \      }\n        }\n        return i", "        var nn = n\n        var i = 2l\n\
    \        while (i <= nn) {\n            if (nn % i == 0) {\n                nn\
    \ /= i\n                i -= 1\n            }\n            i += 1\n        }\n\
    \        return i", "        var m = n\n        var i = 2l\n        while (i <=\
    \ m) {\n            if (m % i == 0) {\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        i", "        var\
    \ x = n\n        var i = 2l\n        while (i <= x) {\n            if (x % i ==\
    \ 0) {\n                x /= i\n                i -= 1\n            }\n      \
    \      i += 1\n        }\n        return i", "        var m = n\n        var i\
    \ = 2l\n        while (i * i <= m) {\n            if (m % i == 0) {\n        \
    \        m /= i\n            } else {\n                i += 1\n            }\n\
    \        }\n        m", "        var i = 2l\n        var nn = n\n        while\
    \ (i <= sqrt(nn)) {\n            if (nn % i == 0) {\n                nn /= i\n\
    \                i -= 1\n            }\n            i += 1\n        }\n      \
    \  nn", "        val primes = new PrimeGenerator(n)\n        var result = 0l\n\
    \        while (n != 1) {\n            val p = primes.next\n            while\
    \ (n % p == 0) {\n                result = p\n                n /= p\n       \
    \     }\n        }\n        result", "        var m = n\n        var i = 2l\n\
    \        while (i <= m) {\n            if (m % i == 0) {\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        return i", "        var result = 0l\n        var m = n\n        var i\
    \ = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n            \
    \    result = i\n                m /= i\n            }\n            else i +=\
    \ 1\n        }\n        result", "        var m = n\n        var i = 2l\n    \
    \    while (i <= m) {\n            if (m % i == 0) {\n                m /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    i", "        def largestPrimeFactorRec(n : Long, i : Long) : Long = {\n \
    \           if (i > n) return n\n            if (n % i == 0) return largestPrimeFactorRec(n\
    \ / i, i)\n            else return largestPrimeFactorRec(n, i + 1)\n        }\n\
    \        largestPrimeFactorRec(n, 2)", "        var p = 2l\n        var m = n\n\
    \        while (p * p <= m) {\n            if (m % p == 0) {\n               \
    \ m /= p\n            } else {\n                p += 1\n            }\n      \
    \  }\n        m", "        var m = n\n        var i = 2l\n        while (i <=\
    \ m) {\n            if (m % i == 0) {\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        i", "        var\
    \ m = n\n        var p = 2l\n        while (m > 1) {\n            if (m % p ==\
    \ 0) {\n                m /= p\n            } else {\n                p += 1\n\
    \            }\n        }\n        p", "        var largestPrimeFactor = 0l\n\
    \        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                largestPrimeFactor = i\n                n /= i\n            }\n\
    \            else i += 1\n        }\n        largestPrimeFactor", "        var\
    \ m = n\n        var i = 2l\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                m /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        i", "        var m = n\n        var i = 2l\n\
    \        while (i <= m) {\n            if (m % i == 0) {\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        i", "        var x = n\n        var i = 2l\n        while (i <= x) {\n\
    \            if (x % i == 0) {\n                x /= i\n                i -= 1\n\
    \            }\n            i += 1\n        }\n        i", "        var m = n\n\
    \        var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i", "        var p = 2l\n        var nn = n\n     \
    \   while (nn % p == 0) nn /= p\n        p += 1\n        while (p * p <= nn) {\n\
    \            while (nn % p == 0) nn /= p\n            p += 2\n        }\n    \
    \    if (nn == 1) p - 2 else nn", "        var largest = 0l\n        var i = 2l\n\
    \        while (i <= n) {\n            if (n % i == 0) {\n                largest\
    \ = i\n                n /= i\n            }\n            else i += 1\n      \
    \  }\n        largest", "        var result = 1l\n        var x = n\n        var\
    \ i = 2l\n        while (i <= x) {\n            if (x % i == 0) {\n          \
    \      result = i\n                x /= i\n            }\n            else i +=\
    \ 1\n        }\n        result", "        var i = 2l\n        var nn = n\n   \
    \     while (i * i <= nn) {\n            if (nn % i == 0) {\n                nn\
    \ /= i\n                i -= 1\n            }\n            i += 1\n        }\n\
    \        nn", "        var max = 0l\n        var i = 2l\n        while (i <= n)\
    \ {\n            if (n % i == 0) {\n                max = i\n                n\
    \ /= i\n            }\n            else i += 1\n        }\n        max", "   \
    \     val primes = Prime.primes(n)\n        var result = 0l\n        for (p <-\
    \ primes) {\n            if (n % p == 0) result = p\n        }\n        result",
  "        var largest = 0l\n        var i = 2l\n        while (i <= n) {\n      \
    \      if (n % i == 0) {\n                largest = i\n                n /= i\n\
    \            }\n            else i += 1\n        }\n        largest", "      \
    \  var i = 2l\n        var n2 = n\n        while (i <= n2) {\n            if (n2\
    \ % i == 0) {\n                n2 /= i\n                i -= 1\n            }\n\
    \            i += 1\n        }\n        i", "        var largest = 0l\n      \
    \  var i = 2l\n        while (i <= sqrt(n)) {\n            if (n % i == 0) {\n\
    \                if (isPrime(i)) largest = i\n                if (isPrime(n /\
    \ i)) largest = n / i\n            }\n            i += 1\n        }\n        largest",
  "        var max = 1l\n        var i = 2l\n        while (i <= n) {\n          \
    \  if (n % i == 0) {\n                max = i\n                n /= i\n      \
    \      }\n            else i += 1\n        }\n        max", "        var nn =\
    \ n\n        var largest = 0l\n        while (nn % 2 == 0) {\n            largest\
    \ = 2l\n            nn /= 2\n        }\n        var i = 3l\n        while (i <=\
    \ sqrt(nn)) {\n            while (nn % i == 0) {\n                largest = i\n\
    \                nn /= i\n            }\n            i += 2\n        }\n     \
    \   if (nn > 2) largest = nn\n        largest", "        def largestPrimeFactorHelper(n\
    \ : Long, i : Long) : Long = {\n            if (i * i > n) n\n            else\
    \ if (n % i == 0) largestPrimeFactorHelper(n / i, i)\n            else largestPrimeFactorHelper(n,\
    \ i + 1)\n        }\n        largestPrimeFactorHelper(n, 2)", "        var largestPrimeFactor\
    \ = 2l\n        var remaining = n\n        while (remaining % largestPrimeFactor\
    \ == 0) {\n            remaining /= largestPrimeFactor\n        }\n        largestPrimeFactor\
    \ += 1\n        while (remaining > 1) {\n            while (remaining % largestPrimeFactor\
    \ == 0) {\n                remaining /= largestPrimeFactor\n            }\n  \
    \          largestPrimeFactor += 2\n        }\n        largestPrimeFactor - 2",
  "        var max = 0l\n        var i = 2l\n        while (i <= n) {\n          \
    \  if (n % i == 0) {\n                max = i\n                n /= i\n      \
    \      }\n            else i += 1\n        }\n        max", "        var m = n\n\
    \        var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i", "        var factor = 2l\n        var n2 = n\n\
    \        while (n2 > 1) {\n            if (n2 % factor == 0) {\n             \
    \   n2 /= factor\n                while (n2 % factor == 0) n2 /= factor\n    \
    \        }\n            factor += 1\n        }\n        factor", "        def\
    \ largestPrimeFactor(n : Long, p : Long) : Long = {\n            if (n % p ==\
    \ 0) largestPrimeFactor(n / p, p)\n            else if (p * p > n) n\n       \
    \     else largestPrimeFactor(n, p + 1)\n        }\n        largestPrimeFactor(n,\
    \ 2)", "        var m = n\n        var i = 2l\n        while (i <= m) {\n    \
    \        if (m % i == 0) {\n                m /= i\n                i -= 1\n \
    \           }\n            i += 1\n        }\n        i", "        var p = 2l\n\
    \        var m = n\n        while (m > 1) {\n            while (m % p == 0) {\n\
    \                m /= p\n            }\n            p += 1\n        }\n      \
    \  p - 1", "        val primes = new PrimeIterator\n        var largestPrimeFactor\
    \ = 1l\n        while (n > 1) {\n            val p = primes.next\n           \
    \ while (n % p == 0) {\n                largestPrimeFactor = p\n             \
    \   n /= p\n            }\n        }\n        largestPrimeFactor", "        var\
    \ m = n\n        var i = 2l\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                m /= i\n                i -= 1\n            }\n      \
    \      i += 1\n        }\n        i", "        var i = 2l\n        var m = n\n\
    \        while (i <= sqrt(m)) {\n            if (m % i == 0) {\n             \
    \   m /= i\n                i -= 1\n            }\n            i += 1\n      \
    \  }\n        m", "        var result = 0l\n        var i = 2l\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                result = i\n    \
    \            n /= i\n            }\n            else i += 1\n        }\n     \
    \   result", "        val primes = new PrimeGenerator\n        var result = 0l\n\
    \        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                result = i\n                n /= i\n            }\n         \
    \   else {\n                i = primes.next\n            }\n        }\n      \
    \  result", "        var n1 = n\n        var i = 2l\n        while (i <= n1) {\n\
    \            if (n1 % i == 0) {\n                n1 /= i\n                i -=\
    \ 1\n            }\n            i += 1\n        }\n        return i", "      \
    \  var m = n\n        var p = 2l\n        while (m > 1) {\n            if (m %\
    \ p == 0) {\n                m /= p\n            } else {\n                p +=\
    \ 1\n            }\n        }\n        p", "        var m = n\n        var i =\
    \ 2l\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  m /= i\n                i -= 1\n            }\n            i += 1\n       \
    \ }\n        return i", "        var max = 0l\n        var i = 2l\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                max = i\n       \
    \         n /= i\n            }\n            else i += 1\n        }\n        max",
  "        var factors = new ListBuffer[Long]\n        var i = 2l\n        while (i\
    \ <= n) {\n            if (n % i == 0) {\n                factors += i\n     \
    \           n /= i\n            }\n            else i += 1\n        }\n      \
    \  factors.max", "        var m = n\n        var p = 2l\n        while (m % p\
    \ == 0) {\n            m /= p\n        }\n        p += 1\n        while (m > 1)\
    \ {\n            while (m % p == 0) {\n                m /= p\n            }\n\
    \            p += 2\n        }\n        p - 2", "        def largestPrimeFactor(n\
    \ : Long, p : Long) : Long = {\n            if (n % p == 0) largestPrimeFactor(n\
    \ / p, p)\n            else if (p * p > n) n\n            else largestPrimeFactor(n,\
    \ p + 1)\n        }\n        largestPrimeFactor(n, 2)", "        var largest =\
    \ 0l\n        var d = 2l\n        while (d <= n) {\n            if (n % d == 0)\
    \ {\n                largest = d\n                n /= d\n            }\n    \
    \        else d += 1\n        }\n        largest", "        var factor = 2l\n\
    \        var n1 = n\n        while (n1 > 1) {\n            if (n1 % factor ==\
    \ 0) {\n                n1 /= factor\n                while (n1 % factor == 0)\
    \ n1 /= factor\n            }\n            factor += 1\n        }\n        factor",
  "        var i = 2l\n        var n2 = n\n        while (i * i <= n2) {\n       \
    \     if (n2 % i == 0) {\n                n2 /= i\n                while (n2 %\
    \ i == 0) n2 /= i\n            }\n            i += 1\n        }\n        n2",
  "        var p = 2l\n        var nn = n\n        while (p * p <= nn) {\n       \
    \     if (nn % p == 0) {\n                nn /= p\n            } else {\n    \
    \            p += 1\n            }\n        }\n        nn", "        var m = n\n\
    \        var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i", "        var m = n\n        var i = 2l\n      \
    \  while (i * i <= m) {\n            if (m % i == 0) {\n                m /= i\n\
    \                while (m % i == 0) m /= i\n            }\n            i += 1\n\
    \        }\n        m", "        var max = 1l\n        var i = 2l\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                max = i\n       \
    \         n /= i\n            }\n            else i += 1\n        }\n        max",
  "        var m = n\n        var p = 2l\n        while (m > 1) {\n            if\
    \ (m % p == 0) {\n                m /= p\n            } else {\n             \
    \   p += 1\n            }\n        }\n        p", "        var max = 1l\n    \
    \    var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n   \
    \             max = i\n                n /= i\n            }\n            else\
    \ i += 1\n        }\n        max", "        var m = n\n        var i = 2l\n  \
    \      while (i <= m) {\n            if (m % i == 0) {\n                m /= i\n\
    \                i -= 1\n            }\n            i += 1\n        }\n      \
    \  i", "        var m = n\n        var p = 2l\n        while (m > 1) {\n     \
    \       if (m % p == 0) {\n                m /= p\n            } else {\n    \
    \            p += 1\n            }\n        }\n        p", "        var m = n\n\
    \        var i = 2l\n        while (i <= sqrt(m)) {\n            if (m % i ==\
    \ 0) {\n                m /= i\n                i -= 1\n            }\n      \
    \      i += 1\n        }\n        return m", "        var m = n\n        var p\
    \ = 2l\n        while (m > 1) {\n            if (m % p == 0) {\n             \
    \   m /= p\n            } else {\n                p += 1\n            }\n    \
    \    }\n        p", "        var largest = 0l\n        var i = 2l\n        while\
    \ (i <= sqrt(n)) {\n            if (n % i == 0) {\n                if (isPrime(i))\
    \ largest = i\n                if (isPrime(n / i)) largest = n / i\n         \
    \   }\n            i += 1\n        }\n        largest", "        var factor =\
    \ 2l\n        var n2 = n\n        while (n2 > 1) {\n            if (n2 % factor\
    \ == 0) {\n                n2 /= factor\n                while (n2 % factor ==\
    \ 0) n2 /= factor\n            }\n            factor += 1\n        }\n       \
    \ factor", "        var nn = n\n        var largest = 0l\n        while (nn %\
    \ 2 == 0) {\n            largest = 2l\n            nn /= 2\n        }\n      \
    \  var i = 3l\n        while (i <= sqrt(nn)) {\n            while (nn % i == 0)\
    \ {\n                largest = i\n                nn /= i\n            }\n   \
    \         i += 2\n        }\n        if (nn > 2) largest = nn\n        largest",
  "        var max = 0l\n        var i = 2l\n        while (i <= n) {\n          \
    \  if (n % i == 0) {\n                max = i\n                n /= i\n      \
    \      }\n            else i += 1\n        }\n        max", "        var largest\
    \ = 0l\n        var i = 2l\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest", "        var x = n\n   \
    \     var largest = 0l\n        while (x % 2 == 0) {\n            largest = 2\n\
    \            x /= 2\n        }\n        var i = 3\n        while (i <= sqrt(x))\
    \ {\n            while (x % i == 0) {\n                largest = i\n         \
    \       x /= i\n            }\n            i += 2\n        }\n        if (x >\
    \ 2) largest = x\n        largest", "        var m = n\n        var i = 2l\n \
    \       while (i <= m) {\n            if (m % i == 0) {\n                m /=\
    \ i\n                i -= 1\n            }\n            i += 1\n        }\n  \
    \      return i", "        var m = n\n        var i = 2l\n        while (i <=\
    \ m) {\n            if (m % i == 0) {\n                m /= i\n              \
    \  i -= 1\n            }\n            i += 1\n        }\n        i", "       \
    \ var m = n\n        var i = 2l\n        while (i <= m) {\n            if (m %\
    \ i == 0) {\n                m /= i\n                i -= 1\n            }\n \
    \           i += 1\n        }\n        i", "        var m = n\n        var i =\
    \ 2l\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  m /= i\n                i -= 1\n            }\n            i += 1\n       \
    \ }\n        return i", "        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                m /= i\n        \
    \    } else {\n                i += 1\n            }\n        }\n        return\
    \ i", "        var m = n\n        var i = 2l\n        while (i <= m) {\n     \
    \       if (m % i == 0) {\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        i", "        var result\
    \ = 0l\n        var i = 2l\n        while (i <= sqrt(n)) {\n            if (n\
    \ % i == 0) {\n                result = i\n                while (n % i == 0)\
    \ n /= i\n            }\n            i += 1\n        }\n        if (n > 1) result\
    \ = n\n        result", "        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                m /= i\n        \
    \    } else {\n                i += 1\n            }\n        }\n        i", " \
    \       var p = 2l\n        var nn = n\n        while (p * p <= nn) {\n      \
    \      if (nn % p == 0) nn /= p\n            else p += 1\n        }\n        nn",
  "        var m = n\n        var p = 2l\n        while (m % p == 0) {\n         \
    \   m /= p\n        }\n        p += 1\n        while (m > 1) {\n            while\
    \ (m % p == 0) {\n                m /= p\n            }\n            p += 2\n\
    \        }\n        p - 2", "        val primes = new Primes()\n        var largest\
    \ = 0l\n        var x = n\n        while (x > 1) {\n            val prime = primes.next\n\
    \            while (x % prime == 0) {\n                largest = prime\n     \
    \           x /= prime\n            }\n        }\n        largest", "        var\
    \ result = 0l\n        var i = 2l\n        while (i <= sqrt(n)) {\n          \
    \  if (n % i == 0) {\n                result = i\n                n /= i\n   \
    \         }\n            else i += 1\n        }\n        if (n > result) result\
    \ = n\n        result", "        var max = 1l\n        var i = 2l\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                max = i\n       \
    \         n /= i\n            }\n            else i += 1\n        }\n        max",
  "        var result = 0l\n        var i = 2l\n        while (i <= n) {\n       \
    \     if (n % i == 0) {\n                result = i\n                n /= i\n\
    \            }\n            else i += 1\n        }\n        result", "       \
    \ var m = n\n        var i = 2l\n        while (i <= m) {\n            if (m %\
    \ i == 0) {\n                m /= i\n            } else {\n                i +=\
    \ 1\n            }\n        }\n        return i", "        var m = n\n       \
    \ var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          m /= i\n            } else {\n                i += 1\n            }\n\
    \        }\n        i", "        var x = n\n        var i = 2l\n        while\
    \ (i <= x) {\n            if (x % i == 0) {\n                x /= i\n        \
    \        i -= 1\n            }\n            i += 1\n        }\n        return\
    \ i", "        var m = n\n        var i = 2l\n        while (i <= m) {\n     \
    \       if (m % i == 0) {\n                m /= i\n            } else {\n    \
    \            i += 1\n            }\n        }\n        i", "        var factor\
    \ = 2l\n        var nn = n\n        while (nn > 1) {\n            if (nn % factor\
    \ == 0) {\n                nn /= factor\n            } else {\n              \
    \  factor += 1\n            }\n        }\n        factor", "        var p = 2l\n\
    \        var nn = n\n        while (nn > 1) {\n            if (nn % p == 0) {\n\
    \                nn /= p\n            } else {\n                p += 1\n     \
    \       }\n        }\n        p", "        def largestPrimeFactor(n : Long, p\
    \ : Long) : Long = {\n            if (n % p == 0) largestPrimeFactor(n / p, p)\n\
    \            else if (p * p > n) n\n            else largestPrimeFactor(n, p +\
    \ 1)\n        }\n        largestPrimeFactor(n, 2)", "        var x = n\n     \
    \   var i = 2l\n        while (i <= x) {\n            if (x % i == 0) {\n    \
    \            x /= i\n                i -= 1\n            }\n            i += 1\n\
    \        }\n        i", "        var x = n\n        var largest = 0l\n       \
    \ while (x % 2 == 0) {\n            largest = 2\n            x /= 2\n        }\n\
    \        var i = 3\n        while (i <= sqrt(x)) {\n            while (x % i ==\
    \ 0) {\n                largest = i\n                x /= i\n            }\n \
    \           i += 2\n        }\n        if (x > 2) largest = x\n        largest",
  "        var result = 1l\n        var i = 2l\n        while (i <= n) {\n       \
    \     if (n % i == 0) {\n                result = i\n                n /= i\n\
    \            }\n            else i += 1\n        }\n        result", "       \
    \ var m = n\n        var p = 2l\n        while (m > 1) {\n            if (m %\
    \ p == 0) {\n                m /= p\n            } else {\n                p +=\
    \ 1\n            }\n        }\n        p", "        var result = 0l\n        var\
    \ i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n          \
    \      result = i\n                n /= i\n            }\n            else i +=\
    \ 1\n        }\n        result", "        var result = 0l\n        var i = 2l\n\
    \        while (i <= n) {\n            if (n % i == 0) {\n                result\
    \ = i\n                n /= i\n            }\n            else i += 1\n      \
    \  }\n        result", "        var m = n\n        var i = 2l\n        while (i\
    \ <= m) {\n            if (m % i == 0) {\n                m /= i\n           \
    \ } else {\n                i += 1\n            }\n        }\n        i", "  \
    \      def largestPrimeFactor(n : Long, i : Long) : Long = {\n            if (i\
    \ > sqrt(n)) n\n            else if (n % i == 0) largestPrimeFactor(n / i, i)\n\
    \            else largestPrimeFactor(n, i + 1)\n        }\n        largestPrimeFactor(n,\
    \ 2)", "        val primes = new PrimeGenerator\n        var result = 1l\n   \
    \     var m = n\n        while (m > 1) {\n            val p = primes.next\n  \
    \          while (m % p == 0) {\n                result = p\n                m\
    \ /= p\n            }\n        }\n        result", "        var m = n\n      \
    \  var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n     \
    \           m /= i\n            } else {\n                i += 1\n           \
    \ }\n        }\n        return i", "        var x = n\n        var i = 2l\n  \
    \      while (i <= x) {\n            if (x % i == 0) {\n                x /= i\n\
    \                i -= 1\n            }\n            i += 1\n        }\n      \
    \  i", "        var max = 0l\n        var i = 2l\n        while (i <= n) {\n \
    \           if (n % i == 0) {\n                max = i\n                n /= i\n\
    \            }\n            else i += 1\n        }\n        max", "        var\
    \ m = n\n        var i = 2l\n        while (i <= sqrt(m)) {\n            if (m\
    \ % i == 0) {\n                m /= i\n                i -= 1\n            }\n\
    \            i += 1\n        }\n        return m", "        var largest = 0l\n\
    \        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                largest = i\n                n /= i\n            }\n        \
    \    else i += 1\n        }\n        largest", "        var i = 2l\n        var\
    \ nn = n\n        while (i <= nn) {\n            if (nn % i == 0) {\n        \
    \        nn /= i\n                i -= 1\n            }\n            i += 1\n\
    \        }\n        i", "        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                m /= i\n        \
    \    } else {\n                i += 1\n            }\n        }\n        i", " \
    \       var i = 2l\n        var nn = n\n        while (i * i <= nn) {\n      \
    \      if (nn % i == 0) {\n                nn /= i\n                i -= 1\n \
    \           }\n            i += 1\n        }\n        nn", "        def largestPrimeFactor(n\
    \ : Long, p : Long) : Long = {\n            if (n % p == 0) largestPrimeFactor(n\
    \ / p, p)\n            else if (p * p > n) n\n            else largestPrimeFactor(n,\
    \ p + 1)\n        }\n        largestPrimeFactor(n, 2)", "        var m = n\n \
    \       var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n            } else {\n                i += 1\n      \
    \      }\n        }\n        i", "        val primes = new PrimeIterator\n   \
    \     var m = n\n        var p = primes.next\n        while (p * p <= m) {\n \
    \           while (m % p == 0) {\n                m /= p\n            }\n    \
    \        p = primes.next\n        }\n        m", "        var m = n\n        var\
    \ i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n          \
    \      m /= i\n            } else {\n                i += 1\n            }\n \
    \       }\n        i", "        def largestPrimeFactor0(n : Long, i : Long) :\
    \ Long = {\n            if (i > sqrt(n)) n\n            else if (n % i == 0) largestPrimeFactor0(n\
    \ / i, i)\n            else largestPrimeFactor0(n, i + 1)\n        }\n       \
    \ largestPrimeFactor0(n, 2)", "        var max = 1l\n        var i = 2l\n    \
    \    while (i <= n) {\n            if (n % i == 0) {\n                max = i\n\
    \                n /= i\n            }\n            else i += 1\n        }\n \
    \       max"]
stop_tokens:
- "\n    }\n"
