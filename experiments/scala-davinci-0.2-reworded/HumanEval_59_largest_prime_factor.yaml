name: HumanEval_59_largest_prime_factor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  \    // >>> largestPrimeFactor((13195l))\n    // (29l)\n    // >>> largestPrimeFactor((2048l))\n\
  \    // (2l)\n    def largestPrimeFactor(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
  \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
  \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
  \ == (29l));\n    }\n\n}\n"
completions: ["        var m = n\n        var i = 2l\n        while (i <= m) {\n \
    \           if (m % i == 0) {\n                m /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        i", "        var i\
    \ = 2l\n        var m = n\n        while (i <= sqrt(m)) {\n            if (m %\
    \ i == 0) {\n                m /= i\n                i -= 1\n            }\n \
    \           i += 1\n        }\n        return m", "        var m = n\n       \
    \ var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          m /= i\n            } else {\n                i += 1\n            }\n\
    \        }\n        i", "        var nn = n\n        var i = 2l\n        while\
    \ (i <= nn) {\n            if (nn % i == 0) {\n                nn /= i\n     \
    \           while (nn % i == 0) nn /= i\n            }\n            i += 1\n \
    \       }\n        i - 1", "        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                m /= i\n        \
    \    } else {\n                i += 1\n            }\n        }\n        i", " \
    \       var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        i", "        var primeFactors =\
    \ List[Long]()\n        var m = n\n        for (i <- 2l to sqrt(n).toLong) {\n\
    \            while (m % i == 0) {\n                primeFactors = i :: primeFactors\n\
    \                m /= i\n            }\n        }\n        if (m > 1) primeFactors\
    \ = m :: primeFactors\n        primeFactors.max", "        var m = n\n       \
    \ var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          m /= i\n            } else {\n                i += 1\n            }\n\
    \        }\n        return i", "        var m = n\n        var i = 2l\n      \
    \  while (i <= m) {\n            if (m % i == 0) {\n                m /= i\n \
    \           } else {\n                i += 1\n            }\n        }\n     \
    \   i", "        var largest = 0l\n        var i = 2l\n        while (i <= n)\
    \ {\n            if (n % i == 0) {\n                largest = i\n            \
    \    n /= i\n            }\n            else i += 1\n        }\n        largest",
  "        var max = 1l\n        var i = 2l\n        while (i <= n) {\n          \
    \  if (n % i == 0) {\n                max = i\n                n /= i\n      \
    \      }\n            else i += 1\n        }\n        max", "        var max =\
    \ 0l\n        var i = 2l\n        while (i <= n) {\n            if (n % i == 0)\
    \ {\n                max = i\n                n /= i\n            }\n        \
    \    else i += 1\n        }\n        max", "        var m = n\n        var i =\
    \ 2l\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  m /= i\n            } else {\n                i += 1\n            }\n     \
    \   }\n        i", "        var m = n\n        var i = 2l\n        while (i <=\
    \ m) {\n            if (m % i == 0) {\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        i", "        var\
    \ i = 2l\n        var nn = n\n        while (i <= sqrt(nn)) {\n            if\
    \ (nn % i == 0) {\n                nn /= i\n                i -= 1\n         \
    \   }\n            i += 1\n        }\n        nn", "        val primes = new PrimeGenerator\n\
    \        var p = primes.next\n        var m = n\n        while (m % p != 0) {\n\
    \            p = primes.next\n        }\n        var k = m / p\n        while\
    \ (k % p == 0) {\n            k /= p\n        }\n        if (k == 1) p else largestPrimeFactor(k)",
  "        var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        return i", "        var largest\
    \ = 1l\n        var i = 2l\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest", "        var m = n\n   \
    \     var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n  \
    \              m /= i\n            } else {\n                i += 1\n        \
    \    }\n        }\n        return i", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n == 2) return true\n            if (n % 2 == 0) return\
    \ false\n            val sqrtn = sqrt(n).toLong\n            for (i <- 3l to sqrtn\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var result = 1l\n        var i = 2l\n\
    \        while (i <= n) {\n            if (n % i == 0 && isPrime(i)) {\n     \
    \           result = i\n                n /= i\n            }\n            else\
    \ i += 1\n        }\n        return result"]
stop_tokens:
- "\n    }\n"
