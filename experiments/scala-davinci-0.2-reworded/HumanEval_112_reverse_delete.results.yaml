language: scala
name: HumanEval_112_reverse_delete
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        var result = s\n        for (i <- 0 until\
    \ c.length) {\n            result = result.replaceAll(c(i).toString, \"\")\n \
    \       }\n        var check = true\n        for (i <- 0 until result.length /\
    \ 2) {\n            if (result(i) != result(result.length - 1 - i)) {\n      \
    \          check = false\n            }\n        }\n        return (result, check)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp244f4dlm.scala:21)\n\tat Problem.main(tmp244f4dlm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (s, false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2elk7hs.scala:21)\n\tat Problem.main(tmpw2elk7hs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp244f4dlm.scala:21)\n\tat Problem.main(tmp244f4dlm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        var result = s\n        for (i <- 0 until\
    \ c.length) {\n            result = result.replaceAll(c(i).toString, \"\")\n \
    \       }\n        return (result, result == result.reverse)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (s, false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2elk7hs.scala:21)\n\tat Problem.main(tmpw2elk7hs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n       \
    \     if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val s2 = sb.toString\n\
    \        (s2, s2 == s2.reverse)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (s, false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2elk7hs.scala:21)\n\tat Problem.main(tmpw2elk7hs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  var result = \"\"\n        for (i <- 0 until s.length) {\n            if (!c.contains(s(i)))\
    \ result += s(i)\n        }\n        return (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val sb = new StringBuilder\n        for (i\
    \ <- 0 until s.length) {\n            if (!c.contains(s(i))) {\n             \
    \   sb.append(s(i))\n            }\n        }\n        val result = sb.toString\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val sb = new StringBuilder\n        for (i\
    \ <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val s2 = sb.toString\n        (s2, s2 == s2.reverse)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        var result = \"\"\n        for (i <- 0 until\
    \ s.length) {\n            var flag = true\n            for (j <- 0 until c.length)\
    \ {\n                if (s(i) == c(j)) {\n                    flag = false\n \
    \               }\n            }\n            if (flag) {\n                result\
    \ += s(i)\n            }\n        }\n        var flag = true\n        for (i <-\
    \ 0 until result.length / 2) {\n            if (result(i) != result(result.length\
    \ - 1 - i)) {\n                flag = false\n            }\n        }\n      \
    \  return (result, flag)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  val result = s.filter(x => !c.contains(x))\n        val palindrome = result.equals(result.reverse)\n\
    \        (result, palindrome)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        var result = s\n        for (i <- 0 until\
    \ c.length) {\n            result = result.replaceAll(c(i).toString, \"\")\n \
    \       }\n        var isPalindrome = true\n        for (i <- 0 until result.length\
    \ / 2) {\n            if (result(i) != result(result.length - 1 - i)) {\n    \
    \            isPalindrome = false\n            }\n        }\n        return (result,\
    \ isPalindrome)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (s, false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2elk7hs.scala:21)\n\tat Problem.main(tmpw2elk7hs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  val result = s.filterNot(c.contains(_))\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  val result = s.filter(x => !c.contains(x))\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val s1 = s.filterNot(c.contains(_))\n    \
    \    val s2 = s1.reverse\n        (s1, s1 == s2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        var result = \"\"\n        for (i <- 0 until\
    \ s.length) {\n            if (!c.contains(s(i))) {\n                result +=\
    \ s(i)\n            }\n        }\n        var isPalindrome = true\n        for\
    \ (i <- 0 until result.length / 2) {\n            if (result(i) != result(result.length\
    \ - 1 - i)) {\n                isPalindrome = false\n            }\n        }\n\
    \        return (result, isPalindrome)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (s, false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2elk7hs.scala:21)\n\tat Problem.main(tmpw2elk7hs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  val result = s.filter(x => !c.contains(x))\n        val isPalindrome = result.reverse\
    \ == result\n        (result, isPalindrome)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        var result = \"\"\n        for (i <- 0 until\
    \ s.length) {\n            if (!c.contains(s(i))) result += s(i)\n        }\n\
    \        return (result, result == result.reverse)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val result = s.filter(x => !c.contains(x))\n\
    \        val isPalindrome = result.reverse == result\n        (result, isPalindrome)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  val result = s.filter(!c.contains(_))\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp244f4dlm.scala:21)\n\tat Problem.main(tmp244f4dlm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val sb = new StringBuilder\n        for (i\
    \ <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val s2 = sb.toString\n        (s2, s2 == s2.reverse)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        var result = s\n        for (i <- 0 until\
    \ c.length) {\n            result = result.replaceAll(c(i).toString, \"\")\n \
    \       }\n        (result, result == result.reverse)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        var result = \"\"\n        for (i <- 0 until\
    \ s.length) {\n            if (!c.contains(s(i))) {\n                result +=\
    \ s(i)\n            }\n        }\n        return (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  val result = s.filter(x => !c.contains(x))\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val result = s.filter(x => !c.contains(x))\n\
    \        val isPalindrome = result.equals(result.reverse)\n        (result, isPalindrome)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  val result = s.filter(x => !c.contains(x))\n        val palindrome = result.equals(result.reverse)\n\
    \        (result, palindrome)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  var result = s\n        for (i <- 0 until c.length) {\n            result =\
    \ result.replaceAll(c(i).toString, \"\")\n        }\n        return (result, result\
    \ == result.reverse)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (s, true)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv5zz2e20.scala:21)\n\tat Problem.main(tmpv5zz2e20.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        var result = \"\"\n        for (i <- 0 until\
    \ s.length) {\n            if (!c.contains(s(i))) {\n                result +=\
    \ s(i)\n            }\n        }\n        var isPalindrome = true\n        for\
    \ (i <- 0 until result.length / 2) {\n            if (result(i) != result(result.length\
    \ - 1 - i)) {\n                isPalindrome = false\n            }\n        }\n\
    \        (result, isPalindrome)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        var result = \"\"\n        for (i <- 0 until\
    \ s.length) {\n            if (!c.contains(s(i))) {\n                result +=\
    \ s(i)\n            }\n        }\n        return (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val sb = new StringBuilder\n        for (i\
    \ <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val result = sb.toString\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val result = s.filter(x => !c.contains(x))\n\
    \        val palindrome = result.equals(result.reverse)\n        (result, palindrome)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp244f4dlm.scala:21)\n\tat Problem.main(tmp244f4dlm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp244f4dlm.scala:21)\n\tat Problem.main(tmp244f4dlm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        var result = s\n        for (i <- c) {\n \
    \           result = result.replaceAll(i.toString, \"\")\n        }\n        return\
    \ (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (s, false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2elk7hs.scala:21)\n\tat Problem.main(tmpw2elk7hs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        var result = s\n        for (i <- 0 until\
    \ c.length) {\n            result = result.replaceAll(c(i).toString, \"\")\n \
    \       }\n        var isPalindrome = true\n        for (i <- 0 until result.length\
    \ / 2) {\n            if (result(i) != result(result.length - 1 - i)) {\n    \
    \            isPalindrome = false\n            }\n        }\n        (result,\
    \ isPalindrome)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  val result = s.filterNot(c.contains(_))\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  val result = s.filter(x => !c.contains(x))\n        val palindrome = result.equals(result.reverse)\n\
    \        (result, palindrome)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val result = s.filter(x => !c.contains(x))\n\
    \        val isPalindrome = result.equals(result.reverse)\n        (result, isPalindrome)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n       \
    \     if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val sb2 = new\
    \ StringBuilder\n        for (i <- 0 until sb.length) {\n            sb2.append(sb(sb.length\
    \ - 1 - i))\n        }\n        (sb.toString, sb.toString == sb2.toString)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val result = s.filter(x => !c.contains(x))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  val result = s.filter(x => !c.contains(x))\n        val isPalindrome = result.reverse\
    \ == result\n        (result, isPalindrome)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  val result = s.filter(x => !c.contains(x))\n        val isPalindrome = result.reverse\
    \ == result\n        (result, isPalindrome)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  val result = s.filterNot(c.contains(_))\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val result = s.filter(x => !c.contains(x))\n\
    \        val isPalindrome = result.equals(result.reverse)\n        (result, isPalindrome)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  val result = s.filter(x => !c.contains(x))\n        val result2 = result.reverse\n\
    \        return (result, result == result2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  val result = s.filter(x => !c.contains(x))\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  val result = s.filter(!c.contains(_))\n        (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        var result = s\n        for (i <- 0 until\
    \ c.length) {\n            result = result.replaceAll(c(i).toString, \"\")\n \
    \       }\n        var isPalindrome = true\n        for (i <- 0 until result.length\
    \ / 2) {\n            if (result(i) != result(result.length - 1 - i)) {\n    \
    \            isPalindrome = false\n            }\n        }\n        (result,\
    \ isPalindrome)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        // Return a tuple containing the result string\
    \ and true/false for the check.\n        return (\"\", false)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\"\
    )).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\"\
    )).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\
    ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"\
    w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\
    \", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\"\
    , true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\"\
    , true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1zppdq19.scala:22)\n\tat Problem.main(tmp1zppdq19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  var result = s\n        for (i <- 0 until c.length) {\n            result =\
    \ result.replaceAll(c(i).toString, \"\")\n        }\n        return (result, result\
    \ == result.reverse)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val result = s.filter(x => !c.contains(x))\n\
    \        val palindrome = result.reverse == result\n        (result, palindrome)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        var result = \"\"\n        var flag = true\n\
    \        for (i <- 0 until s.length) {\n            if (!c.contains(s(i))) {\n\
    \                result += s(i)\n            }\n        }\n        for (i <- 0\
    \ until result.length / 2) {\n            if (result(i) != result(result.length\
    \ - 1 - i)) {\n                flag = false\n            }\n        }\n      \
    \  (result, flag)\n    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
    abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"\
    abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"\
    dwik\"), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"\
    ), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp244f4dlm.scala:21)\n\tat Problem.main(tmp244f4dlm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val sb = new StringBuilder\n        for (i\
    \ <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val res = sb.toString\n        val isPalindrome = res == res.reverse\n\
    \        (res, isPalindrome)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val s1 = s.filterNot(c.contains(_))\n    \
    \    val s2 = s1.reverse\n        if (s1 == s2) (s1, true) else (s1, false)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val result = s.filterNot(c.contains(_))\n\
    \        (result, result == result.reverse)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793602
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", true)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphnz6omaq.scala:21)\n\tat Problem.main(tmphnz6omaq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        var result = \"\"\n        for (i <- 0 until\
    \ s.length) {\n            if (!c.contains(s(i))) {\n                result +=\
    \ s(i)\n            }\n        }\n        return (result, result == result.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        val sb = new StringBuilder\n        for (i\
    \ <- 0 until s.length) {\n            if (!c.contains(s(i))) sb.append(s(i))\n\
    \        }\n        val str = sb.toString\n        (str, str == str.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"abcde\"\
    ), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
    ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"\
    ), (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"\
    a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\"\
    )).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"\
    ), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"\
    ), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"mamma\"\
    ), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (s, false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw2elk7hs.scala:21)\n\tat Problem.main(tmpw2elk7hs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp244f4dlm.scala:21)\n\tat Problem.main(tmp244f4dlm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (s, true)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv5zz2e20.scala:21)\n\tat Problem.main(tmpv5zz2e20.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return (\"\", false)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"\
    bcd\", false))));\n    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"\
    acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"\
    cdedc\", true))));\n    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"\
    dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n\
    \    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"abba\", true))));\n\
    \    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\", true))));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0z06ylho.scala:21)\n\tat Problem.main(tmp0z06ylho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Task\n    // We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    // then check\
    \ if the result string is palindrome.\n    // A string is called palindrome if\
    \ it reads the same backward as forward.\n    // You should return a tuple containing\
    \ the result string and true/false for the check.\n    // Example\n    // >>>\
    \ reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>>\
    \ reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>>\
    \ reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def\
    \ reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n      \
    \  // Write your code here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(reverseDelete((\"abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n\
    \    assert(reverseDelete((\"abcdef\"), (\"b\")).equals(((\"acdef\", false))));\n\
    \    assert(reverseDelete((\"abcdedcba\"), (\"ab\")).equals(((\"cdedc\", true))));\n\
    \    assert(reverseDelete((\"dwik\"), (\"w\")).equals(((\"dik\", false))));\n\
    \    assert(reverseDelete((\"a\"), (\"a\")).equals(((\"\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    abcdedcba\"), (\"v\")).equals(((\"abcdedcba\", true))));\n    assert(reverseDelete((\"\
    vabba\"), (\"v\")).equals(((\"abba\", true))));\n    assert(reverseDelete((\"\
    mamma\"), (\"mia\")).equals(((\"\", true))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.Tuple2.equals(Object)\"\
    \ because the return value of \"Problem$.reverseDelete(String, String)\" is null\n\
    \tat Problem$.main(tmp_torjrrl.scala:21)\n\tat Problem.main(tmp_torjrrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793601
