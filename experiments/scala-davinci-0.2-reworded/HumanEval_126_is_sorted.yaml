name: HumanEval_126_is_sorted
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of numbers, return whether or not they are sorted\n    // in\
  \ ascending order. If list has more than 1 duplicate of the same\n    // number,\
  \ return false. Assume no negative numbers and only integers.\n    // Examples\n\
  \    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n    //\
  \ >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
  \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    // (false)\n\
  \    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong,\
  \ 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong,\
  \ 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n    def isSorted(lst\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
  \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
  \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
  \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) == (true));\n\
  \    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
  \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
completions: ["        if (lst.length == 1) return true\n        var prev = lst(0)\n\
    \        for (i <- 1 until lst.length) {\n            if (lst(i) <= prev) return\
    \ false\n            prev = lst(i)\n        }\n        return true", "       \
    \ if (lst.length == 1) {\n            return true\n        }\n        var prev\
    \ = lst(0)\n        for (i <- 1 until lst.length) {\n            if (lst(i) <=\
    \ prev) {\n                return false\n            }\n            prev = lst(i)\n\
    \        }\n        return true", "        var sorted = true\n        var prev\
    \ = -1l\n        for (i <- lst) {\n            if (i <= prev) {\n            \
    \    sorted = false\n            }\n            prev = i\n        }\n        return\
    \ sorted", "        var sorted = true\n        var prev = 0l\n        var count\
    \ = 0\n        for (i <- lst) {\n            if (i < prev) {\n               \
    \ sorted = false\n            }\n            if (i == prev) {\n              \
    \  count += 1\n            }\n            if (count > 1) {\n                sorted\
    \ = false\n            }\n            prev = i\n        }\n        return sorted",
  "        val sorted = lst.sorted\n        val distinct = sorted.distinct\n     \
    \   if (sorted == distinct) true else false", "        var sorted = true\n   \
    \     var previous = 0l\n        for (i <- lst) {\n            if (i < previous)\
    \ {\n                sorted = false\n            }\n            previous = i\n\
    \        }\n        return sorted", "        if (lst.length == 1) return true\n\
    \        var prev = lst(0)\n        for (i <- 1 until lst.length) {\n        \
    \    if (lst(i) <= prev) return false\n            prev = lst(i)\n        }\n\
    \        return true", "        var sorted = true\n        var prev = 0l\n   \
    \     for (i <- lst) {\n            if (i < prev) sorted = false\n           \
    \ prev = i\n        }\n        return sorted", "        var sorted = true\n  \
    \      var prev = 0l\n        for (i <- lst) {\n            if (i < prev) {\n\
    \                sorted = false\n            }\n            prev = i\n       \
    \ }\n        return sorted", "        var sorted = true\n        var prev : Long\
    \ = 0\n        var count : Long = 0\n        for (i <- lst) {\n            if\
    \ (i < prev) {\n                sorted = false\n            }\n            if\
    \ (i == prev) {\n                count += 1\n            }\n            if (count\
    \ > 1) {\n                sorted = false\n            }\n            prev = i\n\
    \        }\n        return sorted", "        var sorted = true\n        var prev\
    \ = 0l\n        var count = 0\n        for (i <- lst) {\n            if (i < prev)\
    \ {\n                sorted = false\n            }\n            if (i == prev)\
    \ {\n                count += 1\n            }\n            if (count > 1) {\n\
    \                sorted = false\n            }\n            prev = i\n       \
    \ }\n        return sorted", "        var sorted = true\n        var prev = 0l\n\
    \        for (i <- lst) {\n            if (i < prev) sorted = false\n        \
    \    prev = i\n        }\n        return sorted", "        var sorted = true\n\
    \        var prev = -1l\n        for (i <- lst) {\n            if (i <= prev)\
    \ {\n                sorted = false\n            }\n            prev = i\n   \
    \     }\n        return sorted", "        val sorted = lst.sorted\n        val\
    \ distinct = sorted.distinct\n        return sorted == distinct", "        var\
    \ sorted = true\n        var prev = lst(0)\n        for (i <- 1 until lst.length)\
    \ {\n            if (lst(i) < prev) {\n                sorted = false\n      \
    \      }\n            prev = lst(i)\n        }\n        return sorted", "    \
    \    var sorted = true\n        var prev = -1\n        for (i <- lst) {\n    \
    \        if (i <= prev) {\n                sorted = false\n            }\n   \
    \         prev = i\n        }\n        return sorted", "        // Fill in the\
    \ code here\n        var sorted = true\n        var prev = 0l\n        for (i\
    \ <- lst) {\n            if (i < prev) {\n                sorted = false\n   \
    \         }\n            prev = i\n        }\n        return sorted", "      \
    \  var sorted = true\n        var prev = 0l\n        var count = 0\n        for\
    \ (i <- lst) {\n            if (i < prev) {\n                sorted = false\n\
    \            }\n            prev = i\n        }\n        return sorted", "   \
    \     if (lst.length == 1) true\n        else if (lst.length == 2) {\n       \
    \     if (lst(0) == lst(1)) false\n            else true\n        }\n        else\
    \ {\n            val left = lst.slice(0, lst.length / 2)\n            val right\
    \ = lst.slice(lst.length / 2, lst.length)\n            val leftSorted = isSorted(left)\n\
    \            val rightSorted = isSorted(right)\n            if (leftSorted &&\
    \ rightSorted) {\n                if (left(left.length - 1) <= right(0)) true\n\
    \                else false\n            }\n            else false\n        }",
  "        if (lst.length == 1) {\n            return true\n        }\n        var\
    \ i = 0\n        while (i < lst.length - 1) {\n            if (lst(i) >= lst(i\
    \ + 1)) {\n                return false\n            }\n            i += 1\n \
    \       }\n        return true"]
stop_tokens:
- "\n    }\n"
