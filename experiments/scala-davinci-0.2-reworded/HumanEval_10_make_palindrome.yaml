name: HumanEval_10_make_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Find the shortest palindrome that begins with a supplied string.\n    //\
  \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
  \ that is a palindrome.\n    // - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
  \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
  \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
  \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
  \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
  xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\"\
  )));\n    }\n\n}\n"
completions: ["        val s = string.toCharArray\n        val n = s.length\n    \
    \    val t = new Array[Int](n)\n        var i = 1; var j = 0\n        while (i\
    \ < n) {\n            if (s(i) == s(j)) {\n                t(i) = j + 1\n    \
    \            i += 1; j += 1\n            } else if (j > 0) j = t(j - 1)\n    \
    \        else {\n                t(i) = 0\n                i += 1\n          \
    \  }\n        }\n        val prefix = string.substring(0, n - t(n - 1))\n    \
    \    string + prefix.reverse", "        val n = string.length\n        val suffix\
    \ = (0 until n).map(i => string.substring(i)).filter(s => s == s.reverse).maxBy(_.length)\n\
    \        val prefix = string.substring(0, n - suffix.length)\n        prefix +\
    \ suffix + prefix.reverse", "        val reversed = string.reverse\n        val\
    \ suffix = string.zip(reversed).takeWhile(x => x._1 == x._2).map(_._1).mkString\n\
    \        val prefix = string.substring(0, string.length - suffix.length)\n   \
    \     string + prefix.reverse", "        val n = string.length\n        val suffix\
    \ = (0 until n).map(i => string.substring(i)).filter(s => s == s.reverse).maxBy(_.length)\n\
    \        val prefix = string.substring(0, n - suffix.length)\n        prefix +\
    \ suffix + prefix.reverse", "        var prefix = string\n        var suffix =\
    \ \"\"\n        while (prefix.length > 0) {\n            if (isPalindrome(prefix))\
    \ {\n                return prefix + suffix\n            }\n            suffix\
    \ = prefix.charAt(0) + suffix\n            prefix = prefix.substring(1)\n    \
    \    }\n        return prefix + suffix", "        val n = string.length\n    \
    \    val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val suffixPalindrome = new StringBuilder(suffix).reverse.toString\n\
    \        if (suffix == suffixPalindrome) return string\n        val prefixPalindrome\
    \ = new StringBuilder(prefix).reverse.toString\n        val suffixPalindromePrefix\
    \ = prefixPalindrome.substring(0, prefixPalindrome.length - suffix.length)\n \
    \       return prefix + suffixPalindromePrefix + suffix", "        // Find the\
    \ longest palindromic suffix.\n        def findLongestPalindromicSuffix(string\
    \ : String) : String = {\n            def findLongestPalindromicSuffix(string\
    \ : String, index : Int) : String = {\n                if (index == string.length)\
    \ \"\"\n                else if (isPalindrome(string.substring(index))) string.substring(index)\n\
    \                else findLongestPalindromicSuffix(string, index + 1)\n      \
    \      }\n            findLongestPalindromicSuffix(string, 0)\n        }\n   \
    \     // Find the longest palindromic prefix.\n        def findLongestPalindromicPrefix(string\
    \ : String) : String = {\n            def findLongestPalindromicPrefix(string\
    \ : String, index : Int) : String = {\n                if (index == -1) \"\"\n\
    \                else if (isPalindrome(string.substring(0, index + 1))) string.substring(0,\
    \ index + 1)\n                else findLongestPalindromicPrefix(string, index\
    \ - 1)\n            }\n            findLongestPalindromicPrefix(string, string.length\
    \ - 1)\n        }\n        // Check if a string is a palindrome.\n        def\
    \ isPalindrome(string : String) : Boolean = {\n            def isPalindrome(string\
    \ : String, index : Int) : Boolean = {\n                if (index == string.length\
    \ / 2) true\n                else if (string(index) != string(string.length -\
    \ index - 1)) false\n                else isPalindrome(string, index + 1)\n  \
    \          }\n            isPalindrome(string, 0)\n        }\n        // Find\
    \ the longest palindromic suffix.\n        val longestPalindromicSuffix = findLongestPalindromicSuffix(string)\n\
    \        // Find the longest palindromic prefix.\n        val longestPalindromicPrefix\
    \ = findLongestPalindromicPrefix(string)\n        // If the longest palindromic\
    \ suffix is the whole string, then the string is already a palindrome.\n     \
    \   if (longestPalindromicSuffix == string) string", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversedPrefix) + 1)\n        val palindrome\
    \ = suffix + reversedPrefix.substring(reversedPrefix.indexOf(palindromeSuffix))\n\
    \        palindrome", "        val palindromeSuffix = string.suffixes.find(s =>\
    \ s.length > 0 && s == s.reverse).get\n        val palindromePrefix = string.substring(0,\
    \ string.length - palindromeSuffix.length)\n        palindromePrefix + palindromeSuffix\
    \ + palindromePrefix.reverse", "        val n = string.length\n        val suffix\
    \ = string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reverse = prefix.reverse\n        val palindrome = suffix + reverse\n\
    \        val longest = longestPalindrome(palindrome)\n        val prefixToAppend\
    \ = palindrome.substring(longest.length, palindrome.length)\n        val result\
    \ = prefixToAppend + palindrome\n        result", "        val palindromeSuffix\
    \ = string.substring(0, string.length - string.reverse.indexOf(string.reverse.intersect(string)))\n\
    \        val prefix = string.substring(palindromeSuffix.length)\n        prefix\
    \ + string", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val reversePrefix\
    \ = prefix.reverse\n        val palindromeSuffix = suffix.reverse\n        if\
    \ (suffix == palindromeSuffix) return string\n        val suffixLength = suffix.length\n\
    \        for (i <- 1 to suffixLength) {\n            val suffixSubstring = suffix.substring(0,\
    \ suffixLength - i)\n            val palindromeSuffixSubstring = suffixSubstring.reverse\n\
    \            if (suffixSubstring == palindromeSuffixSubstring) return prefix +\
    \ suffixSubstring + reversePrefix\n        }\n        throw new Exception(\"Unable\
    \ to find palindrome suffix\")", "        def findLongestPalindrome(string : String)\
    \ : String = {\n            def isPalindrome(string : String) : Boolean = {\n\
    \                val length = string.length\n                for (i <- 0 until\
    \ length / 2) {\n                    if (string(i) != string(length - 1 - i))\
    \ return false\n                }\n                return true\n            }\n\
    \            for (i <- string.length to 0 by -1) {\n                val substring\
    \ = string.substring(string.length - i)\n                if (isPalindrome(substring))\
    \ return substring\n            }\n            return \"\"\n        }\n      \
    \  val palindrome = findLongestPalindrome(string)\n        val prefix = string.substring(0,\
    \ string.length - palindrome.length)\n        return string + prefix.reverse",
  "        val n = string.length\n        val s = string + \"#\" + string.reverse\n\
    \        val z = Array.fill(s.length)(0)\n        var l = 0; var r = 0\n     \
    \   for (i <- 1 until s.length) {\n            if (i > r) {\n                l\
    \ = i; r = i\n                while (r < s.length && s(r - l) == s(r)) r += 1\n\
    \                z(i) = r - l; r -= 1\n            } else {\n                val\
    \ k = i - l\n                if (z(k) < r - i + 1) z(i) = z(k)\n             \
    \   else {\n                    l = i;\n                    while (r < s.length\
    \ && s(r - l) == s(r)) r += 1\n                    z(i) = r - l; r -= 1\n    \
    \            }\n            }\n        }\n        return string + string.substring(n\
    \ - z(n + 1), n).reverse", "        val length = string.length\n        var i\
    \ = 0\n        var j = length - 1\n        var k = 0\n        while (i < j) {\n\
    \            if (string(i) == string(j)) {\n                i += 1\n         \
    \       j -= 1\n            } else {\n                i = 0\n                k\
    \ += 1\n                j = length - 1 - k\n            }\n        }\n       \
    \ val prefix = string.substring(0, length - k)\n        val suffix = string.substring(length\
    \ - k)\n        prefix + suffix.reverse", "        val n = string.length\n   \
    \     val s = string + \"#\" + string.reverse\n        val pi = new Array[Int](s.length)\n\
    \        for (i <- 1 until s.length) {\n            var j = pi(i - 1)\n      \
    \      while (j > 0 && s(i) != s(j)) j = pi(j - 1)\n            if (s(i) == s(j))\
    \ j += 1\n            pi(i) = j\n        }\n        string + string.substring(pi(s.length\
    \ - 1)).reverse", "        val n = string.length\n        if (n == 0) return \"\
    \"\n        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix + reversedPrefix\n        val palindrome = palindromeSuffix + string\n\
    \        palindrome", "        val n = string.length\n        val longestPalindromeSuffix\
    \ = (0 until n).find(i => string.substring(i) == string.substring(i).reverse).getOrElse(0)\n\
    \        string + string.substring(0, n - longestPalindromeSuffix).reverse", " \
    \       val n = string.length\n        val suffix = new Array[Int](n)\n      \
    \  var i = 0\n        var j = 1\n        while (j < n) {\n            if (string(i)\
    \ == string(j)) {\n                suffix(j) = i + 1\n                i += 1\n\
    \            } else {\n                if (i == 0) {\n                    suffix(j)\
    \ = 0\n                } else {\n                    i = suffix(i - 1)\n     \
    \               j -= 1\n                }\n            }\n            j += 1\n\
    \        }\n        val prefix = string.substring(0, n - suffix(n - 1))\n    \
    \    string + prefix.reverse", "        val n = string.length\n        val suffix\
    \ = string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(0,\
    \ suffix.indexOf(reversedPrefix))\n        val palindromePrefix = reversedPrefix.substring(reversedPrefix.indexOf(palindromeSuffix))\n\
    \        palindromePrefix + string + palindromeSuffix.reverse", "        val n\
    \ = string.length\n        var i = n - 1\n        while (i >= 0) {\n         \
    \   if (isPalindrome(string.substring(i))) {\n                val prefix = string.substring(0,\
    \ i)\n                return string + reverse(prefix)\n            }\n       \
    \     i -= 1\n        }\n        return string", "        val n = string.length\n\
    \        val longestPalindrome = Array.fill(n + 1)(0)\n        for (i <- 0 until\
    \ n) {\n            var j = 0\n            while (i - j >= 0 && i + j < n && string(i\
    \ - j) == string(i + j)) {\n                longestPalindrome(i + j + 1) = max(longestPalindrome(i\
    \ + j + 1), j + 1)\n                j += 1\n            }\n            j = 1\n\
    \            while (i - j + 1 >= 0 && i + j < n && string(i - j + 1) == string(i\
    \ + j)) {\n                longestPalindrome(i + j + 1) = max(longestPalindrome(i\
    \ + j + 1), j + 1)\n                j += 1\n            }\n        }\n       \
    \ val prefix = string.substring(0, n - longestPalindrome(n))\n        prefix +\
    \ prefix.reverse + string", "        val n = string.length\n        val dp = Array.ofDim[Int](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 1\n            if\
    \ (i > 0) dp(i - 1)(i) = if (string(i - 1) == string(i)) 2 else 1\n        }\n\
    \        for (k <- 2 until n) {\n            for (i <- 0 until n - k) {\n    \
    \            val j = i + k\n                dp(i)(j) = if (string(i) == string(j))\
    \ dp(i + 1)(j - 1) + 2 else max(dp(i + 1)(j), dp(i)(j - 1))\n            }\n \
    \       }\n        val palindromeLength = dp(0)(n - 1)\n        val prefix = string.substring(0,\
    \ n - palindromeLength)\n        val suffix = string.substring(n - palindromeLength,\
    \ n)\n        prefix + suffix + prefix.reverse", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversePrefix = prefix.reverse\n        val palindromeSuffix\
    \ = findLongestPalindrome(suffix)\n        val palindrome = string + reversePrefix.substring(reversePrefix.length\
    \ - (suffix.length - palindromeSuffix.length))\n        palindrome", "       \
    \ var longestPalindrome = \"\"\n        for (i <- 0 to string.length) {\n    \
    \        val prefix = string.substring(0, i)\n            val suffix = string.substring(i)\n\
    \            if (prefix == suffix.reverse) {\n                longestPalindrome\
    \ = suffix\n                break\n            }\n        }\n        string +\
    \ longestPalindrome.reverse", "        val n = string.length\n        if (n ==\
    \ 0) return \"\"\n        var i = n - 1\n        while (i >= 0) {\n          \
    \  if (string(i) == string(0)) {\n                var j = 0\n                while\
    \ (j < i) {\n                    if (string(j) != string(i - j)) break\n     \
    \               j += 1\n                }\n                if (j == i) return\
    \ string + string.substring(i + 1).reverse\n            }\n            i -= 1\n\
    \        }\n        return string + string.reverse.substring(1)", "        val\
    \ n = string.length\n        val suffix = string.substring(n / 2)\n        val\
    \ prefix = string.substring(0, n / 2)\n        val palindrome = suffix + prefix.reverse\n\
    \        palindrome", "        def makePalindrome(string : String, index : Int)\
    \ : String = {\n            if (index == string.length) string\n            else\
    \ if (string.substring(0, index) == string.substring(string.length - index, string.length).reverse)\
    \ makePalindrome(string, index + 1)\n            else string + string.substring(0,\
    \ string.length - index).reverse\n        }\n        makePalindrome(string, 0)",
  "        val longestPalindromeSuffix = string.suffixes.filter(s => s.length > 0\
    \ && s.reverse == s).maxBy(_.length)\n        string + string.substring(0, string.length\
    \ - longestPalindromeSuffix.length).reverse", "        val reversed = string.reverse\n\
    \        val stringLength = string.length\n        val reversedLength = reversed.length\n\
    \        val length = stringLength + reversedLength\n        val matrix = Array.ofDim[Int](stringLength\
    \ + 1, reversedLength + 1)\n        for (i <- 0 to stringLength) {\n         \
    \   matrix(i)(0) = 0\n        }\n        for (j <- 0 to reversedLength) {\n  \
    \          matrix(0)(j) = 0\n        }\n        for (i <- 1 to stringLength) {\n\
    \            for (j <- 1 to reversedLength) {\n                if (string(i -\
    \ 1) == reversed(j - 1)) {\n                    matrix(i)(j) = matrix(i - 1)(j\
    \ - 1) + 1\n                } else {\n                    matrix(i)(j) = max(matrix(i\
    \ - 1)(j), matrix(i)(j - 1))\n                }\n            }\n        }\n  \
    \      val palindromeLength = matrix(stringLength)(reversedLength)\n        val\
    \ prefixLength = stringLength - palindromeLength\n        val prefix = string.substring(0,\
    \ prefixLength)\n        val suffix = string.substring(prefixLength)\n       \
    \ prefix + suffix + prefix.reverse", "        val length = string.length\n   \
    \     val suffix = string.substring(length / 2, length)\n        val prefix =\
    \ string.substring(0, length / 2)\n        val suffixPalindrome = suffix + prefix.reverse\n\
    \        if (suffixPalindrome == string) string else suffixPalindrome", "    \
    \    val n = string.length\n        val suffix = new Array[Int](n)\n        var\
    \ i = 0\n        var j = 1\n        while (j < n) {\n            if (string(i)\
    \ == string(j)) {\n                suffix(j) = i + 1\n                i += 1\n\
    \                j += 1\n            } else {\n                if (i == 0) {\n\
    \                    suffix(j) = 0\n                    j += 1\n             \
    \   } else {\n                    i = suffix(i - 1)\n                }\n     \
    \       }\n        }\n        val prefix = string.substring(0, n - suffix(n -\
    \ 1))\n        string + prefix.reverse", "        val n = string.length\n    \
    \    val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversedPrefix) + 1)\n        string +\
    \ reversedPrefix.substring(palindromeSuffix.length)", "        val palindromeSuffix\
    \ = longestPalindromeSuffix(string)\n        val prefix = string.substring(0,\
    \ string.length - palindromeSuffix.length)\n        prefix + palindromeSuffix\
    \ + prefix.reverse", "        val prefix = string.substring(0, string.length -\
    \ longestPalindromeSuffix(string).length)\n        string + prefix.reverse", " \
    \       val length = string.length\n        val palindrome = Array.ofDim[Int](length)\n\
    \        var i = 0\n        while (i < length) {\n            var j = 0\n    \
    \        while (i - j >= 0 && i + j < length && string(i - j) == string(i + j))\
    \ j += 1\n            palindrome(i) = j\n            var k = 1\n            while\
    \ (i - k >= 0 && i + k < length && k + palindrome(i - k) < j) {\n            \
    \    palindrome(i + k) = palindrome(i - k)\n                k += 1\n         \
    \   }\n            i += k\n        }\n        val max = palindrome.max\n     \
    \   val prefix = string.substring(max)\n        val suffix = prefix.reverse\n\
    \        string + suffix", "        val palindromeSuffix = longestPalindromeSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - palindromeSuffix.length)\n\
    \        prefix + palindromeSuffix + prefix.reverse", "        val suffix = string.substring(string.length\
    \ / 2)\n        val prefix = string.substring(0, string.length / 2)\n        val\
    \ palindrome = suffix + prefix.reverse\n        palindrome", "        val n =\
    \ string.length\n        val suffix = string.substring(n / 2)\n        val prefix\
    \ = string.substring(0, n / 2)\n        val palindrome = suffix + prefix.reverse\n\
    \        palindrome", "        def findPalindrome(string : String) : String =\
    \ {\n            val n = string.length\n            for (i <- n to 0 by -1) {\n\
    \                val prefix = string.substring(0, i)\n                val postfix\
    \ = string.substring(n - i, n)\n                if (prefix == postfix) return\
    \ postfix\n            }\n            return \"\"\n        }\n        val palindrome\
    \ = findPalindrome(string)\n        val prefix = string.substring(0, string.length\
    \ - palindrome.length)\n        return string + prefix.reverse", "        val\
    \ n = string.length\n        val s = string + string.reverse\n        val z =\
    \ Array.fill(s.length)(0)\n        var l = 0; var r = 0\n        for (i <- 1 until\
    \ s.length) {\n            if (i > r) {\n                l = i; r = i\n      \
    \          while (r < s.length && s(r - l) == s(r)) r += 1\n                z(i)\
    \ = r - l; r -= 1\n            } else {\n                val k = i - l\n     \
    \           if (z(k) < r - i + 1) z(i) = z(k)\n                else {\n      \
    \              l = i\n                    while (r < s.length && s(r - l) == s(r))\
    \ r += 1\n                    z(i) = r - l; r -= 1\n                }\n      \
    \      }\n        }\n        string + string.substring(n - z(n)).reverse", " \
    \       val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromeSuffix.length)", "      \
    \  val n = string.length\n        val suffix = string.substring(n / 2, n)\n  \
    \      val prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix))\n\
    \        val palindromePrefix = reversedPrefix.substring(reversedPrefix.indexOf(palindromeSuffix))\n\
    \        palindromePrefix + string + palindromeSuffix.reverse", "        val n\
    \ = string.length\n        val suffix = string.substring(n / 2, n)\n        val\
    \ prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindrome = suffix + reversedPrefix\n        if (palindrome.length\
    \ == n) palindrome else palindrome + suffix", "        def makePalindrome(string\
    \ : String, index : Int) : String = {\n            if (index == string.length)\
    \ string\n            else if (isPalindrome(string, index)) string\n         \
    \   else makePalindrome(string + string.substring(0, string.length - index).reverse,\
    \ index + 1)\n        }\n        makePalindrome(string, 0)", "        val n =\
    \ string.length\n        val longestPalindromeSuffix = Array.fill(n)(0)\n    \
    \    var center = 0\n        var right = 0\n        for (i <- 0 until n) {\n \
    \           val iMirror = 2 * center - i\n            if (right > i) {\n     \
    \           longestPalindromeSuffix(i) = min(right - i, longestPalindromeSuffix(iMirror))\n\
    \            }\n            var a = i - 1 - longestPalindromeSuffix(i)\n     \
    \       var b = i + 1 + longestPalindromeSuffix(i)\n            while (a >= 0\
    \ && b < n && string(a) == string(b)) {\n                longestPalindromeSuffix(i)\
    \ += 1\n                a -= 1\n                b += 1\n            }\n      \
    \      if (i + longestPalindromeSuffix(i) > right) {\n                center =\
    \ i\n                right = i + longestPalindromeSuffix(i)\n            }\n \
    \       }\n        val longestPalindromeSuffixLength = longestPalindromeSuffix.max\n\
    \        val prefix = string.substring(0, n - longestPalindromeSuffixLength)\n\
    \        val prefixReversed = prefix.reverse\n        string + prefixReversed",
  "        var suffix = string\n        var prefix = \"\"\n        while (!isPalindrome(suffix))\
    \ {\n            prefix = string(string.length - suffix.length - 1) + prefix\n\
    \            suffix = string.substring(string.length - suffix.length - 1)\n  \
    \      }\n        string + prefix", "        val len = string.length\n       \
    \ var i = 0\n        var j = len - 1\n        while (i < j) {\n            if\
    \ (string(i) != string(j)) {\n                return string.substring(0, j) +\
    \ string.substring(j, len).reverse + string\n            }\n            i += 1\n\
    \            j -= 1\n        }\n        string + string.reverse", "        val\
    \ n = string.length\n        if (n == 0) return \"\"\n        val suffix = string.substring(n\
    \ / 2)\n        val prefix = string.substring(0, n / 2)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix)\
    \ + 1)\n        val palindromePrefix = reversedPrefix.substring(reversedPrefix.indexOf(palindromeSuffix)\
    \ + 1)\n        return prefix + palindromeSuffix + palindromePrefix.reverse",
  "        val n = string.length\n        val dp = Array.ofDim[Int](n, n)\n      \
    \  for (i <- 0 until n) {\n            dp(i)(i) = 1\n            if (i < n - 1)\
    \ {\n                if (string(i) == string(i + 1)) dp(i)(i + 1) = 2\n      \
    \          else dp(i)(i + 1) = 1\n            }\n        }\n        for (k <-\
    \ 2 until n) {\n            for (i <- 0 until n - k) {\n                val j\
    \ = i + k\n                if (string(i) == string(j)) dp(i)(j) = dp(i + 1)(j\
    \ - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n\
    \            }\n        }\n        val palindrome = string.substring(n - dp(0)(n\
    \ - 1), n)\n        val prefix = string.substring(0, n - dp(0)(n - 1))\n     \
    \   return prefix + palindrome.reverse + palindrome", "        def findLongestPalindrome(string\
    \ : String) : String = {\n            def findLongestPalindrome(string : String,\
    \ start : Int, end : Int) : String = {\n                if (start < 0 || end >=\
    \ string.length) return \"\"\n                if (string(start) != string(end))\
    \ return \"\"\n                val palindrome = string.substring(start, end +\
    \ 1)\n                if (palindrome.length > 1 && palindrome == palindrome.reverse)\
    \ palindrome\n                else findLongestPalindrome(string, start - 1, end\
    \ + 1)\n            }\n            var longestPalindrome = \"\"\n            for\
    \ (i <- 0 until string.length) {\n                val palindrome = findLongestPalindrome(string,\
    \ i, i)\n                if (palindrome.length > longestPalindrome.length) longestPalindrome\
    \ = palindrome\n                val palindrome2 = findLongestPalindrome(string,\
    \ i, i + 1)\n                if (palindrome2.length > longestPalindrome.length)\
    \ longestPalindrome = palindrome2\n            }\n            longestPalindrome\n\
    \        }\n        val longestPalindrome = findLongestPalindrome(string)\n  \
    \      if (longestPalindrome.length == string.length) string\n        else string\
    \ + string.substring(0, string.length - longestPalindrome.length).reverse", " \
    \       val n = string.length\n        val m = 2 * n + 1\n        val t = new\
    \ Array[Int](m)\n        var l = 0\n        var r = 0\n        for (i <- 0 until\
    \ m) {\n            val j = 2 * l - i\n            if (i < r) t(i) = min(r - i,\
    \ t(j))\n            var k = i + t(i) + 1\n            while (k < m && 2 * i -\
    \ k >= 0 && string(k / 2) == string(2 * i - k / 2)) {\n                t(i) +=\
    \ 1\n                k += 1\n            }\n            if (i + t(i) > r) {\n\
    \                l = i\n                r = i + t(i)\n            }\n        }\n\
    \        val max = t.max\n        val prefix = string.substring(0, n - max)\n\
    \        val suffix = string.substring(n - max)\n        prefix + suffix + prefix.reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix)\
    \ + reversedPrefix.length)\n        string + reversedPrefix.substring(palindromeSuffix.length)",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.reverse.zip(suffix).takeWhile(x\
    \ => x._1 == x._2).map(_._1).mkString\n        val palindromePrefix = reversedPrefix.reverse.zip(reversedPrefix).takeWhile(x\
    \ => x._1 == x._2).map(_._1).mkString\n        prefix + palindromeSuffix + palindromePrefix",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.length\
    \ - suffix.indexOf(reversedPrefix))\n        val palindrome = string + reversedPrefix.substring(reversedPrefix.length\
    \ - palindromeSuffix.length)\n        palindrome", "        val palindromeSuffix\
    \ = findPalindromeSuffix(string)\n        val prefix = string.substring(0, string.length\
    \ - palindromeSuffix.length)\n        string + reverse(prefix)", "        val\
    \ n = string.length\n        val suffix = string.substring(n / 2, n)\n       \
    \ val prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromeSuffix = findLongestPalindromeSuffix(suffix)\n        val\
    \ palindromePrefix = reversedPrefix.substring(reversedPrefix.length - (suffix.length\
    \ - palindromeSuffix.length))\n        palindromePrefix + suffix", "        val\
    \ longestPalindromeSuffix = string.suffixes.filter(s => s.length > 0 && s.reverse\
    \ == s).maxBy(_.length)\n        val prefix = string.substring(0, string.length\
    \ - longestPalindromeSuffix.length)\n        string + prefix.reverse", "     \
    \   val length = string.length\n        val reversed = string.reverse\n      \
    \  val suffix = string.substring(0, length - reversed.indexOf(string))\n     \
    \   string + reversed.substring(suffix.length)", "        val n = string.length\n\
    \        val longestPalindromeSuffix = (0 until n).find(i => string.substring(i)\
    \ == string.substring(i).reverse).getOrElse(0)\n        string + string.substring(0,\
    \ n - longestPalindromeSuffix).reverse", "        val suffix = string.reverse.takeWhile(c\
    \ => string.startsWith(c.toString))\n        val prefix = string.drop(suffix.length)\n\
    \        prefix + suffix + prefix.reverse", "        val n = string.length\n \
    \       val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversePrefix = prefix.reverse\n        val palindrome =\
    \ suffix + reversePrefix\n        val palindromeLength = palindrome.length\n \
    \       val palindromeSuffix = palindrome.substring(palindromeLength / 2, palindromeLength)\n\
    \        val palindromePrefix = palindrome.substring(0, palindromeLength / 2)\n\
    \        val palindromeSuffixLength = palindromeSuffix.length\n        val palindromePrefixLength\
    \ = palindromePrefix.length\n        var i = 0\n        while (i < palindromeSuffixLength\
    \ && i < palindromePrefixLength && palindromeSuffix(i) == palindromePrefix(i))\
    \ {\n            i += 1\n        }\n        val palindromeSuffixPrefix = palindromeSuffix.substring(0,\
    \ i)\n        val palindromePrefixSuffix = palindromePrefix.substring(palindromePrefixLength\
    \ - i, palindromePrefixLength)\n        val palindromeSuffixPrefixLength = palindromeSuffixPrefix.length\n\
    \        val palindromePrefixSuffixLength = palindromePrefixSuffix.length\n  \
    \      var j = 0\n        while (j < palindromeSuffixPrefixLength && j < palindromePrefixSuffixLength\
    \ && palindromeSuffixPrefix(palindromeSuffixPrefixLength - j - 1) == palindromePrefixSuffix(j))\
    \ {\n            j += 1\n        }\n        val palindromeSuffixPrefixSuffix =\
    \ palindromeSuffixPrefix.substring(palindromeSuffixPrefixLength - j, palindromeSuffixPrefixLength)\n\
    \        val palindromePrefixSuffixPrefix = palindromePrefixSuffix.substring(0,\
    \ j)\n        val palindromeSuffixPrefixSuffixLength = palindromeSuffixPrefixS",
  "        val longestPalindrome = longestPalindromeSuffix(string)\n        val prefix\
    \ = string.substring(0, string.length - longestPalindrome.length)\n        prefix\
    \ + string + prefix.reverse", "        val n = string.length\n        val suffix\
    \ = string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val suffixPalindrome = suffix + prefix.reverse\n        val prefixPalindrome\
    \ = prefix + suffix.reverse\n        if (suffixPalindrome.length < prefixPalindrome.length)\
    \ suffixPalindrome else prefixPalindrome", "        val n = string.length\n  \
    \      val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = reversedPrefix.substring(0, reversedPrefix.indexOf(suffix))\n        string\
    \ + reversedPrefix.substring(palindromeSuffix.length)", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix + reversedPrefix\n        val palindrome = palindromeSuffix + string\n\
    \        return palindrome", "        val longestPalindrome = longestPalindromeSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        prefix + string + prefix.reverse", "        val n = string.length\n \
    \       val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversePrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.reverse\n        val suffixLength = suffix.length\n        val prefixLength\
    \ = prefix.length\n        var longestPalindromeSuffixLength = 0\n        for\
    \ (i <- 0 to suffixLength) {\n            val suffixSubstring = suffix.substring(0,\
    \ i)\n            val reverseSuffixSubstring = suffixSubstring.reverse\n     \
    \       if (suffixSubstring == reverseSuffixSubstring) {\n                longestPalindromeSuffixLength\
    \ = i\n            }\n        }\n        val palindromeSuffixLength = suffixLength\
    \ - longestPalindromeSuffixLength\n        val palindromePrefix = reversePrefix.substring(0,\
    \ palindromeSuffixLength)\n        val palindrome = prefix + palindromeSuffix\
    \ + palindromePrefix\n        palindrome", "        val n = string.length\n  \
    \      val suffix = string.substring(n - 1, n)\n        val prefix = string.substring(0,\
    \ 1)\n        if (suffix == prefix) {\n            return string + string.substring(1,\
    \ n - 1).reverse + suffix\n        }\n        else {\n            return string\
    \ + string.substring(0, n - 1).reverse\n        }", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val suffixPalindrome = suffix.substring(0, suffix.length - suffix.reverse.indexOf(suffix))\n\
    \        string + suffixPalindrome.reverse", "        def findLongestPalindrome(string\
    \ : String) : String = {\n            def findLongestPalindrome(string : String,\
    \ start : Int, end : Int) : String = {\n                if (start == end) string.substring(start,\
    \ end + 1)\n                else if (string(start) == string(end)) findLongestPalindrome(string,\
    \ start + 1, end - 1)\n                else {\n                    val left =\
    \ findLongestPalindrome(string, start + 1, end)\n                    val right\
    \ = findLongestPalindrome(string, start, end - 1)\n                    if (left.length\
    \ > right.length) left else right\n                }\n            }\n        \
    \    findLongestPalindrome(string, 0, string.length - 1)\n        }\n        val\
    \ longestPalindrome = findLongestPalindrome(string)\n        val prefix = string.substring(0,\
    \ string.length - longestPalindrome.length)\n        string + prefix.reverse",
  "        val longestPalindrome = longestPalindromeSuffix(string)\n        val prefix\
    \ = string.substring(0, string.length - longestPalindrome.length)\n        val\
    \ reversePrefix = prefix.reverse\n        string + reversePrefix", "        val\
    \ n = string.length\n        val suffix = string.substring(n / 2, n)\n       \
    \ val prefix = string.substring(0, n / 2)\n        val suffixPalindrome = suffix\
    \ + prefix.reverse\n        val prefixPalindrome = prefix + suffix.reverse\n \
    \       if (suffixPalindrome.length < prefixPalindrome.length) suffixPalindrome\
    \ else prefixPalindrome", "        val longestPalindrome = longestPalindromePostfix(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        prefix + string + prefix.reverse", "        val n = string.length\n \
    \       val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversedPrefix) + 1)\n        val palindrome\
    \ = string + reversedPrefix.substring(reversedPrefix.indexOf(palindromeSuffix))\n\
    \        palindrome", "        val n = string.length\n        var i = 0\n    \
    \    var j = n - 1\n        while (i < j) {\n            if (string(i) != string(j))\
    \ {\n                return string.substring(0, j) + string.substring(j, n).reverse\
    \ + string\n            }\n            i += 1\n            j -= 1\n        }\n\
    \        string + string.reverse", "        val palindrome = string.substring(0,\
    \ string.length - longestPalindromeSuffix(string).length)\n        string + palindrome.reverse",
  "        def makePalindrome(string : String, index : Int) : String = {\n       \
    \     if (index == string.length) string\n            else if (string.substring(0,\
    \ index) == string.substring(string.length - index, string.length).reverse) makePalindrome(string,\
    \ index + 1)\n            else string + string.substring(0, string.length - index).reverse\n\
    \        }\n        makePalindrome(string, 0)", "        val longestPalindrome\
    \ = longestPalindromeSuffix(string)\n        val prefix = string.substring(0,\
    \ string.length - longestPalindrome.length)\n        val reversePrefix = prefix.reverse\n\
    \        string + reversePrefix", "        val n = string.length\n        val\
    \ suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversedPrefix) + 1)\n        string +\
    \ reversedPrefix.substring(palindromeSuffix.length)", "        def findLongestPalindrome(string\
    \ : String) : String = {\n            def findLongestPalindrome(string : String,\
    \ start : Int, end : Int) : String = {\n                if (start < 0 || end >=\
    \ string.length) return \"\"\n                if (string(start) != string(end))\
    \ return \"\"\n                val palindrome = string.substring(start, end +\
    \ 1)\n                if (palindrome.length == 1) return palindrome\n        \
    \        if (palindrome.length == 2) return if (palindrome(0) == palindrome(1))\
    \ palindrome else \"\"\n                if (palindrome.length == 3) return if\
    \ (palindrome(0) == palindrome(2)) palindrome else \"\"\n                val left\
    \ = findLongestPalindrome(string, start - 1, end + 1)\n                if (left.length\
    \ > 0) return left\n                val right = findLongestPalindrome(string,\
    \ start + 1, end - 1)\n                if (right.length > 0) return right\n  \
    \              return \"\"\n            }\n            val palindrome = findLongestPalindrome(string,\
    \ 0, 0)\n            if (palindrome.length > 0) return palindrome\n          \
    \  return findLongestPalindrome(string, 0, 1)\n        }\n        val palindrome\
    \ = findLongestPalindrome(string)\n        if (palindrome.length == string.length)\
    \ return string\n        return string + string.substring(0, string.length - palindrome.length).reverse",
  "        val n = string.length\n        val suffix = string.substring(n - 1, n)\n\
    \        val prefix = string.substring(0, 1)\n        if (suffix == prefix) {\n\
    \            return string + string.substring(1, n - 1).reverse + suffix\n   \
    \     }\n        return string + string.substring(0, n - 1).reverse", "      \
    \  // Find the longest postfix of supplied string that is a palindrome.\n    \
    \    def findLongestPalindromicSuffix(string : String) : String = {\n        \
    \    def findLongestPalindromicSuffix(string : String, index : Int) : String =\
    \ {\n                if (index == string.length) \"\"\n                else if\
    \ (string.substring(index) == string.substring(index).reverse) string.substring(index)\n\
    \                else findLongestPalindromicSuffix(string, index + 1)\n      \
    \      }\n            findLongestPalindromicSuffix(string, 0)\n        }\n   \
    \     // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n        def appendReversePrefix(string : String,\
    \ palindromicSuffix : String) : String = {\n            string + string.substring(0,\
    \ string.length - palindromicSuffix.length).reverse\n        }\n        appendReversePrefix(string,\
    \ findLongestPalindromicSuffix(string))", "        val suffix = string.reverse.dropWhile(c\
    \ => string.indexOf(c) < 0)\n        val prefix = string.take(string.length -\
    \ suffix.length)\n        prefix + suffix + prefix.reverse", "        val n =\
    \ string.length\n        val suffix = string.substring(n / 2, n)\n        val\
    \ prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindrome = suffix + reversedPrefix\n        val reversedPalindrome\
    \ = palindrome.reverse\n        val reversedSuffix = reversedPalindrome.substring(0,\
    \ n / 2)\n        val reversedPrefix2 = reversedPalindrome.substring(n / 2, n)\n\
    \        val prefix2 = reversedPrefix2.reverse\n        val palindrome2 = prefix2\
    \ + reversedSuffix\n        palindrome2", "        val length = string.length\n\
    \        val suffix = string.substring(length / 2)\n        val prefix = string.substring(0,\
    \ length / 2)\n        val palindrome = suffix + prefix.reverse\n        palindrome",
  "        val n = string.length\n        val suffix = string.substring(n / 2)\n \
    \       val prefix = string.substring(0, n / 2)\n        val reversePrefix = prefix.reverse\n\
    \        val palindromeSuffix = (1 to n).find(i => suffix.substring(0, i) == reversePrefix.substring(n\
    \ - i)).getOrElse(0)\n        string + reversePrefix.substring(n - palindromeSuffix)",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindrome = suffix + reversedPrefix\n        if\
    \ (palindrome.length == n) palindrome\n        else palindrome + suffix", "  \
    \      val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversePrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.reverse.zip(suffix).takeWhile(x\
    \ => x._1 == x._2).map(_._1).mkString\n        val palindromeSuffixLength = palindromeSuffix.length\n\
    \        val prefixToAppend = reversePrefix.substring(palindromeSuffixLength,\
    \ reversePrefix.length)\n        string + prefixToAppend", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversePrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(suffix.indexOf(reversePrefix))\n        string + reversePrefix.substring(palindromeSuffix.length)",
  "        val n = string.length\n        val suffix = string.substring(n / 2)\n \
    \       val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix.reverse\n        val prefixPalindrome = prefix.reverse\n        val\
    \ suffixPalindromeIndex = suffix.indexOf(suffixPalindrome)\n        val prefixPalindromeIndex\
    \ = prefix.indexOf(prefixPalindrome)\n        if (suffixPalindromeIndex == -1\
    \ && prefixPalindromeIndex == -1) {\n            string + prefixPalindrome\n \
    \       } else if (suffixPalindromeIndex == -1) {\n            string + suffixPalindrome\n\
    \        } else if (prefixPalindromeIndex == -1) {\n            string + prefixPalindrome\n\
    \        } else {\n            string + suffixPalindrome\n        }", "      \
    \  val n = string.length\n        val s = string + \"#\" + string.reverse\n  \
    \      val z = Array.fill(s.length)(0)\n        var l = 0; var r = 0\n       \
    \ for (i <- 1 until s.length) {\n            if (i <= r) z(i) = min(z(i - l),\
    \ r - i + 1)\n            while (i + z(i) < s.length && s(z(i)) == s(i + z(i)))\
    \ z(i) += 1\n            if (i + z(i) - 1 > r) {\n                l = i; r = i\
    \ + z(i) - 1\n            }\n        }\n        string + string.substring(z(s.length\
    \ - 1), n).reverse", "        val n = string.length\n        val longestPalindromeSuffix\
    \ = (0 until n).find(i => string.substring(i) == string.substring(i).reverse).getOrElse(0)\n\
    \        string + string.substring(0, n - longestPalindromeSuffix).reverse", " \
    \       val n = string.length\n        val suffix = (0 until n).find(i => string.substring(i)\
    \ == string.substring(i).reverse).getOrElse(0)\n        string + string.substring(0,\
    \ n - suffix).reverse", "        val longestPalindrome = string.zipWithIndex.foldLeft((\"\
    \", 0))((longestPalindrome, charWithIndex) => {\n            val (char, index)\
    \ = charWithIndex\n            val (longestPalindromeString, longestPalindromeIndex)\
    \ = longestPalindrome\n            val newPalindrome = string.substring(index\
    \ - longestPalindromeIndex - 1, index + 1)\n            if (newPalindrome.length\
    \ > longestPalindromeString.length && newPalindrome == newPalindrome.reverse)\
    \ (newPalindrome, index) else longestPalindrome\n        })._1\n        string\
    \ + string.substring(0, string.length - longestPalindrome.length).reverse", " \
    \       val n = string.length\n        val suffix = string.substring(n / 2)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val reversedSuffix = suffix.reverse\n        val palindrome\
    \ = reversedPrefix + suffix\n        val palindromeSuffix = palindrome.substring(n\
    \ / 2)\n        val palindromePrefix = palindrome.substring(0, n / 2)\n      \
    \  val palindromeSuffixLength = palindromeSuffix.length\n        val palindromePrefixLength\
    \ = palindromePrefix.length\n        val palindromeSuffixReverse = palindromeSuffix.reverse\n\
    \        val palindromePrefixReverse = palindromePrefix.reverse\n        val palindromeSuffixReverseLength\
    \ = palindromeSuffixReverse.length\n        val palindromePrefixReverseLength\
    \ = palindromePrefixReverse.length\n        val palindromeSuffixReversePrefix\
    \ = palindromeSuffixReverse.substring(0, palindromeSuffixReverseLength - palindromePrefixLength)\n\
    \        val palindromePrefixReverseSuffix = palindromePrefixReverse.substring(palindromePrefixReverseLength\
    \ - palindromeSuffixLength)\n        val palindromeSuffixReversePrefixLength =\
    \ palindromeSuffixReversePrefix.length\n        val palindromePrefixReverseSuffixLength\
    \ = palindromePrefixReverseSuffix.length\n        val palindromeSuffixReversePrefixReverse\
    \ = palindromeSuffixReversePrefix.reverse\n        val palindromePrefixReverseSuffixReverse\
    \ = palindromePrefixReverseSuffix.reverse\n        val palindromeSuffixReversePrefixReverseLength\
    \ = palindromeSuffixReversePrefixReverse.length\n        val palindromePrefixReverseSuffixReverseLength\
    \ = palindromePrefixRever", "        val suffix = longestPalindromicSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - suffix.length)\n   \
    \     prefix + suffix + prefix.reverse", "        val n = string.length\n    \
    \    val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversedPrefix))\n        val palindrome\
    \ = suffix + reversedPrefix + palindromeSuffix\n        palindrome", "       \
    \ val n = string.length\n        val suffix = string.substring(n / 2, n)\n   \
    \     val prefix = string.substring(0, n / 2)\n        val reversePrefix = prefix.reverse\n\
    \        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversePrefix)\
    \ + 1)\n        val palindrome = string + reversePrefix.substring(palindromeSuffix.length)\n\
    \        palindrome", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val reversePrefix\
    \ = prefix.reverse\n        val palindromeSuffix = longestPalindrome(suffix)\n\
    \        if (palindromeSuffix.length == suffix.length) string\n        else string\
    \ + reversePrefix.substring(palindromeSuffix.length)", "        val suffix = string.reverse.takeWhile(c\
    \ => string.startsWith(c.toString))\n        string + suffix.reverse", "     \
    \   val prefix = string.substring(0, string.length - longestPalindromeSuffix(string).length)\n\
    \        string + prefix.reverse", "        val suffix = longestPalindromicSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - suffix.length)\n   \
    \     val reversePrefix = prefix.reverse\n        string + reversePrefix", " \
    \       val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val palindrome = suffix\
    \ + prefix.reverse\n        palindrome", "        val n = string.length\n    \
    \    val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversedPrefix) + 1)\n        val palindrome\
    \ = string + reversedPrefix.substring(palindromeSuffix.length)\n        palindrome",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversePrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversePrefix)\
    \ + 1)\n        val palindrome = suffix + reversePrefix.substring(reversePrefix.indexOf(palindromeSuffix)\
    \ + 1)\n        palindrome", "        val n = string.length\n        val suffix\
    \ = string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(0,\
    \ suffix.indexOf(reversedPrefix) + 1)\n        string + reversedPrefix.substring(palindromeSuffix.length)",
  "        // Find the longest palindromic suffix.\n        def findPalindromicSuffix(string\
    \ : String) : String = {\n            def findPalindromicSuffix(string : String,\
    \ index : Int) : String = {\n                if (index < 0) \"\"\n           \
    \     else if (string.substring(index) == string.substring(index).reverse) string.substring(index)\n\
    \                else findPalindromicSuffix(string, index - 1)\n            }\n\
    \            findPalindromicSuffix(string, string.length - 1)\n        }\n   \
    \     // Find the longest palindromic prefix.\n        def findPalindromicPrefix(string\
    \ : String) : String = {\n            def findPalindromicPrefix(string : String,\
    \ index : Int) : String = {\n                if (index >= string.length) \"\"\n\
    \                else if (string.substring(0, index) == string.substring(0, index).reverse)\
    \ string.substring(0, index)\n                else findPalindromicPrefix(string,\
    \ index + 1)\n            }\n            findPalindromicPrefix(string, 0)\n  \
    \      }\n        val palindromicSuffix = findPalindromicSuffix(string)\n    \
    \    val palindromicPrefix = findPalindromicPrefix(string)\n        val prefix\
    \ = string.substring(0, string.length - palindromicSuffix.length)\n        prefix\
    \ + palindromicSuffix + prefix.reverse", "        val longestPalindrome = longestPalindromeSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        val reversePrefix = prefix.reverse\n        string + reversePrefix",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val palindrome = suffix\
    \ + prefix.reverse\n        palindrome", "        val n = string.length\n    \
    \    val suffix = (0 until n).map(i => string.substring(i)).filter(s => s == s.reverse).maxBy(_.length)\n\
    \        val prefix = string.substring(0, n - suffix.length)\n        prefix +\
    \ suffix + prefix.reverse", "        val n = string.length\n        val suffix\
    \ = string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = suffix.substring(0,\
    \ suffix.indexOf(reversedPrefix) + 1)\n        string + reversedPrefix.substring(palindromeSuffix.length)",
  "        val palindrome = string.reverse\n        val suffix = palindrome.substring(0,\
    \ palindrome.length - string.length)\n        string + suffix", "        val n\
    \ = string.length\n        val suffix = string.substring(n / 2)\n        val prefix\
    \ = string.substring(0, n / 2)\n        val reversePrefix = prefix.reverse\n \
    \       val palindromeSuffix = findPalindromeSuffix(suffix)\n        if (palindromeSuffix.length\
    \ == 0) {\n            string + reversePrefix\n        } else {\n            string\
    \ + reversePrefix.substring(reversePrefix.length - (suffix.length - palindromeSuffix.length))\n\
    \        }", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix.reverse\n        val prefixPalindrome = prefix.reverse\n        if\
    \ (suffixPalindrome == suffix) string + prefixPalindrome\n        else string\
    \ + suffixPalindrome + prefixPalindrome", "        val n = string.length\n   \
    \     val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindrome\
    \ = suffix + reversedPrefix\n        if (palindrome.length == n) palindrome else\
    \ palindrome + suffix", "        val reversed = string.reverse\n        val palindromeSuffix\
    \ = string.zip(reversed).takeWhile(x => x._1 == x._2).map(_._1).mkString\n   \
    \     val prefix = string.substring(palindromeSuffix.length)\n        string +\
    \ prefix.reverse", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val palindrome\
    \ = suffix + prefix.reverse\n        palindrome", "        val n = string.length\n\
    \        var i = 0\n        var j = n - 1\n        while (i < j) {\n         \
    \   if (string(i) != string(j)) {\n                return string.substring(0,\
    \ j) + string.substring(j, n).reverse + string\n            }\n            i +=\
    \ 1\n            j -= 1\n        }\n        string + string.reverse", "      \
    \  val n = string.length\n        if (n == 0) return \"\"\n        val suffix\
    \ = string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val suffixPalindrome = suffix + prefix.reverse\n        val prefixPalindrome\
    \ = prefix + suffix.reverse\n        if (suffixPalindrome.length < prefixPalindrome.length)\
    \ suffixPalindrome else prefixPalindrome", "        val n = string.length\n  \
    \      val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversedPrefix))\n        val palindrome\
    \ = suffix + reversedPrefix + palindromeSuffix\n        palindrome", "       \
    \ def findLongestPalindrome(string : String) : String = {\n            def isPalindrome(string\
    \ : String) : Boolean = {\n                if (string.length == 0) return true\n\
    \                if (string.length == 1) return true\n                if (string.length\
    \ == 2) return string(0) == string(1)\n                if (string(0) != string(string.length\
    \ - 1)) return false\n                return isPalindrome(string.substring(1,\
    \ string.length - 1))\n            }\n            def findLongestPalindromeHelper(string\
    \ : String, length : Int) : String = {\n                if (length == 0) return\
    \ \"\"\n                if (isPalindrome(string.substring(string.length - length)))\
    \ return string.substring(string.length - length)\n                return findLongestPalindromeHelper(string,\
    \ length - 1)\n            }\n            return findLongestPalindromeHelper(string,\
    \ string.length)\n        }\n        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        return string + prefix.reverse", "        val n = string.length\n   \
    \     val reverse = string.reverse\n        val table = Array.ofDim[Int](n, n)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        if (string(i) == reverse(j)) {\n                    if (i == 0 || j ==\
    \ 0) table(i)(j) = 1\n                    else table(i)(j) = table(i - 1)(j -\
    \ 1) + 1\n                }\n            }\n        }\n        var max = 0\n \
    \       var index = 0\n        for (i <- 0 until n) {\n            if (table(i)(n\
    \ - 1) > max) {\n                max = table(i)(n - 1)\n                index\
    \ = i\n            }\n        }\n        string + reverse.substring(n - index\
    \ - 1)", "        val longestPalindrome = longestPalindromePostfix(string)\n \
    \       val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        prefix + string + prefix.reverse", "        // Find the longest palindromic\
    \ suffix of the supplied string.\n        def findLongestPalindromicSuffix(string\
    \ : String) : String = {\n            def findLongestPalindromicSuffix(string\
    \ : String, index : Int) : String = {\n                if (index == string.length)\
    \ \"\"\n                else if (isPalindrome(string.substring(index))) string.substring(index)\n\
    \                else findLongestPalindromicSuffix(string, index + 1)\n      \
    \      }\n            findLongestPalindromicSuffix(string, 0)\n        }\n   \
    \     // Check if a string is a palindrome.\n        def isPalindrome(string :\
    \ String) : Boolean = {\n            def isPalindrome(string : String, index :\
    \ Int) : Boolean = {\n                if (index == string.length / 2) true\n \
    \               else if (string(index) != string(string.length - index - 1)) false\n\
    \                else isPalindrome(string, index + 1)\n            }\n       \
    \     isPalindrome(string, 0)\n        }\n        val palindromicSuffix = findLongestPalindromicSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - palindromicSuffix.length)\n\
    \        string + reverse(prefix)", "        def findLongestPalindrome(string\
    \ : String) : String = {\n            def findLongestPalindrome(string : String,\
    \ start : Int, end : Int) : String = {\n                if (start < 0 || end >=\
    \ string.length) return \"\"\n                if (string(start) != string(end))\
    \ return \"\"\n                val palindrome = string.substring(start, end +\
    \ 1)\n                val palindrome1 = findLongestPalindrome(string, start -\
    \ 1, end + 1)\n                if (palindrome1.length > palindrome.length) palindrome1\
    \ else palindrome\n            }\n            var maxPalindrome = \"\"\n     \
    \       for (i <- 0 until string.length) {\n                val palindrome = findLongestPalindrome(string,\
    \ i, i)\n                if (palindrome.length > maxPalindrome.length) maxPalindrome\
    \ = palindrome\n                val palindrome1 = findLongestPalindrome(string,\
    \ i, i + 1)\n                if (palindrome1.length > maxPalindrome.length) maxPalindrome\
    \ = palindrome1\n            }\n            maxPalindrome\n        }\n       \
    \ val palindrome = findLongestPalindrome(string)\n        if (palindrome.length\
    \ == string.length) return string\n        val prefix = string.substring(0, string.length\
    \ - palindrome.length)\n        string + prefix.reverse", "        val stringLength\
    \ = string.length\n        val palindromeLength = stringLength * 2 - 1\n     \
    \   val palindrome = new Array[Char](palindromeLength)\n        for (i <- 0 until\
    \ stringLength) {\n            palindrome(i) = string(i)\n            palindrome(palindromeLength\
    \ - i - 1) = string(i)\n        }\n        palindrome.mkString", "        val\
    \ n = string.length\n        val suffix = string.substring(n / 2, n)\n       \
    \ val prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindrome = suffix + reversedPrefix\n        if (palindrome.length\
    \ == n) palindrome\n        else palindrome + suffix", "        def makePalindrome(string\
    \ : String, longestPalindrome : String) : String = {\n            if (string.length\
    \ == 0) return longestPalindrome\n            if (string.reverse == string) {\n\
    \                if (string.length > longestPalindrome.length) return string\n\
    \                else return longestPalindrome\n            }\n            makePalindrome(string.substring(0,\
    \ string.length - 1), longestPalindrome)\n        }\n        val longestPalindrome\
    \ = makePalindrome(string, \"\")\n        string + string.substring(0, string.length\
    \ - longestPalindrome.length).reverse", "        val suffix = string.suffixes.find(suffix\
    \ => suffix.isPalindrome).get\n        val prefix = string.substring(0, string.length\
    \ - suffix.length)\n        string + prefix.reverse", "        val n = string.length\n\
    \        val prefix = string.substring(0, n / 2)\n        val suffix = string.substring(n\
    \ / 2 + n % 2, n)\n        val reversedPrefix = prefix.reverse\n        val reversedSuffix\
    \ = suffix.reverse\n        val longestPalindromicSuffix = suffix.zip(reversedSuffix).takeWhile(x\
    \ => x._1 == x._2).map(_._1).mkString\n        val prefixToAppend = reversedPrefix.substring(longestPalindromicSuffix.length,\
    \ reversedPrefix.length)\n        string + prefixToAppend", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val palindrome = prefix + suffix\n        val reversed = prefix.reverse\n\
    \        palindrome + reversed", "        val n = string.length\n        val suffix\
    \ = string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val suffixPalindrome = suffix\
    \ + reversedPrefix\n        val prefixPalindrome = reversedPrefix + suffix\n \
    \       if (suffixPalindrome.length < prefixPalindrome.length) suffixPalindrome\
    \ else prefixPalindrome", "        val length = string.length\n        val palindromeLength\
    \ = (0 until length).find(i => string.substring(0, i) == string.substring(length\
    \ - i, length).reverse).getOrElse(0)\n        string + string.substring(0, length\
    \ - palindromeLength).reverse", "        val n = string.length\n        val suffix\
    \ = string.substring(n / 2, n)\n        val prefix = string.substring(0, n / 2)\n\
    \        val reversedPrefix = prefix.reverse\n        val palindromeSuffix = findPalindromeSuffix(suffix)\n\
    \        suffix + reversedPrefix + palindromeSuffix", "        val longestPalindrome\
    \ = longestPalindromeSuffix(string)\n        val prefix = string.substring(0,\
    \ string.length - longestPalindrome.length)\n        val reversedPrefix = prefix.reverse\n\
    \        string + reversedPrefix", "        val suffix = string.substring(string.length\
    \ / 2)\n        val prefix = string.substring(0, string.length / 2)\n        val\
    \ reversedPrefix = prefix.reverse\n        val palindromicSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromicSuffix.length)", "     \
    \   val n = string.length\n        val suffix = string.substring(n / 2, n)\n \
    \       val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = findLongestPalindrome(suffix)\n\
    \        val palindrome = suffix + reversedPrefix + palindromeSuffix\n       \
    \ palindrome", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix + prefix.reverse\n        val prefixPalindrome = prefix + suffix.reverse\n\
    \        if (suffixPalindrome.length < prefixPalindrome.length) suffixPalindrome\
    \ else prefixPalindrome", "        val reverse = string.reverse\n        val suffix\
    \ = string.dropWhile(c => !reverse.startsWith(string.drop(c)))\n        string\
    \ + reverse.drop(suffix.length)", "        val longestPalindrome = longestPalindromeSuffix(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        prefix + string + prefix.reverse", "        val n = string.length\n \
    \       val suffix = new Array[Int](n)\n        suffix(0) = 0\n        for (i\
    \ <- 1 until n) {\n            var j = suffix(i - 1)\n            while (j > 0\
    \ && string(i) != string(j)) j = suffix(j - 1)\n            if (string(i) == string(j))\
    \ suffix(i) = j + 1\n            else suffix(i) = 0\n        }\n        val prefix\
    \ = string.substring(0, n - suffix(n - 1))\n        string + prefix.reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2)\n \
    \       val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix.reverse\n        if (suffixPalindrome == suffix) return string\n  \
    \      else return prefix + suffixPalindrome + suffix", "        val longestPalindrome\
    \ = longestPalindromePostfix(string)\n        val prefix = string.substring(0,\
    \ string.length - longestPalindrome.length)\n        prefix + string + prefix.reverse",
  "        def findLongestPalindrome(string : String) : String = {\n            def\
    \ isPalindrome(string : String) : Boolean = {\n                if (string.length\
    \ == 0) true\n                else if (string.length == 1) true\n            \
    \    else if (string.head == string.last) isPalindrome(string.tail.init)\n   \
    \             else false\n            }\n            if (isPalindrome(string))\
    \ string\n            else findLongestPalindrome(string.init)\n        }\n   \
    \     val longestPalindrome = findLongestPalindrome(string)\n        val prefix\
    \ = string.substring(0, string.length - longestPalindrome.length)\n        string\
    \ + prefix.reverse", "        val length = string.length\n        val palindromeSuffix\
    \ = (0 until length).find(i => string.substring(i) == string.substring(i).reverse).getOrElse(0)\n\
    \        string + string.substring(0, length - palindromeSuffix).reverse", " \
    \       val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromeSuffix = suffix.reverse\n        val palindrome\
    \ = reversedPrefix + suffix\n        if (palindrome.length == n) palindrome\n\
    \        else palindrome + reversedPrefix.substring(1)", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reverse = prefix.reverse\n        val palindrome = suffix\
    \ + reverse\n        if (palindrome.length == n) palindrome\n        else palindrome\
    \ + string(n / 2)", "        val n = string.length\n        val suffix = string.substring(n\
    \ / 2, n)\n        val prefix = string.substring(0, n / 2)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindromeSuffix = findPalindromeSuffix(suffix)\n\
    \        val palindrome = suffix + reversedPrefix + palindromeSuffix\n       \
    \ palindrome", "        val n = string.length\n        val suffix = Array.ofDim[Int](n)\n\
    \        var i = 0\n        var j = 1\n        while (j < n) {\n            if\
    \ (string(i) == string(j)) {\n                suffix(j) = i + 1\n            \
    \    i += 1\n            } else {\n                while (i > 0 && string(i) !=\
    \ string(j)) i = suffix(i - 1)\n                if (string(i) == string(j)) {\n\
    \                    suffix(j) = i + 1\n                    i += 1\n         \
    \       }\n            }\n            j += 1\n        }\n        val prefix =\
    \ string.substring(0, n - suffix(n - 1))\n        string + prefix.reverse", " \
    \       val length = string.length\n        var i = 0\n        var j = length\
    \ - 1\n        var k = length - 1\n        while (i < j) {\n            if (string(i)\
    \ == string(j)) {\n                i += 1\n                j -= 1\n          \
    \  } else {\n                i = 0\n                k -= 1\n                j\
    \ = k\n            }\n        }\n        val prefix = string.substring(0, k +\
    \ 1)\n        string + prefix.reverse", "        val n = string.length\n     \
    \   val longestPalindromeSuffix = (0 until n).find(i => string.substring(i) ==\
    \ string.substring(i).reverse).getOrElse(0)\n        string + string.substring(0,\
    \ n - longestPalindromeSuffix).reverse", "        var longestPalindrome = \"\"\
    \n        for (i <- 0 to string.length) {\n            val suffix = string.substring(i)\n\
    \            if (suffix.length > longestPalindrome.length && isPalindrome(suffix))\
    \ longestPalindrome = suffix\n        }\n        string + string.substring(0,\
    \ string.length - longestPalindrome.length).reverse", "        val n = string.length\n\
    \        val s = string + \"#\" + string.reverse\n        val z = Array.fill(s.length)(0)\n\
    \        var l = 0; var r = 0\n        for (i <- 1 until s.length) {\n       \
    \     if (i > r) {\n                l = i; r = i\n                while (r < s.length\
    \ && s(r - l) == s(r)) r += 1\n                z(i) = r - l; r -= 1\n        \
    \    } else {\n                val k = i - l\n                if (z(k) < r - i\
    \ + 1) z(i) = z(k)\n                else {\n                    l = i;\n     \
    \               while (r < s.length && s(r - l) == s(r)) r += 1\n            \
    \        z(i) = r - l; r -= 1\n                }\n            }\n        }\n \
    \       string + string.substring(n - z(s.length - 1)).reverse", "        val\
    \ n = string.length\n        val suffix = string.substring(n / 2, n)\n       \
    \ val prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix)\
    \ + 1)\n        string + reversedPrefix.substring(palindromeSuffix.length)", " \
    \       val longestPalindromeSuffix = string.suffixes.filter(s => s.length > 0\
    \ && s.reverse == s).maxBy(_.length)\n        string + string.substring(0, string.length\
    \ - longestPalindromeSuffix.length).reverse", "        val length = string.length\n\
    \        val longestPalindrome = (0 until length).map(i => {\n            val\
    \ prefix = string.substring(0, i)\n            val suffix = string.substring(i,\
    \ length)\n            if (prefix == suffix.reverse) prefix else \"\"\n      \
    \  }).maxBy(_.length)\n        string + longestPalindrome.reverse", "        val\
    \ n = string.length\n        val suffix = string.substring(n / 2, n)\n       \
    \ val prefix = string.substring(0, n / 2)\n        val reversedPrefix = prefix.reverse\n\
    \        val palindromeSuffix = suffix.substring(0, suffix.indexOf(reversedPrefix)\
    \ + 1)\n        string + reversedPrefix.substring(palindromeSuffix.length)", " \
    \       val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val reversedSuffix = suffix.reverse\n        val suffixPalindrome\
    \ = suffix + reversedSuffix\n        val prefixPalindrome = reversedPrefix + prefix\n\
    \        val palindrome = if (suffixPalindrome.length > prefixPalindrome.length)\
    \ suffixPalindrome else prefixPalindrome\n        palindrome", "        val n\
    \ = string.length\n        val suffix = string.substring(n / 2)\n        val prefix\
    \ = string.substring(0, n / 2)\n        val suffixPalindrome = suffix.reverse\n\
    \        if (suffixPalindrome == suffix) string\n        else if (suffixPalindrome.contains(prefix))\
    \ string + suffixPalindrome.substring(prefix.length)\n        else string + suffixPalindrome",
  "        val n = string.length\n        val suffix = string.substring(n / 2)\n \
    \       val prefix = string.substring(0, n / 2)\n        val reversedPrefix =\
    \ prefix.reverse\n        val palindromicSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(reversedPrefix.indexOf(palindromicSuffix)\
    \ + palindromicSuffix.length)", "        val n = string.length\n        val suffix\
    \ = string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n\
    \        val suffixPalindrome = suffix.substring(suffix.indexOf(prefix.reverse))\n\
    \        string + suffixPalindrome.reverse", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val suffixPalindrome = suffix + prefix.reverse\n        suffixPalindrome",
  "        val n = string.length\n        val suffix = (0 until n).map(i => string.substring(i)).filter(s\
    \ => s == s.reverse).sortBy(s => s.length).last\n        val prefix = string.substring(0,\
    \ n - suffix.length)\n        return string + prefix.reverse", "        val n\
    \ = string.length\n        val palindrome = Array.ofDim[Int](n)\n        var center\
    \ = 0\n        var right = 0\n        for (i <- 0 until n) {\n            val\
    \ mirror = 2 * center - i\n            if (i < right) palindrome(i) = min(right\
    \ - i, palindrome(mirror))\n            var a = i + (1 + palindrome(i))\n    \
    \        var b = i - (1 + palindrome(i))\n            while (a < n && b >= 0 &&\
    \ string(a) == string(b)) {\n                palindrome(i) += 1\n            \
    \    a += 1\n                b -= 1\n            }\n            if (i + palindrome(i)\
    \ > right) {\n                center = i\n                right = i + palindrome(i)\n\
    \            }\n        }\n        val maxPalindrome = palindrome.max\n      \
    \  val prefix = string.substring(0, n - maxPalindrome)\n        val suffix = string.substring(n\
    \ - maxPalindrome, n)\n        prefix + suffix.reverse + suffix", "        val\
    \ n = string.length\n        val prefix = string.substring(0, n / 2)\n       \
    \ val suffix = string.substring(n / 2 + n % 2, n)\n        val reversedPrefix\
    \ = prefix.reverse\n        val palindromicSuffix = suffix.substring(suffix.indexOf(reversedPrefix))\n\
    \        string + reversedPrefix.substring(palindromicSuffix.length)", "     \
    \   val longestPalindrome = longestPalindromeSuffix(string)\n        val prefix\
    \ = string.substring(0, string.length - longestPalindrome.length)\n        val\
    \ reversePrefix = prefix.reverse\n        string + reversePrefix", "        val\
    \ n = string.length\n        val reverse = string.reverse\n        val lps = Array.ofDim[Int](n)\n\
    \        var i = 1; var j = 0\n        while (i < n) {\n            if (string(i)\
    \ == string(j)) {\n                lps(i) = j + 1\n                i += 1; j +=\
    \ 1\n            } else if (j > 0) j = lps(j - 1)\n            else {\n      \
    \          lps(i) = 0\n                i += 1\n            }\n        }\n    \
    \    val prefix = string.substring(0, n - lps(n - 1))\n        string + reverse.substring(prefix.length)",
  "        val n = string.length\n        val suffix = new Array[Int](n)\n       \
    \ suffix(0) = 0\n        for (i <- 1 until n) {\n            var j = suffix(i\
    \ - 1)\n            while (j > 0 && string(i) != string(j)) j = suffix(j - 1)\n\
    \            if (string(i) == string(j)) j += 1\n            suffix(i) = j\n \
    \       }\n        val prefix = string.substring(0, n - suffix(n - 1))\n     \
    \   string + prefix.reverse", "        val n = string.length\n        val suffix\
    \ = Array.ofDim[Int](n)\n        var i = 0\n        var j = 1\n        while (j\
    \ < n) {\n            if (string(i) == string(j)) {\n                suffix(j)\
    \ = i + 1\n                i += 1\n                j += 1\n            } else\
    \ {\n                if (i == 0) {\n                    suffix(j) = 0\n      \
    \              j += 1\n                } else {\n                    i = suffix(i\
    \ - 1)\n                }\n            }\n        }\n        val prefix = string.substring(0,\
    \ n - suffix(n - 1))\n        string + prefix.reverse", "        val palindromeSuffix\
    \ = longestPalindromeSuffix(string)\n        val prefix = string.substring(0,\
    \ string.length - palindromeSuffix.length)\n        prefix + palindromeSuffix\
    \ + prefix.reverse", "        val n = string.length\n        val s = string +\
    \ \"#\" + string.reverse\n        val pi = new Array[Int](s.length)\n        var\
    \ k = 0\n        for (i <- 1 until s.length) {\n            while (k > 0 && s(k)\
    \ != s(i)) k = pi(k - 1)\n            if (s(k) == s(i)) k += 1\n            pi(i)\
    \ = k\n        }\n        string + string.reverse.substring(pi(s.length - 1))",
  "        val n = string.length\n        val lps = Array.ofDim[Int](n)\n        var\
    \ i = 1; var j = 0\n        while (i < n) {\n            if (string(i) == string(j))\
    \ {\n                lps(i) = j + 1\n                i += 1; j += 1\n        \
    \    } else if (j > 0) j = lps(j - 1)\n            else {\n                lps(i)\
    \ = 0\n                i += 1\n            }\n        }\n        val prefix =\
    \ string.substring(0, n - lps(n - 1))\n        string + prefix.reverse", "   \
    \     val n = string.length\n        val dp = Array.ofDim[Int](n, n)\n       \
    \ for (i <- 0 until n) {\n            dp(i)(i) = 1\n            if (i < n - 1)\
    \ {\n                if (string(i) == string(i + 1)) dp(i)(i + 1) = 2\n      \
    \          else dp(i)(i + 1) = 1\n            }\n        }\n        for (k <-\
    \ 2 until n) {\n            for (i <- 0 until n - k) {\n                val j\
    \ = i + k\n                if (string(i) == string(j)) dp(i)(j) = dp(i + 1)(j\
    \ - 1) + 2\n                else dp(i)(j) = max(dp(i + 1)(j), dp(i)(j - 1))\n\
    \            }\n        }\n        val palindromeSuffix = string.substring(n -\
    \ dp(0)(n - 1), n)\n        val palindromePrefix = string.substring(0, n - dp(0)(n\
    \ - 1)).reverse\n        return string + palindromePrefix", "        def isPalindrome(string\
    \ : String) : Boolean = {\n            if (string.length == 0) return true\n \
    \           if (string.length == 1) return true\n            if (string.charAt(0)\
    \ != string.charAt(string.length - 1)) return false\n            isPalindrome(string.substring(1,\
    \ string.length - 1))\n        }\n        def findPalindromeSuffix(string : String)\
    \ : String = {\n            def findPalindromeSuffix(string : String, suffix :\
    \ String) : String = {\n                if (isPalindrome(string + suffix)) suffix\n\
    \                else findPalindromeSuffix(string, string.charAt(string.length\
    \ - 1) + suffix)\n            }\n            findPalindromeSuffix(string, \"\"\
    )\n        }\n        string + (string.substring(0, string.length - findPalindromeSuffix(string).length)).reverse",
  "        val n = string.length\n        val suffix = string.substring(n / 2)\n \
    \       val prefix = string.substring(0, n / 2)\n        val suffixPalindrome\
    \ = suffix.substring(suffix.indexOf(prefix.reverse))\n        string + suffixPalindrome.reverse",
  "        val n = string.length\n        val s = string + \"#\" + string.reverse\n\
    \        val lps = Array.fill(s.length)(0)\n        for (i <- 1 until s.length)\
    \ {\n            var j = lps(i - 1)\n            while (j > 0 && s(i) != s(j))\
    \ j = lps(j - 1)\n            if (s(i) == s(j)) lps(i) = j + 1\n        }\n  \
    \      string + string.substring(lps(s.length - 1)).reverse", "        val suffix\
    \ = string.substring(string.length / 2)\n        val prefix = string.substring(0,\
    \ string.length / 2)\n        val reversedPrefix = prefix.reverse\n        val\
    \ palindromicSuffix = (suffix + reversedPrefix).substring(0, suffix.length)\n\
    \        val palindromicPrefix = reversedPrefix.substring(suffix.length)\n   \
    \     palindromicPrefix + string + palindromicSuffix", "        val n = string.length\n\
    \        val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = findPalindromeSuffix(suffix)\n        val palindrome = suffix + reversedPrefix\
    \ + palindromeSuffix\n        palindrome", "        val n = string.length\n  \
    \      val prefix = string.substring(0, n / 2)\n        val suffix = string.substring(n\
    \ / 2 + n % 2, n)\n        val reversePrefix = prefix.reverse\n        val reverseSuffix\
    \ = suffix.reverse\n        val palindrome = string + reversePrefix\n        if\
    \ (palindrome.substring(0, n / 2) == reverseSuffix.substring(0, n / 2)) palindrome\
    \ else palindrome + reverseSuffix", "        var result = string\n        var\
    \ longestPalindrome = \"\"\n        for (i <- 0 to string.length) {\n        \
    \    val substring = string.substring(i)\n            if (substring.length > longestPalindrome.length\
    \ && substring == substring.reverse) {\n                longestPalindrome = substring\n\
    \            }\n        }\n        if (longestPalindrome != \"\") {\n        \
    \    result += string.substring(0, string.length - longestPalindrome.length).reverse\n\
    \        }\n        return result", "        val n = string.length\n        val\
    \ suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversedPrefix) + 1)\n        val palindrome\
    \ = string + reversedPrefix.substring(palindromeSuffix.length)\n        palindrome",
  "        val n = string.length\n        val longestPalindromeSuffix = Array.fill(n)(0)\n\
    \        var i = 1; var j = 0\n        while (i < n) {\n            if (string(i)\
    \ == string(j)) {\n                longestPalindromeSuffix(i) = j + 1\n      \
    \          i += 1; j += 1\n            } else if (j == 0) {\n                longestPalindromeSuffix(i)\
    \ = 0\n                i += 1\n            } else {\n                j = longestPalindromeSuffix(j\
    \ - 1)\n            }\n        }\n        val prefix = string.substring(0, n -\
    \ longestPalindromeSuffix(n - 1))\n        string + prefix.reverse", "       \
    \ val n = string.length\n        val suffix = string.substring(n / 2, n)\n   \
    \     val prefix = string.substring(0, n / 2)\n        val suffixPalindrome =\
    \ suffix + prefix.reverse\n        val prefixPalindrome = prefix + suffix.reverse\n\
    \        if (suffixPalindrome.length < prefixPalindrome.length) suffixPalindrome\
    \ else prefixPalindrome", "        val n = string.length\n        val suffix =\
    \ string.substring(n / 2)\n        val prefix = string.substring(0, n / 2)\n \
    \       val palindrome = suffix + prefix.reverse\n        palindrome", "     \
    \   def findLongestPalindrome(string : String) : String = {\n            def isPalindrome(string\
    \ : String) : Boolean = {\n                if (string.length == 0) return true\n\
    \                if (string.length == 1) return true\n                if (string.length\
    \ == 2) return string(0) == string(1)\n                if (string(0) != string(string.length\
    \ - 1)) return false\n                return isPalindrome(string.substring(1,\
    \ string.length - 1))\n            }\n            def findLongestPalindrome(string\
    \ : String, length : Int) : String = {\n                if (length == 0) return\
    \ \"\"\n                if (isPalindrome(string.substring(string.length - length)))\
    \ return string.substring(string.length - length)\n                return findLongestPalindrome(string,\
    \ length - 1)\n            }\n            return findLongestPalindrome(string,\
    \ string.length)\n        }\n        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val prefix = string.substring(0, string.length - longestPalindrome.length)\n\
    \        return string + prefix.reverse", "        val n = string.length\n   \
    \     val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val palindromeSuffix = new StringBuilder(suffix).reverse.toString\n\
    \        val palindromePrefix = new StringBuilder(prefix).reverse.toString\n \
    \       val palindrome = new StringBuilder(string).append(palindromePrefix).append(palindromeSuffix).toString\n\
    \        palindrome", "        def makePalindrome(string : String, longestPalindrome\
    \ : String) : String = {\n            if (string.length == 0) longestPalindrome\n\
    \            else {\n                val (prefix, suffix) = string.splitAt(string.length\
    \ - 1)\n                if (prefix.reverse == suffix) makePalindrome(prefix, suffix\
    \ + longestPalindrome)\n                else makePalindrome(prefix, longestPalindrome)\n\
    \            }\n        }\n        makePalindrome(string, \"\") + string.reverse",
  "        def makePalindrome(string : String, index : Int) : String = {\n       \
    \     if (index == string.length) string\n            else if (string.substring(0,\
    \ index) == string.substring(string.length - index, string.length).reverse) string\
    \ + string.substring(0, string.length - index).reverse\n            else makePalindrome(string,\
    \ index + 1)\n        }\n        makePalindrome(string, 0)", "        val n =\
    \ string.length\n        val suffix = string.substring(n / 2, n)\n        val\
    \ prefix = string.substring(0, n / 2)\n        val reversePrefix = prefix.reverse\n\
    \        val palindromeSuffix = findPalindromeSuffix(suffix)\n        val palindrome\
    \ = suffix + reversePrefix + palindromeSuffix\n        palindrome", "        val\
    \ n = string.length\n        val prefix = string.substring(0, n - 1)\n       \
    \ val suffix = string.substring(n - 1, n)\n        val reversedPrefix = prefix.reverse\n\
    \        val reversedSuffix = suffix.reverse\n        if (suffix == reversedSuffix)\
    \ string + reversedPrefix\n        else string + reversedSuffix + reversedPrefix",
  "        val n = string.length\n        val suffix = string.substring(n / 2, n)\n\
    \        val prefix = string.substring(0, n / 2)\n        val palindrome = suffix\
    \ + prefix.reverse\n        palindrome", "        val length = string.length\n\
    \        if (length == 0) return \"\"\n        var i = 0\n        var j = length\
    \ - 1\n        while (i < j) {\n            if (string(i) != string(j)) {\n  \
    \              i = 0\n                j -= 1\n            } else {\n         \
    \       i += 1\n            }\n        }\n        val prefix = string.substring(0,\
    \ i)\n        val suffix = string.substring(i)\n        return suffix + prefix.reverse\
    \ + prefix", "        // Find the longest postfix of supplied string that is a\
    \ palindrome.\n        def findLongestPalindromicSuffix(string : String) : String\
    \ = {\n            def findLongestPalindromicSuffix(string : String, suffix :\
    \ String) : String = {\n                if (string.length == 0) suffix\n     \
    \           else if (string.length == 1) string + suffix\n                else\
    \ if (string.head == string.last) findLongestPalindromicSuffix(string.tail.init,\
    \ string.head + suffix)\n                else findLongestPalindromicSuffix(string.tail,\
    \ suffix)\n            }\n            findLongestPalindromicSuffix(string, \"\"\
    )\n        }\n        // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n        def appendReversePrefix(string\
    \ : String, suffix : String) : String = {\n            def appendReversePrefix(string\
    \ : String, suffix : String, prefix : String) : String = {\n                if\
    \ (string.length == 0) prefix + suffix\n                else appendReversePrefix(string.tail,\
    \ suffix, string.head + prefix)\n            }\n            appendReversePrefix(string,\
    \ suffix, \"\")\n        }\n        appendReversePrefix(string, findLongestPalindromicSuffix(string))",
  "        var palindrome = string\n        var longestPalindrome = \"\"\n       \
    \ for (i <- 0 to string.length - 1) {\n            val suffix = string.substring(i)\n\
    \            if (isPalindrome(suffix)) {\n                if (suffix.length >\
    \ longestPalindrome.length) {\n                    longestPalindrome = suffix\n\
    \                }\n            }\n        }\n        palindrome += reverse(string.substring(0,\
    \ string.length - longestPalindrome.length))\n        palindrome", "        val\
    \ n = string.length\n        val prefix = string.substring(0, n - 1)\n       \
    \ val suffix = string.substring(n - 1, n)\n        val reversedPrefix = prefix.reverse\n\
    \        if (suffix == reversedPrefix) string + suffix else string + reversedPrefix",
  "        val n = string.length\n        val longestPalindrome = Array.fill(n)(0)\n\
    \        var center = 0\n        var right = 0\n        for (i <- 0 until n) {\n\
    \            val mirror = 2 * center - i\n            if (i < right) longestPalindrome(i)\
    \ = min(right - i, longestPalindrome(mirror))\n            var left = i - (1 +\
    \ longestPalindrome(i))\n            var right = i + (1 + longestPalindrome(i))\n\
    \            while (left >= 0 && right < n && string(left) == string(right)) {\n\
    \                longestPalindrome(i) += 1\n                left -= 1\n      \
    \          right += 1\n            }\n            if (i + longestPalindrome(i)\
    \ > right) {\n                center = i\n                right = i + longestPalindrome(i)\n\
    \            }\n        }\n        val longestPalindromeIndex = longestPalindrome.zipWithIndex.maxBy(_._1)._2\n\
    \        val longestPalindromeLength = longestPalindrome(longestPalindromeIndex)\n\
    \        val prefix = string.substring(0, longestPalindromeIndex - longestPalindromeLength\
    \ + 1)\n        val suffix = string.substring(longestPalindromeIndex + 1)\n  \
    \      prefix + string + suffix.reverse", "        val n = string.length\n   \
    \     val suffix = string.substring(n / 2, n)\n        val prefix = string.substring(0,\
    \ n / 2)\n        val reversedPrefix = prefix.reverse\n        val palindromeSuffix\
    \ = suffix.substring(0, suffix.indexOf(reversedPrefix) + 1)\n        val palindrome\
    \ = string + reversedPrefix.substring(palindromeSuffix.length)\n        palindrome",
  "        val suffix = string.substring(string.length / 2)\n        val prefix =\
    \ string.substring(0, string.length / 2)\n        val palindromeSuffix = suffix.substring(suffix.length\
    \ - suffix.reverse.indexOf(prefix.reverse))\n        val palindromePrefix = prefix.substring(0,\
    \ prefix.length - palindromeSuffix.length)\n        return palindromePrefix +\
    \ palindromeSuffix + palindromePrefix.reverse", "        val n = string.length\n\
    \        var longestPalindrome = \"\"\n        for (i <- 0 to n) {\n         \
    \   val prefix = string.substring(0, i)\n            val suffix = string.substring(i,\
    \ n)\n            if (isPalindrome(suffix)) {\n                longestPalindrome\
    \ = suffix\n                break\n            }\n        }\n        string +\
    \ reverse(string.substring(0, n - longestPalindrome.length))"]
stop_tokens:
- "\n    }\n"
