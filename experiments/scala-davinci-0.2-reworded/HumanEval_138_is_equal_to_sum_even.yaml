name: HumanEval_138_is_equal_to_sum_even
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Evaluate whether the given number n can be written as the sum of exactly\
  \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n \
  \   // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>> isEqualToSumEven((8l))\n\
  \    // (true)\n    def isEqualToSumEven(n : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
  \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
  \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
  \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
  \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
completions: ["        val limit = n / 4\n        for (i <- 1l to limit) {\n     \
    \       val x = n - i * 2\n            if (x % 2 == 0) {\n                val\
    \ y = x / 2\n                val z = y - i\n                if (z % 2 == 0) {\n\
    \                    val w = z / 2\n                    if (w > 0) {\n       \
    \                 return true\n                    }\n                }\n    \
    \        }\n        }\n        return false", "        // Fill in the code here\n\
    \        var sum = 0\n        for (i <- 0 to n.toInt) {\n            if (i % 2\
    \ == 0) {\n                sum += i\n                if (sum == n) return true\n\
    \            }\n        }\n        return false", "        val m = n / 2\n   \
    \     val a = m / 2\n        val b = m - a\n        val c = a - b\n        val\
    \ d = b - c\n        (a + b + c + d) == n", "        val m = n / 2\n        val\
    \ s = (1 to m).toList\n        val r = s.combinations(4).toList.map(x => x.sum).filter(x\
    \ => x == n)\n        r.size > 0", "        val m = n / 2\n        val s = (1l\
    \ to m).filter(x => x % 2 == 0).toList\n        val r = s.combinations(4).filter(x\
    \ => x.sum == n).toList\n        r.length > 0", "        var result = false\n\
    \        for (a <- 0 to n.toInt / 4) {\n            for (b <- 0 to n.toInt / 4)\
    \ {\n                for (c <- 0 to n.toInt / 4) {\n                    for (d\
    \ <- 0 to n.toInt / 4) {\n                        if (a + b + c + d == n && a\
    \ % 2 == 0 && b % 2 == 0 && c % 2 == 0 && d % 2 == 0) {\n                    \
    \        result = true\n                        }\n                    }\n   \
    \             }\n            }\n        }\n        return result", "        val\
    \ n2 = n / 2\n        val n4 = n2 / 2\n        val n8 = n4 / 2\n        val n16\
    \ = n8 / 2\n        val n32 = n16 / 2\n        val n64 = n32 / 2\n        val\
    \ n128 = n64 / 2\n        val n256 = n128 / 2\n        val n512 = n256 / 2\n \
    \       val n1024 = n512 / 2\n        val n2048 = n1024 / 2\n        val n4096\
    \ = n2048 / 2\n        val n8192 = n4096 / 2\n        val n16384 = n8192 / 2\n\
    \        val n32768 = n16384 / 2\n        val n65536 = n32768 / 2\n        val\
    \ n131072 = n65536 / 2\n        val n262144 = n131072 / 2\n        val n524288\
    \ = n262144 / 2\n        val n1048576 = n524288 / 2\n        val n2097152 = n1048576\
    \ / 2\n        val n4194304 = n2097152 / 2\n        val n8388608 = n4194304 /\
    \ 2\n        val n16777216 = n8388608 / 2\n        val n33554432 = n16777216 /\
    \ 2\n        val n67108864 = n33554432 / 2\n        val n134217728 = n67108864\
    \ / 2\n        val n268435456 = n134217728 / 2\n        val n536870912 = n268435456\
    \ / 2\n        val n1073741824 = n536870912 / 2\n        val n2147483648l = n1073741824\
    \ / 2\n        val n4294967296l = n2147483648l / 2\n        val n8589934592l =\
    \ n4294967296l / 2\n        val n17179869184l = n8589934592l / 2\n        val\
    \ n34359738368l = n17179869184l / 2\n        val n68719476736l = n34359738368l\
    \ / 2\n        val n137438953472l = n68719476736l / 2\n", "        val m = n /\
    \ 2\n        val s = (1 to m).filter(i => i % 2 == 0).toSet\n        val s2 =\
    \ s.map(i => i * i)\n        val s3 = s2.map(i => i * i)\n        val s4 = s3.map(i\
    \ => i * i)\n        val s5 = s4.map(i => i * i)\n        val s6 = s5.map(i =>\
    \ i * i)\n        val s7 = s6.map(i => i * i)\n        val s8 = s7.map(i => i\
    \ * i)\n        val s9 = s8.map(i => i * i)\n        val s10 = s9.map(i => i *\
    \ i)\n        val s11 = s10.map(i => i * i)\n        val s12 = s11.map(i => i\
    \ * i)\n        val s13 = s12.map(i => i * i)\n        val s14 = s13.map(i =>\
    \ i * i)\n        val s15 = s14.map(i => i * i)\n        val s16 = s15.map(i =>\
    \ i * i)\n        val s17 = s16.map(i => i * i)\n        val s18 = s17.map(i =>\
    \ i * i)\n        val s19 = s18.map(i => i * i)\n        val s20 = s19.map(i =>\
    \ i * i)\n        val s21 = s20.map(i => i * i)\n        val s22 = s21.map(i =>\
    \ i * i)\n        val s23 = s22.map(i => i * i)\n        val s24 = s23.map(i =>\
    \ i * i)\n        val s25 = s24.map(i => i * i)\n        val s26 = s25.map(i =>\
    \ i * i)\n        val s27 = s26.map(i => i * i)\n        val s28 = s27.map(i =>\
    \ i * i)\n        val s29 = s28.map(i => i * i)\n        val s30 = s", "     \
    \   val m = n / 2\n        val l = m / 2\n        val r = m - l\n        val k\
    \ = l * (l + 1)\n        val j = r * (r + 1)\n        k == j", "        var result\
    \ = false\n        for (i <- 1l to n / 4l) {\n            for (j <- i to n / 3l)\
    \ {\n                for (k <- j to n / 2l) {\n                    for (l <- k\
    \ to n - 1l) {\n                        if (i + j + k + l == n) {\n          \
    \                  result = true\n                        }\n                \
    \    }\n                }\n            }\n        }\n        return result", " \
    \       val m = n / 2\n        val l = (1 to m.toInt).toList\n        val evens\
    \ = l.filter(x => x % 2 == 0)\n        val sums = evens.combinations(4).map(x\
    \ => x.sum).toList\n        sums.contains(n)", "        // Fill in the code here\n\
    \        false", "        // your code here\n        return false", "        val\
    \ evens = (2l to n by 2).toList\n        val evens4 = evens.combinations(4).toList\n\
    \        evens4.exists(l => l.sum == n)", "        val n2 = n / 2\n        val\
    \ n3 = n2 / 2\n        val n4 = n3 / 2\n        val n5 = n4 / 2\n        val n6\
    \ = n5 / 2\n        val n7 = n6 / 2\n        val n8 = n7 / 2\n        val n9 =\
    \ n8 / 2\n        val n10 = n9 / 2\n        val n11 = n10 / 2\n        val n12\
    \ = n11 / 2\n        val n13 = n12 / 2\n        val n14 = n13 / 2\n        val\
    \ n15 = n14 / 2\n        val n16 = n15 / 2\n        val n17 = n16 / 2\n      \
    \  val n18 = n17 / 2\n        val n19 = n18 / 2\n        val n20 = n19 / 2\n \
    \       val n21 = n20 / 2\n        val n22 = n21 / 2\n        val n23 = n22 /\
    \ 2\n        val n24 = n23 / 2\n        val n25 = n24 / 2\n        val n26 = n25\
    \ / 2\n        val n27 = n26 / 2\n        val n28 = n27 / 2\n        val n29 =\
    \ n28 / 2\n        val n30 = n29 / 2\n        val n31 = n30 / 2\n        val n32\
    \ = n31 / 2\n        val n33 = n32 / 2\n        val n34 = n33 / 2\n        val\
    \ n35 = n34 / 2\n        val n36 = n35 / 2\n        val n37 = n36 / 2\n      \
    \  val n38 = n37 / 2\n        val n39 = n38 / 2\n        val n40 = n39 / 2\n \
    \       val n41 = n40 / 2\n        val n42 = n41 / 2\n        val n43 = n42 /\
    \ 2\n        val n44 = n43 / 2\n        val n45 = n44 / 2\n        val n46 = n45\
    \ / 2\n        val n47 = n46 / 2\n        val n48 = n47 / 2\n        val n49 =\
    \ n48 / 2\n        val n50 = n49 / 2\n        val n51 = n50 / 2\n        val n52\
    \ = n51 / 2\n        val", "        // Fill in the code here\n        false",
  "        val limit = n / 4\n        for (i <- 2l to limit) {\n            for (j\
    \ <- i to limit) {\n                for (k <- j to limit) {\n                \
    \    for (l <- k to limit) {\n                        if (i + j + k + l == n)\
    \ return true\n                    }\n                }\n            }\n     \
    \   }\n        return false", "        if (n % 2 == 1) return false\n        val\
    \ limit = n / 2\n        for (i <- 2l to limit) {\n            if (n - i == i)\
    \ return true\n        }\n        return false", "        val nums = new ArrayBuffer[Long]()\n\
    \        for (i <- 1l to n / 2) {\n            if (n % i == 0) nums += i\n   \
    \     }\n        for (i <- 0 until nums.length) {\n            for (j <- i + 1\
    \ until nums.length) {\n                for (k <- j + 1 until nums.length) {\n\
    \                    for (l <- k + 1 until nums.length) {\n                  \
    \      if (nums(i) + nums(j) + nums(k) + nums(l) == n) return true\n         \
    \           }\n                }\n            }\n        }\n        false", " \
    \       val max = n / 4\n        for (i <- 2l to max by 2) {\n            for\
    \ (j <- 2l to max by 2) {\n                for (k <- 2l to max by 2) {\n     \
    \               for (l <- 2l to max by 2) {\n                        if (i + j\
    \ + k + l == n) return true\n                    }\n                }\n      \
    \      }\n        }\n        return false"]
stop_tokens:
- "\n    }\n"
