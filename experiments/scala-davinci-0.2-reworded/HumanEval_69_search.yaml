name: HumanEval_69_search
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n    // zero, and has a frequency greater than or\
  \ equal to the value of the integer itself. \n    // The frequency of an integer\
  \ is the number of times it appears in the list.\n    // If no such a value exist,\
  \ return -1.\n    // Examples:\n    // >>> search((List[Long](4l.toLong, 1l.toLong,\
  \ 2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong)))\n    // (2l)\n    // >>> search((List[Long](1l.toLong,\
  \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 4l.toLong)))\n\
  \    // (3l)\n    // >>> search((List[Long](5l.toLong, 5l.toLong, 4l.toLong, 4l.toLong,\
  \ 4l.toLong)))\n    // (-1l)\n    def search(lst : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](5l.toLong,\
  \ 5l.toLong, 5l.toLong, 5l.toLong, 1l.toLong))) == (1l));\n    assert(search((List[Long](4l.toLong,\
  \ 1l.toLong, 4l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](3l.toLong,\
  \ 3l.toLong))) == (-1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 8l.toLong,\
  \ 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](2l.toLong,\
  \ 3l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](2l.toLong,\
  \ 7l.toLong, 8l.toLong, 8l.toLong, 4l.toLong, 8l.toLong, 7l.toLong, 3l.toLong, 9l.toLong,\
  \ 6l.toLong, 5l.toLong, 10l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong,\
  \ 1l.toLong, 7l.toLong, 4l.toLong, 10l.toLong, 8l.toLong, 1l.toLong))) == (1l));\n\
  \    assert(search((List[Long](3l.toLong, 2l.toLong, 8l.toLong, 2l.toLong))) ==\
  \ (2l));\n    assert(search((List[Long](6l.toLong, 7l.toLong, 1l.toLong, 8l.toLong,\
  \ 8l.toLong, 10l.toLong, 5l.toLong, 8l.toLong, 5l.toLong, 3l.toLong, 10l.toLong)))\
  \ == (1l));\n    assert(search((List[Long](8l.toLong, 8l.toLong, 3l.toLong, 6l.toLong,\
  \ 5l.toLong, 6l.toLong, 4l.toLong))) == (-1l));\n    assert(search((List[Long](6l.toLong,\
  \ 9l.toLong, 6l.toLong, 7l.toLong, 1l.toLong, 4l.toLong, 7l.toLong, 1l.toLong, 8l.toLong,\
  \ 8l.toLong, 9l.toLong, 8l.toLong, 10l.toLong, 10l.toLong, 8l.toLong, 4l.toLong,\
  \ 10l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 9l.toLong, 5l.toLong,\
  \ 7l.toLong, 9l.toLong))) == (1l));\n    assert(search((List[Long](1l.toLong, 9l.toLong,\
  \ 10l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(search((List[Long](6l.toLong,\
  \ 9l.toLong, 7l.toLong, 5l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 3l.toLong, 7l.toLong,\
  \ 5l.toLong, 10l.toLong, 10l.toLong, 3l.toLong, 6l.toLong, 10l.toLong, 2l.toLong,\
  \ 8l.toLong, 6l.toLong, 5l.toLong, 4l.toLong, 9l.toLong, 5l.toLong, 3l.toLong, 10l.toLong)))\
  \ == (5l));\n    assert(search((List[Long](1l.toLong))) == (1l));\n    assert(search((List[Long](8l.toLong,\
  \ 8l.toLong, 10l.toLong, 6l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 8l.toLong,\
  \ 2l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 4l.toLong, 6l.toLong, 10l.toLong,\
  \ 4l.toLong, 2l.toLong, 1l.toLong, 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong,\
  \ 5l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong, 10l.toLong, 4l.toLong,\
  \ 8l.toLong, 2l.toLong, 10l.toLong, 5l.toLong, 1l.toLong, 2l.toLong, 9l.toLong,\
  \ 5l.toLong, 5l.toLong, 6l.toLong, 3l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 10l.toLong)))\
  \ == (2l));\n    assert(search((List[Long](1l.toLong, 6l.toLong, 10l.toLong, 1l.toLong,\
  \ 6l.toLong, 9l.toLong, 10l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 7l.toLong,\
  \ 3l.toLong))) == (1l));\n    assert(search((List[Long](9l.toLong, 2l.toLong, 4l.toLong,\
  \ 1l.toLong, 5l.toLong, 1l.toLong, 5l.toLong, 2l.toLong, 5l.toLong, 7l.toLong, 7l.toLong,\
  \ 7l.toLong, 3l.toLong, 10l.toLong, 1l.toLong, 5l.toLong, 4l.toLong, 2l.toLong,\
  \ 8l.toLong, 4l.toLong, 1l.toLong, 9l.toLong, 10l.toLong, 7l.toLong, 10l.toLong,\
  \ 2l.toLong, 8l.toLong, 10l.toLong, 9l.toLong, 4l.toLong))) == (4l));\n    assert(search((List[Long](2l.toLong,\
  \ 6l.toLong, 4l.toLong, 2l.toLong, 8l.toLong, 7l.toLong, 5l.toLong, 6l.toLong, 4l.toLong,\
  \ 10l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 7l.toLong, 8l.toLong, 8l.toLong,\
  \ 3l.toLong, 1l.toLong, 4l.toLong, 2l.toLong, 2l.toLong, 10l.toLong, 7l.toLong)))\
  \ == (4l));\n    assert(search((List[Long](9l.toLong, 8l.toLong, 6l.toLong, 10l.toLong,\
  \ 2l.toLong, 6l.toLong, 10l.toLong, 2l.toLong, 7l.toLong, 8l.toLong, 10l.toLong,\
  \ 3l.toLong, 8l.toLong, 2l.toLong, 6l.toLong, 2l.toLong, 3l.toLong, 1l.toLong)))\
  \ == (2l));\n    assert(search((List[Long](5l.toLong, 5l.toLong, 3l.toLong, 9l.toLong,\
  \ 5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong, 8l.toLong, 5l.toLong, 6l.toLong, 10l.toLong,\
  \ 10l.toLong, 6l.toLong, 8l.toLong, 4l.toLong, 10l.toLong, 7l.toLong, 7l.toLong,\
  \ 10l.toLong, 8l.toLong))) == (-1l));\n    assert(search((List[Long](10l.toLong)))\
  \ == (-1l));\n    assert(search((List[Long](9l.toLong, 7l.toLong, 7l.toLong, 2l.toLong,\
  \ 4l.toLong, 7l.toLong, 2l.toLong, 10l.toLong, 9l.toLong, 7l.toLong, 5l.toLong,\
  \ 7l.toLong, 2l.toLong))) == (2l));\n    assert(search((List[Long](5l.toLong, 4l.toLong,\
  \ 10l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 3l.toLong, 6l.toLong,\
  \ 1l.toLong, 8l.toLong))) == (1l));\n    assert(search((List[Long](7l.toLong, 9l.toLong,\
  \ 9l.toLong, 9l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 1l.toLong,\
  \ 2l.toLong, 1l.toLong, 1l.toLong, 10l.toLong, 7l.toLong, 5l.toLong, 6l.toLong,\
  \ 7l.toLong, 6l.toLong, 7l.toLong, 7l.toLong, 6l.toLong))) == (1l));\n    assert(search((List[Long](3l.toLong,\
  \ 10l.toLong, 10l.toLong, 9l.toLong, 2l.toLong))) == (-1l));\n    }\n\n}\n"
completions: ["        val m = lst.groupBy(x => x).mapValues(_.size)\n        val\
    \ m2 = m.filter(x => x._1 <= x._2)\n        if (m2.size == 0) -1 else m2.maxBy(_._1)._1",
  "        val map = new HashMap[Long, Long]\n        for (i <- lst) {\n         \
    \   if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n\
    \        var max = -1l\n        for (i <- lst) {\n            if (map(i) >= i\
    \ && i > max) max = i\n        }\n        return max", "        val map = new\
    \ HashMap[Long, Long]\n        for (i <- lst) {\n            if (map.contains(i))\
    \ map(i) += 1\n            else map(i) = 1\n        }\n        var max = -1l\n\
    \        for (i <- map.keys) {\n            if (i <= map(i) && i > max) max =\
    \ i\n        }\n        max", "        val map = new HashMap[Long, Long]\n   \
    \     for (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n       \
    \     else map(i) = 1\n        }\n        var max = -1l\n        for (i <- map.keys)\
    \ {\n            if (i <= map(i) && i > max) max = i\n        }\n        max",
  "        val map = new HashMap[Long, Long]\n        for (i <- lst) {\n         \
    \   if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n     \
    \   }\n        var max = -1l\n        for (i <- map.keys) {\n            if (i\
    \ <= map(i) && i > max) max = i\n        }\n        max", "        val map = new\
    \ HashMap[Long, Long]()\n        for (i <- lst) {\n            if (map.contains(i))\
    \ map(i) += 1\n            else map(i) = 1\n        }\n        var max = -1l\n\
    \        for (i <- map.keys) {\n            if (i <= map(i) && i > max) max =\
    \ i\n        }\n        max", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val v = m.filter(x => x._1 <= x._2).toList.sortBy(_._1).reverse\n   \
    \     if (v.length == 0) -1 else v(0)._1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = m.keys.max\n        val maxCount = m(max)\n        if (maxCount\
    \ >= max) max else -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        if (freq(max) >= max) max else -1",
  "        val m = lst.groupBy(x => x).mapValues(_.size)\n        val v = m.filter(x\
    \ => x._1 <= x._2).toList.sortBy(_._1).reverse\n        if (v.size == 0) -1l else\
    \ v(0)._1", "        val m = lst.groupBy(identity).mapValues(_.size)\n       \
    \ val r = m.filter(x => x._1 <= x._2).maxBy(_._1)\n        if (r._1 == 0) -1 else\
    \ r._1", "        val m = lst.groupBy(identity).mapValues(_.size)\n        val\
    \ k = m.keys.toList.sorted\n        for (i <- k.length - 1 to 0 by -1) {\n   \
    \         if (m(k(i)) >= k(i)) return k(i)\n        }\n        return -1", " \
    \       val freq = new HashMap[Long, Long]()\n        for (i <- lst) {\n     \
    \       if (freq.contains(i)) freq(i) += 1\n            else freq += (i -> 1)\n\
    \        }\n        val sorted = freq.toList.sortWith((a, b) => a._1 > b._1)\n\
    \        for (i <- sorted) {\n            if (i._1 <= i._2) return i._1\n    \
    \    }\n        return -1", "        val m = lst.groupBy(x => x).mapValues(_.size)\n\
    \        val l = m.toList.sortBy(_._1)\n        val r = l.filter(x => x._1 <=\
    \ x._2).sortBy(_._1).reverse\n        if (r.isEmpty) -1 else r.head._1", "   \
    \     val map = new HashMap[Long, Long]\n        for (i <- lst) {\n          \
    \  if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n      \
    \  }\n        var max = -1l\n        for (i <- map.keys) {\n            if (i\
    \ <= map(i) && i > max) max = i\n        }\n        max", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val keys = m.keys.toList.sorted\n        for (i <- keys.size - 1 to 0\
    \ by -1) {\n            if (m(keys(i)) >= keys(i)) return keys(i)\n        }\n\
    \        return -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = m.maxBy(_._2)\n        if (max._2 >= max._1) max._1 else -1",
  "        val m = lst.groupBy(identity).mapValues(_.size)\n        val max = m.maxBy(_._2)\n\
    \        if (max._2 >= max._1) max._1 else -1", "        val map = new HashMap[Long,\
    \ Long]\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map(i) = 1\n        }\n        var max = -1l\n        for\
    \ (i <- map.keys) {\n            if (i <= map(i) && i > max) max = i\n       \
    \ }\n        max", "        val m = lst.groupBy(x => x).map(x => (x._1, x._2.length)).toList.sortBy(x\
    \ => x._1)\n        m.filter(x => x._1 <= x._2).lastOption match {\n         \
    \   case Some(x) => x._1\n            case None => -1\n        }", "        val\
    \ m = lst.groupBy(identity).mapValues(_.size)\n        val keys = m.keys.toList.sorted\n\
    \        val values = m.values.toList.sorted\n        val max = keys.last\n  \
    \      val maxFreq = values.last\n        if (maxFreq >= max) max else -1", " \
    \       val m = lst.groupBy(x => x).mapValues(_.size)\n        val m2 = m.filter(x\
    \ => x._1 <= x._2)\n        if (m2.size == 0) -1l else m2.keys.max", "       \
    \ val m = lst.groupBy(identity).mapValues(_.size)\n        val m2 = m.filter(x\
    \ => x._1 <= x._2)\n        if (m2.size == 0) -1 else m2.maxBy(_._1)._1", "  \
    \      val m = lst.groupBy(x => x).map(x => (x._1, x._2.length))\n        val\
    \ m2 = m.filter(x => x._1 <= x._2)\n        if (m2.size == 0) -1l else m2.maxBy(x\
    \ => x._1)._1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = lst.max\n        for (i <- max to 1 by -1) {\n            if\
    \ (freq.contains(i) && freq(i) >= i) return i\n        }\n        return -1",
  "        val m = lst.groupBy(identity).mapValues(_.size)\n        val keys = m.keys.toList.sorted\n\
    \        val values = m.values.toList.sorted\n        val max = keys.last\n  \
    \      for (i <- 0 until keys.length) {\n            if (keys(i) == values(i)\
    \ && keys(i) == max) return keys(i)\n        }\n        return -1", "        val\
    \ m = lst.groupBy(identity).mapValues(_.size)\n        val v = m.filter(x => x._1\
    \ <= x._2).keys.toList.sorted\n        if (v.isEmpty) -1l else v.last", "    \
    \    val m = lst.groupBy(identity).mapValues(_.size)\n        val max = m.keys.max\n\
    \        if (m(max) >= max) max else -1", "        val map = new HashMap[Long,\
    \ Long]()\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map(i) = 1\n        }\n        var max = -1l\n        for\
    \ (i <- map.keys) {\n            if (i <= map(i) && i > max) max = i\n       \
    \ }\n        max", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = lst.max\n        val r = (1l to max).map(x => (x, m.getOrElse(x,\
    \ 0))).filter(x => x._1 <= x._2).maxBy(_._1)\n        if (r._1 == r._2) r._1 else\
    \ -1", "        val m = lst.groupBy(x => x).mapValues(_.size)\n        val keys\
    \ = m.keys.toList.sorted\n        val values = m.values.toList.sorted\n      \
    \  val max = keys.max\n        val maxValue = values.max\n        if (maxValue\
    \ < max) -1 else max", "        val m = lst.groupBy(x => x).mapValues(_.size)\n\
    \        val max = m.keys.max\n        val maxFreq = m(max)\n        if (maxFreq\
    \ >= max) max else -1", "        val m = lst.groupBy(x => x).mapValues(_.size)\n\
    \        val v = m.filter(x => x._1 <= x._2).toList.sortBy(x => x._1).reverse\n\
    \        if (v.isEmpty) -1 else v.head._1", "        val map = new HashMap[Long,\
    \ Long]()\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map(i) = 1\n        }\n        var max = -1l\n        for\
    \ (i <- map.keys) {\n            if (i <= map(i) && i > max) max = i\n       \
    \ }\n        max", "        val m = lst.groupBy(x => x).mapValues(_.size)\n  \
    \      val m2 = m.filter(x => x._1 <= x._2)\n        if (m2.size == 0) -1l else\
    \ m2.maxBy(_._1)._1", "        val map = new HashMap[Long, Long]\n        for\
    \ (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n            else\
    \ map(i) = 1\n        }\n        var ans = -1l\n        for (i <- lst) {\n   \
    \         if (map(i) >= i && i > ans) ans = i\n        }\n        ans", "    \
    \    val m = lst.groupBy(identity).mapValues(_.size)\n        val max = m.keys.max\n\
    \        val maxFreq = m(max)\n        if (maxFreq >= max) max else -1", "   \
    \     val m = lst.groupBy(identity).mapValues(_.size)\n        val m2 = m.filter(x\
    \ => x._1 <= x._2)\n        if (m2.size == 0) -1l else m2.maxBy(_._1)._1", " \
    \       val m = lst.groupBy(x => x).mapValues(_.size)\n        val keys = m.keys.toList.sorted\n\
    \        for (i <- keys.length - 1 to 0 by -1) {\n            if (m(keys(i)) >=\
    \ keys(i)) return keys(i)\n        }\n        return -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val s = m.filter(x => x._1 <= x._2).toList.sortBy(x => x._1)\n      \
    \  if (s.isEmpty) -1l else s.last._1", "        val m = lst.groupBy(x => x).mapValues(_.size)\n\
    \        val m2 = m.filter(x => x._1 <= x._2)\n        if (m2.size == 0) -1 else\
    \ m2.maxBy(_._1)._1", "        val map = new HashMap[Long, Long]\n        for\
    \ (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n            else\
    \ map(i) = 1\n        }\n        var max = -1l\n        for (i <- lst) {\n   \
    \         if (map(i) >= i && i > max) max = i\n        }\n        return max",
  "        val map = new HashMap[Long, Long]\n        for (i <- lst) {\n         \
    \   if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n\
    \        var max = -1l\n        for (i <- map.keys) {\n            if (i <= map(i)\
    \ && i > max) max = i\n        }\n        max", "        val m = lst.groupBy(x\
    \ => x).mapValues(_.size)\n        val max = m.keys.max\n        if (m(max) >=\
    \ max) max else -1", "        val m = lst.groupBy(x => x).map(x => (x._1, x._2.length))\n\
    \        val max = m.maxBy(x => x._2)\n        if (max._2 >= max._1) max._1 else\
    \ -1", "        val m = lst.groupBy(x => x).mapValues(_.size)\n        val v =\
    \ m.filter(x => x._1 <= x._2).toList.sortBy(_._1).reverse\n        if (v.size\
    \ == 0) -1 else v(0)._1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val k = m.keys.toList.sorted.reverse\n        for (i <- k) {\n      \
    \      if (i <= m(i)) return i\n        }\n        return -1", "        val m\
    \ = new HashMap[Long, Long]()\n        for (i <- lst) {\n            if (m.contains(i))\
    \ m(i) += 1\n            else m(i) = 1\n        }\n        var max = -1l\n   \
    \     for (i <- lst) {\n            if (i <= m(i) && i > max) max = i\n      \
    \  }\n        return max", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val r = m.filter(x => x._1 <= x._2).toList.sortBy(x => x._1).reverse\n\
    \        if (r.length == 0) -1 else r(0)._1", "        val m = lst.groupBy(x =>\
    \ x).mapValues(_.size)\n        val max = m.keys.max\n        if (m(max) >= max)\
    \ max else -1", "        val m = lst.groupBy(x => x).map(x => (x._1, x._2.length)).toList.sortBy(x\
    \ => x._1)\n        val r = m.filter(x => x._1 <= x._2).sortBy(x => x._1)\n  \
    \      if (r.length == 0) -1 else r.last._1", "        val m = lst.groupBy(x =>\
    \ x).map(x => (x._1, x._2.length))\n        val max = m.maxBy(x => x._2)\n   \
    \     if (max._2 >= max._1) max._1 else -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val k = m.keys.toList.sorted\n        val v = m.values.toList.sorted\n\
    \        var i = 0\n        while (i < k.length && v(i) >= k(i)) i += 1\n    \
    \    if (i == k.length) -1l else k(i)", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val keys = m.keys.toList.sorted\n        val values = m.values.toList.sorted\n\
    \        val max = keys.max\n        for (i <- 0 until max) {\n            if\
    \ (i + 1 > values(i)) return -1\n        }\n        return keys(max - 1)", " \
    \       val m = lst.groupBy(x => x).mapValues(_.size)\n        val max = m.keys.max\n\
    \        val maxCount = m(max)\n        if (maxCount >= max) max else -1", " \
    \       val map = new HashMap[Long, Long]\n        for (i <- lst) {\n        \
    \    if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n\
    \        var result = -1l\n        for (i <- lst) {\n            if (map(i) >=\
    \ i && i > result) result = i\n        }\n        result", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val v = m.filter(x => x._1 <= x._2).toList.sortBy(_._1).reverse\n   \
    \     if (v.isEmpty) -1 else v.head._1", "        val map = new HashMap[Long,\
    \ Long]\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map(i) = 1\n        }\n        val keys = map.keys.toList.sortWith(_\
    \ > _)\n        for (i <- keys) {\n            if (i <= map(i)) return i\n   \
    \     }\n        return -1", "        val map = new HashMap[Long, Long]()\n  \
    \      for (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n      \
    \      else map(i) = 1\n        }\n        var max = -1l\n        for (i <- map.keys)\
    \ {\n            if (i <= map(i) && i > max) max = i\n        }\n        max",
  "        val m = lst.groupBy(x => x).map(x => (x._1, x._2.length)).toList.sortBy(x\
    \ => x._1).filter(x => x._1 > x._2)\n        if (m.length == 0) -1 else m.head._1",
  "        val map = new HashMap[Long, Long]\n        for (i <- lst) {\n         \
    \   if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n\
    \        var max = -1l\n        for (i <- map.keys) {\n            if (i <= map(i)\
    \ && i > max) max = i\n        }\n        max", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val r = m.filter(x => x._1 <= x._2).toList.sortBy(x => x._1).reverse\n\
    \        if (r.isEmpty) -1 else r.head._1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val keys = m.keys.toList.sorted\n        val values = m.values.toList.sorted\n\
    \        val max = keys.max\n        val maxValue = values.max\n        if (maxValue\
    \ >= max) max else -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        if (freq(max) >= max) max else -1",
  "        val m = lst.groupBy(x => x).mapValues(_.size)\n        val keys = m.keys.toList.sorted\n\
    \        val values = m.values.toList.sorted\n        val max = keys.max\n   \
    \     for (i <- 0 until keys.size) {\n            if (keys(i) == values(i) &&\
    \ keys(i) == max) return keys(i)\n        }\n        return -1", "        val\
    \ m = lst.groupBy(identity).mapValues(_.size)\n        val keys = m.keys.toList.sorted\n\
    \        val values = m.values.toList.sorted\n        val max = keys.max\n   \
    \     val maxValue = values.max\n        if (maxValue < max) -1 else max", " \
    \       val m = lst.groupBy(x => x).mapValues(_.size)\n        val keys = m.keys.toList.sorted\n\
    \        for (i <- keys.length - 1 to 0 by -1) {\n            if (m(keys(i)) >=\
    \ keys(i)) return keys(i)\n        }\n        return -1", "        val freq =\
    \ new HashMap[Long, Long]\n        for (i <- lst) {\n            if (freq.contains(i))\
    \ freq(i) += 1\n            else freq(i) = 1\n        }\n        var max = -1l\n\
    \        for (i <- freq.keys) {\n            if (freq(i) >= i && i > max) max\
    \ = i\n        }\n        max", "        val m = new HashMap[Long, Long]\n   \
    \     for (i <- lst) {\n            if (m.contains(i)) {\n                m(i)\
    \ += 1\n            } else {\n                m(i) = 1\n            }\n      \
    \  }\n        val keys = m.keys.toList.sorted\n        var result = -1l\n    \
    \    for (i <- keys) {\n            if (i <= m(i)) {\n                result =\
    \ i\n            }\n        }\n        return result", "        val counts = lst.groupBy(identity).mapValues(_.size)\n\
    \        val result = counts.filter(x => x._1 <= x._2).maxBy(x => x._1)\n    \
    \    if (result._1 == 0) -1 else result._1", "        val m = new HashMap[Long,\
    \ Long]\n        for (i <- lst) {\n            if (m.contains(i)) m(i) += 1\n\
    \            else m(i) = 1\n        }\n        var max = -1l\n        for (i <-\
    \ m.keys) {\n            if (i <= m(i) && i > max) max = i\n        }\n      \
    \  max", "        val m = lst.groupBy(x => x).mapValues(_.size)\n        val max\
    \ = m.keys.max\n        if (m(max) >= max) max else -1", "        val m = lst.groupBy(x\
    \ => x).mapValues(_.size)\n        val keys = m.keys.toList.sorted\n        for\
    \ (i <- keys.length - 1 to 0 by -1) {\n            if (m(keys(i)) >= keys(i))\
    \ return keys(i)\n        }\n        return -1", "        val map = new HashMap[Long,\
    \ Long]\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map(i) = 1\n        }\n        var max = -1l\n        for\
    \ (i <- map.keys) {\n            if (i <= map(i) && i > max) max = i\n       \
    \ }\n        max", "        val m = lst.groupBy(x => x).mapValues(_.size)\n  \
    \      val keys = m.keys.toList.sorted\n        for (i <- keys.size - 1 to 0 by\
    \ -1) {\n            if (m(keys(i)) >= keys(i)) return keys(i)\n        }\n  \
    \      return -1", "        val m = lst.groupBy(x => x).mapValues(_.size)\n  \
    \      val max = m.keys.max\n        val maxFreq = m(max)\n        if (maxFreq\
    \ >= max) max else -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = m.keys.max\n        val maxFreq = m(max)\n        if (maxFreq\
    \ >= max) max else -1", "        val m = new HashMap[Long, Long]()\n        for\
    \ (i <- lst) {\n            if (m.contains(i)) m(i) += 1\n            else m(i)\
    \ = 1\n        }\n        var max = -1l\n        for (i <- m.keys) {\n       \
    \     if (i <= m(i) && i > max) max = i\n        }\n        return max", "   \
    \     val freq = lst.groupBy(identity).mapValues(_.size)\n        val max = freq.keys.max\n\
    \        if (freq(max) >= max) max else -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val l = m.toList.sortBy(_._1)\n        val r = l.filter(x => x._1 <=\
    \ x._2).sortBy(_._1).reverse\n        if (r.isEmpty) -1 else r.head._1", "   \
    \     val m = lst.groupBy(x => x).mapValues(_.size)\n        val m2 = m.filter(x\
    \ => x._1 <= x._2)\n        if (m2.size == 0) -1 else m2.keys.max", "        val\
    \ m = lst.groupBy(x => x).map(x => (x._1, x._2.length)).toList.sortBy(x => x._1)\n\
    \        val n = m.filter(x => x._1 <= x._2).sortBy(x => x._1)\n        if (n.length\
    \ == 0) -1l else n.last._1", "        val m = lst.groupBy(x => x).mapValues(_.size)\n\
    \        val max = m.keys.max\n        if (m(max) >= max) max else -1", "    \
    \    // Fill up this function body\n        // You can add another function as\
    \ well, if required\n        var map = Map[Long, Int]()\n        for (i <- lst)\
    \ {\n            if (map.contains(i)) {\n                map(i) += 1\n       \
    \     } else {\n                map(i) = 1\n            }\n        }\n       \
    \ var max = -1l\n        for (i <- map.keys) {\n            if (i <= map(i) &&\
    \ i > max) {\n                max = i\n            }\n        }\n        return\
    \ max", "        val m = lst.groupBy(identity).mapValues(_.size)\n        val\
    \ keys = m.keys.toList.sorted\n        for (i <- keys.length - 1 to 0 by -1) {\n\
    \            if (m(keys(i)) >= keys(i)) return keys(i)\n        }\n        return\
    \ -1", "        val m = lst.groupBy(x => x).mapValues(_.size)\n        val max\
    \ = m.maxBy(_._2)\n        if (max._2 >= max._1) max._1 else -1", "        val\
    \ m = lst.groupBy(identity).mapValues(_.size)\n        val l = m.filter(x => x._1\
    \ <= x._2).keys.toList\n        if (l.isEmpty) -1 else l.max", "        val m\
    \ = lst.groupBy(identity).mapValues(_.size)\n        val m2 = m.filter(x => x._1\
    \ <= x._2)\n        if (m2.size == 0) -1l else m2.maxBy(_._1)._1", "        val\
    \ m = lst.groupBy(identity).mapValues(_.size)\n        val l = m.toList.sortBy(_._1).reverse\n\
    \        l.find(x => x._1 <= x._2).getOrElse((-1l, -1))._1", "        val m =\
    \ lst.groupBy(identity).mapValues(_.size)\n        val x = m.filter(x => x._1\
    \ <= x._2).maxBy(_._1)\n        if (x._1 == 0) -1 else x._1", "        val map\
    \ = new HashMap[Long, Long]\n        for (i <- lst) {\n            if (map.contains(i))\
    \ map(i) += 1\n            else map(i) = 1\n        }\n        var max = -1l\n\
    \        for (i <- map.keys) {\n            if (i <= map(i) && i > max) max =\
    \ i\n        }\n        max", "        val map = new HashMap[Long, Long]\n   \
    \     for (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n       \
    \     else map(i) = 1\n        }\n        var max = -1l\n        for (i <- map.keys)\
    \ {\n            if (i <= map(i) && i > max) max = i\n        }\n        max",
  "        val m = lst.groupBy(identity).mapValues(_.size)\n        val max = m.keys.max\n\
    \        val maxFreq = m(max)\n        if (maxFreq >= max) max else -1", "   \
    \     val m = lst.groupBy(identity).mapValues(_.size)\n        val keys = m.keys.toList.sorted\n\
    \        for (i <- keys.length - 1 to 0 by -1) {\n            if (m(keys(i)) >=\
    \ keys(i)) return keys(i)\n        }\n        return -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val keys = m.keys.toList.sorted\n        val values = m.values.toList.sorted\n\
    \        val result = keys.zip(values).filter(x => x._1 <= x._2).maxBy(_._1)\n\
    \        if (result._1 == result._2) result._1 else -1", "        val m = lst.groupBy(x\
    \ => x).mapValues(_.size)\n        val max = m.maxBy(_._2)\n        if (max._2\
    \ >= max._1) max._1 else -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val s = m.keys.toList.sorted\n        for (i <- s.length - 1 to 0 by\
    \ -1) {\n            if (m(s(i)) >= s(i)) return s(i)\n        }\n        return\
    \ -1", "        var map = Map[Long, Long]()\n        for (i <- lst) {\n      \
    \      if (map.contains(i)) {\n                map(i) += 1\n            } else\
    \ {\n                map(i) = 1\n            }\n        }\n        var max = -1l\n\
    \        for (i <- map.keys) {\n            if (i <= map(i) && i > max) {\n  \
    \              max = i\n            }\n        }\n        return max", "     \
    \   val freq = lst.groupBy(identity).mapValues(_.size)\n        val max = freq.keys.max\n\
    \        if (freq(max) >= max) max else -1", "        val map = Map[Long, Long]()\n\
    \        for (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n    \
    \        else map(i) = 1\n        }\n        var max = -1l\n        for (i <-\
    \ map.keys) {\n            if (i <= map(i) && i > max) max = i\n        }\n  \
    \      return max", "        val m = lst.groupBy(x => x).mapValues(_.size)\n \
    \       val max = m.keys.max\n        val maxCount = m(max)\n        if (maxCount\
    \ >= max) max else -1", "        val map = new HashMap[Long, Long]\n        for\
    \ (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n            else\
    \ map(i) = 1\n        }\n        var max = -1l\n        for (i <- lst) {\n   \
    \         if (map(i) >= i && i > max) max = i\n        }\n        return max",
  "        val m = lst.groupBy(x => x).mapValues(_.size)\n        val max = m.keys.max\n\
    \        val maxCount = m(max)\n        if (maxCount >= max) max else -1", " \
    \       val m = lst.groupBy(x => x).mapValues(_.size)\n        val l = m.filter(x\
    \ => x._1 <= x._2).toList\n        if (l.isEmpty) -1 else l.maxBy(_._1)._1", " \
    \       val m = lst.groupBy(x => x).mapValues(_.size)\n        val v = m.filter(x\
    \ => x._1 <= x._2).toList.sortBy(x => x._1).reverse\n        if (v.isEmpty) -1l\
    \ else v.head._1", "        val counts = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = counts.maxBy(_._2)\n        if (max._2 >= max._1) max._1 else\
    \ -1", "        val map = new HashMap[Long, Long]\n        for (i <- lst) {\n\
    \            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n \
    \       }\n        var max = -1l\n        for (i <- lst) {\n            if (map(i)\
    \ >= i && i > max) max = i\n        }\n        return max", "        val map =\
    \ new HashMap[Long, Long]()\n        for (i <- lst) {\n            if (map.contains(i))\
    \ map(i) += 1\n            else map(i) = 1\n        }\n        var max = -1l\n\
    \        for (i <- map.keys) {\n            if (i <= map(i) && i > max) max =\
    \ i\n        }\n        max", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val keys = m.keys.toList.sorted\n        val values = m.values.toList.sorted\n\
    \        val max = keys.max\n        val maxValue = values.max\n        val maxIndex\
    \ = keys.indexOf(max)\n        if (maxValue >= max) max else -1", "        val\
    \ m = lst.groupBy(identity).mapValues(_.size)\n        val max = m.keys.max\n\
    \        val maxCount = m(max)\n        if (maxCount >= max) max else -1", " \
    \       val m = lst.groupBy(identity).mapValues(_.size)\n        val k = m.keys.toList.sorted\n\
    \        val v = m.values.toList.sorted\n        val r = k.zip(v).filter(x =>\
    \ x._1 <= x._2).map(x => x._1).max\n        if (r == 0) -1 else r", "        val\
    \ m = lst.groupBy(identity).mapValues(_.size)\n        val keys = m.keys.toList.sorted\n\
    \        val values = m.values.toList.sorted\n        val max = keys.max\n   \
    \     val maxIndex = keys.indexOf(max)\n        val maxValue = values(maxIndex)\n\
    \        if (maxValue >= max) max else -1", "        val m = lst.groupBy(x =>\
    \ x).mapValues(_.size)\n        val m2 = m.filter(x => x._1 <= x._2)\n       \
    \ if (m2.size == 0) -1 else m2.maxBy(_._1)._1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val v = m.filter(x => x._1 <= x._2).toList.sortBy(_._1).reverse\n   \
    \     if (v.isEmpty) -1 else v.head._1", "        val map = new HashMap[Long,\
    \ Long]\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map(i) = 1\n        }\n        var max = -1l\n        for\
    \ (i <- map.keys) {\n            if (i <= map(i) && i > max) max = i\n       \
    \ }\n        max", "        val m = lst.groupBy(x => x).map(x => (x._1, x._2.length))\n\
    \        val m2 = m.filter(x => x._1 <= x._2)\n        if (m2.size == 0) -1l else\
    \ m2.maxBy(x => x._1)._1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = m.keys.max\n        if (m(max) >= max) max else -1", "    \
    \    val m = lst.groupBy(x => x).mapValues(_.size)\n        val keys = m.keys.toList.sorted\n\
    \        for (i <- keys.size - 1 to 0 by -1) {\n            if (m(keys(i)) >=\
    \ keys(i)) return keys(i)\n        }\n        return -1", "        val m = lst.groupBy(x\
    \ => x).mapValues(_.size)\n        val m2 = m.filter(x => x._1 <= x._2)\n    \
    \    if (m2.size == 0) -1 else m2.maxBy(_._1)._1", "        val m = new HashMap[Long,\
    \ Long]\n        for (i <- lst) {\n            if (m.contains(i)) m(i) += 1\n\
    \            else m(i) = 1\n        }\n        var max = -1l\n        for (i <-\
    \ lst) {\n            if (i <= m(i) && i > max) max = i\n        }\n        max",
  "        val m = lst.groupBy(x => x).mapValues(_.size)\n        val max = m.maxBy(_._2)\n\
    \        if (max._2 >= max._1) max._1 else -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val l = m.keys.toList.sorted\n        val r = l.filter(x => x <= m(x))\n\
    \        if (r.isEmpty) -1 else r.last", "        val m = lst.groupBy(x => x).mapValues(_.size)\n\
    \        val v = m.filter(x => x._1 <= x._2).keys.toList.sorted\n        if (v.size\
    \ == 0) -1 else v.last", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = m.keys.max\n        val maxFreq = m(max)\n        if (maxFreq\
    \ >= max) max else -1", "        val map = new HashMap[Long, Long]()\n       \
    \ for (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n           \
    \ else map(i) = 1\n        }\n        var max = -1l\n        for (i <- map.keys)\
    \ {\n            if (i <= map(i) && i > max) max = i\n        }\n        max",
  "        val map = new HashMap[Long, Long]\n        for (i <- lst) {\n         \
    \   if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n\
    \        var max = -1l\n        for (i <- lst) {\n            if (map(i) >= i\
    \ && i > max) max = i\n        }\n        return max", "        val m = lst.groupBy(x\
    \ => x).mapValues(_.size)\n        val r = m.filter(x => x._1 <= x._2).maxBy(x\
    \ => x._1)\n        if (r._1 == 0) -1 else r._1", "        val m = lst.groupBy(x\
    \ => x).map(x => (x._1, x._2.length))\n        val l = m.keys.toList.sorted\n\
    \        for (i <- l.length - 1 to 0 by -1) {\n            if (m(l(i)) >= l(i))\
    \ return l(i)\n        }\n        return -1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        if (freq(max) >= max) max else -1",
  "        val map = new HashMap[Long, Long]\n        for (i <- lst) {\n         \
    \   if (map.contains(i)) {\n                map(i) += 1\n            } else {\n\
    \                map(i) = 1\n            }\n        }\n        var max = -1l\n\
    \        for (i <- lst) {\n            if (map(i) >= i && i > max) {\n       \
    \         max = i\n            }\n        }\n        return max", "        val\
    \ m = lst.groupBy(x => x).mapValues(_.size)\n        val m2 = m.filter(x => x._1\
    \ <= x._2)\n        if (m2.size == 0) -1 else m2.keys.max", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = m.keys.max\n        val maxFreq = m(max)\n        if (maxFreq\
    \ >= max) max else -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val l = m.toList.sortBy(_._1)\n        val r = l.filter(x => x._1 <=\
    \ x._2).sortBy(_._1).reverse\n        if (r.length == 0) -1 else r(0)._1", " \
    \       val m = lst.groupBy(x => x).map(x => (x._1, x._2.length))\n        val\
    \ r = m.filter(x => x._1 <= x._2)\n        if (r.size == 0) -1 else r.maxBy(x\
    \ => x._1)._1", "        val map = lst.groupBy(identity).mapValues(_.size)\n \
    \       val max = map.maxBy(_._2)\n        if (max._2 >= max._1) max._1 else -1",
  "        val m = lst.groupBy(identity).mapValues(_.size)\n        val m2 = m.filter(x\
    \ => x._1 >= x._2)\n        if (m2.size == 0) -1 else m2.maxBy(_._1)._1", "  \
    \      val m = new HashMap[Long, Long]()\n        for (i <- lst) {\n         \
    \   if (m.contains(i)) m(i) += 1\n            else m(i) = 1\n        }\n     \
    \   var r = -1l\n        for (i <- m.keys) {\n            if (i <= m(i) && i >\
    \ r) r = i\n        }\n        return r", "        val map = new HashMap[Long,\
    \ Long]\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map += (i -> 1)\n        }\n        var max = -1l\n    \
    \    for (i <- map.keys) {\n            if (i <= map(i) && i > max) max = i\n\
    \        }\n        max", "        val m = lst.groupBy(x => x).mapValues(_.size)\n\
    \        val r = m.filter(x => x._1 <= x._2).maxBy(x => x._1)\n        if (r._1\
    \ == r._2) r._1 else -1", "        val map = new HashMap[Long, Long]\n       \
    \ for (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n           \
    \ else map(i) = 1\n        }\n        var max = -1l\n        for (i <- lst) {\n\
    \            if (map(i) >= i && i > max) max = i\n        }\n        max", " \
    \       val map = new HashMap[Long, Long]\n        for (i <- lst) {\n        \
    \    if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n\
    \        var max = -1l\n        for (i <- lst) {\n            if (map(i) >= i\
    \ && i > max) max = i\n        }\n        max", "        val m = lst.groupBy(x\
    \ => x).mapValues(_.size)\n        val r = m.filter(x => x._1 <= x._2).keys.toList.sorted\n\
    \        if (r.size == 0) -1 else r.last", "        val map = new HashMap[Long,\
    \ Long]\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map(i) = 1\n        }\n        var max = -1l\n        for\
    \ (i <- map.keys) {\n            if (i <= map(i) && i > max) max = i\n       \
    \ }\n        max", "        val map = new HashMap[Long, Long]\n        for (i\
    \ <- lst) {\n            if (map.contains(i)) map(i) += 1\n            else map(i)\
    \ = 1\n        }\n        var max = -1l\n        for (i <- map.keys) {\n     \
    \       if (i <= map(i) && i > max) max = i\n        }\n        max", "      \
    \  val m = lst.groupBy(identity).mapValues(_.size)\n        val m2 = m.filter(x\
    \ => x._1 <= x._2)\n        if (m2.size == 0) -1 else m2.maxBy(_._1)._1", "  \
    \      val m = lst.groupBy(identity).mapValues(_.size)\n        val l = m.keys.toList.sorted\n\
    \        val r = l.filter(x => m(x) >= x)\n        if (r.isEmpty) -1 else r.last",
  "        val m = lst.groupBy(identity).mapValues(_.size)\n        val l = m.toList.sortBy(_._1)\n\
    \        var i = l.length - 1\n        while (i >= 0) {\n            if (l(i)._2\
    \ >= l(i)._1) return l(i)._1\n            i -= 1\n        }\n        return -1",
  "        val freq = lst.groupBy(identity).mapValues(_.size)\n        val max = freq.maxBy(_._2)\n\
    \        if (max._2 >= max._1) max._1 else -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val l = m.toList.sortBy(_._1)\n        val r = l.filter(x => x._1 <=\
    \ x._2).map(_._1).max\n        if (r == 0) -1 else r", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val keys = m.keys.toList.sorted\n        for (i <- keys.length - 1 to\
    \ 0 by -1) {\n            if (m(keys(i)) >= keys(i)) return keys(i)\n        }\n\
    \        return -1", "        val freq = lst.groupBy(x => x).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        if (freq(max) >= max) max else -1",
  "        val m = new HashMap[Long, Long]()\n        for (i <- lst) {\n         \
    \   if (m.contains(i)) m(i) += 1\n            else m(i) = 1\n        }\n     \
    \   var max = -1l\n        for (i <- lst) {\n            if (i > max && m(i) >=\
    \ i) max = i\n        }\n        return max", "        val map = new HashMap[Long,\
    \ Long]\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map(i) = 1\n        }\n        var max = -1l\n        for\
    \ (i <- lst) {\n            if (map(i) >= i && i > max) max = i\n        }\n \
    \       max", "        val map = new HashMap[Long, Long]()\n        for (i <-\
    \ lst) {\n            if (map.contains(i)) map(i) += 1\n            else map(i)\
    \ = 1\n        }\n        var max = -1l\n        for (i <- map.keys) {\n     \
    \       if (i <= map(i) && i > max) max = i\n        }\n        max", "      \
    \  val m = lst.groupBy(x => x).mapValues(_.size)\n        val m2 = m.filter(x\
    \ => x._1 <= x._2)\n        if (m2.size == 0) -1 else m2.maxBy(_._1)._1", "  \
    \      val m = lst.groupBy(identity).mapValues(_.size)\n        val v = m.filter(x\
    \ => x._1 <= x._2).toList.sortBy(_._1).reverse\n        if (v.isEmpty) -1 else\
    \ v.head._1", "        val m = lst.groupBy(x => x).mapValues(_.size)\n       \
    \ val r = m.filter(x => x._1 >= x._2).keys.toList.sorted\n        if (r.size ==\
    \ 0) -1 else r.last", "        val map = Map[Long, Long]()\n        for (i <-\
    \ lst) {\n            if (map.contains(i)) {\n                map(i) += 1\n  \
    \          } else {\n                map(i) = 1\n            }\n        }\n  \
    \      var max = -1l\n        for (i <- map.keys) {\n            if (i <= map(i)\
    \ && i > max) {\n                max = i\n            }\n        }\n        return\
    \ max", "        val m = lst.groupBy(x => x).mapValues(_.size)\n        val max\
    \ = m.keys.max\n        val maxCount = m(max)\n        if (maxCount >= max) max\
    \ else -1", "        val m = lst.groupBy(x => x).mapValues(_.size)\n        val\
    \ r = m.filter(x => x._1 <= x._2).toList.sortBy(x => x._1).reverse\n        if\
    \ (r.length == 0) -1 else r(0)._1", "        val map = new HashMap[Long, Long]\n\
    \        for (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n    \
    \        else map(i) = 1\n        }\n        var max = -1l\n        for (i <-\
    \ lst) {\n            if (map(i) >= i && i > max) max = i\n        }\n       \
    \ return max", "        val m = lst.groupBy(identity).mapValues(_.size)\n    \
    \    val l = m.filter(x => x._1 <= x._2).toList\n        if (l.isEmpty) -1 else\
    \ l.maxBy(_._1)._1", "        val map = new HashMap[Long, Long]\n        for (i\
    \ <- lst) {\n            if (map.contains(i)) map(i) += 1\n            else map(i)\
    \ = 1\n        }\n        var max = -1l\n        for (i <- map.keys) {\n     \
    \       if (i <= map(i) && i > max) max = i\n        }\n        max", "      \
    \  val m = new HashMap[Long, Long]()\n        for (i <- lst) {\n            if\
    \ (m.contains(i)) m(i) += 1\n            else m(i) = 1\n        }\n        var\
    \ max = -1l\n        for (i <- m.keys) {\n            if (i <= m(i) && i > max)\
    \ max = i\n        }\n        return max", "        var map = Map[Long, Long]()\n\
    \        for (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n    \
    \        else map(i) = 1\n        }\n        var max = -1l\n        for (i <-\
    \ map.keys) {\n            if (i <= map(i) && i > max) max = i\n        }\n  \
    \      return max", "        val map = new HashMap[Long, Long]\n        for (i\
    \ <- lst) {\n            if (map.contains(i)) map(i) += 1\n            else map(i)\
    \ = 1\n        }\n        var max = -1l\n        for (i <- map.keys) {\n     \
    \       if (i <= map(i) && i > max) max = i\n        }\n        max", "      \
    \  val freq = lst.groupBy(identity).mapValues(_.size)\n        val max = lst.max\n\
    \        for (i <- max to 1 by -1) {\n            if (freq.contains(i) && freq(i)\
    \ >= i) return i\n        }\n        return -1", "        val m = lst.groupBy(x\
    \ => x).map(x => (x._1, x._2.length)).toList.sortBy(x => x._1)\n        val m2\
    \ = m.filter(x => x._1 <= x._2)\n        if (m2.length == 0) -1 else m2.last._1",
  "        val m = lst.groupBy(x => x).mapValues(_.size)\n        val m2 = m.filter(x\
    \ => x._1 <= x._2)\n        if (m2.size == 0) -1l else m2.maxBy(_._1)._1", " \
    \       val m = lst.groupBy(identity).mapValues(_.size)\n        val max = m.keys.max\n\
    \        val maxFreq = m(max)\n        if (maxFreq >= max) max else -1", "   \
    \     val map = new HashMap[Long, Long]\n        for (i <- lst) {\n          \
    \  if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n      \
    \  }\n        val keys = map.keys.toList.sorted\n        for (i <- keys) {\n \
    \           if (i <= map(i)) return i\n        }\n        return -1", "      \
    \  val map = new HashMap[Long, Long]\n        for (i <- lst) {\n            if\
    \ (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n    \
    \    var max = -1l\n        for (i <- lst) {\n            if (map(i) >= i && i\
    \ > max) max = i\n        }\n        return max", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        if (freq(max) >= max) max else -1",
  "        val map = new HashMap[Long, Long]\n        for (i <- lst) {\n         \
    \   if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n\
    \        var max = -1l\n        for (i <- map.keys) {\n            if (i <= map(i)\
    \ && i > max) max = i\n        }\n        max", "        val map = new HashMap[Long,\
    \ Long]\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map(i) = 1\n        }\n        var max = -1l\n        for\
    \ (i <- map.keys) {\n            if (i <= map(i) && i > max) max = i\n       \
    \ }\n        max", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        if (freq(max) >= max) max else -1",
  "        val map = new HashMap[Long, Long]()\n        for (i <- lst) {\n       \
    \     if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n\
    \        var max = -1l\n        for (i <- map.keys) {\n            if (i <= map(i)\
    \ && i > max) max = i\n        }\n        max", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val r = m.filter(x => x._1 <= x._2).keys.toList.sorted.reverse\n    \
    \    if (r.isEmpty) -1l else r.head", "        val map = new HashMap[Long, Long]()\n\
    \        for (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n    \
    \        else map(i) = 1\n        }\n        var max = -1l\n        for (i <-\
    \ map.keys) {\n            if (i <= map(i) && i > max) max = i\n        }\n  \
    \      max", "        val freq = new HashMap[Long, Long]\n        for (i <- lst)\
    \ {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i)\
    \ = 1\n        }\n        var max = -1l\n        for (i <- freq.keys) {\n    \
    \        if (freq(i) >= i && i > max) max = i\n        }\n        return max",
  "        val map = new HashMap[Long, Long]\n        for (i <- lst) {\n         \
    \   if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n\
    \        var max = -1l\n        for (i <- lst) {\n            if (map(i) >= i\
    \ && i > max) max = i\n        }\n        return max", "        val map = new\
    \ HashMap[Long, Long]\n        for (i <- lst) {\n            if (map.contains(i))\
    \ map(i) += 1\n            else map(i) = 1\n        }\n        var max = -1l\n\
    \        for (i <- map.keys) {\n            if (i <= map(i) && i > max) max =\
    \ i\n        }\n        max", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val l = m.toList.sortBy(_._1).reverse\n        var max = -1l\n      \
    \  for (i <- l) {\n            if (i._2 >= i._1) {\n                max = i._1\n\
    \                break\n            }\n        }\n        max", "        val map\
    \ = new HashMap[Long, Long]()\n        for (i <- lst) {\n            if (map.contains(i))\
    \ map(i) += 1\n            else map(i) = 1\n        }\n        var max = -1l\n\
    \        for (i <- map.keys) {\n            if (i <= map(i) && i > max) max =\
    \ i\n        }\n        max", "        val m = lst.groupBy(x => x).mapValues(_.size)\n\
    \        val max = m.keys.max\n        val maxCount = m(max)\n        if (maxCount\
    \ >= max) max else -1", "        val m = new HashMap[Long, Long]\n        lst.foreach(x\
    \ => m(x) = m.getOrElse(x, 0l) + 1)\n        val keys = m.keys.toList.sortWith(_\
    \ > _)\n        for (key <- keys) {\n            if (key <= m(key)) return key\n\
    \        }\n        -1", "        val map = new HashMap[Long, Long]\n        for\
    \ (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n            else\
    \ map(i) = 1\n        }\n        var max = -1l\n        for (i <- map.keys) {\n\
    \            if (i <= map(i) && i > max) max = i\n        }\n        max", " \
    \       val m = lst.groupBy(x => x).mapValues(_.size)\n        val k = m.keys.toList.sorted.reverse\n\
    \        for (i <- k) {\n            if (i <= m(i)) return i\n        }\n    \
    \    return -1", "        val m = lst.groupBy(identity).mapValues(_.size)\n  \
    \      val l = m.toList.sortBy(_._1)\n        l.find(x => x._1 <= x._2).map(_._1).getOrElse(-1l)",
  "        val m = lst.groupBy(identity).mapValues(_.size)\n        val l = m.toList.sortBy(_._1)\n\
    \        val r = l.filter(x => x._1 <= x._2).sortBy(-_._1)\n        if (r.isEmpty)\
    \ -1 else r.head._1", "        val freq = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = freq.keys.max\n        if (freq(max) >= max) max else -1",
  "        val m = lst.groupBy(identity).mapValues(_.size)\n        val max = m.filter(x\
    \ => x._1 <= x._2).maxBy(_._1)\n        if (max._1 == 0) -1 else max._1", "  \
    \      val map = new HashMap[Long, Long]\n        for (i <- lst) {\n         \
    \   if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n\
    \        var max = -1l\n        for (i <- map.keys) {\n            if (i <= map(i)\
    \ && i > max) max = i\n        }\n        max", "        val map = new HashMap[Long,\
    \ Long]\n        for (i <- lst) {\n            if (map.contains(i)) map(i) +=\
    \ 1\n            else map(i) = 1\n        }\n        var max = -1l\n        for\
    \ (i <- map.keys) {\n            if (i <= map(i) && i > max) max = i\n       \
    \ }\n        max", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val v = m.filter(x => x._1 <= x._2).keys.toList.sorted\n        if (v.size\
    \ == 0) -1l else v.last", "        val m = lst.groupBy(identity).mapValues(_.size)\n\
    \        val max = m.keys.max\n        val maxCount = m(max)\n        if (maxCount\
    \ >= max) max else -1", "        val map = new HashMap[Long, Long]\n        for\
    \ (i <- lst) {\n            if (map.contains(i)) map(i) += 1\n            else\
    \ map(i) = 1\n        }\n        var max = -1l\n        for (i <- lst) {\n   \
    \         if (map(i) >= i && i > max) max = i\n        }\n        return max",
  "        val m = lst.groupBy(identity).mapValues(_.size)\n        val v = m.filter(x\
    \ => x._1 <= x._2).keys.toList.sorted\n        if (v.isEmpty) -1l else v.last",
  "        val m = lst.groupBy(identity).mapValues(_.size)\n        val v = m.filter(x\
    \ => x._1 <= x._2).maxBy(_._1)\n        if (v._1 == v._2) v._1 else -1", "   \
    \     val m = lst.groupBy(x => x).mapValues(_.size)\n        val l = m.toList.sortBy(_._1).reverse\n\
    \        var i = 0\n        while (i < l.length) {\n            if (l(i)._1 <=\
    \ l(i)._2) return l(i)._1\n            i += 1\n        }\n        return -1"]
stop_tokens:
- "\n    }\n"
