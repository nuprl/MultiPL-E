name: HumanEval_100_make_a_pile
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, you have to make a pile of n levels of stones.\n\
  \    // The first level has n stones.\n    // The number of stones in the next level\
  \ is:\n    // - the next odd number if n is odd.\n    // - the next even number\
  \ if n is even.\n    // Return the number of stones in each level in a list, where\
  \ element at index\n    // i represents the number of stones in the level (i+1).\n\
  \    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong,\
  \ 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
  \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
  \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
  \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
  \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
  \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        var result = List[Long]()\n        var i = n\n        while\
    \ (i > 0) {\n            result = i :: result\n            if (i % 2 == 0) i =\
    \ i + 1 else i = i + 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i += 1 else i += 2\n        }\n        result", " \
    \       var result = List[Long]()\n        result = result :+ n\n        var next\
    \ = if (n % 2 == 0) n + 1 else n + 2\n        while (next <= n * 2) {\n      \
    \      result = result :+ next\n            next = if (next % 2 == 0) next + 1\
    \ else next + 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            i = if (i % 2 == 0) i + 1 else i + 2\n        }\n        result",
  "        def makeAPile(n : Long, acc : List[Long]) : List[Long] = {\n          \
    \  if (n == 0) acc\n            else if (n % 2 == 0) makeAPile(n - 1, (n + 1)\
    \ :: acc)\n            else makeAPile(n - 1, (n - 1) :: acc)\n        }\n    \
    \    makeAPile(n, List[Long](n))", "        var l = List[Long]()\n        var\
    \ i = n\n        while (i > 0) {\n            l = i :: l\n            if (i %\
    \ 2 == 0) i += 1 else i += 2\n        }\n        l", "        val l = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        l.toList", "  \
    \      var list = List[Long]()\n        var i = n\n        while (i > 0) {\n \
    \           list = i :: list\n            if (i % 2 == 0) i = i + 1 else i = i\
    \ + 2\n        }\n        list", "        var result = List[Long]()\n        var\
    \ current = n\n        while (current > 0) {\n            result = current ::\
    \ result\n            current = if (current % 2 == 0) current + 1 else current\
    \ + 2\n        }\n        result", "        var result = List[Long]()\n      \
    \  var current = n\n        while (current > 0) {\n            result = current\
    \ :: result\n            current = if (current % 2 == 0) current + 1 else current\
    \ + 2\n        }\n        result", "        def makeAPileHelper(n : Long, acc\
    \ : List[Long]) : List[Long] = {\n            if (n == 0) acc\n            else\
    \ if (n % 2 == 0) makeAPileHelper(n - 1, (n + 1) :: acc)\n            else makeAPileHelper(n\
    \ - 1, (n - 1) :: acc)\n        }\n        makeAPileHelper(n, List(n))", "   \
    \     val list = new ListBuffer[Long]()\n        var i = n\n        while (i >\
    \ 0) {\n            list += i\n            if (i % 2 == 0) i = i + 1 else i =\
    \ i + 2\n        }\n        list.toList", "        var l = List[Long]()\n    \
    \    var i = n\n        while (i > 0) {\n            l = i :: l\n            if\
    \ (i % 2 == 0) i += 1 else i += 2\n        }\n        l", "        var result\
    \ = List[Long]()\n        var current = n\n        while (current > 0) {\n   \
    \         result = current :: result\n            current = if (current % 2 ==\
    \ 0) current + 1 else current + 2\n        }\n        result", "        val result\
    \ = ListBuffer[Long]()\n        var i = n\n        while (i > 0) {\n         \
    \   result += i\n            i = if (i % 2 == 0) i + 1 else i + 2\n        }\n\
    \        result.toList", "        def makeAPileHelper(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 0) acc\n            else if (n % 2 ==\
    \ 0) makeAPileHelper(n - 1, (n - 1) :: acc)\n            else makeAPileHelper(n\
    \ - 1, n :: acc)\n        }\n        makeAPileHelper(n, List[Long]())", "    \
    \    var result = List[Long]()\n        var level = n\n        while (level >\
    \ 0) {\n            result = level :: result\n            level = if (level %\
    \ 2 == 0) level + 1 else level + 2\n        }\n        result", "        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n           \
    \ else makeAPile(n - 1, (n - 1) :: acc)\n        }\n        makeAPile(n, List(n))",
  "        val l = new ListBuffer[Long]\n        var i = n\n        while (i > 0)\
    \ {\n            l += i\n            i = if (i % 2 == 0) i / 2 else (i + 1) /\
    \ 2\n        }\n        l.toList", "        var result = List[Long]()\n      \
    \  var i = n\n        while (i > 0) {\n            result = i :: result\n    \
    \        if (i % 2 == 0) i += 1 else i += 2\n        }\n        result", "   \
    \     var result = List[Long]()\n        var i = n\n        while (i > 0) {\n\
    \            result = i :: result\n            if (i % 2 == 0) i = i + 1 else\
    \ i = i + 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            i = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        result",
  "        var l = List[Long]()\n        var i = n\n        while (i > 0) {\n    \
    \        l = i :: l\n            if (i % 2 == 0) i += 1 else i += 2\n        }\n\
    \        l", "        var result = List[Long]()\n        var i = n\n        while\
    \ (i > 0) {\n            result = i :: result\n            i = if (i % 2 == 0)\
    \ i / 2 else (i + 1) / 2\n        }\n        result", "        var l = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            l = i :: l\n        \
    \    if (i % 2 == 0) i += 1 else i += 2\n        }\n        l", "        var result\
    \ = List[Long]()\n        var current = n\n        while (current > 0) {\n   \
    \         result = current :: result\n            current = if (current % 2 ==\
    \ 0) current / 2 else current / 2 + 1\n        }\n        result", "        var\
    \ l = List[Long]()\n        var i = n\n        while (i > 0) {\n            l\
    \ = l :+ i\n            i = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n\
    \        l.reverse", "        var result = List[Long]()\n        var i = n\n \
    \       while (i > 0) {\n            result = i :: result\n            i = if\
    \ (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        result", "        var\
    \ result = List[Long]()\n        var i = n\n        while (i > 0) {\n        \
    \    result = i :: result\n            i = if (i % 2 == 0) i + 1 else i + 2\n\
    \        }\n        result", "        var l = List[Long]()\n        var x = n\n\
    \        while (x > 0) {\n            l = x :: l\n            if (x % 2 == 0)\
    \ x = x / 2 else x = x / 2 + 1\n        }\n        l", "        var l = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            l = i :: l\n        \
    \    if (i % 2 == 0) i += 1 else i += 2\n        }\n        l", "        var result\
    \ = List[Long]()\n        var i = n\n        while (i > 0) {\n            result\
    \ = i :: result\n            if (i % 2 == 0) i = i + 1 else i = i + 2\n      \
    \  }\n        result", "        var result = List[Long]()\n        var level =\
    \ n\n        while (level > 0) {\n            result = level :: result\n     \
    \       level = if (level % 2 == 0) level + 1 else level + 2\n        }\n    \
    \    result", "        def makeAPileRec(n : Long, acc : List[Long]) : List[Long]\
    \ = {\n            if (n == 0) acc\n            else if (n % 2 == 0) makeAPileRec(n\
    \ - 1, (n + 1) :: acc)\n            else makeAPileRec(n - 1, (n - 1) :: acc)\n\
    \        }\n        makeAPileRec(n, List(n))", "        def makeAPile(n : Long,\
    \ acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n          \
    \  else makeAPile(n - 1, (n + 1) :: acc)\n        }\n        makeAPile(n, List())",
  "        var l = List[Long]()\n        var m = n\n        while (m > 0) {\n    \
    \        l = m :: l\n            m = if (m % 2 == 0) m / 2 else (m + 1) / 2\n\
    \        }\n        l", "        var result = List[Long]()\n        var i = n\n\
    \        while (i > 0) {\n            result = i :: result\n            i = if\
    \ (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        result", "        var\
    \ l = List[Long]()\n        var i = n\n        while (i > 0) {\n            l\
    \ = i :: l\n            if (i % 2 == 0) i += 1 else i += 2\n        }\n      \
    \  l", "        var result = List[Long]()\n        var current = n\n        while\
    \ (current > 0) {\n            result = current :: result\n            current\
    \ = if (current % 2 == 0) current + 1 else current + 2\n        }\n        result",
  "        var result = List[Long]()\n        var i = n\n        while (i > 0) {\n\
    \            result = i :: result\n            if (i % 2 == 0) i += 1 else i +=\
    \ 2\n        }\n        result", "        var result = List[Long]()\n        var\
    \ current = n\n        while (current > 0) {\n            result = current ::\
    \ result\n            current = if (current % 2 == 0) current + 1 else current\
    \ + 2\n        }\n        result", "        val l = new ListBuffer[Long]\n   \
    \     var m = n\n        while (m > 0) {\n            l += m\n            m =\
    \ if (m % 2 == 0) m / 2 else (m + 1) / 2\n        }\n        l.toList", "    \
    \    var result = List[Long]()\n        var i = n\n        while (i > 0) {\n \
    \           result = i :: result\n            if (i % 2 == 0) i += 1 else i +=\
    \ 2\n        }\n        result", "        var result = List[Long]()\n        var\
    \ current = n\n        while (current > 0) {\n            result = current ::\
    \ result\n            current = if (current % 2 == 0) current / 2 - 1 else current\
    \ / 2\n        }\n        result", "        var list = List[Long]()\n        var\
    \ i = n\n        while (i > 0) {\n            list = i :: list\n            if\
    \ (i % 2 == 0) i += 1 else i += 2\n        }\n        list", "        var l =\
    \ List[Long]()\n        var i = n\n        while (i > 0) {\n            l = i\
    \ :: l\n            if (i % 2 == 0) i += 1 else i += 2\n        }\n        l",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            current = if (current\
    \ % 2 == 0) current + 1 else current + 2\n        }\n        result", "      \
    \  var lst = List[Long]()\n        var i = n\n        while (i > 0) {\n      \
    \      lst = i :: lst\n            if (i % 2 == 0) i += 1 else i += 2\n      \
    \  }\n        lst", "        var result = List[Long]()\n        var current =\
    \ n\n        while (current > 0) {\n            result = current :: result\n \
    \           current = if (current % 2 == 0) current + 1 else current + 2\n   \
    \     }\n        result", "        var l = List[Long]()\n        var i = n\n \
    \       while (i > 0) {\n            l = i :: l\n            if (i % 2 == 0) i\
    \ += 1 else i += 2\n        }\n        l", "        var l = List[Long]()\n   \
    \     var i = n\n        while (i > 0) {\n            l = i :: l\n           \
    \ if (i % 2 == 0) i += 1 else i += 2\n        }\n        l", "        var l =\
    \ List[Long]()\n        var i = n\n        while (i > 0) {\n            l = i\
    \ :: l\n            if (i % 2 == 0) i += 1 else i += 2\n        }\n        l",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            current = if (current\
    \ % 2 == 0) current + 1 else current + 2\n        }\n        result", "      \
    \  var l = List[Long]()\n        var i = n\n        while (i > 0) {\n        \
    \    l = i :: l\n            if (i % 2 == 0) i += 1 else i += 2\n        }\n \
    \       l", "        var result = List[Long]()\n        var current = n\n    \
    \    while (current > 0) {\n            result = current :: result\n         \
    \   current = if (current % 2 == 0) current + 1 else current + 2\n        }\n\
    \        result", "        var l = List[Long]()\n        var i = n\n        while\
    \ (i > 0) {\n            l = i :: l\n            if (i % 2 == 0) i += 1 else i\
    \ += 2\n        }\n        l", "        var result = List[Long]()\n        var\
    \ curr = n\n        while (curr > 0) {\n            result = curr :: result\n\
    \            if (curr % 2 == 0) curr = curr + 1\n            else curr = curr\
    \ + 2\n        }\n        result", "        if (n == 1) List(1)\n        else\
    \ {\n            val next = if (n % 2 == 0) n + 1 else n + 2\n            List(n)\
    \ ++ makeAPile(next)\n        }", "        var l = List[Long]()\n        var i\
    \ = n\n        while (i > 0) {\n            l = i :: l\n            if (i % 2\
    \ == 0) i = i / 2 - 1\n            else i = i / 2\n        }\n        l", "  \
    \      var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            current = if (current\
    \ % 2 == 0) current + 1 else current + 2\n        }\n        result", "      \
    \  var result = List[Long]()\n        var x = n\n        while (x > 0) {\n   \
    \         result = x :: result\n            if (x % 2 == 0) x -= 1\n         \
    \   x /= 2\n        }\n        result", "        val result = new ListBuffer[Long]\n\
    \        var current = n\n        while (current > 0) {\n            result +=\
    \ current\n            current = if (current % 2 == 0) current + 1 else current\
    \ + 2\n        }\n        result.toList", "        var result = List[Long]()\n\
    \        var level = n\n        while (level > 0) {\n            result = level\
    \ :: result\n            level = if (level % 2 == 0) level + 1 else level + 2\n\
    \        }\n        result", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result = current :: result\n\
    \            current = if (current % 2 == 0) current / 2 else (current - 1) /\
    \ 2\n        }\n        result", "        var result = List[Long]()\n        var\
    \ i = n\n        while (i > 0) {\n            result = i :: result\n         \
    \   i = if (i % 2 == 0) i + 1 else i + 2\n        }\n        result", "      \
    \  var l = List[Long]()\n        var i = n\n        while (i > 0) {\n        \
    \    l = i :: l\n            if (i % 2 == 0) i += 1 else i += 2\n        }\n \
    \       l", "        var result = List[Long]()\n        var x = n\n        while\
    \ (x > 0) {\n            result = x :: result\n            if (x % 2 == 0) x =\
    \ x / 2 - 1\n            else x = x / 2\n        }\n        result", "       \
    \ var l = List[Long]()\n        var i = n\n        while (i > 0) {\n         \
    \   l = i :: l\n            if (i % 2 == 0) i += 1 else i += 2\n        }\n  \
    \      l", "        var pile = ListBuffer[Long]()\n        var current = n\n \
    \       while (current > 0) {\n            pile += current\n            current\
    \ = if (current % 2 == 0) current + 1 else current + 2\n        }\n        pile.toList",
  "        val result = new ListBuffer[Long]\n        var i = n\n        while (i\
    \ > 0) {\n            result += i\n            i = if (i % 2 == 0) i + 1 else\
    \ i + 2\n        }\n        result.toList", "        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i = i / 2 - 1\n            else i = i / 2\n     \
    \   }\n        result", "        var result = List[Long]()\n        var i = n\n\
    \        while (i > 0) {\n            result = i :: result\n            if (i\
    \ % 2 == 0) i += 1 else i += 2\n        }\n        result", "        var result\
    \ = List[Long]()\n        var next = n\n        while (next > 0) {\n         \
    \   result = next :: result\n            next = if (next % 2 == 0) next + 1 else\
    \ next + 2\n        }\n        result", "        val l = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        l.toList", "  \
    \      var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            current = if (current\
    \ % 2 == 0) current + 1 else current + 2\n        }\n        result", "      \
    \  val result = new ListBuffer[Long]\n        var current = n\n        while (current\
    \ > 0) {\n            result += current\n            current = if (current % 2\
    \ == 0) current + 1 else current + 2\n        }\n        result.toList", "   \
    \     val l = new ListBuffer[Long]\n        var m = n\n        while (m > 0) {\n\
    \            l += m\n            m = if (m % 2 == 0) m + 1 else m + 2\n      \
    \  }\n        l.toList", "        def makeAPile(n : Long, acc : List[Long]) :\
    \ List[Long] = {\n            if (n == 0) acc\n            else makeAPile(n -\
    \ 1, n :: acc)\n        }\n        makeAPile(n, List[Long]())", "        var result\
    \ = List[Long]()\n        var i = n\n        while (i > 0) {\n            result\
    \ = i :: result\n            i = if (i % 2 == 0) i + 1 else i + 2\n        }\n\
    \        result", "        var result = List[Long]()\n        var i = n\n    \
    \    while (i > 0) {\n            result = i :: result\n            i = if (i\
    \ % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        result", "        var result\
    \ = List[Long]()\n        var current = n\n        while (current > 0) {\n   \
    \         result = current :: result\n            current = if (current % 2 ==\
    \ 0) current + 1 else current + 2\n        }\n        result", "        val result\
    \ = new ListBuffer[Long]\n        var i = n\n        while (i > 0) {\n       \
    \     result += i\n            i = if (i % 2 == 0) i / 2 else (i + 1) / 2\n  \
    \      }\n        result.toList", "        val result = ListBuffer[Long]()\n \
    \       var i = n\n        while (i > 0) {\n            result += i\n        \
    \    i = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        result.toList",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            current = if (current\
    \ % 2 == 0) current + 1 else current + 2\n        }\n        result", "      \
    \  var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            current = if (current\
    \ % 2 == 0) current / 2 else (current + 1) / 2\n        }\n        result", " \
    \       var list = List[Long]()\n        var i = n\n        while (i > 0) {\n\
    \            list = i :: list\n            if (i % 2 == 0) i += 1 else i += 2\n\
    \        }\n        list", "        var l = List[Long]()\n        var i = n\n\
    \        while (i > 0) {\n            l = i :: l\n            if (i % 2 == 0)\
    \ i = i / 2 - 1\n            else i = i / 2\n        }\n        l", "        var\
    \ result = List[Long]()\n        var level = n\n        while (level > 0) {\n\
    \            result = level :: result\n            level = if (level % 2 == 0)\
    \ level / 2 else (level + 1) / 2\n        }\n        result", "        val lst\
    \ = new ListBuffer[Long]\n        var i = n\n        while (i > 0) {\n       \
    \     lst += i\n            i = if (i % 2 == 0) i + 1 else i + 2\n        }\n\
    \        lst.toList", "        var result = List[Long]()\n        var i = n\n\
    \        while (i > 0) {\n            result = i :: result\n            i = if\
    \ (i % 2 == 0) i + 1 else i + 2\n        }\n        result", "        var l =\
    \ List[Long]()\n        var i = n\n        while (i > 0) {\n            l = i\
    \ :: l\n            if (i % 2 == 0) i = i + 1 else i = i + 2\n        }\n    \
    \    l", "        var result = List[Long]()\n        var current = n\n       \
    \ while (current > 0) {\n            result = current :: result\n            current\
    \ = if (current % 2 == 0) current + 1 else current + 2\n        }\n        result",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            current = if (current\
    \ % 2 == 0) current + 1 else current + 2\n        }\n        result", "      \
    \  var l = List[Long]()\n        var i = n\n        while (i > 0) {\n        \
    \    l = i :: l\n            if (i % 2 == 0) i += 1 else i += 2\n        }\n \
    \       l", "        var l = List[Long]()\n        var i = n\n        while (i\
    \ > 0) {\n            l = i :: l\n            if (i % 2 == 0) i += 1 else i +=\
    \ 2\n        }\n        l", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result = current :: result\n\
    \            current = if (current % 2 == 0) current + 1 else current + 2\n  \
    \      }\n        result", "        var list = List[Long]()\n        var i = n\n\
    \        while (i > 0) {\n            list = list :+ i\n            i = if (i\
    \ % 2 == 0) i + 1 else i + 2\n        }\n        list", "        var result =\
    \ List[Long]()\n        var current = n\n        while (current > 0) {\n     \
    \       result = current :: result\n            current = if (current % 2 == 0)\
    \ current / 2 else (current + 1) / 2\n        }\n        result", "        val\
    \ result = new ListBuffer[Long]\n        var current = n\n        while (current\
    \ > 0) {\n            result += current\n            current = if (current % 2\
    \ == 0) current + 1 else current + 2\n        }\n        result.toList", "   \
    \     var l = List[Long]()\n        var i = n\n        while (i > 0) {\n     \
    \       l = i :: l\n            if (i % 2 == 0) i += 1 else i += 2\n        }\n\
    \        l", "        var l = List[Long]()\n        var c = n\n        while (c\
    \ > 0) {\n            l = c :: l\n            c = if (c % 2 == 0) c + 1 else c\
    \ + 2\n        }\n        l", "        var l = List[Long]()\n        var i = n\n\
    \        while (i > 0) {\n            l = i :: l\n            if (i % 2 == 0)\
    \ i += 1 else i += 2\n        }\n        l", "        var result = List[Long]()\n\
    \        var m = n\n        while (m > 0) {\n            result = m :: result\n\
    \            if (m % 2 == 0) m = m + 1 else m = m + 2\n        }\n        result",
  "        var list = List[Long]()\n        var i = n\n        while (i > 0) {\n \
    \           list = list :+ i\n            i = if (i % 2 == 0) i / 2 else (i +\
    \ 1) / 2\n        }\n        list.reverse", "        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            i = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        result",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            current = if (current\
    \ % 2 == 0) current + 1 else current + 2\n        }\n        result", "      \
    \  var l = List[Long]()\n        var m = n\n        while (m > 0) {\n        \
    \    l = m :: l\n            m = if (m % 2 == 0) m / 2 else (m + 1) / 2\n    \
    \    }\n        l", "        var result = List[Long]()\n        var i = n\n  \
    \      while (i > 0) {\n            result = i :: result\n            if (i %\
    \ 2 == 0) i += 1 else i += 2\n        }\n        result", "        var result\
    \ = new ListBuffer[Long]\n        var level = n\n        while (level > 0) {\n\
    \            result += level\n            level = if (level % 2 == 0) level +\
    \ 1 else level + 2\n        }\n        result.toList", "        var l = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            l = i :: l\n        \
    \    if (i % 2 == 0) i += 1 else i += 2\n        }\n        l", "        var result\
    \ = List[Long]()\n        var i = n\n        while (i > 0) {\n            result\
    \ = i :: result\n            if (i % 2 == 0) i += 1 else i += 2\n        }\n \
    \       result", "        var result = ListBuffer[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result += current\n        \
    \    current = if (current % 2 == 0) current + 1 else current + 2\n        }\n\
    \        result.toList", "        var l = List[Long]()\n        var i = n\n  \
    \      while (i > 0) {\n            l = i :: l\n            if (i % 2 == 0) i\
    \ = i + 1 else i = i + 2\n        }\n        l", "        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i += 1 else i += 2\n        }\n        result", " \
    \       var l = List[Long]()\n        var i = n\n        while (i > 0) {\n   \
    \         l = i :: l\n            if (i % 2 == 0) i += 1 else i += 2\n       \
    \ }\n        l", "        def makeAPile(n : Long, acc : List[Long]) : List[Long]\
    \ = {\n            if (n == 0) acc\n            else if (n % 2 == 0) makeAPile(n\
    \ - 1, (n + 1) :: acc)\n            else makeAPile(n - 1, (n - 1) :: acc)\n  \
    \      }\n        makeAPile(n, List(n))", "        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i += 1 else i += 2\n        }\n        result", " \
    \       def makeAPile(n : Long, acc : List[Long]) : List[Long] = {\n         \
    \   if (n == 0) acc\n            else makeAPile(n - 1, n :: acc)\n        }\n\
    \        makeAPile(n, List[Long]())", "        var result = List[Long]()\n   \
    \     var i = n\n        while (i > 0) {\n            result = i :: result\n \
    \           i = if (i % 2 == 0) i + 1 else i + 2\n        }\n        result",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            current = if (current\
    \ % 2 == 0) current + 1 else current + 2\n        }\n        result", "      \
    \  var result = List[Long]()\n        var i = n\n        while (i > 0) {\n   \
    \         result = i :: result\n            if (i % 2 == 0) i += 1 else i += 2\n\
    \        }\n        result", "        var a = List[Long]()\n        var i = n\n\
    \        while (i > 0) {\n            a = i :: a\n            i = if (i % 2 ==\
    \ 0) i / 2 else (i + 1) / 2\n        }\n        a", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            current = if (current % 2 == 0) current + 1 else\
    \ current + 2\n        }\n        result", "        val result = new ListBuffer[Long]\n\
    \        var i = n\n        while (i > 0) {\n            result += i\n       \
    \     i = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        result.toList",
  "        var result = List[Long]()\n        var i = n\n        while (i > 0) {\n\
    \            result = i :: result\n            if (i % 2 == 0) i = i + 1 else\
    \ i = i + 2\n        }\n        result", "        val l = new ListBuffer[Long]\n\
    \        var m = n\n        while (m > 0) {\n            l += m\n            m\
    \ = if (m % 2 == 0) m + 1 else m + 2\n        }\n        l.toList", "        var\
    \ l = List[Long]()\n        var i = n\n        while (i > 0) {\n            l\
    \ = i :: l\n            if (i % 2 == 0) i += 1 else i += 2\n        }\n      \
    \  l", "        var result = List[Long]()\n        var current = n\n        while\
    \ (current > 0) {\n            result = current :: result\n            current\
    \ = if (current % 2 == 0) current + 1 else current + 2\n        }\n        result",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            current = if (current\
    \ % 2 == 0) current + 1 else current + 2\n        }\n        result", "      \
    \  var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            current = if (current\
    \ % 2 == 0) current + 1 else current + 2\n        }\n        result", "      \
    \  var result = List[Long]()\n        var i = n\n        while (i > 0) {\n   \
    \         result = i :: result\n            if (i % 2 == 0) i = i / 2 - 1\n  \
    \          else i = i / 2\n        }\n        result", "        var l = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            l = i :: l\n        \
    \    if (i % 2 == 0) i = i + 1 else i = i + 2\n        }\n        l", "      \
    \  var l = List[Long]()\n        var m = n\n        while (m > 0) {\n        \
    \    l = m :: l\n            m = if (m % 2 == 0) m / 2 else (m + 1) / 2\n    \
    \    }\n        l", "        var result = List[Long]()\n        var current =\
    \ n\n        while (current > 0) {\n            result = current :: result\n \
    \           current = if (current % 2 == 0) current + 1 else current + 2\n   \
    \     }\n        result", "        var l = List[Long]()\n        var i = n\n \
    \       while (i > 0) {\n            l = i :: l\n            if (i % 2 == 0) i\
    \ = i / 2\n            else i = (i - 1) / 2\n        }\n        l", "        var\
    \ l = List[Long]()\n        var i = n\n        while (i > 0) {\n            l\
    \ = i :: l\n            if (i % 2 == 0) i += 1 else i += 2\n        }\n      \
    \  l", "        var result = List[Long]()\n        var current = n\n        while\
    \ (current > 0) {\n            result = current :: result\n            current\
    \ = if (current % 2 == 0) current + 1 else current + 2\n        }\n        result",
  "        var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            current = if (current\
    \ % 2 == 0) current + 1 else current + 2\n        }\n        result", "      \
    \  var l = List[Long]()\n        var i = n\n        while (i > 0) {\n        \
    \    l = i :: l\n            if (i % 2 == 0) i = i + 1 else i = i + 2\n      \
    \  }\n        l", "        var result = List[Long]()\n        var current = n\n\
    \        while (current > 0) {\n            result = result :+ current\n     \
    \       current = if (current % 2 == 0) current + 1 else current + 2\n       \
    \ }\n        result", "        var result = List[Long]()\n        var i = n\n\
    \        while (i > 0) {\n            result = i :: result\n            i = if\
    \ (i % 2 == 0) i + 1 else i + 2\n        }\n        result", "        var result\
    \ = List[Long]()\n        var current = n\n        while (current > 0) {\n   \
    \         result = current :: result\n            current = if (current % 2 ==\
    \ 0) current + 1 else current + 2\n        }\n        result", "        var list\
    \ = List[Long]()\n        var i = n\n        while (i > 0) {\n            list\
    \ = i :: list\n            if (i % 2 == 0) i += 1 else i += 2\n        }\n   \
    \     list", "        var result = List[Long]()\n        var i = n\n        while\
    \ (i > 0) {\n            result = i :: result\n            if (i % 2 == 0) i =\
    \ i / 2 else i = (i - 1) / 2\n        }\n        result", "        var result\
    \ = List[Long]()\n        var current = n\n        while (current > 0) {\n   \
    \         result = current :: result\n            current = if (current % 2 ==\
    \ 0) current + 1 else current + 2\n        }\n        result", "        val lst\
    \ = new ListBuffer[Long]\n        var i = n\n        while (i > 0) {\n       \
    \     lst += i\n            i = if (i % 2 == 0) i + 1 else i + 2\n        }\n\
    \        lst.toList", "        var l = List[Long]()\n        var i = n\n     \
    \   while (i > 0) {\n            l = i :: l\n            if (i % 2 == 0) i +=\
    \ 1 else i += 2\n        }\n        l", "        var l = List[Long]()\n      \
    \  var i = n\n        while (i > 0) {\n            l = i :: l\n            if\
    \ (i % 2 == 0) i = i / 2 - 1\n            else i = i / 2\n        }\n        l",
  "        var l = List[Long]()\n        var i = n\n        while (i > 0) {\n    \
    \        l = i :: l\n            if (i % 2 == 0) i = i + 1 else i = i + 2\n  \
    \      }\n        l", "        var l = List[Long]()\n        var i = n\n     \
    \   while (i > 0) {\n            l = i :: l\n            if (i % 2 == 0) i +=\
    \ 1 else i += 2\n        }\n        l", "        var result = List[Long]()\n \
    \       var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            i = if (i % 2 == 0) i + 1 else i + 2\n        }\n        result",
  "        def makeAPile(n : Long, acc : List[Long]) : List[Long] = {\n          \
    \  if (n == 0) acc\n            else if (n % 2 == 0) makeAPile(n - 1, n :: acc)\n\
    \            else makeAPile(n - 2, n :: acc)\n        }\n        makeAPile(n,\
    \ List[Long]())", "        var l = List[Long]()\n        var i = n\n        while\
    \ (i > 0) {\n            l = i :: l\n            if (i % 2 == 0) i += 1 else i\
    \ += 2\n        }\n        l", "        var result = List[Long]()\n        var\
    \ i = n\n        while (i > 0) {\n            result = i :: result\n         \
    \   if (i % 2 == 0) i += 1 else i += 2\n        }\n        result", "        val\
    \ result = new ListBuffer[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result += current\n            current = if (current % 2\
    \ == 0) current + 1 else current + 2\n        }\n        result.toList", "   \
    \     var result = List[Long]()\n        var i = n\n        while (i > 0) {\n\
    \            result = i :: result\n            if (i % 2 == 0) i += 1 else i +=\
    \ 2\n        }\n        result", "        var result = List[Long]()\n        var\
    \ cur = n\n        while (cur > 0) {\n            result = cur :: result\n   \
    \         if (cur % 2 == 0) cur = cur + 1 else cur = cur + 2\n        }\n    \
    \    result", "        var result = List[Long]()\n        var i = n\n        while\
    \ (i > 0) {\n            result = i :: result\n            if (i % 2 == 0) i +=\
    \ 1 else i += 2\n        }\n        result", "        def makeAPile(n : Long,\
    \ acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n          \
    \  else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n            else makeAPile(n\
    \ - 1, (n - 1) :: acc)\n        }\n        makeAPile(n, List(n))", "        var\
    \ result = List[Long]()\n        var i = n\n        while (i > 0) {\n        \
    \    result = i :: result\n            if (i % 2 == 0) i += 1 else i += 2\n  \
    \      }\n        result", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result = current :: result\n\
    \            current = if (current % 2 == 0) current + 1 else current + 2\n  \
    \      }\n        result", "        var result = List[Long]()\n        var current\
    \ = n\n        while (current > 0) {\n            result = current :: result\n\
    \            current = if (current % 2 == 0) current + 1 else current + 2\n  \
    \      }\n        result", "        var result = new ListBuffer[Long]\n      \
    \  var i = n\n        while (i > 0) {\n            result += i\n            i\
    \ = if (i % 2 == 0) i + 1 else i + 2\n        }\n        result.toList", "   \
    \     var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            current = if (current\
    \ % 2 == 0) current + 1 else current + 2\n        }\n        result", "      \
    \  var result = List[Long]()\n        var current = n\n        while (current\
    \ > 0) {\n            result = current :: result\n            current = if (current\
    \ % 2 == 0) current / 2 else (current + 1) / 2\n        }\n        result", " \
    \       val lst = new ListBuffer[Long]\n        var i = n\n        while (i >\
    \ 0) {\n            lst += i\n            i = if (i % 2 == 0) i + 1 else i + 2\n\
    \        }\n        lst.toList", "        var result = List[Long]()\n        var\
    \ current = n\n        while (current > 0) {\n            result = current ::\
    \ result\n            current = if (current % 2 == 0) current + 1 else current\
    \ + 2\n        }\n        result", "        var result = List[Long]()\n      \
    \  var i = n\n        while (i > 0) {\n            result = i :: result\n    \
    \        if (i % 2 == 0) i += 1 else i += 2\n        }\n        result", "   \
    \     var l = List[Long]()\n        var i = n\n        while (i > 0) {\n     \
    \       l = i :: l\n            if (i % 2 == 0) i += 1 else i += 2\n        }\n\
    \        l", "        val result = new ListBuffer[Long]\n        var current =\
    \ n\n        while (current > 0) {\n            result += current\n          \
    \  current = if (current % 2 == 0) current + 1 else current + 2\n        }\n \
    \       result.toList", "        var result = List[Long]()\n        var i = n\n\
    \        while (i > 0) {\n            result = i :: result\n            if (i\
    \ % 2 == 0) i = i / 2\n            else i = i / 2 + 1\n        }\n        result",
  "        if (n == 1) List(1)\n        else {\n            val next = if (n % 2 ==\
    \ 0) n + 2 else n + 1\n            n :: makeAPile(next)\n        }", "       \
    \ val lst = new ListBuffer[Long]\n        var i = n\n        while (i > 0) {\n\
    \            lst += i\n            i = if (i % 2 == 0) i / 2 else (i + 1) / 2\n\
    \        }\n        lst.toList", "        var l = List[Long]()\n        var i\
    \ = n\n        while (i > 0) {\n            l = i :: l\n            if (i % 2\
    \ == 0) i = i / 2 - 1\n            else i = i / 2\n        }\n        l", "  \
    \      var result = List[Long]()\n        var i = n\n        while (i > 0) {\n\
    \            result = result :+ i\n            i = if (i % 2 == 0) i + 1 else\
    \ i + 2\n        }\n        result", "        var list = List[Long]()\n      \
    \  var i = n\n        while (i > 0) {\n            list = i :: list\n        \
    \    if (i % 2 == 0) i += 1 else i += 2\n        }\n        list", "        var\
    \ result = List[Long]()\n        var i = n\n        while (i > 0) {\n        \
    \    result = i :: result\n            if (i % 2 == 0) i += 1 else i += 2\n  \
    \      }\n        result", "        def makeAPile(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 0) acc\n            else if (n % 2 ==\
    \ 0) makeAPile(n - 1, (n - 1) :: acc)\n            else makeAPile(n - 1, n ::\
    \ acc)\n        }\n        makeAPile(n, List())", "        var result = List[Long]()\n\
    \        var current = n\n        while (current > 0) {\n            result =\
    \ current :: result\n            current = if (current % 2 == 0) current + 1 else\
    \ current + 2\n        }\n        result", "        var result = new ListBuffer[Long]\n\
    \        var current = n\n        while (current > 0) {\n            result +=\
    \ current\n            if (current % 2 == 0) current -= 1\n            current\
    \ /= 2\n        }\n        result.toList", "        val l = ListBuffer[Long]()\n\
    \        var m = n\n        while (m > 0) {\n            l += m\n            m\
    \ = if (m % 2 == 0) m + 1 else m + 2\n        }\n        l.toList", "        var\
    \ result = List[Long]()\n        var current = n\n        while (current > 0)\
    \ {\n            result = current :: result\n            current = if (current\
    \ % 2 == 0) current / 2 else (current + 1) / 2\n        }\n        result", " \
    \       var l = List[Long]()\n        var i = n\n        while (i > 0) {\n   \
    \         l = i :: l\n            if (i % 2 == 0) i += 1 else i += 2\n       \
    \ }\n        l", "        var l = List[Long]()\n        var i = n\n        while\
    \ (i > 0) {\n            l = i :: l\n            if (i % 2 == 0) i += 1 else i\
    \ += 2\n        }\n        l", "        var result = List[Long]()\n        var\
    \ i = n\n        while (i > 0) {\n            result = i :: result\n         \
    \   if (i % 2 == 0) i += 1 else i += 2\n        }\n        result", "        var\
    \ l = List[Long]()\n        var x = n\n        while (x > 0) {\n            l\
    \ = x :: l\n            if (x % 2 == 0) x -= 1\n            x /= 2\n        }\n\
    \        l", "        var result = List[Long]()\n        var current = n\n   \
    \     while (current > 0) {\n            result = current :: result\n        \
    \    current = if (current % 2 == 0) current + 1 else current + 2\n        }\n\
    \        result", "        var result = List[Long]()\n        var i = n\n    \
    \    while (i > 0) {\n            result = i :: result\n            if (i % 2\
    \ == 0) i = i + 1 else i = i + 2\n        }\n        result", "        var l =\
    \ List[Long]()\n        var i = n\n        while (i > 0) {\n            l = i\
    \ :: l\n            if (i % 2 == 0) i += 1 else i += 2\n        }\n        l",
  "        var lst = List[Long]()\n        var i = n\n        while (i > 0) {\n  \
    \          lst = i :: lst\n            if (i % 2 == 0) i += 1 else i += 2\n  \
    \      }\n        lst", "        val result = new ListBuffer[Long]\n        var\
    \ i = n\n        while (i > 0) {\n            result += i\n            i = if\
    \ (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        result.toList", "  \
    \      var l = List[Long]()\n        var i = n\n        while (i > 0) {\n    \
    \        l = i :: l\n            if (i % 2 == 0) i += 1 else i += 2\n        }\n\
    \        l", "        var result = List[Long]()\n        var i = n\n        while\
    \ (i > 0) {\n            result = i :: result\n            if (i % 2 == 0) i +=\
    \ 1 else i += 2\n        }\n        result", "        val l = new ListBuffer[Long]\n\
    \        var m = n\n        while (m > 0) {\n            l += m\n            m\
    \ = if (m % 2 == 0) m / 2 else (m + 1) / 2\n        }\n        l.toList", "  \
    \      var l = List[Long]()\n        var i = n\n        while (i > 0) {\n    \
    \        l = i :: l\n            if (i % 2 == 0) i += 1 else i += 2\n        }\n\
    \        l", "        var l = List[Long]()\n        var i = n\n        while (i\
    \ > 0) {\n            l = i :: l\n            if (i % 2 == 0) i = i / 2 - 1\n\
    \            else i = i / 2\n        }\n        l", "        def makeAPile(n :\
    \ Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n    \
    \        else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n            else\
    \ makeAPile(n - 1, (n - 1) :: acc)\n        }\n        makeAPile(n, List(n))",
  "        var result = List[Long]()\n        var i = n\n        while (i > 0) {\n\
    \            result = i :: result\n            if (i % 2 == 0) i += 1 else i +=\
    \ 2\n        }\n        result", "        var result = ListBuffer[Long]()\n  \
    \      var current = n\n        while (current > 0) {\n            result += current\n\
    \            current = if (current % 2 == 0) current + 1 else current + 2\n  \
    \      }\n        result.toList", "        var l = List[Long]()\n        var i\
    \ = n\n        while (i > 0) {\n            l = i :: l\n            if (i % 2\
    \ == 0) i += 1 else i += 2\n        }\n        l"]
stop_tokens:
- "\n    }\n"
