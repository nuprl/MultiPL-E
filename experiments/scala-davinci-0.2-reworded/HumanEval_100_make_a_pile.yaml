name: HumanEval_100_make_a_pile
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, you have to make a pile of n levels of stones.\n\
  \    // The first level has n stones.\n    // The number of stones in the next level\
  \ is:\n    // - the next odd number if n is odd.\n    // - the next even number\
  \ if n is even.\n    // Return the number of stones in each level in a list, where\
  \ element at index\n    // i represents the number of stones in the level (i+1).\n\
  \    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong,\
  \ 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
  \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
  \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
  \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
  \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
  \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        var result = List[Long]()\n        var i = n\n        while\
    \ (i > 0) {\n            result = i :: result\n            if (i % 2 == 0) i =\
    \ i + 1 else i = i + 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            if (i % 2 == 0) i += 1 else i += 2\n        }\n        result", " \
    \       var result = List[Long]()\n        result = result :+ n\n        var next\
    \ = if (n % 2 == 0) n + 1 else n + 2\n        while (next <= n * 2) {\n      \
    \      result = result :+ next\n            next = if (next % 2 == 0) next + 1\
    \ else next + 2\n        }\n        result", "        var result = List[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            result = i :: result\n\
    \            i = if (i % 2 == 0) i + 1 else i + 2\n        }\n        result",
  "        def makeAPile(n : Long, acc : List[Long]) : List[Long] = {\n          \
    \  if (n == 0) acc\n            else if (n % 2 == 0) makeAPile(n - 1, (n + 1)\
    \ :: acc)\n            else makeAPile(n - 1, (n - 1) :: acc)\n        }\n    \
    \    makeAPile(n, List[Long](n))", "        var l = List[Long]()\n        var\
    \ i = n\n        while (i > 0) {\n            l = i :: l\n            if (i %\
    \ 2 == 0) i += 1 else i += 2\n        }\n        l", "        val l = ListBuffer[Long]()\n\
    \        var i = n\n        while (i > 0) {\n            l += i\n            i\
    \ = if (i % 2 == 0) i / 2 else (i + 1) / 2\n        }\n        l.toList", "  \
    \      var list = List[Long]()\n        var i = n\n        while (i > 0) {\n \
    \           list = i :: list\n            if (i % 2 == 0) i = i + 1 else i = i\
    \ + 2\n        }\n        list", "        var result = List[Long]()\n        var\
    \ current = n\n        while (current > 0) {\n            result = current ::\
    \ result\n            current = if (current % 2 == 0) current + 1 else current\
    \ + 2\n        }\n        result", "        var result = List[Long]()\n      \
    \  var current = n\n        while (current > 0) {\n            result = current\
    \ :: result\n            current = if (current % 2 == 0) current + 1 else current\
    \ + 2\n        }\n        result", "        def makeAPileHelper(n : Long, acc\
    \ : List[Long]) : List[Long] = {\n            if (n == 0) acc\n            else\
    \ if (n % 2 == 0) makeAPileHelper(n - 1, (n + 1) :: acc)\n            else makeAPileHelper(n\
    \ - 1, (n - 1) :: acc)\n        }\n        makeAPileHelper(n, List(n))", "   \
    \     val list = new ListBuffer[Long]()\n        var i = n\n        while (i >\
    \ 0) {\n            list += i\n            if (i % 2 == 0) i = i + 1 else i =\
    \ i + 2\n        }\n        list.toList", "        var l = List[Long]()\n    \
    \    var i = n\n        while (i > 0) {\n            l = i :: l\n            if\
    \ (i % 2 == 0) i += 1 else i += 2\n        }\n        l", "        var result\
    \ = List[Long]()\n        var current = n\n        while (current > 0) {\n   \
    \         result = current :: result\n            current = if (current % 2 ==\
    \ 0) current + 1 else current + 2\n        }\n        result", "        val result\
    \ = ListBuffer[Long]()\n        var i = n\n        while (i > 0) {\n         \
    \   result += i\n            i = if (i % 2 == 0) i + 1 else i + 2\n        }\n\
    \        result.toList", "        def makeAPileHelper(n : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (n == 0) acc\n            else if (n % 2 ==\
    \ 0) makeAPileHelper(n - 1, (n - 1) :: acc)\n            else makeAPileHelper(n\
    \ - 1, n :: acc)\n        }\n        makeAPileHelper(n, List[Long]())", "    \
    \    var result = List[Long]()\n        var level = n\n        while (level >\
    \ 0) {\n            result = level :: result\n            level = if (level %\
    \ 2 == 0) level + 1 else level + 2\n        }\n        result", "        def makeAPile(n\
    \ : Long, acc : List[Long]) : List[Long] = {\n            if (n == 0) acc\n  \
    \          else if (n % 2 == 0) makeAPile(n - 1, (n + 1) :: acc)\n           \
    \ else makeAPile(n - 1, (n - 1) :: acc)\n        }\n        makeAPile(n, List(n))",
  "        val l = new ListBuffer[Long]\n        var i = n\n        while (i > 0)\
    \ {\n            l += i\n            i = if (i % 2 == 0) i / 2 else (i + 1) /\
    \ 2\n        }\n        l.toList", "        var result = List[Long]()\n      \
    \  var i = n\n        while (i > 0) {\n            result = i :: result\n    \
    \        if (i % 2 == 0) i += 1 else i += 2\n        }\n        result"]
stop_tokens:
- "\n    }\n"
