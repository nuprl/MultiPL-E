language: scala
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = (0.0,\
    \ \"\")\n        for (ext <- extensions) {\n            var strength = 0.0\n \
    \           for (c <- ext) {\n                if (c.isUpper) strength += 1\n \
    \               else if (c.isLower) strength -= 1\n            }\n           \
    \ if (strength > strongest._1) strongest = (strength, ext)\n        }\n      \
    \  class_name + \".\" + strongest._2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj_iyrd52.scala:35)\n\tat Problem.main(tmpj_iyrd52.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799255
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = (0.0,\
    \ \"\")\n        for (ext <- extensions) {\n            var strength = 0.0\n \
    \           for (c <- ext) {\n                if (c.isUpper) strength += 1\n \
    \               else if (c.isLower) strength -= 1\n            }\n           \
    \ if (strength > strongest._1) strongest = (strength, ext)\n        }\n      \
    \  class_name + \".\" + strongest._2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj_iyrd52.scala:35)\n\tat Problem.main(tmpj_iyrd52.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799255
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else if (c.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ff22vey.scala:39)\n\tat Problem.main(tmp2ff22vey.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799255
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = 0.0\n\
    \        var strongest_extension = \"\"\n        for (extension <- extensions)\
    \ {\n            var cap = 0\n            var sm = 0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) cap += 1\n                else sm += 1\n \
    \           }\n            var strength = cap - sm\n            if (strength >\
    \ strongest) {\n                strongest = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy7p3lwxl.scala:39)\n\tat Problem.main(tmpy7p3lwxl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(ext\
    \ => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n        val strongest\
    \ = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\";\n        var strongest_extension_strength = -1;\n        for (extension\
    \ <- extensions) {\n            var strength = 0;\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1;\n                else if (c.isLower)\
    \ strength -= 1;\n            }\n            if (strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = 0.0\n\
    \        var strongest_extension = \"\"\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1.0\n                else if (c.isLower)\
    \ strength -= 1.0\n            }\n            if (strength > strongest) {\n  \
    \              strongest = strength\n                strongest_extension = extension\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqxk25rl2.scala:39)\n\tat Problem.main(tmpqxk25rl2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else if (c.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvu22hbp0.scala:39)\n\tat Problem.main(tmpvu22hbp0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (letter <-\
    \ extension) {\n                if (letter.isUpper) strength += 1\n          \
    \      else strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbfvbn29w.scala:37)\n\tat Problem.main(tmpbfvbn29w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\"\n        var strongest_strength = 0.0\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else if (c.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq17dvaq3.scala:39)\n\tat Problem.main(tmpq17dvaq3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.filter(y => y.isUpper).length - x.filter(y => y.isLower).length))\n\
    \        val strongest = strengths.maxBy(x => x._2)\n        return class_name\
    \ + \".\" + strongest._1\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = \"\
    \"\n        var strength = 0.0\n        for (ext <- extensions) {\n          \
    \  var cap = 0\n            var sm = 0\n            for (c <- ext) {\n       \
    \         if (c.isUpper) cap += 1\n                else sm += 1\n            }\n\
    \            var s = cap - sm\n            if (s > strength) {\n             \
    \   strength = s\n                strongest = ext\n            }\n        }\n\
    \        return class_name + \".\" + strongest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp61wlxyat.scala:39)\n\tat Problem.main(tmp61wlxyat.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = (\"\
    \", 0.0)\n        for (ext <- extensions) {\n            var cap = 0\n       \
    \     var sm = 0\n            for (c <- ext) {\n                if (c.isUpper)\
    \ cap += 1\n                else sm += 1\n            }\n            if (cap -\
    \ sm > strongest._2) strongest = (ext, cap - sm)\n        }\n        return class_name\
    \ + \".\" + strongest._1\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpveupwb06.scala:34)\n\tat Problem.main(tmpveupwb06.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799255
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var max_strength\
    \ = 0.0\n        var max_strength_extension = \"\"\n        for (extension <-\
    \ extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > max_strength) {\n          \
    \      max_strength = strength\n                max_strength_extension = extension\n\
    \            }\n        }\n        class_name + \".\" + max_strength_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp67lok193.scala:37)\n\tat Problem.main(tmp67lok193.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = 0.0\n\
    \        var strongest_extension = \"\"\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else strength -= 1\n\
    \            }\n            if (strength > strongest) {\n                strongest\
    \ = strength\n                strongest_extension = extension\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptulr2irv.scala:37)\n\tat Problem.main(tmptulr2irv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799255
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\";\n        var strongest_extension_strength = 0.0;\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0;\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1;\n                else if (c.isLower)\
    \ strength -= 1;\n            }\n            if (strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyxbmj6st.scala:39)\n\tat Problem.main(tmpyxbmj6st.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = 0.0\n\
    \        var strongest_extension = \"\"\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else strength -= 1\n\
    \            }\n            if (strength > strongest) {\n                strongest\
    \ = strength\n                strongest_extension = extension\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptulr2irv.scala:37)\n\tat Problem.main(tmptulr2irv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799255
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(ext\
    \ => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n        val strongest\
    \ = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strength = (ext\
    \ : String) => ext.count(_.isUpper) - ext.count(_.isLower)\n        val strongest\
    \ = extensions.maxBy(strength)\n        class_name + \".\" + strongest\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799255
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (ch <- ext) {\n           \
    \     if (ch.isUpper) cap += 1\n                else sm += 1\n            }\n\
    \            if (cap - sm > strength) {\n                strength = cap - sm\n\
    \                strongest = ext\n            }\n        }\n        return class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcdg0cox8.scala:38)\n\tat Problem.main(tmpcdg0cox8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here\n        var max = 0.0\n        var max_ext = \"\"\n        for (ext <-\
    \ extensions) {\n            var cap = 0\n            var sm = 0\n           \
    \ for (c <- ext) {\n                if (c.isUpper) cap += 1\n                else\
    \ sm += 1\n            }\n            var strength = cap - sm\n            if\
    \ (strength > max) {\n                max = strength\n                max_ext\
    \ = ext\n            }\n        }\n        return class_name + \".\" + max_ext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp42ofxl7n.scala:40)\n\tat Problem.main(tmp42ofxl7n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (i <- 0 until extensions.length) {\n  \
    \          val s = extensions(i).count(_.isUpper) - extensions(i).count(_.isLower)\n\
    \            if (s > strength) {\n                strength = s\n             \
    \   strongest = extensions(i)\n            }\n        }\n        class_name +\
    \ \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5at8dbal.scala:35)\n\tat Problem.main(tmp5at8dbal.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strength = extensions.map(x\
    \ => x.count(y => y.isUpper) - x.count(y => y.isLower))\n        val max_strength\
    \ = strength.max\n        val max_strength_index = strength.indexOf(max_strength)\n\
    \        return class_name + \".\" + extensions(max_strength_index)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(ext\
    \ => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n        val max_strength\
    \ = strengths.maxBy(_._2)._2\n        val strongest_extensions = strengths.filter(_._2\
    \ == max_strength).map(_._1)\n        class_name + \".\" + strongest_extensions.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          if (cap - sm > strength) {\n                strength = cap - sm\n \
    \               strongest = ext\n            }\n        }\n        return class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmh4d2lxa.scala:38)\n\tat Problem.main(tmpmh4d2lxa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var max_strength\
    \ = -1.0\n        var max_strength_extension = \"\"\n        for (extension <-\
    \ extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > max_strength) {\n          \
    \      max_strength = strength\n                max_strength_extension = extension\n\
    \            }\n        }\n        return class_name + \".\" + max_strength_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv6jcaqec.scala:37)\n\tat Problem.main(tmpv6jcaqec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strength = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower))).sortBy(_._2).reverse\n    \
    \    class_name + \".\" + strength.head._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfhkz7ahc.scala:29)\n\tat Problem.main(tmpfhkz7ahc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var max = 0.0\n \
    \       var max_ext = \"\"\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          val strength = cap - sm\n            if (strength > max) {\n      \
    \          max = strength\n                max_ext = ext\n            }\n    \
    \    }\n        return class_name + \".\" + max_ext\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2g4aoeew.scala:39)\n\tat Problem.main(tmp2g4aoeew.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var max_strength\
    \ = -1.0\n        var max_extension = \"\"\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else strength -= 1\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength\n                max_extension = extension\n            }\n     \
    \   }\n        return class_name + \".\" + max_extension\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8wtkdp8w.scala:37)\n\tat Problem.main(tmp8wtkdp8w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = (\"\
    \", -1)\n        for (ext <- extensions) {\n            var strength = 0\n   \
    \         for (c <- ext) {\n                if (c.isUpper) strength += 1\n   \
    \             else if (c.isLower) strength -= 1\n            }\n            if\
    \ (strength > strongest._2) strongest = (ext, strength)\n        }\n        class_name\
    \ + \".\" + strongest._1\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ : String = \"\"\n        var strongest_strength : Double = 0\n        for (extension\
    \ <- extensions) {\n            var strength : Double = 0\n            for (letter\
    \ <- extension) {\n                if (letter.isUpper) strength += 1\n       \
    \         else strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqh6a848u.scala:37)\n\tat Problem.main(tmpqh6a848u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here\n        var max = 0.0\n        var max_ext = \"\"\n        for (ext <-\
    \ extensions) {\n            var cap = 0\n            var sm = 0\n           \
    \ for (c <- ext) {\n                if (c.isUpper) cap += 1\n                else\
    \ sm += 1\n            }\n            var strength = cap - sm\n            if\
    \ (strength > max) {\n                max = strength\n                max_ext\
    \ = ext\n            }\n        }\n        return class_name + \".\" + max_ext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp42ofxl7n.scala:40)\n\tat Problem.main(tmp42ofxl7n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here\n        var max = 0.0\n        var max_ext = \"\"\n        for (ext <-\
    \ extensions) {\n            var cap = 0\n            var sm = 0\n           \
    \ for (c <- ext) {\n                if (c.isUpper) cap += 1\n                else\
    \ sm += 1\n            }\n            var strength = cap - sm\n            if\
    \ (strength > max) {\n                max = strength\n                max_ext\
    \ = ext\n            }\n        }\n        return class_name + \".\" + max_ext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp42ofxl7n.scala:40)\n\tat Problem.main(tmp42ofxl7n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code here\n\
    \        var max = 0.0\n        var max_name = \"\"\n        for (ext <- extensions)\
    \ {\n            var cap = 0\n            var sm = 0\n            for (c <- ext)\
    \ {\n                if (c.isUpper) cap += 1\n                else sm += 1\n \
    \           }\n            var strength = cap - sm\n            if (strength >\
    \ max) {\n                max = strength\n                max_name = ext\n   \
    \         }\n        }\n        return class_name + \".\" + max_name\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0abugujw.scala:40)\n\tat Problem.main(tmp0abugujw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = (\"\
    \", -1)\n        for (ext <- extensions) {\n            var cap = 0\n        \
    \    var sm = 0\n            for (c <- ext) {\n                if (c.isUpper)\
    \ cap += 1\n                else sm += 1\n            }\n            if (cap -\
    \ sm > strongest._2) strongest = (ext, cap - sm)\n        }\n        class_name\
    \ + \".\" + strongest._1\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4c6pxzeo.scala:34)\n\tat Problem.main(tmp4c6pxzeo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = 0.0\n\
    \        var strongest_extension = \"\"\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else strength -= 1\n\
    \            }\n            if (strength > strongest) {\n                strongest\
    \ = strength\n                strongest_extension = extension\n            }\n\
    \        }\n        class_name + \".\" + strongest_extension\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2wn1ozgt.scala:37)\n\tat Problem.main(tmp2wn1ozgt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            val\
    \ cap = ext.filter(c => c.isUpper).length\n            val sm = ext.filter(c =>\
    \ c.isLower).length\n            val s = cap - sm\n            if (s > strength)\
    \ {\n                strength = s\n                strongest = ext\n         \
    \   }\n        }\n        return class_name + \".\" + strongest\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"),\
    \ (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpamk2wpi2.scala:37)\n\tat Problem.main(tmpamk2wpi2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here\n        var max_strength = 0.0\n        var max_extension = \"\"\n   \
    \     for (extension <- extensions) {\n            var strength = 0.0\n      \
    \      for (c <- extension) {\n                if (c.isUpper) strength += 1\n\
    \                else strength -= 1\n            }\n            if (strength >\
    \ max_strength) {\n                max_strength = strength\n                max_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + max_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmhzq8gmn.scala:38)\n\tat Problem.main(tmpmhzq8gmn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(ext\
    \ => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n        val strongest\
    \ = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            val\
    \ cap = ext.count(_.isUpper)\n            val sm = ext.count(_.isLower)\n    \
    \        val str = cap - sm\n            if (str > strength) {\n             \
    \   strength = str\n                strongest = ext\n            }\n        }\n\
    \        class_name + \".\" + strongest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprpf42t68.scala:37)\n\tat Problem.main(tmprpf42t68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (letter <-\
    \ extension) {\n                if (letter.isUpper) strength += 1\n          \
    \      else strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1el9a7s2.scala:37)\n\tat Problem.main(tmp1el9a7s2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          var s = cap - sm\n            if (s > strength) {\n               \
    \ strength = s\n                strongest = ext\n            }\n        }\n  \
    \      return class_name + \".\" + strongest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi6yuq5kz.scala:39)\n\tat Problem.main(tmpi6yuq5kz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          if (cap - sm > strength) {\n                strength = cap - sm\n \
    \               strongest = ext\n            }\n        }\n        return class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmh4d2lxa.scala:38)\n\tat Problem.main(tmpmh4d2lxa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\"\n        var strongest_strength = 0.0\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (char <- extension) {\n \
    \               if (char.isUpper) strength += 1\n                else if (char.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz61wyo9d.scala:39)\n\tat Problem.main(tmpz61wyo9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else if (c.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvu22hbp0.scala:39)\n\tat Problem.main(tmpvu22hbp0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strength = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower))).sortBy(_._2)\n        class_name\
    \ + \".\" + strength.last._1\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\",\
    \ \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6u0upyve.scala:29)\n\tat Problem.main(tmp6u0upyve.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\"\n        var strongest_strength = 0.0\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else if (c.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpimgn_ys5.scala:39)\n\tat Problem.main(tmpimgn_ys5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = (\"\
    \", 0.0)\n        for (ext <- extensions) {\n            var cap = 0\n       \
    \     var sm = 0\n            for (c <- ext) {\n                if (c.isUpper)\
    \ cap += 1\n                else sm += 1\n            }\n            if (cap -\
    \ sm > strongest._2) strongest = (ext, cap - sm)\n        }\n        class_name\
    \ + \".\" + strongest._1\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz3giyqi2.scala:34)\n\tat Problem.main(tmpz3giyqi2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code here\n\
    \        return \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpojiu28nl.scala:25)\n\tat Problem.main(tmpojiu28nl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799266
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var max_strength = 0.0\n        for (ext <- extensions) {\n         \
    \   var strength = 0.0\n            for (c <- ext) {\n                if (c.isUpper)\
    \ strength += 1\n                else strength -= 1\n            }\n         \
    \   if (strength > max_strength) {\n                max_strength = strength\n\
    \                strongest = ext\n            }\n        }\n        return class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxt7w5nr9.scala:37)\n\tat Problem.main(tmpxt7w5nr9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\";\n        var strongest_strength = -1;\n        for (extension <- extensions)\
    \ {\n            var strength = 0;\n            for (c <- extension) {\n     \
    \           if (c.isUpper) strength += 1;\n                else if (c.isLower)\
    \ strength -= 1;\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here\n        val strength = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower))).sortBy(_._2).reverse\n\
    \        class_name + \".\" + strength.head._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7p2i97sx.scala:30)\n\tat Problem.main(tmp7p2i97sx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(e\
    \ => (e, e.count(_.isUpper) - e.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\"\n        var strongest_strength = 0.0\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else if (c.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq17dvaq3.scala:39)\n\tat Problem.main(tmpq17dvaq3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(ext\
    \ => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n        val max_strength\
    \ = strengths.maxBy(_._2)._2\n        val strongest_extensions = strengths.filter(_._2\
    \ == max_strength).map(_._1)\n        class_name + \".\" + strongest_extensions.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\"\n        var strongest_extension_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (char <- extension)\
    \ {\n                if (char.isUpper) strength += 1\n                else if\
    \ (char.isLower) strength -= 1\n            }\n            if (strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = strength\n               \
    \ strongest_extension = extension\n            }\n        }\n        return class_name\
    \ + \".\" + strongest_extension\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4_94n8lc.scala:39)\n\tat Problem.main(tmp4_94n8lc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var max_strength\
    \ = -1.0\n        var max_extension = \"\"\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (letter <- extension) {\n\
    \                if (letter.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > max_strength) {\n          \
    \      max_strength = strength\n                max_extension = extension\n  \
    \          }\n        }\n        return class_name + \".\" + max_extension\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdb73z0cc.scala:37)\n\tat Problem.main(tmpdb73z0cc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          if (cap - sm > strength) {\n                strength = cap - sm\n \
    \               strongest = ext\n            }\n        }\n        class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9wyp505n.scala:38)\n\tat Problem.main(tmp9wyp505n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (letter <-\
    \ extension) {\n                if (letter.isUpper) strength += 1\n          \
    \      else strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbfvbn29w.scala:37)\n\tat Problem.main(tmpbfvbn29w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = (0.0,\
    \ \"\")\n        for (ext <- extensions) {\n            var strength = 0.0\n \
    \           for (c <- ext) {\n                if (c.isUpper) strength += 1\n \
    \               else if (c.isLower) strength -= 1\n            }\n           \
    \ if (strength > strongest._1) strongest = (strength, ext)\n        }\n      \
    \  return class_name + \".\" + strongest._2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7jes8cev.scala:35)\n\tat Problem.main(tmp7jes8cev.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strength = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower))).sortBy(_._2)\n        class_name\
    \ + \".\" + strength.last._1\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\",\
    \ \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6u0upyve.scala:29)\n\tat Problem.main(tmp6u0upyve.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = (0.0,\
    \ \"\")\n        for (ext <- extensions) {\n            var strength = 0.0\n \
    \           for (c <- ext) {\n                if (c.isUpper) strength += 1\n \
    \               else if (c.isLower) strength -= 1\n            }\n           \
    \ if (strength > strongest._1) strongest = (strength, ext)\n        }\n      \
    \  return class_name + \".\" + strongest._2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7jes8cev.scala:35)\n\tat Problem.main(tmp7jes8cev.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\"\n        var strongest_strength = 0.0\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (letter <- extension) {\n\
    \                if (letter.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > strongest_strength) {\n    \
    \            strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwjlh9sg8.scala:37)\n\tat Problem.main(tmpwjlh9sg8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          var s = cap - sm\n            if (s > strength) {\n               \
    \ strength = s\n                strongest = ext\n            }\n        }\n  \
    \      return class_name + \".\" + strongest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi6yuq5kz.scala:39)\n\tat Problem.main(tmpi6yuq5kz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(ext\
    \ => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n        val strongest\
    \ = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val max_strength =\
    \ strengths.maxBy(_._2)._2\n        val strongest_extensions = strengths.filter(_._2\
    \ == max_strength).map(_._1)\n        class_name + \".\" + strongest_extensions.min\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4l8ca8sm.scala:31)\n\tat Problem.main(tmp4l8ca8sm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code here\n\
    \        return \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpojiu28nl.scala:25)\n\tat Problem.main(tmpojiu28nl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799266
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strongest_strength = 0\n        for (extension <- extensions) {\n\
    \            var strength = 0\n            for (c <- extension) {\n          \
    \      if (c.isUpper) strength += 1\n                else if (c.isLower) strength\
    \ -= 1\n            }\n            if (strength > strongest_strength) {\n    \
    \            strongest = extension\n                strongest_strength = strength\n\
    \            }\n        }\n        return class_name + \".\" + strongest\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx_tltqh_.scala:39)\n\tat Problem.main(tmpx_tltqh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          if (cap - sm > strength) {\n                strength = cap - sm\n \
    \               strongest = ext\n            }\n        }\n        class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9wyp505n.scala:38)\n\tat Problem.main(tmp9wyp505n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strength = (ext\
    \ : String) => ext.count(c => c.isUpper) - ext.count(c => c.isLower)\n       \
    \ val strongest = extensions.maxBy(strength)\n        class_name + \".\" + strongest\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strength = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower))).sortBy(_._2).reverse\n    \
    \    class_name + \".\" + strength.head._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfhkz7ahc.scala:29)\n\tat Problem.main(tmpfhkz7ahc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(ext\
    \ => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n        val strongest\
    \ = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\"\n        var strongest_extension_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else if (c.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = strength\n               \
    \ strongest_extension = extension\n            }\n        }\n        return class_name\
    \ + \".\" + strongest_extension\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdwmqs2mu.scala:39)\n\tat Problem.main(tmpdwmqs2mu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here\n        return \"\"\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmper1b5c3h.scala:25)\n\tat Problem.main(tmper1b5c3h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\";\n        var strongest_strength = 0.0;\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0;\n            for (c <- extension) {\n   \
    \             if (c.isUpper) strength += 1.0;\n                else if (c.isLower)\
    \ strength -= 1.0;\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        class_name + \".\" + strongest_extension;\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5mqxel_z.scala:39)\n\tat Problem.main(tmp5mqxel_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\";\n        var strongest_strength = 0.0;\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0;\n            for (c <- extension) {\n   \
    \             if (c.isUpper) strength += 1;\n                else if (c.isLower)\
    \ strength -= 1;\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnvbzae5s.scala:39)\n\tat Problem.main(tmpnvbzae5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\"\n        var strongest_strength = 0.0\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else if (c.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq17dvaq3.scala:39)\n\tat Problem.main(tmpq17dvaq3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          var s = cap - sm\n            if (s > strength) {\n               \
    \ strength = s\n                strongest = ext\n            }\n        }\n  \
    \      class_name + \".\" + strongest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphakdv_d3.scala:39)\n\tat Problem.main(tmphakdv_d3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strength = (extension\
    \ : String) => extension.count(c => c.isUpper) - extension.count(c => c.isLower)\n\
    \        val strongest = extensions.maxBy(strength)\n        class_name + \".\"\
    \ + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = (\"\
    \", 0.0)\n        for (ext <- extensions) {\n            var cap = 0\n       \
    \     var sm = 0\n            for (c <- ext) {\n                if (c.isUpper)\
    \ cap += 1\n                else sm += 1\n            }\n            if (cap -\
    \ sm > strongest._2) strongest = (ext, cap - sm)\n        }\n        class_name\
    \ + \".\" + strongest._1\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz3giyqi2.scala:34)\n\tat Problem.main(tmpz3giyqi2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = (0.0,\
    \ \"\")\n        for (ext <- extensions) {\n            var strength = 0.0\n \
    \           for (c <- ext) {\n                if (c.isUpper) strength += 1\n \
    \               else if (c.isLower) strength -= 1\n            }\n           \
    \ if (strength > strongest._1) strongest = (strength, ext)\n        }\n      \
    \  class_name + \".\" + strongest._2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj_iyrd52.scala:35)\n\tat Problem.main(tmpj_iyrd52.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799255
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strength = (extension\
    \ : String) => extension.count(_.isUpper) - extension.count(_.isLower)\n     \
    \   val strongest = extensions.maxBy(strength)\n        class_name + \".\" + strongest\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (letter <-\
    \ extension) {\n                if (letter.isUpper) strength += 1\n          \
    \      else strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbfvbn29w.scala:37)\n\tat Problem.main(tmpbfvbn29w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_extension_strength = 0.0\n        for\
    \ (extension <- extensions) {\n            var strength = 0.0\n            for\
    \ (c <- extension) {\n                if (c.isUpper) strength += 1\n         \
    \       else if (c.isLower) strength -= 1\n            }\n            if (strength\
    \ > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = strength\n                strongest_extension = extension\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpll4x9xa6.scala:39)\n\tat Problem.main(tmpll4x9xa6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          if (cap - sm > strength) {\n                strength = cap - sm\n \
    \               strongest = ext\n            }\n        }\n        class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9wyp505n.scala:38)\n\tat Problem.main(tmp9wyp505n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = 0.0\n\
    \        var strongest_extension = \"\"\n        for (extension <- extensions)\
    \ {\n            var cap = 0\n            var sm = 0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) cap += 1\n                else sm += 1\n \
    \           }\n            var strength = cap - sm\n            if (strength >\
    \ strongest) {\n                strongest = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5albb9jj.scala:39)\n\tat Problem.main(tmp5albb9jj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = (0.0,\
    \ \"\")\n        for (ext <- extensions) {\n            var cap = 0\n        \
    \    var sm = 0\n            for (c <- ext) {\n                if (c.isUpper)\
    \ cap += 1\n                else sm += 1\n            }\n            if (cap -\
    \ sm > strongest._1) strongest = (cap - sm, ext)\n        }\n        return class_name\
    \ + \".\" + strongest._2\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp27rwwlcl.scala:34)\n\tat Problem.main(tmp27rwwlcl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = 0.0\n\
    \        var strongest_extension = \"\"\n        for (extension <- extensions)\
    \ {\n            var cap = 0\n            var sm = 0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) cap += 1\n                else sm += 1\n \
    \           }\n            var strength = cap - sm\n            if (strength >\
    \ strongest) {\n                strongest = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy7p3lwxl.scala:39)\n\tat Problem.main(tmpy7p3lwxl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strongest_strength = 0\n        for (extension <- extensions) {\n\
    \            var strength = 0\n            for (c <- extension) {\n          \
    \      if (c.isUpper) strength += 1\n                else if (c.isLower) strength\
    \ -= 1\n            }\n            if (strength > strongest_strength) {\n    \
    \            strongest = extension\n                strongest_strength = strength\n\
    \            }\n        }\n        return class_name + \".\" + strongest\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx_tltqh_.scala:39)\n\tat Problem.main(tmpx_tltqh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\";\n        var strongest_strength = 0.0;\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0;\n            for (c <- extension) {\n   \
    \             if (c.isUpper) strength += 1;\n                else if (c.isLower)\
    \ strength -= 1;\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnvbzae5s.scala:39)\n\tat Problem.main(tmpnvbzae5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var max_strength\
    \ = 0.0\n        var max_strength_extension = \"\"\n        for (extension <-\
    \ extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > max_strength) {\n          \
    \      max_strength = strength\n                max_strength_extension = extension\n\
    \            }\n        }\n        return class_name + \".\" + max_strength_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1yn4_zvh.scala:37)\n\tat Problem.main(tmp1yn4_zvh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var max_strength\
    \ = 0.0\n        var max_extension = \"\"\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else strength -= 1\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength\n                max_extension = extension\n            }\n     \
    \   }\n        return class_name + \".\" + max_extension\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk106z0e0.scala:37)\n\tat Problem.main(tmpk106z0e0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\"\n        var strongest_extension_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else if (c.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = strength\n               \
    \ strongest_extension = extension\n            }\n        }\n        return class_name\
    \ + \".\" + strongest_extension\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdwmqs2mu.scala:39)\n\tat Problem.main(tmpdwmqs2mu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strongest_strength = 0\n        for (extension <- extensions) {\n\
    \            var strength = 0\n            for (c <- extension) {\n          \
    \      if (c.isUpper) strength += 1\n                else if (c.isLower) strength\
    \ -= 1\n            }\n            if (strength > strongest_strength) {\n    \
    \            strongest = extension\n                strongest_strength = strength\n\
    \            }\n        }\n        return class_name + \".\" + strongest\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx_tltqh_.scala:39)\n\tat Problem.main(tmpx_tltqh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strength = extensions.map(x\
    \ => x.count(y => y.isUpper) - x.count(y => y.isLower))\n        val max_strength\
    \ = strength.max\n        val max_index = strength.indexOf(max_strength)\n   \
    \     class_name + \".\" + extensions(max_index)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code here\n\
    \        var max_strength = 0.0\n        var max_extension = \"\"\n        for\
    \ (extension <- extensions) {\n            var strength = 0.0\n            for\
    \ (c <- extension) {\n                if (c.isUpper) strength += 1\n         \
    \       else strength -= 1\n            }\n            if (strength > max_strength)\
    \ {\n                max_strength = strength\n                max_extension =\
    \ extension\n            }\n        }\n        return class_name + \".\" + max_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsuz0yx8o.scala:38)\n\tat Problem.main(tmpsuz0yx8o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(ext\
    \ => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n        val max_strength\
    \ = strengths.maxBy(_._2)._2\n        val strongest_extensions = strengths.filter(_._2\
    \ == max_strength).map(_._1)\n        class_name + \".\" + strongest_extensions.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          if (cap - sm > strength) {\n                strength = cap - sm\n \
    \               strongest = ext\n            }\n        }\n        return class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmh4d2lxa.scala:38)\n\tat Problem.main(tmpmh4d2lxa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else if (c.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvu22hbp0.scala:39)\n\tat Problem.main(tmpvu22hbp0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here\n        var max_strength = 0.0\n        var max_extension = \"\"\n   \
    \     for (extension <- extensions) {\n            var strength = 0.0\n      \
    \      for (c <- extension) {\n                if (c.isUpper) strength += 1\n\
    \                else strength -= 1\n            }\n            if (strength >\
    \ max_strength) {\n                max_strength = strength\n                max_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + max_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmhzq8gmn.scala:38)\n\tat Problem.main(tmpmhzq8gmn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = (0.0,\
    \ \"\")\n        for (ext <- extensions) {\n            var cap = 0\n        \
    \    var sm = 0\n            for (c <- ext) {\n                if (c.isUpper)\
    \ cap += 1\n                else sm += 1\n            }\n            if (cap -\
    \ sm > strongest._1) strongest = (cap - sm, ext)\n        }\n        return class_name\
    \ + \".\" + strongest._2\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp27rwwlcl.scala:34)\n\tat Problem.main(tmp27rwwlcl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code here\n\
    \        val strength = extensions.map(x => (x, x.count(_.isUpper) - x.count(_.isLower))).sortBy(_._2).reverse\n\
    \        class_name + \".\" + strength.head._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiqhdswft.scala:30)\n\tat Problem.main(tmpiqhdswft.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799279
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else if (c.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ff22vey.scala:39)\n\tat Problem.main(tmp2ff22vey.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799255
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code here\n\
    \        var max = 0.0\n        var max_ext = \"\"\n        for (ext <- extensions)\
    \ {\n            var cap = 0\n            var sm = 0\n            for (c <- ext)\
    \ {\n                if (c.isUpper) cap += 1\n                else sm += 1\n \
    \           }\n            var strength = cap - sm\n            if (strength >\
    \ max) {\n                max = strength\n                max_ext = ext\n    \
    \        }\n        }\n        return class_name + \".\" + max_ext\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp4_iw21k.scala:40)\n\tat Problem.main(tmpp4_iw21k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val max_strength =\
    \ strengths.map(_._2).max\n        val strongest_extensions = strengths.filter(_._2\
    \ == max_strength).map(_._1)\n        class_name + \".\" + strongest_extensions.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          if (cap - sm > strength) {\n                strength = cap - sm\n \
    \               strongest = ext\n            }\n        }\n        class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9wyp505n.scala:38)\n\tat Problem.main(tmp9wyp505n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (letter <-\
    \ extension) {\n                if (letter.isUpper) strength += 1.0\n        \
    \        else if (letter.isLower) strength -= 1.0\n            }\n           \
    \ if (strength > strongest_strength) {\n                strongest_strength = strength\n\
    \                strongest_extension = extension\n            }\n        }\n \
    \       return class_name + \".\" + strongest_extension\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkk2tvck2.scala:39)\n\tat Problem.main(tmpkk2tvck2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = \"\
    \";\n        var strength = 0.0;\n        for (ext <- extensions) {\n        \
    \    var cap = 0;\n            var sm = 0;\n            for (c <- ext) {\n   \
    \             if (c.isUpper) cap += 1;\n                else sm += 1;\n      \
    \      }\n            var s = cap - sm;\n            if (s > strength) {\n   \
    \             strength = s;\n                strongest = ext;\n            }\n\
    \        }\n        return class_name + \".\" + strongest;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7bg3l7xo.scala:39)\n\tat Problem.main(tmp7bg3l7xo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here\n        var max = 0.0\n        var result = \"\"\n        for (extension\
    \ <- extensions) {\n            var cap = 0\n            var sm = 0\n        \
    \    for (i <- 0 until extension.length) {\n                if (extension(i).isUpper)\
    \ cap += 1\n                else sm += 1\n            }\n            var strength\
    \ = cap - sm\n            if (strength > max) {\n                max = strength\n\
    \                result = extension\n            }\n        }\n        return\
    \ class_name + \".\" + result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6uye5u81.scala:40)\n\tat Problem.main(tmp6uye5u81.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\";\n        var strongest_strength = 0.0;\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0;\n            for (c <- extension) {\n   \
    \             if (c.isUpper) strength += 1;\n                else if (c.isLower)\
    \ strength -= 1;\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnvbzae5s.scala:39)\n\tat Problem.main(tmpnvbzae5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val max_strength =\
    \ strengths.maxBy(_._2)._2\n        val strongest_extensions = strengths.filter(_._2\
    \ == max_strength).map(_._1)\n        class_name + \".\" + strongest_extensions.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strongest_strength = 0\n        for (extension <- extensions) {\n\
    \            var strength = 0\n            for (c <- extension) {\n          \
    \      if (c.isUpper) strength += 1\n                else if (c.isLower) strength\
    \ -= 1\n            }\n            if (strength > strongest_strength) {\n    \
    \            strongest = extension\n                strongest_strength = strength\n\
    \            }\n        }\n        return class_name + \".\" + strongest\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx_tltqh_.scala:39)\n\tat Problem.main(tmpx_tltqh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            val\
    \ cap = ext.count(_.isUpper)\n            val sm = ext.count(_.isLower)\n    \
    \        val str = cap - sm\n            if (str > strength) {\n             \
    \   strength = str\n                strongest = ext\n            }\n        }\n\
    \        class_name + \".\" + strongest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprpf42t68.scala:37)\n\tat Problem.main(tmprpf42t68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val max_strength =\
    \ strengths.maxBy(_._2)._2\n        val strongest_extensions = strengths.filter(_._2\
    \ == max_strength).map(_._1)\n        class_name + \".\" + strongest_extensions.min\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4l8ca8sm.scala:31)\n\tat Problem.main(tmp4l8ca8sm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            val\
    \ cap = ext.count(_.isUpper)\n            val sm = ext.count(_.isLower)\n    \
    \        val new_strength = cap - sm\n            if (new_strength > strength)\
    \ {\n                strength = new_strength\n                strongest = ext\n\
    \            }\n        }\n        class_name + \".\" + strongest\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4jk8v9mt.scala:37)\n\tat Problem.main(tmp4jk8v9mt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(ext\
    \ => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n        val maxStrength\
    \ = strengths.map(_._2).max\n        val strongestExtensions = strengths.filter(_._2\
    \ == maxStrength).map(_._1)\n        val strongestExtension = strongestExtensions.min\n\
    \        class_name + \".\" + strongestExtension\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpku9ttzep.scala:32)\n\tat Problem.main(tmpku9ttzep.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(e\
    \ => (e, e.count(_.isUpper) - e.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          var cur_strength = cap - sm\n            if (cur_strength > strength)\
    \ {\n                strength = cur_strength\n                strongest = ext\n\
    \            }\n        }\n        return class_name + \".\" + strongest\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzal42esp.scala:39)\n\tat Problem.main(tmpzal42esp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = (0.0,\
    \ \"\")\n        for (ext <- extensions) {\n            var cap = 0\n        \
    \    var sm = 0\n            for (c <- ext) {\n                if (c.isUpper)\
    \ cap += 1\n                else sm += 1\n            }\n            val strength\
    \ = cap - sm\n            if (strength > strongest._1) strongest = (strength,\
    \ ext)\n        }\n        class_name + \".\" + strongest._2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz7cvh81n.scala:35)\n\tat Problem.main(tmpz7cvh81n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else if (c.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvu22hbp0.scala:39)\n\tat Problem.main(tmpvu22hbp0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          if (cap - sm > strength) {\n                strength = cap - sm\n \
    \               strongest = ext\n            }\n        }\n        return class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmh4d2lxa.scala:38)\n\tat Problem.main(tmpmh4d2lxa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            val\
    \ cap = ext.count(_.isUpper)\n            val sm = ext.count(_.isLower)\n    \
    \        val new_strength = cap - sm\n            if (new_strength > strength)\
    \ {\n                strength = new_strength\n                strongest = ext\n\
    \            }\n        }\n        return class_name + \".\" + strongest\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvha1oixo.scala:37)\n\tat Problem.main(tmpvha1oixo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here\n        var max_strength = 0.0\n        var max_extension = \"\"\n   \
    \     for (extension <- extensions) {\n            var strength = 0.0\n      \
    \      for (c <- extension) {\n                if (c.isUpper) strength += 1\n\
    \                else strength -= 1\n            }\n            if (strength >\
    \ max_strength) {\n                max_strength = strength\n                max_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + max_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmhzq8gmn.scala:38)\n\tat Problem.main(tmpmhzq8gmn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          if (cap - sm > strength) {\n                strength = cap - sm\n \
    \               strongest = ext\n            }\n        }\n        class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9wyp505n.scala:38)\n\tat Problem.main(tmp9wyp505n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = \"\
    \";\n        var strength = 0.0;\n        for (extension <- extensions) {\n  \
    \          var cap = 0;\n            var sm = 0;\n            for (c <- extension)\
    \ {\n                if (c.isUpper) cap += 1;\n                else sm += 1;\n\
    \            }\n            var s = cap - sm;\n            if (s > strength) {\n\
    \                strength = s;\n                strongest = extension;\n     \
    \       }\n        }\n        return class_name + \".\" + strongest;\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9b6j7o5x.scala:39)\n\tat Problem.main(tmp9b6j7o5x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strongest_strength = 0\n        for (extension <- extensions) {\n\
    \            var strength = 0\n            for (c <- extension) {\n          \
    \      if (c.isUpper) strength += 1\n                else if (c.isLower) strength\
    \ -= 1\n            }\n            if (strength > strongest_strength) {\n    \
    \            strongest = extension\n                strongest_strength = strength\n\
    \            }\n        }\n        return class_name + \".\" + strongest\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx_tltqh_.scala:39)\n\tat Problem.main(tmpx_tltqh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val max_strength =\
    \ strengths.map(_._2).max\n        val strongest_extensions = strengths.filter(_._2\
    \ == max_strength).map(_._1)\n        class_name + \".\" + strongest_extensions.min\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvorll3ea.scala:31)\n\tat Problem.main(tmpvorll3ea.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(ext\
    \ => {\n            val cap = ext.filter(c => c.isUpper).length\n            val\
    \ sm = ext.filter(c => c.isLower).length\n            (cap - sm, ext)\n      \
    \  })\n        val strongest = strengths.maxBy(x => x._1)\n        class_name\
    \ + \".\" + strongest._2\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            val\
    \ cap = ext.count(c => c.isUpper)\n            val sm = ext.count(c => c.isLower)\n\
    \            val st = cap - sm\n            if (st > strength) {\n           \
    \     strength = st\n                strongest = ext\n            }\n        }\n\
    \        class_name + \".\" + strongest\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp153ynaun.scala:37)\n\tat Problem.main(tmp153ynaun.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var max_strength\
    \ = 0.0\n        var max_extension = \"\"\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else strength -= 1\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength\n                max_extension = extension\n            }\n     \
    \   }\n        class_name + \".\" + max_extension\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1a4iea5.scala:37)\n\tat Problem.main(tmpa1a4iea5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\"\n        var strength = 0.0\n        for (extension <- extensions) {\n\
    \            var cap = 0\n            var sm = 0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) cap += 1\n                else sm += 1\n \
    \           }\n            var new_strength = cap - sm\n            if (new_strength\
    \ > strength) {\n                strength = new_strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfvdefhxe.scala:39)\n\tat Problem.main(tmpfvdefhxe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            val\
    \ cap = ext.count(_.isUpper)\n            val sm = ext.count(_.isLower)\n    \
    \        val new_strength = cap - sm\n            if (new_strength > strength)\
    \ {\n                strength = new_strength\n                strongest = ext\n\
    \            }\n        }\n        return class_name + \".\" + strongest\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvha1oixo.scala:37)\n\tat Problem.main(tmpvha1oixo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          if (cap - sm > strength) {\n                strength = cap - sm\n \
    \               strongest = ext\n            }\n        }\n        return class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmh4d2lxa.scala:38)\n\tat Problem.main(tmpmh4d2lxa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var max_strength\
    \ = 0\n        var max_extension = \"\"\n        for (extension <- extensions)\
    \ {\n            var strength = 0\n            for (c <- extension) {\n      \
    \          if (c.isUpper) strength += 1\n                else strength -= 1\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength\n                max_extension = extension\n            }\n     \
    \   }\n        return class_name + \".\" + max_extension\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpymejo21x.scala:37)\n\tat Problem.main(tmpymejo21x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else if (c.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvu22hbp0.scala:39)\n\tat Problem.main(tmpvu22hbp0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (letter <-\
    \ extension) {\n                if (letter.isUpper) strength += 1\n          \
    \      else strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1el9a7s2.scala:37)\n\tat Problem.main(tmp1el9a7s2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here\n        return \"\"\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmper1b5c3h.scala:25)\n\tat Problem.main(tmper1b5c3h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here.\n        // Return \"my_class.AA\" for the example above.\n        var\
    \ max = 0.0\n        var max_ext = \"\"\n        for (ext <- extensions) {\n \
    \           var cap = 0\n            var sm = 0\n            for (c <- ext) {\n\
    \                if (c.isUpper) cap += 1\n                else sm += 1\n     \
    \       }\n            var strength = cap - sm\n            if (strength > max)\
    \ {\n                max = strength\n                max_ext = ext\n         \
    \   }\n        }\n        return class_name + \".\" + max_ext\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"),\
    \ (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpise32yl0.scala:41)\n\tat Problem.main(tmpise32yl0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here\n        var strongest = extensions(0)\n        var strongest_strength\
    \ = 0\n        for (extension <- extensions) {\n            var strength = 0\n\
    \            for (c <- extension) {\n                if (c.isUpper) strength +=\
    \ 1\n                else strength -= 1\n            }\n            if (strength\
    \ > strongest_strength) {\n                strongest = extension\n           \
    \     strongest_strength = strength\n            }\n        }\n        class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7pcxh5tv.scala:38)\n\tat Problem.main(tmp7pcxh5tv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var max_strength\
    \ = 0.0\n        var max_extension = \"\"\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else strength -= 1\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength\n                max_extension = extension\n            }\n     \
    \   }\n        return class_name + \".\" + max_extension\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk106z0e0.scala:37)\n\tat Problem.main(tmpk106z0e0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here\n        var max_strength = -1.0\n        var max_extension = \"\"\n  \
    \      for (extension <- extensions) {\n            var strength = 0.0\n     \
    \       for (c <- extension) {\n                if (c.isUpper) strength += 1\n\
    \                else strength -= 1\n            }\n            if (strength >\
    \ max_strength) {\n                max_strength = strength\n                max_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + max_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvjzg1uhw.scala:38)\n\tat Problem.main(tmpvjzg1uhw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var max_strength\
    \ = 0.0\n        var max_strength_extension = \"\"\n        for (extension <-\
    \ extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > max_strength) {\n          \
    \      max_strength = strength\n                max_strength_extension = extension\n\
    \            }\n        }\n        return class_name + \".\" + max_strength_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1yn4_zvh.scala:37)\n\tat Problem.main(tmp1yn4_zvh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var max_strength\
    \ = -1.0\n        var max_strength_extension = \"\"\n        for (extension <-\
    \ extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1.0\n                else strength\
    \ -= 1.0\n            }\n            if (strength > max_strength) {\n        \
    \        max_strength = strength\n                max_strength_extension = extension\n\
    \            }\n        }\n        class_name + \".\" + max_strength_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprcbdw01i.scala:37)\n\tat Problem.main(tmprcbdw01i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          if (cap - sm > strength) {\n                strength = cap - sm\n \
    \               strongest = ext\n            }\n        }\n        return class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmh4d2lxa.scala:38)\n\tat Problem.main(tmpmh4d2lxa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(ext\
    \ => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n        val strongest\
    \ = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(ext\
    \ => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n        val strongest\
    \ = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ s = 0\n            for (c <- ext) {\n                if (c.isUpper) s += 1\n\
    \                else if (c.isLower) s -= 1\n            }\n            if (s\
    \ > strength) {\n                strength = s\n                strongest = ext\n\
    \            }\n        }\n        return class_name + \".\" + strongest\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9dtvouzk.scala:39)\n\tat Problem.main(tmp9dtvouzk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\"\n        var strongest_strength = -1.0\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (ch <- extension) {\n   \
    \             if (ch.isUpper) strength += 1.0\n                else if (ch.isLower)\
    \ strength -= 1.0\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          if (cap - sm > strength) {\n                strength = cap - sm\n \
    \               strongest = ext\n            }\n        }\n        return class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmh4d2lxa.scala:38)\n\tat Problem.main(tmpmh4d2lxa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here\n        return \"\"\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmper1b5c3h.scala:25)\n\tat Problem.main(tmper1b5c3h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else if (c.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvu22hbp0.scala:39)\n\tat Problem.main(tmpvu22hbp0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\"\n        var strongest_strength = 0.0\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else if (c.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq17dvaq3.scala:39)\n\tat Problem.main(tmpq17dvaq3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val max_strength =\
    \ strengths.map(_._2).max\n        val strongest_extension = strengths.filter(_._2\
    \ == max_strength).map(_._1).min\n        class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsgz81dj_.scala:31)\n\tat Problem.main(tmpsgz81dj_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strength = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower))).sortBy(_._2).reverse\n    \
    \    class_name + \".\" + strength.head._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfhkz7ahc.scala:29)\n\tat Problem.main(tmpfhkz7ahc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strongest_strength = 0\n        for (extension <- extensions) {\n\
    \            var strength = 0\n            for (letter <- extension) {\n     \
    \           if (letter.isUpper) strength += 1\n                else strength -=\
    \ 1\n            }\n            if (strength > strongest_strength) {\n       \
    \         strongest = extension\n                strongest_strength = strength\n\
    \            }\n        }\n        return class_name + \".\" + strongest\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq302lc8m.scala:37)\n\tat Problem.main(tmpq302lc8m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(ext\
    \ => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n        val max_strength\
    \ = strengths.map(_._2).max\n        val max_strength_extensions = strengths.filter(_._2\
    \ == max_strength).map(_._1)\n        class_name + \".\" + max_strength_extensions.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > strongest_strength) {\n    \
    \            strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9mhs1dcj.scala:37)\n\tat Problem.main(tmp9mhs1dcj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          if (cap - sm > strength) {\n                strength = cap - sm\n \
    \               strongest = ext\n            }\n        }\n        class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9wyp505n.scala:38)\n\tat Problem.main(tmp9wyp505n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (char <- extension)\
    \ {\n                if (char.isUpper) strength += 1\n                else if\
    \ (char.isLower) strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr02nj_n9.scala:39)\n\tat Problem.main(tmpr02nj_n9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else strength\
    \ -= 1\n            }\n            if (strength > strongest_strength) {\n    \
    \            strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9mhs1dcj.scala:37)\n\tat Problem.main(tmp9mhs1dcj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strongest_strength = 0\n        for (extension <- extensions) {\n\
    \            var strength = 0\n            for (c <- extension) {\n          \
    \      if (c.isUpper) strength += 1\n                else if (c.isLower) strength\
    \ -= 1\n            }\n            if (strength > strongest_strength) {\n    \
    \            strongest = extension\n                strongest_strength = strength\n\
    \            }\n        }\n        return class_name + \".\" + strongest\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx_tltqh_.scala:39)\n\tat Problem.main(tmpx_tltqh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = \"\
    \"\n        var strength = 0.0\n        for (ext <- extensions) {\n          \
    \  var cap = 0\n            var sm = 0\n            for (c <- ext) {\n       \
    \         if (c.isUpper) cap += 1\n                else sm += 1\n            }\n\
    \            var cur_strength = cap - sm\n            if (cur_strength > strength)\
    \ {\n                strength = cur_strength\n                strongest = ext\n\
    \            }\n        }\n        return class_name + \".\" + strongest\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptgj_vpsz.scala:39)\n\tat Problem.main(tmptgj_vpsz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          if (cap - sm > strength) {\n                strength = cap - sm\n \
    \               strongest = ext\n            }\n        }\n        return class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmh4d2lxa.scala:38)\n\tat Problem.main(tmpmh4d2lxa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\"\n        var strongest_strength = 0.0\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else if (c.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq17dvaq3.scala:39)\n\tat Problem.main(tmpq17dvaq3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here\n        var max = 0.0\n        var max_ext = \"\"\n        for (ext <-\
    \ extensions) {\n            var cap = 0\n            var sm = 0\n           \
    \ for (c <- ext) {\n                if (c.isUpper) cap += 1\n                else\
    \ sm += 1\n            }\n            var strength = cap - sm\n            if\
    \ (strength > max) {\n                max = strength\n                max_ext\
    \ = ext\n            }\n        }\n        return class_name + \".\" + max_ext\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp42ofxl7n.scala:40)\n\tat Problem.main(tmp42ofxl7n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(ext\
    \ => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n        val max_strength\
    \ = strengths.maxBy(_._2)._2\n        val strongest_extensions = strengths.filter(_._2\
    \ == max_strength).map(_._1)\n        class_name + \".\" + strongest_extensions.min\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd2g2522c.scala:31)\n\tat Problem.main(tmpd2g2522c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = (0.0,\
    \ \"\")\n        for (ext <- extensions) {\n            var strength = 0.0\n \
    \           for (c <- ext) {\n                if (c.isUpper) strength += 1.0\n\
    \                else if (c.isLower) strength -= 1.0\n            }\n        \
    \    if (strength > strongest._1) strongest = (strength, ext)\n        }\n   \
    \     return class_name + \".\" + strongest._2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe9fngvos.scala:35)\n\tat Problem.main(tmpe9fngvos.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_extension_strength = 0\n        for (extension\
    \ <- extensions) {\n            var strength = 0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else if (c.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = strength\n               \
    \ strongest_extension = extension\n            }\n        }\n        return class_name\
    \ + \".\" + strongest_extension\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgqdwneur.scala:39)\n\tat Problem.main(tmpgqdwneur.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strongest_strength = 0.0\n        for (extension\
    \ <- extensions) {\n            var strength = 0.0\n            for (c <- extension)\
    \ {\n                if (c.isUpper) strength += 1\n                else if (c.isLower)\
    \ strength -= 1\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength\n                strongest_extension\
    \ = extension\n            }\n        }\n        return class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvu22hbp0.scala:39)\n\tat Problem.main(tmpvu22hbp0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strongest_strength = 0\n        for (extension <- extensions) {\n\
    \            var strength = 0\n            for (c <- extension) {\n          \
    \      if (c.isUpper) strength += 1\n                else strength -= 1\n    \
    \        }\n            if (strength > strongest_strength) {\n               \
    \ strongest = extension\n                strongest_strength = strength\n     \
    \       }\n        }\n        return class_name + \".\" + strongest\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0d94_1jo.scala:37)\n\tat Problem.main(tmp0d94_1jo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799297
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (c <- ext) {\n            \
    \    if (c.isUpper) cap += 1\n                else sm += 1\n            }\n  \
    \          if (cap - sm > strength) {\n                strength = cap - sm\n \
    \               strongest = ext\n            }\n        }\n        class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9wyp505n.scala:38)\n\tat Problem.main(tmp9wyp505n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var max_strength\
    \ = 0.0\n        var max_extension = \"\"\n        for (extension <- extensions)\
    \ {\n            var strength = 0.0\n            for (c <- extension) {\n    \
    \            if (c.isUpper) strength += 1\n                else strength -= 1\n\
    \            }\n            if (strength > max_strength) {\n                max_strength\
    \ = strength\n                max_extension = extension\n            }\n     \
    \   }\n        return class_name + \".\" + max_extension\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk106z0e0.scala:37)\n\tat Problem.main(tmpk106z0e0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strength = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower))).sortBy(_._2).reverse\n    \
    \    class_name + \".\" + strength.head._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfhkz7ahc.scala:29)\n\tat Problem.main(tmpfhkz7ahc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799267
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = extensions(0)\n\
    \        var strength = 0\n        for (ext <- extensions) {\n            var\
    \ cap = 0\n            var sm = 0\n            for (ch <- ext) {\n           \
    \     if (ch.isUpper) cap += 1\n                else sm += 1\n            }\n\
    \            if (cap - sm > strength) {\n                strength = cap - sm\n\
    \                strongest = ext\n            }\n        }\n        return class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcdg0cox8.scala:38)\n\tat Problem.main(tmpcdg0cox8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(ext\
    \ => (ext, ext.count(_.isUpper) - ext.count(_.isLower)))\n        val strongest\
    \ = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(x\
    \ => (x, x.count(_.isUpper) - x.count(_.isLower)))\n        val strongest = strengths.maxBy(_._2)\n\
    \        class_name + \".\" + strongest._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799256
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strength = extensions.map(ext\
    \ => (ext, ext.count(_.isUpper) - ext.count(_.isLower))).sortBy(_._2)\n      \
    \  class_name + \".\" + strength.last._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9tq8zoi9.scala:29)\n\tat Problem.main(tmp9tq8zoi9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799296
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(ext\
    \ => {\n            val cap = ext.count(c => c.isUpper)\n            val sm =\
    \ ext.count(c => c.isLower)\n            (ext, cap - sm)\n        })\n       \
    \ val strongest = strengths.maxBy(_._2)\n        class_name + \".\" + strongest._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799296
