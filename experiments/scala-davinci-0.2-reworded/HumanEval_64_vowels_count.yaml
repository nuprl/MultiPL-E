name: HumanEval_64_vowels_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function vowels_count which takes a string representing\n    //\
  \ a word as input and returns the number of vowels in the string.\n    // Vowels\
  \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel, but\
  \ only when it is at the end of the given word.\n    // Example:\n    // >>> vowelsCount((\"\
  abcde\"))\n    // (2l)\n    // >>> vowelsCount((\"ACEDY\"))\n    // (3l)\n    def\
  \ vowelsCount(s : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(vowelsCount((\"abcde\"\
  )) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"\
  key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"\
  keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"\
  ACEDY\")) == (3l));\n    }\n\n}\n"
completions: ["        // Write your code here\n        return 0", "        // Fill\
    \ in the code here\n        0", "        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        val last = s.last\n        val s2 = s.toLowerCase\n        val\
    \ count = s2.count(vowels.contains(_))\n        if (vowels.contains(last)) count\
    \ + 1 else count", "        // Fill in the code here\n        return 0l", "  \
    \      // Write your code here\n        0", "        // TODO: Implement this function.\n\
    \        return 0l;", "        // Write your code here\n        return 0", " \
    \       // Your code here\n        return 0l", "        // Fill Up this function\
    \ body\n        // `s` contains only lower case letters\n        // 'y' is a vowel\
    \ only when it is at the end of the word\n        var count = 0\n        for (i\
    \ <- 0 until s.length) {\n            if (s(i) == 'a' || s(i) == 'e' || s(i) ==\
    \ 'i' || s(i) == 'o' || s(i) == 'u') {\n                count += 1\n         \
    \   }\n        }\n        if (s(s.length - 1) == 'y') {\n            count +=\
    \ 1\n        }\n        count", "        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        val last = s.last\n        s.filter(vowels.contains(_)).length\
    \ + (if (vowels.contains(last)) 1 else 0)", "        // Fill in the code here\n\
    \        return 0l", "        s.toLowerCase().filter(c => c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u' || c == 'y').size", "        // Fill in\
    \ the code here\n        return 0l", '        s.toLowerCase.filter(c => "aeiouy".contains(c)).length',
  "        // Fill Up this function body\n        // `s` contains only lower case\
    \ letters\n        // 'y' is a vowel only when it is at the end of the word\n\
    \        var count = 0\n        for (i <- 0 until s.length) {\n            if\
    \ (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) == 'u') {\n\
    \                count += 1\n            }\n        }\n        if (s(s.length\
    \ - 1) == 'y') {\n            count += 1\n        }\n        count", "       \
    \ val vowels = Set('a', 'e', 'i', 'o', 'u')\n        var count = 0\n        for\
    \ (i <- 0 until s.length) {\n            if (vowels.contains(s(i))) count += 1\n\
    \        }\n        if (s.length > 0 && s(s.length - 1) == 'y') count += 1\n \
    \       return count", "        var count = 0\n        for (c <- s) {\n      \
    \      if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \           count += 1\n            }\n        }\n        if (s.last == 'y') {\n\
    \            count += 1\n        }\n        return count", "        // TODO: Implement\
    \ this function\n        return 0l", "        // Fill in the code here\n     \
    \   return 0l", "        // Your code here\n        return 0"]
stop_tokens:
- "\n    }\n"
