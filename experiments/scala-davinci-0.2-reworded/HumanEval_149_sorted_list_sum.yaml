name: HumanEval_149_sorted_list_sum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts a list of strings as a parameter,\n    //\
  \ deletes the strings that have odd lengths from it,\n    // and returns the resulted\
  \ list with a sorted order,\n    // The list is always a list of strings and never\
  \ a list of numbers,\n    // and it may contain duplicates.\n    // The order of\
  \ the list should be ascending by length of each word, and you\n    // should return\
  \ the list sorted by that rule.\n    // If two words have the same length, sort\
  \ the list alphabetically.\n    // The function should return a list of strings\
  \ in sorted order.\n    // You may assume that all words will have the same length.\n\
  \    // For example:\n    // >>> listSort((List[String](\"aa\", \"a\", \"aaa\")))\n\
  \    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"ab\", \"a\"\
  , \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def sortedListSum(lst\
  \ : List[String]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
  aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
  school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"\
  ))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n\
  \    assert(sortedListSum((List[String](\"d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"\
  abcd\", \"dcba\"))));\n    assert(sortedListSum((List[String](\"AI\", \"ai\", \"\
  au\"))).equals((List[String](\"AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"\
  a\", \"b\", \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
  aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
  , \"bbbb\"))));\n    }\n\n}\n"
completions: ['        lst.sortWith((a, b) => a.length < b.length || (a.length ==
    b.length && a < b)).filter(x => x.length % 2 == 0)', '        lst.filter(x =>
    x.length % 2 == 0).sortWith((x, y) => x.length < y.length)', '        lst.sortWith((a,
    b) => a.length < b.length || (a.length == b.length && a < b)).filter(a => a.length
    % 2 == 0)', "        val lst2 = lst.sortWith((a, b) => a.length < b.length)\n\
    \        val lst3 = lst2.filter(x => x.length % 2 == 0)\n        lst3", "    \
    \    val lst2 = lst.filter(x => x.length % 2 == 0)\n        lst2.sortWith((x,\
    \ y) => x.length < y.length)", '        lst.filter(x => x.length % 2 == 0).sortWith((x,
    y) => x.length < y.length)', "        val lst1 = lst.filter(x => x.length % 2\
    \ == 0)\n        val lst2 = lst1.sortWith((x, y) => x.length < y.length)\n   \
    \     lst2", '        lst.sortWith((a, b) => a.length < b.length || (a.length
    == b.length && a < b)).filter(x => x.length % 2 == 0)', "        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3", "        val lst2 = lst.filter(x => x.length % 2 ==\
    \ 0)\n        val lst3 = lst2.sortWith((x, y) => x.length < y.length)\n      \
    \  lst3", "        val lst2 = lst.filter(x => x.length % 2 == 0)\n        val\
    \ lst3 = lst2.sortWith((x, y) => x.length < y.length)\n        lst3", '        lst.filter(x
    => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)', "        val lst2\
    \ = lst.filter(x => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length\
    \ < y.length)", '        lst.filter(x => x.length % 2 == 0).sortWith((a, b) =>
    a.length < b.length)', '        lst.filter(x => x.length % 2 == 0).sorted', " \
    \       val lst1 = lst.filter(x => x.length % 2 == 0)\n        val lst2 = lst1.sortWith((a,\
    \ b) => a.length < b.length)\n        lst2", "        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)",
  '        lst.sortWith((a, b) => a.length < b.length || (a.length == b.length &&
    a < b)).filter(x => x.length % 2 == 0)', "        val sorted = lst.sortWith((a,\
    \ b) => a.length < b.length)\n        sorted.filter(x => x.length % 2 == 0)",
  '        lst.filter(x => x.length % 2 == 0).sortWith(_.length < _.length)']
stop_tokens:
- "\n    }\n"
