name: HumanEval_5_intersperse
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Insert a number 'delimeter' between every two consecutive elements of input\
  \ list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    // (List[Long]())\n\
  \    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l))\n \
  \   // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n   \
  \ def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
  \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
  \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
  \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
  \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
  \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
completions: ["        def intersperseHelper(numbers : List[Long], delimeter : Long,\
    \ result : List[Long]) : List[Long] = {\n            numbers match {\n       \
    \         case Nil => result\n                case h :: Nil => result ::: List(h)\n\
    \                case h :: t => intersperseHelper(t, delimeter, result ::: List(h,\
    \ delimeter))\n            }\n        }\n        intersperseHelper(numbers, delimeter,\
    \ List[Long]())", "        if (numbers.length == 0) return numbers\n        if\
    \ (numbers.length == 1) return numbers\n        var result = List[Long]()\n  \
    \      for (i <- 0 until numbers.length - 1) {\n            result = result :+\
    \ numbers(i)\n            result = result :+ delimeter\n        }\n        result\
    \ = result :+ numbers(numbers.length - 1)\n        return result", "        if\
    \ (numbers.length == 0) return numbers\n        if (numbers.length == 1) return\
    \ numbers\n        var result = List[Long]()\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            result = result :+ numbers(i)\n            result = result\
    \ :+ delimeter\n        }\n        result = result :+ numbers(numbers.length -\
    \ 1)\n        return result", "        if (numbers.length == 0) return numbers\n\
    \        if (numbers.length == 1) return numbers\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length - 1) {\n            result = result\
    \ :+ numbers(i)\n            result = result :+ delimeter\n        }\n       \
    \ result = result :+ numbers(numbers.length - 1)\n        return result", "  \
    \      if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)", "        if (numbers.length == 0) return numbers\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result", "        numbers match\
    \ {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n    \
    \        case x :: xs => x :: delimeter :: intersperse(xs, delimeter)\n      \
    \  }", "        if (numbers.length == 0) return numbers\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result", "        if (numbers.length\
    \ == 0) return List[Long]()\n        if (numbers.length == 1) return numbers\n\
    \        return numbers.head :: delimeter :: intersperse(numbers.tail, delimeter)",
  "        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result", "        if (numbers.length == 0) return List[Long]()\n\
    \        if (numbers.length == 1) return numbers\n        return numbers.head\
    \ :: delimeter :: intersperse(numbers.tail, delimeter)", "        if (numbers.length\
    \ <= 1) numbers\n        else numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)", "        if (numbers.length <= 1) numbers\n        else numbers.head\
    \ :: delimeter :: intersperse(numbers.tail, delimeter)", "        if (numbers.length\
    \ == 0) return List[Long]()\n        if (numbers.length == 1) return numbers\n\
    \        val result = new ListBuffer[Long]\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            result += numbers(i)\n            result += delimeter\n\
    \        }\n        result += numbers(numbers.length - 1)\n        result.toList",
  "        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result", "        if (numbers.length <= 1) numbers\n  \
    \      else numbers.head :: delimeter :: intersperse(numbers.tail, delimeter)",
  "        def intersperse0(numbers : List[Long], delimeter : Long, acc : List[Long])\
    \ : List[Long] = {\n            if (numbers.length == 0) acc\n            else\
    \ if (numbers.length == 1) acc ::: numbers\n            else intersperse0(numbers.tail,\
    \ delimeter, acc ::: List(numbers.head, delimeter))\n        }\n        intersperse0(numbers,\
    \ delimeter, List[Long]())", "        if (numbers.length == 0) return numbers\n\
    \        if (numbers.length == 1) return numbers\n        val result = new ListBuffer[Long]\n\
    \        result += numbers(0)\n        for (i <- 1 until numbers.length) {\n \
    \           result += delimeter\n            result += numbers(i)\n        }\n\
    \        return result.toList", "        if (numbers.length == 0) return List[Long]()\n\
    \        if (numbers.length == 1) return numbers\n        return numbers.head\
    \ :: delimeter :: intersperse(numbers.tail, delimeter)", "        if (numbers.length\
    \ == 0) return List[Long]()\n        if (numbers.length == 1) return numbers\n\
    \        return numbers.head :: delimeter :: intersperse(numbers.tail, delimeter)"]
stop_tokens:
- "\n    }\n"
