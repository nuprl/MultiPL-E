language: scala
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of a triangle\n        if (a > b && a > c) {\n        \
    \    if (pow(a, 2) == pow(b, 2) + pow(c, 2)) true\n            else false\n  \
    \      }\n        else if (b > a && b > c) {\n            if (pow(b, 2) == pow(a,\
    \ 2) + pow(c, 2)) true\n            else false\n        }\n        else {\n  \
    \          if (pow(c, 2) == pow(a, 2) + pow(b, 2)) true\n            else false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of a triangle\n        // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n        val sides = List(a, b,\
    \ c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x\
    \ * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        // Return true if the three\
    \ sides form a right-angled triangle, false otherwise.\n        if (a > b && a\
    \ > c) {\n            if (a * a == b * b + c * c) true else false\n        } else\
    \ if (b > a && b > c) {\n            if (b * b == a * a + c * c) true else false\n\
    \        } else {\n            if (c * c == a * a + b * b) true else false\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ sides of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        if (a > b && a > c) {\n            if (a * a == b *\
    \ b + c * c) return true\n        } else if (b > a && b > c) {\n            if\
    \ (b * b == a * a + c * c) return true\n        } else if (c > a && c > b) {\n\
    \            if (c * c == a * a + b * b) return true\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle.\n        // `b` is the length of the side\
    \ opposite to the right angle.\n        // `c` is the length of the side opposite\
    \ to the right angle.\n        // You can use the predefined functions `pow` and\
    \ `sqrt`\n        if (pow(a, 2) + pow(b, 2) == pow(c, 2)) true else false\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0k7v412v.scala:24)\n\tat Problem.main(tmp0k7v412v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` and `b` are the lengths\
    \ of the sides of the triangle\n        // `c` is the length of the hypotenuse\n\
    \        // You have to return true if the triangle is right-angled, false otherwise\n\
    \        val sides = List(a, b, c)\n        val sortedSides = sides.sorted\n \
    \       val squaredSides = sortedSides.map(x => x * x)\n        squaredSides(0)\
    \ + squaredSides(1) == squaredSides(2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        if (a == 0 || b == 0 || c == 0) return false\n \
    \       val sides = Array(a, b, c).sorted\n        val a2 = sides(0)\n       \
    \ val b2 = sides(1)\n        val c2 = sides(2)\n        if (a2 * a2 + b2 * b2\
    \ == c2 * c2) return true\n        false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise.\n        if (a > b && a\
    \ > c) {\n            if (a * a == b * b + c * c) return true\n        } else\
    \ if (b > a && b > c) {\n            if (b * b == a * a + c * c) return true\n\
    \        } else if (c > a && c > b) {\n            if (c * c == a * a + b * b)\
    \ return true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` represents the length\
    \ of the side `a`\n        // `b` represents the length of the side `b`\n    \
    \    // `c` represents the length of the side `c`\n        // return true if the\
    \ three sides form a right-angled triangle, false otherwise\n        if (a > b\
    \ && a > c) {\n            if (a * a == b * b + c * c) true else false\n     \
    \   } else if (b > a && b > c) {\n            if (b * b == a * a + c * c) true\
    \ else false\n        } else {\n            if (c * c == a * a + b * b) true else\
    \ false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill in the code here\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmebl7dgk.scala:18)\n\tat Problem.main(tmpmebl7dgk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        val sides = List(a, b, c).sorted\n        val a2\
    \ = sides(0)\n        val b2 = sides(1)\n        val c2 = sides(2)\n        a2\
    \ * a2 + b2 * b2 == c2 * c2\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle.\n        // `b` is the length of the side\
    \ opposite to the right angle.\n        // `c` is the length of the side opposite\
    \ to the right angle.\n        // Return true if the three sides form a right-angled\
    \ triangle, false otherwise.\n        if (a > b && a > c) {\n            if (a\
    \ * a == b * b + c * c) true else false\n        } else if (b > a && b > c) {\n\
    \            if (b * b == a * a + c * c) true else false\n        } else {\n \
    \           if (c * c == a * a + b * b) true else false\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        // Return true if the three\
    \ sides form a right-angled triangle, false otherwise.\n        if (a == 0 ||\
    \ b == 0 || c == 0) return false\n        val sides = List(a, b, c).sorted\n \
    \       val (a1, b1, c1) = (sides(0), sides(1), sides(2))\n        if (a1 * a1\
    \ + b1 * b1 == c1 * c1) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val max = sides(2)\n\
    \        val sum = sides.sum\n        val sum2 = sum - max\n        max * max\
    \ == sum2 * sum2\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy680tqpi.scala:21)\n\tat Problem.main(tmpy680tqpi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Write your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyxzpy4s8.scala:18)\n\tat Problem.main(tmpyxzpy4s8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ sides of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        val sides = List(a, b, c).sorted\n        sides(0)\
    \ * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        // Return true if the three\
    \ sides form a right-angled triangle, false otherwise.\n        val sides = Array(a,\
    \ b, c)\n        val maxSide = sides.max\n        val maxSideIndex = sides.indexOf(maxSide)\n\
    \        val otherSides = sides.filter(_ != maxSide)\n        val sumOfSquaresOfOtherSides\
    \ = otherSides.map(x => x * x).sum\n        val squareOfMaxSide = maxSide * maxSide\n\
    \        sumOfSquaresOfOtherSides == squareOfMaxSide\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the side opposite\
    \ to the right angle.\n        // `b` and `c` are the other two sides.\n     \
    \   // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `c`^2 = `b`^2\n        // `b`^2\
    \ + `c`^2 = `a`^2\n        if (a > b && a > c) {\n            if (a * a == b *\
    \ b + c * c) {\n                return true\n            }\n        } else if\
    \ (b > a && b > c) {\n            if (b * b == a * a + c * c) {\n            \
    \    return true\n            }\n        } else if (c > a && c > b) {\n      \
    \      if (c * c == a * a + b * b) {\n                return true\n          \
    \  }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val l = List(a, b, c)\n        val max = l.max\n        val min\
    \ = l.min\n        val mid = l.filter(x => x != max && x != min).head\n      \
    \  if (max * max == min * min + mid * mid) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.rightAngleTriangle(tmppr_zo5mf.scala:17)\n\
    \tat Problem$.main(tmppr_zo5mf.scala:24)\n\tat Problem.main(tmppr_zo5mf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // `a`, `b`, `c` are positive\
    \ integers\n        // `a`, `b`, `c` are less than or equal to 1000\n        //\
    \ return true if the three sides form a right-angled triangle, false otherwise\n\
    \        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) == sides(2)\
    \ * sides(2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ side `a`\n        // `b` is the length of side `b`\n        // `c` is the length\
    \ of side `c`\n        // You have to return a boolean value\n        // If the\
    \ three sides form a right-angled triangle, return true\n        // If the three\
    \ sides do not form a right-angled triangle, return false\n        val sides =\
    \ List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n\
    \        x * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        // You can use the `pow` function to compute the\
    \ square of a number\n        // Example: pow(2, 3) = 2^3 = 8\n        if (a >\
    \ b && a > c) {\n            if (pow(a, 2) == pow(b, 2) + pow(c, 2)) true else\
    \ false\n        } else if (b > a && b > c) {\n            if (pow(b, 2) == pow(a,\
    \ 2) + pow(c, 2)) true else false\n        } else {\n            if (pow(c, 2)\
    \ == pow(a, 2) + pow(b, 2)) true else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill up this function body\n        // `a`, `b` and `c` are\
    \ the lengths of the three sides of a triangle\n        // You have to return\
    \ true if the three sides form a right-angled triangle,\n        // false otherwise\n\
    \        if (a > b && a > c) {\n            if (a * a == b * b + c * c) true else\
    \ false\n        } else if (b > a && b > c) {\n            if (b * b == a * a\
    \ + c * c) true else false\n        } else {\n            if (c * c == a * a +\
    \ b * b) true else false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle.\n        // `b` is the length of the side\
    \ opposite to the right angle.\n        // `c` is the length of the hypotenuse.\n\
    \        // `a` and `b` are the legs of the triangle.\n        // `c` is the hypotenuse\
    \ of the triangle.\n        // `a` and `b` are the legs of the triangle.\n   \
    \     // `c` is the hypotenuse of the triangle.\n        // `a` and `b` are the\
    \ legs of the triangle.\n        // `c` is the hypotenuse of the triangle.\n \
    \       // `a` and `b` are the legs of the triangle.\n        // `c` is the hypotenuse\
    \ of the triangle.\n        // `a` and `b` are the legs of the triangle.\n   \
    \     // `c` is the hypotenuse of the triangle.\n        // `a` and `b` are the\
    \ legs of the triangle.\n        // `c` is the hypotenuse of the triangle.\n \
    \       // `a` and `b` are the legs of the triangle.\n        // `c` is the hypotenuse\
    \ of the triangle.\n        // `a` and `b` are the legs of the triangle.\n   \
    \     // `c` is the hypotenuse of the triangle.\n        // `a` and `b` are the\
    \ legs of the triangle.\n        // `c` is the hypotenuse of the triangle.\n \
    \       // `a` and `b` are the legs of the triangle.\n        // `c` is the hypotenuse\
    \ of the triangle.\n        // `a` and `b` are the legs of the triangle.\n   \
    \     // `c` is the hypotenuse of the triangle.\n        // `a` and `b` are the\
    \ legs of the triangle.\n        // `c` is the hypotenuse of the triangle.\n \
    \       // `a` and `b` are the legs of the triangle.\n        // `c` is the hypotenuse\
    \ of the triangle.\n        // `a` and `b` are the legs of the triangle.\n   \
    \     // `c` is the hypotenuse of the triangle.\n        // `a\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7eg7l1lx.scala:13:69\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36mrightAngleTriangle\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m, \e[36mb\e[0m : \e[35mLong\e[0m, \e[36mc\e\
    [0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                                       Found:    Unit\n\
    \e[31m   |\e[0m                                                       Required:\
    \ Boolean\n\e[31m14 |\e[0m        \e[34m// Fill Up this function body\e[0m\n\e\
    [31m15 |\e[0m        \e[34m// `a` is the length of the side opposite to the right\
    \ angle.\e[0m\n\e[31m16 |\e[0m        \e[34m// `b` is the length of the side opposite\
    \ to the right angle.\e[0m\n\e[31m17 |\e[0m        \e[34m// `c` is the length\
    \ of the hypotenuse.\e[0m\n\e[31m18 |\e[0m        \e[34m// `a` and `b` are the\
    \ legs of the triangle.\e[0m\n\e[31m19 |\e[0m        \e[34m// `c` is the hypotenuse\
    \ of the triangle.\e[0m\n\e[31m20 |\e[0m        \e[34m// `a` and `b` are the legs\
    \ of the triangle.\e[0m\n\e[31m21 |\e[0m        \e[34m// `c` is the hypotenuse\
    \ of the triangle.\e[0m\n\e[31m22 |\e[0m        \e[34m// `a` and `b` are the legs\
    \ of the triangle.\e[0m\n\e[31m23 |\e[0m        \e[34m// `c` is the hypotenuse\
    \ of the triangle.\e[0m\n\e[31m24 |\e[0m        \e[34m// `a` and `b` are the legs\
    \ of the triangle.\e[0m\n\e[31m25 |\e[0m        \e[34m// `c` is the hypotenuse\
    \ of the triangle.\e[0m\n\e[31m26 |\e[0m        \e[34m// `a` and `b` are the legs\
    \ of the triangle.\e[0m\n\e[31m27 |\e[0m        \e[34m// `c` is the hypotenuse\
    \ of the triangle.\e[0m\n\e[31m28 |\e[0m        \e[34m// `a` and `b` are the legs\
    \ of the triangle.\e[0m\n\e[31m29 |\e[0m        \e[34m// `c` is the hypotenuse\
    \ of the triangle.\e[0m\n\e[31m30 |\e[0m        \e[34m// `a` and `b` are the legs\
    \ of the triangle.\e[0m\n\e[31m31 |\e[0m        \e[34m// `c` is the hypotenuse\
    \ of the triangle.\e[0m\n\e[31m32 |\e[0m        \e[34m// `a` and `b` are the legs\
    \ of the triangle.\e[0m\n\e[31m33 |\e[0m        \e[34m// `c` is the hypotenuse\
    \ of the triangle.\e[0m\n\e[31m34 |\e[0m        \e[34m// `a`"
  stdout: ''
  timestamp: 1659793938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        if (a > b && a > c) {\n \
    \           if (a * a == b * b + c * c) true else false\n        } else if (b\
    \ > a && b > c) {\n            if (b * b == a * a + c * c) true else false\n \
    \       } else {\n            if (c * c == a * a + b * b) true else false\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ side lengths of a triangle\n        // return true if the three sides form a\
    \ right-angled triangle, false otherwise\n        val sides = List(a, b, c)\n\
    \        val maxSide = sides.max\n        val otherSides = sides.filter(_ != maxSide)\n\
    \        val sumOfOtherSides = otherSides.sum\n        maxSide * maxSide == otherSides(0)\
    \ * otherSides(0) + otherSides(1) * otherSides(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.rightAngleTriangle(tmp1rcl_66z.scala:21)\n\tat Problem$.main(tmp1rcl_66z.scala:27)\n\
    \tat Problem.main(tmp1rcl_66z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val l = List(a,\
    \ b, c)\n        val max = l.max\n        val min = l.min\n        val mid = l.filter(x\
    \ => x != max && x != min).head\n        if (max * max == min * min + mid * mid)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.rightAngleTriangle(tmp3y718j8u.scala:20)\n\
    \tat Problem$.main(tmp3y718j8u.scala:27)\n\tat Problem.main(tmp3y718j8u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of the triangle\n        val x = a*a\n        val y = b*b\n\
    \        val z = c*c\n        if (x + y == z || x + z == y || y + z == x) true\
    \ else false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        // return true if the three sides form a right-angled\
    \ triangle, false otherwise\n        val sides = List(a, b, c).sorted\n      \
    \  val a2 = sides(0)\n        val b2 = sides(1)\n        val c2 = sides(2)\n \
    \       a2 * a2 + b2 * b2 == c2 * c2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ sides of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        val sides = List(a, b, c).sorted\n        val a2 =\
    \ sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2 =\
    \ sides(2) * sides(2)\n        a2 + b2 == c2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle.\n        // `b` is the length of the side\
    \ opposite to the right angle.\n        // `c` is the length of the side opposite\
    \ to the right angle.\n        // You can use the `pow` function to compute the\
    \ power of a number.\n        // Example:\n        // >>> pow(2, 3)\n        //\
    \ (8)\n        // >>> pow(4, 0.5)\n        // (2)\n        // >>> pow(8, 1/3)\n\
    \        // (2)\n        val sides = Array(a, b, c)\n        val max = sides.max\n\
    \        val maxIndex = sides.indexOf(max)\n        val otherSides = sides.zipWithIndex.filter(_._2\
    \ != maxIndex).map(_._1)\n        val otherSidesSum = otherSides.sum\n       \
    \ val otherSidesProduct = otherSides.product\n        val maxSide = max\n    \
    \    val maxSideSquare = pow(maxSide, 2)\n        val otherSidesSumSquare = pow(otherSidesSum,\
    \ 2)\n        val otherSidesProductSquare = pow(otherSidesProduct, 2)\n      \
    \  val isRightAngleTriangle = maxSideSquare == otherSidesSumSquare + otherSidesProductSquare\n\
    \        isRightAngleTriangle\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzk2bh65y.scala:40)\n\tat Problem.main(tmpzk2bh65y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        if (a > b && a\
    \ > c) {\n            if (a * a == b * b + c * c) true else false\n        } else\
    \ if (b > a && b > c) {\n            if (b * b == a * a + c * c) true else false\n\
    \        } else {\n            if (c * c == a * a + b * b) true else false\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side of the triangle opposite to the right angle.\n        // `b` is the\
    \ length of the side of the triangle opposite to the right angle.\n        //\
    \ `c` is the length of the side of the triangle opposite to the right angle.\n\
    \        // You can use the `sqrt` function to compute the square root of a number.\n\
    \        // You can use the `pow` function to compute the power of a number.\n\
    \        // The `pow` function is available in the `math` package.\n        //\
    \ You can use the `math.pow` function to compute the power of a number.\n    \
    \    // You can use the `math.sqrt` function to compute the square root of a number.\n\
    \        // You can use the `math.pow` function to compute the power of a number.\n\
    \        // You can use the `math.sqrt` function to compute the square root of\
    \ a number.\n        // You can use the `math.pow` function to compute the power\
    \ of a number.\n        // You can use the `math.sqrt` function to compute the\
    \ square root of a number.\n        // You can use the `math.pow` function to\
    \ compute the power of a number.\n        // You can use the `math.sqrt` function\
    \ to compute the square root of a number.\n        // You can use the `math.pow`\
    \ function to compute the power of a number.\n        // You can use the `math.sqrt`\
    \ function to compute the square root of a number.\n        // You can use the\
    \ `math.pow` function to compute the power of a number.\n        // You can use\
    \ the `math.sqrt` function to compute the square root of a number.\n        //\
    \ You can use the `math.pow` function to compute the power of a number.\n    \
    \    // You can use the `math.sqrt` function to compute the square root of a number.\n\
    \        // You can use the `math.pow` function to compute the power of a number.\n\
    \        // You can use the `math.sqrt` function to compute the square root of\
    \ a number.\n        // You can use the `math.pow` function to compute the power\
    \ of a number.\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnxglh49q.scala:13:69\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36mrightAngleTriangle\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m, \e[36mb\e[0m : \e[35mLong\e[0m, \e[36mc\e\
    [0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                                       Found:    Unit\n\
    \e[31m   |\e[0m                                                       Required:\
    \ Boolean\n\e[31m14 |\e[0m        \e[34m// Fill Up this function body\e[0m\n\e\
    [31m15 |\e[0m        \e[34m// `a` is the length of the side of the triangle opposite\
    \ to the right angle.\e[0m\n\e[31m16 |\e[0m        \e[34m// `b` is the length\
    \ of the side of the triangle opposite to the right angle.\e[0m\n\e[31m17 |\e\
    [0m        \e[34m// `c` is the length of the side of the triangle opposite to\
    \ the right angle.\e[0m\n\e[31m18 |\e[0m        \e[34m// You can use the `sqrt`\
    \ function to compute the square root of a number.\e[0m\n\e[31m19 |\e[0m     \
    \   \e[34m// You can use the `pow` function to compute the power of a number.\e\
    [0m\n\e[31m20 |\e[0m        \e[34m// The `pow` function is available in the `math`\
    \ package.\e[0m\n\e[31m21 |\e[0m        \e[34m// You can use the `math.pow` function\
    \ to compute the power of a number.\e[0m\n\e[31m22 |\e[0m        \e[34m// You\
    \ can use the `math.sqrt` function to compute the square root of a number.\e[0m\n\
    \e[31m23 |\e[0m        \e[34m// You can use the `math.pow` function to compute\
    \ the power of a number.\e[0m\n\e[31m24 |\e[0m        \e[34m// You can use the\
    \ `math.sqrt` function to compute the square root of a number.\e[0m\n\e[31m25\
    \ |\e[0m        \e[34m// You can use the `math.pow` function to compute the power\
    \ of a number.\e[0m\n\e[31m26 |\e[0m        \e[34m// You can use the `math.sqrt`\
    \ function to compute the square root of a number.\e[0m\n\e[31m27 |\e[0m     \
    \   \e[34m// You can use the `math.pow` function to compute the power of a number.\e\
    [0m\n\e[31m28 |\e[0m        \e[34m// You can use the `math.sqrt` function to compute\
    \ the square root of a number."
  stdout: ''
  timestamp: 1659793940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle.\n        // `b` is the length of the side\
    \ opposite to the right angle.\n        // `c` is the length of the side opposite\
    \ to the right angle.\n        // Return true if the three sides form a right-angled\
    \ triangle, false otherwise.\n        val sides = List(a, b, c).sorted\n     \
    \   val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z\
    \ * z\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle.\n        // `b` is the length of the side\
    \ opposite to the right angle.\n        // `c` is the length of the side opposite\
    \ to the right angle.\n        // You can use the predefined functions `pow` and\
    \ `sqrt` to compute the square root.\n        // Do not declare any new variables.\n\
    \        val a2 = pow(a, 2)\n        val b2 = pow(b, 2)\n        val c2 = pow(c,\
    \ 2)\n        if (a2 + b2 == c2) true\n        else if (a2 + c2 == b2) true\n\
    \        else if (b2 + c2 == a2) true\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val catheti = sides(0) * sides(0) + sides(1) * sides(1)\n        hypotenuse\
    \ * hypotenuse == catheti\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ side lengths of the triangle\n        // return true if the three sides form\
    \ a right-angled triangle, false otherwise\n        val sides = List(a, b, c).sorted\n\
    \        val (a1, b1, c1) = (sides(0), sides(1), sides(2))\n        a1 * a1 +\
    \ b1 * b1 == c1 * c1\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        if (a > b && a\
    \ > c) {\n            if (a * a == b * b + c * c) true else false\n        } else\
    \ if (b > a && b > c) {\n            if (b * b == a * a + c * c) true else false\n\
    \        } else {\n            if (c * c == a * a + b * b) true else false\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ sides of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        val sides = List(a, b, c).sorted\n        val a2 =\
    \ sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2 =\
    \ sides(2) * sides(2)\n        a2 + b2 == c2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code goes here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgj0pz3ok.scala:18)\n\tat Problem.main(tmpgj0pz3ok.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val x = sides(0)\n  \
    \      val y = sides(1)\n        val z = sides(2)\n        x * x + y * y == z\
    \ * z\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ side lengths of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        val sides = List(a, b, c).sorted\n        val max =\
    \ sides(2)\n        val min = sides(0)\n        val mid = sides(1)\n        val\
    \ max2 = max * max\n        val min2 = min * min\n        val mid2 = mid * mid\n\
    \        if (max2 == min2 + mid2) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        // return true if the three sides form a right-angled\
    \ triangle, false otherwise\n        val sides = List(a, b, c).sorted\n      \
    \  val a = sides(0)\n        val b = sides(1)\n        val c = sides(2)\n    \
    \    a * a + b * b == c * c\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqhv2ra76.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = sides(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqhv2ra76.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = sides(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqhv2ra76.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = sides(\e[31m2\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpqhv2ra76.scala:19:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msides\e[0m = List(a, b,\
    \ c).sorted\n\e[31m\e[31m   |\e[0m                                        ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e\
    [0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659793939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Write your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyxzpy4s8.scala:18)\n\tat Problem.main(tmpyxzpy4s8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        sides(0) * sides(0) +\
    \ sides(1) * sides(1) == sides(2) * sides(2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val list = List(a, b, c)\n        val max = list.max\n        val\
    \ sum = list.sum - max\n        max * max == sum * sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3gfhrivt.scala:20)\n\tat Problem.main(tmp3gfhrivt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` `b` `c` are the side\
    \ lengths of the triangle\n        if (a > b && a > c) {\n            if (a *\
    \ a == b * b + c * c) true else false\n        } else if (b > a && b > c) {\n\
    \            if (b * b == a * a + c * c) true else false\n        } else {\n \
    \           if (c * c == a * a + b * b) true else false\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793947
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        if (a == 0 || b\
    \ == 0 || c == 0) return false\n        val max = max(a, max(b, c))\n        val\
    \ min = min(a, min(b, c))\n        val mid = a + b + c - max - min\n        if\
    \ (max * max == mid * mid + min * min) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpshrewxol.scala:18:18 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = max(a, max(b,\
    \ c))\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m        \
    \          Recursive \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpshrewxol.scala:18:25 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = max(a, max(b,\
    \ c))\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m \
    \                        Recursive \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpshrewxol.scala:19:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmin\e[0m = min(a, min(b, c))\n\e[31m\e[31m   |\e[0m                  ^\e\
    [0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35mmin\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpshrewxol.scala:19:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmin\e[0m = min(a, min(b, c))\n\e[31m\e[31m   |\e[0m                  \
    \       ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35mmin\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        // Return true if the three\
    \ sides form a right-angled triangle, false otherwise.\n        if (a == 0 ||\
    \ b == 0 || c == 0) return false\n        val max = max(a, max(b, c))\n      \
    \  val min = min(a, min(b, c))\n        val mid = a + b + c - max - min\n    \
    \    max * max == mid * mid + min * min\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8nsb5xxq.scala:18:18 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = max(a, max(b,\
    \ c))\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m        \
    \          Recursive \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8nsb5xxq.scala:18:25 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = max(a, max(b,\
    \ c))\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m \
    \                        Recursive \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8nsb5xxq.scala:19:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmin\e[0m = min(a, min(b, c))\n\e[31m\e[31m   |\e[0m                  ^\e\
    [0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35mmin\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8nsb5xxq.scala:19:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmin\e[0m = min(a, min(b, c))\n\e[31m\e[31m   |\e[0m                  \
    \       ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35mmin\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        val sides = List(a, b, c).sorted\n        val (x,\
    \ y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the side of the\
    \ triangle opposite to the right angle.\n        // `b` is the side of the triangle\
    \ opposite to the right angle.\n        // `c` is the hypotenuse of the triangle.\n\
    \        // Return true if the three sides form a right-angled triangle, false\
    \ otherwise.\n        val sides = List(a, b, c)\n        val max = sides.max\n\
    \        val other = sides.filter(_ != max)\n        val sum = other.sum\n   \
    \     max * max == other(0) * other(0) + other(1) * other(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.rightAngleTriangle(tmp2e8nc4od.scala:23)\n\tat Problem$.main(tmp2e8nc4od.scala:29)\n\
    \tat Problem.main(tmp2e8nc4od.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ side `a`\n        // `b` is the length of side `b`\n        // `c` is the length\
    \ of side `c`\n        // You have to return true if the three sides form a right-angled\
    \ triangle, false otherwise.\n        if (a > b && a > c) {\n            if (a\
    \ * a == b * b + c * c) true else false\n        } else if (b > a && b > c) {\n\
    \            if (b * b == a * a + c * c) true else false\n        } else {\n \
    \           if (c * c == a * a + b * b) true else false\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) == sides(2)\
    \ * sides(2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ side `a`\n        // `b` is the length of side `b`\n        // `c` is the length\
    \ of side `c`\n        // return true if the three sides form a right-angled triangle,\
    \ false otherwise\n        val sides = Array(a, b, c)\n        val max = sides.max\n\
    \        val min = sides.min\n        val mid = sides.sum - max - min\n      \
    \  max * max == min * min + mid * mid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = Array(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` represents the length\
    \ of the side `a`\n        // `b` represents the length of the side `b`\n    \
    \    // `c` represents the length of the side `c`\n        if (a > 0 && b > 0\
    \ && c > 0) {\n            val sides = List(a, b, c).sorted\n            val hypotenuse\
    \ = sides(2)\n            val cathetus1 = sides(1)\n            val cathetus2\
    \ = sides(0)\n            val hypotenuse2 = pow(hypotenuse, 2)\n            val\
    \ cathetus12 = pow(cathetus1, 2)\n            val cathetus22 = pow(cathetus2,\
    \ 2)\n            hypotenuse2 == cathetus12 + cathetus22\n        } else {\n \
    \           false\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle.\n        // `b` is the length of the side\
    \ opposite to the right angle.\n        // `c` is the length of the side opposite\
    \ to the right angle.\n        // You can use the predefined functions `pow` and\
    \ `sqrt`\n        val sides = List(a, b, c).sorted\n        val a2 = pow(sides(0),\
    \ 2)\n        val b2 = pow(sides(1), 2)\n        val c2 = pow(sides(2), 2)\n \
    \       a2 + b2 == c2\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` represents the length\
    \ of side `a`\n        // `b` represents the length of side `b`\n        // `c`\
    \ represents the length of side `c`\n        // You have to return true if the\
    \ three sides form a right-angled triangle, false otherwise.\n        if (a >\
    \ b && a > c) {\n            if (pow(a, 2) == pow(b, 2) + pow(c, 2)) true else\
    \ false\n        } else if (b > a && b > c) {\n            if (pow(b, 2) == pow(a,\
    \ 2) + pow(c, 2)) true else false\n        } else {\n            if (pow(c, 2)\
    \ == pow(a, 2) + pow(b, 2)) true else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` represents the length\
    \ of the side of the triangle\n        // `b` represents the length of the side\
    \ of the triangle\n        // `c` represents the length of the side of the triangle\n\
    \        // Do not change the function defintion provided.\n        if (a == 0\
    \ || b == 0 || c == 0) return false\n        val sides = List(a, b, c).sorted\n\
    \        val x = sides(0)\n        val y = sides(1)\n        val z = sides(2)\n\
    \        x * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the first side of the triangle\n        // `b` is the length of the second side\
    \ of the triangle\n        // `c` is the length of the third side of the triangle\n\
    \        // Do not change the function defintion provided.\n        if (a == 0\
    \ || b == 0 || c == 0) {\n            return false\n        }\n        val sides\
    \ = List(a, b, c)\n        val maxSide = sides.max\n        val maxSideIndex =\
    \ sides.indexOf(maxSide)\n        val otherSides = sides.zipWithIndex.filter(_._2\
    \ != maxSideIndex).map(_._1)\n        val sumOfOtherSides = otherSides.sum\n \
    \       maxSide == sumOfOtherSides\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprx13xxpb.scala:30)\n\tat Problem.main(tmprx13xxpb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ side a\n        // `b` is the length of side b\n        // `c` is the length\
    \ of side c\n        // return true if the three sides form a right-angled triangle,\
    \ false otherwise\n        if (a > b && a > c) {\n            if (a * a == b *\
    \ b + c * c) true else false\n        } else if (b > a && b > c) {\n         \
    \   if (b * b == a * a + c * c) true else false\n        } else {\n          \
    \  if (c * c == a * a + b * b) true else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill up this function body\n        // `a`, `b` and `c` are\
    \ the lengths of the three sides of a triangle\n        // You have to return\
    \ true if the three sides form a right-angled triangle,\n        // false otherwise\n\
    \        if (a > b && a > c) {\n            if (a * a == b * b + c * c) true else\
    \ false\n        } else if (b > a && b > c) {\n            if (b * b == a * a\
    \ + c * c) true else false\n        } else {\n            if (c * c == a * a +\
    \ b * b) true else false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        if (a > b && a\
    \ > c) {\n            if (a * a == b * b + c * c) true else false\n        } else\
    \ if (b > a && b > c) {\n            if (b * b == a * a + c * c) true else false\n\
    \        } else {\n            if (c * c == a * a + b * b) true else false\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ side lengths of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        val x = a*a\n        val y = b*b\n        val z = c*c\n\
    \        if (x + y == z || x + z == y || y + z == x) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` `b` `c` are the sides\
    \ of the triangle\n        if (a > b && a > c) {\n            if (a * a == b *\
    \ b + c * c) true else false\n        } else if (b > a && b > c) {\n         \
    \   if (b * b == a * a + c * c) true else false\n        } else {\n          \
    \  if (c * c == a * a + b * b) true else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of the triangle\n        // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n        val sides = Array(a,\
    \ b, c)\n        val max = sides.max\n        val sum = sides.sum - max\n    \
    \    max * max == sum * sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz3wbv6ci.scala:23)\n\tat Problem.main(tmpz3wbv6ci.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = Array(a,\
    \ b, c)\n        val max = sides.max\n        val min = sides.min\n        val\
    \ mid = sides.filter(x => x != max && x != min).head\n        if (min + mid >\
    \ max) {\n            val hyp = sqrt(max * max)\n            val other = sqrt(min\
    \ * min + mid * mid)\n            abs(hyp - other) < 0.000001\n        } else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty array\n\tat scala.collection.ArrayOps$.head$extension(ArrayOps.scala:227)\n\
    \tat Problem$.rightAngleTriangle(tmpp9d9w5xo.scala:20)\n\tat Problem$.main(tmpp9d9w5xo.scala:31)\n\
    \tat Problem.main(tmpp9d9w5xo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val hypotenuse = sides(2)\n        val cathetus = sides(1)\n\
    \        val base = sides(0)\n        hypotenuse * hypotenuse == cathetus * cathetus\
    \ + base * base\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ sides of the triangle\n        if (a == 0 || b == 0 || c == 0) return false\n\
    \        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        if (a2 + b2 == c2) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        // Return true if the three\
    \ sides form a right-angled triangle, false otherwise.\n        if (a == 0 ||\
    \ b == 0 || c == 0) return false\n        val max = max(a, max(b, c))\n      \
    \  val min = min(a, min(b, c))\n        val mid = a + b + c - max - min\n    \
    \    if (max * max == min * min + mid * mid) return true\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo_c0kyh9.scala:18:18 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = max(a, max(b,\
    \ c))\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m        \
    \          Recursive \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo_c0kyh9.scala:18:25 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = max(a, max(b,\
    \ c))\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m \
    \                        Recursive \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo_c0kyh9.scala:19:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmin\e[0m = min(a, min(b, c))\n\e[31m\e[31m   |\e[0m                  ^\e\
    [0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35mmin\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo_c0kyh9.scala:19:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmin\e[0m = min(a, min(b, c))\n\e[31m\e[31m   |\e[0m                  \
    \       ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35mmin\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793948
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill up this function body\n        // `a`, `b` and `c` are\
    \ the lengths of the three sides of a triangle.\n        // Return true if the\
    \ three sides form a right-angled triangle, false otherwise.\n        val arr\
    \ = Array(a, b, c)\n        arr.sortWith(_ < _)\n        arr(0) * arr(0) + arr(1)\
    \ * arr(1) == arr(2) * arr(2)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpujlyd_eu.scala:24)\n\tat Problem.main(tmpujlyd_eu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ side lengths of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        val sides = List(a, b, c).sorted\n        val hypotenuse\
    \ = sides(2)\n        val cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n\
    \        hypotenuse * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793955
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ sides of the triangle\n        if (a > b && a > c) {\n            if (a * a\
    \ == b * b + c * c) true else false\n        } else if (b > a && b > c) {\n  \
    \          if (b * b == a * a + c * c) true else false\n        } else {\n   \
    \         if (c * c == a * a + b * b) true else false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (a, b, c) = (sides(0),\
    \ sides(1), sides(2))\n        a * a + b * b == c * c\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpl87i_46r.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m),\
    \ sides(\e[31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \              ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpl87i_46r.scala:15:35 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e[31m1\e\
    [0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                            \
    \       ^\e[0m\n\e[31m   |\e[0m                                   Recursive \e\
    [33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpl87i_46r.scala:15:45 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e\
    [31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                     \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \           Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpl87i_46r.scala:14:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msides\e[0m = List(a, b,\
    \ c).sorted\n\e[31m\e[31m   |\e[0m                                        ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mBigDecimal\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl87i_46r.scala:16:10 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        a * a + b * b == c * c\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1659793957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle.\n        // `b` is the length of the side\
    \ opposite to the right angle.\n        // `c` is the length of the side opposite\
    \ to the right angle.\n        // You can use the `pow` function to compute power.\n\
    \        // You can use the `sqrt` function to compute square root.\n        val\
    \ l = List(a, b, c)\n        val m = l.max\n        val r = l.filter(_ != m)\n\
    \        val s = r.sum\n        m * m == r(0) * r(0) + r(1) * r(1)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.rightAngleTriangle(tmpaso48en_.scala:24)\n\tat Problem$.main(tmpaso48en_.scala:30)\n\
    \tat Problem.main(tmpaso48en_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793959
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        if (a > b && a\
    \ > c) {\n            if (a * a == b * b + c * c) return true\n        } else\
    \ if (b > a && b > c) {\n            if (b * b == a * a + c * c) return true\n\
    \        } else if (c > a && c > b) {\n            if (c * c == a * a + b * b)\
    \ return true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle.\n        // `b` is the length of the side\
    \ opposite to the right angle.\n        // `c` is the length of the side opposite\
    \ to the right angle.\n        // You can use the predefined functions `pow` and\
    \ `sqrt`\n        // pow(x, y) = x raised to the power of y\n        // sqrt(x)\
    \ = square root of x\n        val x = pow(a, 2)\n        val y = pow(b, 2)\n \
    \       val z = pow(c, 2)\n        if (x + y == z || x + z == y || y + z == x)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793958
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle.\n        // `b` is the length of the side\
    \ opposite to the right angle.\n        // `c` is the length of the side opposite\
    \ to the right angle.\n        // You can use the predefined functions `sqrt`\
    \ and `pow`\n        // sqrt(x) returns the square root of x\n        // pow(x,\
    \ y) returns x to the power of y\n        val sides = List(a, b, c).sorted\n \
    \       val a2 = pow(sides(0), 2)\n        val b2 = pow(sides(1), 2)\n       \
    \ val c2 = pow(sides(2), 2)\n        a2 + b2 == c2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ sides of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        if (a == 0 || b == 0 || c == 0) return false\n    \
    \    val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        if (x + y <= z) return false\n        if (x * x + y * y ==\
    \ z * z) return true\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Write your code here\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1t9_kgbp.scala:19)\n\tat Problem.main(tmp1t9_kgbp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793959
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ side lengths of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        val sides = List(a, b, c).sorted\n        val hypotenuse\
    \ = sides(2)\n        val cathetus = sides(1)\n        val base = sides(0)\n \
    \       hypotenuse * hypotenuse == cathetus * cathetus + base * base\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ side lengths of the triangle\n        val sides = List(a, b, c)\n        val\
    \ max = sides.max\n        val min = sides.min\n        val mid = sides.filter(x\
    \ => x != max && x != min).head\n        val max2 = max * max\n        val min2\
    \ = min * min\n        val mid2 = mid * mid\n        if (max2 == min2 + mid2)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.rightAngleTriangle(tmp2w357gpe.scala:19)\n\
    \tat Problem$.main(tmp2w357gpe.scala:29)\n\tat Problem.main(tmp2w357gpe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        var x = a*a\n \
    \       var y = b*b\n        var z = c*c\n        if(x+y==z || x+z==y || y+z==x)\n\
    \            return true\n        else\n            return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793959
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c) {\n            if (a * a == b * b + c * c)\
    \ true else false\n        } else if (b > a && b > c) {\n            if (b * b\
    \ == a * a + c * c) true else false\n        } else {\n            if (c * c ==\
    \ a * a + b * b) true else false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793959
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2\
    \ - `c`^2 = 0\n        // `a`^2 + `b`^2 - `c`^2 < 0\n        // `a`^2 + `b`^2\
    \ - `c`^2 > 0\n        // `a`^2 + `b`^2 - `c`^2 = 0\n        val a2 = a * a\n\
    \        val b2 = b * b\n        val c2 = c * c\n        if (a2 + b2 == c2) true\n\
    \        else if (a2 + c2 == b2) true\n        else if (b2 + c2 == a2) true\n\
    \        else false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        // return true if the three sides form a right-angled\
    \ triangle, false otherwise\n        val sides = List(a, b, c).sorted\n      \
    \  sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793961
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle.\n        // `b` is the length of the side\
    \ opposite to the right angle.\n        // `c` is the length of the side opposite\
    \ to the right angle.\n        if (a > b && a > c) {\n            if (a * a ==\
    \ b * b + c * c) true else false\n        } else if (b > a && b > c) {\n     \
    \       if (b * b == a * a + c * c) true else false\n        } else {\n      \
    \      if (c * c == a * a + b * b) true else false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793959
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val cathetus = sides(1)\n        val base = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus * cathetus + base * base\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793961
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` represents the length\
    \ of side `a`\n        // `b` represents the length of side `b`\n        // `c`\
    \ represents the length of side `c`\n        // You have to return true if the\
    \ three sides form a right-angled triangle, false otherwise.\n        // You can\
    \ assume that the arguments passed to this function are valid lengths of the sides\
    \ of a triangle.\n        // You can assume that the arguments passed to this\
    \ function are valid lengths of the sides of a triangle.\n        val sides =\
    \ List(a, b, c).sorted\n        val a2 = sides(0)\n        val b2 = sides(1)\n\
    \        val c2 = sides(2)\n        val a2b2 = a2 * a2 + b2 * b2\n        val\
    \ c2sq = c2 * c2\n        a2b2 == c2sq\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793961
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        if (a > b && a > c) {\n            return (a * a\
    \ == b * b + c * c)\n        } else if (b > a && b > c) {\n            return\
    \ (b * b == a * a + c * c)\n        } else {\n            return (c * c == a *\
    \ a + b * b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793961
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code goes here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgj0pz3ok.scala:18)\n\tat Problem.main(tmpgj0pz3ok.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ side lengths of a triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        val sides = List(a, b, c).sorted\n        val sqr =\
    \ (x : Long) => x * x\n        sqr(sides(0)) + sqr(sides(1)) == sqr(sides(2))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill up this function body\n        // `a`, `b` and `c` are\
    \ the lengths of the three sides of a triangle.\n        val sides = List(a, b,\
    \ c)\n        val maxSide = sides.max\n        val otherSides = sides.filter(_\
    \ != maxSide)\n        val hypotenuse = maxSide\n        val catheti = otherSides.sum\n\
    \        hypotenuse * hypotenuse == catheti * catheti\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhfsa4zt.scala:24)\n\tat Problem.main(tmpnhfsa4zt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ side lengths of the triangle\n        if (a == 0 || b == 0 || c == 0) return\
    \ false\n        val sides = List(a, b, c).sorted\n        val x = sides(0)\n\
    \        val y = sides(1)\n        val z = sides(2)\n        if (x * x + y * y\
    \ == z * z) return true\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        if (a > b && a > c) {\n            if (a * a ==\
    \ b * b + c * c) true else false\n        } else if (b > a && b > c) {\n     \
    \       if (b * b == a * a + c * c) true else false\n        } else {\n      \
    \      if (c * c == a * a + b * b) true else false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle.\n        // `b` is the length of the side\
    \ opposite to the right angle.\n        // `c` is the length of the hypotenuse.\n\
    \        // Hint: Use the Pythagorean theorem.\n        // https://en.wikipedia.org/wiki/Pythagorean_theorem\n\
    \        // Hint: Use the `math.pow` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        // Hint: Use the `math.sqrt` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        // Hint: Use the `math.abs` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        // Hint: Use the `math.round` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        // Hint: Use the `math.floor` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        // Hint: Use the `math.ceil` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        // Hint: Use the `math.max` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        // Hint: Use the `math.min` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        // Hint: Use the `math.signum` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        // Hint: Use the `math.toDegrees` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        //\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmrso66h.scala:13:69\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36mrightAngleTriangle\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m, \e[36mb\e[0m : \e[35mLong\e[0m, \e[36mc\e\
    [0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                                       Found:    Unit\n\
    \e[31m   |\e[0m                                                       Required:\
    \ Boolean\n\e[31m14 |\e[0m        \e[34m// Fill Up this function body\e[0m\n\e\
    [31m15 |\e[0m        \e[34m// `a` is the length of the side opposite to the right\
    \ angle.\e[0m\n\e[31m16 |\e[0m        \e[34m// `b` is the length of the side opposite\
    \ to the right angle.\e[0m\n\e[31m17 |\e[0m        \e[34m// `c` is the length\
    \ of the hypotenuse.\e[0m\n\e[31m18 |\e[0m        \e[34m// Hint: Use the Pythagorean\
    \ theorem.\e[0m\n\e[31m19 |\e[0m        \e[34m// https://en.wikipedia.org/wiki/Pythagorean_theorem\e\
    [0m\n\e[31m20 |\e[0m        \e[34m// Hint: Use the `math.pow` function.\e[0m\n\
    \e[31m21 |\e[0m        \e[34m// https://www.scala-lang.org/api/current/scala/math/package.html\e\
    [0m\n\e[31m22 |\e[0m        \e[34m// Hint: Use the `math.sqrt` function.\e[0m\n\
    \e[31m23 |\e[0m        \e[34m// https://www.scala-lang.org/api/current/scala/math/package.html\e\
    [0m\n\e[31m24 |\e[0m        \e[34m// Hint: Use the `math.abs` function.\e[0m\n\
    \e[31m25 |\e[0m        \e[34m// https://www.scala-lang.org/api/current/scala/math/package.html\e\
    [0m\n\e[31m26 |\e[0m        \e[34m// Hint: Use the `math.round` function.\e[0m\n\
    \e[31m27 |\e[0m        \e[34m// https://www.scala-lang.org/api/current/scala/math/package.html\e\
    [0m\n\e[31m28 |\e[0m        \e[34m// Hint: Use the `math.floor` function.\e[0m\n\
    \e[31m29 |\e[0m        \e[34m// https://www.scala-lang.org/api/current/scala/math/package.html\e\
    [0m\n\e[31m30 |\e[0m        \e[34m// Hint: Use the `math.ceil` function.\e[0m\n\
    \e[31m31 |\e[0m        \e[34m// https://www.scala-lang.org/api/current/scala/math/package.html\e\
    [0m\n\e[31m32 |\e[0m        \e[34m// Hint: Use the `math.max` function.\e[0m"
  stdout: ''
  timestamp: 1659793962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        val sides = List(a, b, c)\n\
    \        val maxSide = sides.max\n        val maxSideIndex = sides.indexOf(maxSide)\n\
    \        val otherSides = sides.take(maxSideIndex) ++ sides.drop(maxSideIndex\
    \ + 1)\n        val otherSidesSum = otherSides.sum\n        maxSide * maxSide\
    \ == otherSidesSum * otherSidesSum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpakwln6ej.scala:24)\n\tat Problem.main(tmpakwln6ej.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793966
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        if (a > b && a\
    \ > c) {\n            if (a * a == b * b + c * c) true else false\n        } else\
    \ if (b > a && b > c) {\n            if (b * b == a * a + c * c) true else false\n\
    \        } else {\n            if (c * c == a * a + b * b) true else false\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        val sides = List(a, b, c).sorted\n\
    \        val a = sides(0)\n        val b = sides(1)\n        val c = sides(2)\n\
    \        a * a + b * b == c * c\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph9c2rq7j.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = sides(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmph9c2rq7j.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = sides(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmph9c2rq7j.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = sides(\e[31m2\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmph9c2rq7j.scala:16:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msides\e[0m = List(a, b,\
    \ c).sorted\n\e[31m\e[31m   |\e[0m                                        ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e\
    [0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659793964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // `a`, `b`, `c` are positive\
    \ integers\n        // `a`, `b`, `c` are less than or equal to 100\n        //\
    \ `a`, `b`, `c` are not all equal\n        // `a`, `b`, `c` are not all zero\n\
    \        val l = List(a, b, c)\n        val max = l.max\n        val min = l.min\n\
    \        val mid = l.filter(x => x != max && x != min).head\n        max * max\
    \ == min * min + mid * mid\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.rightAngleTriangle(tmpalluwi5o.scala:23)\n\
    \tat Problem$.main(tmpalluwi5o.scala:30)\n\tat Problem.main(tmpalluwi5o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793968
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of a triangle\n        val sides = List(a, b, c)\n    \
    \    val maxSide = sides.max\n        val minSides = sides.filter(_ != maxSide)\n\
    \        val minSide = minSides.min\n        val otherSide = minSides.filter(_\
    \ != minSide).head\n        val sum = minSide * minSide + otherSide * otherSide\n\
    \        val maxSideSquared = maxSide * maxSide\n        sum == maxSideSquared\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.min\n\tat scala.collection.IterableOnceOps.min(IterableOnce.scala:914)\n\
    \tat scala.collection.IterableOnceOps.min$(IterableOnce.scala:912)\n\tat scala.collection.AbstractIterable.min(Iterable.scala:926)\n\
    \tat Problem$.rightAngleTriangle(tmpj7_165h0.scala:19)\n\tat Problem$.main(tmpj7_165h0.scala:29)\n\
    \tat Problem.main(tmpj7_165h0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793969
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of the triangle\n        // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n        val sides = List(a, b,\
    \ c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x\
    \ * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ sides of the triangle\n        if (a > b && a > c) {\n            if (a*a ==\
    \ b*b + c*c) return true\n        } else if (b > a && b > c) {\n            if\
    \ (b*b == a*a + c*c) return true\n        } else if (c > a && c > b) {\n     \
    \       if (c*c == a*a + b*b) return true\n        }\n        return false\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793968
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of the triangle\n        // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n        if (a > b && a > c) {\n\
    \            if (a * a == b * b + c * c) return true\n        } else if (b > a\
    \ && b > c) {\n            if (b * b == a * a + c * c) return true\n        }\
    \ else if (c > a && c > b) {\n            if (c * c == a * a + b * b) return true\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793969
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle.\n        // `b` is the length of the side\
    \ opposite to the right angle.\n        // `c` is the length of the hypotenuse.\n\
    \        // Return true if the three sides form a right-angled triangle, false\
    \ otherwise.\n        if (a > b && a > c) {\n            return (a * a == b *\
    \ b + c * c)\n        } else if (b > a && b > c) {\n            return (b * b\
    \ == a * a + c * c)\n        } else {\n            return (c * c == a * a + b\
    \ * b)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793969
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ side lengths of the triangle\n        val sorted = List(a, b, c).sorted\n  \
    \      val max = sorted(2)\n        val sum = sorted.sum - max\n        max *\
    \ max == sum * sum\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4pzzj1vv.scala:22)\n\tat Problem.main(tmp4pzzj1vv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c) {\n            if (pow(a, 2) == pow(b, 2) +\
    \ pow(c, 2)) true else false\n        } else if (b > a && b > c) {\n         \
    \   if (pow(b, 2) == pow(a, 2) + pow(c, 2)) true else false\n        } else {\n\
    \            if (pow(c, 2) == pow(a, 2) + pow(b, 2)) true else false\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793969
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        sides(0) * sides(0) +\
    \ sides(1) * sides(1) == sides(2) * sides(2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c) {\n            return a * a == b * b + c *\
    \ c\n        } else if (b > a && b > c) {\n            return b * b == a * a +\
    \ c * c\n        } else {\n            return c * c == a * a + b * b\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c) {\n            if (a * a == b * b + c * c)\
    \ true else false\n        } else if (b > a && b > c) {\n            if (b * b\
    \ == a * a + c * c) true else false\n        } else {\n            if (c * c ==\
    \ a * a + b * b) true else false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side of the triangle opposite to the right angle.\n        // `b` is the\
    \ length of the side of the triangle opposite to the right angle.\n        //\
    \ `c` is the length of the side of the triangle opposite to the right angle.\n\
    \        // You can use the `pow` function to compute the square of a number.\n\
    \        // For example, `pow(2, 2)` computes the square of 2.\n        // You\
    \ can use the `sqrt` function to compute the square root of a number.\n      \
    \  // For example, `sqrt(4)` computes the square root of 4.\n        // You can\
    \ use the `max` function to compute the maximum of two numbers.\n        // For\
    \ example, `max(2, 3)` computes the maximum of 2 and 3.\n        // You can use\
    \ the `min` function to compute the minimum of two numbers.\n        // For example,\
    \ `min(2, 3)` computes the minimum of 2 and 3.\n        val (x, y, z) = (a, b,\
    \ c)\n        val (a1, b1, c1) = (pow(x, 2), pow(y, 2), pow(z, 2))\n        val\
    \ (a2, b2, c2) = (a1 + b1, a1 + c1, b1 + c1)\n        val (a3, b3, c3) = (sqrt(a2),\
    \ sqrt(b2), sqrt(c2))\n        val (a4, b4, c4) = (a3.toLong, b3.toLong, c3.toLong)\n\
    \        val (a5, b5, c5) = (max(a4, b4), max(a4, c4), max(b4, c4))\n        val\
    \ (a6, b6, c6) = (min(a5, b5), min(a5, c5), min(b5, c5))\n        val (a7, b7,\
    \ c7) = (a6 == a4, b6 == b4, c6 == c4)\n        val (a8, b8, c\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpla7vz3_6.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpla7vz3_6.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793969
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ side lengths of the triangle\n        if (a > b && a > c) {\n            if\
    \ (a * a == b * b + c * c) true else false\n        } else if (b > a && b > c)\
    \ {\n            if (b * b == a * a + c * c) true else false\n        } else {\n\
    \            if (c * c == a * a + b * b) true else false\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c) {\n            if (a * a == b * b + c * c)\
    \ return true\n        } else if (b > a && b > c) {\n            if (b * b ==\
    \ a * a + c * c) return true\n        } else if (c > a && c > b) {\n         \
    \   if (c * c == a * a + b * b) return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val l = List(a, b, c)\n        val sorted = l.sorted\n        val\
    \ max = sorted(2)\n        val sum = sorted(0) * sorted(0) + sorted(1) * sorted(1)\n\
    \        val max2 = max * max\n        sum == max2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        // Return true if the three\
    \ sides form a right-angled triangle, false otherwise.\n        val sides = List(a,\
    \ b, c)\n        val maxSide = sides.max\n        val otherSides = sides.filter(_\
    \ != maxSide)\n        val sumOfOtherSides = otherSides.sum\n        maxSide *\
    \ maxSide == otherSides(0) * otherSides(0) + otherSides(1) * otherSides(1)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.rightAngleTriangle(tmptjtfwvg4.scala:21)\n\tat Problem$.main(tmptjtfwvg4.scala:27)\n\
    \tat Problem.main(tmptjtfwvg4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        if (a2 + b2 == c2) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of the triangle\n        // return true if the triangle\
    \ is right-angled, false otherwise\n        val sides = List(a, b, c).sorted\n\
    \        val hypotenuse = sides(2)\n        val cathetus1 = sides(1)\n       \
    \ val cathetus2 = sides(0)\n        hypotenuse * hypotenuse == cathetus1 * cathetus1\
    \ + cathetus2 * cathetus2\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side of the triangle opposite to the right angle.\n        // `b` is the\
    \ length of the side of the triangle opposite to the right angle.\n        //\
    \ `c` is the length of the hypotenuse.\n        // `a` and `b` are the lengths\
    \ of the sides of the triangle.\n        // `c` is the length of the hypotenuse.\n\
    \        // `a` and `b` are the lengths of the sides of the triangle.\n      \
    \  // `c` is the length of the hypotenuse.\n        // `a` and `b` are the lengths\
    \ of the sides of the triangle.\n        // `c` is the length of the hypotenuse.\n\
    \        // `a` and `b` are the lengths of the sides of the triangle.\n      \
    \  // `c` is the length of the hypotenuse.\n        // `a` and `b` are the lengths\
    \ of the sides of the triangle.\n        // `c` is the length of the hypotenuse.\n\
    \        // `a` and `b` are the lengths of the sides of the triangle.\n      \
    \  // `c` is the length of the hypotenuse.\n        // `a` and `b` are the lengths\
    \ of the sides of the triangle.\n        // `c` is the length of the hypotenuse.\n\
    \        // `a` and `b` are the lengths of the sides of the triangle.\n      \
    \  // `c` is the length of the hypotenuse.\n        // `a` and `b` are the lengths\
    \ of the sides of the triangle.\n        // `c` is the length of the hypotenuse.\n\
    \        // `a` and `b` are the lengths of the sides of the triangle.\n      \
    \  // `c` is the length of the hypotenuse.\n        // `a` and `b` are the lengths\
    \ of the sides of the triangle.\n        // `c` is the length of the hypotenuse.\n\
    \        // `a` and `b` are the lengths of the sides of the triangle.\n      \
    \  // `c` is the length of the hypotenuse.\n        // `a` and `b` are the lengths\
    \ of the sides of the triangle.\n        // `c` is\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeffuj4_q.scala:13:69\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36mrightAngleTriangle\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m, \e[36mb\e[0m : \e[35mLong\e[0m, \e[36mc\e\
    [0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                                       Found:    Unit\n\
    \e[31m   |\e[0m                                                       Required:\
    \ Boolean\n\e[31m14 |\e[0m        \e[34m// Fill Up this function body\e[0m\n\e\
    [31m15 |\e[0m        \e[34m// `a` is the length of the side of the triangle opposite\
    \ to the right angle.\e[0m\n\e[31m16 |\e[0m        \e[34m// `b` is the length\
    \ of the side of the triangle opposite to the right angle.\e[0m\n\e[31m17 |\e\
    [0m        \e[34m// `c` is the length of the hypotenuse.\e[0m\n\e[31m18 |\e[0m\
    \        \e[34m// `a` and `b` are the lengths of the sides of the triangle.\e\
    [0m\n\e[31m19 |\e[0m        \e[34m// `c` is the length of the hypotenuse.\e[0m\n\
    \e[31m20 |\e[0m        \e[34m// `a` and `b` are the lengths of the sides of the\
    \ triangle.\e[0m\n\e[31m21 |\e[0m        \e[34m// `c` is the length of the hypotenuse.\e\
    [0m\n\e[31m22 |\e[0m        \e[34m// `a` and `b` are the lengths of the sides\
    \ of the triangle.\e[0m\n\e[31m23 |\e[0m        \e[34m// `c` is the length of\
    \ the hypotenuse.\e[0m\n\e[31m24 |\e[0m        \e[34m// `a` and `b` are the lengths\
    \ of the sides of the triangle.\e[0m\n\e[31m25 |\e[0m        \e[34m// `c` is the\
    \ length of the hypotenuse.\e[0m\n\e[31m26 |\e[0m        \e[34m// `a` and `b`\
    \ are the lengths of the sides of the triangle.\e[0m\n\e[31m27 |\e[0m        \e\
    [34m// `c` is the length of the hypotenuse.\e[0m\n\e[31m28 |\e[0m        \e[34m//\
    \ `a` and `b` are the lengths of the sides of the triangle.\e[0m\n\e[31m29 |\e\
    [0m        \e[34m// `c` is the length of the hypotenuse.\e[0m\n\e[31m30 |\e[0m\
    \        \e[34m// `a` and `b` are the lengths of the sides of the triangle.\e\
    [0m\n\e[31m31 |\e[0m        \e[34m// `c` is the length of the hypotenuse.\e[0m\n\
    \e[31m32 |\e[0m        \e[34m// `a` and `b` are the "
  stdout: ''
  timestamp: 1659793970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        if (a > b && a > c) {\n            if (a * a ==\
    \ b * b + c * c) true else false\n        } else if (b > a && b > c) {\n     \
    \       if (b * b == a * a + c * c) true else false\n        } else {\n      \
    \      if (c * c == a * a + b * b) true else false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ side lengths of the triangle\n        // `a`, `b`, `c` are all positive integers\n\
    \        // `a`, `b`, `c` are all less than or equal to 100\n        // `a`, `b`,\
    \ `c` are all integers\n        // `a`, `b`, `c` are all distinct\n        //\
    \ `a`, `b`, `c` are in ascending order\n        // `a`, `b`, `c` are not all equal\n\
    \        // `a`, `b`, `c` are not all odd\n        // `a`, `b`, `c` are not all\
    \ even\n        // `a`, `b`, `c` are not all multiples of 3\n        // `a`, `b`,\
    \ `c` are not all multiples of 5\n        // `a`, `b`, `c` are not all multiples\
    \ of 7\n        // `a`, `b`, `c` are not all multiples of 11\n        // `a`,\
    \ `b`, `c` are not all multiples of 13\n        // `a`, `b`, `c` are not all multiples\
    \ of 17\n        // `a`, `b`, `c` are not all multiples of 19\n        // `a`,\
    \ `b`, `c` are not all multiples of 23\n        // `a`, `b`, `c` are not all multiples\
    \ of 29\n        // `a`, `b`, `c` are not all multiples of 31\n        // `a`,\
    \ `b`, `c` are not all multiples of 37\n        // `a`, `b`, `c` are not all multiples\
    \ of 41\n        // `a`, `b`, `c` are not all multiples of 43\n        // `a`,\
    \ `b`, `c` are not all multiples of 47\n        // `a`, `b`, `c` are not all multiples\
    \ of 53\n        // `a`, `b`, `c` are not all multiples of 59\n        // `a`,\
    \ `b`, `c` are not all multiples of 61\n        // `a`, `b`, `c` are not all multiples\
    \ of 67\n        // `a`, `b`, `c` are\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8fbkua5_.scala:13:69\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36mrightAngleTriangle\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m, \e[36mb\e[0m : \e[35mLong\e[0m, \e[36mc\e\
    [0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                                       Found:    Unit\n\
    \e[31m   |\e[0m                                                       Required:\
    \ Boolean\n\e[31m14 |\e[0m        \e[34m// Fill Up this function body\e[0m\n\e\
    [31m15 |\e[0m        \e[34m// `a`, `b`, `c` are the side lengths of the triangle\e\
    [0m\n\e[31m16 |\e[0m        \e[34m// `a`, `b`, `c` are all positive integers\e\
    [0m\n\e[31m17 |\e[0m        \e[34m// `a`, `b`, `c` are all less than or equal\
    \ to 100\e[0m\n\e[31m18 |\e[0m        \e[34m// `a`, `b`, `c` are all integers\e\
    [0m\n\e[31m19 |\e[0m        \e[34m// `a`, `b`, `c` are all distinct\e[0m\n\e[31m20\
    \ |\e[0m        \e[34m// `a`, `b`, `c` are in ascending order\e[0m\n\e[31m21 |\e\
    [0m        \e[34m// `a`, `b`, `c` are not all equal\e[0m\n\e[31m22 |\e[0m    \
    \    \e[34m// `a`, `b`, `c` are not all odd\e[0m\n\e[31m23 |\e[0m        \e[34m//\
    \ `a`, `b`, `c` are not all even\e[0m\n\e[31m24 |\e[0m        \e[34m// `a`, `b`,\
    \ `c` are not all multiples of 3\e[0m\n\e[31m25 |\e[0m        \e[34m// `a`, `b`,\
    \ `c` are not all multiples of 5\e[0m\n\e[31m26 |\e[0m        \e[34m// `a`, `b`,\
    \ `c` are not all multiples of 7\e[0m\n\e[31m27 |\e[0m        \e[34m// `a`, `b`,\
    \ `c` are not all multiples of 11\e[0m\n\e[31m28 |\e[0m        \e[34m// `a`, `b`,\
    \ `c` are not all multiples of 13\e[0m\n\e[31m29 |\e[0m        \e[34m// `a`, `b`,\
    \ `c` are not all multiples of 17\e[0m\n\e[31m30 |\e[0m        \e[34m// `a`, `b`,\
    \ `c` are not all multiples of 19\e[0m\n\e[31m31 |\e[0m        \e[34m// `a`, `b`,\
    \ `c` are not all multiples of 23\e[0m\n\e[31m32 |\e[0m        \e[34m// `a`, `b`,\
    \ `c` are not all multiples of 29\e[0m\n\e[31m33 |\e[0m        \e[34m// `a`, `b`,\
    \ `c` are not all multiples of 31\e[0m\n\e[31m34 |\e[0m        \e[34m// `a`, `b`,\
    \ `c` are not all multiples of 37\e[0m\n\e[31m35 |\e[0"
  stdout: ''
  timestamp: 1659793971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        var l = List(a,\
    \ b, c)\n        l = l.sorted\n        if (l(0) * l(0) + l(1) * l(1) == l(2) *\
    \ l(2)) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill up this function body\n        // `a`, `b` and `c` are\
    \ the lengths of the three sides of a triangle.\n        if(a > b && a > c) {\n\
    \            if(a*a == b*b + c*c) true\n            else false\n        }\n  \
    \      else if(b > a && b > c) {\n            if(b*b == a*a + c*c) true\n    \
    \        else false\n        }\n        else {\n            if(c*c == a*a + b*b)\
    \ true\n            else false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise.\n        if (a > b && a\
    \ > c) {\n            if (a * a == b * b + c * c) true else false\n        } else\
    \ if (b > a && b > c) {\n            if (b * b == a * a + c * c) true else false\n\
    \        } else {\n            if (c * c == a * a + b * b) true else false\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of a triangle\n        // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n        val sides = Array(a,\
    \ b, c)\n        val sortedSides = sides.sorted\n        val hypotenuse = sortedSides(2)\n\
    \        val cathetus = sortedSides(1)\n        val base = sortedSides(0)\n  \
    \      return hypotenuse * hypotenuse == cathetus * cathetus + base * base\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ side lengths of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        val sides = List(a, b, c).sorted\n        val (x, y,\
    \ z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793977
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        if (a == 0 || b == 0 || c == 0) return false\n \
    \       val sides = List(a, b, c).sorted\n        val a2 = sides(0)\n        val\
    \ b2 = sides(1)\n        val c2 = sides(2)\n        if (a2 * a2 + b2 * b2 == c2\
    \ * c2) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793978
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ sides of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        val list = List(a, b, c)\n        val sortedList =\
    \ list.sorted\n        val max = sortedList(2)\n        val sum = sortedList(0)\
    \ * sortedList(0) + sortedList(1) * sortedList(1)\n        val max2 = max * max\n\
    \        sum == max2\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793979
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        // `a`^2 + `b`^2 = `c`^2\n        if (a == 0 ||\
    \ b == 0 || c == 0) return false\n        val a2 = a * a\n        val b2 = b *\
    \ b\n        val c2 = c * c\n        if (a2 + b2 == c2) return true\n        if\
    \ (a2 + c2 == b2) return true\n        if (b2 + c2 == a2) return true\n      \
    \  false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793978
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ sides of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        val sides = List(a, b, c).sorted\n        val max =\
    \ sides(2)\n        val min = sides(0)\n        val mid = sides(1)\n        max\
    \ * max == min * min + mid * mid\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793979
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` `b` `c` are the side\
    \ lengths of the triangle\n        // return true if the triangle is right angled,\
    \ false otherwise\n        val sides = List(a, b, c)\n        val maxSide = sides.max\n\
    \        val otherSides = sides.filter(x => x != maxSide)\n        val sumOfOtherSides\
    \ = otherSides.sum\n        maxSide * maxSide == sumOfOtherSides * sumOfOtherSides\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd9jkxvbo.scala:24)\n\tat Problem.main(tmpd9jkxvbo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793979
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle.\n        // `b` is the length of the side\
    \ opposite to the right angle.\n        // `c` is the length of the side opposite\
    \ to the right angle.\n        // You can use the `pow` function to compute the\
    \ square of a number.\n        // Example:\n        // >>> pow(2, 2)\n       \
    \ // (4)\n        // >>> pow(3, 2)\n        // (9)\n        // >>> pow(4, 2)\n\
    \        // (16)\n        if (a > b && a > c) {\n            if (pow(a, 2) ==\
    \ pow(b, 2) + pow(c, 2)) true else false\n        } else if (b > a && b > c) {\n\
    \            if (pow(b, 2) == pow(a, 2) + pow(c, 2)) true else false\n       \
    \ } else {\n            if (pow(c, 2) == pow(a, 2) + pow(b, 2)) true else false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793979
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        sides(0) * sides(0) +\
    \ sides(1) * sides(1) == sides(2) * sides(2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        if (a > b && a\
    \ > c) {\n            if (a * a == b * b + c * c) true else false\n        } else\
    \ if (b > a && b > c) {\n            if (b * b == a * a + c * c) true else false\n\
    \        } else {\n            if (c * c == a * a + b * b) true else false\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ sides of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        if (a > b && a > c) {\n            if (a * a == b *\
    \ b + c * c) true else false\n        } else if (b > a && b > c) {\n         \
    \   if (b * b == a * a + c * c) true else false\n        } else {\n          \
    \  if (c * c == a * a + b * b) true else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793978
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the side opposite\
    \ to the right angle\n        // `b` is the side adjacent to the right angle\n\
    \        // `c` is the hypotenuse\n        // `a`^2 + `b`^2 = `c`^2\n        //\
    \ `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 +\
    \ `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 =\
    \ `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n\
    \        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        //\
    \ `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 +\
    \ `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 =\
    \ `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n\
    \        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        //\
    \ `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 +\
    \ `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        // `a\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwxjzj37j.scala:13:69\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36mrightAngleTriangle\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m, \e[36mb\e[0m : \e[35mLong\e[0m, \e[36mc\e\
    [0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                                       Found:    Unit\n\
    \e[31m   |\e[0m                                                       Required:\
    \ Boolean\n\e[31m14 |\e[0m        \e[34m// Fill Up this function body\e[0m\n\e\
    [31m15 |\e[0m        \e[34m// `a` is the side opposite to the right angle\e[0m\n\
    \e[31m16 |\e[0m        \e[34m// `b` is the side adjacent to the right angle\e\
    [0m\n\e[31m17 |\e[0m        \e[34m// `c` is the hypotenuse\e[0m\n\e[31m18 |\e\
    [0m        \e[34m// `a`^2 + `b`^2 = `c`^2\e[0m\n\e[31m19 |\e[0m        \e[34m//\
    \ `a`^2 + `b`^2 = `c`^2\e[0m\n\e[31m20 |\e[0m        \e[34m// `a`^2 + `b`^2 =\
    \ `c`^2\e[0m\n\e[31m21 |\e[0m        \e[34m// `a`^2 + `b`^2 = `c`^2\e[0m\n\e[31m22\
    \ |\e[0m        \e[34m// `a`^2 + `b`^2 = `c`^2\e[0m\n\e[31m23 |\e[0m        \e\
    [34m// `a`^2 + `b`^2 = `c`^2\e[0m\n\e[31m24 |\e[0m        \e[34m// `a`^2 + `b`^2\
    \ = `c`^2\e[0m\n\e[31m25 |\e[0m        \e[34m// `a`^2 + `b`^2 = `c`^2\e[0m\n\e\
    [31m26 |\e[0m        \e[34m// `a`^2 + `b`^2 = `c`^2\e[0m\n\e[31m27 |\e[0m    \
    \    \e[34m// `a`^2 + `b`^2 = `c`^2\e[0m\n\e[31m28 |\e[0m        \e[34m// `a`^2\
    \ + `b`^2 = `c`^2\e[0m\n\e[31m29 |\e[0m        \e[34m// `a`^2 + `b`^2 = `c`^2\e\
    [0m\n\e[31m30 |\e[0m        \e[34m// `a`^2 + `b`^2 = `c`^2\e[0m\n\e[31m31 |\e\
    [0m        \e[34m// `a`^2 + `b`^2 = `c`^2\e[0m\n\e[31m32 |\e[0m        \e[34m//\
    \ `a`^2 + `b`^2 = `c`^2\e[0m\n\e[31m33 |\e[0m        \e[34m// `a`^2 + `b`^2 =\
    \ `c`^2\e[0m\n\e[31m34 |\e[0m        \e[34m// `a`^2 + `b`^2 = `c`^2\e[0m\n\e[31m35\
    \ |\e[0m        \e[34m// `a`^2 + `b`^2 = `c`^2\e[0m\n\e[31m36 |\e[0m        \e\
    [34m// `a`^2 + `b`^2 = `c`^2\e[0m\n\e[31m37 |\e[0m        \e[34m// `a`^2 + `b`^2\
    \ = `c`^2\e[0m\n\e[31m38 |\e[0m        \e[34m// `a`^2 + `b`^2 = `c`^2\e[0m\n\e\
    [31m39 |\e[0m        \e[34m// `a`^2 + `b`^2 = `c`^2\e[0m\n\e[31m40 |\e[0m    \
    \    \e[34m// `a`^2 + `b`^2 "
  stdout: ''
  timestamp: 1659793978
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` `b` `c` are the lengths\
    \ of the three sides of a triangle\n        // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n        val sides = List(a, b,\
    \ c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x\
    \ * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793980
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle.\n        // `b` is the length of the side\
    \ opposite to the right angle.\n        // `c` is the length of the hypotenuse.\n\
    \        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 - `c`^2 = 0\n    \
    \    val a2 = a * a\n        val b2 = b * b\n        val c2 = c * c\n        a2\
    \ + b2 - c2 == 0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu60t8xqq.scala:28)\n\tat Problem.main(tmpu60t8xqq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793978
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val l = List(a, b, c)\n        val m = l.max\n        val s = l.sum\
    \ - m\n        m * m == s * s\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp51c7zt_4.scala:20)\n\tat Problem.main(tmp51c7zt_4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793980
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ sides of the triangle\n        // return true if the triangle is right angled\n\
    \        // return false otherwise\n        var sides = List(a, b, c)\n      \
    \  sides = sides.sorted\n        if (sides(0) * sides(0) + sides(1) * sides(1)\
    \ == sides(2) * sides(2)) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ side lengths of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        val sides = List(a, b, c).sorted\n        val (a, b,\
    \ c) = (sides(0), sides(1), sides(2))\n        a * a + b * b == c * c\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpaq4_db6x.scala:18:25 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m),\
    \ sides(\e[31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \              ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpaq4_db6x.scala:18:35 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e[31m1\e\
    [0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                            \
    \       ^\e[0m\n\e[31m   |\e[0m                                   Recursive \e\
    [33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpaq4_db6x.scala:18:45 ---------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e\
    [31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                     \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \           Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpaq4_db6x.scala:17:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msides\e[0m = List(a, b,\
    \ c).sorted\n\e[31m\e[31m   |\e[0m                                        ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mBigDecimal\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaq4_db6x.scala:19:10 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        a * a + b * b == c * c\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1659793980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        val sides = List(a, b, c).sorted\n\
    \        val a = sides(0)\n        val b = sides(1)\n        val c = sides(2)\n\
    \        a * a + b * b == c * c\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmph9c2rq7j.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = sides(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmph9c2rq7j.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = sides(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmph9c2rq7j.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = sides(\e[31m2\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmph9c2rq7j.scala:16:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msides\e[0m = List(a, b,\
    \ c).sorted\n\e[31m\e[31m   |\e[0m                                        ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e\
    [0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659793964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        if (a * a + b * b == c * c) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphry1kmk5.scala:20)\n\tat Problem.main(tmphry1kmk5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793980
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ side lengths of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        val sides = List(a, b, c)\n        val max = sides.max\n\
    \        val others = sides.filter(_ != max)\n        val sum = others.map(x =>\
    \ x * x).sum\n        sum == max * max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793980
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        val sides = List(a, b, c)\n\
    \        val maxSide = sides.max\n        val otherSides = sides.filter(x => x\
    \ != maxSide)\n        val sumOfOtherSides = otherSides.sum\n        sumOfOtherSides\
    \ > maxSide\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaxjvc_jp.scala:28)\n\tat Problem.main(tmpaxjvc_jp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793980
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8z3a0mt3.scala:18)\n\tat Problem.main(tmp8z3a0mt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // `a`, `b`, `c` are positive\
    \ integers\n        // `a`, `b`, `c` are less than or equal to 100\n        //\
    \ return true if the three sides form a right-angled triangle, false otherwise\n\
    \        val sides = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1)\
    \ * sides(1) == sides(2) * sides(2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793980
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ side `a`\n        // `b` is the length of side `b`\n        // `c` is the length\
    \ of side `c`\n        // return true if the three sides form a right-angled triangle,\
    \ false otherwise\n        if (a > b && a > c) {\n            if (a * a == b *\
    \ b + c * c) true else false\n        } else if (b > a && b > c) {\n         \
    \   if (b * b == a * a + c * c) true else false\n        } else {\n          \
    \  if (c * c == a * a + b * b) true else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793980
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of the triangle\n        val sides = List(a, b, c)\n  \
    \      val maxSide = sides.max\n        val otherSides = sides.filter(_ != maxSide)\n\
    \        val sumOfOtherSides = otherSides.sum\n        maxSide * maxSide == otherSides(0)\
    \ * otherSides(0) + otherSides(1) * otherSides(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.rightAngleTriangle(tmpqw3_nr9t.scala:20)\n\tat Problem$.main(tmpqw3_nr9t.scala:26)\n\
    \tat Problem.main(tmpqw3_nr9t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle.\n        // `b` is the length of the side\
    \ opposite to the right angle.\n        // `c` is the length of the side opposite\
    \ to the right angle.\n        // You can use the `pow` function to compute the\
    \ square of a number.\n        // Example:\n        // >>> pow(2l, 2l)\n     \
    \   // (4l)\n        // >>> pow(3l, 2l)\n        // (9l)\n        // >>> pow(4l,\
    \ 2l)\n        // (16l)\n        // >>> pow(5l, 2l)\n        // (25l)\n      \
    \  // >>> pow(6l, 2l)\n        // (36l)\n        // >>> pow(7l, 2l)\n        //\
    \ (49l)\n        // >>> pow(8l, 2l)\n        // (64l)\n        // >>> pow(9l,\
    \ 2l)\n        // (81l)\n        // >>> pow(10l, 2l)\n        // (100l)\n    \
    \    // >>> pow(11l, 2l)\n        // (121l)\n        // >>> pow(12l, 2l)\n   \
    \     // (144l)\n        // >>> pow(13l, 2l)\n        // (169l)\n        // >>>\
    \ pow(14l, 2l)\n        // (196l)\n        // >>> pow(15l, 2l)\n        // (225l)\n\
    \        // >>> pow(16l, 2l)\n        // (256l)\n        // >>> pow(17l, 2l)\n\
    \        // (289l)\n        // >>> pow(18l, 2l)\n        // (324l)\n        //\
    \ >>> pow(19l, 2l)\n        // (361l)\n        // >>> pow(20l, 2l)\n        //\
    \ (400l)\n        // >>> pow(21l, 2l)\n        // (441l)\n        // >>> pow(22l,\
    \ 2l)\n        // (484l)\n        // >>> pow(23l, 2l)\n        // (529l)\n   \
    \     // >>> pow(24\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppdo3a9nj.scala:13:69\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36mrightAngleTriangle\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m, \e[36mb\e[0m : \e[35mLong\e[0m, \e[36mc\e\
    [0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                                       Found:    Unit\n\
    \e[31m   |\e[0m                                                       Required:\
    \ Boolean\n\e[31m14 |\e[0m        \e[34m// Fill Up this function body\e[0m\n\e\
    [31m15 |\e[0m        \e[34m// `a` is the length of the side opposite to the right\
    \ angle.\e[0m\n\e[31m16 |\e[0m        \e[34m// `b` is the length of the side opposite\
    \ to the right angle.\e[0m\n\e[31m17 |\e[0m        \e[34m// `c` is the length\
    \ of the side opposite to the right angle.\e[0m\n\e[31m18 |\e[0m        \e[34m//\
    \ You can use the `pow` function to compute the square of a number.\e[0m\n\e[31m19\
    \ |\e[0m        \e[34m// Example:\e[0m\n\e[31m20 |\e[0m        \e[34m// >>> pow(2l,\
    \ 2l)\e[0m\n\e[31m21 |\e[0m        \e[34m// (4l)\e[0m\n\e[31m22 |\e[0m       \
    \ \e[34m// >>> pow(3l, 2l)\e[0m\n\e[31m23 |\e[0m        \e[34m// (9l)\e[0m\n\e\
    [31m24 |\e[0m        \e[34m// >>> pow(4l, 2l)\e[0m\n\e[31m25 |\e[0m        \e\
    [34m// (16l)\e[0m\n\e[31m26 |\e[0m        \e[34m// >>> pow(5l, 2l)\e[0m\n\e[31m27\
    \ |\e[0m        \e[34m// (25l)\e[0m\n\e[31m28 |\e[0m        \e[34m// >>> pow(6l,\
    \ 2l)\e[0m\n\e[31m29 |\e[0m        \e[34m// (36l)\e[0m\n\e[31m30 |\e[0m      \
    \  \e[34m// >>> pow(7l, 2l)\e[0m\n\e[31m31 |\e[0m        \e[34m// (49l)\e[0m\n\
    \e[31m32 |\e[0m        \e[34m// >>> pow(8l, 2l)\e[0m\n\e[31m33 |\e[0m        \e\
    [34m// (64l)\e[0m\n\e[31m34 |\e[0m        \e[34m// >>> pow(9l, 2l)\e[0m\n\e[31m35\
    \ |\e[0m        \e[34m// (81l)\e[0m\n\e[31m36 |\e[0m        \e[34m// >>> pow(10l,\
    \ 2l)\e[0m\n\e[31m37 |\e[0m        \e[34m// (100l)\e[0m\n\e[31m38 |\e[0m     \
    \   \e[34m// >>> pow(11l, 2l)\e[0m\n\e[31m39 |\e[0m        \e[34m// (121l)\e[0m\n\
    \e[31m40 |\e[0m        \e[34m// >>> pow(12l, 2l)\e[0m\n\e[31m41 |\e[0m       \
    \ \e[34m// (144l)\e[0m\n\e[31m42 |\e[0m        \e[34m// >>> pow(13l, 2l)\e[0m\n\
    \e[31m43 |\e[0m        \e["
  stdout: ''
  timestamp: 1659793980
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ sides of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        val sides = List(a, b, c).sorted\n        val (x, y,\
    \ z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n    // sides form a right-angled triangle, false otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of a triangle\n        // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n        val sides = List(a, b,\
    \ c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x\
    \ * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793930
