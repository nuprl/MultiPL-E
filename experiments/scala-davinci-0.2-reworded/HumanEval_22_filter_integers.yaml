name: HumanEval_22_filter_integers
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Filter given list of any scalathon values only for integers\n    // >>>\
  \ filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n\
  \    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n\
  \    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values\
  \ : List[Any]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
  \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
  \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
  \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        // TODO\n        return List[Long]()", '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', "        // TODO: implement\
    \ this method\n        var result = List[Long]()\n        for (i <- values) {\n\
    \            if (i.isInstanceOf[Long]) {\n                result = result :+ i.asInstanceOf[Long]\n\
    \            }\n        }\n        return result", '        values.filter(x =>
    x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', "        // TODO: Implement\
    \ this\n        return List[Long]()", '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', "        var result : List[Long] = List[Long]()\n \
    \       for (value <- values) {\n            value match {\n                case\
    \ i : Int => result = result :+ i.toLong\n                case l : Long => result\
    \ = result :+ l\n                case _ =>\n            }\n        }\n       \
    \ return result", '        return values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', "        var result = List[Long]()\n        for (value\
    \ <- values) {\n            value match {\n                case x : Long => result\
    \ = result :+ x\n                case _ =>\n            }\n        }\n       \
    \ return result", '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', "     \
    \   // TODO: Implement me\n        values.filter(x => x.isInstanceOf[Long]).map(x\
    \ => x.asInstanceOf[Long])", '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', "        // TODO: Implement me\n        values.filter(x\
    \ => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])", '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', "        // TODO: Implement\
    \ this method\n        return List[Long]()", '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', "        // TODO: Implement this function\n       \
    \ return List[Long]()", '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', "        // TODO: Implement me\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])",
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  "        // TODO: Implement this function\n        // Hint: Use pattern matching\n\
    \        var result = List[Long]()\n        for (i <- values) {\n            i\
    \ match {\n                case x: Long => result = result :+ x\n            \
    \    case _ =>\n            }\n        }\n        result", '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', "        // Write your\
    \ code here\n        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])",
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  "        val integers = new ListBuffer[Long]()\n        for (value <- values) {\n\
    \            value match {\n                case x : Long => integers += x\n \
    \               case _ =>\n            }\n        }\n        integers.toList",
  "        // TODO: Implement this method\n        var result = List[Long]()\n   \
    \     for (i <- values) {\n            i match {\n                case x: Long\
    \ => result = result :+ x\n                case _ =>\n            }\n        }\n\
    \        result", '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  "        var result = List[Long]()\n        for (value <- values) {\n          \
    \  value match {\n                case i : Int => result = result :+ i.toLong\n\
    \                case l : Long => result = result :+ l\n                case _\
    \ =>\n            }\n        }\n        result", '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', "        // Write your code here\n        var result\
    \ = List[Long]()\n        for (i <- values) {\n            i match {\n       \
    \         case x: Long => result = result :+ x\n                case _ =>\n  \
    \          }\n        }\n        result", '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', "        var result = List[Long]()\n        for (value\
    \ <- values) {\n            value match {\n                case i : Int => result\
    \ = result :+ i.toLong\n                case l : Long => result = result :+ l\n\
    \                case _ =>\n            }\n        }\n        result", '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(value => value.isInstanceOf[Long]).map(value => value.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  "        // TODO: Implement this method\n        return List[Long]()", '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', "        // TODO: Implement\
    \ me\n        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])",
  "        // TODO: Implement me\n        return List[Long]()", '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', "        // TODO: Implement\
    \ me\n        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])",
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  "        // Write your code here\n        return List[Long]()", "        // Write\
    \ your code here\n        return List[Long]()", '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  "        // TODO: Implement this method\n        return List[Long]()", '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', "        // TODO: Implement\
    \ this function\n        return List[Long]()", '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  "        // TODO: Implement this method\n        return List[Long]()", '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', "        // TODO: Implement\
    \ this method\n        return List[Long]()", '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', "        // TODO: Implement this method\n        return\
    \ List[Long]()", '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  "        var result = List[Long]()\n        for (value <- values) {\n          \
    \  value match {\n                case x : Long => result = result :+ x\n    \
    \            case _ =>\n            }\n        }\n        return result", '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])']
stop_tokens:
- "\n    }\n"
