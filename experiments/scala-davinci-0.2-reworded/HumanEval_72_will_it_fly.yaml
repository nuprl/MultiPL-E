name: HumanEval_72_will_it_fly
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that returns true if the object q will fly, and false otherwise.\n\
  \    // The object q will fly if it's balanced (it is a palindromic list) and the\
  \ sum of its elements is less than or equal the maximum possible weight w.\n   \
  \ // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n\
  \    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's\
  \ unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
  \ (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum\
  \ possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
  \ (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
  \ and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    //\
  \ (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n\
  \    def willItFly(q : List[Long], w : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
  \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
  \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
  \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
  \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
  \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
  \    }\n\n}\n"
completions: ["        if (q.isEmpty) return true\n        if (q.sum > w) return false\n\
    \        if (q.head != q.last) return false\n        willItFly(q.slice(1, q.length\
    \ - 1), w)", "        if (q.isEmpty) return true\n        val sum = q.sum\n  \
    \      if (sum > w) return false\n        val q2 = q.reverse\n        for (i <-\
    \ 0 until q.length) {\n            if (q(i) != q2(i)) return false\n        }\n\
    \        return true", "        def isBalanced(q : List[Long]) : Boolean = {\n\
    \            q.reverse == q\n        }\n        def sum(q : List[Long]) : Long\
    \ = {\n            q.foldLeft(0l)((a, b) => a + b)\n        }\n        isBalanced(q)\
    \ && sum(q) <= w", "        // Write your code here\n        val sum = q.sum\n\
    \        if (sum > w) false\n        else {\n            val rev = q.reverse\n\
    \            if (q == rev) true\n            else false\n        }", "       \
    \ // Write your code here\n        return true", "        // Write your code here\n\
    \        true", "        def isBalanced(q : List[Long]) : Boolean = {\n      \
    \      if (q.size <= 1) true\n            else if (q.head == q.last) isBalanced(q.slice(1,\
    \ q.size - 1))\n            else false\n        }\n        isBalanced(q) && q.sum\
    \ <= w", "        val sum = q.sum\n        val isBalanced = q == q.reverse\n \
    \       sum <= w && isBalanced", "        // Write your code here\n        true",
  "        // Write your code here\n        true", "        // Write your code here\n\
    \        val sum = q.sum\n        val isBalanced = q.reverse == q\n        sum\
    \ <= w && isBalanced", "        // Write your code here\n        true", '        q.sum
    <= w && q == q.reverse', "        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        isBalanced && sum <= w", "        // Write your code here\n\
    \        true", "        def isBalanced(q : List[Long]) : Boolean = {\n      \
    \      if (q.length == 0) true\n            else if (q.length == 1) true\n   \
    \         else if (q.head == q.last) isBalanced(q.tail.init)\n            else\
    \ false\n        }\n        def sum(q : List[Long]) : Long = {\n            if\
    \ (q.length == 0) 0\n            else q.head + sum(q.tail)\n        }\n      \
    \  if (isBalanced(q) && sum(q) <= w) true\n        else false", "        // Write\
    \ your code here\n        true", "        // Write your code here\n        true",
  "        def isBalanced(q : List[Long]) : Boolean = {\n            if (q.length\
    \ == 0) return true\n            if (q.length == 1) return true\n            if\
    \ (q.head == q.last) return isBalanced(q.tail.init)\n            return false\n\
    \        }\n        def sum(q : List[Long]) : Long = {\n            if (q.length\
    \ == 0) return 0\n            return q.head + sum(q.tail)\n        }\n       \
    \ if (isBalanced(q) && sum(q) <= w) return true\n        return false", "    \
    \    val sum = q.sum\n        val palindrome = q.reverse == q\n        palindrome\
    \ && sum <= w", "        // Write your code here\n        true", "        val\
    \ sum = q.foldLeft(0l)((acc, x) => acc + x)\n        val isBalanced = q.reverse\
    \ == q\n        sum <= w && isBalanced", "        // Write your code here\n  \
    \      true", "        // Your code here\n        true", "        def isBalanced(q\
    \ : List[Long]) : Boolean = {\n            if (q.length == 0) true\n         \
    \   else if (q.length == 1) true\n            else if (q.head == q.last) isBalanced(q.tail.init)\n\
    \            else false\n        }\n        def sum(q : List[Long]) : Long = {\n\
    \            if (q.length == 0) 0\n            else q.head + sum(q.tail)\n   \
    \     }\n        if (isBalanced(q) && sum(q) <= w) true\n        else false",
  "        // Write your code here\n        val sum = q.sum\n        val isBalanced\
    \ = q.reverse == q\n        sum <= w && isBalanced", '        return false', " \
    \       if (q.length == 0) return true\n        if (q.length == 1) return true\n\
    \        if (q.length == 2) return q(0) == q(1)\n        if (q.length == 3) return\
    \ q(0) == q(2)\n        if (q.length == 4) return q(0) == q(3) && q(1) == q(2)\n\
    \        if (q.length == 5) return q(0) == q(4) && q(1) == q(3)\n        if (q.length\
    \ == 6) return q(0) == q(5) && q(1) == q(4) && q(2) == q(3)\n        if (q.length\
    \ == 7) return q(0) == q(6) && q(1) == q(5) && q(2) == q(4)\n        if (q.length\
    \ == 8) return q(0) == q(7) && q(1) == q(6) && q(2) == q(5) && q(3) == q(4)\n\
    \        if (q.length == 9) return q(0) == q(8) && q(1) == q(7) && q(2) == q(6)\
    \ && q(3) == q(5)\n        if (q.length == 10) return q(0) == q(9) && q(1) ==\
    \ q(8) && q(2) == q(7) && q(3) == q(6) && q(4) == q(5)\n        if (q.length ==\
    \ 11) return q(0) == q(10) && q(1) == q(9) && q(2) == q(8) && q(3) == q(7) &&\
    \ q(4) == q(6)\n        if (q.length == 12) return q(0) == q(11) && q(1) == q(10)\
    \ && q(2) == q(9) && q(3) == q(8) && q(4) == q(7) && q(5) == q(6)\n        if\
    \ (q.length == 13) return q(0) == q(", "        // Write your code here\n    \
    \    if (q.length == 0) return true\n        if (q.length == 1) return true\n\
    \        if (q.length == 2) return q(0) == q(1)\n        if (q.length % 2 == 0)\
    \ return false\n        val mid = q.length / 2\n        val left = q.slice(0,\
    \ mid)\n        val right = q.slice(mid + 1, q.length)\n        val leftSum =\
    \ left.sum\n        val rightSum = right.sum\n        if (leftSum > w) return\
    \ false\n        if (rightSum > w) return false\n        if (leftSum != rightSum)\
    \ return false\n        for (i <- 0 until mid) {\n            if (left(i) != right(mid\
    \ - i - 1)) return false\n        }\n        return true", "        // Write your\
    \ code here\n        true", "        if (q.length == 0) return true\n        if\
    \ (q.length == 1) return true\n        if (q.length == 2) return q(0) == q(1)\n\
    \        if (q.length == 3) return q(0) == q(2)\n        if (q.length == 4) return\
    \ q(0) == q(3) && q(1) == q(2)\n        if (q.length % 2 == 0) return false\n\
    \        val half = q.length / 2\n        val left = q.slice(0, half)\n      \
    \  val right = q.slice(half + 1, q.length)\n        val leftSum = left.sum\n \
    \       val rightSum = right.sum\n        if (leftSum > w) return false\n    \
    \    if (rightSum > w) return false\n        if (leftSum + rightSum > w) return\
    \ false\n        val leftReverse = left.reverse\n        val rightReverse = right.reverse\n\
    \        for (i <- 0 until half) {\n            if (left(i) != rightReverse(i))\
    \ return false\n        }\n        for (i <- 0 until half) {\n            if (leftReverse(i)\
    \ != right(i)) return false\n        }\n        return true", "        // Write\
    \ your code here\n        true", "        // Your code here\n        if(q.length\
    \ == 0) return true\n        if(q.length == 1) return true\n        if(q.length\
    \ == 2) return q(0) == q(1)\n        if(q.length == 3) return q(0) == q(2)\n \
    \       if(q.length == 4) return q(0) == q(3) && q(1) == q(2)\n        if(q.length\
    \ == 5) return q(0) == q(4) && q(1) == q(3)\n        if(q.length == 6) return\
    \ q(0) == q(5) && q(1) == q(4) && q(2) == q(3)\n        if(q.length == 7) return\
    \ q(0) == q(6) && q(1) == q(5) && q(2) == q(4)\n        if(q.length == 8) return\
    \ q(0) == q(7) && q(1) == q(6) && q(2) == q(5) && q(3) == q(4)\n        if(q.length\
    \ == 9) return q(0) == q(8) && q(1) == q(7) && q(2) == q(6) && q(3) == q(5)\n\
    \        if(q.length == 10) return q(0) == q(9) && q(1) == q(8) && q(2) == q(7)\
    \ && q(3) == q(6) && q(4) == q(5)\n        if(q.length == 11) return q(0) == q(10)\
    \ && q(1) == q(9) && q(2) == q(8) && q(3) == q(7) && q(4) == q(6)\n        if(q.length\
    \ == 12) return q(0) == q(11) && q(1) == q(10) && q(2) == q(9) && q(3) == q(8)\
    \ && q(4) == q(7) && q(5) == q(6)\n        if(q.length == 13) return q", "   \
    \     def isPalindrome(q : List[Long]) : Boolean = {\n            def isPalindromeHelper(q\
    \ : List[Long], qReverse : List[Long]) : Boolean = {\n                if (q.isEmpty)\
    \ true\n                else if (q.head != qReverse.head) false\n            \
    \    else isPalindromeHelper(q.tail, qReverse.tail)\n            }\n         \
    \   isPalindromeHelper(q, q.reverse)\n        }\n        def sum(q : List[Long])\
    \ : Long = {\n            def sumHelper(q : List[Long], sum : Long) : Long = {\n\
    \                if (q.isEmpty) sum\n                else sumHelper(q.tail, sum\
    \ + q.head)\n            }\n            sumHelper(q, 0)\n        }\n        isPalindrome(q)\
    \ && sum(q) <= w", "        if (q.length == 0) return true\n        var sum =\
    \ 0l\n        for (i <- 0 until q.length) {\n            sum += q(i)\n       \
    \ }\n        if (sum > w) return false\n        var left = 0\n        var right\
    \ = q.length - 1\n        while (left < right) {\n            if (q(left) != q(right))\
    \ return false\n            left += 1\n            right -= 1\n        }\n   \
    \     return true", "        // Write your code here\n        true", "       \
    \ val sum = q.sum\n        val isBalanced = q == q.reverse\n        sum <= w &&\
    \ isBalanced", "        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.println(...)\n        // Example:\n\
    \        // Console.println(\"Hello world!\")\n        var sum = 0l\n        var\
    \ flag = true\n        for (i <- q) {\n            sum += i\n        }\n     \
    \   if (sum > w) {\n            flag = false\n        }\n        if (q.length\
    \ == 1) {\n            flag = true\n        }\n        if (q.length == 2) {\n\
    \            if (q(0) == q(1)) {\n                flag = true\n            } else\
    \ {\n                flag = false\n            }\n        }\n        if (q.length\
    \ > 2) {\n            for (i <- 0 until q.length / 2) {\n                if (q(i)\
    \ != q(q.length - 1 - i)) {\n                    flag = false\n              \
    \  }\n            }\n        }\n        flag", "        // Write your code here\n\
    \        true", "        val s = q.sum\n        val p = q.reverse == q\n     \
    \   s <= w && p", "        val s = q.sum\n        val p = q.reverse\n        s\
    \ <= w && q == p", "        // Write your code here\n        val sum = q.sum\n\
    \        if (sum > w) return false\n        val qr = q.reverse\n        for (i\
    \ <- 0 until q.length) {\n            if (q(i) != qr(i)) return false\n      \
    \  }\n        return true", "        // Write your code here\n        true", " \
    \       def isBalanced(q : List[Long]) : Boolean = {\n            if (q.length\
    \ == 0) return true\n            if (q.length == 1) return true\n            if\
    \ (q.head == q.last) return isBalanced(q.tail.init)\n            return false\n\
    \        }\n        if (isBalanced(q) && q.sum <= w) return true\n        return\
    \ false", "        // Write your code here\n        // Return either true or false\n\
    \        var sum = 0l\n        var flag = true\n        for(i <- q) {\n      \
    \      sum += i\n        }\n        if(sum > w) {\n            flag = false\n\
    \        }\n        if(q.length == 1) {\n            flag = true\n        }\n\
    \        else {\n            for(i <- 0 until q.length/2) {\n                if(q(i)\
    \ != q(q.length - 1 - i)) {\n                    flag = false\n              \
    \  }\n            }\n        }\n        return flag", "        val sum = q.foldLeft(0l)((acc,\
    \ x) => acc + x)\n        val isBalanced = q.reverse == q\n        sum <= w &&\
    \ isBalanced", '        if (q.sum <= w && q == q.reverse) true else false', " \
    \       def sum(q : List[Long]) : Long = {\n            q match {\n          \
    \      case Nil => 0\n                case x :: xs => x + sum(xs)\n          \
    \  }\n        }\n        def isPalindrome(q : List[Long]) : Boolean = {\n    \
    \        q match {\n                case Nil => true\n                case x ::\
    \ Nil => true\n                case x :: xs => {\n                    if (x ==\
    \ xs.last) isPalindrome(xs.init)\n                    else false\n           \
    \     }\n            }\n        }\n        if (isPalindrome(q) && sum(q) <= w)\
    \ true\n        else false", "        // Write your code here\n        true",
  "        // Write your code here\n        true", "        if (q.length == 0) return\
    \ true\n        if (q.length == 1) return true\n        if (q.length == 2) return\
    \ false\n        if (q.length == 3) return false\n        if (q.length == 4) return\
    \ false\n        if (q.length == 5) return false\n        if (q.length == 6) return\
    \ false\n        if (q.length == 7) return false\n        if (q.length == 8) return\
    \ false\n        if (q.length == 9) return false\n        if (q.length == 10)\
    \ return false\n        if (q.length == 11) return false\n        if (q.length\
    \ == 12) return false\n        if (q.length == 13) return false\n        if (q.length\
    \ == 14) return false\n        if (q.length == 15) return false\n        if (q.length\
    \ == 16) return false\n        if (q.length == 17) return false\n        if (q.length\
    \ == 18) return false\n        if (q.length == 19) return false\n        if (q.length\
    \ == 20) return false\n        if (q.length == 21) return false\n        if (q.length\
    \ == 22) return false\n        if (q.length == 23) return false\n        if (q.length\
    \ == 24) return false\n        if (q.length == 25) return false\n        if (q.length\
    \ == 26) return false\n        if (q.length == 27) return false\n        if (q.length\
    \ == 28) return false\n        if (q.length == 29) return false\n        if (q.length\
    \ == 30) return false\n        if (q.length == 31) return false\n        if (q.length\
    \ == 32) return false\n        if (q.length == 33) return false\n        if (q.length\
    \ == 34) return false\n        if (q.length == 35) return false\n        if (q.length\
    \ == 36) return false\n        if (q.length == 37) return false\n        if (q.length\
    \ == 38) return false\n        if (q.length == 39) return false\n        if (q.length\
    \ == 40) return false\n        if (q.length == 41) return false\n        if (q.length\
    \ ==", "        // Your code here\n        true", "        // Write your code\
    \ here\n        true", "        // Write your code here\n        true", "    \
    \    // Write your code here\n        true", "        def isBalanced(q : List[Long])\
    \ : Boolean = {\n            if (q.length == 0) true\n            else if (q.length\
    \ == 1) true\n            else if (q.head == q.last) isBalanced(q.tail.init)\n\
    \            else false\n        }\n        def sum(q : List[Long]) : Long = {\n\
    \            if (q.length == 0) 0\n            else q.head + sum(q.tail)\n   \
    \     }\n        if (isBalanced(q) && sum(q) <= w) true\n        else false",
  "        var sum = 0l\n        for (i <- q) {\n            sum += i\n        }\n\
    \        if (sum > w) return false\n        var i = 0\n        var j = q.length\
    \ - 1\n        while (i < j) {\n            if (q(i) != q(j)) return false\n \
    \           i += 1\n            j -= 1\n        }\n        return true", "   \
    \     // Write your code here\n        true", "        // Your code here\n   \
    \     true", "        // Your code here\n        false", "        def isPalindrome(q\
    \ : List[Long]) : Boolean = {\n            if (q.length == 0) return true\n  \
    \          if (q.length == 1) return true\n            if (q.head == q.last) return\
    \ isPalindrome(q.tail.init)\n            return false\n        }\n        def\
    \ sum(q : List[Long]) : Long = {\n            if (q.length == 0) return 0\n  \
    \          return q.head + sum(q.tail)\n        }\n        if (isPalindrome(q)\
    \ && sum(q) <= w) return true\n        return false", "        // Write your code\
    \ here\n        true", "        // Write your code here\n        true", "    \
    \    // Write your code here\n        var sum = 0l\n        for (i <- q) {\n \
    \           sum += i\n        }\n        if (sum > w) {\n            return false\n\
    \        }\n        var flag = true\n        for (i <- 0 until q.length / 2) {\n\
    \            if (q(i) != q(q.length - 1 - i)) {\n                flag = false\n\
    \            }\n        }\n        return flag", "        // Your code here\n\
    \        true", "        // Write your code here\n        true", "        // Write\
    \ your code here\n        if (q.isEmpty) return true\n        if (q.size == 1)\
    \ return true\n        if (q.size == 2) return q(0) == q(1)\n        if (q.size\
    \ == 3) return q(0) == q(2)\n        if (q.size == 4) return q(0) == q(3) && q(1)\
    \ == q(2)\n        if (q.size == 5) return q(0) == q(4) && q(1) == q(3)\n    \
    \    if (q.size == 6) return q(0) == q(5) && q(1) == q(4) && q(2) == q(3)\n  \
    \      if (q.size == 7) return q(0) == q(6) && q(1) == q(5) && q(2) == q(4)\n\
    \        if (q.size == 8) return q(0) == q(7) && q(1) == q(6) && q(2) == q(5)\
    \ && q(3) == q(4)\n        if (q.size == 9) return q(0) == q(8) && q(1) == q(7)\
    \ && q(2) == q(6) && q(3) == q(5)\n        if (q.size == 10) return q(0) == q(9)\
    \ && q(1) == q(8) && q(2) == q(7) && q(3) == q(6) && q(4) == q(5)\n        if\
    \ (q.size == 11) return q(0) == q(10) && q(1) == q(9) && q(2) == q(8) && q(3)\
    \ == q(7) && q(4) == q(6)\n        if (q.size == 12) return q(0) == q(11) && q(1)\
    \ == q(10) && q(2) == q(9) && q(3) == q(8) && q(4) == q(7) && q(5) == q(6)\n \
    \       if (q.size == 13) return q", "        // Write your code here\n      \
    \  true", "        val sum = q.sum\n        val max = w\n        val isBalanced\
    \ = q == q.reverse\n        sum <= max && isBalanced", "        def isBalanced(q\
    \ : List[Long]) : Boolean = {\n            if (q.length == 0) return true\n  \
    \          if (q.length == 1) return true\n            if (q.head == q.last) return\
    \ isBalanced(q.tail.init)\n            return false\n        }\n        if (isBalanced(q)\
    \ && q.sum <= w) return true\n        return false", "        val sum = q.sum\n\
    \        val isBalanced = q == q.reverse\n        sum <= w && isBalanced", " \
    \       val sum = q.sum\n        val isBalanced = q == q.reverse\n        sum\
    \ <= w && isBalanced", "        // Write your code here\n        true", "    \
    \    val sum = q.sum\n        val isBalanced = q == q.reverse\n        sum <=\
    \ w && isBalanced", "        // Write your code here\n        true", "       \
    \ val sum = q.sum\n        val isPalindrome = q == q.reverse\n        sum <= w\
    \ && isPalindrome", "        val sum = q.foldLeft(0l)((a, b) => a + b)\n     \
    \   val palindrome = q.reverse == q\n        sum <= w && palindrome", "      \
    \  def isPalindrome(q : List[Long]) : Boolean = {\n            q == q.reverse\n\
    \        }\n        def sum(q : List[Long]) : Long = {\n            q.sum\n  \
    \      }\n        isPalindrome(q) && sum(q) <= w", "        val sum = q.sum\n\
    \        val isBalanced = q == q.reverse\n        sum <= w && isBalanced", " \
    \       val sum = q.sum\n        val isBalanced = q == q.reverse\n        sum\
    \ <= w && isBalanced", "        // Write your code here\n        true", "    \
    \    // Write your code here\n        true", "        // Write your code here\n\
    \        true", "        // Your code here\n        val sum = q.sum\n        val\
    \ isBalanced = q.reverse == q\n        sum <= w && isBalanced", "        // Your\
    \ code here\n        return false", "        val sum = q.foldLeft(0l)((a, b) =>\
    \ a + b)\n        val palindrome = q.reverse == q\n        sum <= w && palindrome",
  "        // Write your code here\n        true", "        def isPalindrome(q : List[Long])\
    \ : Boolean = {\n            if (q.length <= 1) true\n            else if (q.head\
    \ == q.last) isPalindrome(q.tail.init)\n            else false\n        }\n  \
    \      if (isPalindrome(q) && q.sum <= w) true\n        else false", "       \
    \ def isBalanced(q : List[Long]) : Boolean = {\n            if (q.length == 0)\
    \ true\n            else if (q.length == 1) true\n            else if (q.head\
    \ == q.last) isBalanced(q.tail.dropRight(1))\n            else false\n       \
    \ }\n        if (q.sum <= w) isBalanced(q)\n        else false", "        if (q.length\
    \ == 0) return true\n        if (q.length == 1) return true\n        if (q.length\
    \ == 2) return q(0) == q(1)\n        if (q.length == 3) return q(0) == q(2)\n\
    \        if (q.length % 2 == 0) return false\n        val half = q.length / 2\n\
    \        val left = q.slice(0, half)\n        val right = q.slice(half + 1, q.length)\n\
    \        val leftSum = left.sum\n        val rightSum = right.sum\n        if\
    \ (leftSum > w) return false\n        if (rightSum > w) return false\n       \
    \ if (leftSum != rightSum) return false\n        for (i <- 0 until half) {\n \
    \           if (left(i) != right(half - 1 - i)) return false\n        }\n    \
    \    return true", "        if (q.isEmpty) return true\n        val sum = q.sum\n\
    \        if (sum > w) return false\n        val q2 = q.reverse\n        if (q\
    \ == q2) return true\n        return false", "        // Your code here\n    \
    \    return true", "        // Write your code here\n        val sum = q.sum\n\
    \        val palindrome = q.reverse == q\n        sum <= w && palindrome", " \
    \       val sum = q.sum\n        val isBalanced = q == q.reverse\n        sum\
    \ <= w && isBalanced", "        val sum = q.sum\n        if (sum > w) return false\n\
    \        val q2 = q.map(x => x.toString).mkString\n        val q3 = q2.reverse\n\
    \        if (q2 == q3) return true\n        return false", "        if (q.length\
    \ == 0) return true\n        if (q.length == 1) return true\n        if (q.length\
    \ == 2) return q(0) == q(1)\n        if (q.length == 3) return q(0) == q(2)\n\
    \        if (q.length == 4) return q(0) == q(3) && q(1) == q(2)\n        if (q.length\
    \ == 5) return q(0) == q(4) && q(1) == q(3)\n        if (q.length == 6) return\
    \ q(0) == q(5) && q(1) == q(4) && q(2) == q(3)\n        if (q.length == 7) return\
    \ q(0) == q(6) && q(1) == q(5) && q(2) == q(4)\n        if (q.length == 8) return\
    \ q(0) == q(7) && q(1) == q(6) && q(2) == q(5) && q(3) == q(4)\n        if (q.length\
    \ == 9) return q(0) == q(8) && q(1) == q(7) && q(2) == q(6) && q(3) == q(5)\n\
    \        if (q.length == 10) return q(0) == q(9) && q(1) == q(8) && q(2) == q(7)\
    \ && q(3) == q(6) && q(4) == q(5)\n        if (q.length == 11) return q(0) ==\
    \ q(10) && q(1) == q(9) && q(2) == q(8) && q(3) == q(7) && q(4) == q(6)\n    \
    \    if (q.length == 12) return q(0) == q(11) && q(1) == q(10) && q(2) == q(9)\
    \ && q(3) == q(8) && q(4) == q(7) && q(5) == q(6)\n        if (q.length == 13)\
    \ return q(0) == q(", "        var sum = 0l\n        for (i <- q) {\n        \
    \    sum += i\n        }\n        if (sum > w) return false\n        var s = q.toString\n\
    \        var s2 = s.reverse\n        if (s == s2) return true\n        return\
    \ false", "        // Your code here\n        var sum = 0l\n        for (i <-\
    \ q) {\n            sum += i\n        }\n        if (sum > w) return false\n \
    \       var reverse = q.reverse\n        if (q == reverse) return true\n     \
    \   return false", "        // Write your code here\n        val sum = q.sum\n\
    \        val isBalanced = q.reverse == q\n        sum <= w && isBalanced", " \
    \       val sum = q.foldLeft(0l)((acc, x) => acc + x)\n        val palindrome\
    \ = q.reverse == q\n        palindrome && sum <= w", "        var sum = 0l\n \
    \       for (i <- q) sum += i\n        if (sum > w) return false\n        var\
    \ l = 0\n        var r = q.length - 1\n        while (l < r) {\n            if\
    \ (q(l) != q(r)) return false\n            l += 1\n            r -= 1\n      \
    \  }\n        return true", "        if (q.length == 0) return true\n        if\
    \ (q.length == 1) return true\n        if (q.length % 2 == 0) return false\n \
    \       if (q.length == 2) return false\n        if (q.length == 3) return true\n\
    \        if (q.length == 4) return false\n        var sum = 0l\n        for (i\
    \ <- 0 until q.length) sum += q(i)\n        if (sum > w) return false\n      \
    \  var l = 0\n        var r = q.length - 1\n        while (l < r) {\n        \
    \    if (q(l) != q(r)) return false\n            l += 1\n            r -= 1\n\
    \        }\n        return true", "        // Your code here\n        true", " \
    \       // Your code here\n        true", "        // Write your code here\n \
    \       true", "        // Write your code here\n        true", "        def isPalindrome(q\
    \ : List[Long]) : Boolean = {\n            q.reverse == q\n        }\n       \
    \ def sum(q : List[Long]) : Long = {\n            q.foldLeft(0l)((a, b) => a +\
    \ b)\n        }\n        isPalindrome(q) && sum(q) <= w", "        val sum = q.sum\n\
    \        if (sum > w) return false\n        val qr = q.reverse\n        for (i\
    \ <- 0 until q.length) if (q(i) != qr(i)) return false\n        true", "     \
    \   // Write your code here\n        return true", "        if (q.length == 0)\
    \ return true\n        if (q.length == 1) return true\n        if (q.length ==\
    \ 2) return q(0) == q(1)\n        if (q.length % 2 == 0) return false\n      \
    \  val half = q.length / 2\n        val left = q.slice(0, half)\n        val right\
    \ = q.slice(half + 1, q.length)\n        val leftSum = left.sum\n        val rightSum\
    \ = right.sum\n        if (leftSum > w) return false\n        if (rightSum > w)\
    \ return false\n        if (leftSum + rightSum > w) return false\n        if (leftSum\
    \ != rightSum) return false\n        for (i <- 0 until half) {\n            if\
    \ (left(i) != right(half - 1 - i)) return false\n        }\n        return true",
  "        // Write your code here\n        true", "        val sum = q.sum\n    \
    \    if (sum > w) return false\n        val q2 = q.reverse\n        if (q == q2)\
    \ return true\n        return false", "        val sum = q.sum\n        val isBalanced\
    \ = q == q.reverse\n        sum <= w && isBalanced", "        var sum = 0l\n \
    \       for (i <- q) {\n            sum += i\n        }\n        if (sum > w)\
    \ return false\n        var flag = true\n        for (i <- 0 until q.length /\
    \ 2) {\n            if (q(i) != q(q.length - 1 - i)) {\n                flag =\
    \ false\n                break\n            }\n        }\n        flag", "   \
    \     if (q.length == 0) return true\n        if (q.length == 1) return true\n\
    \        if (q.length == 2) return q(0) == q(1)\n        if (q.length == 3) return\
    \ q(0) == q(2)\n        if (q.length % 2 == 0) return false\n        val n = q.length\
    \ / 2\n        val sum = q.sum\n        if (sum > w) return false\n        for\
    \ (i <- 0 until n) {\n            if (q(i) != q(q.length - 1 - i)) return false\n\
    \        }\n        return true", '        q.sum <= w && q == q.reverse', "  \
    \      val sum = q.sum\n        val isBalanced = q == q.reverse\n        sum <=\
    \ w && isBalanced", "        def isPalindrome(q : List[Long]) : Boolean = {\n\
    \            q == q.reverse\n        }\n        def sum(q : List[Long]) : Long\
    \ = {\n            q.sum\n        }\n        isPalindrome(q) && sum(q) <= w",
  "        if (q.length == 0) return true\n        if (q.length == 1) return true\n\
    \        if (q.length == 2) return q(0) == q(1)\n        if (q.length == 3) return\
    \ q(0) == q(2)\n        if (q.length % 2 == 0) return false\n        val half\
    \ = q.length / 2\n        val left = q.slice(0, half)\n        val right = q.slice(half\
    \ + 1, q.length)\n        val leftSum = left.sum\n        val rightSum = right.sum\n\
    \        if (leftSum > w) return false\n        if (rightSum > w) return false\n\
    \        if (leftSum != rightSum) return false\n        for (i <- 0 until half)\
    \ {\n            if (left(i) != right(half - 1 - i)) return false\n        }\n\
    \        return true", "        // Your code here\n        false", "        if\
    \ (q.length == 0) return true\n        if (q.length == 1) return true\n      \
    \  if (q.length == 2) return q(0) == q(1)\n        if (q.length == 3) return q(0)\
    \ == q(2)\n        if (q.length == 4) return q(0) == q(3) && q(1) == q(2)\n  \
    \      if (q.length == 5) return q(0) == q(4) && q(1) == q(3)\n        if (q.length\
    \ == 6) return q(0) == q(5) && q(1) == q(4) && q(2) == q(3)\n        if (q.length\
    \ == 7) return q(0) == q(6) && q(1) == q(5) && q(2) == q(4)\n        if (q.length\
    \ == 8) return q(0) == q(7) && q(1) == q(6) && q(2) == q(5) && q(3) == q(4)\n\
    \        if (q.length == 9) return q(0) == q(8) && q(1) == q(7) && q(2) == q(6)\
    \ && q(3) == q(5)\n        if (q.length == 10) return q(0) == q(9) && q(1) ==\
    \ q(8) && q(2) == q(7) && q(3) == q(6) && q(4) == q(5)\n        if (q.length ==\
    \ 11) return q(0) == q(10) && q(1) == q(9) && q(2) == q(8) && q(3) == q(7) &&\
    \ q(4) == q(6)\n        if (q.length == 12) return q(0) == q(11) && q(1) == q(10)\
    \ && q(2) == q(9) && q(3) == q(8) && q(4) == q(7) && q(5) == q(6)\n        if\
    \ (q.length == 13) return q(0) == q(", "        def isPalindrome(q : List[Long])\
    \ : Boolean = {\n            def isPalindrome(q : List[Long], i : Int) : Boolean\
    \ = {\n                if (i >= q.length / 2) true\n                else if (q(i)\
    \ != q(q.length - 1 - i)) false\n                else isPalindrome(q, i + 1)\n\
    \            }\n            isPalindrome(q, 0)\n        }\n        def sum(q :\
    \ List[Long]) : Long = {\n            def sum(q : List[Long], i : Int, acc : Long)\
    \ : Long = {\n                if (i >= q.length) acc\n                else sum(q,\
    \ i + 1, acc + q(i))\n            }\n            sum(q, 0, 0)\n        }\n   \
    \     isPalindrome(q) && sum(q) <= w", "        val sum = q.sum\n        sum <=\
    \ w && q == q.reverse", "        // Write your code here\n        val sum = q.sum\n\
    \        val isBalanced = q.reverse == q\n        sum <= w && isBalanced", " \
    \       // Write your code here\n        true", "        // Write your code here\n\
    \        // Return either true or false\n        val sum = q.sum\n        val\
    \ isBalanced = q.reverse == q\n        sum <= w && isBalanced", "        val sum\
    \ = q.sum\n        if (sum > w) return false\n        val q2 = q.reverse\n   \
    \     for (i <- 0 until q.length) {\n            if (q(i) != q2(i)) return false\n\
    \        }\n        return true", "        var sum = 0l\n        for (i <- q)\
    \ sum += i\n        if (sum > w) return false\n        var q1 = q\n        var\
    \ q2 = q.reverse\n        while (q1.length > 0) {\n            if (q1.head !=\
    \ q2.head) return false\n            q1 = q1.tail\n            q2 = q2.tail\n\
    \        }\n        return true", "        // Write your code here\n        //\
    \ Return either true or false\n        true", "        val sum = q.sum\n     \
    \   val isBalanced = q == q.reverse\n        sum <= w && isBalanced", "      \
    \  if (q.size == 0) return true\n        if (q.size == 1) return true\n      \
    \  if (q.size == 2) return false\n        if (q.size == 3) return q(0) + q(1)\
    \ + q(2) <= w\n        if (q.size == 4) return q(0) + q(1) + q(2) + q(3) <= w\n\
    \        if (q.size == 5) return q(0) + q(1) + q(2) + q(3) + q(4) <= w\n     \
    \   if (q.size == 6) return q(0) + q(1) + q(2) + q(3) + q(4) + q(5) <= w\n   \
    \     if (q.size == 7) return q(0) + q(1) + q(2) + q(3) + q(4) + q(5) + q(6) <=\
    \ w\n        if (q.size == 8) return q(0) + q(1) + q(2) + q(3) + q(4) + q(5) +\
    \ q(6) + q(7) <= w\n        if (q.size == 9) return q(0) + q(1) + q(2) + q(3)\
    \ + q(4) + q(5) + q(6) + q(7) + q(8) <= w\n        if (q.size == 10) return q(0)\
    \ + q(1) + q(2) + q(3) + q(4) + q(5) + q(6) + q(7) + q(8) + q(9) <= w\n      \
    \  if (q.size == 11) return q(0) + q(1) + q(2) + q(3) + q(4) + q(5) + q(6) + q(7)\
    \ + q(8) + q(9) + q(10) <= w\n        if (q.size == 12) return q(0) + q(1) + q(2)\
    \ + q(3) + q(4) + q(5) + q(6) + q(7) + q(", "        if (q.length == 0) return\
    \ true\n        if (q.length == 1) return true\n        if (q.length == 2) return\
    \ q(0) == q(1)\n        if (q.length == 3) return q(0) == q(2)\n        if (q.length\
    \ == 4) return q(0) == q(3) && q(1) == q(2)\n        if (q.length == 5) return\
    \ q(0) == q(4) && q(1) == q(3)\n        if (q.length == 6) return q(0) == q(5)\
    \ && q(1) == q(4) && q(2) == q(3)\n        if (q.length == 7) return q(0) == q(6)\
    \ && q(1) == q(5) && q(2) == q(4)\n        if (q.length == 8) return q(0) == q(7)\
    \ && q(1) == q(6) && q(2) == q(5) && q(3) == q(4)\n        if (q.length == 9)\
    \ return q(0) == q(8) && q(1) == q(7) && q(2) == q(6) && q(3) == q(5)\n      \
    \  if (q.length == 10) return q(0) == q(9) && q(1) == q(8) && q(2) == q(7) &&\
    \ q(3) == q(6) && q(4) == q(5)\n        if (q.length == 11) return q(0) == q(10)\
    \ && q(1) == q(9) && q(2) == q(8) && q(3) == q(7) && q(4) == q(6)\n        if\
    \ (q.length == 12) return q(0) == q(11) && q(1) == q(10) && q(2) == q(9) && q(3)\
    \ == q(8) && q(4) == q(7) && q(5) == q(6)\n        if (q.length == 13) return\
    \ q(0) == q(", "        val sum = q.sum\n        val isBalanced = q == q.reverse\n\
    \        sum <= w && isBalanced", "        // Write your code here\n        true",
  "        def isPalindrome(q : List[Long]) : Boolean = {\n            if (q.length\
    \ == 0) true\n            else if (q.length == 1) true\n            else if (q.head\
    \ == q.last) isPalindrome(q.tail.init)\n            else false\n        }\n  \
    \      def sum(q : List[Long]) : Long = {\n            if (q.length == 0) 0\n\
    \            else q.head + sum(q.tail)\n        }\n        if (isPalindrome(q)\
    \ && sum(q) <= w) true\n        else false", "        if (q.length == 0) return\
    \ true\n        if (q.length == 1) return true\n        if (q.length == 2) return\
    \ q(0) == q(1)\n        if (q.length == 3) return q(0) == q(2)\n        val sum\
    \ = q.sum\n        if (sum > w) return false\n        val mid = q.length / 2\n\
    \        val q1 = q.slice(0, mid)\n        val q2 = q.slice(mid, q.length)\n \
    \       val q2r = q2.reverse\n        if (q1 == q2r) return true\n        return\
    \ false", "        // Write your code here\n        true", "        var sum =\
    \ 0l\n        for (i <- q) {\n            sum += i\n        }\n        if (sum\
    \ > w) {\n            return false\n        }\n        var flag = true\n     \
    \   for (i <- 0 until q.length / 2) {\n            if (q(i) != q(q.length - 1\
    \ - i)) {\n                flag = false\n            }\n        }\n        flag",
  "        // Write your code here\n        true", "        def isBalanced(q : List[Long])\
    \ : Boolean = {\n            if (q.length == 0) return true\n            if (q.length\
    \ == 1) return true\n            if (q.head == q.last) return isBalanced(q.slice(1,\
    \ q.length - 1))\n            return false\n        }\n        def sum(q : List[Long])\
    \ : Long = {\n            if (q.length == 0) return 0\n            return q.head\
    \ + sum(q.tail)\n        }\n        if (isBalanced(q) && sum(q) <= w) return true\n\
    \        return false", "        // Your code here\n        true", "        //\
    \ Write your code here\n        false", "        // Write your code here\n   \
    \     true", "        if (q.isEmpty) return true\n        if (q.size == 1) return\
    \ true\n        if (q.size == 2) return q(0) == q(1)\n        val sum = q.sum\n\
    \        if (sum > w) return false\n        val half = q.size / 2\n        val\
    \ left = q.slice(0, half)\n        val right = q.slice(half, q.size)\n       \
    \ if (left.size > right.size) right.reverse.zip(left).forall(x => x._1 == x._2)\n\
    \        else left.reverse.zip(right).forall(x => x._1 == x._2)", '        q.sum
    <= w && q == q.reverse', "        // Your code here\n        true", "        //\
    \ Write your code here\n        true", "        // Write your code here\n    \
    \    // Return either true or false\n        true", "        // Write your code\
    \ here\n        true", "        if (q.size == 0) return true\n        if (q.size\
    \ == 1) return true\n        if (q.size == 2) return (q(0) == q(1))\n        if\
    \ (q.size == 3) return (q(0) == q(2))\n        if (q.size == 4) return (q(0) ==\
    \ q(3) && q(1) == q(2))\n        if (q.size == 5) return (q(0) == q(4) && q(1)\
    \ == q(3))\n        if (q.size == 6) return (q(0) == q(5) && q(1) == q(4) && q(2)\
    \ == q(3))\n        if (q.size == 7) return (q(0) == q(6) && q(1) == q(5) && q(2)\
    \ == q(4))\n        if (q.size == 8) return (q(0) == q(7) && q(1) == q(6) && q(2)\
    \ == q(5) && q(3) == q(4))\n        if (q.size == 9) return (q(0) == q(8) && q(1)\
    \ == q(7) && q(2) == q(6) && q(3) == q(5))\n        if (q.size == 10) return (q(0)\
    \ == q(9) && q(1) == q(8) && q(2) == q(7) && q(3) == q(6) && q(4) == q(5))\n \
    \       if (q.size == 11) return (q(0) == q(10) && q(1) == q(9) && q(2) == q(8)\
    \ && q(3) == q(7) && q(4) == q(6))\n        if (q.size == 12) return (q(0) ==\
    \ q(11) && q(1) == q(10) && q(2) == q(9) && q(3) == q(8) && q(4) == q(7) && q(5)\
    \ == q(6))\n        if (q.size", "        def isBalanced(q : List[Long]) : Boolean\
    \ = {\n            if (q.length == 0) true\n            else if (q.length == 1)\
    \ true\n            else if (q.head == q.last) isBalanced(q.tail.init)\n     \
    \       else false\n        }\n        def sum(q : List[Long]) : Long = {\n  \
    \          if (q.length == 0) 0\n            else q.head + sum(q.tail)\n     \
    \   }\n        if (isBalanced(q) && sum(q) <= w) true\n        else false", " \
    \       if (q.length == 0) return true\n        if (q.length == 1) return true\n\
    \        if (q.length == 2) return q(0) == q(1)\n        if (q.length % 2 == 0)\
    \ return false\n        if (q.sum > w) return false\n        val n = q.length\n\
    \        val m = n / 2\n        for (i <- 0 until m) {\n            if (q(i) !=\
    \ q(n - i - 1)) return false\n        }\n        return true", "        // Your\
    \ code here\n        true", "        // Write your code here\n        true", '        if
    (q.sum <= w && q == q.reverse) true else false', "        def isPalindrome(q :\
    \ List[Long]) : Boolean = q == q.reverse\n        def sum(q : List[Long]) : Long\
    \ = q.foldLeft(0l)(_ + _)\n        isPalindrome(q) && sum(q) <= w", "        //\
    \ Your code here\n        true", "        def isBalanced(q : List[Long]) : Boolean\
    \ = {\n            if (q.length == 0) true\n            else if (q.length == 1)\
    \ true\n            else if (q.head == q.last) isBalanced(q.tail.init)\n     \
    \       else false\n        }\n        if (q.sum <= w) isBalanced(q)\n       \
    \ else false", "        // Write your code here\n        true", "        // Your\
    \ code here\n        true", "        val sum = q.sum\n        val isBalanced =\
    \ q == q.reverse\n        sum <= w && isBalanced", "        // Write your code\
    \ here\n        true", "        def isBalanced(q : List[Long]) : Boolean = {\n\
    \            if (q.length == 0) true\n            else if (q.length == 1) true\n\
    \            else if (q.head == q.last) isBalanced(q.tail.init)\n            else\
    \ false\n        }\n        def sum(q : List[Long]) : Long = {\n            if\
    \ (q.length == 0) 0\n            else q.head + sum(q.tail)\n        }\n      \
    \  if (isBalanced(q) && sum(q) <= w) true\n        else false", "        if (q.length\
    \ == 0) return true\n        if (q.length == 1) return true\n        if (q.length\
    \ == 2) return q(0) == q(1)\n        if (q.length % 2 == 0) return false\n   \
    \     val mid = q.length / 2\n        var sum = 0l\n        for (i <- 0 until\
    \ q.length) {\n            if (i != mid) sum += q(i)\n        }\n        if (sum\
    \ > w) return false\n        for (i <- 0 until mid) {\n            if (q(i) !=\
    \ q(q.length - 1 - i)) return false\n        }\n        return true", "      \
    \  val sum = q.sum\n        if (sum > w) return false\n        val rev = q.reverse\n\
    \        for (i <- 0 until q.length) {\n            if (q(i) != rev(i)) return\
    \ false\n        }\n        return true", "        if (q.length == 0) return true\n\
    \        if (q.length == 1) return q(0) <= w\n        if (q.length == 2) return\
    \ q(0) + q(1) <= w\n        if (q.length % 2 == 0) return false\n        val mid\
    \ = q.length / 2\n        val left = q.slice(0, mid)\n        val right = q.slice(mid\
    \ + 1, q.length)\n        if (left.sum + right.sum + q(mid) > w) return false\n\
    \        for (i <- 0 until mid) {\n            if (left(i) != right(mid - i -\
    \ 1)) return false\n        }\n        return true", "        val sum = q.foldLeft(0l)((a,\
    \ b) => a + b)\n        val isBalanced = q.reverse == q\n        sum <= w && isBalanced",
  '        if (q.sum <= w && q == q.reverse) true else false', "        val sum =\
    \ q.foldLeft(0l)((acc, x) => acc + x)\n        val palindrome = q.reverse == q\n\
    \        sum <= w && palindrome", "        val sum = q.sum\n        val isBalanced\
    \ = q == q.reverse\n        sum <= w && isBalanced", "        // Write your code\
    \ here\n        if (q.length == 0) return true\n        if (q.length == 1) return\
    \ q(0) <= w\n        if (q.length == 2) return q(0) + q(1) <= w\n        var sum\
    \ = 0l\n        for (i <- 0 until q.length) {\n            sum += q(i)\n     \
    \   }\n        if (sum > w) return false\n        var left = 0\n        var right\
    \ = q.length - 1\n        while (left < right) {\n            if (q(left) != q(right))\
    \ return false\n            left += 1\n            right -= 1\n        }\n   \
    \     return true", "        // Write your code here\n        return true", " \
    \       // Write your code here\n        true", "        def isBalanced(q : List[Long])\
    \ : Boolean = {\n            if (q.length == 0) return true\n            if (q.length\
    \ == 1) return true\n            if (q.head == q.last) return isBalanced(q.tail.init)\n\
    \            return false\n        }\n        if (isBalanced(q) && q.sum <= w)\
    \ return true\n        return false", "        // Your code here\n        true",
  "        def isBalanced(q : List[Long]) : Boolean = {\n            if (q.length\
    \ == 0) true\n            else if (q.length == 1) true\n            else if (q.head\
    \ == q.last) isBalanced(q.tail.init)\n            else false\n        }\n    \
    \    def sum(q : List[Long]) : Long = {\n            if (q.length == 0) 0\n  \
    \          else q.head + sum(q.tail)\n        }\n        if (isBalanced(q) &&\
    \ sum(q) <= w) true\n        else false", "        // Write your code here\n \
    \       true", "        val sum = q.sum\n        val isBalanced = q == q.reverse\n\
    \        sum <= w && isBalanced", "        // Write your code here\n        true",
  "        if (q.length == 0) return true\n        if (q.length == 1) return true\n\
    \        if (q.length == 2) return q(0) == q(1)\n        if (q.length % 2 == 0)\
    \ return false\n        if (q.length == 3) return q(0) == q(2)\n        val half\
    \ = q.length / 2\n        val left = q.slice(0, half)\n        val right = q.slice(half\
    \ + 1, q.length)\n        val leftSum = left.sum\n        val rightSum = right.sum\n\
    \        if (leftSum != rightSum) return false\n        if (leftSum > w) return\
    \ false\n        return true", "        val sum = q.sum\n        if (sum > w)\
    \ return false\n        val rev = q.reverse\n        if (q == rev) return true\n\
    \        return false", "        // Write your code here\n        true", "   \
    \     val sum = q.sum\n        if (sum > w) return false\n        val q2 = q.reverse\n\
    \        q == q2", "        // Write your code here\n        var sum = 0l\n  \
    \      for (i <- q) {\n            sum += i\n        }\n        if (sum > w) {\n\
    \            return false\n        }\n        var flag = true\n        for (i\
    \ <- 0 until q.length / 2) {\n            if (q(i) != q(q.length - 1 - i)) {\n\
    \                flag = false\n            }\n        }\n        return flag",
  "        // Write your code here\n        true", "        // Write your code here\n\
    \        true", "        // Write your code here\n        false", "        if\
    \ (q.length == 0) return true\n        if (q.length == 1) return q(0) <= w\n \
    \       if (q.length == 2) return q(0) + q(1) <= w\n        if (q.length % 2 ==\
    \ 0) return false\n        val mid = q.length / 2\n        var sum = 0l\n    \
    \    for (i <- 0 until mid) {\n            sum += q(i)\n            if (sum >\
    \ w) return false\n        }\n        for (i <- mid + 1 until q.length) {\n  \
    \          sum += q(i)\n            if (sum > w) return false\n        }\n   \
    \     return true", "        val sum = q.sum\n        val max = w\n        val\
    \ palindrome = q.reverse == q\n        sum <= max && palindrome", "        //\
    \ Write your code here\n        true", "        // Write your code here\n    \
    \    true", "        val sum = q.sum\n        if (sum > w) false\n        else\
    \ {\n            val q2 = q.reverse\n            for (i <- 0 until q.length) {\n\
    \                if (q(i) != q2(i)) return false\n            }\n            true\n\
    \        }", "        val sum = q.sum\n        val palindrome = q.reverse == q\n\
    \        sum <= w && palindrome", "        // Write your code here\n        if\
    \ (q.length == 0) return true\n        if (q.length == 1) return true\n      \
    \  if (q.length == 2) return q(0) == q(1)\n        var sum = 0l\n        for (i\
    \ <- 0 until q.length) {\n            sum += q(i)\n        }\n        if (sum\
    \ > w) return false\n        var left = 0\n        var right = q.length - 1\n\
    \        while (left < right) {\n            if (q(left) != q(right)) return false\n\
    \            left += 1\n            right -= 1\n        }\n        return true",
  "        // Write your code here\n        // Return either true or false\n     \
    \   var sum = 0l\n        for (i <- q) {\n            sum += i\n        }\n  \
    \      if (sum <= w) {\n            var flag = true\n            for (i <- 0 until\
    \ q.length / 2) {\n                if (q(i) != q(q.length - 1 - i)) {\n      \
    \              flag = false\n                }\n            }\n            flag\n\
    \        } else {\n            false\n        }", "        // Write your code\
    \ here\n        true", "        val sum = q.sum\n        val isBalanced = q ==\
    \ q.reverse\n        sum <= w && isBalanced", "        // Write your code here\n\
    \        true", "        val sum = q.sum\n        val isBalanced = q == q.reverse\n\
    \        sum <= w && isBalanced", "        // Write your code here\n        //\
    \ Return either true or false\n        true"]
stop_tokens:
- "\n    }\n"
