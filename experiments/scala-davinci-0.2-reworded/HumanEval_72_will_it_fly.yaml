name: HumanEval_72_will_it_fly
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that returns true if the object q will fly, and false otherwise.\n\
  \    // The object q will fly if it's balanced (it is a palindromic list) and the\
  \ sum of its elements is less than or equal the maximum possible weight w.\n   \
  \ // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n\
  \    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's\
  \ unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
  \ (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum\
  \ possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
  \ (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
  \ and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    //\
  \ (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n\
  \    def willItFly(q : List[Long], w : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
  \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
  \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
  \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
  \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
  \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
  \    }\n\n}\n"
completions: ["        if (q.isEmpty) return true\n        if (q.sum > w) return false\n\
    \        if (q.head != q.last) return false\n        willItFly(q.slice(1, q.length\
    \ - 1), w)", "        if (q.isEmpty) return true\n        val sum = q.sum\n  \
    \      if (sum > w) return false\n        val q2 = q.reverse\n        for (i <-\
    \ 0 until q.length) {\n            if (q(i) != q2(i)) return false\n        }\n\
    \        return true", "        def isBalanced(q : List[Long]) : Boolean = {\n\
    \            q.reverse == q\n        }\n        def sum(q : List[Long]) : Long\
    \ = {\n            q.foldLeft(0l)((a, b) => a + b)\n        }\n        isBalanced(q)\
    \ && sum(q) <= w", "        // Write your code here\n        val sum = q.sum\n\
    \        if (sum > w) false\n        else {\n            val rev = q.reverse\n\
    \            if (q == rev) true\n            else false\n        }", "       \
    \ // Write your code here\n        return true", "        // Write your code here\n\
    \        true", "        def isBalanced(q : List[Long]) : Boolean = {\n      \
    \      if (q.size <= 1) true\n            else if (q.head == q.last) isBalanced(q.slice(1,\
    \ q.size - 1))\n            else false\n        }\n        isBalanced(q) && q.sum\
    \ <= w", "        val sum = q.sum\n        val isBalanced = q == q.reverse\n \
    \       sum <= w && isBalanced", "        // Write your code here\n        true",
  "        // Write your code here\n        true", "        // Write your code here\n\
    \        val sum = q.sum\n        val isBalanced = q.reverse == q\n        sum\
    \ <= w && isBalanced", "        // Write your code here\n        true", '        q.sum
    <= w && q == q.reverse', "        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        isBalanced && sum <= w", "        // Write your code here\n\
    \        true", "        def isBalanced(q : List[Long]) : Boolean = {\n      \
    \      if (q.length == 0) true\n            else if (q.length == 1) true\n   \
    \         else if (q.head == q.last) isBalanced(q.tail.init)\n            else\
    \ false\n        }\n        def sum(q : List[Long]) : Long = {\n            if\
    \ (q.length == 0) 0\n            else q.head + sum(q.tail)\n        }\n      \
    \  if (isBalanced(q) && sum(q) <= w) true\n        else false", "        // Write\
    \ your code here\n        true", "        // Write your code here\n        true",
  "        def isBalanced(q : List[Long]) : Boolean = {\n            if (q.length\
    \ == 0) return true\n            if (q.length == 1) return true\n            if\
    \ (q.head == q.last) return isBalanced(q.tail.init)\n            return false\n\
    \        }\n        def sum(q : List[Long]) : Long = {\n            if (q.length\
    \ == 0) return 0\n            return q.head + sum(q.tail)\n        }\n       \
    \ if (isBalanced(q) && sum(q) <= w) return true\n        return false", "    \
    \    val sum = q.sum\n        val palindrome = q.reverse == q\n        palindrome\
    \ && sum <= w"]
stop_tokens:
- "\n    }\n"
