name: HumanEval_140_fix_spaces
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string text, replace all spaces in it with underscores, \n    //\
  \ and if a string has more than 2 consecutive spaces, \n    // then replace all\
  \ consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\"\
  )\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\"\
  \ Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n\
  \    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fixSpaces((\"Example\"\
  )).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
  Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
  Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
  Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
  )));\n    }\n\n}\n"
completions: ["        var result = text.replaceAll(\" \", \"_\")\n        result\
    \ = result.replaceAll(\"_+\", \"-\")\n        result", "        var result = \"\
    \"\n        var count = 0\n        for (c <- text) {\n            if (c == ' ')\
    \ {\n                count += 1\n                if (count == 1) result += \"\
    _\"\n                else if (count == 2) result += \"_\"\n                else\
    \ if (count > 2) result += \"-\"\n            } else {\n                count\
    \ = 0\n                result += c\n            }\n        }\n        result",
  "        var result = \"\"\n        var isSpace = false\n        var count = 0\n\
    \        for (c <- text) {\n            if (c == ' ') {\n                if (isSpace)\
    \ {\n                    count += 1\n                    if (count == 2) {\n \
    \                       result += '-'\n                        count = 0\n   \
    \                 }\n                } else {\n                    isSpace = true\n\
    \                    result += '_'\n                }\n            } else {\n\
    \                isSpace = false\n                count = 0\n                result\
    \ += c\n            }\n        }\n        result", "        var result = text.trim.replaceAll(\"\
    \ \", \"_\")\n        result = result.replaceAll(\"_+\", \"-\")\n        return\
    \ result", "        var result = \"\"\n        var count = 0\n        for (i <-\
    \ 0 until text.length) {\n            if (text(i) == ' ') {\n                count\
    \ += 1\n                if (count == 1) result += \"_\"\n                else\
    \ if (count == 2) result += \"_\"\n                else if (count > 2) result\
    \ += \"-\"\n            }\n            else {\n                result += text(i)\n\
    \                count = 0\n            }\n        }\n        result", "     \
    \   var result = \"\"\n        var count = 0\n        for (i <- 0 until text.length)\
    \ {\n            if (text(i) == ' ') {\n                count += 1\n         \
    \       if (count == 1) result += '_'\n                else if (count == 2) result\
    \ += '_'\n                else if (count > 2) result += '-'\n            }\n \
    \           else {\n                count = 0\n                result += text(i)\n\
    \            }\n        }\n        result", "        var result = text.replaceAll(\"\
    \ \", \"_\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result",
  "        var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", '        text.replaceAll("\\s+", "-")', "     \
    \   var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", "        var result = text\n        result = result.replaceAll(\"\
    \ \", \"_\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result",
  "        var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", "        var result = text.replaceAll(\" \", \"\
    _\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result", "  \
    \      var result = text.replaceAll(\" \", \"_\")\n        result = result.replaceAll(\"\
    _+\", \"-\")\n        result", "        var result = text.replace(\" \", \"_\"\
    )\n        result = result.replace(\"__\", \"_\")\n        result = result.replace(\"\
    ___\", \"-\")\n        return result", "        val sb = new StringBuilder\n \
    \       var prev = ' '\n        for (c <- text) {\n            if (c == ' ') {\n\
    \                if (prev == ' ') {\n                    sb.append('-')\n    \
    \            } else {\n                    sb.append('_')\n                }\n\
    \            } else {\n                sb.append(c)\n            }\n         \
    \   prev = c\n        }\n        sb.toString", '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', "        var result = text.replaceAll(\"\\\\s\", \"\
    _\")\n        result = result.replaceAll(\"_+\", \"-\")\n        result", '        text.replaceAll("\\s+",
    "-").replaceAll(" ", "_")', "        val sb = new StringBuilder\n        var prev\
    \ = ' '\n        for (c <- text) {\n            if (c == ' ') {\n            \
    \    if (prev == ' ') {\n                    sb.append('-')\n                }\
    \ else {\n                    sb.append('_')\n                }\n            }\
    \ else {\n                sb.append(c)\n            }\n            prev = c\n\
    \        }\n        sb.toString"]
stop_tokens:
- "\n    }\n"
