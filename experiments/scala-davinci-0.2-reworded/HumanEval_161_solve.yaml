name: HumanEval_161_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a string s.\n    // if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    //\
  \ If the string contains no letters, reverse the string.\n    // The function should\
  \ return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"))\n \
  \   // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>> solve((\"\
  #a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
  aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
  ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n \
  \   assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
  #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n\
  \    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
completions: ["        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toUpper ^ c.toLower else\
    \ c)", "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        if (s.exists(c => c.isLetter)) {\n            s.map(c => if (c.isLetter)\
    \ c.toUpper ^ c.toLower else c).reverse\n        } else {\n            s.reverse\n\
    \        }", "        if (s.forall(c => !c.isLetter)) s.reverse\n        else\
    \ s.map(c => if (c.isLetter) c.toUpper ^ c.toLower else c)", "        val letters\
    \ = s.filter(_.isLetter)\n        if (letters.isEmpty) s.reverse\n        else\
    \ s.map(c => if (c.isLetter) c.toUpper ^ c.toLower else c)", "        if (s.forall(!_.isLetter))\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else\
    \ c)", "        var result = \"\"\n        for (i <- 0 until s.length) {\n   \
    \         if (s(i).isLetter) {\n                if (s(i).isUpper) result += s(i).toLower\n\
    \                else result += s(i).toUpper\n            }\n            else\
    \ result += s(i)\n        }\n        if (result.length == s.length) result\n \
    \       else s.reverse", "        val letters = s.filter(c => c.isLetter)\n  \
    \      if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        if (s.length == 0) return s\n\
    \        var result = \"\"\n        for (i <- 0 until s.length) {\n          \
    \  if (s(i).isLetter) {\n                if (s(i).isUpper) result += s(i).toLower\n\
    \                else result += s(i).toUpper\n            }\n            else\
    \ result += s(i)\n        }\n        result", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else letters.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper).mkString", "        val letters\
    \ = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n      \
    \  else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString", " \
    \       val sb = new StringBuilder\n        var flag = true\n        for (c <-\
    \ s) {\n            if (c.isLetter) {\n                if (flag) {\n         \
    \           sb.append(c.toUpper)\n                    flag = false\n         \
    \       } else {\n                    sb.append(c.toLower)\n                 \
    \   flag = true\n                }\n            } else {\n                sb.append(c)\n\
    \            }\n        }\n        if (flag) sb.reverse.toString else sb.toString",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        val sb = new StringBuilder\n        var hasLetter = false\n        for\
    \ (c <- s) {\n            if (c.isLetter) {\n                sb.append(c.toUpper)\n\
    \                hasLetter = true\n            } else {\n                sb.append(c)\n\
    \            }\n        }\n        if (hasLetter) sb.toString\n        else sb.reverse.toString",
  "        var result = \"\"\n        for (c <- s) {\n            if (c.isLetter)\
    \ {\n                if (c.isUpper) result += c.toLower\n                else\
    \ result += c.toUpper\n            }\n            else result += c\n        }\n\
    \        if (result.isEmpty) s.reverse\n        else result", "        val letters\
    \ = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n      \
    \  else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString", " \
    \       // Write your code here\n        var result = \"\"\n        for (c <-\
    \ s) {\n            if (c.isLetter) {\n                if (c.isUpper) {\n    \
    \                result += c.toLower\n                } else {\n             \
    \       result += c.toUpper\n                }\n            } else {\n       \
    \         result += c\n            }\n        }\n        if (result.isEmpty) {\n\
    \            s.reverse\n        } else {\n            result\n        }", "  \
    \      val letters = s.filter(c => c.isLetter)\n        if (letters.length ==\
    \ 0) s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        // Write your code here\n        var result = \"\"\n        var flag =\
    \ false\n        for (i <- 0 until s.length) {\n            if (s(i).isLetter)\
    \ {\n                flag = true\n                if (s(i).isUpper) {\n      \
    \              result += s(i).toLower\n                } else {\n            \
    \        result += s(i).toUpper\n                }\n            } else {\n   \
    \             result += s(i)\n            }\n        }\n        if (flag) {\n\
    \            result\n        } else {\n            result.reverse\n        }",
  "        // Write your code here\n        return \"\"", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else letters.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper).mkString", "        // Write your\
    \ code here\n        return \"\"", "        // Write your code here\n        var\
    \ res = \"\"\n        for (i <- 0 until s.length) {\n            if (s(i).isLetter)\
    \ {\n                res += s(i).toUpper\n            } else {\n             \
    \   res += s(i)\n            }\n        }\n        if (res.length == s.length)\
    \ {\n            res = res.reverse\n        }\n        return res", "        val\
    \ letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.length ==\
    \ 0) s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else s.map(c => if (c.isLetter) c.toUpper.toLower else c)", "       \
    \ var result = \"\"\n        for (i <- 0 until s.length) {\n            if (s(i).isLetter)\
    \ {\n                if (s(i).isUpper) result += s(i).toLower\n              \
    \  else result += s(i).toUpper\n            }\n            else result += s(i)\n\
    \        }\n        if (result.length == s.length) result\n        else s.reverse",
  "        var result = \"\"\n        for (i <- 0 until s.length) {\n            if\
    \ (s(i).isLetter) {\n                if (s(i).isUpper) result += s(i).toLower\n\
    \                else result += s(i).toUpper\n            }\n            else\
    \ result += s(i)\n        }\n        if (result.length == s.length) result\n \
    \       else result.reverse", "        // Write your code here\n        var result\
    \ = \"\"\n        for (c <- s) {\n            if (c.isLetter) {\n            \
    \    result += c.toUpper\n            } else {\n                result += c\n\
    \            }\n        }\n        result", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else letters.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper).mkString", "        val letters\
    \ = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n      \
    \  else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString", " \
    \       if (s.isEmpty) return s\n        val sb = new StringBuilder\n        for\
    \ (c <- s) {\n            if (c.isLetter) {\n                if (c.isUpper) sb.append(c.toLower)\n\
    \                else sb.append(c.toUpper)\n            } else sb.append(c)\n\
    \        }\n        sb.toString", "        val letters = s.filter(_.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        var result = \"\"\n        for\
    \ (c <- s) {\n            if (c.isLetter) {\n                if (c.isUpper) result\
    \ += c.toLower\n                else result += c.toUpper\n            }\n    \
    \        else result += c\n        }\n        if (result.length == s.length) result.reverse\n\
    \        else result", "        // Write your code here\n        val letters =\
    \ s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else\
    \ letters.map(c => if (c.isUpper) c.toLower else c.toUpper)", "        val letters\
    \ = s.filter(x => x.isLetter)\n        if (letters.isEmpty) s.reverse\n      \
    \  else letters.map(x => if (x.isUpper) x.toLower else x.toUpper).mkString", " \
    \       // Write your code here\n        return \"\";", "        val letters =\
    \ s.filter(c => c.isLetter)\n        if (letters.isEmpty) {\n            s.reverse\n\
    \        } else {\n            s.map(c => if (c.isLetter) c.toUpper ^ c.toLower\
    \ else c)\n        }", "        if (s.forall(!_.isLetter)) s.reverse\n       \
    \ else s.map(c => if (c.isLetter) c.toUpperCase else c.toLowerCase)", "      \
    \  val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        // Write your code here\n        return s", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else letters.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper).mkString", "        // Write your\
    \ code here\n        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ {\n            s.reverse\n        } else {\n            s.map(c => if (c.isLetter)\
    \ c.toUpper ^ c.toLower else c)\n        }", "        val sb = new StringBuilder\n\
    \        var hasLetter = false\n        for (c <- s) {\n            if (c.isLetter)\
    \ {\n                sb.append(c.toUpper)\n                hasLetter = true\n\
    \            } else {\n                sb.append(c)\n            }\n        }\n\
    \        if (hasLetter) sb.toString else sb.reverse.toString", "        val letters\
    \ = s.filter(_.isLetter)\n        if (letters.isEmpty) s.reverse\n        else\
    \ s.map(c => if (c.isLetter) c.toUpper ^ c.toLower else c)", "        val letters\
    \ = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        var hasLetter\
    \ = false\n        var result = \"\"\n        for (i <- 0 until s.length) {\n\
    \            if (letters.contains(s(i))) {\n                hasLetter = true\n\
    \                if (s(i).isUpper) result += s(i).toLower\n                else\
    \ result += s(i).toUpper\n            }\n            else result += s(i)\n   \
    \     }\n        if (hasLetter) result\n        else result.reverse", "      \
    \  val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        var result = \"\"\n        for (i <- 0 until s.length) {\n            if\
    \ (s(i).isLetter) {\n                if (s(i).isUpper) result += s(i).toLower\n\
    \                else result += s(i).toUpper\n            }\n            else\
    \ result += s(i)\n        }\n        if (result.length == s.length) result\n \
    \       else result.reverse", "        var result = \"\"\n        for (c <- s)\
    \ {\n            if (c.isLetter) {\n                if (c.isUpper) result += c.toLower\n\
    \                else result += c.toUpper\n            }\n            else result\
    \ += c\n        }\n        if (result.length == s.length) result.reverse\n   \
    \     else result", "        // Write your code here\n        var result = \"\"\
    \n        for (i <- 0 until s.length) {\n            if (s(i).isLetter) {\n  \
    \              if (s(i).isUpper) result += s(i).toLower\n                else\
    \ result += s(i).toUpper\n            }\n            else result += s(i)\n   \
    \     }\n        if (result.length == s.length) result.reverse\n        else result",
  "        // Write your code here\n        return \"\"", "        var result = \"\
    \"\n        for (i <- 0 until s.length) {\n            if (s(i).isLetter) {\n\
    \                if (s(i).isUpper) result += s(i).toLower\n                else\
    \ result += s(i).toUpper\n            }\n            else result += s(i)\n   \
    \     }\n        if (result.length == s.length) result.reverse\n        else result",
  "        var result = \"\"\n        for (i <- 0 until s.length) {\n            if\
    \ (s(i).isLetter) {\n                if (s(i).isUpper) result += s(i).toLower\n\
    \                else result += s(i).toUpper\n            }\n            else\
    \ result += s(i)\n        }\n        if (result.length == s.length) result\n \
    \       else s.reverse", "        val letters = s.filter(c => c.isLetter)\n  \
    \      if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else {\n            val sb =\
    \ new StringBuilder\n            for (c <- s) {\n                if (c.isLetter)\
    \ {\n                    if (c.isUpper) sb.append(c.toLower)\n               \
    \     else sb.append(c.toUpper)\n                }\n                else sb.append(c)\n\
    \            }\n            sb.toString\n        }", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.length == 0) s.reverse\n        else letters.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper)", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) {\n            s.reverse\n    \
    \    } else {\n            val lettersReversed = letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)\n            val lettersReversedMap = lettersReversed.zipWithIndex.toMap\n\
    \            s.map(c => if (c.isLetter) lettersReversedMap(c) else c)\n      \
    \  }", "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        // Write your code here\n        var result = \"\"\n        for (c <- s)\
    \ {\n            if (c.isLetter) {\n                if (c.isUpper) result += c.toLower\n\
    \                else result += c.toUpper\n            }\n            else result\
    \ += c\n        }\n        if (result.length == s.length) result.reverse\n   \
    \     else result", "        // Write your code here\n        var result = \"\"\
    \n        for (c <- s) {\n            if (c.isLetter) {\n                if (c.isUpper)\
    \ result += c.toLower\n                else result += c.toUpper\n            }\n\
    \            else result += c\n        }\n        if (result.isEmpty) result =\
    \ s.reverse\n        result", "        // Write your code here\n        val sb\
    \ = new StringBuilder\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \        val upperLetters = letters.toUpperCase\n        val lettersSet = letters.toSet\n\
    \        val upperLettersSet = upperLetters.toSet\n        var isLetter = false\n\
    \        for (c <- s) {\n            if (lettersSet.contains(c)) {\n         \
    \       sb.append(c.toUpper)\n                isLetter = true\n            } else\
    \ if (upperLettersSet.contains(c)) {\n                sb.append(c.toLower)\n \
    \               isLetter = true\n            } else {\n                sb.append(c)\n\
    \            }\n        }\n        if (isLetter) sb.toString else sb.reverse.toString",
  "        val letters = s.filter(_.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)", "  \
    \      if (s.forall(!_.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toUpperCase else c.toLowerCase)", "        if (s.isEmpty) return s\n     \
    \   val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n      \
    \      if (s(i).isLetter) {\n                if (s(i).isUpper) sb.append(s(i).toLower)\n\
    \                else sb.append(s(i).toUpper)\n            } else sb.append(s(i))\n\
    \        }\n        if (sb.toString.exists(_.isLetter)) sb.toString\n        else\
    \ sb.reverse.toString", "        // Write your code here\n        return \"\"",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        val sb = new StringBuilder\n        var isLetter = false\n        for (c\
    \ <- s) {\n            if (c.isLetter) {\n                sb.append(c.toUpper)\n\
    \                isLetter = true\n            } else {\n                sb.append(c)\n\
    \            }\n        }\n        if (isLetter) sb.toString else sb.reverse.toString",
  "        // Write your code here\n        return \"\";", "        if (s.exists(c\
    \ => c.isLetter)) {\n            s.map(c => if (c.isLetter) c.toUpper ^ c.toLower\
    \ else c).reverse\n        } else {\n            s.reverse\n        }", "    \
    \    val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n     \
    \       if (s(i).isLetter) {\n                if (s(i).isUpper) sb.append(s(i).toLower)\n\
    \                else sb.append(s(i).toUpper)\n            } else sb.append(s(i))\n\
    \        }\n        if (sb.length == 0) s.reverse\n        else sb.toString",
  "        // Write your code here\n        var result = \"\"\n        for (c <- s)\
    \ {\n            if (c.isLetter) {\n                if (c.isUpper) result += c.toLower\n\
    \                else result += c.toUpper\n            }\n            else result\
    \ += c\n        }\n        if (result.isEmpty) result = s.reverse\n        result",
  "        var result = \"\"\n        for (c <- s) {\n            if (c.isLetter)\
    \ {\n                if (c.isUpper) result += c.toLower\n                else\
    \ result += c.toUpper\n            }\n            else result += c\n        }\n\
    \        if (result.isEmpty) s.reverse\n        else result", "        val letters\
    \ = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n      \
    \  else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString", " \
    \       // Write your code here\n        return \"\";", "        if (s.forall(!_.isLetter))\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toUpper ^ c.toLower else\
    \ c)", "        if (s.forall(!_.isLetter)) s.reverse\n        else s.map(c =>\
    \ if (c.isLetter) c.toUpper ^ c.toLower else c)", "        // Write your code\
    \ here\n        return \"\"", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        val letters = s.filter(x => x.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(x => if (x.isUpper)\
    \ x.toLower else x.toUpper).mkString", "        if (s.forall(c => !c.isLetter))\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toUpper.toLower else c)",
  "        val letters = s.filter(x => x.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(x => if (x.isUpper) x.toLower else x.toUpper).mkString",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.length ==\
    \ 0) s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.length ==\
    \ 0) s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)",
  "        if (s.forall(c => !c.isLetter)) {\n            s.reverse\n        } else\
    \ {\n            s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c)\n  \
    \      }", "        var result = \"\"\n        for (c <- s) {\n            if\
    \ (c.isLetter) {\n                if (c.isUpper) result += c.toLower\n       \
    \         else result += c.toUpper\n            }\n            else result +=\
    \ c\n        }\n        if (result.isEmpty) result = s.reverse\n        result",
  "        // Write your code here\n        var result = \"\"\n        for (i <- 0\
    \ until s.length) {\n            if (s(i).isLetter) {\n                if (s(i).isUpper)\
    \ {\n                    result += s(i).toLower\n                } else {\n  \
    \                  result += s(i).toUpper\n                }\n            } else\
    \ {\n                result += s(i)\n            }\n        }\n        if (result.length\
    \ == s.length) {\n            result = result.reverse\n        }\n        result",
  "        val letters = s.filter(_.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)", "  \
    \      var result = \"\"\n        for (i <- 0 until s.length) {\n            if\
    \ (s(i).isLetter) {\n                if (s(i).isUpper) result += s(i).toLower\n\
    \                else result += s(i).toUpper\n            }\n            else\
    \ result += s(i)\n        }\n        if (result.length == s.length) result\n \
    \       else s.reverse", "        if (s.forall(!_.isLetter)) s.reverse\n     \
    \   else s.map(c => if (c.isLetter) c.toUpper ^ c.toLower else c)", "        val\
    \ letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        val letters = s.filter(_.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)", "  \
    \      if (s.forall(!_.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toUpper ^ c.toLower else c)", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else {\n            val letterSet\
    \ = letters.toSet\n            val letterMap = letterSet.map(c => (c, c.toLower)).toMap\n\
    \            s.map(c => if (c.isLetter) letterMap(c) else c).reverse\n       \
    \ }", "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        // Write your code here\n        var result = \"\"\n        for (c <- s)\
    \ {\n            if (c.isLetter) {\n                result += c.toUpper\n    \
    \        } else {\n                result += c\n            }\n        }\n   \
    \     if (result.length == 0) {\n            return s.reverse\n        }\n   \
    \     return result", "        var result = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            if (s(i).isLetter) {\n                if (s(i).isUpper) {\n \
    \                   result += s(i).toLower\n                } else {\n       \
    \             result += s(i).toUpper\n                }\n            } else {\n\
    \                result += s(i)\n            }\n        }\n        if (result.length\
    \ == s.length) {\n            result.reverse\n        } else {\n            result\n\
    \        }", "        val letters = s.filter(c => c.isLetter)\n        if (letters.length\
    \ == 0) {\n            s.reverse\n        } else {\n            s.map(c => if\
    \ (c.isLetter) c.toUpper ^ c.toLower else c)\n        }", "        if (s.forall(!_.isLetter))\
    \ s.reverse\n        else {\n            val sb = new StringBuilder\n        \
    \    for (c <- s) {\n                if (c.isLetter) {\n                    if\
    \ (c.isUpper) sb.append(c.toLower)\n                    else sb.append(c.toUpper)\n\
    \                }\n                else sb.append(c)\n            }\n       \
    \     sb.toString\n        }", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        val letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        var result = \"\"\n        for (i <- 0 until s.length) {\n         \
    \   if (letters.contains(s(i))) {\n                if (s(i).isUpper) result +=\
    \ s(i).toLower\n                else result += s(i).toUpper\n            }\n \
    \           else result += s(i)\n        }\n        if (result.length == 0) result\
    \ = s.reverse\n        result", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        // Write your code here\n    \
    \    var result = \"\"\n        for (c <- s) {\n            if (c.isLetter) {\n\
    \                if (c.isUpper) {\n                    result += c.toLower\n \
    \               } else {\n                    result += c.toUpper\n          \
    \      }\n            } else {\n                result += c\n            }\n \
    \       }\n        if (result.isEmpty) {\n            return s.reverse\n     \
    \   }\n        return result", "        val letters = s.filter(_.isLetter)\n \
    \       if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        // Write your code here\n    \
    \    s.reverse", "        if (s.exists(c => c.isLetter)) {\n            s.map(c\
    \ => if (c.isLetter) c.toUpper ^ c.toLower else c).mkString\n        } else {\n\
    \            s.reverse\n        }", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        // Write your code here\n    \
    \    var str = \"\"\n        for (i <- 0 until s.length) {\n            if (s(i).isLetter)\
    \ {\n                if (s(i).isUpper) {\n                    str += s(i).toLower\n\
    \                } else {\n                    str += s(i).toUpper\n         \
    \       }\n            } else {\n                str += s(i)\n            }\n\
    \        }\n        if (str.length == s.length) {\n            str.reverse\n \
    \       } else {\n            str\n        }", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else letters.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper).mkString", "        var result =\
    \ \"\"\n        var isLetter = false\n        for (c <- s) {\n            if (c.isLetter)\
    \ {\n                isLetter = true\n                result += c.toUpper.toString\n\
    \            } else {\n                result += c.toString\n            }\n \
    \       }\n        if (isLetter) {\n            result.reverse\n        } else\
    \ {\n            result\n        }", "        // Write your code here\n      \
    \  var result = \"\"\n        for (i <- 0 until s.length) {\n            if (s(i).isLetter)\
    \ {\n                if (s(i).isUpper) {\n                    result += s(i).toLower\n\
    \                } else {\n                    result += s(i).toUpper\n      \
    \          }\n            } else {\n                result += s(i)\n         \
    \   }\n        }\n        if (result.length == s.length) {\n            result\
    \ = result.reverse\n        }\n        result", "        if (s.forall(!_.isLetter))\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else\
    \ c)", "        var result = \"\"\n        for (i <- 0 until s.length) {\n   \
    \         if (s(i).isLetter) {\n                if (s(i).isUpper) result += s(i).toLower\n\
    \                else result += s(i).toUpper\n            }\n            else\
    \ result += s(i)\n        }\n        if (result.length == s.length) result\n \
    \       else result.reverse", "        if (s.exists(c => c.isLetter)) {\n    \
    \        s.map(c => if (c.isLetter) c.toUpper ^ c.toLower else c).mkString\n \
    \       } else {\n            s.reverse\n        }", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else letters.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper).mkString", "        if (s.isEmpty)\
    \ return s\n        val sb = new StringBuilder\n        for (c <- s) {\n     \
    \       if (c.isLetter) {\n                if (c.isUpper) sb.append(c.toLower)\n\
    \                else sb.append(c.toUpper)\n            } else sb.append(c)\n\
    \        }\n        sb.toString", "        if (s.exists(c => c.isLetter)) {\n\
    \            s.map(c => if (c.isLetter) c.toLower else c.toUpper)\n        } else\
    \ {\n            s.reverse\n        }", "        // Write your code here\n   \
    \     var result = \"\"\n        for (i <- 0 until s.length) {\n            if\
    \ (s(i).isLetter) {\n                if (s(i).isUpper) {\n                   \
    \ result += s(i).toLower\n                } else {\n                    result\
    \ += s(i).toUpper\n                }\n            } else {\n                result\
    \ += s(i)\n            }\n        }\n        if (result.length == s.length) {\n\
    \            result = s.reverse\n        }\n        result", "        val letters\
    \ = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n      \
    \  else s.map(c => if (c.isLetter) c.toUpper ^ c.toLower else c)", "        val\
    \ letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.length ==\
    \ 0) s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        var result = \"\"\n        for (i <- 0 until s.length) {\n            if\
    \ (s(i).isLetter) {\n                if (s(i).isUpper) result += s(i).toLower\n\
    \                else result += s(i).toUpper\n            }\n            else\
    \ result += s(i)\n        }\n        if (result.length == s.length) result\n \
    \       else result.reverse", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        // Write your code here\n    \
    \    var result = \"\"\n        var isLetter = false\n        for (i <- 0 until\
    \ s.length) {\n            if (s(i).isLetter) {\n                isLetter = true\n\
    \                if (s(i).isUpper) result += s(i).toLower\n                else\
    \ result += s(i).toUpper\n            }\n            else result += s(i)\n   \
    \     }\n        if (!isLetter) result = s.reverse\n        result", "       \
    \ // Write your code here\n        return \"\"", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else letters.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper).mkString", "        var result =\
    \ \"\"\n        for (c <- s) {\n            if (c.isLetter) {\n              \
    \  result += c.toUpper.toString\n            } else {\n                result\
    \ += c.toLower.toString\n            }\n        }\n        if (result.length ==\
    \ 0) {\n            return s.reverse\n        }\n        return result", "   \
    \     if (s.exists(c => c.isLetter)) {\n            s.map(c => if (c.isLetter)\
    \ c.toUpper ^ c.toLower else c).mkString\n        } else {\n            s.reverse\n\
    \        }", "        val sb = new StringBuilder\n        var flag = false\n \
    \       for (c <- s) {\n            if (c.isLetter) {\n                sb.append(c.toUpper)\n\
    \                flag = true\n            } else {\n                sb.append(c)\n\
    \            }\n        }\n        if (flag) sb.toString\n        else sb.reverse.toString",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        // Write your code here\n        var result = \"\"\n        for (c <- s)\
    \ {\n            if (c.isLetter) {\n                result += c.toUpper\n    \
    \        } else {\n                result += c\n            }\n        }\n   \
    \     result", "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toUpper ^ c.toLower else\
    \ c)", "        val sb = new StringBuilder\n        var hasLetter = false\n  \
    \      for (c <- s) {\n            if (c.isLetter) {\n                hasLetter\
    \ = true\n                sb.append(c.toUpper)\n            } else {\n       \
    \         sb.append(c)\n            }\n        }\n        if (hasLetter) sb.toString\n\
    \        else sb.reverse.toString", "        // Write your code here\n       \
    \ return \"\";", "        // Write your code here\n        return \"\"", "   \
    \     // Write your code here\n        return s", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else s.map(c\
    \ => if (c.isLetter) c.toUpper ^ c.toLower else c)", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else letters.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper).mkString", "        if (s.exists(_.isLetter))\
    \ {\n            s.map(c => if (c.isLetter) c.toUpper ^ c.toLower else c)\n  \
    \      } else {\n            s.reverse\n        }", "        // Write your code\
    \ here\n        var result = \"\"\n        for (i <- 0 until s.length) {\n   \
    \         if (s(i).isLetter) {\n                if (s(i).isUpper) {\n        \
    \            result += s(i).toLower\n                } else {\n              \
    \      result += s(i).toUpper\n                }\n            } else {\n     \
    \           result += s(i)\n            }\n        }\n        if (result.length\
    \ == s.length) {\n            result.reverse\n        } else {\n            result\n\
    \        }", "        var result = \"\"\n        for (c <- s) {\n            if\
    \ (c.isLetter) {\n                if (c.isUpper) {\n                    result\
    \ += c.toLower\n                } else {\n                    result += c.toUpper\n\
    \                }\n            } else {\n                result += c\n      \
    \      }\n        }\n        if (result.length == s.length) {\n            result.reverse\n\
    \        } else {\n            result\n        }", "        if (s.exists(c =>\
    \ c.isLetter)) {\n            s.map(c => if (c.isLetter) c.toUpper ^ c.toLower\
    \ else c).reverse\n        } else {\n            s.reverse\n        }", "    \
    \    // Write your code here\n        var result = \"\"\n        for (c <- s)\
    \ {\n            if (c.isLetter) {\n                if (c.isUpper) {\n       \
    \             result += c.toLower\n                } else {\n                \
    \    result += c.toUpper\n                }\n            } else {\n          \
    \      result += c\n            }\n        }\n        if (result.isEmpty) {\n\
    \            s.reverse\n        } else {\n            result\n        }", "  \
    \      var result = \"\"\n        for (c <- s) {\n            if (c.isLetter)\
    \ {\n                if (c.isUpper) result += c.toLower\n                else\
    \ result += c.toUpper\n            }\n            else result += c\n        }\n\
    \        if (result.length == s.length) result.reverse\n        else result",
  "        val letters = s.filter(_.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)", "  \
    \      var result = \"\"\n        for (c <- s) {\n            if (c.isLetter)\
    \ {\n                if (c.isUpper) result += c.toLower\n                else\
    \ result += c.toUpper\n            }\n            else result += c\n        }\n\
    \        if (result.length == s.length) result.reverse\n        else result",
  "        // Write your code here\n        var r = \"\"\n        for (c <- s) {\n\
    \            if (c.isLetter) {\n                r += c.toUpper\n            }\
    \ else {\n                r += c\n            }\n        }\n        r", "    \
    \    if (s.forall(!_.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toUpper ^ c.toLower else c)", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        if (s.forall(!_.isLetter)) s.reverse\n\
    \        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c)", "   \
    \     val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) {\n\
    \            s.reverse\n        } else {\n            s.map(c => if (c.isLetter)\
    \ c.toLower ^ 32 else c)\n        }", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        val sb = new StringBuilder\n \
    \       var isLetter = false\n        for (c <- s) {\n            if (c.isLetter)\
    \ {\n                isLetter = true\n                sb.append(c.toUpper)\n \
    \           } else {\n                sb.append(c)\n            }\n        }\n\
    \        if (isLetter) sb.toString\n        else sb.reverse.toString", "     \
    \   val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.length ==\
    \ 0) s.reverse\n        else s.map(c => if (c.isLetter) c.toUpper ^ c.toLower\
    \ else c)", "        // Write your code here\n        var result = \"\"\n    \
    \    for (i <- 0 until s.length) {\n            if (s(i).isLetter) {\n       \
    \         if (s(i).isUpper) {\n                    result += s(i).toLower\n  \
    \              } else {\n                    result += s(i).toUpper\n        \
    \        }\n            } else {\n                result += s(i)\n           \
    \ }\n        }\n        if (result.length == s.length) {\n            result.reverse\n\
    \        } else {\n            result\n        }", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else s.map(c\
    \ => if (c.isLetter) c.toUpper ^ c.toLower else c)", "        val sb = new StringBuilder\n\
    \        var hasLetter = false\n        for (c <- s) {\n            if (c.isLetter)\
    \ {\n                hasLetter = true\n                sb.append(c.toUpper)\n\
    \            } else {\n                sb.append(c)\n            }\n        }\n\
    \        if (hasLetter) sb.toString\n        else sb.reverse.toString", "    \
    \    // Write your code here\n        return \"\";", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else letters.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper).mkString", "        val letters\
    \ = s.filter(x => x.isLetter)\n        if (letters.isEmpty) s.reverse\n      \
    \  else letters.map(x => if (x.isUpper) x.toLower else x.toUpper).mkString", " \
    \       if (s.exists(_.isLetter)) {\n            s.map(c => if (c.isLetter) c.toUpper\
    \ ^ c.toLower else c)\n        } else {\n            s.reverse\n        }", " \
    \       val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        if (s.exists(c => c.isLetter)) {\n            s.map(c => if (c.isLetter)\
    \ c.toUpper ^ c.toLower else c).reverse\n        } else {\n            s.reverse\n\
    \        }", "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        var letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) return\
    \ s.reverse\n        var result = \"\"\n        for (c <- s) {\n            if\
    \ (c.isLetter) {\n                if (c.isUpper) result += c.toLower\n       \
    \         else result += c.toUpper\n            } else result += c\n        }\n\
    \        result", "        // Write your code here\n        return \"\"", "  \
    \      val sb = new StringBuilder\n        var flag = false\n        for (c <-\
    \ s) {\n            if (c.isLetter) {\n                sb.append(c.toUpper)\n\
    \                flag = true\n            } else {\n                sb.append(c)\n\
    \            }\n        }\n        if (flag) sb.toString else sb.reverse.toString",
  "        val sb = new StringBuilder\n        var hasLetter = false\n        for\
    \ (c <- s) {\n            if (c.isLetter) {\n                hasLetter = true\n\
    \                sb.append(c.toUpper)\n            } else {\n                sb.append(c)\n\
    \            }\n        }\n        if (hasLetter) sb.toString else sb.reverse.toString",
  "        // Write your code here\n        var str = \"\"\n        for (i <- 0 until\
    \ s.length) {\n            if (s(i).isLetter) {\n                if (s(i).isUpper)\
    \ str += s(i).toLower\n                else str += s(i).toUpper\n            }\n\
    \            else str += s(i)\n        }\n        if (str.length == s.length)\
    \ str.reverse\n        else str", "        val letters = s.filter(x => x.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(x => if (x.isUpper)\
    \ x.toLower else x.toUpper).mkString", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) {\n            s.reverse\n        } else {\n   \
    \         s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c)\n        }",
  "        val letters = s.filter(x => x.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(x => if (x.isUpper) x.toLower else x.toUpper).mkString",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        if (s.exists(c => c.isLetter)) {\n            s.map(c => if (c.isLetter)\
    \ c.toUpper ^ c.toLower else c).mkString\n        } else {\n            s.reverse\n\
    \        }", "        // Write your code here\n        var result = \"\"\n   \
    \     for (c <- s) {\n            if (c.isLetter) {\n                result +=\
    \ c.toUpper\n            } else {\n                result += c\n            }\n\
    \        }\n        if (result.length == 0) {\n            return s.reverse\n\
    \        }\n        return result", "        // Write your code here\n       \
    \ var result = \"\"\n        for (i <- 0 until s.length) {\n            if (s(i).isLetter)\
    \ {\n                if (s(i).isUpper) {\n                    result += s(i).toLower\n\
    \                } else {\n                    result += s(i).toUpper\n      \
    \          }\n            } else {\n                result += s(i)\n         \
    \   }\n        }\n        if (result.length == s.length) {\n            result.reverse\n\
    \        } else {\n            result\n        }", "        val letters = s.filter(_.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        var result = \"\"\n        for\
    \ (c <- s) {\n            if (c.isLetter) {\n                if (c.isUpper) result\
    \ += c.toLower\n                else result += c.toUpper\n            }\n    \
    \        else result += c\n        }\n        if (result.length == s.length) result.reverse\n\
    \        else result", "        val letters = s.filter(c => c.isLetter)\n    \
    \    if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper).mkString", "        // Write your code here\n    \
    \    val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)", "  \
    \      val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper).mkString",
  "        val letters = s.filter(x => x.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else s.map(x => if (x.isLetter) x.toLower ^ x.toUpper else x)", "   \
    \     val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) {\n\
    \            return s.reverse\n        }\n        val letterSet = letters.toSet\n\
    \        val sb = new StringBuilder\n        for (c <- s) {\n            if (letterSet.contains(c))\
    \ {\n                sb.append(c.toLowerCase)\n            } else {\n        \
    \        sb.append(c)\n            }\n        }\n        val sb2 = new StringBuilder\n\
    \        for (c <- s) {\n            if (letterSet.contains(c)) {\n          \
    \      sb2.append(c.toUpperCase)\n            } else {\n                sb2.append(c)\n\
    \            }\n        }\n        if (sb.toString < sb2.toString) {\n       \
    \     return sb.toString\n        } else {\n            return sb2.toString\n\
    \        }"]
stop_tokens:
- "\n    }\n"
