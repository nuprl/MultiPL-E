name: HumanEval_75_is_multiply_prime
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less\
  \ then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    // (true)\n\
  \    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
  \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
  \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
  \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
  \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
  \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
completions: ["        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors\
    \ = primes.filter(a % _ == 0)\n        primeFactors.length == 3", "        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val primes2 = primes.filter(x => a\
    \ % x == 0)\n        primes2.size == 3", "        val primes = List(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val primeFactors = primes.filter(a % _ == 0)\n        primeFactors.length\
    \ == 3", "        val primes = ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors\
    \ = ArrayBuffer[Long]()\n        var i = 0\n        var n = a\n        while (n\
    \ > 1) {\n            if (n % primes(i) == 0) {\n                factors += primes(i)\n\
    \                n /= primes(i)\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors.length == 3", "        val primes =\
    \ List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(x => a % x\
    \ == 0)\n        if (primeFactors.length == 3) true else false", "        def\
    \ isPrime(n : Long) : Boolean = {\n            if (n == 2) return true\n     \
    \       if (n % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n\
    \            for (i <- 3l to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        val sqrt =\
    \ sqrt(a).toLong\n        for (i <- 3l to sqrt by 2) {\n            if (isPrime(i)\
    \ && a % i == 0) {\n                val b = a / i\n                if (isPrime(b))\
    \ {\n                    val c = b / i\n                    if (isPrime(c)) return\
    \ true\n                }\n            }\n        }\n        return false", " \
    \       val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a\
    \ % _ == 0)\n        primeFactors.length == 3", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        for (i <- primes) {\n            for (j <- primes)\
    \ {\n                for (k <- primes) {\n                    if (i * j * k ==\
    \ a) return true\n                }\n            }\n        }\n        return\
    \ false", "        def isPrime(b : Long) : Boolean = {\n            if (b < 2)\
    \ return false\n            if (b == 2) return true\n            if (b % 2 ==\
    \ 0) return false\n            for (i <- 3 to sqrt(b).toInt by 2) {\n        \
    \        if (b % i == 0) return false\n            }\n            return true\n\
    \        }\n        val primes = new ArrayBuffer[Long]\n        for (i <- 2 to\
    \ sqrt(a).toInt) {\n            if (isPrime(i)) {\n                if (a % i ==\
    \ 0) {\n                    primes += i\n                    if (primes.length\
    \ == 3) return true\n                }\n            }\n        }\n        return\
    \ false", "        def isPrime(n : Long) : Boolean = {\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            for (i <-\
    \ 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0) return false\n \
    \           }\n            return true\n        }\n        if (a == 1) return\
    \ false\n        for (i <- 2 to sqrt(a).toInt) {\n            if (a % i == 0)\
    \ {\n                if (isPrime(i) && isPrime(a / i)) return true\n         \
    \   }\n        }\n        return false", "        val primes = List(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val primes2 = primes.filter(x => a % x == 0)\n        if (primes2.length\
    \ == 3) true else false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val factors = new ListBuffer[Int]\n        var temp = a\n        for (i <-\
    \ primes) {\n            while (temp % i == 0) {\n                factors += i\n\
    \                temp /= i\n            }\n        }\n        factors.length ==\
    \ 3", "        def isPrime(n : Long) : Boolean = {\n            if (n == 1) false\n\
    \            else if (n < 4) true\n            else if (n % 2 == 0) false\n  \
    \          else if (n < 9) true\n            else if (n % 3 == 0) false\n    \
    \        else {\n                val r = floor(sqrt(n)).toLong\n             \
    \   var f = 5\n                while (f <= r) {\n                    if (n % f\
    \ == 0) return false\n                    if (n % (f + 2) == 0) return false\n\
    \                    f += 6\n                }\n                true\n       \
    \     }\n        }\n        val primes = ArrayBuffer[Long]()\n        var i =\
    \ 1\n        while (i < 100) {\n            if (isPrime(i)) primes += i\n    \
    \        i += 1\n        }\n        val primesSet = primes.toSet\n        var\
    \ j = 0\n        while (j < primes.length) {\n            val p1 = primes(j)\n\
    \            var k = j\n            while (k < primes.length) {\n            \
    \    val p2 = primes(k)\n                if (primesSet.contains(a / (p1 * p2)))\
    \ return true\n                k += 1\n            }\n            j += 1\n   \
    \     }\n        false", "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val factors = new ArrayBuffer[Int]\n        var i = 0\n        var x = a\n\
    \        while (x > 1) {\n            if (x % primes(i) == 0) {\n            \
    \    factors += primes(i)\n                x /= primes(i)\n            }\n   \
    \         else i += 1\n        }\n        factors.length == 3", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a % _ == 0)\n\
    \        primeFactors.length == 3", "        val primes = List(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val primesSet = primes.toSet\n        val primesSet2 = primesSet.map(x\
    \ => x * x)\n        val primesSet3 = primesSet.map(x => x * x * x)\n        val\
    \ primesSet4 = primesSet.map(x => x * x * x * x)\n        val primesSet5 = primesSet.map(x\
    \ => x * x * x * x * x)\n        val primesSet6 = primesSet.map(x => x * x * x\
    \ * x * x * x)\n        val primesSet7 = primesSet.map(x => x * x * x * x * x\
    \ * x * x)\n        val primesSet8 = primesSet.map(x => x * x * x * x * x * x\
    \ * x * x)\n        val primesSet9 = primesSet.map(x => x * x * x * x * x * x\
    \ * x * x * x)\n        val primesSet10 = primesSet.map(x => x * x * x * x * x\
    \ * x * x * x * x * x)\n        val primesSet11 = primesSet.map(x => x * x * x\
    \ * x * x * x * x * x * x * x * x)\n        val primesSet12 = primesSet.map(x\
    \ => x * x * x * x * x * x * x * x * x * x * x * x)\n        val primesSet13 =\
    \ primesSet.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x)\n    \
    \    val primesSet14 = primesSet.map(x => x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x)\n        val primesSet15 = primesSet.map(x => x * x * x *\
    \ x * x *", "        def isPrime(n : Long) : Boolean = {\n            if (n <=\
    \ 1) return false\n            if (n == 2) return true\n            if (n % 2\
    \ == 0) return false\n            val sqrt = math.sqrt(n).toLong\n           \
    \ for (i <- 3l to sqrt by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        val sqrt = math.sqrt(a).toLong\n\
    \        for (i <- 2l to sqrt) {\n            if (a % i == 0) {\n            \
    \    if (isPrime(i) && isPrime(a / i)) {\n                    return true\n  \
    \              }\n            }\n        }\n        return false", "        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        primes.map(p => a % p == 0).reduceLeft((x,\
    \ y) => x || y)", "        // Write your code here\n        return true", "  \
    \      val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- primes) {\n     \
    \       for (j <- primes) {\n                for (k <- primes) {\n           \
    \         if (i * j * k == a) return true\n                }\n            }\n\
    \        }\n        return false"]
stop_tokens:
- "\n    }\n"
