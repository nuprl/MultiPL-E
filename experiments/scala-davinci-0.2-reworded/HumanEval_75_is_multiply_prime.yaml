name: HumanEval_75_is_multiply_prime
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less\
  \ then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    // (true)\n\
  \    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
  \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
  \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
  \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
  \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
  \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
completions: ["        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors\
    \ = primes.filter(a % _ == 0)\n        primeFactors.length == 3", "        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val primes2 = primes.filter(x => a\
    \ % x == 0)\n        primes2.size == 3", "        val primes = List(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val primeFactors = primes.filter(a % _ == 0)\n        primeFactors.length\
    \ == 3", "        val primes = ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors\
    \ = ArrayBuffer[Long]()\n        var i = 0\n        var n = a\n        while (n\
    \ > 1) {\n            if (n % primes(i) == 0) {\n                factors += primes(i)\n\
    \                n /= primes(i)\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors.length == 3", "        val primes =\
    \ List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(x => a % x\
    \ == 0)\n        if (primeFactors.length == 3) true else false", "        def\
    \ isPrime(n : Long) : Boolean = {\n            if (n == 2) return true\n     \
    \       if (n % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n\
    \            for (i <- 3l to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        val sqrt =\
    \ sqrt(a).toLong\n        for (i <- 3l to sqrt by 2) {\n            if (isPrime(i)\
    \ && a % i == 0) {\n                val b = a / i\n                if (isPrime(b))\
    \ {\n                    val c = b / i\n                    if (isPrime(c)) return\
    \ true\n                }\n            }\n        }\n        return false", " \
    \       val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a\
    \ % _ == 0)\n        primeFactors.length == 3", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        for (i <- primes) {\n            for (j <- primes)\
    \ {\n                for (k <- primes) {\n                    if (i * j * k ==\
    \ a) return true\n                }\n            }\n        }\n        return\
    \ false", "        def isPrime(b : Long) : Boolean = {\n            if (b < 2)\
    \ return false\n            if (b == 2) return true\n            if (b % 2 ==\
    \ 0) return false\n            for (i <- 3 to sqrt(b).toInt by 2) {\n        \
    \        if (b % i == 0) return false\n            }\n            return true\n\
    \        }\n        val primes = new ArrayBuffer[Long]\n        for (i <- 2 to\
    \ sqrt(a).toInt) {\n            if (isPrime(i)) {\n                if (a % i ==\
    \ 0) {\n                    primes += i\n                    if (primes.length\
    \ == 3) return true\n                }\n            }\n        }\n        return\
    \ false", "        def isPrime(n : Long) : Boolean = {\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            for (i <-\
    \ 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0) return false\n \
    \           }\n            return true\n        }\n        if (a == 1) return\
    \ false\n        for (i <- 2 to sqrt(a).toInt) {\n            if (a % i == 0)\
    \ {\n                if (isPrime(i) && isPrime(a / i)) return true\n         \
    \   }\n        }\n        return false", "        val primes = List(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val primes2 = primes.filter(x => a % x == 0)\n        if (primes2.length\
    \ == 3) true else false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val factors = new ListBuffer[Int]\n        var temp = a\n        for (i <-\
    \ primes) {\n            while (temp % i == 0) {\n                factors += i\n\
    \                temp /= i\n            }\n        }\n        factors.length ==\
    \ 3", "        def isPrime(n : Long) : Boolean = {\n            if (n == 1) false\n\
    \            else if (n < 4) true\n            else if (n % 2 == 0) false\n  \
    \          else if (n < 9) true\n            else if (n % 3 == 0) false\n    \
    \        else {\n                val r = floor(sqrt(n)).toLong\n             \
    \   var f = 5\n                while (f <= r) {\n                    if (n % f\
    \ == 0) return false\n                    if (n % (f + 2) == 0) return false\n\
    \                    f += 6\n                }\n                true\n       \
    \     }\n        }\n        val primes = ArrayBuffer[Long]()\n        var i =\
    \ 1\n        while (i < 100) {\n            if (isPrime(i)) primes += i\n    \
    \        i += 1\n        }\n        val primesSet = primes.toSet\n        var\
    \ j = 0\n        while (j < primes.length) {\n            val p1 = primes(j)\n\
    \            var k = j\n            while (k < primes.length) {\n            \
    \    val p2 = primes(k)\n                if (primesSet.contains(a / (p1 * p2)))\
    \ return true\n                k += 1\n            }\n            j += 1\n   \
    \     }\n        false", "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val factors = new ArrayBuffer[Int]\n        var i = 0\n        var x = a\n\
    \        while (x > 1) {\n            if (x % primes(i) == 0) {\n            \
    \    factors += primes(i)\n                x /= primes(i)\n            }\n   \
    \         else i += 1\n        }\n        factors.length == 3", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a % _ == 0)\n\
    \        primeFactors.length == 3", "        val primes = List(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val primesSet = primes.toSet\n        val primesSet2 = primesSet.map(x\
    \ => x * x)\n        val primesSet3 = primesSet.map(x => x * x * x)\n        val\
    \ primesSet4 = primesSet.map(x => x * x * x * x)\n        val primesSet5 = primesSet.map(x\
    \ => x * x * x * x * x)\n        val primesSet6 = primesSet.map(x => x * x * x\
    \ * x * x * x)\n        val primesSet7 = primesSet.map(x => x * x * x * x * x\
    \ * x * x)\n        val primesSet8 = primesSet.map(x => x * x * x * x * x * x\
    \ * x * x)\n        val primesSet9 = primesSet.map(x => x * x * x * x * x * x\
    \ * x * x * x)\n        val primesSet10 = primesSet.map(x => x * x * x * x * x\
    \ * x * x * x * x * x)\n        val primesSet11 = primesSet.map(x => x * x * x\
    \ * x * x * x * x * x * x * x * x)\n        val primesSet12 = primesSet.map(x\
    \ => x * x * x * x * x * x * x * x * x * x * x * x)\n        val primesSet13 =\
    \ primesSet.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x)\n    \
    \    val primesSet14 = primesSet.map(x => x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x)\n        val primesSet15 = primesSet.map(x => x * x * x *\
    \ x * x *", "        def isPrime(n : Long) : Boolean = {\n            if (n <=\
    \ 1) return false\n            if (n == 2) return true\n            if (n % 2\
    \ == 0) return false\n            val sqrt = math.sqrt(n).toLong\n           \
    \ for (i <- 3l to sqrt by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        val sqrt = math.sqrt(a).toLong\n\
    \        for (i <- 2l to sqrt) {\n            if (a % i == 0) {\n            \
    \    if (isPrime(i) && isPrime(a / i)) {\n                    return true\n  \
    \              }\n            }\n        }\n        return false", "        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        primes.map(p => a % p == 0).reduceLeft((x,\
    \ y) => x || y)", "        // Write your code here\n        return true", "  \
    \      val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- primes) {\n     \
    \       for (j <- primes) {\n                for (k <- primes) {\n           \
    \         if (i * j * k == a) return true\n                }\n            }\n\
    \        }\n        return false", "        val primes = List(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        for (i <- 0 to primes.length - 1) {\n            for (j <- i +\
    \ 1 to primes.length - 1) {\n                for (k <- j + 1 to primes.length\
    \ - 1) {\n                    if (primes(i) * primes(j) * primes(k) == a) {\n\
    \                        return true\n                    }\n                }\n\
    \            }\n        }\n        return false", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        var result = false\n        for (i <- 0 to primes.length\
    \ - 1) {\n            if (a % primes(i) == 0) {\n                result = true\n\
    \                for (j <- i + 1 to primes.length - 1) {\n                   \
    \ if (a % primes(j) == 0) {\n                        result = false\n        \
    \                for (k <- j + 1 to primes.length - 1) {\n                   \
    \         if (a % primes(k) == 0) {\n                                result =\
    \ true\n                                return result\n                      \
    \      }\n                        }\n                    }\n                }\n\
    \            }\n        }\n        result", "        val primes = Array(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        for (i <- 0 until primes.length) {\n            for (j\
    \ <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length) {\n  \
    \          for (j <- i until primes.length) {\n                for (k <- j until\
    \ primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a\
    \ % _ == 0)\n        primeFactors.length == 3", "        var primes = List[Long]()\n\
    \        for (i <- 2l to a) {\n            if (isPrime(i)) {\n               \
    \ primes = i :: primes\n            }\n        }\n        primes.foreach(println)\n\
    \        false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors\
    \ = primes.filter(a % _ == 0)\n        primeFactors.size == 3", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        var result = false\n        for (i <- 0 to\
    \ primes.length - 1) {\n            for (j <- i + 1 to primes.length - 1) {\n\
    \                for (k <- j + 1 to primes.length - 1) {\n                   \
    \ if (primes(i) * primes(j) * primes(k) == a) {\n                        result\
    \ = true\n                    }\n                }\n            }\n        }\n\
    \        result", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var result\
    \ = false\n        for (i <- 0 to primes.length - 1) {\n            for (j <-\
    \ i + 1 to primes.length - 1) {\n                for (k <- j + 1 to primes.length\
    \ - 1) {\n                    if (primes(i) * primes(j) * primes(k) == a) {\n\
    \                        result = true\n                    }\n              \
    \  }\n            }\n        }\n        result", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        var result = false\n        for (i <- 0 to primes.length\
    \ - 1) {\n            for (j <- i + 1 to primes.length - 1) {\n              \
    \  for (k <- j + 1 to primes.length - 1) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) {\n                        result = true\n   \
    \                 }\n                }\n            }\n        }\n        result",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var result = false\n      \
    \  for (i <- 0 to primes.length - 1) {\n            for (j <- i + 1 to primes.length\
    \ - 1) {\n                for (k <- j + 1 to primes.length - 1) {\n          \
    \          if (primes(i) * primes(j) * primes(k) == a) {\n                   \
    \     result = true\n                    }\n                }\n            }\n\
    \        }\n        result", "        val primes = List(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      def isMultiplyPrime(a : Long, primes : List[Int]) : Boolean = {\n     \
    \       if (primes.isEmpty) false\n            else if (a == 1) true\n       \
    \     else if (a % primes.head == 0) isMultiplyPrime(a / primes.head, primes)\n\
    \            else isMultiplyPrime(a, primes.tail)\n        }\n        isMultiplyPrime(a,\
    \ primes)", "        if (a == 1) return false\n        if (a == 2) return true\n\
    \        if (a == 3) return true\n        if (a == 5) return true\n        if\
    \ (a == 7) return true\n        if (a == 11) return true\n        if (a == 13)\
    \ return true\n        if (a == 17) return true\n        if (a == 19) return true\n\
    \        if (a == 23) return true\n        if (a == 29) return true\n        if\
    \ (a == 31) return true\n        if (a == 37) return true\n        if (a == 41)\
    \ return true\n        if (a == 43) return true\n        if (a == 47) return true\n\
    \        if (a == 53) return true\n        if (a == 59) return true\n        if\
    \ (a == 61) return true\n        if (a == 67) return true\n        if (a == 71)\
    \ return true\n        if (a == 73) return true\n        if (a == 79) return true\n\
    \        if (a == 83) return true\n        if (a == 89) return true\n        if\
    \ (a == 97) return true\n        if (a % 2 == 0) return false\n        if (a %\
    \ 3 == 0) return false\n        if (a % 5 == 0) return false\n        if (a %\
    \ 7 == 0) return false\n        if (a % 11 == 0) return false\n        if (a %\
    \ 13 == 0) return false\n        if (a % 17 == 0) return false\n        if (a\
    \ % 19 == 0) return false\n        if (a % 23 == 0) return false\n        if (a\
    \ % 29 == 0) return false\n        if (a % 31 == 0) return false\n        if (a\
    \ % 37 == 0) return false\n        if (a % 41 == 0) return false\n        if (a\
    \ % 43 == 0) return false\n        if (a % 47 == 0) return false\n        if (a\
    \ % 53 == 0) return false\n        if (a % 59 == 0) return false\n        if (a\
    \ % 61 == 0) return false\n        if (a % 67 == 0) return false\n        if (a\
    \ % 71 == 0) return false\n        if (a % 73 == 0) return false", "        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a\
    \ % _ == 0)\n        primeFactors.size == 3", "        val primes = List(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        primes.exists(x => a % x == 0 && isMultiplyPrime(a / x))",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors = new ListBuffer[Int]\n\
    \        var i = 0\n        var aa = a\n        while (i < primes.length && aa\
    \ > 1) {\n            if (aa % primes(i) == 0) {\n                factors += primes(i)\n\
    \                aa /= primes(i)\n            }\n            else i += 1\n   \
    \     }\n        factors.length == 3", "        val primes = List(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val factors = new HashMap[Long, Int]\n        var temp = a\n\
    \        for (i <- primes) {\n            while (temp % i == 0) {\n          \
    \      factors(i) = factors.getOrElse(i, 0) + 1\n                temp /= i\n \
    \           }\n        }\n        if (temp != 1) return false\n        factors.values.forall(_\
    \ % 3 == 0)", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors\
    \ = new ArrayBuffer[Int]\n        var b = a\n        for (p <- primes) {\n   \
    \         while (b % p == 0) {\n                factors += p\n               \
    \ b /= p\n            }\n        }\n        factors.size == 3", "        val primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2l to 100l) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        val primesSet = primes.toSet\n        for (i\
    \ <- primes) {\n            if (a % i == 0) {\n                val b = a / i\n\
    \                for (j <- primes) {\n                    if (b % j == 0) {\n\
    \                        val c = b / j\n                        if (primesSet.contains(c))\
    \ return true\n                    }\n                }\n            }\n     \
    \   }\n        false", "        val primeNumbers = List(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val primeNumbersSet = primeNumbers.toSet\n        val primeNumbersMap =\
    \ primeNumbers.zipWithIndex.toMap\n        val primeNumbersMapReverse = primeNumbersMap.map(_.swap)\n\
    \        val primeNumbersMapReverseSet = primeNumbersMapReverse.keySet\n     \
    \   val primeNumbersMapReverseList = primeNumbersMapReverse.toList\n        val\
    \ primeNumbersMapReverseListSorted = primeNumbersMapReverseList.sortBy(_._1)\n\
    \        val primeNumbersMapReverseListSortedReverse = primeNumbersMapReverseListSorted.reverse\n\
    \        def isPrime(a : Long) : Boolean = {\n            if (a == 1) return false\n\
    \            if (a == 2) return true\n            if (a % 2 == 0) return false\n\
    \            val sqrtA = sqrt(a).toLong\n            for (i <- 3l to sqrtA by\
    \ 2) {\n                if (a % i == 0) return false\n            }\n        \
    \    return true\n        }\n        def isMultiplyPrime(a : Long, primeNumbersMapReverseListSortedReverse\
    \ : List[(Long, Int)]) : Boolean = {\n            if (a == 1) return true\n  \
    \          if (primeNumbersMapReverseSet.contains(a)) return true\n          \
    \  for (i <- primeNumbersMapReverseListSortedReverse) {\n                if (a\
    \ % i._1 == 0) {\n                    if (isMultiplyPrime(a / i._1, primeNumbersMapReverseListSortedReverse))\
    \ return true\n                }\n            }\n            return false\n  \
    \      }\n        isMultiplyPrime(a, primeNumbersMapReverseListSortedReverse)",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet = primes.toSet\n\
    \        val primesMap = primes.zipWithIndex.toMap\n        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n < 2) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            for (i <-\
    \ 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0) return false\n \
    \           }\n            return true\n        }\n        def isMultiplyPrime(a\
    \ : Long, primes : List[Int], primesSet : Set[Int], primesMap : Map[Int, Int])\
    \ : Boolean = {\n            if (a == 1) return true\n            if (primesSet.contains(a.toInt))\
    \ return true\n            for (i <- primes) {\n                if (a % i == 0)\
    \ {\n                    if (isMultiplyPrime(a / i, primes, primesSet, primesMap))\
    \ return true\n                }\n            }\n            return false\n  \
    \      }\n        isMultiplyPrime(a, primes, primesSet, primesMap)", "       \
    \ val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a\
    \ % _ == 0)\n        primeFactors.length == 3", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        var result = false\n        for (i <- 0 to primes.length\
    \ - 1) {\n            for (j <- i + 1 to primes.length - 1) {\n              \
    \  for (k <- j + 1 to primes.length - 1) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) {\n                        result = true\n   \
    \                 }\n                }\n            }\n        }\n        result",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a\
    \ % _ == 0)\n        primeFactors.length == 3", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val factors = primes.filter(a % _ == 0)\n        if\
    \ (factors.length == 3) {\n            true\n        } else {\n            false\n\
    \        }", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        def isPrime(a\
    \ : Long) : Boolean = {\n            if (a == 1) return false\n            if\
    \ (a == 2) return true\n            if (a % 2 == 0) return false\n           \
    \ val sqrt = sqrt(a).toInt\n            for (i <- 3 to sqrt by 2) {\n        \
    \        if (a % i == 0) return false\n            }\n            return true\n\
    \        }\n        def isMultiplyPrime(a : Long, primes : List[Int]) : Boolean\
    \ = {\n            if (a == 1) return true\n            if (primes.isEmpty) return\
    \ false\n            if (a % primes.head == 0) return isMultiplyPrime(a / primes.head,\
    \ primes)\n            return isMultiplyPrime(a, primes.tail)\n        }\n   \
    \     return isMultiplyPrime(a, primes)", "        val primes = List(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val factors = new ListBuffer[Int]\n        var i = 0\n    \
    \    var n = a\n        while (n > 1) {\n            if (n % primes(i) == 0) {\n\
    \                factors += primes(i)\n                n /= primes(i)\n      \
    \      }\n            else i += 1\n        }\n        factors.length == 3", " \
    \       val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a\
    \ % _ == 0)\n        primeFactors.length == 3", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2l to 100l) {\n            if (isPrime(i)) primes += i\n  \
    \      }\n        for (i <- 0 until primes.length) {\n            for (j <- i\
    \ until primes.length) {\n                for (k <- j until primes.length) {\n\
    \                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97)\n        val primesSet = primes.toSet\n        val\
    \ primeFactors = primes.filter(a % _ == 0)\n        if (primeFactors.length ==\
    \ 3) {\n            val product = primeFactors.reduceLeft(_ * _)\n           \
    \ if (product == a) true else false\n        } else false", "        val primes\
    \ = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97)\n        val primesSet = primes.toSet\n        val\
    \ primesList = primes.toList\n        def isPrime(x : Long) : Boolean = {\n  \
    \          if (x == 1) false\n            else if (x == 2) true\n            else\
    \ if (x % 2 == 0) false\n            else {\n                val sqrt = sqrt(x).toLong\n\
    \                (3 to sqrt by 2).forall(x % _ != 0)\n            }\n        }\n\
    \        def isMultiplyPrime(a : Long, primes : List[Int]) : Boolean = {\n   \
    \         if (primes.isEmpty) false\n            else if (a % primes.head == 0)\
    \ {\n                val b = a / primes.head\n                if (isPrime(b))\
    \ true\n                else isMultiplyPrime(a, primes.tail)\n            }\n\
    \            else isMultiplyPrime(a, primes.tail)\n        }\n        isMultiplyPrime(a,\
    \ primesList)", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet\
    \ = primes.toSet\n        val primesSet2 = primesSet.map(x => x * x)\n       \
    \ val primesSet3 = primesSet.map(x => x * x * x)\n        val primesSet4 = primesSet.map(x\
    \ => x * x * x * x)\n        val primesSet5 = primesSet.map(x => x * x * x * x\
    \ * x)\n        val primesSet6 = primesSet.map(x => x * x * x * x * x * x)\n \
    \       val primesSet7 = primesSet.map(x => x * x * x * x * x * x * x)\n     \
    \   val primesSet8 = primesSet.map(x => x * x * x * x * x * x * x * x)\n     \
    \   val primesSet9 = primesSet.map(x => x * x * x * x * x * x * x * x * x)\n \
    \       val primesSet10 = primesSet.map(x => x * x * x * x * x * x * x * x * x\
    \ * x)\n        val primesSet11 = primesSet.map(x => x * x * x * x * x * x * x\
    \ * x * x * x * x)\n        val primesSet12 = primesSet.map(x => x * x * x * x\
    \ * x * x * x * x * x * x * x * x)\n        val primesSet13 = primesSet.map(x\
    \ => x * x * x * x * x * x * x * x * x * x * x * x * x)\n        val primesSet14\
    \ = primesSet.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x)\n\
    \        val primesSet15 = primesSet.map(x => x * x * x * x * x *", "        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors = new ListBuffer[Int]\n\
    \        var temp = a\n        for (i <- primes) {\n            while (temp %\
    \ i == 0) {\n                factors += i\n                temp /= i\n       \
    \     }\n        }\n        factors.length == 3", "        var b = a\n       \
    \ var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n       \
    \ var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n       \
    \ var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n       \
    \ var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n       \
    \ var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n       \
    \ var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n       \
    \ var aa = 0\n        var ab = 0\n        var ac = 0\n        var ad = 0\n   \
    \     var ae = 0\n        var af = 0\n        var ag = 0\n        var ah = 0\n\
    \        var ai = 0\n        var aj = 0\n        var ak = 0\n        var al =\
    \ 0\n        var am = 0\n        var an = 0\n        var ao = 0\n        var ap\
    \ = 0\n        var aq = 0\n        var ar = 0\n        var as = 0\n        var\
    \ at = 0\n        var au = 0\n        var av = 0\n        var aw = 0\n       \
    \ var ax = 0\n        var ay = 0\n        var az = 0\n        var ba = 0\n   \
    \     var bb = 0\n        var bc = 0\n        var bd = 0\n        var be = 0\n\
    \        var bf = 0\n        var bg = 0\n        var bh = 0\n        var bi =\
    \ 0\n        var bj = 0\n        var bk = 0\n        var bl = 0\n        var bm\
    \ = 0\n        var bn = 0\n        var bo = 0\n        var bp = 0\n        var\
    \ bq = 0\n        var br = 0\n        var bs = 0\n        var bt = 0\n       \
    \ var bu = 0\n        var bv = 0\n        var bw = 0\n        var bx = 0\n   \
    \     var by = 0\n        var bz = 0\n        var ca = 0\n        var cb = 0\n\
    \        var cc = 0\n        var cd = 0\n       ", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        var result = false\n        for (i <- 0 to primes.length\
    \ - 1) {\n            for (j <- i + 1 to primes.length - 1) {\n              \
    \  for (k <- j + 1 to primes.length - 1) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) {\n                        result = true\n   \
    \                 }\n                }\n            }\n        }\n        result",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var result = false\n      \
    \  for (i <- 0 to primes.length - 1) {\n            for (j <- i + 1 to primes.length\
    \ - 1) {\n                for (k <- j + 1 to primes.length - 1) {\n          \
    \          if (primes(i) * primes(j) * primes(k) == a) {\n                   \
    \     result = true\n                    }\n                }\n            }\n\
    \        }\n        result", "        val primes = List(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val factors = primes.filter(a % _ == 0)\n        factors.size == 3", " \
    \       val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var i = 0\n        var\
    \ n = a\n        while (i < primes.length && n > 1) {\n            if (n % primes(i)\
    \ == 0) {\n                n /= primes(i)\n            } else {\n            \
    \    i += 1\n            }\n        }\n        n == 1", "        val primes =\
    \ List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a % _ == 0)\n\
    \        primeFactors.length == 3", "        val primes = List(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val factors = primes.filter(a % _ == 0)\n        factors.length\
    \ == 3", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors = primes.filter(a\
    \ % _ == 0)\n        factors.size == 3", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2l to a) {\n            if (isPrime(i)) primes += i\n     \
    \   }\n        for (i <- 0 until primes.length) {\n            for (j <- i until\
    \ primes.length) {\n                for (k <- j until primes.length) {\n     \
    \               if (primes(i) * primes(j) * primes(k) == a) return true\n    \
    \            }\n            }\n        }\n        false", "        val primes\
    \ = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97)\n        val factors = new ArrayBuffer[Int]\n  \
    \      for (i <- 0 until primes.length) {\n            if (a % primes(i) == 0)\
    \ factors += primes(i)\n        }\n        if (factors.length == 3) true else\
    \ false", "        val primes = ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet\
    \ = primes.toSet\n        val primesList = primes.toList\n        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n < 2) return false\n            if (n\
    \ == 2) return true\n            if (n % 2 == 0) return false\n            val\
    \ limit = sqrt(n).toLong\n            for (i <- 3 to limit by 2) {\n         \
    \       if (n % i == 0) return false\n            }\n            true\n      \
    \  }\n        def isMultiplyPrime(a : Long, primes : List[Int]) : Boolean = {\n\
    \            if (primes.isEmpty) return false\n            val p = primes.head\n\
    \            if (a % p == 0) {\n                val b = a / p\n              \
    \  if (b == 1) return true\n                if (primesSet.contains(b.toInt)) return\
    \ true\n                if (isPrime(b)) return true\n                return isMultiplyPrime(b,\
    \ primes)\n            }\n            isMultiplyPrime(a, primes.tail)\n      \
    \  }\n        isMultiplyPrime(a, primesList)", "        val primes = List(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        val factors = primes.filter(a % _ == 0)\n        factors.length\
    \ == 3", "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i until primes.length) {\n         \
    \       for (k <- j until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        val primes = List(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val primesSet = primes.toSet\n        def isPrime(a : Long) : Boolean =\
    \ {\n            if (a == 1) return false\n            if (a == 2) return true\n\
    \            if (a % 2 == 0) return false\n            for (i <- 3 to sqrt(a).toInt\
    \ by 2) {\n                if (a % i == 0) return false\n            }\n     \
    \       return true\n        }\n        def isMultiplyPrime(a : Long, primes :\
    \ List[Int]) : Boolean = {\n            if (primes.isEmpty) return false\n   \
    \         val prime = primes.head\n            if (a % prime == 0) {\n       \
    \         if (a / prime == 1) return true\n                return isMultiplyPrime(a\
    \ / prime, primes)\n            }\n            return isMultiplyPrime(a, primes.tail)\n\
    \        }\n        return isMultiplyPrime(a, primes)", "        val primes =\
    \ List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        var result = false\n        for (i <- 0 to\
    \ primes.length - 1) {\n            for (j <- i + 1 to primes.length - 1) {\n\
    \                for (k <- j + 1 to primes.length - 1) {\n                   \
    \ if (primes(i) * primes(j) * primes(k) == a) {\n                        result\
    \ = true\n                    }\n                }\n            }\n        }\n\
    \        result", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors\
    \ = primes.filter(a % _ == 0)\n        primeFactors.length == 3", "        val\
    \ primes = ArrayBuffer[Long]()\n        for (i <- 2l to a) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        val primesSet = primes.toSet\n        for (i\
    \ <- primes) {\n            for (j <- primes) {\n                for (k <- primes)\
    \ {\n                    if (i * j * k == a) return true\n                }\n\
    \            }\n        }\n        false", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n == 1) return false\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n\
    \            for (i <- 3l to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        val sqrt =\
    \ sqrt(a).toLong\n        for (i <- 2l to sqrt) {\n            if (isPrime(i)\
    \ && a % i == 0) {\n                val b = a / i\n                if (isPrime(b))\
    \ {\n                    val c = b / i\n                    if (isPrime(c)) return\
    \ true\n                }\n            }\n        }\n        return false", " \
    \       val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        primes.exists(x => a %\
    \ x == 0 && isMultiplyPrime(a / x))", "        val primes = List(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        for (i <- 0 to primes.length - 1) {\n            for (j <- i +\
    \ 1 to primes.length - 1) {\n                for (k <- j + 1 to primes.length\
    \ - 1) {\n                    if (primes(i) * primes(j) * primes(k) == a) return\
    \ true\n                }\n            }\n        }\n        false", "       \
    \ def isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n \
    \           if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            for (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i ==\
    \ 0) return false\n            }\n            return true\n        }\n       \
    \ val primes = new ArrayBuffer[Long]\n        for (i <- 2 to sqrt(a).toInt) {\n\
    \            if (isPrime(i)) {\n                if (a % i == 0) {\n          \
    \          primes += i\n                    if (primes.length == 3) return true\n\
    \                }\n            }\n        }\n        return false", "       \
    \ def isPrime(a : Long) : Boolean = {\n            if (a == 1) return false\n\
    \            if (a == 2) return true\n            if (a % 2 == 0) return false\n\
    \            for (i <- 3 to sqrt(a).toInt by 2) {\n                if (a % i ==\
    \ 0) return false\n            }\n            return true\n        }\n       \
    \ if (a == 1) return false\n        if (a == 2) return true\n        if (a % 2\
    \ == 0) return false\n        for (i <- 3 to sqrt(a).toInt by 2) {\n         \
    \   if (a % i == 0) {\n                if (isPrime(i) && isPrime(a / i)) return\
    \ true\n            }\n        }\n        return false", "        val primes =\
    \ Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        var i = 0\n        while (i < primes.length)\
    \ {\n            if (a % primes(i) == 0) {\n                var b = a / primes(i)\n\
    \                var j = 0\n                while (j < primes.length) {\n    \
    \                if (b % primes(j) == 0) {\n                        var c = b\
    \ / primes(j)\n                        var k = 0\n                        while\
    \ (k < primes.length) {\n                            if (c % primes(k) == 0) {\n\
    \                                return true\n                            }\n\
    \                            k += 1\n                        }\n             \
    \       }\n                    j += 1\n                }\n            }\n    \
    \        i += 1\n        }\n        return false", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        var result = false\n        for (i <- 0 to primes.length\
    \ - 1) {\n            for (j <- i + 1 to primes.length - 1) {\n              \
    \  for (k <- j + 1 to primes.length - 1) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) {\n                        result = true\n   \
    \                 }\n                }\n            }\n        }\n        result",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors = primes.filter(a\
    \ % _ == 0)\n        factors.length == 3", "        val primes = ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        var i = 0\n        while (i < primes.length) {\n  \
    \          if (a % primes(i) == 0) {\n                var b = a / primes(i)\n\
    \                var j = 0\n                while (j < primes.length) {\n    \
    \                if (b % primes(j) == 0) {\n                        var c = b\
    \ / primes(j)\n                        var k = 0\n                        while\
    \ (k < primes.length) {\n                            if (c % primes(k) == 0) {\n\
    \                                return true\n                            }\n\
    \                            k += 1\n                        }\n             \
    \       }\n                    j += 1\n                }\n            }\n    \
    \        i += 1\n        }\n        return false", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val factors = new HashMap[Long, Int]()\n        var\
    \ b = a\n        for (p <- primes) {\n            while (b % p == 0) {\n     \
    \           factors(p) = factors.getOrElse(p, 0) + 1\n                b /= p\n\
    \            }\n        }\n        if (b != 1) return false\n        var count\
    \ = 0\n        for (f <- factors) {\n            if (f._2 > 0) count += 1\n  \
    \      }\n        return count == 3", "        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n == 2) return true\n            if (n % 2 == 0) return\
    \ false\n            val sqrt = sqrt(n).toLong\n            for (i <- 3l to sqrt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        val sqrt = sqrt(a).toLong\n        for\
    \ (i <- 2l to sqrt) {\n            if (a % i == 0) {\n                if (isPrime(i)\
    \ && isPrime(a / i)) {\n                    for (j <- 2l to sqrt) {\n        \
    \                if (i * j == a) {\n                            if (isPrime(j))\
    \ return true\n                        }\n                    }\n            \
    \    }\n            }\n        }\n        return false", "        val primes =\
    \ List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a % _ == 0)\n\
    \        primeFactors.length == 3", "        def isPrime(a : Long) : Boolean =\
    \ {\n            if (a == 1) return false\n            if (a == 2) return true\n\
    \            if (a % 2 == 0) return false\n            val sqrt = sqrt(a).toLong\n\
    \            for (i <- 3l to sqrt by 2) {\n                if (a % i == 0) return\
    \ false\n            }\n            return true\n        }\n        val sqrt =\
    \ sqrt(a).toLong\n        for (i <- 2l to sqrt) {\n            if (a % i == 0)\
    \ {\n                if (isPrime(i) && isPrime(a / i)) {\n                   \
    \ return true\n                }\n            }\n        }\n        return false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primes2 = primes.filter(x\
    \ => a % x == 0)\n        primes2.size == 3", "        def isPrime(n : Long) :\
    \ Boolean = {\n            if (n == 1) return false\n            if (n == 2) return\
    \ true\n            if (n % 2 == 0) return false\n            val sqrt = math.sqrt(n).toLong\n\
    \            for (i <- 3 to sqrt by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        val sqrt =\
    \ math.sqrt(a).toLong\n        for (i <- 2 to sqrt) {\n            if (a % i ==\
    \ 0) {\n                val b = a / i\n                if (isPrime(i) && isPrime(b))\
    \ return true\n            }\n        }\n        return false", "        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n < 2) return false\n            if (n\
    \ == 2) return true\n            if (n % 2 == 0) return false\n            for\
    \ (i <- 3l to sqrt(n).toLong by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        def isMultiplyPrime(a\
    \ : Long, primes : List[Long]) : Boolean = {\n            if (a == 1) return true\n\
    \            if (a < 1) return false\n            for (p <- primes) {\n      \
    \          if (a % p == 0) {\n                    if (isMultiplyPrime(a / p, primes))\
    \ return true\n                }\n            }\n            return false\n  \
    \      }\n        val primes = (2l to sqrt(a).toLong).filter(isPrime(_)).toList\n\
    \        return isMultiplyPrime(a, primes)", "        val primes = List(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        for (i <- primes) {\n            for (j <- primes) {\n\
    \                for (k <- primes) {\n                    if (i * j * k == a)\
    \ {\n                        return true\n                    }\n            \
    \    }\n            }\n        }\n        return false", "        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n == 1) false\n            else if (n\
    \ < 4) true\n            else if (n % 2 == 0) false\n            else if (n <\
    \ 9) true\n            else if (n % 3 == 0) false\n            else {\n      \
    \          val r = floor(sqrt(n)).toLong\n                var f = 5\n        \
    \        while (f <= r) {\n                    if (n % f == 0) return false\n\
    \                    if (n % (f + 2) == 0) return false\n                    f\
    \ += 6\n                }\n                true\n            }\n        }\n  \
    \      val primes = new ArrayBuffer[Long]\n        var i = 1l\n        while (i\
    \ <= a) {\n            if (isPrime(i)) primes += i\n            i += 1\n     \
    \   }\n        val primesSet = primes.toSet\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i + 1 until primes.length) {\n                for (k\
    \ <- j + 1 until primes.length) {\n                    if (primes(i) * primes(j)\
    \ * primes(k) == a) return true\n                }\n            }\n        }\n\
    \        false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        primes.filter(x\
    \ => a % x == 0).length == 3", "        var result = false\n        var primes\
    \ = ArrayBuffer[Long]()\n        for (i <- 2l to a) {\n            if (isPrime(i))\
    \ {\n                primes += i\n            }\n        }\n        for (i <-\
    \ 0 until primes.length) {\n            for (j <- i + 1 until primes.length) {\n\
    \                for (k <- j + 1 until primes.length) {\n                    if\
    \ (primes(i) * primes(j) * primes(k) == a) {\n                        result =\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       result", "        def isPrime(n : Long) : Boolean = {\n            if\
    \ (n <= 1) return false\n            if (n == 2) return true\n            if (n\
    \ % 2 == 0) return false\n            val sqrt = sqrt(n).toLong\n            for\
    \ (i <- 3l to sqrt by 2) {\n                if (n % i == 0) return false\n   \
    \         }\n            return true\n        }\n        val sqrt = sqrt(a).toLong\n\
    \        for (i <- 2l to sqrt) {\n            if (a % i == 0) {\n            \
    \    val b = a / i\n                if (isPrime(i) && isPrime(b)) return true\n\
    \            }\n        }\n        return false", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primeFactors = primes.filter(x => a % x == 0)\n\
    \        if (primeFactors.length == 3) true else false", "        val primes =\
    \ List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(p => a % p\
    \ == 0)\n        primeFactors.length == 3", "        val primes = Array(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        for (i <- 0 until primes.length) {\n            for (j\
    \ <- 0 until primes.length) {\n                for (k <- 0 until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        return false", "       \
    \ val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a\
    \ % _ == 0)\n        primeFactors.size == 3", "        val primes = Array(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        primes.exists(p => a % p == 0 && isMultiplyPrime(a / p))",
  "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i until primes.length) {\n                for (k <-\
    \ j until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primes2 = primes.filter(x\
    \ => a % x == 0)\n        primes2.size == 3", "        val primes = List(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        val factors = primes.filter(a % _ == 0)\n        factors.length\
    \ == 3", "        def isPrime(n : Long) : Boolean = {\n            if (n < 2)\
    \ return false\n            if (n == 2) return true\n            if (n % 2 ==\
    \ 0) return false\n            for (i <- 3 to sqrt(n).toInt by 2) {\n        \
    \        if (n % i == 0) return false\n            }\n            return true\n\
    \        }\n        for (i <- 2 to sqrt(a).toInt) {\n            if (a % i ==\
    \ 0) {\n                if (isPrime(i) && isPrime(a / i)) {\n                \
    \    if (isPrime(a / (i * (a / i)))) return true\n                }\n        \
    \    }\n        }\n        return false", "        val primes = List(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        primes.exists(p => a % p == 0 && isMultiplyPrime(a / p))",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a\
    \ % _ == 0)\n        primeFactors.length == 3", "        if (a == 1) return false\n\
    \        if (a == 2) return true\n        if (a == 3) return true\n        if\
    \ (a == 5) return true\n        if (a == 7) return true\n        if (a == 11)\
    \ return true\n        if (a == 13) return true\n        if (a == 17) return true\n\
    \        if (a == 19) return true\n        if (a == 23) return true\n        if\
    \ (a == 29) return true\n        if (a == 31) return true\n        if (a == 37)\
    \ return true\n        if (a == 41) return true\n        if (a == 43) return true\n\
    \        if (a == 47) return true\n        if (a == 53) return true\n        if\
    \ (a == 59) return true\n        if (a == 61) return true\n        if (a == 67)\
    \ return true\n        if (a == 71) return true\n        if (a == 73) return true\n\
    \        if (a == 79) return true\n        if (a == 83) return true\n        if\
    \ (a == 89) return true\n        if (a == 97) return true\n        if (a % 2 ==\
    \ 0) return isMultiplyPrime(a / 2)\n        if (a % 3 == 0) return isMultiplyPrime(a\
    \ / 3)\n        if (a % 5 == 0) return isMultiplyPrime(a / 5)\n        if (a %\
    \ 7 == 0) return isMultiplyPrime(a / 7)\n        if (a % 11 == 0) return isMultiplyPrime(a\
    \ / 11)\n        if (a % 13 == 0) return isMultiplyPrime(a / 13)\n        if (a\
    \ % 17 == 0) return isMultiplyPrime(a / 17)\n        if (a % 19 == 0) return isMultiplyPrime(a\
    \ / 19)\n        if (a % 23 == 0) return isMultiplyPrime(a / 23)\n        if (a\
    \ % 29 == 0) return isMultiplyPrime(a / 29)\n        if (a % 31 == 0) return isMultiplyPrime(a\
    \ / 31)\n        if (a % 37 == 0) return isMultiplyPrime(a / 37)", "        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors = new ListBuffer[Int]\n\
    \        var aa = a\n        for (i <- primes) {\n            while (aa % i ==\
    \ 0) {\n                factors += i\n                aa /= i\n            }\n\
    \        }\n        if (factors.length == 3) true else false", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val factors = new ListBuffer[Int]\n       \
    \ var n = a\n        for (p <- primes) {\n            while (n % p == 0) {\n \
    \               factors += p\n                n /= p\n            }\n        }\n\
    \        factors.length == 3", "        val primes = List(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        for (i <- 0 to primes.length - 1) {\n            for (j <- i to primes.length\
    \ - 1) {\n                for (k <- j to primes.length - 1) {\n              \
    \      if (primes(i) * primes(j) * primes(k) == a) return true\n             \
    \   }\n            }\n        }\n        return false", "        val primes =\
    \ List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val factors = new ListBuffer[Int]\n       \
    \ var n = a\n        for (p <- primes) {\n            while (n % p == 0) {\n \
    \               factors += p\n                n /= p\n            }\n        }\n\
    \        factors.length == 3", "        val primes = List(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val factors = primes.filter(a % _ == 0)\n        factors.length == 3",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var result = false\n      \
    \  for (i <- 0 to primes.length - 1) {\n            for (j <- i to primes.length\
    \ - 1) {\n                for (k <- j to primes.length - 1) {\n              \
    \      if (primes(i) * primes(j) * primes(k) == a) {\n                       \
    \ result = true\n                    }\n                }\n            }\n   \
    \     }\n        result", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  def isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n\
    \            if (n == 2) return true\n            val sqrt = sqrt(n).toLong\n\
    \            for (i <- 2 to sqrt) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        def isMultiplyPrime(a\
    \ : Long, primes : List[Int]) : Boolean = {\n            if (a == 1) return true\n\
    \            if (primes.isEmpty) return false\n            if (a % primes.head\
    \ == 0) {\n                if (isMultiplyPrime(a / primes.head, primes)) return\
    \ true\n            }\n            return isMultiplyPrime(a, primes.tail)\n  \
    \      }\n        return isMultiplyPrime(a, primes)", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        def isMultiplyPrime(a : Long, primes : List[Int]) :\
    \ Boolean = {\n            if (primes.isEmpty) false\n            else if (a %\
    \ primes.head == 0) {\n                if (a / primes.head == 1) true\n      \
    \          else isMultiplyPrime(a / primes.head, primes)\n            }\n    \
    \        else isMultiplyPrime(a, primes.tail)\n        }\n        isMultiplyPrime(a,\
    \ primes)", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors\
    \ = new ListBuffer[Int]\n        var i = 0\n        while (a > 1) {\n        \
    \    if (a % primes(i) == 0) {\n                factors += primes(i)\n       \
    \         a /= primes(i)\n            }\n            else i += 1\n        }\n\
    \        factors.length == 3", "        val primes = List(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val primeFactors = primes.filter(a % _ == 0)\n        primeFactors.length\
    \ == 3", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors = new\
    \ ListBuffer[Int]\n        var b = a\n        for (i <- primes) {\n          \
    \  while (b % i == 0) {\n                factors += i\n                b /= i\n\
    \            }\n        }\n        factors.length == 3", "        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n == 1) false\n            else if (n\
    \ < 4) true\n            else if (n % 2 == 0) false\n            else if (n <\
    \ 9) true\n            else if (n % 3 == 0) false\n            else {\n      \
    \          val r = floor(sqrt(n)).toLong\n                var f = 5l\n       \
    \         while (f <= r) {\n                    if (n % f == 0) return false\n\
    \                    if (n % (f + 2) == 0) return false\n                    f\
    \ += 6\n                }\n                true\n            }\n        }\n  \
    \      val primes = new ArrayBuffer[Long]\n        for (i <- 1l to a) {\n    \
    \        if (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i + 1 until primes.length) {\n                for (k\
    \ <- j + 1 until primes.length) {\n                    if (primes(i) * primes(j)\
    \ * primes(k) == a) return true\n                }\n            }\n        }\n\
    \        false", "        if (a == 1) return false\n        var b = a\n      \
    \  var c = 2\n        while (b > 1) {\n            if (b % c == 0) {\n       \
    \         b /= c\n                if (isPrime(c)) {\n                    if (b\
    \ == 1) return true\n                    else if (isPrime(b)) return true\n  \
    \                  else return false\n                }\n            }\n     \
    \       else c += 1\n        }\n        false", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        var result = false\n        for (i <- 0 to primes.length\
    \ - 1) {\n            for (j <- i + 1 to primes.length - 1) {\n              \
    \  for (k <- j + 1 to primes.length - 1) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) {\n                        result = true\n   \
    \                 }\n                }\n            }\n        }\n        result",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var result = false\n      \
    \  for (i <- primes) {\n            if (a % i == 0) {\n                result\
    \ = true\n            }\n        }\n        result", "        def isPrime(n :\
    \ Long) : Boolean = {\n            if (n <= 1) false\n            else if (n ==\
    \ 2) true\n            else !(2 to (sqrt(n).toInt)).exists(x => n % x == 0)\n\
    \        }\n        val primes = (2 to 100).filter(isPrime(_))\n        val primeSet\
    \ = primes.toSet\n        def isMultiplyPrime(a : Long, primes : List[Int]) :\
    \ Boolean = {\n            if (primes.isEmpty) false\n            else if (a ==\
    \ 1) true\n            else if (a % primes.head == 0) isMultiplyPrime(a / primes.head,\
    \ primes)\n            else isMultiplyPrime(a, primes.tail)\n        }\n     \
    \   isMultiplyPrime(a, primes)", "        def isPrime(n : Long) : Boolean = {\n\
    \            if (n < 2) return false\n            if (n == 2) return true\n  \
    \          if (n % 2 == 0) return false\n            for (i <- 3l to sqrt(n).toLong\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        for (i <- 2l to a / 2) {\n           \
    \ if (isPrime(i) && a % i == 0) {\n                val b = a / i\n           \
    \     for (j <- 2l to b / 2) {\n                    if (isPrime(j) && b % j ==\
    \ 0) {\n                        val c = b / j\n                        if (isPrime(c))\
    \ return true\n                    }\n                }\n            }\n     \
    \   }\n        return false", "        def isPrime(n : Long) : Boolean = {\n \
    \           if (n == 1) return false\n            if (n == 2) return true\n  \
    \          if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        def isMultiplyPrime(a : Long, primes :\
    \ List[Long]) : Boolean = {\n            if (a == 1) return true\n           \
    \ if (primes.isEmpty) return false\n            if (a % primes.head == 0) return\
    \ isMultiplyPrime(a / primes.head, primes)\n            return isMultiplyPrime(a,\
    \ primes.tail)\n        }\n        val primes = (1 to 100).filter(isPrime(_)).map(_.toLong).toList\n\
    \        return isMultiplyPrime(a, primes)", "        var n = a\n        var primes\
    \ = List[Long]()\n        while (n % 2 == 0) {\n            primes = 2 :: primes\n\
    \            n /= 2\n        }\n        var i = 3\n        while (i <= sqrt(n))\
    \ {\n            while (n % i == 0) {\n                primes = i :: primes\n\
    \                n /= i\n            }\n            i += 2\n        }\n      \
    \  if (n > 2) primes = n :: primes\n        primes.length == 3", "        def\
    \ isPrime(n : Long) : Boolean = {\n            if (n < 2) return false\n     \
    \       if (n == 2) return true\n            if (n % 2 == 0) return false\n  \
    \          for (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i ==\
    \ 0) return false\n            }\n            return true\n        }\n       \
    \ def isMultiplyPrime(a : Long, primes : List[Long]) : Boolean = {\n         \
    \   if (a == 1) return true\n            if (primes.isEmpty) return false\n  \
    \          if (a % primes.head == 0) return isMultiplyPrime(a / primes.head, primes)\n\
    \            return isMultiplyPrime(a, primes.tail)\n        }\n        return\
    \ isMultiplyPrime(a, (2l to sqrt(a).toLong).filter(isPrime(_)).toList)", "   \
    \     val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = new ArrayBuffer[Int]\n\
    \        var aa = a\n        for (i <- 0 until primes.length) {\n            while\
    \ (aa % primes(i) == 0) {\n                primeFactors += primes(i)\n       \
    \         aa /= primes(i)\n            }\n        }\n        if (aa > 1) return\
    \ false\n        if (primeFactors.length != 3) return false\n        return true",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a\
    \ % _ == 0)\n        primeFactors.size == 3", "        def isPrime(a : Long) :\
    \ Boolean = {\n            if (a == 1) return false\n            if (a == 2) return\
    \ true\n            if (a % 2 == 0) return false\n            val upper = sqrt(a).toLong\n\
    \            for (i <- 3l to upper by 2) {\n                if (a % i == 0) return\
    \ false\n            }\n            return true\n        }\n        val upper\
    \ = sqrt(a).toLong\n        for (i <- 2l to upper) {\n            if (a % i ==\
    \ 0) {\n                if (isPrime(i) && isPrime(a / i)) {\n                \
    \    return true\n                }\n            }\n        }\n        return\
    \ false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors = new\
    \ ArrayBuffer[Int]\n        var i = 0\n        while (a > 1) {\n            if\
    \ (a % primes(i) == 0) {\n                factors += primes(i)\n             \
    \   a /= primes(i)\n            }\n            else i += 1\n        }\n      \
    \  factors.size == 3", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primes2 = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primes3 = List(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val primes4 = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primes5\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val primes6 = List(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val primes7 = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primes8 = List(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        val primes9 = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53,", "        def isPrime(n : Long) : Boolean = {\n   \
    \         if (n < 2) return false\n            if (n == 2) return true\n     \
    \       if (n % 2 == 0) return false\n            val sqrtN = sqrt(n).toLong\n\
    \            for (i <- 3l to sqrtN by 2) {\n                if (n % i == 0) return\
    \ false\n            }\n            return true\n        }\n        val sqrtA\
    \ = sqrt(a).toLong\n        for (i <- 2l to sqrtA) {\n            if (isPrime(i)\
    \ && a % i == 0) {\n                val b = a / i\n                if (isPrime(b))\
    \ {\n                    val c = b / i\n                    if (isPrime(c)) return\
    \ true\n                }\n            }\n        }\n        return false", " \
    \       val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = new\
    \ ArrayBuffer[Int]\n        var b = a\n        for (i <- 0 until primes.length)\
    \ {\n            while (b % primes(i) == 0) {\n                primeFactors +=\
    \ primes(i)\n                b /= primes(i)\n            }\n        }\n      \
    \  if (b != 1) return false\n        if (primeFactors.length != 3) return false\n\
    \        return true", "        def isPrime(a : Long) : Boolean = {\n        \
    \    if (a == 2) return true\n            if (a % 2 == 0) return false\n     \
    \       for (i <- 3 to sqrt(a).toInt by 2) {\n                if (a % i == 0)\
    \ return false\n            }\n            return true\n        }\n        for\
    \ (i <- 2 to sqrt(a).toInt) {\n            if (a % i == 0) {\n               \
    \ if (isPrime(i) && isPrime(a / i)) {\n                    return true\n     \
    \           }\n            }\n        }\n        return false", "        var primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        var primeFactors = List[Long]()\n        var\
    \ i = 0\n        while (a != 1) {\n            if (a % primes(i) == 0) {\n   \
    \             primeFactors = primeFactors :+ primes(i)\n                a = a\
    \ / primes(i)\n            }\n            else i += 1\n        }\n        if (primeFactors.length\
    \ == 3) true else false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  for (i <- primes) {\n            for (j <- primes) {\n                for (k\
    \ <- primes) {\n                    if (i * j * k == a) return true\n        \
    \        }\n            }\n        }\n        return false", "        def isPrime(n\
    \ : Long) : Boolean = {\n            if (n == 1) false\n            else if (n\
    \ < 4) true\n            else if (n % 2 == 0) false\n            else if (n <\
    \ 9) true\n            else if (n % 3 == 0) false\n            else {\n      \
    \          val r = floor(sqrt(n)).toLong\n                var f = 5\n        \
    \        while (f <= r) {\n                    if (n % f == 0) return false\n\
    \                    if (n % (f + 2) == 0) return false\n                    f\
    \ += 6\n                }\n                true\n            }\n        }\n  \
    \      def isMultiplyPrime(a : Long, primes : List[Long]) : Boolean = {\n    \
    \        if (primes.isEmpty) false\n            else if (a % primes.head == 0)\
    \ {\n                if (a / primes.head == 1) true\n                else isMultiplyPrime(a\
    \ / primes.head, primes)\n            }\n            else isMultiplyPrime(a, primes.tail)\n\
    \        }\n        isMultiplyPrime(a, List.range(1, 100).filter(isPrime(_)).map(_.toLong))",
  "        var result = false\n        var primes = List(2l, 3l, 5l, 7l, 11l, 13l,\
    \ 17l, 19l, 23l, 29l, 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l, 67l, 71l, 73l, 79l,\
    \ 83l, 89l, 97l)\n        for (i <- primes) {\n            if (a % i == 0) {\n\
    \                var b = a / i\n                for (j <- primes) {\n        \
    \            if (b % j == 0) {\n                        var c = b / j\n      \
    \                  for (k <- primes) {\n                            if (c % k\
    \ == 0) {\n                                result = true\n                   \
    \         }\n                        }\n                    }\n              \
    \  }\n            }\n        }\n        result", "        val primes = Array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        for (i <- 0 until primes.length) {\n            for\
    \ (j <- i until primes.length) {\n                for (k <- j until primes.length)\
    \ {\n                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = (2l to 100l).filter(isPrime)\n        primes.exists(x => a % x == 0 && isMultiplyPrime(a\
    \ / x))", "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0\
    \ until primes.length) {\n            for (j <- i until primes.length) {\n   \
    \             for (k <- j until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        val primes = ArrayBuffer(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val factors = ArrayBuffer[Long]()\n        var i = 0\n        var\
    \ n = a\n        while (n > 1) {\n            if (n % primes(i) == 0) {\n    \
    \            factors += primes(i)\n                n /= primes(i)\n          \
    \  } else {\n                i += 1\n            }\n        }\n        factors.length\
    \ == 3", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primes2 = primes.filter(x\
    \ => a % x == 0)\n        if (primes2.length == 3) true else false", "       \
    \ def isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrt = sqrt(n).toLong\n            for (i <- 3l to sqrt by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        val sqrt = sqrt(a).toLong\n        for (i <-\
    \ 2l to sqrt) {\n            if (isPrime(i) && a % i == 0) {\n               \
    \ val b = a / i\n                if (isPrime(b)) {\n                    val c\
    \ = b / i\n                    if (isPrime(c)) return true\n                }\n\
    \            }\n        }\n        return false", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val factors = new ListBuffer[Int]\n        var b =\
    \ a\n        for (p <- primes) {\n            while (b % p == 0) {\n         \
    \       factors += p\n                b /= p\n            }\n        }\n     \
    \   factors.size == 3", "        def isPrime(n : Long) : Boolean = {\n       \
    \     if (n < 2) return false\n            if (n == 2) return true\n         \
    \   if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt by\
    \ 2) {\n                if (n % i == 0) return false\n            }\n        \
    \    return true\n        }\n        val primes = ArrayBuffer[Long]()\n      \
    \  for (i <- 2 to sqrt(a).toInt) {\n            if (isPrime(i)) primes += i\n\
    \        }\n        for (i <- 0 until primes.length) {\n            for (j <-\
    \ i until primes.length) {\n                for (k <- j until primes.length) {\n\
    \                    if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        return false", "       \
    \ val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = new ArrayBuffer[Int]\n\
    \        var aa = a\n        for (i <- 0 until primes.length) {\n            while\
    \ (aa % primes(i) == 0) {\n                primeFactors += primes(i)\n       \
    \         aa /= primes(i)\n            }\n        }\n        if (aa != 1) return\
    \ false\n        if (primeFactors.length < 3) return false\n        return true",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var result = false\n      \
    \  for (i <- 0 to primes.length - 1) {\n            for (j <- i + 1 to primes.length\
    \ - 1) {\n                for (k <- j + 1 to primes.length - 1) {\n          \
    \          if (primes(i) * primes(j) * primes(k) == a) {\n                   \
    \     result = true\n                    }\n                }\n            }\n\
    \        }\n        result", "        val primes = List(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      var result = false\n        for (i <- primes) {\n            if (a % i\
    \ == 0) {\n                result = true\n            }\n        }\n        result",
  "        def isPrime(a : Long) : Boolean = {\n            if (a == 1) return false\n\
    \            for (i <- 2l to sqrt(a).toLong) {\n                if (a % i == 0)\
    \ return false\n            }\n            return true\n        }\n        for\
    \ (i <- 2l to sqrt(a).toLong) {\n            if (a % i == 0) {\n             \
    \   if (isPrime(i) && isPrime(a / i)) {\n                    for (j <- 2l to sqrt(a\
    \ / i).toLong) {\n                        if ((a / i) % j == 0) {\n          \
    \                  if (isPrime(j) && isPrime((a / i) / j)) return true\n     \
    \                   }\n                    }\n                }\n            }\n\
    \        }\n        return false", "        // Write your code here\n        return\
    \ false", "        // Write your code here\n        return true", "        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length) {\n\
    \            for (j <- i until primes.length) {\n                for (k <- j until\
    \ primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors = new ListBuffer[Int]\n\
    \        var aa = a\n        for (p <- primes) {\n            while (aa % p ==\
    \ 0) {\n                factors += p\n                aa /= p\n            }\n\
    \        }\n        if (factors.size == 3) true else false", "        def isPrime(a\
    \ : Long) : Boolean = {\n            if (a == 1) return false\n            if\
    \ (a == 2) return true\n            if (a % 2 == 0) return false\n           \
    \ for (i <- 3 to sqrt(a).toInt by 2) {\n                if (a % i == 0) return\
    \ false\n            }\n            return true\n        }\n        for (i <-\
    \ 1 to sqrt(a).toInt) {\n            if (a % i == 0) {\n                if (isPrime(i)\
    \ && isPrime(a / i)) {\n                    if (isPrime(a / i / i)) return true\n\
    \                }\n            }\n        }\n        return false", "       \
    \ val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors = primes.filter(a %\
    \ _ == 0)\n        factors.length == 3", "        val primes = Array(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val factors = ArrayBuffer[Int]()\n        var i = 0\n     \
    \   var n = a\n        while (i < primes.length && n > 1) {\n            if (n\
    \ % primes(i) == 0) {\n                factors += primes(i)\n                n\
    \ /= primes(i)\n            }\n            else i += 1\n        }\n        if\
    \ (n > 1) return false\n        if (factors.length == 3) return true\n       \
    \ return false", "        val primeNumbers = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primeNumbersMap = primeNumbers.zipWithIndex.toMap\n        val primeNumbersSet\
    \ = primeNumbers.toSet\n        val primeNumbersMapReverse = primeNumbersMap.map(_.swap)\n\
    \        val primeNumbersMapReverse2 = primeNumbersMapReverse.map(x => (x._1,\
    \ x._2 + 1))\n        val primeNumbersMapReverse3 = primeNumbersMapReverse2.map(x\
    \ => (x._1, x._2 + 1))\n        val primeNumbersMapReverse4 = primeNumbersMapReverse3.map(x\
    \ => (x._1, x._2 + 1))\n        val primeNumbersMapReverse5 = primeNumbersMapReverse4.map(x\
    \ => (x._1, x._2 + 1))\n        val primeNumbersMapReverse6 = primeNumbersMapReverse5.map(x\
    \ => (x._1, x._2 + 1))\n        val primeNumbersMapReverse7 = primeNumbersMapReverse6.map(x\
    \ => (x._1, x._2 + 1))\n        val primeNumbersMapReverse8 = primeNumbersMapReverse7.map(x\
    \ => (x._1, x._2 + 1))\n        val primeNumbersMapReverse9 = primeNumbersMapReverse8.map(x\
    \ => (x._1, x._2 + 1))\n        val primeNumbersMapReverse10 = primeNumbersMapReverse9.map(x\
    \ => (x._1, x._2 + 1))\n        val primeNumbersMapReverse11 = primeNumbersMapReverse10.map(x\
    \ => (x._1, x._2 + 1))\n        val primeNumbersMapReverse12 = primeNumbersMapReverse11.map(x\
    \ => (x._1, x._2 + 1))\n        val primeNumbersMapReverse13 = primeNumbersMapReverse12.map(x\
    \ => (x._1, x._2 + 1", "        def isPrime(n : Long) : Boolean = {\n        \
    \    if (n == 2) true\n            else if (n % 2 == 0) false\n            else\
    \ {\n                val sqrt = sqrt(n).toLong\n                var i = 3l\n \
    \               while (i <= sqrt) {\n                    if (n % i == 0) return\
    \ false\n                    i += 2\n                }\n                true\n\
    \            }\n        }\n        val sqrt = sqrt(a).toLong\n        var i =\
    \ 2l\n        while (i <= sqrt) {\n            if (a % i == 0) {\n           \
    \     if (isPrime(i) && isPrime(a / i)) return true\n            }\n         \
    \   i += 1\n        }\n        false", "        val primes = List(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val factors = new ListBuffer[Int]\n        var i = 0\n    \
    \    while (a > 1) {\n            if (a % primes(i) == 0) {\n                factors\
    \ += primes(i)\n                a /= primes(i)\n            }\n            else\
    \ i += 1\n        }\n        return factors.length == 3", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        primes.foreach(p => {\n            if (a %\
    \ p == 0) {\n                val b = a / p\n                primes.foreach(q =>\
    \ {\n                    if (b % q == 0) {\n                        val c = b\
    \ / q\n                        if (primes.contains(c)) return true\n         \
    \           }\n                })\n            }\n        })\n        false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a\
    \ % _ == 0)\n        primeFactors.length == 3", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n < 2) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            val sqrt\
    \ = sqrt(n).toLong\n            for (i <- 3l to sqrt by 2) {\n               \
    \ if (n % i == 0) return false\n            }\n            return true\n     \
    \   }\n        val sqrt = sqrt(a).toLong\n        for (i <- 2l to sqrt) {\n  \
    \          if (a % i == 0) {\n                val b = a / i\n                if\
    \ (isPrime(i) && isPrime(b)) return true\n            }\n        }\n        return\
    \ false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors = new\
    \ ListBuffer[Int]\n        var n = a\n        for (p <- primes) {\n          \
    \  while (n % p == 0) {\n                factors += p\n                n /= p\n\
    \            }\n        }\n        factors.length == 3", "        val primes =\
    \ List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a % _ == 0)\n\
    \        primeFactors.length == 3", "        def isPrime(a : Long) : Boolean =\
    \ {\n            if (a < 2) return false\n            if (a == 2) return true\n\
    \            if (a % 2 == 0) return false\n            val sqrt = sqrt(a).toLong\n\
    \            for (i <- 3l to sqrt by 2) {\n                if (a % i == 0) return\
    \ false\n            }\n            return true\n        }\n        val sqrt =\
    \ sqrt(a).toLong\n        for (i <- 2l to sqrt) {\n            if (a % i == 0)\
    \ {\n                if (isPrime(i) && isPrime(a / i)) {\n                   \
    \ return true\n                }\n            }\n        }\n        return false",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 to primes.length\
    \ - 1) {\n            for (j <- i to primes.length - 1) {\n                for\
    \ (k <- j to primes.length - 1) {\n                    if (primes(i) * primes(j)\
    \ * primes(k) == a) return true\n                }\n            }\n        }\n\
    \        return false", "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primeFactors = new ArrayBuffer[Int]\n        var i = 0\n        while (a\
    \ > 1) {\n            if (a % primes(i) == 0) {\n                primeFactors\
    \ += primes(i)\n                a /= primes(i)\n            }\n            else\
    \ i += 1\n        }\n        primeFactors.length == 3", "        val primes =\
    \ List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val factors = primes.filter(a % _ == 0)\n \
    \       factors.length == 3", "        def isPrime(n : Long) : Boolean = {\n \
    \           if (n < 2) return false\n            if (n == 2) return true\n   \
    \         if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        for (i <- 2 to sqrt(a).toInt) {\n    \
    \        if (a % i == 0) {\n                if (isPrime(i) && isPrime(a / i))\
    \ {\n                    return true\n                }\n            }\n     \
    \   }\n        return false", "        val primes = ArrayBuffer[Long]()\n    \
    \    for (i <- 2l to a) {\n            if (isPrime(i)) primes += i\n        }\n\
    \        for (i <- 0 until primes.length) {\n            for (j <- i + 1 until\
    \ primes.length) {\n                for (k <- j + 1 until primes.length) {\n \
    \                   if (primes(i) * primes(j) * primes(k) == a) return true\n\
    \                }\n            }\n        }\n        false", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val primes2 = primes.filter(x => a % x == 0)\n\
    \        if (primes2.size == 3) true else false", "        val primes = Array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesSet = primes.toSet\n        val primesList\
    \ = primes.toList\n        val primesListLength = primesList.length\n        def\
    \ isMultiplyPrimeHelper(a : Long, index : Int) : Boolean = {\n            if (a\
    \ == 1) true\n            else if (index == primesListLength) false\n        \
    \    else if (a % primesList(index) == 0) isMultiplyPrimeHelper(a / primesList(index),\
    \ index)\n            else isMultiplyPrimeHelper(a, index + 1)\n        }\n  \
    \      isMultiplyPrimeHelper(a, 0)", "        val primes = ArrayBuffer[Long]()\n\
    \        for (i <- 2l to a) {\n            if (isPrime(i)) primes += i\n     \
    \   }\n        primes.foreach(x => {\n            if (a % x == 0) {\n        \
    \        val b = a / x\n                for (i <- 2l to b) {\n               \
    \     if (isPrime(i)) {\n                        if (b % i == 0) {\n         \
    \                   val c = b / i\n                            if (isPrime(c))\
    \ return true\n                        }\n                    }\n            \
    \    }\n            }\n        })\n        false", "        val primes = ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val factors = ArrayBuffer[Long]()\n        var i =\
    \ 0\n        var n = a\n        while (i < primes.length && n > 1) {\n       \
    \     if (n % primes(i) == 0) {\n                factors += primes(i)\n      \
    \          n /= primes(i)\n            }\n            else i += 1\n        }\n\
    \        if (n > 1) return false\n        else return factors.length == 3", " \
    \       def isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrt = sqrt(n).toLong\n            for (i <- 3l to sqrt by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        val sqrt = sqrt(a).toLong\n        for (i <-\
    \ 2l to sqrt) {\n            if (a % i == 0) {\n                if (isPrime(i)\
    \ && isPrime(a / i)) {\n                    for (j <- 2l to sqrt) {\n        \
    \                if (a % j == 0 && i != j && (a / i) != j) {\n               \
    \             if (isPrime(j) && isPrime(a / j) && (a / j) != i) {\n          \
    \                      return true\n                            }\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n        return false", "        val primes = List(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val primeFactors = primes.filter(a % _ == 0)\n        if (primeFactors.length\
    \ == 3) {\n            true\n        } else {\n            false\n        }",
  "        var result = false\n        var primeNumbers = new ArrayBuffer[Long]()\n\
    \        var number = a\n        for (i <- 2l to 100l) {\n            if (isPrime(i))\
    \ {\n                primeNumbers += i\n            }\n        }\n        for\
    \ (i <- 0 to primeNumbers.length - 1) {\n            if (number % primeNumbers(i)\
    \ == 0) {\n                number = number / primeNumbers(i)\n               \
    \ if (number == 1) {\n                    result = true\n                }\n \
    \           }\n        }\n        result", "        val primes = List(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val factors = primes.filter(a % _ == 0)\n        factors.length\
    \ == 3", "        val primes = (2 to 100).filter(isPrime(_))\n        val primeFactors\
    \ = primes.filter(a % _ == 0)\n        primeFactors.length == 3", "        var\
    \ primes = new ArrayBuffer[Long]\n        for (i <- 2l to a) {\n            if\
    \ (isPrime(i)) primes += i\n        }\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- i + 1 until primes.length) {\n                for (k\
    \ <- j + 1 until primes.length) {\n                    if (primes(i) * primes(j)\
    \ * primes(k) == a) return true\n                }\n            }\n        }\n\
    \        return false", "        val primes = ArrayBuffer[Long]()\n        for\
    \ (i <- 2l to a) {\n            if (isPrime(i)) primes += i\n        }\n     \
    \   for (i <- 0 until primes.length) {\n            for (j <- i + 1 until primes.length)\
    \ {\n                for (k <- j + 1 until primes.length) {\n                \
    \    if (primes(i) * primes(j) * primes(k) == a) return true\n               \
    \ }\n            }\n        }\n        false", "        val primes = List(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        val factors = new ListBuffer[Int]\n        var n = a\n\
    \        for (p <- primes) {\n            while (n % p == 0) {\n             \
    \   factors += p\n                n /= p\n            }\n        }\n        factors.length\
    \ == 3", "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var result = false\n\
    \        for (i <- 0 to primes.length - 1) {\n            if (a % primes(i) ==\
    \ 0) {\n                result = true\n                a /= primes(i)\n      \
    \      }\n        }\n        result", "        val primes = List(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val factors = new ListBuffer[Int]\n        var n = a\n        for\
    \ (p <- primes) {\n            while (n % p == 0) {\n                factors +=\
    \ p\n                n /= p\n            }\n        }\n        factors.length\
    \ == 3", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var result = false\n\
    \        for (i <- 0 to primes.length - 1) {\n            for (j <- i + 1 to primes.length\
    \ - 1) {\n                for (k <- j + 1 to primes.length - 1) {\n          \
    \          if (primes(i) * primes(j) * primes(k) == a) {\n                   \
    \     result = true\n                    }\n                }\n            }\n\
    \        }\n        result", "        val primes = List(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val factors = new ListBuffer[Int]\n        var n = a\n        for (p <-\
    \ primes) {\n            while (n % p == 0) {\n                factors += p\n\
    \                n /= p\n            }\n        }\n        factors.size == 3",
  "        def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrt = sqrt(n).toLong\n            for (i <- 3 to sqrt by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        val sqrt = sqrt(a).toLong\n        for (i <-\
    \ 2 to sqrt) {\n            if (isPrime(i) && a % i == 0) {\n                val\
    \ b = a / i\n                if (isPrime(b)) {\n                    val c = b\
    \ / i\n                    if (isPrime(c)) return true\n                }\n  \
    \          }\n        }\n        return false", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primeFactors = new ListBuffer[Int]\n        var\
    \ aa = a\n        for (p <- primes) {\n            while (aa % p == 0) {\n   \
    \             primeFactors += p\n                aa /= p\n            }\n    \
    \    }\n        if (aa != 1) return false\n        if (primeFactors.length < 3)\
    \ return false\n        return true", "        var result = false\n        var\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        var primes2 = List(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        var primes3 = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- primes)\
    \ {\n            if (a % i == 0) {\n                var b = a / i\n          \
    \      for (j <- primes2) {\n                    if (b % j == 0) {\n         \
    \               var c = b / j\n                        for (k <- primes3) {\n\
    \                            if (c % k == 0) {\n                             \
    \   result = true\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors\
    \ = primes.filter(a % _ == 0)\n        factors.length == 3", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val factors = primes.filter(a % _ == 0)\n \
    \       factors.size == 3", "        val primes = List(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val primeFactors = primes.filter(a % _ == 0)\n        if (primeFactors.length\
    \ == 3) true else false", "        var isPrime = true\n        var i = 2\n   \
    \     while (i <= sqrt(a) && isPrime) {\n            if (a % i == 0) {\n     \
    \           isPrime = false\n            }\n            i += 1\n        }\n  \
    \      isPrime", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var result\
    \ = false\n        for (i <- 0 to primes.length - 1) {\n            for (j <-\
    \ i + 1 to primes.length - 1) {\n                for (k <- j + 1 to primes.length\
    \ - 1) {\n                    if (primes(i) * primes(j) * primes(k) == a) {\n\
    \                        result = true\n                    }\n              \
    \  }\n            }\n        }\n        result", "        def isPrime(a : Long)\
    \ : Boolean = {\n            if (a < 2) return false\n            if (a == 2)\
    \ return true\n            if (a % 2 == 0) return false\n            for (i <-\
    \ 3 to sqrt(a).toInt by 2) {\n                if (a % i == 0) return false\n \
    \           }\n            return true\n        }\n        if (a < 6) return false\n\
    \        for (i <- 2 to sqrt(a).toInt) {\n            if (isPrime(i) && a % i\
    \ == 0) {\n                val b = a / i\n                if (isPrime(b)) {\n\
    \                    for (j <- 2 to sqrt(b).toInt) {\n                       \
    \ if (isPrime(j) && b % j == 0) {\n                            val c = b / j\n\
    \                            if (isPrime(c)) return true\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \        return false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primeFactors = primes.filter(a % _ == 0)\n        primeFactors.size ==\
    \ 3", "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until\
    \ primes.length) {\n            for (j <- i until primes.length) {\n         \
    \       for (k <- j until primes.length) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) return true\n                }\n            }\n\
    \        }\n        false", "        val primes = ArrayBuffer[Long]()\n      \
    \  for (i <- 2l to a) {\n            if (isPrime(i)) {\n                primes\
    \ += i\n            }\n        }\n        for (i <- 0 until primes.length) {\n\
    \            for (j <- i + 1 until primes.length) {\n                for (k <-\
    \ j + 1 until primes.length) {\n                    if (primes(i) * primes(j)\
    \ * primes(k) == a) {\n                        return true\n                 \
    \   }\n                }\n            }\n        }\n        return false", " \
    \       val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- 0 until primes.length)\
    \ {\n            for (j <- 0 until primes.length) {\n                for (k <-\
    \ 0 until primes.length) {\n                    if (primes(i) * primes(j) * primes(k)\
    \ == a) return true\n                }\n            }\n        }\n        return\
    \ false", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactors\
    \ = primes.filter(a % _ == 0)\n        primeFactors.size == 3", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val primeFactors = primes.filter(a % _ == 0)\n\
    \        primeFactors.size == 3", "        val primes = List(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        var i = 0\n        var b = a\n        while (b > 1 && i < primes.length)\
    \ {\n            if (b % primes(i) == 0) {\n                b /= primes(i)\n \
    \           } else {\n                i += 1\n            }\n        }\n     \
    \   b == 1"]
stop_tokens:
- "\n    }\n"
