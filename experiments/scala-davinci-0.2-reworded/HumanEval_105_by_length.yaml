name: HumanEval_105_by_length
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n\
  \    // reverse the resulting list, and then replace each digit by its corresponding\
  \ name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
  Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong,\
  \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n\
  \    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
  , \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    //\
  \ >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has\
  \ any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong,\
  \ 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long])\
  \ : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
  \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
  Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
  \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
  \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
  \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"\
  One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
  Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
completions: ["        // your code here\n        null", "        // Fill up this\
    \ function body\n        // You can add another function as well, if required\n\
    \        var list = new ListBuffer[String]()\n        for (i <- arr) {\n     \
    \       if (i > 0 && i < 10) {\n                list += i.toString\n         \
    \   }\n        }\n        list.sorted.reverse.map(x => x match {\n           \
    \ case \"1\" => \"One\"\n            case \"2\" => \"Two\"\n            case \"\
    3\" => \"Three\"\n            case \"4\" => \"Four\"\n            case \"5\" =>\
    \ \"Five\"\n            case \"6\" => \"Six\"\n            case \"7\" => \"Seven\"\
    \n            case \"8\" => \"Eight\"\n            case \"9\" => \"Nine\"\n  \
    \      }).toList", "        // Fill up this function body\n        // You can\
    \ add another function as well, if required\n        var list = List[String]()\n\
    \        for (i <- arr) {\n            if (i == 1) {\n                list = list\
    \ :+ \"One\"\n            }\n            else if (i == 2) {\n                list\
    \ = list :+ \"Two\"\n            }\n            else if (i == 3) {\n         \
    \       list = list :+ \"Three\"\n            }\n            else if (i == 4)\
    \ {\n                list = list :+ \"Four\"\n            }\n            else\
    \ if (i == 5) {\n                list = list :+ \"Five\"\n            }\n    \
    \        else if (i == 6) {\n                list = list :+ \"Six\"\n        \
    \    }\n            else if (i == 7) {\n                list = list :+ \"Seven\"\
    \n            }\n            else if (i == 8) {\n                list = list :+\
    \ \"Eight\"\n            }\n            else if (i == 9) {\n                list\
    \ = list :+ \"Nine\"\n            }\n        }\n        list.sorted.reverse",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var list = List[String]()\n        for (i <- arr)\
    \ {\n            if (i >= 1 && i <= 9) {\n                list = list :+ i.toString\n\
    \            }\n        }\n        list = list.sorted\n        list = list.reverse\n\
    \        for (i <- 0 until list.length) {\n            list(i) = list(i).replace(\"\
    1\", \"One\")\n            list(i) = list(i).replace(\"2\", \"Two\")\n       \
    \     list(i) = list(i).replace(\"3\", \"Three\")\n            list(i) = list(i).replace(\"\
    4\", \"Four\")\n            list(i) = list(i).replace(\"5\", \"Five\")\n     \
    \       list(i) = list(i).replace(\"6\", \"Six\")\n            list(i) = list(i).replace(\"\
    7\", \"Seven\")\n            list(i) = list(i).replace(\"8\", \"Eight\")\n   \
    \         list(i) = list(i).replace(\"9\", \"Nine\")\n        }\n        list",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var lst = List[String]()\n        for (i <- arr)\
    \ {\n            if (i >= 1 && i <= 9) {\n                lst = lst :+ i.toString\n\
    \            }\n        }\n        var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n\
    \        var lst3 = List[String]()\n        for (i <- lst2) {\n            if\
    \ (i == \"1\") {\n                lst3 = lst3 :+ \"One\"\n            }\n    \
    \        else if (i == \"2\") {\n                lst3 = lst3 :+ \"Two\"\n    \
    \        }\n            else if (i == \"3\") {\n                lst3 = lst3 :+\
    \ \"Three\"\n            }\n            else if (i == \"4\") {\n             \
    \   lst3 = lst3 :+ \"Four\"\n            }\n            else if (i == \"5\") {\n\
    \                lst3 = lst3 :+ \"Five\"\n            }\n            else if (i\
    \ == \"6\") {\n                lst3 = lst3 :+ \"Six\"\n            }\n       \
    \     else if (i == \"7\") {\n                lst3 = lst3 :+ \"Seven\"\n     \
    \       }\n            else if (i == \"8\") {\n                lst3 = lst3 :+\
    \ \"Eight\"\n            }\n            else if (i == \"9\") {\n             \
    \   lst3 = lst3 :+ \"Nine\"\n            }\n        }\n        return lst3", " \
    \       // Your code here\n        arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => x match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n\
    \            case 3 => \"Three\"\n            case 4 => \"Four\"\n           \
    \ case 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"\
    Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n   \
    \     })", "        val nums = arr.filter(x => x >= 1 && x <= 9)\n        val\
    \ numsSorted = nums.sorted\n        val numsReversed = numsSorted.reverse\n  \
    \      val numsReversedStrings = numsReversed.map(x => x match {\n           \
    \ case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\
    \n            case 4 => \"Four\"\n            case 5 => \"Five\"\n           \
    \ case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"\
    Eight\"\n            case 9 => \"Nine\"\n        })\n        numsReversedStrings",
  "        // your code here\n        val l = arr.filter(x => x >= 1 && x <= 9).sorted.reverse\n\
    \        l.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })", "        // your code here\n        val map = Map(1l.toLong ->\
    \ \"One\", 2l.toLong -> \"Two\", 3l.toLong -> \"Three\", 4l.toLong -> \"Four\"\
    , 5l.toLong -> \"Five\", 6l.toLong -> \"Six\", 7l.toLong -> \"Seven\", 8l.toLong\
    \ -> \"Eight\", 9l.toLong -> \"Nine\")\n        val list = arr.filter(x => x >=\
    \ 1 && x <= 9).sorted.reverse\n        list.map(x => map(x))", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        val lst = arr.filter(x => x >= 1 && x <= 9).sorted.reverse\n        val\
    \ lst2 = lst.map(x => x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })\n        lst2", "        // your code here\n        var result =\
    \ List[String]()\n        for (i <- arr) {\n            if (i >= 1 && i <= 9)\
    \ {\n                result = result :+ i.toString\n            }\n        }\n\
    \        result = result.sorted\n        result = result.reverse\n        for\
    \ (i <- 0 until result.length) {\n            result(i) = result(i).replace(\"\
    1\", \"One\")\n            result(i) = result(i).replace(\"2\", \"Two\")\n   \
    \         result(i) = result(i).replace(\"3\", \"Three\")\n            result(i)\
    \ = result(i).replace(\"4\", \"Four\")\n            result(i) = result(i).replace(\"\
    5\", \"Five\")\n            result(i) = result(i).replace(\"6\", \"Six\")\n  \
    \          result(i) = result(i).replace(\"7\", \"Seven\")\n            result(i)\
    \ = result(i).replace(\"8\", \"Eight\")\n            result(i) = result(i).replace(\"\
    9\", \"Nine\")\n        }\n        result", "        // your code here\n     \
    \   var result = List[String]()\n        for (i <- arr) {\n            if (i >\
    \ 0 && i < 10) {\n                result = result :+ i.toString\n            }\n\
    \        }\n        result = result.sorted\n        result = result.reverse\n\
    \        for (i <- 0 until result.length) {\n            result(i) = result(i).replace(\"\
    1\", \"One\")\n            result(i) = result(i).replace(\"2\", \"Two\")\n   \
    \         result(i) = result(i).replace(\"3\", \"Three\")\n            result(i)\
    \ = result(i).replace(\"4\", \"Four\")\n            result(i) = result(i).replace(\"\
    5\", \"Five\")\n            result(i) = result(i).replace(\"6\", \"Six\")\n  \
    \          result(i) = result(i).replace(\"7\", \"Seven\")\n            result(i)\
    \ = result(i).replace(\"8\", \"Eight\")\n            result(i) = result(i).replace(\"\
    9\", \"Nine\")\n        }\n        result", "        // your code here\n     \
    \   var result = List[String]()\n        for (i <- arr) {\n            if (i >=\
    \ 1 && i <= 9) {\n                result = result :+ i.toString\n            }\n\
    \        }\n        result = result.sorted\n        result = result.reverse\n\
    \        for (i <- 0 until result.length) {\n            result(i) = result(i).replace(\"\
    1\", \"One\")\n            result(i) = result(i).replace(\"2\", \"Two\")\n   \
    \         result(i) = result(i).replace(\"3\", \"Three\")\n            result(i)\
    \ = result(i).replace(\"4\", \"Four\")\n            result(i) = result(i).replace(\"\
    5\", \"Five\")\n            result(i) = result(i).replace(\"6\", \"Six\")\n  \
    \          result(i) = result(i).replace(\"7\", \"Seven\")\n            result(i)\
    \ = result(i).replace(\"8\", \"Eight\")\n            result(i) = result(i).replace(\"\
    9\", \"Nine\")\n        }\n        result", "        // your code here\n     \
    \   val l = arr.filter(x => x >= 1 && x <= 9).sorted.reverse\n        l.map(x\
    \ => x match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n\
    \            case 3 => \"Three\"\n            case 4 => \"Four\"\n           \
    \ case 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"\
    Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n   \
    \     })", "        // your code here\n        val l = arr.filter(x => x >= 1\
    \ && x <= 9).sorted.reverse\n        l.map(x => x match {\n            case 1\
    \ => \"One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\n\
    \            case 4 => \"Four\"\n            case 5 => \"Five\"\n            case\
    \ 6 => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\
    \n            case 9 => \"Nine\"\n        })", "        // Fill up this function\
    \ body\n        // You may also define new functions\n        // to help you in\
    \ solving this problem\n        val map = Map(1l.toLong -> \"One\", 2l.toLong\
    \ -> \"Two\", 3l.toLong -> \"Three\", 4l.toLong -> \"Four\", 5l.toLong -> \"Five\"\
    , 6l.toLong -> \"Six\", 7l.toLong -> \"Seven\", 8l.toLong -> \"Eight\", 9l.toLong\
    \ -> \"Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse\n\
    \        list.map(x => map(x))", "        var result = new ListBuffer[String]()\n\
    \        for (i <- arr) {\n            if (i > 0 && i < 10) {\n              \
    \  result += i.toString\n            }\n        }\n        result.toList.sorted.reverse.map(x\
    \ => x match {\n            case \"1\" => \"One\"\n            case \"2\" => \"\
    Two\"\n            case \"3\" => \"Three\"\n            case \"4\" => \"Four\"\
    \n            case \"5\" => \"Five\"\n            case \"6\" => \"Six\"\n    \
    \        case \"7\" => \"Seven\"\n            case \"8\" => \"Eight\"\n      \
    \      case \"9\" => \"Nine\"\n        })", "        var result = List[String]()\n\
    \        for (i <- arr) {\n            if (i >= 1 && i <= 9) {\n             \
    \   result = result :+ i.toString\n            }\n        }\n        result.sortWith(_\
    \ < _).reverse.map(x => x match {\n            case \"1\" => \"One\"\n       \
    \     case \"2\" => \"Two\"\n            case \"3\" => \"Three\"\n           \
    \ case \"4\" => \"Four\"\n            case \"5\" => \"Five\"\n            case\
    \ \"6\" => \"Six\"\n            case \"7\" => \"Seven\"\n            case \"8\"\
    \ => \"Eight\"\n            case \"9\" => \"Nine\"\n        })", "        val\
    \ result = new ListBuffer[String]\n        for (i <- arr) {\n            if (i\
    \ >= 1 && i <= 9) {\n                result += i.toString\n            }\n   \
    \     }\n        result.toList.sorted.reverse.map(x => x match {\n           \
    \ case \"1\" => \"One\"\n            case \"2\" => \"Two\"\n            case \"\
    3\" => \"Three\"\n            case \"4\" => \"Four\"\n            case \"5\" =>\
    \ \"Five\"\n            case \"6\" => \"Six\"\n            case \"7\" => \"Seven\"\
    \n            case \"8\" => \"Eight\"\n            case \"9\" => \"Nine\"\n  \
    \      })", "        val map = Map(1l.toLong -> \"One\", 2l.toLong -> \"Two\"\
    , 3l.toLong -> \"Three\", 4l.toLong -> \"Four\", 5l.toLong -> \"Five\", 6l.toLong\
    \ -> \"Six\", 7l.toLong -> \"Seven\", 8l.toLong -> \"Eight\", 9l.toLong -> \"\
    Nine\")\n        val list = arr.filter(x => x >= 1 && x <= 9).sorted.reverse\n\
    \        list.map(x => map(x))"]
stop_tokens:
- "\n    }\n"
