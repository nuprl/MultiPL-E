language: scala
name: HumanEval_156_int_to_mini_roman
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val values = List(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n\
    \        var remaining = number\n        for (i <- 0 to romanNumerals.length -\
    \ 1) {\n            while (remaining >= values(i)) {\n                result +=\
    \ romanNumerals(i)\n                remaining -= values(i)\n            }\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val romanValues = List(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n\
    \        var remaining = number\n        for (i <- 0 to romanNumerals.length -\
    \ 1) {\n            while (remaining >= romanValues(i)) {\n                result\
    \ += romanNumerals(i)\n                remaining -= romanValues(i)\n         \
    \   }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var n = number\n        var result = \"\"\n        while (n >= 1000) {\n\
    \            result += \"m\"\n            n -= 1000\n        }\n        if (n\
    \ >= 900) {\n            result += \"cm\"\n            n -= 900\n        }\n \
    \       if (n >= 500) {\n            result += \"d\"\n            n -= 500\n \
    \       }\n        if (n >= 400) {\n            result += \"cd\"\n           \
    \ n -= 400\n        }\n        while (n >= 100) {\n            result += \"c\"\
    \n            n -= 100\n        }\n        if (n >= 90) {\n            result\
    \ += \"xc\"\n            n -= 90\n        }\n        if (n >= 50) {\n        \
    \    result += \"l\"\n            n -= 50\n        }\n        if (n >= 40) {\n\
    \            result += \"xl\"\n            n -= 40\n        }\n        while (n\
    \ >= 10) {\n            result += \"x\"\n            n -= 10\n        }\n    \
    \    if (n >= 9) {\n            result += \"ix\"\n            n -= 9\n       \
    \ }\n        if (n >= 5) {\n            result += \"v\"\n            n -= 5\n\
    \        }\n        if (n >= 4) {\n            result += \"iv\"\n            n\
    \ -= 4\n        }\n        while (n >= 1) {\n            result += \"i\"\n   \
    \         n -= 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var num = number\n        var result = \"\"\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var n = number\n        var result = \"\"\n        while (n >= 1000) {\n\
    \            result += \"m\"\n            n -= 1000\n        }\n        if (n\
    \ >= 900) {\n            result += \"cm\"\n            n -= 900\n        }\n \
    \       if (n >= 500) {\n            result += \"d\"\n            n -= 500\n \
    \       }\n        if (n >= 400) {\n            result += \"cd\"\n           \
    \ n -= 400\n        }\n        while (n >= 100) {\n            result += \"c\"\
    \n            n -= 100\n        }\n        if (n >= 90) {\n            result\
    \ += \"xc\"\n            n -= 90\n        }\n        if (n >= 50) {\n        \
    \    result += \"l\"\n            n -= 50\n        }\n        if (n >= 40) {\n\
    \            result += \"xl\"\n            n -= 40\n        }\n        while (n\
    \ >= 10) {\n            result += \"x\"\n            n -= 10\n        }\n    \
    \    if (n >= 9) {\n            result += \"ix\"\n            n -= 9\n       \
    \ }\n        if (n >= 5) {\n            result += \"v\"\n            n -= 5\n\
    \        }\n        if (n >= 4) {\n            result += \"iv\"\n            n\
    \ -= 4\n        }\n        while (n >= 1) {\n            result += \"i\"\n   \
    \         n -= 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\n            (1000, \"m\"),\n            (900,\
    \ \"cm\"),\n            (500, \"d\"),\n            (400, \"cd\"),\n          \
    \  (100, \"c\"),\n            (90, \"xc\"),\n            (50, \"l\"),\n      \
    \      (40, \"xl\"),\n            (10, \"x\"),\n            (9, \"ix\"),\n   \
    \         (5, \"v\"),\n            (4, \"iv\"),\n            (1, \"i\")\n    \
    \    )\n        var result = \"\"\n        var remaining = number\n        for\
    \ ((value, numeral) <- romanNumerals) {\n            while (remaining >= value)\
    \ {\n                result += numeral\n                remaining -= value\n \
    \           }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val romanValues = List(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n\
    \        var remaining = number\n        for (i <- 0 to romanNumerals.length -\
    \ 1) {\n            while (remaining >= romanValues(i)) {\n                result\
    \ += romanNumerals(i)\n                remaining -= romanValues(i)\n         \
    \   }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var num = number\n        var result = \"\"\n        var roman = Array(\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\")\n        var decimal = Array(1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1)\n        for (i <- 0 to roman.length - 1) {\n          \
    \  while (num >= decimal(i)) {\n                result += roman(i)\n         \
    \       num -= decimal(i)\n            }\n        }\n        return result\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List((\"m\", 1000), (\"cm\", 900), (\"d\", 500), (\"\
    cd\", 400), (\"c\", 100), (\"xc\", 90), (\"l\", 50), (\"xl\", 40), (\"x\", 10),\
    \ (\"ix\", 9), (\"v\", 5), (\"iv\", 4), (\"i\", 1))\n        var num = number\n\
    \        var result = \"\"\n        for ((roman, arabic) <- romanNumerals) {\n\
    \            while (num >= arabic) {\n                result += roman\n      \
    \          num -= arabic\n            }\n        }\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var n = number\n        while (n >= 1000) {\n\
    \            result += \"m\"\n            n -= 1000\n        }\n        if (n\
    \ >= 900) {\n            result += \"cm\"\n            n -= 900\n        }\n \
    \       if (n >= 500) {\n            result += \"d\"\n            n -= 500\n \
    \       }\n        if (n >= 400) {\n            result += \"cd\"\n           \
    \ n -= 400\n        }\n        while (n >= 100) {\n            result += \"c\"\
    \n            n -= 100\n        }\n        if (n >= 90) {\n            result\
    \ += \"xc\"\n            n -= 90\n        }\n        if (n >= 50) {\n        \
    \    result += \"l\"\n            n -= 50\n        }\n        if (n >= 40) {\n\
    \            result += \"xl\"\n            n -= 40\n        }\n        while (n\
    \ >= 10) {\n            result += \"x\"\n            n -= 10\n        }\n    \
    \    if (n >= 9) {\n            result += \"ix\"\n            n -= 9\n       \
    \ }\n        if (n >= 5) {\n            result += \"v\"\n            n -= 5\n\
    \        }\n        if (n >= 4) {\n            result += \"iv\"\n            n\
    \ -= 4\n        }\n        while (n >= 1) {\n            result += \"i\"\n   \
    \         n -= 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var n = number\n        var result = \"\"\n        while (n >= 1000) {\n\
    \            result += \"m\"\n            n -= 1000\n        }\n        if (n\
    \ >= 900) {\n            result += \"cm\"\n            n -= 900\n        }\n \
    \       if (n >= 500) {\n            result += \"d\"\n            n -= 500\n \
    \       }\n        if (n >= 400) {\n            result += \"cd\"\n           \
    \ n -= 400\n        }\n        while (n >= 100) {\n            result += \"c\"\
    \n            n -= 100\n        }\n        if (n >= 90) {\n            result\
    \ += \"xc\"\n            n -= 90\n        }\n        if (n >= 50) {\n        \
    \    result += \"l\"\n            n -= 50\n        }\n        if (n >= 40) {\n\
    \            result += \"xl\"\n            n -= 40\n        }\n        while (n\
    \ >= 10) {\n            result += \"x\"\n            n -= 10\n        }\n    \
    \    if (n >= 9) {\n            result += \"ix\"\n            n -= 9\n       \
    \ }\n        if (n >= 5) {\n            result += \"v\"\n            n -= 5\n\
    \        }\n        if (n >= 4) {\n            result += \"iv\"\n            n\
    \ -= 4\n        }\n        while (n >= 1) {\n            result += \"i\"\n   \
    \         n -= 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val symbols = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"\
    xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val values = List(1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n    \
    \    var remaining = number\n        for (i <- 0 to symbols.length - 1) {\n  \
    \          while (remaining >= values(i)) {\n                result += symbols(i)\n\
    \                remaining -= values(i)\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\n            (\"m\", 1000),\n            (\"cm\"\
    , 900),\n            (\"d\", 500),\n            (\"cd\", 400),\n            (\"\
    c\", 100),\n            (\"xc\", 90),\n            (\"l\", 50),\n            (\"\
    xl\", 40),\n            (\"x\", 10),\n            (\"ix\", 9),\n            (\"\
    v\", 5),\n            (\"iv\", 4),\n            (\"i\", 1)\n        )\n      \
    \  var result = \"\"\n        var remaining = number\n        for ((numeral, value)\
    \ <- romanNumerals) {\n            while (remaining >= value) {\n            \
    \    result += numeral\n                remaining -= value\n            }\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var num = number\n        var result = \"\"\n        while (num > 0) {\n\
    \            if (num >= 1000) {\n                result += \"m\"\n           \
    \     num -= 1000\n            } else if (num >= 900) {\n                result\
    \ += \"cm\"\n                num -= 900\n            } else if (num >= 500) {\n\
    \                result += \"d\"\n                num -= 500\n            } else\
    \ if (num >= 400) {\n                result += \"cd\"\n                num -=\
    \ 400\n            } else if (num >= 100) {\n                result += \"c\"\n\
    \                num -= 100\n            } else if (num >= 90) {\n           \
    \     result += \"xc\"\n                num -= 90\n            } else if (num\
    \ >= 50) {\n                result += \"l\"\n                num -= 50\n     \
    \       } else if (num >= 40) {\n                result += \"xl\"\n          \
    \      num -= 40\n            } else if (num >= 10) {\n                result\
    \ += \"x\"\n                num -= 10\n            } else if (num >= 9) {\n  \
    \              result += \"ix\"\n                num -= 9\n            } else\
    \ if (num >= 5) {\n                result += \"v\"\n                num -= 5\n\
    \            } else if (num >= 4) {\n                result += \"iv\"\n      \
    \          num -= 4\n            } else if (num >= 1) {\n                result\
    \ += \"i\"\n                num -= 1\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var num = number\n        var result = \"\"\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num > 0) {\n\
    \            if (num >= 1000) {\n                result += \"m\"\n           \
    \     num -= 1000\n            } else if (num >= 900) {\n                result\
    \ += \"cm\"\n                num -= 900\n            } else if (num >= 500) {\n\
    \                result += \"d\"\n                num -= 500\n            } else\
    \ if (num >= 400) {\n                result += \"cd\"\n                num -=\
    \ 400\n            } else if (num >= 100) {\n                result += \"c\"\n\
    \                num -= 100\n            } else if (num >= 90) {\n           \
    \     result += \"xc\"\n                num -= 90\n            } else if (num\
    \ >= 50) {\n                result += \"l\"\n                num -= 50\n     \
    \       } else if (num >= 40) {\n                result += \"xl\"\n          \
    \      num -= 40\n            } else if (num >= 10) {\n                result\
    \ += \"x\"\n                num -= 10\n            } else if (num >= 9) {\n  \
    \              result += \"ix\"\n                num -= 9\n            } else\
    \ if (num >= 5) {\n                result += \"v\"\n                num -= 5\n\
    \            } else if (num >= 4) {\n                result += \"iv\"\n      \
    \          num -= 4\n            } else if (num >= 1) {\n                result\
    \ += \"i\"\n                num -= 1\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var n = number\n        var result = \"\"\n        while (n >= 1000) {\n\
    \            result += \"m\"\n            n -= 1000\n        }\n        while\
    \ (n >= 900) {\n            result += \"cm\"\n            n -= 900\n        }\n\
    \        while (n >= 500) {\n            result += \"d\"\n            n -= 500\n\
    \        }\n        while (n >= 400) {\n            result += \"cd\"\n       \
    \     n -= 400\n        }\n        while (n >= 100) {\n            result += \"\
    c\"\n            n -= 100\n        }\n        while (n >= 90) {\n            result\
    \ += \"xc\"\n            n -= 90\n        }\n        while (n >= 50) {\n     \
    \       result += \"l\"\n            n -= 50\n        }\n        while (n >= 40)\
    \ {\n            result += \"xl\"\n            n -= 40\n        }\n        while\
    \ (n >= 10) {\n            result += \"x\"\n            n -= 10\n        }\n \
    \       while (n >= 9) {\n            result += \"ix\"\n            n -= 9\n \
    \       }\n        while (n >= 5) {\n            result += \"v\"\n           \
    \ n -= 5\n        }\n        while (n >= 4) {\n            result += \"iv\"\n\
    \            n -= 4\n        }\n        while (n >= 1) {\n            result +=\
    \ \"i\"\n            n -= 1\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var num = number\n        var result = \"\"\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ while (num >= 900) {\n            result += \"cm\"\n            num -= 900\n\
    \        }\n        while (num >= 500) {\n            result += \"d\"\n      \
    \      num -= 500\n        }\n        while (num >= 400) {\n            result\
    \ += \"cd\"\n            num -= 400\n        }\n        while (num >= 100) {\n\
    \            result += \"c\"\n            num -= 100\n        }\n        while\
    \ (num >= 90) {\n            result += \"xc\"\n            num -= 90\n       \
    \ }\n        while (num >= 50) {\n            result += \"l\"\n            num\
    \ -= 50\n        }\n        while (num >= 40) {\n            result += \"xl\"\n\
    \            num -= 40\n        }\n        while (num >= 10) {\n            result\
    \ += \"x\"\n            num -= 10\n        }\n        while (num >= 9) {\n   \
    \         result += \"ix\"\n            num -= 9\n        }\n        while (num\
    \ >= 5) {\n            result += \"v\"\n            num -= 5\n        }\n    \
    \    while (num >= 4) {\n            result += \"iv\"\n            num -= 4\n\
    \        }\n        while (num >= 1) {\n            result += \"i\"\n        \
    \    num -= 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List((\"m\", 1000), (\"cm\", 900), (\"d\", 500), (\"\
    cd\", 400), (\"c\", 100), (\"xc\", 90), (\"l\", 50), (\"xl\", 40), (\"x\", 10),\
    \ (\"ix\", 9), (\"v\", 5), (\"iv\", 4), (\"i\", 1))\n        var result = \"\"\
    \n        var num = number\n        for ((numeral, value) <- romanNumerals) {\n\
    \            while (num >= value) {\n                result += numeral\n     \
    \           num -= value\n            }\n        }\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val numbers = Array(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n\
    \        var remaining = number\n        for (i <- 0 to romanNumerals.length -\
    \ 1) {\n            while (remaining >= numbers(i)) {\n                result\
    \ += romanNumerals(i)\n                remaining -= numbers(i)\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val numbers = List(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n\
    \        var num = number\n        for (i <- 0 to numbers.length - 1) {\n    \
    \        while (num >= numbers(i)) {\n                result += romanNumerals(i)\n\
    \                num -= numbers(i)\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var num = number\n        var result = \"\"\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val decimalNumbers\
    \ = List(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result\
    \ = \"\"\n        var remaining = number\n        for (i <- 0 to romanNumerals.length\
    \ - 1) {\n            while (remaining >= decimalNumbers(i)) {\n             \
    \   result += romanNumerals(i)\n                remaining -= decimalNumbers(i)\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = new StringBuilder\n        var num = number\n        while\
    \ (num >= 1000) {\n            result.append(\"m\")\n            num -= 1000\n\
    \        }\n        if (num >= 900) {\n            result.append(\"cm\")\n   \
    \         num -= 900\n        }\n        if (num >= 500) {\n            result.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   result.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            result.append(\"c\")\n            num -= 100\n      \
    \  }\n        if (num >= 90) {\n            result.append(\"xc\")\n          \
    \  num -= 90\n        }\n        if (num >= 50) {\n            result.append(\"\
    l\")\n            num -= 50\n        }\n        if (num >= 40) {\n           \
    \ result.append(\"xl\")\n            num -= 40\n        }\n        while (num\
    \ >= 10) {\n            result.append(\"x\")\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result.append(\"ix\")\n            num -=\
    \ 9\n        }\n        if (num >= 5) {\n            result.append(\"v\")\n  \
    \          num -= 5\n        }\n        if (num >= 4) {\n            result.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   result.append(\"i\")\n            num -= 1\n        }\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var num = number\n        var result = \"\"\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var n = number\n        while (n >= 1000) {\n\
    \            result += \"m\"\n            n -= 1000\n        }\n        if (n\
    \ >= 900) {\n            result += \"cm\"\n            n -= 900\n        }\n \
    \       if (n >= 500) {\n            result += \"d\"\n            n -= 500\n \
    \       }\n        if (n >= 400) {\n            result += \"cd\"\n           \
    \ n -= 400\n        }\n        while (n >= 100) {\n            result += \"c\"\
    \n            n -= 100\n        }\n        if (n >= 90) {\n            result\
    \ += \"xc\"\n            n -= 90\n        }\n        if (n >= 50) {\n        \
    \    result += \"l\"\n            n -= 50\n        }\n        if (n >= 40) {\n\
    \            result += \"xl\"\n            n -= 40\n        }\n        while (n\
    \ >= 10) {\n            result += \"x\"\n            n -= 10\n        }\n    \
    \    if (n >= 9) {\n            result += \"ix\"\n            n -= 9\n       \
    \ }\n        if (n >= 5) {\n            result += \"v\"\n            n -= 5\n\
    \        }\n        if (n >= 4) {\n            result += \"iv\"\n            n\
    \ -= 4\n        }\n        while (n >= 1) {\n            result += \"i\"\n   \
    \         n -= 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var n = number\n        var result = \"\"\n        while (n >= 1000) {\n\
    \            result += \"m\"\n            n -= 1000\n        }\n        while\
    \ (n >= 900) {\n            result += \"cm\"\n            n -= 900\n        }\n\
    \        while (n >= 500) {\n            result += \"d\"\n            n -= 500\n\
    \        }\n        while (n >= 400) {\n            result += \"cd\"\n       \
    \     n -= 400\n        }\n        while (n >= 100) {\n            result += \"\
    c\"\n            n -= 100\n        }\n        while (n >= 90) {\n            result\
    \ += \"xc\"\n            n -= 90\n        }\n        while (n >= 50) {\n     \
    \       result += \"l\"\n            n -= 50\n        }\n        while (n >= 40)\
    \ {\n            result += \"xl\"\n            n -= 40\n        }\n        while\
    \ (n >= 10) {\n            result += \"x\"\n            n -= 10\n        }\n \
    \       while (n >= 9) {\n            result += \"ix\"\n            n -= 9\n \
    \       }\n        while (n >= 5) {\n            result += \"v\"\n           \
    \ n -= 5\n        }\n        while (n >= 4) {\n            result += \"iv\"\n\
    \            n -= 4\n        }\n        while (n >= 1) {\n            result +=\
    \ \"i\"\n            n -= 1\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = Map(\n            1 -> \"i\",\n            4 -> \"iv\",\n  \
    \          5 -> \"v\",\n            9 -> \"ix\",\n            10 -> \"x\",\n \
    \           40 -> \"xl\",\n            50 -> \"l\",\n            90 -> \"xc\"\
    ,\n            100 -> \"c\",\n            400 -> \"cd\",\n            500 -> \"\
    d\",\n            900 -> \"cm\",\n            1000 -> \"m\")\n        var n =\
    \ number\n        var result = \"\"\n        while (n > 0) {\n            var\
    \ max = roman.keys.filter(x => x <= n).max\n            result += roman(max)\n\
    \            n -= max\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List((\"m\", 1000), (\"cm\", 900), (\"d\", 500), (\"\
    cd\", 400), (\"c\", 100), (\"xc\", 90), (\"l\", 50), (\"xl\", 40), (\"x\", 10),\
    \ (\"ix\", 9), (\"v\", 5), (\"iv\", 4), (\"i\", 1))\n        var result = \"\"\
    \n        var remainder = number\n        for ((numeral, value) <- romanNumerals)\
    \ {\n            while (remainder >= value) {\n                result += numeral\n\
    \                remainder -= value\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val decimalNumbers\
    \ = List(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result\
    \ = \"\"\n        var num = number\n        for (i <- 0 to romanNumerals.length\
    \ - 1) {\n            while (num >= decimalNumbers(i)) {\n                result\
    \ += romanNumerals(i)\n                num -= decimalNumbers(i)\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var num = number\n        var result = \"\"\n        while (num > 0) {\n\
    \            if (num >= 1000) {\n                result += \"m\"\n           \
    \     num -= 1000\n            } else if (num >= 900) {\n                result\
    \ += \"cm\"\n                num -= 900\n            } else if (num >= 500) {\n\
    \                result += \"d\"\n                num -= 500\n            } else\
    \ if (num >= 400) {\n                result += \"cd\"\n                num -=\
    \ 400\n            } else if (num >= 100) {\n                result += \"c\"\n\
    \                num -= 100\n            } else if (num >= 90) {\n           \
    \     result += \"xc\"\n                num -= 90\n            } else if (num\
    \ >= 50) {\n                result += \"l\"\n                num -= 50\n     \
    \       } else if (num >= 40) {\n                result += \"xl\"\n          \
    \      num -= 40\n            } else if (num >= 10) {\n                result\
    \ += \"x\"\n                num -= 10\n            } else if (num >= 9) {\n  \
    \              result += \"ix\"\n                num -= 9\n            } else\
    \ if (num >= 5) {\n                result += \"v\"\n                num -= 5\n\
    \            } else if (num >= 4) {\n                result += \"iv\"\n      \
    \          num -= 4\n            } else if (num >= 1) {\n                result\
    \ += \"i\"\n                num -= 1\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\n            (1000, \"m\"),\n            (900,\
    \ \"cm\"),\n            (500, \"d\"),\n            (400, \"cd\"),\n          \
    \  (100, \"c\"),\n            (90, \"xc\"),\n            (50, \"l\"),\n      \
    \      (40, \"xl\"),\n            (10, \"x\"),\n            (9, \"ix\"),\n   \
    \         (5, \"v\"),\n            (4, \"iv\"),\n            (1, \"i\")\n    \
    \    )\n        var result = new StringBuilder\n        var remaining = number\n\
    \        for ((value, numeral) <- romanNumerals) {\n            while (remaining\
    \ >= value) {\n                result.append(numeral)\n                remaining\
    \ -= value\n            }\n        }\n        result.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        val digits = number.toString.map(_.asDigit).toArray\n\
    \        val numDigits = digits.length\n        for (i <- 0 until numDigits) {\n\
    \            val digit = digits(i)\n            val power = numDigits - i - 1\n\
    \            val digitRoman = digit match {\n                case 1 => \"i\"\n\
    \                case 2 => \"ii\"\n                case 3 => \"iii\"\n       \
    \         case 4 => \"iv\"\n                case 5 => \"v\"\n                case\
    \ 6 => \"vi\"\n                case 7 => \"vii\"\n                case 8 => \"\
    viii\"\n                case 9 => \"ix\"\n                case _ => \"\"\n   \
    \         }\n            val powerRoman = power match {\n                case\
    \ 1 => \"x\"\n                case 2 => \"c\"\n                case 3 => \"m\"\
    \n                case _ => \"\"\n            }\n            roman.append(powerRoman\
    \ * (digit / 5))\n            roman.append(digitRoman)\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkzg5lf_i.scala:45)\n\tat Problem.main(tmpkzg5lf_i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var num = number\n        var result = \"\"\n        while (num > 0) {\n\
    \            if (num >= 1000) {\n                result += \"m\"\n           \
    \     num -= 1000\n            } else if (num >= 900) {\n                result\
    \ += \"cm\"\n                num -= 900\n            } else if (num >= 500) {\n\
    \                result += \"d\"\n                num -= 500\n            } else\
    \ if (num >= 400) {\n                result += \"cd\"\n                num -=\
    \ 400\n            } else if (num >= 100) {\n                result += \"c\"\n\
    \                num -= 100\n            } else if (num >= 90) {\n           \
    \     result += \"xc\"\n                num -= 90\n            } else if (num\
    \ >= 50) {\n                result += \"l\"\n                num -= 50\n     \
    \       } else if (num >= 40) {\n                result += \"xl\"\n          \
    \      num -= 40\n            } else if (num >= 10) {\n                result\
    \ += \"x\"\n                num -= 10\n            } else if (num >= 9) {\n  \
    \              result += \"ix\"\n                num -= 9\n            } else\
    \ if (num >= 5) {\n                result += \"v\"\n                num -= 5\n\
    \            } else if (num >= 4) {\n                result += \"iv\"\n      \
    \          num -= 4\n            } else if (num >= 1) {\n                result\
    \ += \"i\"\n                num -= 1\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var n = number\n        var result = \"\"\n        while (n >= 1000) {\n\
    \            result += \"m\"\n            n -= 1000\n        }\n        while\
    \ (n >= 900) {\n            result += \"cm\"\n            n -= 900\n        }\n\
    \        while (n >= 500) {\n            result += \"d\"\n            n -= 500\n\
    \        }\n        while (n >= 400) {\n            result += \"cd\"\n       \
    \     n -= 400\n        }\n        while (n >= 100) {\n            result += \"\
    c\"\n            n -= 100\n        }\n        while (n >= 90) {\n            result\
    \ += \"xc\"\n            n -= 90\n        }\n        while (n >= 50) {\n     \
    \       result += \"l\"\n            n -= 50\n        }\n        while (n >= 40)\
    \ {\n            result += \"xl\"\n            n -= 40\n        }\n        while\
    \ (n >= 10) {\n            result += \"x\"\n            n -= 10\n        }\n \
    \       while (n >= 9) {\n            result += \"ix\"\n            n -= 9\n \
    \       }\n        while (n >= 5) {\n            result += \"v\"\n           \
    \ n -= 5\n        }\n        while (n >= 4) {\n            result += \"iv\"\n\
    \            n -= 4\n        }\n        while (n >= 1) {\n            result +=\
    \ \"i\"\n            n -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ while (num >= 900) {\n            result += \"cm\"\n            num -= 900\n\
    \        }\n        while (num >= 500) {\n            result += \"d\"\n      \
    \      num -= 500\n        }\n        while (num >= 400) {\n            result\
    \ += \"cd\"\n            num -= 400\n        }\n        while (num >= 100) {\n\
    \            result += \"c\"\n            num -= 100\n        }\n        while\
    \ (num >= 90) {\n            result += \"xc\"\n            num -= 90\n       \
    \ }\n        while (num >= 50) {\n            result += \"l\"\n            num\
    \ -= 50\n        }\n        while (num >= 40) {\n            result += \"xl\"\n\
    \            num -= 40\n        }\n        while (num >= 10) {\n            result\
    \ += \"x\"\n            num -= 10\n        }\n        while (num >= 9) {\n   \
    \         result += \"ix\"\n            num -= 9\n        }\n        while (num\
    \ >= 5) {\n            result += \"v\"\n            num -= 5\n        }\n    \
    \    while (num >= 4) {\n            result += \"iv\"\n            num -= 4\n\
    \        }\n        while (num >= 1) {\n            result += \"i\"\n        \
    \    num -= 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val romanValues = List(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n\
    \        var remainder = number\n        for (i <- 0 to romanNumerals.length -\
    \ 1) {\n            while (remainder >= romanValues(i)) {\n                result\
    \ += romanNumerals(i)\n                remainder -= romanValues(i)\n         \
    \   }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ while (num >= 900) {\n            result += \"cm\"\n            num -= 900\n\
    \        }\n        while (num >= 500) {\n            result += \"d\"\n      \
    \      num -= 500\n        }\n        while (num >= 400) {\n            result\
    \ += \"cd\"\n            num -= 400\n        }\n        while (num >= 100) {\n\
    \            result += \"c\"\n            num -= 100\n        }\n        while\
    \ (num >= 90) {\n            result += \"xc\"\n            num -= 90\n       \
    \ }\n        while (num >= 50) {\n            result += \"l\"\n            num\
    \ -= 50\n        }\n        while (num >= 40) {\n            result += \"xl\"\n\
    \            num -= 40\n        }\n        while (num >= 10) {\n            result\
    \ += \"x\"\n            num -= 10\n        }\n        while (num >= 9) {\n   \
    \         result += \"ix\"\n            num -= 9\n        }\n        while (num\
    \ >= 5) {\n            result += \"v\"\n            num -= 5\n        }\n    \
    \    while (num >= 4) {\n            result += \"iv\"\n            num -= 4\n\
    \        }\n        while (num >= 1) {\n            result += \"i\"\n        \
    \    num -= 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var num = number\n        var result = \"\"\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ while (num >= 900) {\n            result += \"cm\"\n            num -= 900\n\
    \        }\n        while (num >= 500) {\n            result += \"d\"\n      \
    \      num -= 500\n        }\n        while (num >= 400) {\n            result\
    \ += \"cd\"\n            num -= 400\n        }\n        while (num >= 100) {\n\
    \            result += \"c\"\n            num -= 100\n        }\n        while\
    \ (num >= 90) {\n            result += \"xc\"\n            num -= 90\n       \
    \ }\n        while (num >= 50) {\n            result += \"l\"\n            num\
    \ -= 50\n        }\n        while (num >= 40) {\n            result += \"xl\"\n\
    \            num -= 40\n        }\n        while (num >= 10) {\n            result\
    \ += \"x\"\n            num -= 10\n        }\n        while (num >= 9) {\n   \
    \         result += \"ix\"\n            num -= 9\n        }\n        while (num\
    \ >= 5) {\n            result += \"v\"\n            num -= 5\n        }\n    \
    \    while (num >= 4) {\n            result += \"iv\"\n            num -= 4\n\
    \        }\n        while (num >= 1) {\n            result += \"i\"\n        \
    \    num -= 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var n = number\n        var result = \"\"\n        while (n >= 1000) {\n\
    \            result += \"m\"\n            n -= 1000\n        }\n        while\
    \ (n >= 900) {\n            result += \"cm\"\n            n -= 900\n        }\n\
    \        while (n >= 500) {\n            result += \"d\"\n            n -= 500\n\
    \        }\n        while (n >= 400) {\n            result += \"cd\"\n       \
    \     n -= 400\n        }\n        while (n >= 100) {\n            result += \"\
    c\"\n            n -= 100\n        }\n        while (n >= 90) {\n            result\
    \ += \"xc\"\n            n -= 90\n        }\n        while (n >= 50) {\n     \
    \       result += \"l\"\n            n -= 50\n        }\n        while (n >= 40)\
    \ {\n            result += \"xl\"\n            n -= 40\n        }\n        while\
    \ (n >= 10) {\n            result += \"x\"\n            n -= 10\n        }\n \
    \       while (n >= 9) {\n            result += \"ix\"\n            n -= 9\n \
    \       }\n        while (n >= 5) {\n            result += \"v\"\n           \
    \ n -= 5\n        }\n        while (n >= 4) {\n            result += \"iv\"\n\
    \            n -= 4\n        }\n        while (n >= 1) {\n            result +=\
    \ \"i\"\n            n -= 1\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val decimalNumbers\
    \ = List(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result\
    \ = \"\"\n        var num = number\n        for (i <- 0 to romanNumerals.length\
    \ - 1) {\n            while (num >= decimalNumbers(i)) {\n                result\
    \ += romanNumerals(i)\n                num -= decimalNumbers(i)\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ while (num >= 900) {\n            result += \"cm\"\n            num -= 900\n\
    \        }\n        while (num >= 500) {\n            result += \"d\"\n      \
    \      num -= 500\n        }\n        while (num >= 400) {\n            result\
    \ += \"cd\"\n            num -= 400\n        }\n        while (num >= 100) {\n\
    \            result += \"c\"\n            num -= 100\n        }\n        while\
    \ (num >= 90) {\n            result += \"xc\"\n            num -= 90\n       \
    \ }\n        while (num >= 50) {\n            result += \"l\"\n            num\
    \ -= 50\n        }\n        while (num >= 40) {\n            result += \"xl\"\n\
    \            num -= 40\n        }\n        while (num >= 10) {\n            result\
    \ += \"x\"\n            num -= 10\n        }\n        while (num >= 9) {\n   \
    \         result += \"ix\"\n            num -= 9\n        }\n        while (num\
    \ >= 5) {\n            result += \"v\"\n            num -= 5\n        }\n    \
    \    while (num >= 4) {\n            result += \"iv\"\n            num -= 4\n\
    \        }\n        while (num >= 1) {\n            result += \"i\"\n        \
    \    num -= 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        while (num >= 500) {\n            result += \"d\"\n        \
    \    num -= 500\n        }\n        if (num >= 400) {\n            result += \"\
    cd\"\n            num -= 400\n        }\n        while (num >= 100) {\n      \
    \      result += \"c\"\n            num -= 100\n        }\n        if (num >=\
    \ 90) {\n            result += \"xc\"\n            num -= 90\n        }\n    \
    \    while (num >= 50) {\n            result += \"l\"\n            num -= 50\n\
    \        }\n        if (num >= 40) {\n            result += \"xl\"\n         \
    \   num -= 40\n        }\n        while (num >= 10) {\n            result += \"\
    x\"\n            num -= 10\n        }\n        if (num >= 9) {\n            result\
    \ += \"ix\"\n            num -= 9\n        }\n        while (num >= 5) {\n   \
    \         result += \"v\"\n            num -= 5\n        }\n        if (num >=\
    \ 4) {\n            result += \"iv\"\n            num -= 4\n        }\n      \
    \  while (num >= 1) {\n            result += \"i\"\n            num -= 1\n   \
    \     }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var n = number\n        var result = \"\"\n        while (n >= 1000) {\n\
    \            result += \"m\"\n            n -= 1000\n        }\n        if (n\
    \ >= 900) {\n            result += \"cm\"\n            n -= 900\n        }\n \
    \       if (n >= 500) {\n            result += \"d\"\n            n -= 500\n \
    \       }\n        if (n >= 400) {\n            result += \"cd\"\n           \
    \ n -= 400\n        }\n        while (n >= 100) {\n            result += \"c\"\
    \n            n -= 100\n        }\n        if (n >= 90) {\n            result\
    \ += \"xc\"\n            n -= 90\n        }\n        if (n >= 50) {\n        \
    \    result += \"l\"\n            n -= 50\n        }\n        if (n >= 40) {\n\
    \            result += \"xl\"\n            n -= 40\n        }\n        while (n\
    \ >= 10) {\n            result += \"x\"\n            n -= 10\n        }\n    \
    \    if (n >= 9) {\n            result += \"ix\"\n            n -= 9\n       \
    \ }\n        if (n >= 5) {\n            result += \"v\"\n            n -= 5\n\
    \        }\n        if (n >= 4) {\n            result += \"iv\"\n            n\
    \ -= 4\n        }\n        while (n >= 1) {\n            result += \"i\"\n   \
    \         n -= 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ while (num >= 900) {\n            result += \"cm\"\n            num -= 900\n\
    \        }\n        while (num >= 500) {\n            result += \"d\"\n      \
    \      num -= 500\n        }\n        while (num >= 400) {\n            result\
    \ += \"cd\"\n            num -= 400\n        }\n        while (num >= 100) {\n\
    \            result += \"c\"\n            num -= 100\n        }\n        while\
    \ (num >= 90) {\n            result += \"xc\"\n            num -= 90\n       \
    \ }\n        while (num >= 50) {\n            result += \"l\"\n            num\
    \ -= 50\n        }\n        while (num >= 40) {\n            result += \"xl\"\n\
    \            num -= 40\n        }\n        while (num >= 10) {\n            result\
    \ += \"x\"\n            num -= 10\n        }\n        while (num >= 9) {\n   \
    \         result += \"ix\"\n            num -= 9\n        }\n        while (num\
    \ >= 5) {\n            result += \"v\"\n            num -= 5\n        }\n    \
    \    while (num >= 4) {\n            result += \"iv\"\n            num -= 4\n\
    \        }\n        while (num >= 1) {\n            result += \"i\"\n        \
    \    num -= 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val numbers = Array(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n\
    \        var i = 0\n        var num = number\n        while (num > 0) {\n    \
    \        while (num >= numbers(i)) {\n                result += romanNumerals(i)\n\
    \                num -= numbers(i)\n            }\n            i += 1\n      \
    \  }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        val romanNumerals = Array(\"m\",\
    \ \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\")\n        val numbers = Array(1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1)\n        var num = number\n        for (i <- 0 to 12) {\n  \
    \          while (num >= numbers(i)) {\n                roman.append(romanNumerals(i))\n\
    \                num -= numbers(i)\n            }\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var num = number\n        var result = \"\"\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List((\"m\", 1000), (\"cm\", 900), (\"d\", 500), (\"\
    cd\", 400), (\"c\", 100), (\"xc\", 90), (\"l\", 50), (\"xl\", 40), (\"x\", 10),\
    \ (\"ix\", 9), (\"v\", 5), (\"iv\", 4), (\"i\", 1))\n        def intToMiniRomanHelper(number\
    \ : Long, romanNumerals : List[(String, Int)]) : String = {\n            if (number\
    \ == 0) \"\"\n            else {\n                val (romanNumeral, value) =\
    \ romanNumerals.head\n                romanNumeral * (number / value) + intToMiniRomanHelper(number\
    \ % value, romanNumerals.tail)\n            }\n        }\n        intToMiniRomanHelper(number,\
    \ romanNumerals)\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy91z6ktt.scala:20:32\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                romanNumeral\
    \ * (number / value) + intToMiniRomanHelper(number % value, romanNumerals.tail)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                Found:    Long\n\e[31m   |\e[0m    \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\n            (\"m\", 1000),\n            (\"cm\"\
    , 900),\n            (\"d\", 500),\n            (\"cd\", 400),\n            (\"\
    c\", 100),\n            (\"xc\", 90),\n            (\"l\", 50),\n            (\"\
    xl\", 40),\n            (\"x\", 10),\n            (\"ix\", 9),\n            (\"\
    v\", 5),\n            (\"iv\", 4),\n            (\"i\", 1)\n        )\n      \
    \  var result = \"\"\n        var remaining = number\n        for ((numeral, value)\
    \ <- romanNumerals) {\n            while (remaining >= value) {\n            \
    \    result += numeral\n                remaining -= value\n            }\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val numbers = Array(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n\
    \        var num = number\n        for (i <- 0 to romanNumerals.length - 1) {\n\
    \            while (num >= numbers(i)) {\n                result += romanNumerals(i)\n\
    \                num -= numbers(i)\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\n            (1000, \"m\"),\n            (900,\
    \ \"cm\"),\n            (500, \"d\"),\n            (400, \"cd\"),\n          \
    \  (100, \"c\"),\n            (90, \"xc\"),\n            (50, \"l\"),\n      \
    \      (40, \"xl\"),\n            (10, \"x\"),\n            (9, \"ix\"),\n   \
    \         (5, \"v\"),\n            (4, \"iv\"),\n            (1, \"i\")\n    \
    \    )\n        var result = \"\"\n        var num = number\n        for ((value,\
    \ symbol) <- romanNumerals) {\n            while (num >= value) {\n          \
    \      result += symbol\n                num -= value\n            }\n       \
    \ }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = new StringBuilder\n        var num = number\n        while\
    \ (num >= 1000) {\n            result.append(\"m\")\n            num -= 1000\n\
    \        }\n        if (num >= 900) {\n            result.append(\"cm\")\n   \
    \         num -= 900\n        }\n        if (num >= 500) {\n            result.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   result.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            result.append(\"c\")\n            num -= 100\n      \
    \  }\n        if (num >= 90) {\n            result.append(\"xc\")\n          \
    \  num -= 90\n        }\n        if (num >= 50) {\n            result.append(\"\
    l\")\n            num -= 50\n        }\n        if (num >= 40) {\n           \
    \ result.append(\"xl\")\n            num -= 40\n        }\n        while (num\
    \ >= 10) {\n            result.append(\"x\")\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result.append(\"ix\")\n            num -=\
    \ 9\n        }\n        if (num >= 5) {\n            result.append(\"v\")\n  \
    \          num -= 5\n        }\n        if (num >= 4) {\n            result.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   result.append(\"i\")\n            num -= 1\n        }\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var n = number\n        while (n >= 1000) {\n\
    \            result += \"m\"\n            n -= 1000\n        }\n        if (n\
    \ >= 900) {\n            result += \"cm\"\n            n -= 900\n        }\n \
    \       if (n >= 500) {\n            result += \"d\"\n            n -= 500\n \
    \       }\n        if (n >= 400) {\n            result += \"cd\"\n           \
    \ n -= 400\n        }\n        while (n >= 100) {\n            result += \"c\"\
    \n            n -= 100\n        }\n        if (n >= 90) {\n            result\
    \ += \"xc\"\n            n -= 90\n        }\n        if (n >= 50) {\n        \
    \    result += \"l\"\n            n -= 50\n        }\n        if (n >= 40) {\n\
    \            result += \"xl\"\n            n -= 40\n        }\n        while (n\
    \ >= 10) {\n            result += \"x\"\n            n -= 10\n        }\n    \
    \    if (n >= 9) {\n            result += \"ix\"\n            n -= 9\n       \
    \ }\n        if (n >= 5) {\n            result += \"v\"\n            n -= 5\n\
    \        }\n        if (n >= 4) {\n            result += \"iv\"\n            n\
    \ -= 4\n        }\n        while (n >= 1) {\n            result += \"i\"\n   \
    \         n -= 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = new StringBuilder\n        var num = number\n        while\
    \ (num >= 1000) {\n            result.append(\"m\")\n            num -= 1000\n\
    \        }\n        if (num >= 900) {\n            result.append(\"cm\")\n   \
    \         num -= 900\n        }\n        if (num >= 500) {\n            result.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   result.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            result.append(\"c\")\n            num -= 100\n      \
    \  }\n        if (num >= 90) {\n            result.append(\"xc\")\n          \
    \  num -= 90\n        }\n        if (num >= 50) {\n            result.append(\"\
    l\")\n            num -= 50\n        }\n        if (num >= 40) {\n           \
    \ result.append(\"xl\")\n            num -= 40\n        }\n        while (num\
    \ >= 10) {\n            result.append(\"x\")\n            num -= 10\n        }\n\
    \        if (num >= 9) {\n            result.append(\"ix\")\n            num -=\
    \ 9\n        }\n        if (num >= 5) {\n            result.append(\"v\")\n  \
    \          num -= 5\n        }\n        if (num >= 4) {\n            result.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   result.append(\"i\")\n            num -= 1\n        }\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\n            (1000l, \"m\"),\n            (900l,\
    \ \"cm\"),\n            (500l, \"d\"),\n            (400l, \"cd\"),\n        \
    \    (100l, \"c\"),\n            (90l, \"xc\"),\n            (50l, \"l\"),\n \
    \           (40l, \"xl\"),\n            (10l, \"x\"),\n            (9l, \"ix\"\
    ),\n            (5l, \"v\"),\n            (4l, \"iv\"),\n            (1l, \"i\"\
    )\n        )\n        var result = \"\"\n        var remaining = number\n    \
    \    for ((numeral, roman) <- romanNumerals) {\n            while (remaining >=\
    \ numeral) {\n                result += roman\n                remaining -= numeral\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\n            (1000, \"m\"),\n            (900,\
    \ \"cm\"),\n            (500, \"d\"),\n            (400, \"cd\"),\n          \
    \  (100, \"c\"),\n            (90, \"xc\"),\n            (50, \"l\"),\n      \
    \      (40, \"xl\"),\n            (10, \"x\"),\n            (9, \"ix\"),\n   \
    \         (5, \"v\"),\n            (4, \"iv\"),\n            (1, \"i\")\n    \
    \    )\n        var result = new StringBuilder()\n        var remaining = number\n\
    \        for ((value, numeral) <- romanNumerals) {\n            while (remaining\
    \ >= value) {\n                result.append(numeral)\n                remaining\
    \ -= value\n            }\n        }\n        result.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val decimalNumbers\
    \ = List(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result\
    \ = \"\"\n        var n = number\n        for (i <- 0 to romanNumerals.length\
    \ - 1) {\n            while (n >= decimalNumbers(i)) {\n                result\
    \ += romanNumerals(i)\n                n -= decimalNumbers(i)\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"\
    xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val arabic = Array(1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n    \
    \    var n = number\n        for (i <- 0 to roman.length - 1) {\n            while\
    \ (n >= arabic(i)) {\n                result += roman(i)\n                n -=\
    \ arabic(i)\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val decimalValues =\
    \ Array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result\
    \ = \"\"\n        var i = 0\n        var num = number\n        while (num > 0)\
    \ {\n            while (num >= decimalValues(i)) {\n                result +=\
    \ romanNumerals(i)\n                num -= decimalValues(i)\n            }\n \
    \           i += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var n = number\n        var result = \"\"\n        while (n > 0) {\n   \
    \         if (n >= 1000) {\n                result += \"m\"\n                n\
    \ -= 1000\n            } else if (n >= 900) {\n                result += \"cm\"\
    \n                n -= 900\n            } else if (n >= 500) {\n             \
    \   result += \"d\"\n                n -= 500\n            } else if (n >= 400)\
    \ {\n                result += \"cd\"\n                n -= 400\n            }\
    \ else if (n >= 100) {\n                result += \"c\"\n                n -=\
    \ 100\n            } else if (n >= 90) {\n                result += \"xc\"\n \
    \               n -= 90\n            } else if (n >= 50) {\n                result\
    \ += \"l\"\n                n -= 50\n            } else if (n >= 40) {\n     \
    \           result += \"xl\"\n                n -= 40\n            } else if (n\
    \ >= 10) {\n                result += \"x\"\n                n -= 10\n       \
    \     } else if (n >= 9) {\n                result += \"ix\"\n               \
    \ n -= 9\n            } else if (n >= 5) {\n                result += \"v\"\n\
    \                n -= 5\n            } else if (n >= 4) {\n                result\
    \ += \"iv\"\n                n -= 4\n            } else if (n >= 1) {\n      \
    \          result += \"i\"\n                n -= 1\n            }\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val numbers = List(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var remaining = number\n\
    \        var result = \"\"\n        for (i <- 0 to romanNumerals.length - 1) {\n\
    \            while (remaining >= numbers(i)) {\n                result += romanNumerals(i)\n\
    \                remaining -= numbers(i)\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        while (num >= 500) {\n            result += \"d\"\n        \
    \    num -= 500\n        }\n        if (num >= 400) {\n            result += \"\
    cd\"\n            num -= 400\n        }\n        while (num >= 100) {\n      \
    \      result += \"c\"\n            num -= 100\n        }\n        if (num >=\
    \ 90) {\n            result += \"xc\"\n            num -= 90\n        }\n    \
    \    while (num >= 50) {\n            result += \"l\"\n            num -= 50\n\
    \        }\n        if (num >= 40) {\n            result += \"xl\"\n         \
    \   num -= 40\n        }\n        while (num >= 10) {\n            result += \"\
    x\"\n            num -= 10\n        }\n        if (num >= 9) {\n            result\
    \ += \"ix\"\n            num -= 9\n        }\n        while (num >= 5) {\n   \
    \         result += \"v\"\n            num -= 5\n        }\n        if (num >=\
    \ 4) {\n            result += \"iv\"\n            num -= 4\n        }\n      \
    \  while (num >= 1) {\n            result += \"i\"\n            num -= 1\n   \
    \     }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var num = number\n        var result = \"\"\n        while (num > 0) {\n\
    \            if (num >= 1000) {\n                result += \"m\"\n           \
    \     num -= 1000\n            } else if (num >= 900) {\n                result\
    \ += \"cm\"\n                num -= 900\n            } else if (num >= 500) {\n\
    \                result += \"d\"\n                num -= 500\n            } else\
    \ if (num >= 400) {\n                result += \"cd\"\n                num -=\
    \ 400\n            } else if (num >= 100) {\n                result += \"c\"\n\
    \                num -= 100\n            } else if (num >= 90) {\n           \
    \     result += \"xc\"\n                num -= 90\n            } else if (num\
    \ >= 50) {\n                result += \"l\"\n                num -= 50\n     \
    \       } else if (num >= 40) {\n                result += \"xl\"\n          \
    \      num -= 40\n            } else if (num >= 10) {\n                result\
    \ += \"x\"\n                num -= 10\n            } else if (num >= 9) {\n  \
    \              result += \"ix\"\n                num -= 9\n            } else\
    \ if (num >= 5) {\n                result += \"v\"\n                num -= 5\n\
    \            } else if (num >= 4) {\n                result += \"iv\"\n      \
    \          num -= 4\n            } else if (num >= 1) {\n                result\
    \ += \"i\"\n                num -= 1\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val decimalValues =\
    \ List(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result\
    \ = \"\"\n        var remainder = number\n        for (i <- 0 to romanNumerals.length\
    \ - 1) {\n            while (remainder >= decimalValues(i)) {\n              \
    \  result += romanNumerals(i)\n                remainder -= decimalValues(i)\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val values = List(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n\
    \        var remaining = number\n        for (i <- 0 to romanNumerals.length -\
    \ 1) {\n            while (remaining >= values(i)) {\n                result +=\
    \ romanNumerals(i)\n                remaining -= values(i)\n            }\n  \
    \      }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ while (num >= 900) {\n            result += \"cm\"\n            num -= 900\n\
    \        }\n        while (num >= 500) {\n            result += \"d\"\n      \
    \      num -= 500\n        }\n        while (num >= 400) {\n            result\
    \ += \"cd\"\n            num -= 400\n        }\n        while (num >= 100) {\n\
    \            result += \"c\"\n            num -= 100\n        }\n        while\
    \ (num >= 90) {\n            result += \"xc\"\n            num -= 90\n       \
    \ }\n        while (num >= 50) {\n            result += \"l\"\n            num\
    \ -= 50\n        }\n        while (num >= 40) {\n            result += \"xl\"\n\
    \            num -= 40\n        }\n        while (num >= 10) {\n            result\
    \ += \"x\"\n            num -= 10\n        }\n        while (num >= 9) {\n   \
    \         result += \"ix\"\n            num -= 9\n        }\n        while (num\
    \ >= 5) {\n            result += \"v\"\n            num -= 5\n        }\n    \
    \    while (num >= 4) {\n            result += \"iv\"\n            num -= 4\n\
    \        }\n        while (num >= 1) {\n            result += \"i\"\n        \
    \    num -= 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     def intToMiniRoman(number : Long, result : String) : String = {\n      \
    \      if (number == 0) result\n            else if (number >= 1000) intToMiniRoman(number\
    \ - 1000, result + \"m\")\n            else if (number >= 900) intToMiniRoman(number\
    \ - 900, result + \"cm\")\n            else if (number >= 500) intToMiniRoman(number\
    \ - 500, result + \"d\")\n            else if (number >= 400) intToMiniRoman(number\
    \ - 400, result + \"cd\")\n            else if (number >= 100) intToMiniRoman(number\
    \ - 100, result + \"c\")\n            else if (number >= 90) intToMiniRoman(number\
    \ - 90, result + \"xc\")\n            else if (number >= 50) intToMiniRoman(number\
    \ - 50, result + \"l\")\n            else if (number >= 40) intToMiniRoman(number\
    \ - 40, result + \"xl\")\n            else if (number >= 10) intToMiniRoman(number\
    \ - 10, result + \"x\")\n            else if (number >= 9) intToMiniRoman(number\
    \ - 9, result + \"ix\")\n            else if (number >= 5) intToMiniRoman(number\
    \ - 5, result + \"v\")\n            else if (number >= 4) intToMiniRoman(number\
    \ - 4, result + \"iv\")\n            else if (number >= 1) intToMiniRoman(number\
    \ - 1, result + \"i\")\n            else result\n        }\n        intToMiniRoman(number,\
    \ \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val numbers = List(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n\
    \        var remaining = number\n        for (i <- 0 to romanNumerals.length -\
    \ 1) {\n            while (remaining >= numbers(i)) {\n                result\
    \ += romanNumerals(i)\n                remaining -= numbers(i)\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var n = number\n        while (n >= 1000) {\n\
    \            result += \"m\"\n            n -= 1000\n        }\n        if (n\
    \ >= 900) {\n            result += \"cm\"\n            n -= 900\n        }\n \
    \       if (n >= 500) {\n            result += \"d\"\n            n -= 500\n \
    \       }\n        if (n >= 400) {\n            result += \"cd\"\n           \
    \ n -= 400\n        }\n        while (n >= 100) {\n            result += \"c\"\
    \n            n -= 100\n        }\n        if (n >= 90) {\n            result\
    \ += \"xc\"\n            n -= 90\n        }\n        if (n >= 50) {\n        \
    \    result += \"l\"\n            n -= 50\n        }\n        if (n >= 40) {\n\
    \            result += \"xl\"\n            n -= 40\n        }\n        while (n\
    \ >= 10) {\n            result += \"x\"\n            n -= 10\n        }\n    \
    \    if (n >= 9) {\n            result += \"ix\"\n            n -= 9\n       \
    \ }\n        if (n >= 5) {\n            result += \"v\"\n            n -= 5\n\
    \        }\n        if (n >= 4) {\n            result += \"iv\"\n            n\
    \ -= 4\n        }\n        while (n >= 1) {\n            result += \"i\"\n   \
    \         n -= 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val numbers = Array(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n\
    \        var num = number\n        for (i <- 0 to numbers.length - 1) {\n    \
    \        while (num >= numbers(i)) {\n                result += romanNumerals(i)\n\
    \                num -= numbers(i)\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805860
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder()\n        var num = number\n        while\
    \ (num >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n\
    \        }\n        if (num >= 900) {\n            roman.append(\"cm\")\n    \
    \        num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805860
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\n            (1000, \"m\"),\n            (900,\
    \ \"cm\"),\n            (500, \"d\"),\n            (400, \"cd\"),\n          \
    \  (100, \"c\"),\n            (90, \"xc\"),\n            (50, \"l\"),\n      \
    \      (40, \"xl\"),\n            (10, \"x\"),\n            (9, \"ix\"),\n   \
    \         (5, \"v\"),\n            (4, \"iv\"),\n            (1, \"i\")\n    \
    \    )\n        var remainder = number\n        var result = \"\"\n        for\
    \ ((value, numeral) <- romanNumerals) {\n            while (remainder >= value)\
    \ {\n                result += numeral\n                remainder -= value\n \
    \           }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        while (num >= 900) {\n            roman.append(\"cm\")\n      \
    \      num -= 900\n        }\n        while (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        while (num >= 400) {\n      \
    \      roman.append(\"cd\")\n            num -= 400\n        }\n        while\
    \ (num >= 100) {\n            roman.append(\"c\")\n            num -= 100\n  \
    \      }\n        while (num >= 90) {\n            roman.append(\"xc\")\n    \
    \        num -= 90\n        }\n        while (num >= 50) {\n            roman.append(\"\
    l\")\n            num -= 50\n        }\n        while (num >= 40) {\n        \
    \    roman.append(\"xl\")\n            num -= 40\n        }\n        while (num\
    \ >= 10) {\n            roman.append(\"x\")\n            num -= 10\n        }\n\
    \        while (num >= 9) {\n            roman.append(\"ix\")\n            num\
    \ -= 9\n        }\n        while (num >= 5) {\n            roman.append(\"v\"\
    )\n            num -= 5\n        }\n        while (num >= 4) {\n            roman.append(\"\
    iv\")\n            num -= 4\n        }\n        while (num >= 1) {\n         \
    \   roman.append(\"i\")\n            num -= 1\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var n = number\n        while (n >= 1000) {\n\
    \            result += \"m\"\n            n -= 1000\n        }\n        if (n\
    \ >= 900) {\n            result += \"cm\"\n            n -= 900\n        }\n \
    \       if (n >= 500) {\n            result += \"d\"\n            n -= 500\n \
    \       }\n        if (n >= 400) {\n            result += \"cd\"\n           \
    \ n -= 400\n        }\n        while (n >= 100) {\n            result += \"c\"\
    \n            n -= 100\n        }\n        if (n >= 90) {\n            result\
    \ += \"xc\"\n            n -= 90\n        }\n        if (n >= 50) {\n        \
    \    result += \"l\"\n            n -= 50\n        }\n        if (n >= 40) {\n\
    \            result += \"xl\"\n            n -= 40\n        }\n        while (n\
    \ >= 10) {\n            result += \"x\"\n            n -= 10\n        }\n    \
    \    if (n >= 9) {\n            result += \"ix\"\n            n -= 9\n       \
    \ }\n        if (n >= 5) {\n            result += \"v\"\n            n -= 5\n\
    \        }\n        if (n >= 4) {\n            result += \"iv\"\n            n\
    \ -= 4\n        }\n        while (n >= 1) {\n            result += \"i\"\n   \
    \         n -= 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val values = List(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        val sb = new StringBuilder\n\
    \        var num = number\n        for (i <- 0 until romanNumerals.length) {\n\
    \            while (num >= values(i)) {\n                sb.append(romanNumerals(i))\n\
    \                num -= values(i)\n            }\n        }\n        sb.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new Array[String](4)\n        roman(0) = \"m\"\n        roman(1)\
    \ = \"c\"\n        roman(2) = \"x\"\n        roman(3) = \"i\"\n        val romanValue\
    \ = new Array[Int](4)\n        romanValue(0) = 1000\n        romanValue(1) = 100\n\
    \        romanValue(2) = 10\n        romanValue(3) = 1\n        var num = number\n\
    \        var result = \"\"\n        for (i <- 0 to 3) {\n            var count\
    \ = num / romanValue(i)\n            num = num % romanValue(i)\n            if\
    \ (count == 9) {\n                result += roman(i) + roman(i - 1)\n        \
    \    } else if (count >= 5) {\n                result += roman(i - 1)\n      \
    \          for (j <- 0 to count - 5 - 1) {\n                    result += roman(i)\n\
    \                }\n            } else if (count == 4) {\n                result\
    \ += roman(i) + roman(i - 1)\n            } else {\n                for (j <-\
    \ 0 to count - 1) {\n                    result += roman(i)\n                }\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx06pinaz.scala:34:31\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m                \e[33mfor\e[0m\
    \ (j <- \e[31m0\e[0m to count - \e[31m5\e[0m - \e[31m1\e[0m) {\n\e[31m\e[31m \
    \  |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Found:    Long\n\e[31m   |\e[0m                \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpx06pinaz.scala:40:31 --------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m                \e[33mfor\e[0m (j <- \e[31m0\e[0m to count - \e[31m1\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               Found:    Long\n\e[31m   |\e[0m  \
    \                             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805860
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var n = number\n        var result = \"\"\n        while (n >= 1000) {\n\
    \            result += \"m\"\n            n -= 1000\n        }\n        while\
    \ (n >= 900) {\n            result += \"cm\"\n            n -= 900\n        }\n\
    \        while (n >= 500) {\n            result += \"d\"\n            n -= 500\n\
    \        }\n        while (n >= 400) {\n            result += \"cd\"\n       \
    \     n -= 400\n        }\n        while (n >= 100) {\n            result += \"\
    c\"\n            n -= 100\n        }\n        while (n >= 90) {\n            result\
    \ += \"xc\"\n            n -= 90\n        }\n        while (n >= 50) {\n     \
    \       result += \"l\"\n            n -= 50\n        }\n        while (n >= 40)\
    \ {\n            result += \"xl\"\n            n -= 40\n        }\n        while\
    \ (n >= 10) {\n            result += \"x\"\n            n -= 10\n        }\n \
    \       while (n >= 9) {\n            result += \"ix\"\n            n -= 9\n \
    \       }\n        while (n >= 5) {\n            result += \"v\"\n           \
    \ n -= 5\n        }\n        while (n >= 4) {\n            result += \"iv\"\n\
    \            n -= 4\n        }\n        while (n >= 1) {\n            result +=\
    \ \"i\"\n            n -= 1\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ while (num >= 900) {\n            result += \"cm\"\n            num -= 900\n\
    \        }\n        while (num >= 500) {\n            result += \"d\"\n      \
    \      num -= 500\n        }\n        while (num >= 400) {\n            result\
    \ += \"cd\"\n            num -= 400\n        }\n        while (num >= 100) {\n\
    \            result += \"c\"\n            num -= 100\n        }\n        while\
    \ (num >= 90) {\n            result += \"xc\"\n            num -= 90\n       \
    \ }\n        while (num >= 50) {\n            result += \"l\"\n            num\
    \ -= 50\n        }\n        while (num >= 40) {\n            result += \"xl\"\n\
    \            num -= 40\n        }\n        while (num >= 10) {\n            result\
    \ += \"x\"\n            num -= 10\n        }\n        while (num >= 9) {\n   \
    \         result += \"ix\"\n            num -= 9\n        }\n        while (num\
    \ >= 5) {\n            result += \"v\"\n            num -= 5\n        }\n    \
    \    while (num >= 4) {\n            result += \"iv\"\n            num -= 4\n\
    \        }\n        while (num >= 1) {\n            result += \"i\"\n        \
    \    num -= 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var n = number\n        while (n >= 1000) {\n\
    \            result += \"m\"\n            n -= 1000\n        }\n        while\
    \ (n >= 900) {\n            result += \"cm\"\n            n -= 900\n        }\n\
    \        while (n >= 500) {\n            result += \"d\"\n            n -= 500\n\
    \        }\n        while (n >= 400) {\n            result += \"cd\"\n       \
    \     n -= 400\n        }\n        while (n >= 100) {\n            result += \"\
    c\"\n            n -= 100\n        }\n        while (n >= 90) {\n            result\
    \ += \"xc\"\n            n -= 90\n        }\n        while (n >= 50) {\n     \
    \       result += \"l\"\n            n -= 50\n        }\n        while (n >= 40)\
    \ {\n            result += \"xl\"\n            n -= 40\n        }\n        while\
    \ (n >= 10) {\n            result += \"x\"\n            n -= 10\n        }\n \
    \       while (n >= 9) {\n            result += \"ix\"\n            n -= 9\n \
    \       }\n        while (n >= 5) {\n            result += \"v\"\n           \
    \ n -= 5\n        }\n        while (n >= 4) {\n            result += \"iv\"\n\
    \            n -= 4\n        }\n        while (n >= 1) {\n            result +=\
    \ \"i\"\n            n -= 1\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        val romanDigits = Array(\"m\", \"\
    cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\"\
    , \"i\")\n        val arabicDigits = Array(1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1)\n        var n = number\n        for (i <- 0 to 12) {\n    \
    \        while (n >= arabicDigits(i)) {\n                roman.append(romanDigits(i))\n\
    \                n -= arabicDigits(i)\n            }\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var n = number\n        while (n >= 1000) {\n\
    \            result += \"m\"\n            n -= 1000\n        }\n        while\
    \ (n >= 900) {\n            result += \"cm\"\n            n -= 900\n        }\n\
    \        while (n >= 500) {\n            result += \"d\"\n            n -= 500\n\
    \        }\n        while (n >= 400) {\n            result += \"cd\"\n       \
    \     n -= 400\n        }\n        while (n >= 100) {\n            result += \"\
    c\"\n            n -= 100\n        }\n        while (n >= 90) {\n            result\
    \ += \"xc\"\n            n -= 90\n        }\n        while (n >= 50) {\n     \
    \       result += \"l\"\n            n -= 50\n        }\n        while (n >= 40)\
    \ {\n            result += \"xl\"\n            n -= 40\n        }\n        while\
    \ (n >= 10) {\n            result += \"x\"\n            n -= 10\n        }\n \
    \       while (n >= 9) {\n            result += \"ix\"\n            n -= 9\n \
    \       }\n        while (n >= 5) {\n            result += \"v\"\n           \
    \ n -= 5\n        }\n        while (n >= 4) {\n            result += \"iv\"\n\
    \            n -= 4\n        }\n        while (n >= 1) {\n            result +=\
    \ \"i\"\n            n -= 1\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var num = number\n        var result = \"\"\n        while (num > 0) {\n\
    \            if (num >= 1000) {\n                result += \"m\"\n           \
    \     num -= 1000\n            } else if (num >= 900) {\n                result\
    \ += \"cm\"\n                num -= 900\n            } else if (num >= 500) {\n\
    \                result += \"d\"\n                num -= 500\n            } else\
    \ if (num >= 400) {\n                result += \"cd\"\n                num -=\
    \ 400\n            } else if (num >= 100) {\n                result += \"c\"\n\
    \                num -= 100\n            } else if (num >= 90) {\n           \
    \     result += \"xc\"\n                num -= 90\n            } else if (num\
    \ >= 50) {\n                result += \"l\"\n                num -= 50\n     \
    \       } else if (num >= 40) {\n                result += \"xl\"\n          \
    \      num -= 40\n            } else if (num >= 10) {\n                result\
    \ += \"x\"\n                num -= 10\n            } else if (num >= 9) {\n  \
    \              result += \"ix\"\n                num -= 9\n            } else\
    \ if (num >= 5) {\n                result += \"v\"\n                num -= 5\n\
    \            } else if (num >= 4) {\n                result += \"iv\"\n      \
    \          num -= 4\n            } else if (num >= 1) {\n                result\
    \ += \"i\"\n                num -= 1\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new Array[String](4)\n        roman(0) = \"m\"\n        roman(1)\
    \ = \"c\"\n        roman(2) = \"x\"\n        roman(3) = \"i\"\n        val values\
    \ = new Array[Int](4)\n        values(0) = 1000\n        values(1) = 100\n   \
    \     values(2) = 10\n        values(3) = 1\n        val romanNumerals = new Array[String](4)\n\
    \        romanNumerals(0) = \"m\"\n        romanNumerals(1) = \"cm\"\n       \
    \ romanNumerals(2) = \"d\"\n        romanNumerals(3) = \"cd\"\n        val romanNumerals2\
    \ = new Array[String](4)\n        romanNumerals2(0) = \"c\"\n        romanNumerals2(1)\
    \ = \"xc\"\n        romanNumerals2(2) = \"l\"\n        romanNumerals2(3) = \"\
    xl\"\n        val romanNumerals3 = new Array[String](4)\n        romanNumerals3(0)\
    \ = \"x\"\n        romanNumerals3(1) = \"ix\"\n        romanNumerals3(2) = \"\
    v\"\n        romanNumerals3(3) = \"iv\"\n        val romanNumerals4 = new Array[String](4)\n\
    \        romanNumerals4(0) = \"i\"\n        romanNumerals4(1) = \"ii\"\n     \
    \   romanNumerals4(2) = \"iii\"\n        romanNumerals4(3) = \"iv\"\n        val\
    \ result = new StringBuilder\n        var n = number\n        for (i <- 0 to 3)\
    \ {\n            val d = n / values(i)\n            n %= values(i)\n         \
    \   if (d == 9) {\n                result.append(romanNumerals(i))\n         \
    \   } else if (d >= 5) {\n                result.append(romanNumerals2(i))\n \
    \               for (j <- 0 to d - 5 - 1) {\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph1zn8edl.scala:74:0 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph1zn8edl.scala:54:31\
    \ --------------------\e[0m\e[0m\n\e[31m54 |\e[0m                \e[33mfor\e[0m\
    \ (j <- \e[31m0\e[0m to d - \e[31m5\e[0m - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e\
    [0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Found:    Long\n\e[31m   |\e[0m                          \
    \     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmph1zn8edl.scala:56:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m56 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1659805861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var num = number\n        var result = \"\"\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val romanValues = List(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n\
    \        var remaining = number\n        for (i <- 0 to romanNumerals.length -\
    \ 1) {\n            while (remaining >= romanValues(i)) {\n                result\
    \ += romanNumerals(i)\n                remaining -= romanValues(i)\n         \
    \   }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var n = number\n        var result = \"\"\n        while (n >= 1000) {\n\
    \            result += \"m\"\n            n -= 1000\n        }\n        if (n\
    \ >= 900) {\n            result += \"cm\"\n            n -= 900\n        }\n \
    \       if (n >= 500) {\n            result += \"d\"\n            n -= 500\n \
    \       }\n        if (n >= 400) {\n            result += \"cd\"\n           \
    \ n -= 400\n        }\n        while (n >= 100) {\n            result += \"c\"\
    \n            n -= 100\n        }\n        if (n >= 90) {\n            result\
    \ += \"xc\"\n            n -= 90\n        }\n        if (n >= 50) {\n        \
    \    result += \"l\"\n            n -= 50\n        }\n        if (n >= 40) {\n\
    \            result += \"xl\"\n            n -= 40\n        }\n        while (n\
    \ >= 10) {\n            result += \"x\"\n            n -= 10\n        }\n    \
    \    if (n >= 9) {\n            result += \"ix\"\n            n -= 9\n       \
    \ }\n        if (n >= 5) {\n            result += \"v\"\n            n -= 5\n\
    \        }\n        if (n >= 4) {\n            result += \"iv\"\n            n\
    \ -= 4\n        }\n        while (n >= 1) {\n            result += \"i\"\n   \
    \         n -= 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val decimalNumbers\
    \ = List(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result\
    \ = \"\"\n        var remaining = number\n        for (i <- 0 to romanNumerals.length\
    \ - 1) {\n            while (remaining >= decimalNumbers(i)) {\n             \
    \   result += romanNumerals(i)\n                remaining -= decimalNumbers(i)\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ while (num >= 900) {\n            result += \"cm\"\n            num -= 900\n\
    \        }\n        while (num >= 500) {\n            result += \"d\"\n      \
    \      num -= 500\n        }\n        while (num >= 400) {\n            result\
    \ += \"cd\"\n            num -= 400\n        }\n        while (num >= 100) {\n\
    \            result += \"c\"\n            num -= 100\n        }\n        while\
    \ (num >= 90) {\n            result += \"xc\"\n            num -= 90\n       \
    \ }\n        while (num >= 50) {\n            result += \"l\"\n            num\
    \ -= 50\n        }\n        while (num >= 40) {\n            result += \"xl\"\n\
    \            num -= 40\n        }\n        while (num >= 10) {\n            result\
    \ += \"x\"\n            num -= 10\n        }\n        while (num >= 9) {\n   \
    \         result += \"ix\"\n            num -= 9\n        }\n        while (num\
    \ >= 5) {\n            result += \"v\"\n            num -= 5\n        }\n    \
    \    while (num >= 4) {\n            result += \"iv\"\n            num -= 4\n\
    \        }\n        while (num >= 1) {\n            result += \"i\"\n        \
    \    num -= 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var n = number\n        var result = \"\"\n        while (n > 0) {\n   \
    \         if (n >= 1000) {\n                result += \"m\"\n                n\
    \ -= 1000\n            } else if (n >= 900) {\n                result += \"cm\"\
    \n                n -= 900\n            } else if (n >= 500) {\n             \
    \   result += \"d\"\n                n -= 500\n            } else if (n >= 400)\
    \ {\n                result += \"cd\"\n                n -= 400\n            }\
    \ else if (n >= 100) {\n                result += \"c\"\n                n -=\
    \ 100\n            } else if (n >= 90) {\n                result += \"xc\"\n \
    \               n -= 90\n            } else if (n >= 50) {\n                result\
    \ += \"l\"\n                n -= 50\n            } else if (n >= 40) {\n     \
    \           result += \"xl\"\n                n -= 40\n            } else if (n\
    \ >= 10) {\n                result += \"x\"\n                n -= 10\n       \
    \     } else if (n >= 9) {\n                result += \"ix\"\n               \
    \ n -= 9\n            } else if (n >= 5) {\n                result += \"v\"\n\
    \                n -= 5\n            } else if (n >= 4) {\n                result\
    \ += \"iv\"\n                n -= 4\n            } else if (n >= 1) {\n      \
    \          result += \"i\"\n                n -= 1\n            }\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val symbols = List(\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\")\n  \
    \      val values = List(1, 5, 10, 50, 100, 500, 1000)\n        val symbolsMap\
    \ = symbols.zip(values).toMap\n        val symbolsMapReverse = symbolsMap.map(_.swap)\n\
    \        val symbolsMapReverseSorted = symbolsMapReverse.toList.sortBy(_._1)\n\
    \        val symbolsMapReverseSortedMap = symbolsMapReverseSorted.toMap\n    \
    \    def helper(number : Long, result : String) : String = {\n            if (number\
    \ == 0) result\n            else {\n                val (symbol, value) = symbolsMapReverseSortedMap.find(p\
    \ => p._1 <= number).get\n                if (number == value) result + symbol\n\
    \                else if (number > value) {\n                    val nextValue\
    \ = symbolsMapReverseSortedMap.find(p => p._1 > value).get._1\n              \
    \      if (number < nextValue - value) result + symbol + symbolsMapReverse(number\
    \ - value)\n                    else result + symbol + symbolsMapReverse(nextValue\
    \ - value) + symbolsMapReverse(nextValue)\n                }\n               \
    \ else {\n                    val nextValue = symbolsMapReverseSortedMap.find(p\
    \ => p._1 < value).get._1\n                    if (number > value - nextValue)\
    \ result + symbolsMapReverse(nextValue) + symbolsMapReverse(number - nextValue)\n\
    \                    else result + symbolsMapReverse(value - nextValue) + symbol\n\
    \                }\n            }\n        }\n        helper(number, \"\")\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbz55loz8.scala:25:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mif\e[0m (number == value) result\
    \ + symbol\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Long and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpbz55loz8.scala:26:32 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (number\
    \ > value) {\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e[35m>\e\
    [0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m   |\e[0m (x: Double):\
    \ Boolean\n\e[31m   |\e[0m (x: Float): Boolean\n\e[31m   |\e[0m (x: Long): Boolean\n\
    \e[31m   |\e[0m (x: Int): Boolean\n\e[31m   |\e[0m (x: Char): Boolean\n\e[31m\
    \   |\e[0m (x: Short): Boolean\n\e[31m   |\e[0m (x: Byte): Boolean\n\e[31m   |\e\
    [0mmatch arguments ((value : String))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpbz55loz8.scala:27:78\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                   \
    \ \e[33mval\e[0m \e[36mnextValue\e[0m = symbolsMapReverseSortedMap.find(\e[36mp\e\
    [0m => p._1 > value).get._1\n\e[31m\e[31m   |\e[0m                           \
    \                                              ^^^^^^\e[0m\n\e[31m   |\e[0m None\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m>\e[0m in \e[33mclass\e\
    [0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Boolean\n\e[31m \
    \  |\e[0m  (x: Float): Boolean\n\e[31m   |\e[0m  (x: Long): Boolean\n\e[31m  \
    \ |\e[0m  (x: Int): Boolean\n\e[31m   |\e[0m  (x: Char): Boolean\n\e[31m   |\e\
    [0m  (x: Short): Boolean\n\e[31m   |\e[0m  (x: Byte): Boolean\n\e[31m   |\e[0m\
    \ match arguments ((value : String))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpbz55loz8.scala:28:43\
    \ -----------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                   \
    \ \e[33mif\e[0m (number < nextValue - value) result + symbol + symbolsMapReverse(number\
    \ - value)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m None of the overloaded alternatives of \e[33m"
  stdout: ''
  timestamp: 1659805862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val decimalNumbers\
    \ = List(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result\
    \ = \"\"\n        var remaining = number\n        for (i <- 0 to romanNumerals.length\
    \ - 1) {\n            while (remaining >= decimalNumbers(i)) {\n             \
    \   result += romanNumerals(i)\n                remaining -= decimalNumbers(i)\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanDigits = Array(\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"\
    )\n        val romanDigitsCount = romanDigits.length\n        val romanDigitsPairs\
    \ = romanDigits.sliding(2).toArray\n        val romanDigitsPairsCount = romanDigitsPairs.length\n\
    \        val romanDigitsPairsMap = romanDigitsPairs.map(x => (x(0), x(1))).toMap\n\
    \        val romanDigitsPairsMapRev = romanDigitsPairs.map(x => (x(1), x(0))).toMap\n\
    \        val romanDigitsPairsMapRev2 = romanDigitsPairs.map(x => (x(1) + x(1),\
    \ x(0))).toMap\n        val romanDigitsPairsMapRev3 = romanDigitsPairs.map(x =>\
    \ (x(1) + x(1) + x(1), x(0))).toMap\n        val romanDigitsPairsMapRev4 = romanDigitsPairs.map(x\
    \ => (x(1) + x(1) + x(1) + x(1), x(0))).toMap\n        val romanDigitsPairsMapRev5\
    \ = romanDigitsPairs.map(x => (x(1) + x(1) + x(1) + x(1) + x(1), x(0))).toMap\n\
    \        val romanDigitsPairsMapRev6 = romanDigitsPairs.map(x => (x(1) + x(1)\
    \ + x(1) + x(1) + x(1) + x(1), x(0))).toMap\n        val romanDigitsPairsMapRev7\
    \ = romanDigitsPairs.map(x => (x(1) + x(1) + x(1) + x(1) + x(1) + x(1) + x(1),\
    \ x(0))).toMap\n        val romanDigitsPairsMapRev8 = romanDigitsPairs.map(x =>\
    \ (x(1) + x(1) + x\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpip_0cze4.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpip_0cze4.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        val romanNumerals = Array(\"m\",\
    \ \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\")\n        val values = Array(1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1)\n        var num = number\n        for (i <- 0 to romanNumerals.length\
    \ - 1) {\n            while (num >= values(i)) {\n                roman.append(romanNumerals(i))\n\
    \                num -= values(i)\n            }\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\n            (1000, \"m\"),\n            (900,\
    \ \"cm\"),\n            (500, \"d\"),\n            (400, \"cd\"),\n          \
    \  (100, \"c\"),\n            (90, \"xc\"),\n            (50, \"l\"),\n      \
    \      (40, \"xl\"),\n            (10, \"x\"),\n            (9, \"ix\"),\n   \
    \         (5, \"v\"),\n            (4, \"iv\"),\n            (1, \"i\")\n    \
    \    )\n        var result = \"\"\n        var remaining = number\n        for\
    \ ((value, numeral) <- romanNumerals) {\n            while (remaining >= value)\
    \ {\n                result += numeral\n                remaining -= value\n \
    \           }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var n = number\n        while (n >= 1000) {\n\
    \            result += \"m\"\n            n -= 1000\n        }\n        if (n\
    \ >= 900) {\n            result += \"cm\"\n            n -= 900\n        }\n \
    \       if (n >= 500) {\n            result += \"d\"\n            n -= 500\n \
    \       }\n        if (n >= 400) {\n            result += \"cd\"\n           \
    \ n -= 400\n        }\n        while (n >= 100) {\n            result += \"c\"\
    \n            n -= 100\n        }\n        if (n >= 90) {\n            result\
    \ += \"xc\"\n            n -= 90\n        }\n        if (n >= 50) {\n        \
    \    result += \"l\"\n            n -= 50\n        }\n        if (n >= 40) {\n\
    \            result += \"xl\"\n            n -= 40\n        }\n        while (n\
    \ >= 10) {\n            result += \"x\"\n            n -= 10\n        }\n    \
    \    if (n >= 9) {\n            result += \"ix\"\n            n -= 9\n       \
    \ }\n        if (n >= 5) {\n            result += \"v\"\n            n -= 5\n\
    \        }\n        if (n >= 4) {\n            result += \"iv\"\n            n\
    \ -= 4\n        }\n        while (n >= 1) {\n            result += \"i\"\n   \
    \         n -= 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val numbers = Array(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n\
    \        var num = number\n        for (i <- 0 to 12) {\n            while (num\
    \ >= numbers(i)) {\n                result += romanNumerals(i)\n             \
    \   num -= numbers(i)\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val decimalNumbers\
    \ = List(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result\
    \ = \"\"\n        var num = number\n        for (i <- 0 to romanNumerals.length\
    \ - 1) {\n            while (num >= decimalNumbers(i)) {\n                result\
    \ += romanNumerals(i)\n                num -= decimalNumbers(i)\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val decimalNumbers\
    \ = List(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result\
    \ = \"\"\n        var num = number\n        for (i <- 0 to romanNumerals.length\
    \ - 1) {\n            while (num >= decimalNumbers(i)) {\n                result\
    \ += romanNumerals(i)\n                num -= decimalNumbers(i)\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List((\"m\", 1000), (\"cm\", 900), (\"d\", 500), (\"\
    cd\", 400), (\"c\", 100), (\"xc\", 90), (\"l\", 50), (\"xl\", 40), (\"x\", 10),\
    \ (\"ix\", 9), (\"v\", 5), (\"iv\", 4), (\"i\", 1))\n        var remainder = number\n\
    \        var result = \"\"\n        for ((numeral, value) <- romanNumerals) {\n\
    \            while (remainder >= value) {\n                result += numeral\n\
    \                remainder -= value\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val decimalNumbers\
    \ = List(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result\
    \ = \"\"\n        var num = number\n        for (i <- 0 to romanNumerals.length\
    \ - 1) {\n            while (num >= decimalNumbers(i)) {\n                result\
    \ += romanNumerals(i)\n                num -= decimalNumbers(i)\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val values = Array(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n\
    \        var num = number\n        for (i <- 0 to 12) {\n            while (num\
    \ >= values(i)) {\n                result += romanNumerals(i)\n              \
    \  num -= values(i)\n            }\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\n            (1000, \"m\"),\n            (900,\
    \ \"cm\"),\n            (500, \"d\"),\n            (400, \"cd\"),\n          \
    \  (100, \"c\"),\n            (90, \"xc\"),\n            (50, \"l\"),\n      \
    \      (40, \"xl\"),\n            (10, \"x\"),\n            (9, \"ix\"),\n   \
    \         (5, \"v\"),\n            (4, \"iv\"),\n            (1, \"i\")\n    \
    \    )\n        var result = \"\"\n        var num = number\n        for ((value,\
    \ numeral) <- romanNumerals) {\n            while (num >= value) {\n         \
    \       result += numeral\n                num -= value\n            }\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var n = number\n        var result = \"\"\n        while (n >= 1000) {\n\
    \            result += \"m\"\n            n -= 1000\n        }\n        if (n\
    \ >= 900) {\n            result += \"cm\"\n            n -= 900\n        }\n \
    \       if (n >= 500) {\n            result += \"d\"\n            n -= 500\n \
    \       }\n        if (n >= 400) {\n            result += \"cd\"\n           \
    \ n -= 400\n        }\n        while (n >= 100) {\n            result += \"c\"\
    \n            n -= 100\n        }\n        if (n >= 90) {\n            result\
    \ += \"xc\"\n            n -= 90\n        }\n        if (n >= 50) {\n        \
    \    result += \"l\"\n            n -= 50\n        }\n        if (n >= 40) {\n\
    \            result += \"xl\"\n            n -= 40\n        }\n        while (n\
    \ >= 10) {\n            result += \"x\"\n            n -= 10\n        }\n    \
    \    if (n >= 9) {\n            result += \"ix\"\n            n -= 9\n       \
    \ }\n        if (n >= 5) {\n            result += \"v\"\n            n -= 5\n\
    \        }\n        if (n >= 4) {\n            result += \"iv\"\n            n\
    \ -= 4\n        }\n        while (n >= 1) {\n            result += \"i\"\n   \
    \         n -= 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ while (num >= 900) {\n            result += \"cm\"\n            num -= 900\n\
    \        }\n        while (num >= 500) {\n            result += \"d\"\n      \
    \      num -= 500\n        }\n        while (num >= 400) {\n            result\
    \ += \"cd\"\n            num -= 400\n        }\n        while (num >= 100) {\n\
    \            result += \"c\"\n            num -= 100\n        }\n        while\
    \ (num >= 90) {\n            result += \"xc\"\n            num -= 90\n       \
    \ }\n        while (num >= 50) {\n            result += \"l\"\n            num\
    \ -= 50\n        }\n        while (num >= 40) {\n            result += \"xl\"\n\
    \            num -= 40\n        }\n        while (num >= 10) {\n            result\
    \ += \"x\"\n            num -= 10\n        }\n        while (num >= 9) {\n   \
    \         result += \"ix\"\n            num -= 9\n        }\n        while (num\
    \ >= 5) {\n            result += \"v\"\n            num -= 5\n        }\n    \
    \    while (num >= 4) {\n            result += \"iv\"\n            num -= 4\n\
    \        }\n        while (num >= 1) {\n            result += \"i\"\n        \
    \    num -= 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var num = number\n        var result = \"\"\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = Map(1 -> \"i\", 5 -> \"v\", 10 -> \"x\", 50 -> \"l\", 100 ->\
    \ \"c\", 500 -> \"d\", 1000 -> \"m\")\n        val romanOrder = List(1000, 500,\
    \ 100, 50, 10, 5, 1)\n        def intToMiniRomanHelper(number : Long, romanOrder\
    \ : List[Int]) : String = {\n            if (number == 0) \"\"\n            else\
    \ if (number < romanOrder.head) intToMiniRomanHelper(number, romanOrder.tail)\n\
    \            else if (number == romanOrder.head) roman(romanOrder.head)\n    \
    \        else if (number < romanOrder.head * 4) roman(romanOrder.head) + intToMiniRomanHelper(number\
    \ - romanOrder.head, romanOrder)\n            else if (number == romanOrder.head\
    \ * 4) roman(romanOrder.head) + roman(romanOrder.head * 5)\n            else roman(romanOrder.head\
    \ * 5) + intToMiniRomanHelper(number - romanOrder.head * 5, romanOrder)\n    \
    \    }\n        intToMiniRomanHelper(number, romanOrder).toLowerCase\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeca5kafp.scala:28)\n\tat Problem.main(tmpeca5kafp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ while (num >= 900) {\n            result += \"cm\"\n            num -= 900\n\
    \        }\n        while (num >= 500) {\n            result += \"d\"\n      \
    \      num -= 500\n        }\n        while (num >= 400) {\n            result\
    \ += \"cd\"\n            num -= 400\n        }\n        while (num >= 100) {\n\
    \            result += \"c\"\n            num -= 100\n        }\n        while\
    \ (num >= 90) {\n            result += \"xc\"\n            num -= 90\n       \
    \ }\n        while (num >= 50) {\n            result += \"l\"\n            num\
    \ -= 50\n        }\n        while (num >= 40) {\n            result += \"xl\"\n\
    \            num -= 40\n        }\n        while (num >= 10) {\n            result\
    \ += \"x\"\n            num -= 10\n        }\n        while (num >= 9) {\n   \
    \         result += \"ix\"\n            num -= 9\n        }\n        while (num\
    \ >= 5) {\n            result += \"v\"\n            num -= 5\n        }\n    \
    \    while (num >= 4) {\n            result += \"iv\"\n            num -= 4\n\
    \        }\n        while (num >= 1) {\n            result += \"i\"\n        \
    \    num -= 1\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List((\"m\", 1000), (\"cm\", 900), (\"d\", 500), (\"\
    cd\", 400), (\"c\", 100), (\"xc\", 90), (\"l\", 50), (\"xl\", 40), (\"x\", 10),\
    \ (\"ix\", 9), (\"v\", 5), (\"iv\", 4), (\"i\", 1))\n        var num = number\n\
    \        var result = \"\"\n        for ((romanNumeral, value) <- romanNumerals)\
    \ {\n            while (num >= value) {\n                result += romanNumeral\n\
    \                num -= value\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val numeralMap = Map(1 -> \"i\", 4 -> \"iv\", 5 -> \"v\", 9 -> \"ix\", 10\
    \ -> \"x\", 40 -> \"xl\", 50 -> \"l\", 90 -> \"xc\", 100 -> \"c\", 400 -> \"cd\"\
    , 500 -> \"d\", 900 -> \"cm\", 1000 -> \"m\")\n        var numeral = \"\"\n  \
    \      var numberCopy = number\n        var key = numeralMap.keys.max\n      \
    \  while (numberCopy > 0) {\n            if (numberCopy >= key) {\n          \
    \      numeral += numeralMap(key)\n                numberCopy -= key\n       \
    \     }\n            else key /= 10\n        }\n        numeral\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbd1v_o_y.scala:29)\n\tat Problem.main(tmpbd1v_o_y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val numbers = List(1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result = \"\"\n\
    \        var num = number\n        for (i <- 0 to romanNumerals.length - 1) {\n\
    \            while (num >= numbers(i)) {\n                result += romanNumerals(i)\n\
    \                num -= numbers(i)\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = Map(1 -> \"i\", 4 -> \"iv\", 5 -> \"v\", 9 -> \"ix\"\
    , 10 -> \"x\", 40 -> \"xl\", 50 -> \"l\", 90 -> \"xc\", 100 -> \"c\", 400 -> \"\
    cd\", 500 -> \"d\", 900 -> \"cm\", 1000 -> \"m\")\n        val romanNumeralsKeys\
    \ = romanNumerals.keys.toList.sorted.reverse\n        var result = \"\"\n    \
    \    var remaining = number\n        for (key <- romanNumeralsKeys) {\n      \
    \      while (remaining >= key) {\n                result += romanNumerals(key)\n\
    \                remaining -= key\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = List(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val decimalNumbers\
    \ = List(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var result\
    \ = \"\"\n        var remaining = number\n        for (i <- 0 to romanNumerals.length\
    \ - 1) {\n            while (remaining >= decimalNumbers(i)) {\n             \
    \   result += romanNumerals(i)\n                remaining -= decimalNumbers(i)\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        val romanNumerals = List((\"m\",\
    \ 1000), (\"cm\", 900), (\"d\", 500), (\"cd\", 400), (\"c\", 100), (\"xc\", 90),\
    \ (\"l\", 50), (\"xl\", 40), (\"x\", 10), (\"ix\", 9), (\"v\", 5), (\"iv\", 4),\
    \ (\"i\", 1))\n        var remaining = number\n        for ((numeral, value) <-\
    \ romanNumerals) {\n            while (remaining >= value) {\n               \
    \ roman.append(numeral)\n                remaining -= value\n            }\n \
    \       }\n        roman.toString\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        val numerals = Array(\"m\", \"cm\"\
    , \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\")\n        val values = Array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1)\n        var remaining = number\n        for (i <- 0 to numerals.length\
    \ - 1) {\n            while (remaining >= values(i)) {\n                roman.append(numerals(i))\n\
    \                remaining -= values(i)\n            }\n        }\n        roman.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var n = number\n        var s = \"\"\n        while (n >= 1000) {\n    \
    \        s += \"m\"\n            n -= 1000\n        }\n        if (n >= 900) {\n\
    \            s += \"cm\"\n            n -= 900\n        }\n        if (n >= 500)\
    \ {\n            s += \"d\"\n            n -= 500\n        }\n        if (n >=\
    \ 400) {\n            s += \"cd\"\n            n -= 400\n        }\n        while\
    \ (n >= 100) {\n            s += \"c\"\n            n -= 100\n        }\n    \
    \    if (n >= 90) {\n            s += \"xc\"\n            n -= 90\n        }\n\
    \        if (n >= 50) {\n            s += \"l\"\n            n -= 50\n       \
    \ }\n        if (n >= 40) {\n            s += \"xl\"\n            n -= 40\n  \
    \      }\n        while (n >= 10) {\n            s += \"x\"\n            n -=\
    \ 10\n        }\n        if (n >= 9) {\n            s += \"ix\"\n            n\
    \ -= 9\n        }\n        if (n >= 5) {\n            s += \"v\"\n           \
    \ n -= 5\n        }\n        if (n >= 4) {\n            s += \"iv\"\n        \
    \    n -= 4\n        }\n        while (n >= 1) {\n            s += \"i\"\n   \
    \         n -= 1\n        }\n        return s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var remainder = number\n        while\
    \ (remainder >= 1000) {\n            roman.append(\"m\")\n            remainder\
    \ -= 1000\n        }\n        while (remainder >= 900) {\n            roman.append(\"\
    cm\")\n            remainder -= 900\n        }\n        while (remainder >= 500)\
    \ {\n            roman.append(\"d\")\n            remainder -= 500\n        }\n\
    \        while (remainder >= 400) {\n            roman.append(\"cd\")\n      \
    \      remainder -= 400\n        }\n        while (remainder >= 100) {\n     \
    \       roman.append(\"c\")\n            remainder -= 100\n        }\n       \
    \ while (remainder >= 90) {\n            roman.append(\"xc\")\n            remainder\
    \ -= 90\n        }\n        while (remainder >= 50) {\n            roman.append(\"\
    l\")\n            remainder -= 50\n        }\n        while (remainder >= 40)\
    \ {\n            roman.append(\"xl\")\n            remainder -= 40\n        }\n\
    \        while (remainder >= 10) {\n            roman.append(\"x\")\n        \
    \    remainder -= 10\n        }\n        while (remainder >= 9) {\n          \
    \  roman.append(\"ix\")\n            remainder -= 9\n        }\n        while\
    \ (remainder >= 5) {\n            roman.append(\"v\")\n            remainder -=\
    \ 5\n        }\n        while (remainder >= 4) {\n            roman.append(\"\
    iv\")\n            remainder -= 4\n        }\n        while (remainder >= 1) {\n\
    \            roman.append(\"i\")\n            remainder -= 1\n        }\n    \
    \    roman.toString\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var num = number\n        while (num\
    \ >= 1000) {\n            roman.append(\"m\")\n            num -= 1000\n     \
    \   }\n        if (num >= 900) {\n            roman.append(\"cm\")\n         \
    \   num -= 900\n        }\n        if (num >= 500) {\n            roman.append(\"\
    d\")\n            num -= 500\n        }\n        if (num >= 400) {\n         \
    \   roman.append(\"cd\")\n            num -= 400\n        }\n        while (num\
    \ >= 100) {\n            roman.append(\"c\")\n            num -= 100\n       \
    \ }\n        if (num >= 90) {\n            roman.append(\"xc\")\n            num\
    \ -= 90\n        }\n        if (num >= 50) {\n            roman.append(\"l\")\n\
    \            num -= 50\n        }\n        if (num >= 40) {\n            roman.append(\"\
    xl\")\n            num -= 40\n        }\n        while (num >= 10) {\n       \
    \     roman.append(\"x\")\n            num -= 10\n        }\n        if (num >=\
    \ 9) {\n            roman.append(\"ix\")\n            num -= 9\n        }\n  \
    \      if (num >= 5) {\n            roman.append(\"v\")\n            num -= 5\n\
    \        }\n        if (num >= 4) {\n            roman.append(\"iv\")\n      \
    \      num -= 4\n        }\n        while (num >= 1) {\n            roman.append(\"\
    i\")\n            num -= 1\n        }\n        roman.toString\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\"\
    )));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var num = number\n        var result = \"\"\n        while (num > 0) {\n\
    \            if (num >= 1000) {\n                result += \"m\"\n           \
    \     num -= 1000\n            } else if (num >= 900) {\n                result\
    \ += \"cm\"\n                num -= 900\n            } else if (num >= 500) {\n\
    \                result += \"d\"\n                num -= 500\n            } else\
    \ if (num >= 400) {\n                result += \"cd\"\n                num -=\
    \ 400\n            } else if (num >= 100) {\n                result += \"c\"\n\
    \                num -= 100\n            } else if (num >= 90) {\n           \
    \     result += \"xc\"\n                num -= 90\n            } else if (num\
    \ >= 50) {\n                result += \"l\"\n                num -= 50\n     \
    \       } else if (num >= 40) {\n                result += \"xl\"\n          \
    \      num -= 40\n            } else if (num >= 10) {\n                result\
    \ += \"x\"\n                num -= 10\n            } else if (num >= 9) {\n  \
    \              result += \"ix\"\n                num -= 9\n            } else\
    \ if (num >= 5) {\n                result += \"v\"\n                num -= 5\n\
    \            } else if (num >= 4) {\n                result += \"iv\"\n      \
    \          num -= 4\n            } else if (num >= 1) {\n                result\
    \ += \"i\"\n                num -= 1\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        while (number > 0) {\n          \
    \  if (number >= 1000) {\n                roman.append(\"m\")\n              \
    \  number -= 1000\n            } else if (number >= 900) {\n                roman.append(\"\
    cm\")\n                number -= 900\n            } else if (number >= 500) {\n\
    \                roman.append(\"d\")\n                number -= 500\n        \
    \    } else if (number >= 400) {\n                roman.append(\"cd\")\n     \
    \           number -= 400\n            } else if (number >= 100) {\n         \
    \       roman.append(\"c\")\n                number -= 100\n            } else\
    \ if (number >= 90) {\n                roman.append(\"xc\")\n                number\
    \ -= 90\n            } else if (number >= 50) {\n                roman.append(\"\
    l\")\n                number -= 50\n            } else if (number >= 40) {\n \
    \               roman.append(\"xl\")\n                number -= 40\n         \
    \   } else if (number >= 10) {\n                roman.append(\"x\")\n        \
    \        number -= 10\n            } else if (number >= 9) {\n               \
    \ roman.append(\"ix\")\n                number -= 9\n            } else if (number\
    \ >= 5) {\n                roman.append(\"v\")\n                number -= 5\n\
    \            } else if (number >= 4) {\n                roman.append(\"iv\")\n\
    \                number -= 4\n            } else if (number >= 1) {\n        \
    \        roman.append(\"i\")\n                number -= 1\n            }\n   \
    \     }\n        roman.toString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0jkxy74j.scala:19:23 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                number -= \e[31m1000\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value -=\
    \ is not a member of Long - did you mean number.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp0jkxy74j.scala:22:23 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m                number -= \e[31m900\e[0m\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value -= is not\
    \ a member of Long - did you mean number.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp0jkxy74j.scala:25:23 ------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                number -= \e[31m500\e[0m\n\e[31m\e[31m   |\e[0m      \
    \          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value -= is not a member\
    \ of Long - did you mean number.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0jkxy74j.scala:28:23\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                number -=\
    \ \e[31m400\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m              value -= is not a member of Long - did you mean number.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0jkxy74j.scala:31:23 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                number -= \e[31m100\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value -=\
    \ is not a member of Long - did you mean number.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp0jkxy74j.scala:34:23 ------------------------\e[0m\e[0m\n\
    \e[31m34 |\e[0m                number -= \e[31m90\e[0m\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value -= is not\
    \ a member of Long - did you mean number.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp0jkxy74j.scala:37:23 ------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m                number -= \e[31m50\e[0m\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value -= is not a member\
    \ of Long - did you mean number.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0jkxy74j."
  stdout: ''
  timestamp: 1659805865
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     var result = \"\"\n        var num = number\n        while (num >= 1000)\
    \ {\n            result += \"m\"\n            num -= 1000\n        }\n       \
    \ if (num >= 900) {\n            result += \"cm\"\n            num -= 900\n  \
    \      }\n        if (num >= 500) {\n            result += \"d\"\n           \
    \ num -= 500\n        }\n        if (num >= 400) {\n            result += \"cd\"\
    \n            num -= 400\n        }\n        while (num >= 100) {\n          \
    \  result += \"c\"\n            num -= 100\n        }\n        if (num >= 90)\
    \ {\n            result += \"xc\"\n            num -= 90\n        }\n        if\
    \ (num >= 50) {\n            result += \"l\"\n            num -= 50\n        }\n\
    \        if (num >= 40) {\n            result += \"xl\"\n            num -= 40\n\
    \        }\n        while (num >= 10) {\n            result += \"x\"\n       \
    \     num -= 10\n        }\n        if (num >= 9) {\n            result += \"\
    ix\"\n            num -= 9\n        }\n        if (num >= 5) {\n            result\
    \ += \"v\"\n            num -= 5\n        }\n        if (num >= 4) {\n       \
    \     result += \"iv\"\n            num -= 4\n        }\n        while (num >=\
    \ 1) {\n            result += \"i\"\n            num -= 1\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"\
    xix\")));\n    assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val romanNumerals = Array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"\
    l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\")\n        val decimalNumbers\
    \ = Array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n        var num\
    \ = number\n        var result = \"\"\n        for (i <- 0 to romanNumerals.length\
    \ - 1) {\n            while (num >= decimalNumbers(i)) {\n                result\
    \ += romanNumerals(i)\n                num -= decimalNumbers(i)\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intToMiniRoman((19l)).equals((\"xix\")));\n    assert(intToMiniRoman((152l)).equals((\"\
    clii\")));\n    assert(intToMiniRoman((251l)).equals((\"ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"\
    cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"d\")));\n    assert(intToMiniRoman((1l)).equals((\"\
    i\")));\n    assert(intToMiniRoman((4l)).equals((\"iv\")));\n    assert(intToMiniRoman((43l)).equals((\"\
    xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"xc\")));\n    assert(intToMiniRoman((94l)).equals((\"\
    xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"\
    cm\")));\n    assert(intToMiniRoman((994l)).equals((\"cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805865
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <=\
    \ 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n\
    \    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n\
    \    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n   \
    \     val roman = new StringBuilder\n        var n = number\n        while (n\
    \ >= 1000) {\n            roman.append(\"m\")\n            n -= 1000\n       \
    \ }\n        if (n >= 900) {\n            roman.append(\"cm\")\n            n\
    \ -= 900\n        }\n        if (n >= 500) {\n            roman.append(\"d\")\n\
    \            n -= 500\n        }\n        if (n >= 400) {\n            roman.append(\"\
    cd\")\n            n -= 400\n        }\n        while (n >= 100) {\n         \
    \   roman.append(\"c\")\n            n -= 100\n        }\n        if (n >= 90)\
    \ {\n            roman.append(\"xc\")\n            n -= 90\n        }\n      \
    \  if (n >= 50) {\n            roman.append(\"l\")\n            n -= 50\n    \
    \    }\n        if (n >= 40) {\n            roman.append(\"xl\")\n           \
    \ n -= 40\n        }\n        while (n >= 10) {\n            roman.append(\"x\"\
    )\n            n -= 10\n        }\n        if (n >= 9) {\n            roman.append(\"\
    ix\")\n            n -= 9\n        }\n        if (n >= 5) {\n            roman.append(\"\
    v\")\n            n -= 5\n        }\n        if (n >= 4) {\n            roman.append(\"\
    iv\")\n            n -= 4\n        }\n        while (n >= 1) {\n            roman.append(\"\
    i\")\n            n -= 1\n        }\n        roman.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intToMiniRoman((19l)).equals((\"xix\")));\n \
    \   assert(intToMiniRoman((152l)).equals((\"clii\")));\n    assert(intToMiniRoman((251l)).equals((\"\
    ccli\")));\n    assert(intToMiniRoman((426l)).equals((\"cdxxvi\")));\n    assert(intToMiniRoman((500l)).equals((\"\
    d\")));\n    assert(intToMiniRoman((1l)).equals((\"i\")));\n    assert(intToMiniRoman((4l)).equals((\"\
    iv\")));\n    assert(intToMiniRoman((43l)).equals((\"xliii\")));\n    assert(intToMiniRoman((90l)).equals((\"\
    xc\")));\n    assert(intToMiniRoman((94l)).equals((\"xciv\")));\n    assert(intToMiniRoman((532l)).equals((\"\
    dxxxii\")));\n    assert(intToMiniRoman((900l)).equals((\"cm\")));\n    assert(intToMiniRoman((994l)).equals((\"\
    cmxciv\")));\n    assert(intToMiniRoman((1000l)).equals((\"m\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805839
