name: HumanEval_43_pairs_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // pairs_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ true if there are two distinct elements in the list that\n    // sum to zero,\
  \ and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
  \ 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n   \
  \ // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
  \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n    }\n\
  \n}\n"
completions: ["        // your code here\n        val set = new HashSet[Long]\n  \
    \      for (x <- l) {\n            if (set.contains(-x)) return true\n       \
    \     set += x\n        }\n        false", "        val s = l.toSet\n        for\
    \ (i <- s) {\n            if (s.contains(-i)) return true\n        }\n       \
    \ return false", "        val s = l.toSet\n        for (x <- s) {\n          \
    \  if (s.contains(-x)) {\n                return true\n            }\n       \
    \ }\n        return false", "        val s = l.toSet\n        for (i <- s) {\n\
    \            if (s.contains(-i)) {\n                return true\n            }\n\
    \        }\n        return false", "        // your code here\n        return\
    \ false", "        // your code here\n        return false", "        // YOUR\
    \ CODE HERE\n        return false", "        val s = l.toSet\n        for (i <-\
    \ s) {\n            if (s.contains(-i)) {\n                return true\n     \
    \       }\n        }\n        return false", "        // YOUR CODE HERE\n    \
    \    return false", "        // your code here\n        false", "        // YOUR\
    \ CODE HERE\n        return false", "        val set = new HashSet[Long]\n   \
    \     for (i <- l) {\n            if (set.contains(-i)) return true\n        \
    \    set.add(i)\n        }\n        return false", "        val s = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (s.contains(-i)) return true\n       \
    \     s.add(i)\n        }\n        return false", "        var s = Set[Long]()\n\
    \        for (i <- l) {\n            if (s.contains(-i)) return true\n       \
    \     s += i\n        }\n        return false", "        // your code here\n \
    \       return false", "        // your code here\n        return false", "  \
    \      val s = Set[Long]()\n        for (x <- l) {\n            if (s.contains(-x))\
    \ return true\n            s += x\n        }\n        return false", "       \
    \ val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i)) {\n\
    \                return true\n            }\n        }\n        return false",
  "        val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x))\
    \ {\n                return true\n            }\n        }\n        return false",
  "        val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set.add(i)\n        }\n        return false", "   \
    \     val set = Set[Long]()\n        for (i <- l) {\n            if (set.contains(-i))\
    \ {\n                return true\n            }\n            set.add(i)\n    \
    \    }\n        return false", "        val set = new HashSet[Long]()\n      \
    \  for (x <- l) {\n            if (set.contains(-x)) return true\n           \
    \ set.add(x)\n        }\n        return false", "        val s = l.toSet\n   \
    \     for (i <- s) {\n            if (s.contains(-i)) return true\n        }\n\
    \        return false", '        return false', "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set.add(i)\n        }\n        return false", "        // your code here\n\
    \        return false", "        val s = l.toSet\n        for (i <- s) {\n   \
    \         if (s.contains(-i)) return true\n        }\n        return false", " \
    \       // YOUR CODE HERE\n        return false", "        val s = l.toSet\n \
    \       for (i <- l) {\n            if (s.contains(-i)) return true\n        }\n\
    \        return false", "        var m = Map[Long, Int]()\n        for (i <- l)\
    \ {\n            if (m.contains(i)) {\n                m(i) += 1\n           \
    \ } else {\n                m(i) = 1\n            }\n        }\n        for (i\
    \ <- l) {\n            if (m.contains(-i)) {\n                if (i != 0 || m(i)\
    \ > 1) {\n                    return true\n                }\n            }\n\
    \        }\n        return false", "        val s = l.toSet\n        for (x <-\
    \ s) {\n            if (s.contains(-x)) return true\n        }\n        return\
    \ false", "        val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i))\
    \ return true\n        }\n        return false", "        var m = Map[Long, Boolean]()\n\
    \        for (x <- l) {\n            if (m.contains(-x)) {\n                return\
    \ true\n            }\n            m += (x -> true)\n        }\n        return\
    \ false", "        var h = new HashSet[Long]()\n        for (i <- l) {\n     \
    \       if (h.contains(-i)) {\n                return true\n            }\n  \
    \          h.add(i)\n        }\n        return false", "        var h = new HashSet[Long]()\n\
    \        for (i <- l) {\n            if (h.contains(-i)) return true\n       \
    \     h.add(i)\n        }\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        val s = l.toSet\n        for (i <- s) {\n   \
    \         if (s.contains(-i)) return true\n        }\n        return false", " \
    \       val m = new HashMap[Long, Boolean]\n        for (i <- l) {\n         \
    \   if (m.contains(i)) return true\n            else m(i) = true\n        }\n\
    \        false", "        var s = Set[Long]()\n        for (x <- l) {\n      \
    \      if (s.contains(-x)) return true\n            s += x\n        }\n      \
    \  return false", "        var s = Set[Long]()\n        for (x <- l) {\n     \
    \       if (s.contains(-x)) return true\n            s += x\n        }\n     \
    \   return false", "        val set = new HashSet[Long]\n        for (i <- l)\
    \ {\n            if (set.contains(-i)) return true\n            set.add(i)\n \
    \       }\n        return false", "        var h = HashSet[Long]()\n        for\
    \ (i <- l) {\n            if (h.contains(-i)) return true\n            h += i\n\
    \        }\n        return false", "        // your code here\n        return\
    \ false", '        l.combinations(2).exists(x => x(0) + x(1) == 0)', "       \
    \ // your code here\n        return false", "        val s = l.toSet\n       \
    \ for (i <- s) {\n            if (s.contains(-i)) return true\n        }\n   \
    \     return false", "        var m = Map[Long, Int]()\n        for (i <- l) {\n\
    \            if (m.contains(i)) {\n                m(i) += 1\n            } else\
    \ {\n                m(i) = 1\n            }\n        }\n        for (i <- l)\
    \ {\n            if (m.contains(-i)) {\n                if (i != 0 || m(i) > 1)\
    \ {\n                    return true\n                }\n            }\n     \
    \   }\n        return false", "        val h = HashSet[Long]()\n        for (i\
    \ <- l) {\n            if (h.contains(-i)) return true\n            h += i\n \
    \       }\n        return false", "        var h = HashSet[Long]()\n        for\
    \ (i <- l) {\n            if (h.contains(-i)) {\n                return true\n\
    \            }\n            h.add(i)\n        }\n        return false", "    \
    \    var m = Map[Long, Int]()\n        for (x <- l) {\n            if (m.contains(x))\
    \ {\n                m(x) += 1\n            } else {\n                m(x) = 1\n\
    \            }\n        }\n        for (x <- l) {\n            if (m.contains(-x))\
    \ {\n                if (x != 0 || m(x) > 1) {\n                    return true\n\
    \                }\n            }\n        }\n        return false", "       \
    \ val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i)) return\
    \ true\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set.add(i)\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set.add(i)\n        }\n        return false", "        val s = l.toSet\n\
    \        for (x <- s) {\n            if (s.contains(-x)) {\n                return\
    \ true\n            }\n        }\n        return false", "        // YOUR CODE\
    \ HERE\n        return false", "        val s = l.toSet\n        for (x <- s)\
    \ {\n            if (s.contains(-x)) {\n                return true\n        \
    \    }\n        }\n        return false", "        var s = Set[Long]()\n     \
    \   for (i <- l) {\n            if (s.contains(-i)) {\n                return\
    \ true\n            }\n            s += i\n        }\n        return false", " \
    \       val set = HashSet[Long]()\n        for (x <- l) {\n            if (set.contains(-x))\
    \ return true\n            set += x\n        }\n        return false", "     \
    \   val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set.add(i)\n        }\n        return false", "   \
    \     // your code here\n        return false", "        val s = l.toSet\n   \
    \     for (i <- s) {\n            if (s.contains(-i)) {\n                return\
    \ true\n            }\n        }\n        return false", "        val set = new\
    \ HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i)) return\
    \ true\n            set.add(i)\n        }\n        return false", "        val\
    \ s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x)) return\
    \ true\n        }\n        return false", "        val s = l.toSet\n        val\
    \ s2 = s.map(x => -x)\n        s.intersect(s2).size > 0", "        // your code\
    \ goes here\n        l.contains(0)", "        val set = new HashSet[Long]\n  \
    \      for (x <- l) {\n            if (set.contains(-x)) return true\n       \
    \     set.add(x)\n        }\n        return false", "        val s = l.toSet\n\
    \        for (i <- s) {\n            if (s.contains(-i)) return true\n       \
    \ }\n        return false", "        var found = false\n        for (i <- 0 until\
    \ l.length) {\n            for (j <- i + 1 until l.length) {\n               \
    \ if (l(i) + l(j) == 0) {\n                    found = true\n                }\n\
    \            }\n        }\n        return found", "        val set = new HashSet[Long]\n\
    \        for (x <- l) {\n            if (set.contains(-x)) return true\n     \
    \       set.add(x)\n        }\n        return false", "        val s = l.toSet\n\
    \        for (x <- s) {\n            if (s.contains(-x)) {\n                return\
    \ true\n            }\n        }\n        return false", "        // YOUR CODE\
    \ HERE\n        return false", "        // your code here\n        return false",
  "        // your code here\n        var result = false\n        for (i <- 0 until\
    \ l.length) {\n            for (j <- i + 1 until l.length) {\n               \
    \ if (l(i) + l(j) == 0) {\n                    result = true\n               \
    \ }\n            }\n        }\n        result", "        var set = Set[Long]()\n\
    \        for (i <- l) {\n            if (set.contains(-i)) {\n               \
    \ return true\n            }\n            set += i\n        }\n        return\
    \ false", "        val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x))\
    \ {\n                return true\n            }\n        }\n        return false",
  "        var h : HashSet[Long] = new HashSet[Long]()\n        for (i <- l) {\n \
    \           if (h.contains(-i)) {\n                return true\n            }\n\
    \            h.add(i)\n        }\n        return false", "        val set = new\
    \ HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i)) return\
    \ true\n            set.add(i)\n        }\n        return false", "        //\
    \ your code here\n        return false", "        var h = HashSet[Long]()\n  \
    \      for (i <- l) {\n            if (h.contains(-i)) return true\n         \
    \   h += i\n        }\n        return false", "        // your code here\n   \
    \     false", "        val s = l.toSet\n        for (i <- s) {\n            if\
    \ (s.contains(-i)) {\n                return true\n            }\n        }\n\
    \        return false", "        // YOUR CODE HERE\n        return false", " \
    \       val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set.add(i)\n        }\n        return false", "   \
    \     val set = HashSet[Long]()\n        for (x <- l) {\n            if (set.contains(-x))\
    \ return true\n            set += x\n        }\n        return false", "     \
    \   var s = Set[Long]()\n        for (i <- l) {\n            if (s.contains(-i))\
    \ return true\n            s += i\n        }\n        return false", "       \
    \ val s = l.toSet\n        s.exists(x => s.contains(-x))", "        val s = l.toSet\n\
    \        for (i <- s) {\n            if (s.contains(-i)) return true\n       \
    \ }\n        return false", "        // your code here\n        return false",
  "        var s = Set[Long]()\n        for (i <- l) {\n            if (s.contains(-i))\
    \ return true\n            s += i\n        }\n        return false", "       \
    \ var m = new HashMap[Long, Boolean]()\n        for (i <- l) {\n            if\
    \ (m.contains(i)) return true\n            m.put(i, true)\n        }\n       \
    \ false", "        // your code here\n        return false", "        val s =\
    \ l.toSet\n        for (x <- s) {\n            if (s.contains(-x)) {\n       \
    \         return true\n            }\n        }\n        return false", "    \
    \    val set = new HashSet[Long]()\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set.add(i)\n        }\n        return false", "   \
    \     val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x))\
    \ {\n                return true\n            }\n        }\n        return false",
  "        var m = Map[Long, Int]()\n        for (i <- l) {\n            if (m.contains(i))\
    \ {\n                m(i) += 1\n            } else {\n                m(i) = 1\n\
    \            }\n        }\n        for (i <- l) {\n            if (m.contains(-i))\
    \ {\n                if (i != 0 || m(i) > 1) {\n                    return true\n\
    \                }\n            }\n        }\n        return false", "       \
    \ val s = l.toSet\n        s.exists(x => s.contains(-x))", "        val set =\
    \ new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set.add(i)\n        }\n        return false", "   \
    \     // your code here\n        return false", "        var m = new HashMap[Long,\
    \ Boolean]()\n        for (i <- l) {\n            if (m.contains(i)) return true\n\
    \            m(i) = true\n        }\n        return false", "        // YOUR CODE\
    \ HERE\n        return false", "        val set = new HashSet[Long]\n        for\
    \ (i <- l) {\n            if (set.contains(-i)) return true\n            set.add(i)\n\
    \        }\n        return false", "        val set = new HashSet[Long]\n    \
    \    for (x <- l) {\n            if (set.contains(-x)) return true\n         \
    \   set.add(x)\n        }\n        return false", "        val h = HashSet[Long]()\n\
    \        for (x <- l) {\n            if (h.contains(-x)) return true\n       \
    \     h += x\n        }\n        return false", "        val sorted = l.sorted\n\
    \        val n = sorted.length\n        var i = 0\n        var j = n - 1\n   \
    \     while (i < j) {\n            val sum = sorted(i) + sorted(j)\n         \
    \   if (sum == 0) return true\n            else if (sum < 0) i += 1\n        \
    \    else j -= 1\n        }\n        return false", "        var m = Map[Long,\
    \ Int]()\n        for (i <- l) {\n            if (m.contains(i)) {\n         \
    \       m(i) += 1\n            } else {\n                m(i) = 1\n          \
    \  }\n        }\n        for (i <- l) {\n            if (m.contains(-i)) {\n \
    \               if (i != 0 || m(i) > 1) {\n                    return true\n \
    \               }\n            }\n        }\n        return false", "        //\
    \ your code here\n        false", "        val set = new HashSet[Long]\n     \
    \   for (x <- l) {\n            if (set.contains(-x)) return true\n          \
    \  set.add(x)\n        }\n        return false", "        val hash = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (hash.contains(-i)) return true\n    \
    \        hash.add(i)\n        }\n        return false", "        val set = Set[Long]()\n\
    \        for (x <- l) {\n            if (set.contains(-x)) {\n               \
    \ return true\n            }\n            set.add(x)\n        }\n        return\
    \ false", "        val set = new HashSet[Long]\n        for (i <- l) {\n     \
    \       if (set.contains(-i)) return true\n            set.add(i)\n        }\n\
    \        return false", "        // your code here\n        false", "        val\
    \ s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i)) return\
    \ true\n        }\n        return false", "        val set = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set.add(i)\n        }\n        return false", "        var m = new HashMap[Long,\
    \ Int]()\n        for (i <- l) {\n            if (m.contains(i)) m(i) += 1\n \
    \           else m(i) = 1\n        }\n        for (i <- l) {\n            if (m.contains(-i))\
    \ {\n                if (i != 0 || m(i) > 1) return true\n            }\n    \
    \    }\n        return false", "        // Your code here\n        return false",
  "        // your code here\n        return false", "        val s = l.toSet\n  \
    \      for (i <- s) {\n            if (s.contains(-i)) return true\n        }\n\
    \        return false", "        val s = l.toSet\n        for (i <- s) {\n   \
    \         if (s.contains(-i)) return true\n        }\n        return false", " \
    \       var s = Set[Long]()\n        for (x <- l) {\n            if (s.contains(-x))\
    \ return true\n            s += x\n        }\n        return false", "       \
    \ var hm = HashMap[Long, Long]()\n        for (i <- l) {\n            if (hm.contains(i))\
    \ {\n                hm(i) += 1\n            } else {\n                hm(i) =\
    \ 1\n            }\n        }\n        for (i <- l) {\n            if (hm.contains(-i))\
    \ {\n                if (i != 0 || hm(i) > 1) {\n                    return true\n\
    \                }\n            }\n        }\n        return false", "       \
    \ // your code here\n        if (l.length < 2) return false\n        var hash\
    \ = HashMap[Long, Boolean]()\n        for (i <- l) {\n            if (hash.contains(i))\
    \ return true\n            hash(i) = true\n        }\n        return false", " \
    \       // your code here\n        return false", "        val s = l.toSet\n \
    \       s.exists(x => s.contains(-x))", "        var m = new HashMap[Long, Boolean]()\n\
    \        for (i <- l) {\n            if (m.contains(i)) {\n                return\
    \ true\n            }\n            m.put(-i, true)\n        }\n        return\
    \ false", "        val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i))\
    \ {\n                return true\n            }\n        }\n        return false",
  "        var s = Set[Long]()\n        for (x <- l) {\n            if (s.contains(-x))\
    \ return true\n            s += x\n        }\n        return false", "       \
    \ val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set.add(i)\n        }\n        return false", "   \
    \     var m = Map[Long, Int]()\n        for (i <- l) {\n            if (m.contains(i))\
    \ {\n                m(i) += 1\n            } else {\n                m(i) = 1\n\
    \            }\n        }\n        for (i <- l) {\n            if (m.contains(-i))\
    \ {\n                if (i != 0 || m(i) > 1) {\n                    return true\n\
    \                }\n            }\n        }\n        return false", "       \
    \ val set = new HashSet[Long]()\n        for (i <- l) {\n            if (set.contains(-i))\
    \ {\n                return true\n            }\n            set.add(i)\n    \
    \    }\n        return false", "        val m = new HashMap[Long, Boolean]\n \
    \       for (x <- l) {\n            if (m.contains(x)) return true\n         \
    \   m(x) = true\n        }\n        return false", "        val s = l.toSet\n\
    \        for (x <- s) {\n            if (s.contains(-x)) {\n                return\
    \ true\n            }\n        }\n        return false", "        val distinct\
    \ = l.distinct\n        for (i <- 0 until distinct.length) {\n            for\
    \ (j <- i + 1 until distinct.length) {\n                if (distinct(i) + distinct(j)\
    \ == 0) return true\n            }\n        }\n        return false", "      \
    \  val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i)) return\
    \ true\n        }\n        return false", "        val s = l.toSet\n        s.exists(x\
    \ => s.contains(-x))", "        val s = l.toSet\n        for (x <- s) {\n    \
    \        if (s.contains(-x)) return true\n        }\n        return false", " \
    \       // >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\n\
    \        // (false)\n        // >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ -2l.toLong, 1l.toLong)))\n        // (false)\n        // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n        // (false)\n        // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n        // (true)\n\
    \        // >>> pairsSumToZero((List[Long](1l.toLong)))\n        // (false)\n\
    \        var h = new HashSet[Long]\n        for (i <- l) {\n            if (h.contains(-i))\
    \ return true\n            h.add(i)\n        }\n        return false", "     \
    \   // YOUR CODE HERE\n        return false", "        val s = l.toSet\n     \
    \   for (i <- s) {\n            if (s.contains(-i)) return true\n        }\n \
    \       return false", "        val set = new HashSet[Long]\n        for (x <-\
    \ l) {\n            if (set.contains(-x)) return true\n            set.add(x)\n\
    \        }\n        return false", "        val set = new HashSet[Long]\n    \
    \    for (i <- l) {\n            if (set.contains(-i)) return true\n         \
    \   set.add(i)\n        }\n        return false", "        // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong)))\n        // (false)\n        // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong)))\n        // (false)\n        // >>> pairsSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong)))\n        // (false)\n        // >>> pairsSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n        // (true)\n\
    \        // >>> pairsSumToZero((List[Long](1l.toLong)))\n        // (false)\n\
    \        var s = l.toSet\n        var t = s.toList\n        var n = t.length\n\
    \        var i = 0\n        while (i < n) {\n            var j = i + 1\n     \
    \       while (j < n) {\n                if (t(i) + t(j) == 0) {\n           \
    \         return true\n                }\n                j = j + 1\n        \
    \    }\n            i = i + 1\n        }\n        return false", "        // Your\
    \ code here\n        return false", "        val s = l.toSet\n        for (i <-\
    \ s) {\n            if (s.contains(-i)) {\n                return true\n     \
    \       }\n        }\n        return false", "        // your code here\n    \
    \    var set = Set[Long]()\n        for (i <- l) {\n            if (set.contains(-i))\
    \ {\n                return true\n            }\n            set += i\n      \
    \  }\n        return false", "        val s = l.toSet\n        for (x <- s) {\n\
    \            if (s.contains(-x)) {\n                return true\n            }\n\
    \        }\n        return false", "        var s : Set[Long] = Set[Long]()\n\
    \        for (x <- l) {\n            if (s.contains(-x)) {\n                return\
    \ true\n            }\n            s += x\n        }\n        return false", " \
    \       val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x))\
    \ {\n                return true\n            }\n        }\n        return false",
  "        val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i))\
    \ {\n                return true\n            }\n        }\n        return false",
  "        // your code here\n        return false", "        var h = HashSet[Long]()\n\
    \        for (x <- l) {\n            if (h.contains(-x)) return true\n       \
    \     h += x\n        }\n        return false", "        var s = Set[Long]()\n\
    \        for (x <- l) {\n            if (s.contains(-x)) return true\n       \
    \     s += x\n        }\n        return false", "        val s = l.toSet\n   \
    \     for (i <- s) {\n            if (s.contains(-i)) return true\n        }\n\
    \        return false", "        val h = HashSet[Long]()\n        for (x <- l)\
    \ {\n            if (h.contains(-x)) {\n                return true\n        \
    \    }\n            h.add(x)\n        }\n        return false", "        // YOUR\
    \ CODE HERE\n        return false", "        val set = new HashSet[Long]()\n \
    \       for (x <- l) {\n            if (set.contains(-x)) return true\n      \
    \      set.add(x)\n        }\n        return false", "        var m = new HashMap[Long,\
    \ Boolean]\n        for (x <- l) {\n            if (m.contains(x)) {\n       \
    \         return true\n            }\n            m.put(0 - x, true)\n       \
    \ }\n        return false", "        var set = Set[Long]()\n        for (x <-\
    \ l) {\n            if (set.contains(-x)) {\n                return true\n   \
    \         }\n            set += x\n        }\n        return false", "       \
    \ val h = HashSet[Long]()\n        for (x <- l) {\n            if (h.contains(-x))\
    \ return true\n            h += x\n        }\n        return false", "       \
    \ val set = Set[Long]()\n        for (x <- l) {\n            if (set.contains(-x))\
    \ {\n                return true\n            }\n            set.add(x)\n    \
    \    }\n        return false", "        // your code here\n        var map = new\
    \ HashMap[Long, Long]()\n        for (i <- l) {\n            if (map.contains(i))\
    \ {\n                map(i) += 1\n            } else {\n                map(i)\
    \ = 1\n            }\n        }\n        for (i <- l) {\n            if (map.contains(-i))\
    \ {\n                if (i != 0 || map(i) >= 2) {\n                    return\
    \ true\n                }\n            }\n        }\n        return false", " \
    \       var m = new HashMap[Long, Int]()\n        for (x <- l) {\n           \
    \ if (m.contains(x)) {\n                m(x) += 1\n            } else {\n    \
    \            m(x) = 1\n            }\n        }\n        for (x <- l) {\n    \
    \        if (m.contains(-x)) {\n                if (x != 0 || m(x) > 1) {\n  \
    \                  return true\n                }\n            }\n        }\n\
    \        return false", "        val set = new HashSet[Long]\n        for (i <-\
    \ l) {\n            if (set.contains(-i)) return true\n            set.add(i)\n\
    \        }\n        return false", '        return false', "        var set =\
    \ new HashSet[Long]()\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set.add(i)\n        }\n        return false", "   \
    \     val s = l.toSet\n        val s2 = s.map(x => -x)\n        s.intersect(s2).size\
    \ > 0", "        val set = new HashSet[Long]\n        for (i <- l) {\n       \
    \     if (set.contains(-i)) return true\n            set.add(i)\n        }\n \
    \       return false", "        var set = Set[Long]()\n        for (x <- l) {\n\
    \            if (set.contains(-x)) {\n                return true\n          \
    \  }\n            set += x\n        }\n        return false", "        val h =\
    \ HashSet[Long]()\n        for (i <- l) {\n            if (h.contains(-i)) return\
    \ true\n            h.add(i)\n        }\n        return false", "        // your\
    \ code here\n        return false", "        val set = Set[Long]()\n        for\
    \ (x <- l) {\n            if (set.contains(-x)) return true\n            set +=\
    \ x\n        }\n        return false", "        val s = l.toSet\n        for (i\
    \ <- s) {\n            if (s.contains(-i)) return true\n        }\n        return\
    \ false", "        var h : HashSet[Long] = new HashSet[Long]()\n        for (i\
    \ <- l) {\n            if (h.contains(-i)) return true\n            h.add(i)\n\
    \        }\n        return false", "        // your code here\n        return\
    \ false", "        // your code here\n        return false", "        val s =\
    \ l.toSet\n        for (x <- s) {\n            if (s.contains(-x)) return true\n\
    \        }\n        return false", "        val set = new HashSet[Long]\n    \
    \    for (x <- l) {\n            if (set.contains(-x)) return true\n         \
    \   set.add(x)\n        }\n        return false", '        return false', "  \
    \      val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x))\
    \ return true\n        }\n        return false", "        if (l.length < 2) {\n\
    \            return false\n        }\n        val s = l.toSet\n        for (i\
    \ <- s) {\n            if (s.contains(-i)) {\n                return true\n  \
    \          }\n        }\n        return false", "        // your code here\n \
    \       var m = new HashMap[Long, Int]\n        for (i <- l) {\n            if\
    \ (m.contains(i)) {\n                m(i) += 1\n            } else {\n       \
    \         m(i) = 1\n            }\n        }\n        for (i <- l) {\n       \
    \     if (m.contains(-i)) {\n                if (i != 0 || m(i) > 1) {\n     \
    \               return true\n                }\n            }\n        }\n   \
    \     return false", "        val s = l.toSet\n        for (i <- s) {\n      \
    \      if (s.contains(-i)) return true\n        }\n        return false", "  \
    \      var s = Set[Long]()\n        for (x <- l) {\n            if (s.contains(-x))\
    \ return true\n            s += x\n        }\n        return false", "       \
    \ var s = Set[Long]()\n        for (x <- l) {\n            if (s.contains(-x))\
    \ {\n                return true\n            }\n            s += x\n        }\n\
    \        return false", "        val m = new HashMap[Long, Boolean]\n        for\
    \ (i <- l) {\n            if (m.contains(i)) return true\n            m(i) = true\n\
    \        }\n        return false", "        var m = Map[Long, Int]()\n       \
    \ for (i <- l) {\n            if (m.contains(i)) {\n                m(i) += 1\n\
    \            } else {\n                m(i) = 1\n            }\n        }\n  \
    \      for (i <- l) {\n            if (m.contains(-i)) {\n                if (i\
    \ != 0 || m(i) > 1) {\n                    return true\n                }\n  \
    \          }\n        }\n        return false", "        // your code here\n \
    \       return false", "        val s = l.toSet\n        for (x <- s) {\n    \
    \        if (s.contains(-x)) return true\n        }\n        return false", " \
    \       var m = new HashMap[Long, Boolean]\n        for (i <- l) {\n         \
    \   if (m.contains(i)) return true\n            m(i) = true\n        }\n     \
    \   return false", "        // YOUR CODE HERE\n        return false", "      \
    \  val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x)) {\n\
    \                return true\n            }\n        }\n        return false",
  "        val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x))\
    \ {\n                return true\n            }\n        }\n        return false",
  "        val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x))\
    \ return true\n        }\n        return false", "        var m = new HashMap[Long,\
    \ Long]\n        for (i <- l) {\n            if (m.contains(i)) {\n          \
    \      m(i) = m(i) + 1\n            } else {\n                m(i) = 1\n     \
    \       }\n        }\n        for (i <- l) {\n            if (m.contains(-i))\
    \ {\n                if (i != 0) {\n                    return true\n        \
    \        } else {\n                    if (m(i) > 1) {\n                     \
    \   return true\n                    }\n                }\n            }\n   \
    \     }\n        return false", "        var hs = new HashSet[Long]\n        for\
    \ (x <- l) {\n            if (hs.contains(-x)) return true\n            hs +=\
    \ x\n        }\n        return false", "        val m = new HashMap[Long, Int]()\n\
    \        for (i <- l) {\n            if (m.contains(i)) {\n                m(i)\
    \ += 1\n            } else {\n                m(i) = 1\n            }\n      \
    \  }\n        for (i <- l) {\n            if (m.contains(-i)) {\n            \
    \    if (i != 0 || m(i) > 1) {\n                    return true\n            \
    \    }\n            }\n        }\n        return false", "        val s = l.toSet\n\
    \        for (i <- s) {\n            if (s.contains(-i)) return true\n       \
    \ }\n        return false", "        var set = Set[Long]()\n        for (i <-\
    \ l) {\n            if (set.contains(-i)) {\n                return true\n   \
    \         }\n            set += i\n        }\n        return false", "       \
    \ val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x)) {\n\
    \                return true\n            }\n        }\n        return false",
  "        // your code here\n        return false", "        var h = HashSet[Long]()\n\
    \        for (x <- l) {\n            if (h.contains(-x)) return true\n       \
    \     h += x\n        }\n        return false"]
stop_tokens:
- "\n    }\n"
