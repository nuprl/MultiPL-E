name: HumanEval_43_pairs_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // pairs_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ true if there are two distinct elements in the list that\n    // sum to zero,\
  \ and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
  \ 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n   \
  \ // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
  \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n    }\n\
  \n}\n"
completions: ["        // your code here\n        val set = new HashSet[Long]\n  \
    \      for (x <- l) {\n            if (set.contains(-x)) return true\n       \
    \     set += x\n        }\n        false", "        val s = l.toSet\n        for\
    \ (i <- s) {\n            if (s.contains(-i)) return true\n        }\n       \
    \ return false", "        val s = l.toSet\n        for (x <- s) {\n          \
    \  if (s.contains(-x)) {\n                return true\n            }\n       \
    \ }\n        return false", "        val s = l.toSet\n        for (i <- s) {\n\
    \            if (s.contains(-i)) {\n                return true\n            }\n\
    \        }\n        return false", "        // your code here\n        return\
    \ false", "        // your code here\n        return false", "        // YOUR\
    \ CODE HERE\n        return false", "        val s = l.toSet\n        for (i <-\
    \ s) {\n            if (s.contains(-i)) {\n                return true\n     \
    \       }\n        }\n        return false", "        // YOUR CODE HERE\n    \
    \    return false", "        // your code here\n        false", "        // YOUR\
    \ CODE HERE\n        return false", "        val set = new HashSet[Long]\n   \
    \     for (i <- l) {\n            if (set.contains(-i)) return true\n        \
    \    set.add(i)\n        }\n        return false", "        val s = new HashSet[Long]\n\
    \        for (i <- l) {\n            if (s.contains(-i)) return true\n       \
    \     s.add(i)\n        }\n        return false", "        var s = Set[Long]()\n\
    \        for (i <- l) {\n            if (s.contains(-i)) return true\n       \
    \     s += i\n        }\n        return false", "        // your code here\n \
    \       return false", "        // your code here\n        return false", "  \
    \      val s = Set[Long]()\n        for (x <- l) {\n            if (s.contains(-x))\
    \ return true\n            s += x\n        }\n        return false", "       \
    \ val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i)) {\n\
    \                return true\n            }\n        }\n        return false",
  "        val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x))\
    \ {\n                return true\n            }\n        }\n        return false",
  "        val set = new HashSet[Long]\n        for (i <- l) {\n            if (set.contains(-i))\
    \ return true\n            set.add(i)\n        }\n        return false"]
stop_tokens:
- "\n    }\n"
