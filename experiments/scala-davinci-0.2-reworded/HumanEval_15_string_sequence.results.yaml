language: scala
name: HumanEval_15_string_sequence
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = new StringBuilder\n        for (i <- 0 to\
    \ n.toInt) {\n            result.append(i.toString)\n            result.append(\"\
    \ \")\n        }\n        result.toString.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i + \" \"\n        }\n        result.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            s.append(i)\n            s.append(\" \")\n        }\n       \
    \ s.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aco9i31.scala:18)\n\tat Problem.main(tmp1aco9i31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i + \" \"\n        }\n        result.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0l to n) {\n    \
    \        result += i.toString + \" \"\n        }\n        result.trim\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvn2f__mz.scala:18)\n\tat Problem.main(tmpvn2f__mz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i.toString)\n            sb.append(\" \")\n       \
    \ }\n        sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += \" \" + i.toString\n        }\n        s.substring(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i.toString + \" \"\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0qnfjgy0.scala:17)\n\tat Problem.main(tmp0qnfjgy0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) s += i + \" \"\
    \n        s.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i.toString + \" \"\n        }\n        result.trim\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0l to n) {\n    \
    \        result += i.toString + \" \"\n        }\n        result.trim\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i.toString + \" \"\n        }\n        result.trim\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            s.append(i)\n            s.append(\" \")\n        }\n       \
    \ s.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aco9i31.scala:18)\n\tat Problem.main(tmp1aco9i31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i + \" \"\n        }\n        s.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString\n            if (i != n.toInt) s += \" \"\n        }\n\
    \        return s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            s.append(i)\n            s.append(\" \")\n        }\n       \
    \ s.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmploz7hy59.scala:17)\n\tat Problem.main(tmploz7hy59.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i + \" \"\n        }\n        result.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            s.append(i)\n            s.append(\" \")\n        }\n       \
    \ s.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm2hyiyvp.scala:18)\n\tat Problem.main(tmpm2hyiyvp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0l to n) {\n    \
    \        result += i.toString + \" \"\n        }\n        result.trim\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i.toString)\n            sb.append(\" \")\n       \
    \ }\n        sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i.toString)\n            sb.append(\" \")\n       \
    \ }\n        sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s : String = \"\"\n        for (i <- 0l to n) {\n\
    \            s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        if (n == 0) return \"0\"\n        var result = \"\"\n\
    \        for (i <- 0 to n.toInt) {\n            result += i.toString + \" \"\n\
    \        }\n        return result.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            s.append(i)\n            s.append(\" \")\n        }\n       \
    \ s.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i.toString)\n            sb.append(\" \")\n       \
    \ }\n        sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvn2f__mz.scala:18)\n\tat Problem.main(tmpvn2f__mz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            s.append(i)\n            s.append(\" \")\n        }\n       \
    \ s.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793543
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = new StringBuilder\n        for (i <- 0 to\
    \ n.toInt) {\n            result.append(i)\n            result.append(\" \")\n\
    \        }\n        result.toString.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) s += i +\
    \ \" \"\n        s.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            s.append(i)\n            s.append(\" \")\n        }\n       \
    \ s.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) s += i + \" \"\
    \n        s.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i + \" \"\n        }\n        result.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i.toString + \" \"\n        }\n        result.trim\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i.toString + \" \"\n        }\n        result.trim\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i.toString)\n            sb.append(\" \")\n       \
    \ }\n        sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            s.append(i)\n            s.append(\" \")\n        }\n       \
    \ s.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793543
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s : String = \"\"\n        for (i <- 0 to n.toInt)\
    \ {\n            s += i.toString + \" \"\n        }\n        s.trim\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i.toString + \" \"\n        }\n        result.trim\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85k09t9j.scala:17)\n\tat Problem.main(tmp85k09t9j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   return sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793543
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) s += i +\
    \ \" \"\n        s.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i.toString + \" \"\n        }\n        result.trim\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i.toString + \" \"\n        }\n        result.trim\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) s += i +\
    \ \" \"\n        s.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp7iff5lw.scala:18)\n\tat Problem.main(tmpp7iff5lw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793543
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i.toString + \" \")\n        }\n        sb.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85k09t9j.scala:17)\n\tat Problem.main(tmp85k09t9j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0l to n) {\n    \
    \        result += i + \" \"\n        }\n        result.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            s.append(i)\n            s.append(\" \")\n        }\n       \
    \ s.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1aco9i31.scala:18)\n\tat Problem.main(tmp1aco9i31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i.toString)\n            sb.append(\" \")\n       \
    \ }\n        sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvn2f__mz.scala:18)\n\tat Problem.main(tmpvn2f__mz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        (0l to n).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793543
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            s.append(i.toString)\n            s.append(\" \")\n        }\n\
    \        s.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793543
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85k09t9j.scala:17)\n\tat Problem.main(tmp85k09t9j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) s += i +\
    \ \" \"\n        s.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s : String = \"\"\n        for (i <- 0 to n.toInt)\
    \ {\n            s += i.toString + \" \"\n        }\n        s.trim\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s : String = \"\"\n        for (i <- 0 to n.toInt)\
    \ {\n            s += i.toString + \" \"\n        }\n        s.trim\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i.toString + \" \"\n        }\n        result.trim\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) s += i +\
    \ \" \"\n        s.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder()\n        for (i <- 0l to n)\
    \ {\n            s.append(i)\n            s.append(\" \")\n        }\n       \
    \ s.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793543
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s : String = \"\"\n        for (i <- 0l to n) {\n\
    \            s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\"\
    )));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) result\
    \ += i + \" \"\n        result.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793543
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0l to n) {\n    \
    \        result += i.toString + \" \"\n        }\n        result.trim\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i.toString + \" \"\n        }\n        result.trim\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i.toString)\n            sb.append(\" \")\n       \
    \ }\n        sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) s += i +\
    \ \" \"\n        s.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0 to n.toInt) {\n\
    \            result += i.toString + \" \"\n        }\n        result.trim\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp85k09t9j.scala:17)\n\tat Problem.main(tmp85k09t9j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) s += i + \" \"\
    \n        s.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ s.append(i.toString + \" \")\n        s.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793543
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0l to n) result +=\
    \ i + \" \"\n        result.trim\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793543
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0l to n) {\n    \
    \        result += i.toString + \" \"\n        }\n        result.trim\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) s += i +\
    \ \" \"\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpce5d1k38.scala:15)\n\tat Problem.main(tmpce5d1k38.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793543
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0l to n) {\n    \
    \        result += i.toString + \" \"\n        }\n        result.trim\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0l to n)\
    \ {\n            sb.append(i.toString)\n            sb.append(\" \")\n       \
    \ }\n        sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            s.append(i)\n            s.append(\" \")\n        }\n       \
    \ s.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793543
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var result = \"\"\n        for (i <- 0l to n) {\n    \
    \        result += i.toString + \" \"\n        }\n        result.trim\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        val sb = new StringBuilder\n        for (i <- 0 to n.toInt)\
    \ {\n            sb.append(i)\n            sb.append(\" \")\n        }\n     \
    \   sb.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(stringSequence((0l)).equals((\"\
    0\")));\n    assert(stringSequence((3l)).equals((\"0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"\
    0 1 2 3 4 5 6 7 8 9 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0 to n.toInt) {\n    \
    \        s += i.toString + \" \"\n        }\n        s.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>>\
    \ stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long)\
    \ : String = {\n        var s = \"\"\n        for (i <- 0l to n) {\n         \
    \   s += i + \" \"\n        }\n        s.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(stringSequence((0l)).equals((\"0\")));\n    assert(stringSequence((3l)).equals((\"\
    0 1 2 3\")));\n    assert(stringSequence((10l)).equals((\"0 1 2 3 4 5 6 7 8 9\
    \ 10\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793535
