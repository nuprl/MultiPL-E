language: scala
name: HumanEval_141_file_name_check
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name_regex = \"\"\"([a-zA-Z]{1}[a-zA-Z0-9]*)\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case file_name_regex(name,\
    \ extension) => \"Yes\"\n            case _ => \"No\"\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp40vgb6h0.scala:31)\n\tat Problem.main(tmp40vgb6h0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name_split = file_name.split(\"\\\\\
    .\")\n        if (file_name_split.length != 2) {\n            return \"No\"\n\
    \        }\n        val file_name_split_0 = file_name_split(0)\n        val file_name_split_1\
    \ = file_name_split(1)\n        if (file_name_split_0.length == 0) {\n       \
    \     return \"No\"\n        }\n        if (file_name_split_0.count(c => c >=\
    \ '0' && c <= '9') > 3) {\n            return \"No\"\n        }\n        if (file_name_split_0(0)\
    \ < 'a' || file_name_split_0(0) > 'z') {\n            return \"No\"\n        }\n\
    \        if (file_name_split_1 != \"txt\" && file_name_split_1 != \"exe\" && file_name_split_1\
    \ != \"dll\") {\n            return \"No\"\n        }\n        return \"Yes\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbiuzoguf.scala:43)\n\tat Problem.main(tmpbiuzoguf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"No\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowqll1zq.scala:23)\n\tat Problem.main(tmpowqll1zq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name_split = file_name.split(\"\\\\\
    .\")\n        if (file_name_split.length != 2) return \"No\"\n        val file_name_split_0\
    \ = file_name_split(0)\n        val file_name_split_1 = file_name_split(1)\n \
    \       if (file_name_split_0.length == 0) return \"No\"\n        if (file_name_split_0.length\
    \ > 3) return \"No\"\n        if (file_name_split_0.length == 3) {\n         \
    \   if (file_name_split_0.forall(c => c >= '0' && c <= '9')) return \"No\"\n \
    \       }\n        if (file_name_split_1 != \"txt\" && file_name_split_1 != \"\
    exe\" && file_name_split_1 != \"dll\") return \"No\"\n        if (file_name_split_0(0)\
    \ < 'a' || file_name_split_0(0) > 'z') return \"No\"\n        return \"Yes\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbyhk7l3s.scala:33)\n\tat Problem.main(tmpbyhk7l3s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        val pattern\
    \ = \"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\".r\n        if (pattern.findFirstIn(file_name).isDefined)\
    \ \"Yes\" else \"No\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpok_15u79.scala:24)\n\tat Problem.main(tmpok_15u79.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"No\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowqll1zq.scala:23)\n\tat Problem.main(tmpowqll1zq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"No\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowqll1zq.scala:23)\n\tat Problem.main(tmpowqll1zq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"\"\"([a-zA-Z]\\w*)\\.(txt|exe|dll)\"\
    \"\".r\n        file_name match {\n            case pattern(a, b) => \"Yes\"\n\
    \            case _ => \"No\"\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprqrtyqeb.scala:31)\n\tat Problem.main(tmprqrtyqeb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here.\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgcj5zv4.scala:23)\n\tat Problem.main(tmpbgcj5zv4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        val pattern\
    \ = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuwevewuj.scala:31)\n\tat Problem.main(tmpuwevewuj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name_split = file_name.split(\"\\\\\
    .\")\n        if (file_name_split.length != 2) {\n            return \"No\"\n\
    \        }\n        val file_name_split_0 = file_name_split(0)\n        val file_name_split_1\
    \ = file_name_split(1)\n        if (!file_name_split_0.matches(\"[a-zA-Z]+[a-zA-Z0-9]*\"\
    )) {\n            return \"No\"\n        }\n        if (file_name_split_0.matches(\"\
    .*[0-9].*\") && file_name_split_0.matches(\".*[0-9].*[0-9].*\") && file_name_split_0.matches(\"\
    .*[0-9].*[0-9].*[0-9].*\")) {\n            return \"No\"\n        }\n        if\
    \ (!(file_name_split_1 == \"txt\" || file_name_split_1 == \"exe\" || file_name_split_1\
    \ == \"dll\")) {\n            return \"No\"\n        }\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoeo7enm6.scala:41)\n\tat Problem.main(tmpoeo7enm6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        var dot_count\
    \ = 0\n        var digit_count = 0\n        var extension = \"\"\n        var\
    \ valid_extension = false\n        var valid_name = false\n        for (i <- 0\
    \ until file_name.length) {\n            if (file_name(i) == '.') {\n        \
    \        dot_count += 1\n                if (dot_count > 1) return \"No\"\n  \
    \              extension = file_name.substring(i + 1)\n            }\n       \
    \     if (file_name(i) >= '0' && file_name(i) <= '9') {\n                digit_count\
    \ += 1\n                if (digit_count > 3) return \"No\"\n            }\n  \
    \          if (file_name(i) >= 'a' && file_name(i) <= 'z' || file_name(i) >= 'A'\
    \ && file_name(i) <= 'Z') {\n                valid_name = true\n            }\n\
    \        }\n        if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n            valid_extension = true\n        }\n        if (valid_name\
    \ && valid_extension) {\n            return \"Yes\"\n        }\n        return\
    \ \"No\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp80xz4p5q.scala:49)\n\tat Problem.main(tmp80xz4p5q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5sf8iyok.scala:31)\n\tat Problem.main(tmp5sf8iyok.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"No\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowqll1zq.scala:23)\n\tat Problem.main(tmpowqll1zq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        if (file_name.count(_.isDigit)\
    \ > 3) return \"No\"\n        val dot_index = file_name.indexOf('.')\n       \
    \ if (dot_index == -1) return \"No\"\n        if (dot_index == 0) return \"No\"\
    \n        if (!file_name(dot_index - 1).isLetter) return \"No\"\n        if (file_name.substring(dot_index\
    \ + 1) != \"txt\" && file_name.substring(dot_index + 1) != \"exe\" && file_name.substring(dot_index\
    \ + 1) != \"dll\") return \"No\"\n        return \"Yes\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnautkxhu.scala:30)\n\tat Problem.main(tmpnautkxhu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here.\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgcj5zv4.scala:23)\n\tat Problem.main(tmpbgcj5zv4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here.\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo053l7ho.scala:23)\n\tat Problem.main(tmpo053l7ho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"No\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowqll1zq.scala:23)\n\tat Problem.main(tmpowqll1zq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        null\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"String.equals(Object)\"\
    \ because the return value of \"Problem$.fileNameCheck(String)\" is null\n\tat\
    \ Problem$.main(tmpadh9nec0.scala:23)\n\tat Problem.main(tmpadh9nec0.scala)\n\t\
    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805353
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        \"Yes\"\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3gln00da.scala:24)\n\tat Problem.main(tmp3gln00da.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"No\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowqll1zq.scala:23)\n\tat Problem.main(tmpowqll1zq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        var result\
    \ = \"Yes\"\n        var count = 0\n        var dot = 0\n        var dot_index\
    \ = 0\n        var extension = \"\"\n        for (i <- 0 until file_name.length)\
    \ {\n            if (file_name(i) >= '0' && file_name(i) <= '9') {\n         \
    \       count += 1\n            }\n            if (file_name(i) == '.') {\n  \
    \              dot += 1\n                dot_index = i\n            }\n      \
    \  }\n        if (count > 3 || dot != 1) {\n            result = \"No\"\n    \
    \    }\n        else {\n            extension = file_name.substring(dot_index\
    \ + 1)\n            if (extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\") {\n                result = \"No\"\n            }\n            else\
    \ {\n                if (file_name(0) < 'a' || file_name(0) > 'z' && file_name(0)\
    \ < 'A' || file_name(0) > 'Z') {\n                    result = \"No\"\n      \
    \          }\n            }\n        }\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqgfq6wjp.scala:51)\n\tat Problem.main(tmpqgfq6wjp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        var result\
    \ = \"Yes\"\n        var dot = 0\n        var digit = 0\n        var first = 0\n\
    \        var last = 0\n        for (i <- 0 until file_name.length) {\n       \
    \     if (file_name(i) == '.') {\n                dot += 1\n                last\
    \ = i\n            }\n            if (file_name(i) >= '0' && file_name(i) <= '9')\
    \ {\n                digit += 1\n            }\n            if (i == 0 && (file_name(i)\
    \ < 'a' || file_name(i) > 'z') && (file_name(i) < 'A' || file_name(i) > 'Z'))\
    \ {\n                result = \"No\"\n            }\n        }\n        if (dot\
    \ != 1 || digit > 3 || last == 0) {\n            result = \"No\"\n        }\n\
    \        if (file_name.substring(last + 1) != \"txt\" && file_name.substring(last\
    \ + 1) != \"exe\" && file_name.substring(last + 1) != \"dll\") {\n           \
    \ result = \"No\"\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"No\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowqll1zq.scala:23)\n\tat Problem.main(tmpowqll1zq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"No\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowqll1zq.scala:23)\n\tat Problem.main(tmpowqll1zq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        val pattern\
    \ = \"\"\"([a-zA-Z]+)(\\d{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(_, _, _) => \"Yes\"\n            case _ => \"No\"\
    \n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuwevewuj.scala:31)\n\tat Problem.main(tmpuwevewuj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        val pattern(a,\
    \ b, c) = file_name\n        if (b.length <= 3) \"Yes\" else \"No\"\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 1example.dll (of class java.lang.String)\n\tat Problem$.fileNameCheck(tmpkw45uzve.scala:21)\n\
    \tat Problem$.main(tmpkw45uzve.scala:26)\n\tat Problem.main(tmpkw45uzve.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        val pattern\
    \ = \"\"\"([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\"\"\".r\n        file_name match\
    \ {\n            case pattern(a, b, c) => \"Yes\"\n            case _ => \"No\"\
    \n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkl4xfg0a.scala:31)\n\tat Problem.main(tmpkl4xfg0a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"No\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowqll1zq.scala:23)\n\tat Problem.main(tmpowqll1zq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"\"\"([a-zA-Z]+)(\\d{0,3})\\\
    .(txt|exe|dll)\"\"\".r\n        file_name match {\n            case pattern(_,\
    \ _, _) => \"Yes\"\n            case _ => \"No\"\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpotef5659.scala:30)\n\tat Problem.main(tmpotef5659.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    ;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr48_4vw7.scala:23)\n\tat Problem.main(tmpr48_4vw7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpudm83oux.scala:23)\n\tat Problem.main(tmpudm83oux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgxkihg68.scala:24)\n\tat Problem.main(tmpgxkihg68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        return \"No\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowqll1zq.scala:23)\n\tat Problem.main(tmpowqll1zq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805354
