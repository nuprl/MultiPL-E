name: HumanEval_62_derivative
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n\
  \    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n\
  \    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n    // >>> derivative((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
  \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
  \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
  \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong,\
  \ 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        var result = List[Long]()\n        for (i <- 1 until xs.length)\
    \ {\n            result = result :+ xs(i) * i\n        }\n        return result",
  "        var result = List[Long]()\n        for (i <- 1 until xs.length) {\n   \
    \         result = result :+ xs(i) * i\n        }\n        return result", " \
    \       var result = List[Long]()\n        for (i <- 1 until xs.length) {\n  \
    \          result = result :+ (i * xs(i))\n        }\n        return result",
  "        var result = List[Long]()\n        for (i <- 1 until xs.length) {\n   \
    \         result = result :+ (i * xs(i))\n        }\n        return result", '        xs.zipWithIndex.map(x
    => x._1 * x._2).tail', '        xs.indices.map(i => xs(i) * i).toList.tail', " \
    \       var result = List[Long]()\n        for (i <- 1 until xs.length) {\n  \
    \          result = result :+ (i * xs(i))\n        }\n        return result",
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n\
    \        ys.toList", "        var result = List[Long]()\n        for (i <- 1 until\
    \ xs.length) result = result :+ (i * xs(i))\n        return result", "       \
    \ var result = List[Long]()\n        for (i <- 1 until xs.length) {\n        \
    \    result = result :+ (i * xs(i))\n        }\n        return result", "    \
    \    var ys = List[Long]()\n        for (i <- 1 until xs.length) ys = ys :+ xs(i)\
    \ * i\n        ys", "        var result = List[Long]()\n        for (i <- 1 until\
    \ xs.length) result = (xs(i) * i) :: result\n        result.reverse", "      \
    \  val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i\
    \ <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "       \
    \ val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <-\
    \ 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "        var\
    \ ys = List[Long]()\n        for (i <- 1 until xs.length) {\n            ys =\
    \ ys :+ (i * xs(i))\n        }\n        ys", "        var result = List[Long]()\n\
    \        for (i <- 1 until xs.length) {\n            result = result :+ xs(i)\
    \ * i\n        }\n        return result", "        val n = xs.length\n       \
    \ val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = (i\
    \ + 1) * xs(i + 1)\n        ys.toList", "        val n = xs.length\n        val\
    \ ys = new Array[Long](n - 1)\n        for (i <- 1 until n) {\n            ys(i\
    \ - 1) = xs(i) * i\n        }\n        ys.toList", "        val n = xs.length\n\
    \        val ys = new Array[Long](n - 1)\n        for (i <- 1 until n) {\n   \
    \         ys(i - 1) = xs(i) * i\n        }\n        ys.toList", "        val n\
    \ = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <- 1 until\
    \ n) {\n            ys(i - 1) = xs(i) * i\n        }\n        ys.toList"]
stop_tokens:
- "\n    }\n"
