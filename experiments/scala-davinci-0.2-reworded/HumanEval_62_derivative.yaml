name: HumanEval_62_derivative
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n\
  \    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n\
  \    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n    // >>> derivative((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
  \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
  \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
  \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong,\
  \ 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        var result = List[Long]()\n        for (i <- 1 until xs.length)\
    \ {\n            result = result :+ xs(i) * i\n        }\n        return result",
  "        var result = List[Long]()\n        for (i <- 1 until xs.length) {\n   \
    \         result = result :+ xs(i) * i\n        }\n        return result", " \
    \       var result = List[Long]()\n        for (i <- 1 until xs.length) {\n  \
    \          result = result :+ (i * xs(i))\n        }\n        return result",
  "        var result = List[Long]()\n        for (i <- 1 until xs.length) {\n   \
    \         result = result :+ (i * xs(i))\n        }\n        return result", '        xs.zipWithIndex.map(x
    => x._1 * x._2).tail', '        xs.indices.map(i => xs(i) * i).toList.tail', " \
    \       var result = List[Long]()\n        for (i <- 1 until xs.length) {\n  \
    \          result = result :+ (i * xs(i))\n        }\n        return result",
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n\
    \        ys.toList", "        var result = List[Long]()\n        for (i <- 1 until\
    \ xs.length) result = result :+ (i * xs(i))\n        return result", "       \
    \ var result = List[Long]()\n        for (i <- 1 until xs.length) {\n        \
    \    result = result :+ (i * xs(i))\n        }\n        return result", "    \
    \    var ys = List[Long]()\n        for (i <- 1 until xs.length) ys = ys :+ xs(i)\
    \ * i\n        ys", "        var result = List[Long]()\n        for (i <- 1 until\
    \ xs.length) result = (xs(i) * i) :: result\n        result.reverse", "      \
    \  val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i\
    \ <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "       \
    \ val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <-\
    \ 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "        var\
    \ ys = List[Long]()\n        for (i <- 1 until xs.length) {\n            ys =\
    \ ys :+ (i * xs(i))\n        }\n        ys", "        var result = List[Long]()\n\
    \        for (i <- 1 until xs.length) {\n            result = result :+ xs(i)\
    \ * i\n        }\n        return result", "        val n = xs.length\n       \
    \ val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = (i\
    \ + 1) * xs(i + 1)\n        ys.toList", "        val n = xs.length\n        val\
    \ ys = new Array[Long](n - 1)\n        for (i <- 1 until n) {\n            ys(i\
    \ - 1) = xs(i) * i\n        }\n        ys.toList", "        val n = xs.length\n\
    \        val ys = new Array[Long](n - 1)\n        for (i <- 1 until n) {\n   \
    \         ys(i - 1) = xs(i) * i\n        }\n        ys.toList", "        val n\
    \ = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <- 1 until\
    \ n) {\n            ys(i - 1) = xs(i) * i\n        }\n        ys.toList", "  \
    \      val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n\
    \        ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i\
    \ + 1)\n        }\n        ys.toList", "        val n = xs.length\n        val\
    \ ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1)\
    \ * xs(i + 1)\n        ys.toList", '        xs.zipWithIndex.map(x => x._1 * x._2).tail',
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 1 until n) {\n            ys(i - 1) = xs(i) * i\n        }\n        ys.toList",
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n\
    \        ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i\
    \ + 1)\n        }\n        ys.toList", '        xs.zipWithIndex.map(x => x._1
    * x._2).drop(1)', "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n       \
    \ ys.toList", "        val ys = new ListBuffer[Long]\n        for (i <- 1 until\
    \ xs.length) {\n            ys += xs(i) * i\n        }\n        ys.toList", " \
    \       val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "    \
    \    var result = List[Long]()\n        for (i <- 1 until xs.length) {\n     \
    \       result = result :+ xs(i) * i\n        }\n        return result", "   \
    \     val ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) ys +=\
    \ xs(i) * i\n        ys.toList", "        var result = List[Long]()\n        for\
    \ (i <- 1 until xs.length) {\n            result = result :+ (i * xs(i))\n   \
    \     }\n        return result", "        val n = xs.length\n        val ys =\
    \ new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i\
    \ + 1)\n        ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 1 until n) {\n            ys(i - 1) = xs(i) * i\n  \
    \      }\n        ys.toList", "        var ys = List[Long]()\n        for (i <-\
    \ 1 until xs.length) {\n            ys = ys :+ xs(i) * i\n        }\n        ys",
  "        val n = xs.length\n        if (n == 1) List(0l)\n        else {\n     \
    \       val ys = new ListBuffer[Long]\n            for (i <- 1 until n) ys +=\
    \ xs(i) * i\n            ys.toList\n        }", "        val n = xs.length\n \
    \       val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i)\
    \ = (i + 1) * xs(i + 1)\n        ys.toList", "        val n = xs.length\n    \
    \    val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) =\
    \ (i + 1) * xs(i + 1)\n        ys.toList", "        var result = List[Long]()\n\
    \        for (i <- 1 until xs.length) {\n            result = result :+ (i * xs(i))\n\
    \        }\n        return result", "        val n = xs.length\n        val ys\
    \ = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) {\n            ys(i)\
    \ = (i + 1) * xs(i + 1)\n        }\n        ys.toList", "        val ys = ListBuffer[Long]()\n\
    \        for (i <- 1 until xs.length) {\n            ys += xs(i) * i\n       \
    \ }\n        ys.toList", "        if (xs.length == 1) List(0)\n        else {\n\
    \            val ys = ListBuffer[Long]()\n            for (i <- 1 until xs.length)\
    \ {\n                ys += xs(i) * i\n            }\n            ys.toList\n \
    \       }", "        var result = List[Long]()\n        for (i <- 1 until xs.length)\
    \ {\n            result = result :+ (i * xs(i))\n        }\n        return result",
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 1 until n) {\n            ys(i - 1) = xs(i) * i\n        }\n        ys.toList",
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "    \
    \    val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i\
    \ <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "       \
    \ var result = List[Long]()\n        for (i <- 1 until xs.length) {\n        \
    \    result = result :+ xs(i) * i\n        }\n        return result", "      \
    \  val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i\
    \ <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "       \
    \ val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <-\
    \ 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n     \
    \   ys.toList", '        xs.zipWithIndex.map(x => x._1 * x._2).tail', "      \
    \  val ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) {\n   \
    \         ys += xs(i) * i\n        }\n        ys.toList", "        var result\
    \ = List[Long]()\n        for (i <- 1 until xs.length) {\n            result =\
    \ result :+ xs(i) * i\n        }\n        return result", "        val n = xs.length\n\
    \        val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i)\
    \ = (i + 1) * xs(i + 1)\n        ys.toList", "        def helper(xs : List[Long],\
    \ acc : List[Long]) : List[Long] = {\n            xs match {\n               \
    \ case Nil => acc\n                case x :: xs => helper(xs, (x * xs.length)\
    \ :: acc)\n            }\n        }\n        helper(xs, Nil).reverse", "     \
    \   var ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) {\n  \
    \          ys += i * xs(i)\n        }\n        ys.toList", '        xs.zipWithIndex.map(x
    => x._1 * x._2).tail', "        var result = List[Long]()\n        for (i <- 1\
    \ until xs.length) {\n            result = result :+ xs(i) * i\n        }\n  \
    \      return result", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n       \
    \ ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n -\
    \ 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList",
  "        val n = xs.length\n        var ys = List[Long]()\n        for (i <- 1 until\
    \ n) {\n            ys = ys :+ xs(i) * i\n        }\n        ys", "        var\
    \ result = List[Long]()\n        for (i <- 1 until xs.length) {\n            result\
    \ = result :+ xs(i) * i\n        }\n        return result", "        if (xs.length\
    \ == 1) List(0)\n        else xs.zipWithIndex.map(x => x._1 * x._2).tail", " \
    \       var result = List[Long]()\n        for (i <- 1 until xs.length) result\
    \ = result :+ xs(i) * i\n        result", "        val n = xs.length\n       \
    \ val ys = new Array[Long](n - 1)\n        for (i <- 1 until n) {\n          \
    \  ys(i - 1) = xs(i) * i\n        }\n        ys.toList", '        xs.zipWithIndex.map(x
    => x._1 * x._2).drop(1)', "        val ys = new ListBuffer[Long]\n        for\
    \ (i <- 1 until xs.length) {\n            ys += xs(i) * i\n        }\n       \
    \ ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n -\
    \ 1)\n        for (i <- 1 until n) {\n            ys(i - 1) = xs(i) * i\n    \
    \    }\n        ys.toList", "        var result = List[Long]()\n        for (i\
    \ <- 1 until xs.length) {\n            result = result :+ (i * xs(i))\n      \
    \  }\n        return result", "        val n = xs.length\n        val ys = new\
    \ Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i\
    \ + 1)\n        ys.toList", "        val n = xs.length\n        (1 until n).map(i\
    \ => xs(i) * i).toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n       \
    \ ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n -\
    \ 1)\n        for (i <- 1 until n) {\n            ys(i - 1) = xs(i) * i\n    \
    \    }\n        ys.toList", "        var result = new ListBuffer[Long]\n     \
    \   for (i <- 1 until xs.length) {\n            result += i * xs(i)\n        }\n\
    \        result.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n       \
    \ ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n -\
    \ 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList",
  "        var result = new ListBuffer[Long]()\n        for (i <- 1 until xs.length)\
    \ result += xs(i) * i\n        result.toList", '        (for (i <- 1 until xs.length)
    yield xs(i) * i).toList', '        xs.zipWithIndex.map(x => x._1 * x._2).tail',
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n\
    \        ys.toList", "        var ys = List[Long]()\n        for (i <- 1 until\
    \ xs.length) ys = ys :+ xs(i) * i\n        ys", "        def helper(xs : List[Long],\
    \ n : Int) : List[Long] = {\n            if (n == xs.length) Nil\n           \
    \ else xs(n) * n.toLong :: helper(xs, n + 1)\n        }\n        helper(xs, 1)",
  "        var result = List[Long]()\n        for (i <- 1 until xs.length) {\n   \
    \         result = result :+ (i * xs(i))\n        }\n        return result", " \
    \       val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 1 until n) ys(i - 1) = xs(i) * i\n        ys.toList", "        val n =\
    \ xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <- 0 until\
    \ n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", '        xs.zipWithIndex.map(x
    => x._1 * x._2).tail', "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 1 until n) ys(i - 1) = xs(i) * i\n        ys.toList",
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "    \
    \    val ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) {\n \
    \           ys += xs(i) * i\n        }\n        ys.toList", "        val n = xs.length\n\
    \        val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i)\
    \ = (i + 1) * xs(i + 1)\n        ys.toList", "        var result = List[Long]()\n\
    \        for (i <- 1 until xs.length) result = result :+ (i * xs(i))\n       \
    \ return result", "        var result = List[Long]()\n        for (i <- 1 until\
    \ xs.length) {\n            result = result :+ (i * xs(i))\n        }\n      \
    \  return result", '        xs.tail.zipWithIndex.map(x => (x._1 * (x._2 + 1))).toList',
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "    \
    \    val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i\
    \ <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "       \
    \ var result = List[Long]()\n        for (i <- 1 until xs.length) result = result\
    \ :+ xs(i) * i\n        result", "        val n = xs.length\n        val ys =\
    \ new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i\
    \ + 1)\n        ys.toList", "        var ys = List[Long]()\n        for (i <-\
    \ 1 until xs.length) {\n            ys = ys :+ (i * xs(i))\n        }\n      \
    \  ys", "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n\
    \        for (i <- 1 until n) {\n            ys(i - 1) = xs(i) * i\n        }\n\
    \        ys.toList", "        val n = xs.length\n        if (n == 1) List(0)\n\
    \        else {\n            val ys = new ListBuffer[Long]\n            for (i\
    \ <- 1 until n) ys += xs(i) * i\n            ys.toList\n        }", "        val\
    \ n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <- 1\
    \ until n) {\n            ys(i - 1) = xs(i) * i\n        }\n        ys.toList",
  "        var result = List[Long]()\n        for (i <- 1 until xs.length) {\n   \
    \         result = result :+ xs(i) * i\n        }\n        return result", " \
    \       if (xs.length == 1) List[Long](0l.toLong)\n        else {\n          \
    \  var ys = List[Long]()\n            for (i <- 1 until xs.length) ys = ys :+\
    \ xs(i) * i\n            ys\n        }", "        val n = xs.length\n        val\
    \ ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1)\
    \ * xs(i + 1)\n        ys.toList", "        val n = xs.length\n        val ys\
    \ = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) *\
    \ xs(i + 1)\n        ys.toList", "        var result = List[Long]()\n        for\
    \ (i <- 1 until xs.length) {\n            result = result :+ (i * xs(i))\n   \
    \     }\n        return result", "        def helper(xs : List[Long], acc : List[Long])\
    \ : List[Long] = xs match {\n            case Nil => acc\n            case x ::\
    \ xs => helper(xs, (x * xs.length) :: acc)\n        }\n        helper(xs, Nil).reverse",
  "        val ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) {\n\
    \            ys += xs(i) * i\n        }\n        ys.toList", "        var result\
    \ = new ListBuffer[Long]\n        for (i <- 1 until xs.length) result += i * xs(i)\n\
    \        result.toList", "        var ys = List[Long]()\n        for (i <- 1 until\
    \ xs.length) {\n            ys = ys :+ (i * xs(i))\n        }\n        ys", " \
    \       var result = List[Long]()\n        for (i <- 1 until xs.length) {\n  \
    \          result = result :+ (i * xs(i))\n        }\n        return result",
  "        var result = List[Long]()\n        for (i <- 1 until xs.length) {\n   \
    \         result = result :+ (i * xs(i))\n        }\n        return result", " \
    \       if (xs.length == 1) List(0)\n        else xs.zipWithIndex.map(x => x._1\
    \ * x._2).tail", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n       \
    \ ys.toList", "        if (xs.length == 1) return List(0l)\n        val ys = new\
    \ ListBuffer[Long]\n        for (i <- 1 until xs.length) ys += xs(i) * i\n   \
    \     ys.toList", "        var ys = new ListBuffer[Long]\n        for (i <- 1\
    \ until xs.length) {\n            ys += xs(i) * i\n        }\n        ys.toList",
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n\
    \        ys.toList", "        var result = List[Long]()\n        for (i <- 1 until\
    \ xs.length) result = result :+ xs(i) * i\n        result", '        xs.zipWithIndex.map(x
    => x._1 * x._2).tail', "        var result = List[Long]()\n        for (i <- 1\
    \ until xs.length) {\n            result = result :+ xs(i) * i\n        }\n  \
    \      return result", "        var result = List[Long]()\n        for (i <- 1\
    \ until xs.length) {\n            result = result :+ (xs(i) * i)\n        }\n\
    \        return result", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 1 until n) {\n            ys(i - 1) = xs(i) * i\n  \
    \      }\n        ys.toList", "        var result = List[Long]()\n        for\
    \ (i <- 1 until xs.length) {\n            result = result :+ xs(i) * i\n     \
    \   }\n        return result", "        val n = xs.length\n        val ys = new\
    \ Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i\
    \ + 1)\n        ys.toList", "        val ys = new ListBuffer[Long]\n        for\
    \ (i <- 1 until xs.length) {\n            ys += xs(i) * i\n        }\n       \
    \ ys.toList", "        var res = new ListBuffer[Long]\n        for (i <- 1 until\
    \ xs.length) {\n            res += i * xs(i)\n        }\n        res.toList",
  "        var result = List[Long]()\n        for (i <- 1 until xs.length) {\n   \
    \         result = result :+ (xs(i) * i)\n        }\n        return result", " \
    \       var ys = List[Long]()\n        for (i <- 1 until xs.length) {\n      \
    \      ys = ys :+ (i * xs(i))\n        }\n        ys", '        xs.zipWithIndex.map(x
    => x._1 * x._2).tail', "        var result = List[Long]()\n        for (i <- 1\
    \ until xs.length) {\n            result = result :+ xs(i) * i\n        }\n  \
    \      return result", "        var result = List[Long]()\n        for (i <- 1\
    \ until xs.length) {\n            result = result :+ (i * xs(i))\n        }\n\
    \        return result", "        val n = xs.length\n        if (n == 1) List(0l)\n\
    \        else {\n            val ys = new ListBuffer[Long]\n            for (i\
    \ <- 1 until n) ys += xs(i) * i\n            ys.toList\n        }", "        val\
    \ n = xs.length\n        val ys = new Array[Long](n - 1)\n        for (i <- 1\
    \ until n) ys(i - 1) = i * xs(i)\n        ys.toList", "        def loop(xs : List[Long],\
    \ i : Int, acc : List[Long]) : List[Long] = {\n            if (i == xs.length\
    \ - 1) acc\n            else loop(xs, i + 1, acc :+ xs(i + 1) * (i + 1))\n   \
    \     }\n        loop(xs, 0, List())", "        val ys = new ListBuffer[Long]\n\
    \        for (i <- 1 until xs.length) {\n            ys += i * xs(i)\n       \
    \ }\n        ys.toList", "        var ys = List[Long]()\n        for (i <- 1 until\
    \ xs.length) ys = ys :+ (i * xs(i))\n        ys", "        val ys = new ListBuffer[Long]\n\
    \        for (i <- 1 until xs.length) ys += xs(i) * i\n        ys.toList", " \
    \       var ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) {\n\
    \            ys += i * xs(i)\n        }\n        ys.toList", '        (for (i
    <- 1 until xs.length) yield xs(i) * i).toList', "        val n = xs.length\n \
    \       val result = new ListBuffer[Long]\n        for (i <- 1 until n) {\n  \
    \          result += xs(i) * i\n        }\n        result.toList", "        var\
    \ ys = List[Long]()\n        for (i <- 1 until xs.length) {\n            ys =\
    \ ys :+ (i * xs(i))\n        }\n        ys", "        val ys = new ListBuffer[Long]\n\
    \        for (i <- 1 until xs.length) {\n            ys += xs(i) * i\n       \
    \ }\n        ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n       \
    \ ys.toList", "        var result = List[Long]()\n        for (i <- 1 until xs.length)\
    \ {\n            result = result :+ xs(i) * i\n        }\n        return result",
  "        val ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) {\n\
    \            ys += i * xs(i)\n        }\n        ys.toList", "        var result\
    \ = List[Long]()\n        for (i <- 1 until xs.length) {\n            result =\
    \ result :+ (i * xs(i))\n        }\n        return result", "        val n = xs.length\n\
    \        val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i)\
    \ = (i + 1) * xs(i + 1)\n        ys.toList", '        xs.zipWithIndex.map(x =>
    x._1 * x._2).tail', "        var result = List[Long]()\n        for (i <- 1 until\
    \ xs.length) result = result :+ (i * xs(i))\n        return result", '        xs.zipWithIndex.map(x
    => x._1 * x._2).tail', "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 1 until n) {\n            ys(i - 1) = xs(i) * i\n  \
    \      }\n        ys.toList", '        xs.zipWithIndex.map(x => (x._1 * x._2).toLong).tail',
  "        var result = List[Long]()\n        for (i <- 1 until xs.length) {\n   \
    \         result = result :+ (i * xs(i))\n        }\n        return result", " \
    \       val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "    \
    \    var ys = List[Long]()\n        for (i <- 1 until xs.length) {\n         \
    \   ys = ys :+ (i * xs(i))\n        }\n        ys", "        val n = xs.length\n\
    \        val result = new ListBuffer[Long]\n        for (i <- 1 until n) {\n \
    \           result += i * xs(i)\n        }\n        result.toList", "        var\
    \ ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) ys += xs(i)\
    \ * i\n        ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i\
    \ + 1)\n        }\n        ys.toList", "        var result = List[Long]()\n  \
    \      for (i <- 1 until xs.length) {\n            result = result :+ (i * xs(i))\n\
    \        }\n        return result", "        val n = xs.length\n        val ys\
    \ = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) *\
    \ xs(i + 1)\n        ys.toList", "        var result = List[Long]()\n        for\
    \ (i <- 1 until xs.length) result = result :+ (i * xs(i))\n        return result",
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList", "    \
    \    var result = new ListBuffer[Long]\n        for (i <- 1 until xs.length) {\n\
    \            result += xs(i) * i\n        }\n        result.toList", "       \
    \ var result = List[Long]()\n        for (i <- 1 until xs.length) {\n        \
    \    result = result :+ (i * xs(i))\n        }\n        return result", '        xs.zipWithIndex.map(x
    => x._1 * x._2).tail', "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n       \
    \ ys.toList", "        def helper(xs : List[Long], acc : List[Long]) : List[Long]\
    \ = {\n            if (xs.length == 0) acc\n            else helper(xs.tail, acc\
    \ :+ xs.head * xs.length)\n        }\n        helper(xs.tail, List[Long]())",
  "        def helper(xs : List[Long], acc : List[Long]) : List[Long] = {\n      \
    \      if (xs.length == 0) acc\n            else helper(xs.tail, acc :+ xs.head\
    \ * xs.length)\n        }\n        helper(xs.tail, List[Long]())", '        xs.zipWithIndex.map(x
    => x._1 * x._2).tail', "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n       \
    \ ys.toList", "        val n = xs.length\n        val ys = new Array[Long](n -\
    \ 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n        ys.toList",
  "        val n = xs.length\n        val ys = new Array[Long](n - 1)\n        for\
    \ (i <- 0 until n - 1) {\n            ys(i) = (i + 1) * xs(i + 1)\n        }\n\
    \        ys.toList", "        var result = List[Long]()\n        for (i <- 1 until\
    \ xs.length) {\n            result = result :+ (i * xs(i))\n        }\n      \
    \  return result", "        var ys = List[Long]()\n        for (i <- 1 until xs.length)\
    \ {\n            ys = ys :+ (i * xs(i))\n        }\n        ys", "        var\
    \ result = List[Long]()\n        for (i <- 1 until xs.length) {\n            result\
    \ = result :+ (i * xs(i))\n        }\n        return result", "        var ys\
    \ = List[Long]()\n        for (i <- 1 until xs.length) {\n            ys = ys\
    \ :+ (i * xs(i))\n        }\n        ys", "        var result = List[Long]()\n\
    \        for (i <- 1 until xs.length) result = result :+ (i * xs(i))\n       \
    \ return result", "        val ys = new ListBuffer[Long]\n        for (i <- 1\
    \ until xs.length) {\n            ys += i * xs(i)\n        }\n        ys.toList",
  "        var result = List[Long]()\n        for (i <- 1 until xs.length) {\n   \
    \         result = result :+ (i * xs(i))\n        }\n        return result", '        xs.zipWithIndex.map(x
    => x._1 * x._2).tail', "        val ys = new ListBuffer[Long]\n        for (i\
    \ <- 1 until xs.length) ys += xs(i) * i\n        ys.toList", '        xs.zipWithIndex.map(x
    => x._1 * x._2).tail', "        val n = xs.length\n        val ys = new Array[Long](n\
    \ - 1)\n        for (i <- 0 until n - 1) ys(i) = (i + 1) * xs(i + 1)\n       \
    \ ys.toList", '        xs.zipWithIndex.map(x => x._1 * x._2).tail', "        val\
    \ n = xs.length\n        (1 to n - 1).map(i => xs(i) * i).toList", "        def\
    \ f(i : Int, xs : List[Long]) : List[Long] = {\n            if (i == xs.length\
    \ - 1) Nil\n            else xs(i + 1) * (i + 1) :: f(i + 1, xs)\n        }\n\
    \        f(0, xs)", "        var result = List[Long]()\n        for (i <- 1 until\
    \ xs.length) result ::= xs(i) * i\n        result.reverse", '        xs.zipWithIndex.map(x
    => x._1 * x._2).tail', "        if (xs.length == 1) List(0)\n        else (for\
    \ (i <- 1 until xs.length) yield i * xs(i)).toList", "        val n = xs.length\n\
    \        val ys = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) ys(i)\
    \ = (i + 1) * xs(i + 1)\n        ys.toList", "        var result = List[Long]()\n\
    \        for (i <- 1 until xs.length) {\n            result = result :+ (i * xs(i))\n\
    \        }\n        return result", "        val n = xs.length\n        val ys\
    \ = new Array[Long](n - 1)\n        for (i <- 0 until n - 1) {\n            ys(i)\
    \ = (i + 1) * xs(i + 1)\n        }\n        ys.toList", "        val n = xs.length\n\
    \        val ys = new Array[Long](n - 1)\n        for (i <- 1 until n) ys(i -\
    \ 1) = xs(i) * i\n        ys.toList", "        var result = List[Long]()\n   \
    \     for (i <- 1 until xs.length) {\n            result = result :+ xs(i) * i\n\
    \        }\n        return result", "        var result = List[Long]()\n     \
    \   for (i <- 1 until xs.length) {\n            result = result :+ xs(i) * i\n\
    \        }\n        return result", "        var result = new ListBuffer[Long]\n\
    \        for (i <- 1 until xs.length) {\n            result += xs(i) * i\n   \
    \     }\n        result.toList", "        if (xs.length == 1) List(0l)\n     \
    \   else {\n            val ys = new ListBuffer[Long]\n            for (i <- 1\
    \ until xs.length) ys += xs(i) * i\n            ys.toList\n        }", "     \
    \   val ys = new ListBuffer[Long]\n        for (i <- 1 until xs.length) ys +=\
    \ xs(i) * i\n        ys.toList", "        var result = List[Long]()\n        for\
    \ (i <- 1 until xs.length) {\n            result = result :+ xs(i) * i\n     \
    \   }\n        return result"]
stop_tokens:
- "\n    }\n"
