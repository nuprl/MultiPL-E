name: HumanEval_14_all_prefixes
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of all prefixes from shortest to longest of the input string\n\
  \    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\", \"abc\"\
  ))\n    def allPrefixes(string : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\"\
  )).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
  a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
  WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
completions: ["        var result = List[String]()\n        for (i <- 0 to string.length\
    \ - 1) {\n            result = result :+ string.substring(0, i + 1)\n        }\n\
    \        return result", "        var result = List[String]()\n        for (i\
    \ <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  var result = List[String]()\n        for (i <- 0 to string.length) {\n    \
    \        result = string.substring(0, i) :: result\n        }\n        return\
    \ result", "        if (string.length == 0) return List[String]()\n        if\
    \ (string.length == 1) return List[String](string)\n        val result = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length - 1) {\n            result += string.substring(0,\
    \ i + 1)\n        }\n        return result.toList", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = string.substring(0,\
    \ i) :: prefixes\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        val result = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length - 1) {\n            result += string.substring(0,\
    \ i + 1)\n        }\n        result.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) result = string.substring(0, i) :: result\n\
    \        result", "        var prefixes = List[String]()\n        for (i <- 0\
    \ to string.length - 1) {\n            prefixes = string.substring(0, i + 1) ::\
    \ prefixes\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 1 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = string.substring(0,\
    \ i) :: prefixes\n        }\n        return prefixes", "        if (string.length\
    \ == 0) List()\n        else {\n            val prefix = string.substring(0, string.length\
    \ - 1)\n            List(prefix) ++ allPrefixes(prefix)\n        }", "       \
    \ var prefixes = List[String]()\n        for (i <- 0 to string.length) {\n   \
    \         prefixes = prefixes :+ string.substring(0, i)\n        }\n        return\
    \ prefixes", "        var prefixes = List[String]()\n        for (i <- 0 to string.length)\
    \ {\n            prefixes = prefixes :+ string.substring(0, i)\n        }\n  \
    \      return prefixes", "        var prefixes = List[String]()\n        for (i\
    \ <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 1 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var prefixes = List[String]()\n\
    \        for (i <- 1 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 1 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 1 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        val prefixes = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length) {\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes.toList", "        val n = string.length\n  \
    \      val prefixes = new ListBuffer[String]\n        for (i <- 1 to n) prefixes\
    \ += string.substring(0, i)\n        prefixes.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  var prefixes = List[String]()\n        for (i <- 1 to string.length) {\n  \
    \          prefixes = prefixes :+ string.substring(0, i)\n        }\n        return\
    \ prefixes", "        var result = List[String]()\n        for (i <- 0 to string.length)\
    \ {\n            result = result :+ string.substring(0, i)\n        }\n      \
    \  return result", "        var result = List[String]()\n        for (i <- 0 to\
    \ string.length - 1) {\n            result = result :+ string.substring(0, i +\
    \ 1)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  var prefixes = List[String]()\n        for (i <- 0 to string.length) {\n  \
    \          prefixes = prefixes :+ string.substring(0, i)\n        }\n        return\
    \ prefixes", "        var prefixes = List[String]()\n        for (i <- 0 to string.length\
    \ - 1) {\n            prefixes = prefixes :+ string.substring(0, i + 1)\n    \
    \    }\n        return prefixes", "        var prefixes = List[String]()\n   \
    \     for (i <- 0 to string.length - 1) {\n            prefixes = prefixes :+\
    \ string.substring(0, i + 1)\n        }\n        return prefixes", "        var\
    \ result = List[String]()\n        for (i <- 0 to string.length - 1) {\n     \
    \       result = result :+ string.substring(0, i + 1)\n        }\n        return\
    \ result", "        var result = List[String]()\n        for (i <- 0 to string.length\
    \ - 1) {\n            result = result :+ string.substring(0, i + 1)\n        }\n\
    \        return result", "        var result = List[String]()\n        for (i\
    \ <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = string.substring(0,\
    \ i) :: prefixes\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 1 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var prefixes = new ListBuffer[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes += string.substring(0,\
    \ i)\n        }\n        return prefixes.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        def allPrefixesHelper(string\
    \ : String, prefixes : List[String]) : List[String] = {\n            if (string.length\
    \ == 0) prefixes\n            else allPrefixesHelper(string.substring(1), prefixes\
    \ :+ string.substring(0, string.length))\n        }\n        allPrefixesHelper(string,\
    \ List())", "        val prefixes = new ListBuffer[String]\n        for (i <-\
    \ 0 to string.length - 1) {\n            prefixes += string.substring(0, i + 1)\n\
    \        }\n        prefixes.toList", "        var result = List[String]()\n \
    \       for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = string.substring(0,\
    \ i + 1) :: prefixes\n        }\n        return prefixes", "        var result\
    \ = List[String]()\n        for (i <- 0 to string.length) {\n            result\
    \ = result :+ string.substring(0, i)\n        }\n        return result", "   \
    \     var prefixes = List[String]()\n        for (i <- 0 to string.length - 1)\
    \ {\n            prefixes = prefixes :+ string.substring(0, i + 1)\n        }\n\
    \        return prefixes", "        var result = List[String]()\n        for (i\
    \ <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  var result = List[String]()\n        for (i <- 0 to string.length - 1) {\n\
    \            result = result :+ string.substring(0, i + 1)\n        }\n      \
    \  return result", "        var result = List[String]()\n        for (i <- 0 to\
    \ string.length) {\n            result = result :+ string.substring(0, i)\n  \
    \      }\n        return result", "        var result = List[String]()\n     \
    \   for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var list = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            list = string.substring(0,\
    \ i) :: list\n        }\n        return list", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  var prefixes = List[String]()\n        for (i <- 0 to string.length - 1) {\n\
    \            prefixes = prefixes :+ string.substring(0, i + 1)\n        }\n  \
    \      return prefixes", "        var result = List[String]()\n        for (i\
    \ <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  var result = List[String]()\n        for (i <- 0 to string.length - 1) {\n\
    \            result = result :+ string.substring(0, i + 1)\n        }\n      \
    \  return result", "        var result = List[String]()\n        for (i <- 0 to\
    \ string.length) {\n            result = result :+ string.substring(0, i)\n  \
    \      }\n        return result", "        var prefixes = List[String]()\n   \
    \     for (i <- 0 to string.length - 1) {\n            prefixes = prefixes :+\
    \ string.substring(0, i + 1)\n        }\n        return prefixes", "        var\
    \ result = List[String]()\n        for (i <- 0 to string.length - 1) {\n     \
    \       result = result :+ string.substring(0, i + 1)\n        }\n        return\
    \ result", "        var prefixes = List[String]()\n        for (i <- 0 to string.length)\
    \ {\n            prefixes = prefixes :+ string.substring(0, i)\n        }\n  \
    \      return prefixes", "        var prefixes = List[String]()\n        for (i\
    \ <- 0 to string.length - 1) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i + 1)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  val prefixes = new ListBuffer[String]()\n        for (i <- 0 to string.length)\
    \ {\n            prefixes += string.substring(0, i)\n        }\n        prefixes.toList",
  "        var result = List[String]()\n        for (i <- 0 to string.length - 1)\
    \ {\n            result = result :+ string.substring(0, i + 1)\n        }\n  \
    \      return result", "        var result = List[String]()\n        for (i <-\
    \ 0 to string.length) {\n            result = result :+ string.substring(0, i)\n\
    \        }\n        return result", "        var result = List[String]()\n   \
    \     for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  var result = List[String]()\n        for (i <- 0 to string.length - 1) {\n\
    \            result = result :+ string.substring(0, i + 1)\n        }\n      \
    \  return result", "        var prefixes = List[String]()\n        for (i <- 0\
    \ to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 1 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        val l = string.length\n    \
    \    val prefixes = new ListBuffer[String]\n        for (i <- 1 to l) {\n    \
    \        prefixes += string.substring(0, i)\n        }\n        prefixes.toList",
  "        var result = List[String]()\n        for (i <- 0 to string.length - 1)\
    \ {\n            result = result :+ string.substring(0, i + 1)\n        }\n  \
    \      return result", "        var prefixes = List[String]()\n        for (i\
    \ <- 0 to string.length - 1) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i + 1)\n        }\n        return prefixes", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  var prefixes = List[String]()\n        for (i <- 0 to string.length) {\n  \
    \          prefixes = prefixes :+ string.substring(0, i)\n        }\n        return\
    \ prefixes", "        val l = string.length\n        val prefixes = new ListBuffer[String]\n\
    \        for (i <- 0 until l) {\n            prefixes += string.substring(0, i\
    \ + 1)\n        }\n        prefixes.toList", "        val result = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length - 1) {\n            result += string.substring(0,\
    \ i + 1)\n        }\n        result.toList", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  var result = List[String]()\n        for (i <- 0 to string.length) {\n    \
    \        result = result :+ string.substring(0, i)\n        }\n        return\
    \ result", "        var result = List[String]()\n        for (i <- 0 to string.length\
    \ - 1) {\n            result = result :+ string.substring(0, i + 1)\n        }\n\
    \        return result", "        var result = List[String]()\n        for (i\
    \ <- 1 to string.length) {\n            result = string.substring(0, i) :: result\n\
    \        }\n        return result", "        var result = List[String]()\n   \
    \     for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        val prefixes = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes += string.substring(0,\
    \ i + 1)\n        }\n        prefixes.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 1 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 1 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  var prefixes = List[String]()\n        for (i <- 0 to string.length) {\n  \
    \          prefixes = prefixes :+ string.substring(0, i)\n        }\n        return\
    \ prefixes", "        var result = List[String]()\n        for (i <- 0 to string.length)\
    \ {\n            result = result :+ string.substring(0, i)\n        }\n      \
    \  return result", "        var prefixes = List[String]()\n        for (i <- 0\
    \ to string.length - 1) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i + 1)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        val prefixes = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes += string.substring(0,\
    \ i + 1)\n        }\n        prefixes.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        val result = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length) result += string.substring(0, i)\n    \
    \    result.toList", "        var result = List[String]()\n        for (i <- 0\
    \ to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  var prefixes = List[String]()\n        for (i <- 0 to string.length) {\n  \
    \          prefixes = prefixes :+ string.substring(0, i)\n        }\n        return\
    \ prefixes", "        val n = string.length\n        (0 to n).map(i => string.substring(0,\
    \ i)).toList", "        var result = List[String]()\n        for (i <- 0 to string.length)\
    \ {\n            result = result :+ string.substring(0, i)\n        }\n      \
    \  return result", "        var result = List[String]()\n        for (i <- 0 to\
    \ string.length - 1) {\n            result = result :+ string.substring(0, i +\
    \ 1)\n        }\n        return result", "        val prefixes = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length) {\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        val prefixes = new ListBuffer[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        val result = ListBuffer[String]()\n\
    \        for (i <- 0 to string.length) {\n            result += string.substring(0,\
    \ i)\n        }\n        result.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 1 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        val result = new ListBuffer[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result += string.substring(0,\
    \ i + 1)\n        }\n        result.toList", "        if (string.length == 0)\
    \ List[String]()\n        else {\n            val prefixes = allPrefixes(string.substring(0,\
    \ string.length - 1))\n            prefixes :+ string\n        }", "        var\
    \ result = List[String]()\n        for (i <- 0 to string.length) {\n         \
    \   result = string.substring(0, i) :: result\n        }\n        return result",
  "        var prefixes = List[String]()\n        for (i <- 0 to string.length - 1)\
    \ {\n            prefixes = prefixes :+ string.substring(0, i + 1)\n        }\n\
    \        return prefixes", "        var result = List[String]()\n        for (i\
    \ <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        val result = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length) {\n            result += string.substring(0,\
    \ i)\n        }\n        result.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  var result = List[String]()\n        for (i <- 0 to string.length) {\n    \
    \        result = result :+ string.substring(0, i)\n        }\n        return\
    \ result", "        def allPrefixes(string : String, prefixes : List[String])\
    \ : List[String] = {\n            if (string.length == 0) prefixes\n         \
    \   else allPrefixes(string.substring(1), prefixes :+ string.substring(0, string.length))\n\
    \        }\n        allPrefixes(string, List[String]())", "        var result\
    \ = List[String]()\n        for (i <- 0 to string.length - 1) {\n            result\
    \ = result :+ string.substring(0, i + 1)\n        }\n        return result", " \
    \       var result = List[String]()\n        for (i <- 0 to string.length - 1)\
    \ {\n            result = result :+ string.substring(0, i + 1)\n        }\n  \
    \      return result", "        var result = List[String]()\n        for (i <-\
    \ 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        val prefixes = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length) {\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes.toList", "        var prefixes = List[String]()\n\
    \        for (i <- 1 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = string.substring(0,\
    \ i) :: result\n        }\n        return result", "        var list = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            list = list :+ string.substring(0,\
    \ i)\n        }\n        return list", "        val prefixes = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes += string.substring(0,\
    \ i + 1)\n        }\n        prefixes.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        val prefixes = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes += string.substring(0,\
    \ i + 1)\n        }\n        prefixes.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  var prefixes = List[String]()\n        for (i <- 0 to string.length) {\n  \
    \          prefixes = prefixes :+ string.substring(0, i)\n        }\n        return\
    \ prefixes", "        val prefixes = ListBuffer[String]()\n        for (i <- 0\
    \ to string.length - 1) {\n            prefixes += string.substring(0, i + 1)\n\
    \        }\n        prefixes.toList"]
stop_tokens:
- "\n    }\n"
