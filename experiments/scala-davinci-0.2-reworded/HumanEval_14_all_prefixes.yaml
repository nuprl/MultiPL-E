name: HumanEval_14_all_prefixes
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of all prefixes from shortest to longest of the input string\n\
  \    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\", \"abc\"\
  ))\n    def allPrefixes(string : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\"\
  )).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
  a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
  WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
completions: ["        var result = List[String]()\n        for (i <- 0 to string.length\
    \ - 1) {\n            result = result :+ string.substring(0, i + 1)\n        }\n\
    \        return result", "        var result = List[String]()\n        for (i\
    \ <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            prefixes = prefixes\
    \ :+ string.substring(0, i + 1)\n        }\n        return prefixes", "      \
    \  var result = List[String]()\n        for (i <- 0 to string.length) {\n    \
    \        result = string.substring(0, i) :: result\n        }\n        return\
    \ result", "        if (string.length == 0) return List[String]()\n        if\
    \ (string.length == 1) return List[String](string)\n        val result = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length - 1) {\n            result += string.substring(0,\
    \ i + 1)\n        }\n        return result.toList", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = string.substring(0,\
    \ i) :: prefixes\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var prefixes = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            prefixes = prefixes :+ string.substring(0,\
    \ i)\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length - 1) {\n            result = result :+ string.substring(0,\
    \ i + 1)\n        }\n        return result", "        val result = new ListBuffer[String]\n\
    \        for (i <- 0 to string.length - 1) {\n            result += string.substring(0,\
    \ i + 1)\n        }\n        result.toList", "        var result = List[String]()\n\
    \        for (i <- 0 to string.length) result = string.substring(0, i) :: result\n\
    \        result", "        var prefixes = List[String]()\n        for (i <- 0\
    \ to string.length - 1) {\n            prefixes = string.substring(0, i + 1) ::\
    \ prefixes\n        }\n        return prefixes", "        var result = List[String]()\n\
    \        for (i <- 1 to string.length) {\n            result = result :+ string.substring(0,\
    \ i)\n        }\n        return result"]
stop_tokens:
- "\n    }\n"
