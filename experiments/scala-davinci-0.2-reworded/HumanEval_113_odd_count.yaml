name: HumanEval_113_odd_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of strings, where each string consists of only digits, return\
  \ a list.\n    // Each element i of the output should be \"the number of odd elements\
  \ in the\n    // string i of the input.\" where all the i's should be replaced by\
  \ the number\n    // of odd digits in the i'th string of the input.\n    // >>>\
  \ oddCount((List[String](\"1234567\")))\n    // (List[String](\"the number of odd\
  \ elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
  3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the str1ng\
  \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
  ))\n    def oddCount(lst : List[String]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
  1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of\
  \ the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
  the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
  \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
  271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
  \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
  \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
  \    }\n\n}\n"
completions: ['        lst.map(x => "the number of odd elements " + x.filter(x =>
    x.toInt % 2 == 1).length + "n the str" + x.length + "ng " + x.length + " of the
    " + x.length + "nput.")', '        lst.map(x => "the number of odd elements "
    + x.count(_.asDigit % 2 == 1) + "n the str" + x.count(_.asDigit % 2 == 1) + "ng
    " + x.count(_.asDigit % 2 == 1) + " of the " + x.count(_.asDigit % 2 == 1) + "nput.")',
  "        lst.map(s => {\n            val count = s.filter(c => c.asDigit % 2 ==\
    \ 1).length\n            s.replaceAll(\"[0-9]\", \"\").replaceAll(\"i\", count.toString)\n\
    \        })", "        var result = List[String]()\n        for (str <- lst) {\n\
    \            var count = 0\n            for (c <- str) {\n                if (c.toInt\
    \ % 2 == 1) count += 1\n            }\n            result = result :+ \"the number\
    \ of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of\
    \ the \" + count + \"nput.\"\n        }\n        result", '        lst.map(x =>
    "the number of odd elements " + x.filter(y => y.toInt % 2 == 1).length + "n the
    str" + x.length + "ng " + x.length + " of the " + x.length + "nput.")', '        lst.map(x
    => x.filter(y => y.toInt % 2 == 1).length)', '        lst.map(x => "the number
    of odd elements " + x.count(_.asDigit % 2 == 1) + "n the str" + x.count(_.asDigit
    % 2 == 1) + "ng " + x.count(_.asDigit % 2 == 1) + " of the " + x.count(_.asDigit
    % 2 == 1) + "nput.")', '        lst.map(x => "the number of odd elements " + x.count(_.toInt
    % 2 == 1) + "n the str" + x.count(_.toInt % 2 == 1) + "ng " + x.count(_.toInt
    % 2 == 1) + " of the " + x.count(_.toInt % 2 == 1) + "nput.")', "        var result\
    \ = List[String]()\n        for (str <- lst) {\n            var count = 0\n  \
    \          for (c <- str) {\n                if (c.toInt % 2 == 1) count += 1\n\
    \            }\n            result = result :+ \"the number of odd elements \"\
    \ + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"\
    nput.\"\n        }\n        result", "        lst.map(s => s.filter(c => c.asDigit\
    \ % 2 == 1).length)\n            .map(n => s\"the number of odd elements ${n}n\
    \ the str${n}ng ${n} of the ${n}nput.\")", "        lst.map(s => {\n         \
    \   val count = s.filter(c => (c - '0') % 2 == 1).length\n            \"the number\
    \ of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of\
    \ the \" + count + \"nput.\"\n        })", '        lst.map(s => s.map(c => if
    (c % 2 == 1) 1 else 0).sum)', "        lst.map(str => {\n            val num =\
    \ str.filter(c => c.asDigit % 2 == 1).length\n            \"the number of odd\
    \ elements \" + num + \"n the str\" + num + \"ng \" + num + \" of the \" + num\
    \ + \"nput.\"\n        })", '        lst.map(x => x.count(c => c.asDigit % 2 ==
    1)).map(x => s"the number of odd elements ${x}n the str${x}ng ${x} of the ${x}nput.")',
  "        val sb = new StringBuilder\n        lst.map(s => {\n            var cnt\
    \ = 0\n            for (i <- 0 until s.length) {\n                if ((s(i) -\
    \ '0') % 2 == 1) cnt += 1\n            }\n            sb.clear\n            sb.append(\"\
    the number of odd elements \")\n            sb.append(cnt)\n            sb.append(\"\
    n the str\")\n            sb.append(cnt)\n            sb.append(\"ng \")\n   \
    \         sb.append(cnt)\n            sb.append(\" of the \")\n            sb.append(cnt)\n\
    \            sb.append(\"nput.\")\n            sb.toString\n        })", '        lst.map(x
    => x.count(y => y.asDigit % 2 == 1).toString).map(x => "the number of odd elements
    " + x + "n the str" + x + "ng " + x + " of the " + x + "nput.")', "        var\
    \ result = List[String]()\n        for (str <- lst) {\n            var count =\
    \ 0\n            for (ch <- str) {\n                if (ch.toInt % 2 == 1) count\
    \ += 1\n            }\n            result = result :+ \"the number of odd elements\
    \ \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count\
    \ + \"nput.\"\n        }\n        result", '        lst.map(s => s.count(c =>
    c.asDigit % 2 == 1)).map(i => s"the number of odd elements ${i}n the str${i}ng
    ${i} of the ${i}nput.")', "        var result = new ListBuffer[String]\n     \
    \   for (i <- 0 until lst.length) {\n            var count = 0\n            for\
    \ (j <- 0 until lst(i).length) {\n                if (lst(i)(j) % 2 == 1) count\
    \ += 1\n            }\n            result += \"the number of odd elements \" +\
    \ count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"\
    nput.\"\n        }\n        result.toList", "        var result = List[String]()\n\
    \        for (s <- lst) {\n            var count = 0\n            for (c <- s)\
    \ {\n                if (c.asDigit % 2 == 1) count += 1\n            }\n     \
    \       result = result :+ s\"the number of odd elements ${count}n the str${count}ng\
    \ ${count} of the ${count}nput.\"\n        }\n        result"]
stop_tokens:
- "\n    }\n"
