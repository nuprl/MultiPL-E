name: HumanEval_163_generate_integers
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given two positive integers a and b, return the even digits between a\n\
  \    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l),\
  \ (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n    //\
  \ >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong,\
  \ 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n\
  \    def generateIntegers(a : Long, b : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(generateIntegers((2l),\
  \ (10l)).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n  \
  \  assert(generateIntegers((10l), (2l)).equals((List[Long](2l.toLong, 4l.toLong,\
  \ 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((132l), (2l)).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(generateIntegers((17l), (89l)).equals((List[Long]())));\n\
  \    }\n\n}\n"
completions: ["        val min = min(a, b)\n        val max = max(a, b)\n        var\
    \ result = List[Long]()\n        for (i <- min to max) {\n            if (i %\
    \ 2 == 0) {\n                result = result :+ i\n            }\n        }\n\
    \        return result", "        var result = List[Long]()\n        for (i <-\
    \ a to b) {\n            if (i % 2 == 0) result = result :+ i\n        }\n   \
    \     result", "        var result = List[Long]()\n        val start = min(a,\
    \ b)\n        val end = max(a, b)\n        for (i <- start to end) {\n       \
    \     if (i % 2 == 0) result = result :+ i\n        }\n        result", "    \
    \    val min = min(a, b)\n        val max = max(a, b)\n        val result = new\
    \ ListBuffer[Long]\n        for (i <- min to max) {\n            if (i % 2 ==\
    \ 0) result += i\n        }\n        result.toList", "        var result = List[Long]()\n\
    \        var start = min(a, b)\n        var end = max(a, b)\n        while (start\
    \ <= end) {\n            if (start % 2 == 0) result = result :+ start\n      \
    \      start += 1\n        }\n        result", "        var result = List[Long]()\n\
    \        val (min, max) = if (a < b) (a, b) else (b, a)\n        for (i <- min\
    \ to max) {\n            if (i % 2 == 0) result = result :+ i\n        }\n   \
    \     result", "        var result = List[Long]()\n        val min = min(a, b)\n\
    \        val max = max(a, b)\n        for (i <- min to max) {\n            if\
    \ (i % 2 == 0) result = result :+ i\n        }\n        result", "        val\
    \ min = min(a, b)\n        val max = max(a, b)\n        val result = new ListBuffer[Long]\n\
    \        for (i <- min to max) {\n            if (i % 2 == 0) result += i\n  \
    \      }\n        result.toList", "        var result = List[Long]()\n       \
    \ for (i <- a to b) {\n            if (i % 2 == 0) {\n                result =\
    \ result :+ i\n            }\n        }\n        return result", "        var\
    \ result = List[Long]()\n        val min = min(a, b)\n        val max = max(a,\
    \ b)\n        for (i <- min to max) {\n            if (i % 2 == 0) result = result\
    \ :+ i\n        }\n        result", "        val min = min(a, b)\n        val\
    \ max = max(a, b)\n        val result = new ListBuffer[Long]\n        for (i <-\
    \ min to max) {\n            if (i % 2 == 0) result += i\n        }\n        result.toList",
  "        var result = List[Long]()\n        var start = min(a, b)\n        var end\
    \ = max(a, b)\n        while (start <= end) {\n            if (start % 2 == 0)\
    \ result = result :+ start\n            start += 1\n        }\n        result",
  "        var result = List[Long]()\n        for (i <- a to b) {\n            if\
    \ (i % 2 == 0) result = result :+ i\n        }\n        result", "        var\
    \ result = List[Long]()\n        var start = min(a, b)\n        var end = max(a,\
    \ b)\n        while (start <= end) {\n            if (start % 2 == 0) result =\
    \ result :+ start\n            start += 1\n        }\n        result", "     \
    \   var result = List[Long]()\n        var start = min(a, b)\n        var end\
    \ = max(a, b)\n        if (start % 2 != 0) start += 1\n        for (i <- start\
    \ to end by 2) {\n            result = result :+ i\n        }\n        return\
    \ result", "        var result = List[Long]()\n        val start = min(a, b)\n\
    \        val end = max(a, b)\n        for (i <- start to end) {\n            if\
    \ (i % 2 == 0) result = result :+ i\n        }\n        result", "        val\
    \ min = min(a, b)\n        val max = max(a, b)\n        val result = new ListBuffer[Long]\n\
    \        for (i <- min to max) {\n            if (i % 2 == 0) result += i\n  \
    \      }\n        result.toList", "        val min = min(a, b)\n        val max\
    \ = max(a, b)\n        val result = new ListBuffer[Long]\n        for (i <- min\
    \ to max) {\n            if (i % 2 == 0) result += i\n        }\n        result.toList",
  "        var result = List[Long]()\n        if (a > b) {\n            for (i <-\
    \ b to a) {\n                if (i % 2 == 0) result = result :+ i\n          \
    \  }\n        } else {\n            for (i <- a to b) {\n                if (i\
    \ % 2 == 0) result = result :+ i\n            }\n        }\n        result", " \
    \       var result = List[Long]()\n        for (i <- a to b) {\n            if\
    \ (i % 2 == 0) result = result :+ i\n        }\n        result"]
stop_tokens:
- "\n    }\n"
