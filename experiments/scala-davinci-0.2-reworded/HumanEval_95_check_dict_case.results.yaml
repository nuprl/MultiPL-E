language: scala
name: HumanEval_95_check_dict_case
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n            val upper = keys.filter(x => x.toUpperCase\
    \ == x)\n            if (lower.length == keys.length || upper.length == keys.length)\
    \ true\n            else false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgkd__bn2.scala:31)\n\tat Problem.main(tmpgkd__bn2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        var\
    \ lower = true\n        var upper = true\n        for ((k,v) <- dict) {\n    \
    \        if (k.toLowerCase() != k) lower = false\n            if (k.toUpperCase()\
    \ != k) upper = false\n        }\n        if (lower || upper) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl2xd4mx_.scala:31)\n\tat Problem.main(tmpl2xd4mx_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the implementation here\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase() != key) {\n                lower = false\n\
    \            }\n            if (key.toUpperCase() != key) {\n                upper\
    \ = false\n            }\n        }\n        return lower || upper\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7zefichp.scala:35)\n\tat Problem.main(tmp7zefichp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase() != key) {\n                lower = false\n\
    \            }\n            if (key.toUpperCase() != key) {\n                upper\
    \ = false\n            }\n        }\n        return lower || upper\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprnvzn03l.scala:35)\n\tat Problem.main(tmprnvzn03l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var lower = true\n        var upper\
    \ = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase !=\
    \ key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx9rzzw32.scala:30)\n\tat Problem.main(tmpx9rzzw32.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        var\
    \ lower = true\n        var upper = true\n        for (key <- dict.keys) {\n \
    \           if (key.toLowerCase != key) {\n                lower = false\n   \
    \         }\n            if (key.toUpperCase != key) {\n                upper\
    \ = false\n            }\n        }\n        return lower || upper\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcprjzg_n.scala:35)\n\tat Problem.main(tmpcprjzg_n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // TODO: Implement this function\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprpwjz5pd.scala:23)\n\tat Problem.main(tmprpwjz5pd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var lower = true\n        var upper\
    \ = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase !=\
    \ key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx9rzzw32.scala:30)\n\tat Problem.main(tmpx9rzzw32.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        var\
    \ lower = true\n        var upper = true\n        for (key <- dict.keys) {\n \
    \           if (key.toLowerCase() != key) {\n                lower = false\n \
    \           }\n            if (key.toUpperCase() != key) {\n                upper\
    \ = false\n            }\n        }\n        return lower || upper\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe0yu11wv.scala:35)\n\tat Problem.main(tmpe0yu11wv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n            val upper = keys.filter(x => x.toUpperCase\
    \ == x)\n            if (lower.length == keys.length || upper.length == keys.length)\
    \ true\n            else false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgkd__bn2.scala:31)\n\tat Problem.main(tmpgkd__bn2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var lower = true\n        var upper\
    \ = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase !=\
    \ key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx9rzzw32.scala:30)\n\tat Problem.main(tmpx9rzzw32.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var lower = true\n        var upper\
    \ = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase !=\
    \ key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqb_3pr13.scala:30)\n\tat Problem.main(tmpqb_3pr13.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        if\
    \ (lower || upper) return true\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm2ddhllo.scala:29)\n\tat Problem.main(tmpm2ddhllo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n            val upper = keys.filter(x => x.toUpperCase\
    \ == x)\n            if (lower.length == keys.length || upper.length == keys.length)\
    \ true\n            else false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgkd__bn2.scala:31)\n\tat Problem.main(tmpgkd__bn2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.keys.forall(x => x.toLowerCase\
    \ == x || x.toUpperCase == x)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjkahz7b6.scala:23)\n\tat Problem.main(tmpjkahz7b6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        lower\
    \ || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx2kigz0l.scala:28)\n\tat Problem.main(tmpx2kigz0l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for ((k,v) <- dict) {\n\
    \            if (k.toLowerCase() != k) lower = false\n            if (k.toUpperCase()\
    \ != k) upper = false\n        }\n        return lower || upper\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_lsj02rg.scala:31)\n\tat Problem.main(tmp_lsj02rg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for (k <- dict.keys)\
    \ {\n            if (!k.toLowerCase.equals(k)) lower = false\n            if (!k.toUpperCase.equals(k))\
    \ upper = false\n        }\n        lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf6rqf2zy.scala:31)\n\tat Problem.main(tmpf6rqf2zy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdw6pgxdb.scala:35)\n\tat Problem.main(tmpdw6pgxdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        if (lower || upper) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp38tcf59j.scala:31)\n\tat Problem.main(tmp38tcf59j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.keys.forall(x => x.toLowerCase\
    \ == x) || dict.keys.forall(x => x.toUpperCase == x)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7swfmysr.scala:24)\n\tat Problem.main(tmp7swfmysr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw7ivah9j.scala:23)\n\tat Problem.main(tmpw7ivah9j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lowerKeys\
    \ = keys.filter(x => x == x.toLowerCase)\n            val upperKeys = keys.filter(x\
    \ => x == x.toUpperCase)\n            if (lowerKeys.size == keys.size || upperKeys.size\
    \ == keys.size) true\n            else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp86ow9co3.scala:31)\n\tat Problem.main(tmp86ow9co3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        var isUpper = dict.keys.head.toUpperCase == dict.keys.head\n        for\
    \ (key <- dict.keys) {\n            if (isUpper) {\n                if (key.toUpperCase\
    \ != key) return false\n            } else {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        }\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnmlmz7v8.scala:33)\n\tat Problem.main(tmpnmlmz7v8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        return lower || upper\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdikpcffy.scala:31)\n\tat Problem.main(tmpdikpcffy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyLower\
    \ = firstKey.toLowerCase\n        val firstKeyUpper = firstKey.toUpperCase\n \
    \       if (firstKeyLower == firstKeyUpper) return false\n        if (keys.forall(key\
    \ => key.toLowerCase == firstKeyLower)) return true\n        if (keys.forall(key\
    \ => key.toUpperCase == firstKeyUpper)) return true\n        return false\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7hudlr6p.scala:30)\n\tat Problem.main(tmp7hudlr6p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8awbtbnk.scala:35)\n\tat Problem.main(tmp8awbtbnk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var flag = true\n        var flag1 = true\n        var flag2 = true\n   \
    \     if(dict.isEmpty)\n            flag = false\n        else{\n            dict.keys.foreach(x\
    \ => if(x.toUpperCase() != x) flag1 = false)\n            dict.keys.foreach(x\
    \ => if(x.toLowerCase() != x) flag2 = false)\n            if(flag1 && flag2)\n\
    \                flag = false\n        }\n        flag\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvppkvliz.scala:35)\n\tat Problem.main(tmpvppkvliz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799871
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        lower\
    \ || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphnf16ngq.scala:28)\n\tat Problem.main(tmphnf16ngq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var lower\
    \ = true\n        var upper = true\n        for(key <- dict.keys) {\n        \
    \    if(key.toLowerCase() != key) {\n                lower = false\n         \
    \   }\n            if(key.toUpperCase() != key) {\n                upper = false\n\
    \            }\n        }\n        if(lower || upper) {\n            return true\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3366rqhj.scala:39)\n\tat Problem.main(tmp3366rqhj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        var isLower = dict.head._1.toLowerCase == dict.head._1\n        dict.forall(x\
    \ => (isLower && x._1.toLowerCase == x._1) || (!isLower && x._1.toUpperCase ==\
    \ x._1))\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpikjbvpwp.scala:26)\n\tat Problem.main(tmpikjbvpwp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var lower = true\n        var upper\
    \ = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase !=\
    \ key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx9rzzw32.scala:30)\n\tat Problem.main(tmpx9rzzw32.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // TODO: Implement this function\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0fh980as.scala:24)\n\tat Problem.main(tmp0fh980as.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdw6pgxdb.scala:35)\n\tat Problem.main(tmpdw6pgxdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val lower = dict.keys.forall(_.toLowerCase\
    \ == _)\n        val upper = dict.keys.forall(_.toUpperCase == _)\n        if\
    \ (lower || upper) true else false\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp_urqla7j.scala:19:37 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlower\e[0m = dict.keys.forall(_.toLowerCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp_urqla7j.scala:20:37\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mupper\e[0m = dict.keys.forall(_.toUpperCase == _)\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Wrong number of parameters, expected: 1\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwsvtf1b.scala:36)\n\tat Problem.main(tmpxwsvtf1b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val firstKey = dict.keys.head\n            if (firstKey.toLowerCase\
    \ == firstKey) {\n                dict.keys.forall(x => x.toLowerCase == x)\n\
    \            } else if (firstKey.toUpperCase == firstKey) {\n                dict.keys.forall(x\
    \ => x.toUpperCase == x)\n            } else false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqislwqie.scala:32)\n\tat Problem.main(tmpqislwqie.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            keys.forall(key => key.toLowerCase == key)\n   \
    \     } else {\n            keys.forall(key => key.toUpperCase == key)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwgm8ws6o.scala:31)\n\tat Problem.main(tmpwgm8ws6o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799871
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyztmpxpz.scala:28)\n\tat Problem.main(tmpyztmpxpz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799871
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase() != key) {\n                lower = false\n\
    \            }\n            if (key.toUpperCase() != key) {\n                upper\
    \ = false\n            }\n        }\n        return lower || upper\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprnvzn03l.scala:35)\n\tat Problem.main(tmprnvzn03l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var lower = true\n        var upper\
    \ = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase !=\
    \ key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx9rzzw32.scala:30)\n\tat Problem.main(tmpx9rzzw32.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill Up this function body\n\
    \        // `dict` is a map of type Map[String,String]\n        // `dict.keys`\
    \ is a collection of type Iterable[String]\n        // `dict.keys.map(x => x.toLowerCase)`\
    \ is a collection of type Iterable[String]\n        // `dict.keys.map(x => x.toLowerCase).toSet`\
    \ is a set of type Set[String]\n        // `dict.keys.map(x => x.toLowerCase).toSet.size`\
    \ is an integer\n        // `dict.keys.map(x => x.toUpperCase).toSet.size` is\
    \ an integer\n        // `dict.keys.map(x => x.toLowerCase).toSet.size == 1` is\
    \ a boolean\n        // `dict.keys.map(x => x.toUpperCase).toSet.size == 1` is\
    \ a boolean\n        // `dict.keys.map(x => x.toLowerCase).toSet.size == 1 ||\
    \ dict.keys.map(x => x.toUpperCase).toSet.size == 1` is a boolean\n        //\
    \ `dict.keys.map(x => x.toLowerCase).toSet.size == 1 || dict.keys.map(x => x.toUpperCase).toSet.size\
    \ == 1 && dict.size > 0` is a boolean\n        dict.keys.map(x => x.toLowerCase).toSet.size\
    \ == 1 || dict.keys.map(x => x.toUpperCase).toSet.size == 1 && dict.size > 0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn1grw247.scala:33)\n\tat Problem.main(tmpn1grw247.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799871
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val firstKey = keys.head\n     \
    \   val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     keys.forall(key => key.toLowerCase == key)\n        } else if (firstKeyIsUpper)\
    \ {\n            keys.forall(key => key.toUpperCase == key)\n        } else {\n\
    \            false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplbiytlsd.scala:35)\n\tat Problem.main(tmplbiytlsd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) {\n                lower = false\n\
    \            }\n            if (key.toUpperCase != key) {\n                upper\
    \ = false\n            }\n        }\n        if (lower || upper) {\n         \
    \   return true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0fcv89q4.scala:38)\n\tat Problem.main(tmp0fcv89q4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        return lower || upper\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo5bgayny.scala:31)\n\tat Problem.main(tmpo5bgayny.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        if (firstKeyIsUpper) {\n            keys.forall(key =>\
    \ key.toUpperCase == key)\n        } else if (firstKeyIsLower) {\n           \
    \ keys.forall(key => key.toLowerCase == key)\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiy_fwnwr.scala:35)\n\tat Problem.main(tmpiy_fwnwr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ firstIsLower = first.toLowerCase == first\n        val firstIsUpper = first.toUpperCase\
    \ == first\n        if (firstIsLower) {\n            keys.forall(k => k.toLowerCase\
    \ == k)\n        } else if (firstIsUpper) {\n            keys.forall(k => k.toUpperCase\
    \ == k)\n        } else {\n            false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppk5lpkfb.scala:35)\n\tat Problem.main(tmppk5lpkfb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        var\
    \ lower = true\n        var upper = true\n        for(key <- dict.keys) {\n  \
    \          if (key.toLowerCase() != key) lower = false\n            if (key.toUpperCase()\
    \ != key) upper = false\n        }\n        lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp31yezu1h.scala:31)\n\tat Problem.main(tmp31yezu1h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799871
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // TODO: Implement this function\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprpwjz5pd.scala:23)\n\tat Problem.main(tmprpwjz5pd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lowerCaseKeys\
    \ = keys.filter(x => x.toLowerCase == x)\n            val upperCaseKeys = keys.filter(x\
    \ => x.toUpperCase == x)\n            if (lowerCaseKeys.length == keys.length\
    \ || upperCaseKeys.length == keys.length) true\n            else false\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz2gei9w.scala:31)\n\tat Problem.main(tmppz2gei9w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lowerCase = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upperCase = keys.filter(x => x.toUpperCase == x)\n      \
    \  if (lowerCase.size == keys.size || upperCase.size == keys.size) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3c3o_z6n.scala:28)\n\tat Problem.main(tmp3c3o_z6n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for (i <- dict.keys)\
    \ {\n            if (i.toLowerCase() != i) {\n                lower = false\n\
    \            }\n            if (i.toUpperCase() != i) {\n                upper\
    \ = false\n            }\n        }\n        return lower || upper\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4qw4rs37.scala:35)\n\tat Problem.main(tmp4qw4rs37.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5u7mwyse.scala:24)\n\tat Problem.main(tmp5u7mwyse.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799871
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here.\n   \
    \     var lower = true\n        var upper = true\n        for ((k,v) <- dict)\
    \ {\n            if (k.toLowerCase != k) lower = false\n            if (k.toUpperCase\
    \ != k) upper = false\n        }\n        lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpatdr89vt.scala:31)\n\tat Problem.main(tmpatdr89vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799871
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lower = keys.forall(x\
    \ => x.toLowerCase == x)\n            val upper = keys.forall(x => x.toUpperCase\
    \ == x)\n            lower || upper\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpapacoejt.scala:30)\n\tat Problem.main(tmpapacoejt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstChar\
    \ = firstKey.charAt(0)\n        val isUpper = firstChar.isUpper\n        val isLower\
    \ = firstChar.isLower\n        if (isUpper || isLower) {\n            val isValid\
    \ = keys.forall(key => key.forall(c => c.isUpper == isUpper))\n            isValid\n\
    \        } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0430fa6h.scala:35)\n\tat Problem.main(tmp0430fa6h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        return lower || upper\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo5bgayny.scala:31)\n\tat Problem.main(tmpo5bgayny.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkq2crgdj.scala:23)\n\tat Problem.main(tmpkq2crgdj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lower = keys.forall(x\
    \ => x.toLowerCase == x)\n            val upper = keys.forall(x => x.toUpperCase\
    \ == x)\n            lower || upper\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpapacoejt.scala:30)\n\tat Problem.main(tmpapacoejt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcaqnwqm3.scala:24)\n\tat Problem.main(tmpcaqnwqm3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var lower = true\n        var upper\
    \ = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase !=\
    \ key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqb_3pr13.scala:30)\n\tat Problem.main(tmpqb_3pr13.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for ((k,v) <- dict) {\n\
    \            if (!k.toLowerCase.equals(k)) lower = false\n            if (!k.toUpperCase.equals(k))\
    \ upper = false\n        }\n        lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkhf1rpz7.scala:31)\n\tat Problem.main(tmpkhf1rpz7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        if (dict.isEmpty)\
    \ {\n            return false\n        }\n        val keys = dict.keys\n     \
    \   val lower = keys.filter(x => x.toLowerCase == x)\n        val upper = keys.filter(x\
    \ => x.toUpperCase == x)\n        if (lower.size == keys.size || upper.size ==\
    \ keys.size) {\n            return true\n        }\n        return false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpav_cd0ws.scala:34)\n\tat Problem.main(tmpav_cd0ws.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    dict.keys.forall(x => x.toUpperCase == x || x.toLowerCase == x)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphj73ixqo.scala:24)\n\tat Problem.main(tmphj73ixqo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val firstKey\
    \ = keys.head\n            if (firstKey.forall(_.isUpper)) {\n               \
    \ if (keys.forall(_.forall(_.isUpper))) true\n                else false\n   \
    \         }\n            else if (firstKey.forall(_.isLower)) {\n            \
    \    if (keys.forall(_.forall(_.isLower))) true\n                else false\n\
    \            }\n            else false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys\n            val firstKey = keys.head\n\
    \            val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        \
    \    val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n            if (firstKeyIsLower)\
    \ {\n                keys.forall(key => key.toLowerCase == key)\n            }\
    \ else if (firstKeyIsUpper) {\n                keys.forall(key => key.toUpperCase\
    \ == key)\n            } else {\n                false\n            }\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpffh3zcu5.scala:37)\n\tat Problem.main(tmpffh3zcu5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        if\
    \ (first.toLowerCase == first) {\n            for (key <- keys) {\n          \
    \      if (key.toLowerCase != key) return false\n            }\n        } else\
    \ if (first.toUpperCase == first) {\n            for (key <- keys) {\n       \
    \         if (key.toUpperCase != key) return false\n            }\n        } else\
    \ {\n            return false\n        }\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqqwy7yv8.scala:38)\n\tat Problem.main(tmpqqwy7yv8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        var\
    \ lower = true\n        var upper = true\n        for ((k,v) <- dict) {\n    \
    \        if (k.toLowerCase() != k) {\n                lower = false\n        \
    \    }\n            if (k.toUpperCase() != k) {\n                upper = false\n\
    \            }\n        }\n        return lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3j1o40ma.scala:35)\n\tat Problem.main(tmp3j1o40ma.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5u7mwyse.scala:24)\n\tat Problem.main(tmp5u7mwyse.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799871
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // TODO: Implement this function\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprpwjz5pd.scala:23)\n\tat Problem.main(tmprpwjz5pd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var lower = true\n        var upper\
    \ = true\n        for (k <- dict.keys) {\n            lower = lower && k.toLowerCase\
    \ == k\n            upper = upper && k.toUpperCase == k\n        }\n        lower\
    \ || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9tszehka.scala:30)\n\tat Problem.main(tmp9tszehka.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase() != key) lower = false\n            if (key.toUpperCase()\
    \ != key) upper = false\n        }\n        lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6blvzhuf.scala:31)\n\tat Problem.main(tmp6blvzhuf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lower = keys.forall(x\
    \ => x.toLowerCase == x)\n            val upper = keys.forall(x => x.toUpperCase\
    \ == x)\n            lower || upper\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpapacoejt.scala:30)\n\tat Problem.main(tmpapacoejt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) {\n         \
    \   false\n        } else {\n            val keys = dict.keys.toList\n       \
    \     val lowerCaseKeys = keys.filter(key => key.toLowerCase == key)\n       \
    \     val upperCaseKeys = keys.filter(key => key.toUpperCase == key)\n       \
    \     if (lowerCaseKeys.length == keys.length || upperCaseKeys.length == keys.length)\
    \ {\n                true\n            } else {\n                false\n     \
    \       }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpooiyt220.scala:35)\n\tat Problem.main(tmpooiyt220.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw7ivah9j.scala:23)\n\tat Problem.main(tmpw7ivah9j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val firstKey = dict.keys.head\n        if (firstKey.toLowerCase == firstKey)\
    \ {\n            dict.keys.forall(key => key.toLowerCase == key)\n        } else\
    \ {\n            dict.keys.forall(key => key.toUpperCase == key)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuz_48sga.scala:30)\n\tat Problem.main(tmpuz_48sga.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val isUpper\
    \ = firstKey.toUpperCase == firstKey\n        val isLower = firstKey.toLowerCase\
    \ == firstKey\n        if (isUpper) {\n            keys.forall(key => key.toUpperCase\
    \ == key)\n        } else if (isLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else {\n            false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpidx2xgis.scala:35)\n\tat Problem.main(tmpidx2xgis.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val firstKey = keys(0)\n       \
    \ val firstKeyIsLower = firstKey == firstKey.toLowerCase\n        val allKeysAreLower\
    \ = keys.forall(key => key == key.toLowerCase)\n        val allKeysAreUpper =\
    \ keys.forall(key => key == key.toUpperCase)\n        if (firstKeyIsLower) allKeysAreLower\
    \ else allKeysAreUpper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsd0t4vea.scala:30)\n\tat Problem.main(tmpsd0t4vea.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        dict.keys.forall(_.toLowerCase\
    \ == _) || dict.keys.forall(_.toUpperCase == _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpwquxxcg9.scala:20:25 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        dict.keys.forall(_.toLowerCase == _) || dict.keys.forall(_.toUpperCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpwquxxcg9.scala:20:65 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        dict.keys.forall(_.toLowerCase == _) || dict.keys.forall(_.toUpperCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                               \
    \                  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Wrong number of parameters, expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1659799878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        if\
    \ (first.toLowerCase == first) {\n            keys.forall(x => x.toLowerCase ==\
    \ x)\n        } else {\n            keys.forall(x => x.toUpperCase == x)\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqoa47z5y.scala:31)\n\tat Problem.main(tmpqoa47z5y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val lower = dict.keys.forall(x => x.toLowerCase == x)\n        val upper\
    \ = dict.keys.forall(x => x.toUpperCase == x)\n        lower || upper\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9wfcj19m.scala:27)\n\tat Problem.main(tmp9wfcj19m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    dict.keys.forall(x => x.toUpperCase == x || x.toLowerCase == x)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphj73ixqo.scala:24)\n\tat Problem.main(tmphj73ixqo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for ((k,v) <- dict) {\n\
    \            if (k.toLowerCase != k) lower = false\n            if (k.toUpperCase\
    \ != k) upper = false\n        }\n        return lower || upper\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfpu3by0x.scala:31)\n\tat Problem.main(tmpfpu3by0x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgsqnd0k4.scala:31)\n\tat Problem.main(tmpgsqnd0k4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n            val upper = keys.filter(x => x.toUpperCase\
    \ == x)\n            if (lower.length == keys.length || upper.length == keys.length)\
    \ true\n            else false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgkd__bn2.scala:31)\n\tat Problem.main(tmpgkd__bn2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys\n            val lowerCaseKeys =\
    \ keys.filter(x => x.toLowerCase == x)\n            val upperCaseKeys = keys.filter(x\
    \ => x.toUpperCase == x)\n            if (lowerCaseKeys.size == keys.size || upperCaseKeys.size\
    \ == keys.size) true\n            else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnfel0ywz.scala:31)\n\tat Problem.main(tmpnfel0ywz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == 0 || upper.size == 0) return false\n        return true\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1_9wjyna.scala:27)\n\tat Problem.main(tmp1_9wjyna.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val firstKey = keys.head\n     \
    \   if (firstKey.toLowerCase == firstKey) {\n            keys.forall(k => k.toLowerCase\
    \ == k)\n        } else {\n            keys.forall(k => k.toUpperCase == k)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcte5ju4q.scala:31)\n\tat Problem.main(tmpcte5ju4q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // TODO: Implement this function\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprpwjz5pd.scala:23)\n\tat Problem.main(tmprpwjz5pd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for (k <- dict.keys)\
    \ {\n            if (k.toLowerCase() != k) lower = false\n            if (k.toUpperCase()\
    \ != k) upper = false\n        }\n        lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz11srkru.scala:31)\n\tat Problem.main(tmpz11srkru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799893
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your Code Here\n        false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpix6hhrbv.scala:23)\n\tat Problem.main(tmpix6hhrbv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799893
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val firstKey = keys.head\n     \
    \   if (firstKey.forall(_.isLower)) {\n            keys.forall(_.forall(_.isLower))\n\
    \        } else if (firstKey.forall(_.isUpper)) {\n            keys.forall(_.forall(_.isUpper))\n\
    \        } else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            var lower = true\n            var upper = true\n     \
    \       for (key <- dict.keys) {\n                if (key.toLowerCase != key)\
    \ lower = false\n                if (key.toUpperCase != key) upper = false\n \
    \           }\n            lower || upper\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnd5jzcsf.scala:33)\n\tat Problem.main(tmpnd5jzcsf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799893
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val firstKey = keys.head\n     \
    \   val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     keys.forall(key => key.toLowerCase == key)\n        } else if (firstKeyIsUpper)\
    \ {\n            keys.forall(key => key.toUpperCase == key)\n        } else {\n\
    \            false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplbiytlsd.scala:35)\n\tat Problem.main(tmplbiytlsd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // TODO: Implement this function\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprpwjz5pd.scala:23)\n\tat Problem.main(tmprpwjz5pd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    if (dict.isEmpty) false\n        else {\n            val keys = dict.keys.toList\n\
    \            val lower = keys.filter(x => x.toLowerCase == x)\n            val\
    \ upper = keys.filter(x => x.toUpperCase == x)\n            if (lower.size ==\
    \ keys.size || upper.size == keys.size) true\n            else false\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjohgyzka.scala:32)\n\tat Problem.main(tmpjohgyzka.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799893
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val lower = dict.keys.forall(_.toLowerCase == _)\n        val upper =\
    \ dict.keys.forall(_.toUpperCase == _)\n        lower || upper\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpltuqolwh.scala:20:37 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlower\e[0m = dict.keys.forall(_.toLowerCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpltuqolwh.scala:21:37\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mupper\e[0m = dict.keys.forall(_.toUpperCase == _)\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Wrong number of parameters, expected: 1\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // TODO: Implement this function\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprpwjz5pd.scala:23)\n\tat Problem.main(tmprpwjz5pd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        var\
    \ lower = true\n        var upper = true\n        for(key <- dict.keys) {\n  \
    \          if(key.toLowerCase() != key) lower = false\n            if(key.toUpperCase()\
    \ != key) upper = false\n        }\n        lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdhl3w8l1.scala:31)\n\tat Problem.main(tmpdhl3w8l1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799893
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var lower = true\n        var upper\
    \ = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase !=\
    \ key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx9rzzw32.scala:30)\n\tat Problem.main(tmpx9rzzw32.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdw6pgxdb.scala:35)\n\tat Problem.main(tmpdw6pgxdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for ((k,v) <- dict) {\n\
    \            if (k.toLowerCase() != k) lower = false\n            if (k.toUpperCase()\
    \ != k) upper = false\n        }\n        lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpksvh3jep.scala:31)\n\tat Problem.main(tmpksvh3jep.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799893
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val firstKey = keys.head\n     \
    \   val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        if (!firstKeyIsUpper && !firstKeyIsLower)\
    \ return false\n        val allKeysAreUpper = keys.forall(key => key.toUpperCase\
    \ == key)\n        val allKeysAreLower = keys.forall(key => key.toLowerCase ==\
    \ key)\n        return allKeysAreUpper || allKeysAreLower\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_n6pu7g.scala:32)\n\tat Problem.main(tmp8_n6pu7g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799893
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        var\
    \ lower = true\n        var upper = true\n        for (key <- dict.keys) {\n \
    \           if (key.toLowerCase() != key) {\n                lower = false\n \
    \           }\n            if (key.toUpperCase() != key) {\n                upper\
    \ = false\n            }\n        }\n        return lower || upper\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe0yu11wv.scala:35)\n\tat Problem.main(tmpe0yu11wv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyUpper\
    \ = firstKey.toUpperCase\n        val firstKeyLower = firstKey.toLowerCase\n \
    \       if (firstKey == firstKeyUpper) {\n            for (key <- keys) {\n  \
    \              if (key != key.toUpperCase) return false\n            }\n     \
    \   } else if (firstKey == firstKeyLower) {\n            for (key <- keys) {\n\
    \                if (key != key.toLowerCase) return false\n            }\n   \
    \     } else {\n            return false\n        }\n        return true\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvfvkhn0.scala:40)\n\tat Problem.main(tmpqvfvkhn0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lowerCase\
    \ = keys.forall(x => x.toLowerCase == x)\n            val upperCase = keys.forall(x\
    \ => x.toUpperCase == x)\n            lowerCase || upperCase\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplw6mhuaj.scala:30)\n\tat Problem.main(tmplw6mhuaj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799893
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        var\
    \ lower = true\n        var upper = true\n        for (key <- dict.keys) {\n \
    \           if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpewk5h_3j.scala:31)\n\tat Problem.main(tmpewk5h_3j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val keys = dict.keys.toList\n        val firstKey = keys(0)\n       \
    \ val firstKeyUpper = firstKey.toUpperCase\n        val firstKeyLower = firstKey.toLowerCase\n\
    \        if (firstKey == firstKeyUpper) {\n            keys.forall(key => key\
    \ == key.toUpperCase)\n        } else if (firstKey == firstKeyLower) {\n     \
    \       keys.forall(key => key == key.toLowerCase)\n        } else {\n       \
    \     false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcxviwqvv.scala:35)\n\tat Problem.main(tmpcxviwqvv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799893
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        var upper = true\n        var lower = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toUpperCase != key) upper = false\n            if (key.toLowerCase\
    \ != key) lower = false\n        }\n        upper || lower\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy6a19xnt.scala:31)\n\tat Problem.main(tmpy6a19xnt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799893
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        dict.isEmpty\
    \ match {\n            case true => false\n            case false => dict.keys.forall(x\
    \ => x.toLowerCase == x || x.toUpperCase == x)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn26qujg3.scala:27)\n\tat Problem.main(tmpn26qujg3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill Up this function body\n\
    \        // `dict` is a map of type Map[String,String]\n        // `dict.keys`\
    \ is a collection of type Iterable[String]\n        // `dict.keys.toList` is a\
    \ collection of type List[String]\n        // `dict.keys.toList.head` is a String\n\
    \        // `dict.keys.toList.head.toLowerCase` is a String\n        // `dict.keys.toList.head.toUpperCase`\
    \ is a String\n        // `dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase`\
    \ is a Boolean\n        // `dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase\
    \ && dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase` is\
    \ a Boolean\n        // `dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase\
    \ && dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase &&\
    \ dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase` is a\
    \ Boolean\n        // `dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase\
    \ && dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase &&\
    \ dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase && dict.keys.toList.head.toLowerCase\
    \ == dict.keys.toList.head.toUpperCase` is a Boolean\n        // `dict.keys.toList.head.toLowerCase\
    \ == dict.keys.toList.head.toUpperCase && dict.keys.toList.head.toLowerCase ==\
    \ dict.keys.toList.head.toUpperCase && dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase\
    \ && dict.keys.toList.head.\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"\
    banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" ->\
    \ \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
    banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5_p68ixg.scala:18:61\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mcheckDictCase\e\
    [0m(\e[36mdict\e[0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mString\e[0m]) : \e\
    [35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m                                  \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                             Found:    Unit\n\e[31m   |\e[0m                \
    \                                       Required: Boolean\n\e[31m19 |\e[0m   \
    \     \e[34m// Fill Up this function body\e[0m\n\e[31m20 |\e[0m        \e[34m//\
    \ `dict` is a map of type Map[String,String]\e[0m\n\e[31m21 |\e[0m        \e[34m//\
    \ `dict.keys` is a collection of type Iterable[String]\e[0m\n\e[31m22 |\e[0m \
    \       \e[34m// `dict.keys.toList` is a collection of type List[String]\e[0m\n\
    \e[31m23 |\e[0m        \e[34m// `dict.keys.toList.head` is a String\e[0m\n\e[31m24\
    \ |\e[0m        \e[34m// `dict.keys.toList.head.toLowerCase` is a String\e[0m\n\
    \e[31m25 |\e[0m        \e[34m// `dict.keys.toList.head.toUpperCase` is a String\e\
    [0m\n\e[31m26 |\e[0m        \e[34m// `dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase`\
    \ is a Boolean\e[0m\n\e[31m27 |\e[0m        \e[34m// `dict.keys.toList.head.toLowerCase\
    \ == dict.keys.toList.head.toUpperCase && dict.keys.toList.head.toLowerCase ==\
    \ dict.keys.toList.head.toUpperCase` is a Boolean\e[0m\n\e[31m28 |\e[0m      \
    \  \e[34m// `dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase\
    \ && dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase &&\
    \ dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase` is a\
    \ Boolean\e[0m\n\e[31m29 |\e[0m        \e[34m// `dict.keys.toList.head.toLowerCase\
    \ == dict.keys.toList.head.toUpperCase && dict.keys.toList.head.toLowerCase ==\
    \ dict.keys.toList.head.toUpperCase && dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase\
    \ && dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase` is\
    \ a Boolean\e[0m\n\e[31m30 |\e[0m        \e[34m// `dict.keys.toList.head.toLowerCase\
    \ == dict.keys.toList.head.toUpp"
  stdout: ''
  timestamp: 1659799893
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val firstKey = dict.keys.head\n        if (firstKey.toLowerCase == firstKey)\
    \ {\n            dict.keys.forall(key => key.toLowerCase == key)\n        } else\
    \ {\n            dict.keys.forall(key => key.toUpperCase == key)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuz_48sga.scala:30)\n\tat Problem.main(tmpuz_48sga.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLowerCase\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpperCase = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLowerCase) {\n            keys.forall(key\
    \ => key.toLowerCase == key)\n        } else if (firstKeyIsUpperCase) {\n    \
    \        keys.forall(key => key.toUpperCase == key)\n        } else {\n      \
    \      false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpikq0jlvm.scala:35)\n\tat Problem.main(tmpikq0jlvm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799893
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill Up this function body\n\
    \        // `dict` is a map of type Map[String,String]\n        // `dict.keys`\
    \ is a collection of type Iterable[String]\n        // `dict.keys.toList` is a\
    \ list of type List[String]\n        // `dict.keys.toList.map` is a list of type\
    \ List[Boolean]\n        // `dict.keys.toList.map(x => x.toLowerCase == x)` is\
    \ a list of type List[Boolean]\n        // `dict.keys.toList.map(x => x.toLowerCase\
    \ == x).distinct` is a list of type List[Boolean]\n        // `dict.keys.toList.map(x\
    \ => x.toLowerCase == x).distinct.length` is an integer\n        // `dict.keys.toList.map(x\
    \ => x.toLowerCase == x).distinct.length == 1` is a boolean\n        // `dict.keys.toList.map(x\
    \ => x.toLowerCase == x).distinct.length == 1 && dict.keys.toList.map(x => x.toLowerCase\
    \ == x).distinct.head` is a boolean\n        // `dict.keys.toList.map(x => x.toLowerCase\
    \ == x).distinct.length == 1 && dict.keys.toList.map(x => x.toLowerCase == x).distinct.head\
    \ || dict.keys.toList.map(x => x.toUpperCase == x).distinct.length == 1 && dict.keys.toList.map(x\
    \ => x.toUpperCase == x).distinct.head` is a boolean\n        // `dict.keys.toList.map(x\
    \ => x.toLowerCase == x).distinct.length == 1 && dict.keys.toList.map(x => x.toLowerCase\
    \ == x).distinct.head || dict.keys.toList.map(x => x.toUpperCase == x).distinct.length\
    \ == 1 && dict.keys.toList.map(x => x.toUpperCase == x).distinct.head && dict.keys.toList.map(x\
    \ => x.toLowerCase == x).dist\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprtn3jqlg.scala:18:61\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mcheckDictCase\e\
    [0m(\e[36mdict\e[0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mString\e[0m]) : \e\
    [35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m                                  \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                             Found:    Unit\n\e[31m   |\e[0m                \
    \                                       Required: Boolean\n\e[31m19 |\e[0m   \
    \     \e[34m// Fill Up this function body\e[0m\n\e[31m20 |\e[0m        \e[34m//\
    \ `dict` is a map of type Map[String,String]\e[0m\n\e[31m21 |\e[0m        \e[34m//\
    \ `dict.keys` is a collection of type Iterable[String]\e[0m\n\e[31m22 |\e[0m \
    \       \e[34m// `dict.keys.toList` is a list of type List[String]\e[0m\n\e[31m23\
    \ |\e[0m        \e[34m// `dict.keys.toList.map` is a list of type List[Boolean]\e\
    [0m\n\e[31m24 |\e[0m        \e[34m// `dict.keys.toList.map(x => x.toLowerCase\
    \ == x)` is a list of type List[Boolean]\e[0m\n\e[31m25 |\e[0m        \e[34m//\
    \ `dict.keys.toList.map(x => x.toLowerCase == x).distinct` is a list of type List[Boolean]\e\
    [0m\n\e[31m26 |\e[0m        \e[34m// `dict.keys.toList.map(x => x.toLowerCase\
    \ == x).distinct.length` is an integer\e[0m\n\e[31m27 |\e[0m        \e[34m// `dict.keys.toList.map(x\
    \ => x.toLowerCase == x).distinct.length == 1` is a boolean\e[0m\n\e[31m28 |\e\
    [0m        \e[34m// `dict.keys.toList.map(x => x.toLowerCase == x).distinct.length\
    \ == 1 && dict.keys.toList.map(x => x.toLowerCase == x).distinct.head` is a boolean\e\
    [0m\n\e[31m29 |\e[0m        \e[34m// `dict.keys.toList.map(x => x.toLowerCase\
    \ == x).distinct.length == 1 && dict.keys.toList.map(x => x.toLowerCase == x).distinct.head\
    \ || dict.keys.toList.map(x => x.toUpperCase == x).distinct.length == 1 && dict.keys.toList.map(x\
    \ => x.toUpperCase == x).distinct.head` is a boolean\e[0m\n\e[31m30 |\e[0m   \
    \     \e[34m// `dict.keys.toList.map(x => x.toLowerCase == x).distinct.length\
    \ == 1 && dict.keys.toList.map(x => x.toLowerCase == x).distinct.head || dict.keys.toList.map(x\
    \ => x.toUpperCase == x).dist"
  stdout: ''
  timestamp: 1659799893
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill Up this function body\n\
    \        // `dict` is a Map of String to String\n        // `dict.keys` is a collection\
    \ of type Iterable[String]\n        // `dict.keys.head` is the first key in the\
    \ map\n        // `dict.keys.head.toLowerCase` is the first key in the map in\
    \ lower case\n        // `dict.keys.head.toUpperCase` is the first key in the\
    \ map in upper case\n        // `dict.keys.forall` is a function that takes a\
    \ function as an argument\n        // and returns true if the function returns\
    \ true for all elements in the collection\n        // `dict.keys.forall(_.toLowerCase\
    \ == dict.keys.head.toLowerCase)` returns true if all keys are lower case\n  \
    \      // `dict.keys.forall(_.toUpperCase == dict.keys.head.toUpperCase)` returns\
    \ true if all keys are upper case\n        // `dict.keys.forall(_.toLowerCase\
    \ == dict.keys.head.toLowerCase) || dict.keys.forall(_.toUpperCase == dict.keys.head.toUpperCase)`\
    \ returns true if all keys are lower case or all keys are upper case\n       \
    \ dict.keys.forall(_.toLowerCase == dict.keys.head.toLowerCase) || dict.keys.forall(_.toUpperCase\
    \ == dict.keys.head.toUpperCase)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq2z_z11r.scala:33)\n\tat Problem.main(tmpq2z_z11r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwsvtf1b.scala:36)\n\tat Problem.main(tmpxwsvtf1b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase() != key) {\n                lower = false\n\
    \            }\n            if (key.toUpperCase() != key) {\n                upper\
    \ = false\n            }\n        }\n        return lower || upper\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprnvzn03l.scala:35)\n\tat Problem.main(tmprnvzn03l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lowerCaseKeys\
    \ = keys.filter(x => x.toLowerCase == x)\n            val upperCaseKeys = keys.filter(x\
    \ => x.toUpperCase == x)\n            if (lowerCaseKeys.length == keys.length\
    \ || upperCaseKeys.length == keys.length) true\n            else false\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz2gei9w.scala:31)\n\tat Problem.main(tmppz2gei9w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for ((k,v) <- dict) {\n\
    \            if (k.toLowerCase() != k) lower = false\n            if (k.toUpperCase()\
    \ != k) upper = false\n        }\n        return lower || upper\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_lsj02rg.scala:31)\n\tat Problem.main(tmp_lsj02rg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    val keys = dict.keys\n        val upper = keys.filter(x => x.toUpperCase\
    \ == x)\n        val lower = keys.filter(x => x.toLowerCase == x)\n        if\
    \ (upper.size == keys.size || lower.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd_k0mcyx.scala:28)\n\tat Problem.main(tmpd_k0mcyx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyztmpxpz.scala:28)\n\tat Problem.main(tmpyztmpxpz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799871
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys\n            val first = keys.head\n\
    \            if (first.toLowerCase == first) {\n                keys.forall(key\
    \ => key.toLowerCase == key)\n            } else if (first.toUpperCase == first)\
    \ {\n                keys.forall(key => key.toUpperCase == key)\n            }\
    \ else false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprhibdc8x.scala:33)\n\tat Problem.main(tmprhibdc8x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lowerCase\
    \ = keys.filter(x => x.toLowerCase == x)\n            val upperCase = keys.filter(x\
    \ => x.toUpperCase == x)\n            if (lowerCase.length == keys.length || upperCase.length\
    \ == keys.length) true\n            else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp22upiic0.scala:31)\n\tat Problem.main(tmp22upiic0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799901
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val firstKey = dict.keys.head\n        if (firstKey.toLowerCase == firstKey)\
    \ {\n            dict.keys.forall(key => key.toLowerCase == key)\n        } else\
    \ {\n            dict.keys.forall(key => key.toUpperCase == key)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuz_48sga.scala:30)\n\tat Problem.main(tmpuz_48sga.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCaseKeys = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upperCaseKeys = keys.filter(x => x.toUpperCase\
    \ == x)\n        if (lowerCaseKeys.length == keys.length || upperCaseKeys.length\
    \ == keys.length) true else false\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx3uhcj7k.scala:28)\n\tat Problem.main(tmpx3uhcj7k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        var\
    \ lower = true\n        var upper = true\n        for (key <- dict.keys) {\n \
    \           if (key.toLowerCase() != key) lower = false\n            if (key.toUpperCase()\
    \ != key) upper = false\n        }\n        return lower || upper\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph1og3y5x.scala:31)\n\tat Problem.main(tmph1og3y5x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(k => k.toLowerCase\
    \ == k)\n        } else if (firstKeyIsUpper) {\n            keys.forall(k => k.toUpperCase\
    \ == k)\n        } else {\n            false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp17otljah.scala:35)\n\tat Problem.main(tmp17otljah.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgsqnd0k4.scala:31)\n\tat Problem.main(tmpgsqnd0k4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwsvtf1b.scala:36)\n\tat Problem.main(tmpxwsvtf1b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lowerCaseKeys\
    \ = keys.filter(key => key.toLowerCase == key)\n            val upperCaseKeys\
    \ = keys.filter(key => key.toUpperCase == key)\n            if (lowerCaseKeys.length\
    \ == keys.length || upperCaseKeys.length == keys.length) true\n            else\
    \ false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv43i1qof.scala:31)\n\tat Problem.main(tmpv43i1qof.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ firstIsLower = first.toLowerCase == first\n        val firstIsUpper = first.toUpperCase\
    \ == first\n        if (firstIsLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstIsUpper) {\n            keys.forall(key =>\
    \ key.toUpperCase == key)\n        } else {\n            false\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsb_89bj4.scala:35)\n\tat Problem.main(tmpsb_89bj4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for (x <- dict.keys)\
    \ {\n            if (x.toLowerCase != x) {\n                lower = false\n  \
    \          }\n            if (x.toUpperCase != x) {\n                upper = false\n\
    \            }\n        }\n        if (lower || upper) {\n            return true\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndj2q5cq.scala:38)\n\tat Problem.main(tmpndj2q5cq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799904
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdw6pgxdb.scala:35)\n\tat Problem.main(tmpdw6pgxdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdw6pgxdb.scala:35)\n\tat Problem.main(tmpdw6pgxdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // TODO: Implement this function\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprpwjz5pd.scala:23)\n\tat Problem.main(tmprpwjz5pd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val (lower, upper) = dict.keys.partition(_.toLowerCase == _)\n      \
    \  lower.size == dict.size || upper.size == dict.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpc5j5fliz.scala:20:49 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m (lower, upper) = dict.keys.partition(_.toLowerCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                               \
    \  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Wrong\
    \ number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1659799901
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill Up this function body\n\
    \        // `dict` is a map of type Map[String,String]\n        // `dict.keys`\
    \ is a collection of type Iterable[String]\n        // `dict.keys.toList` is a\
    \ collection of type List[String]\n        // `dict.keys.toList.map(x => x.toLowerCase)`\
    \ is a collection of type List[String]\n        // `dict.keys.toList.map(x =>\
    \ x.toLowerCase).toSet` is a collection of type Set[String]\n        // `dict.keys.toList.map(x\
    \ => x.toLowerCase).toSet.size` is a number of type Int\n        // `dict.keys.toList.map(x\
    \ => x.toUpperCase).toSet.size` is a number of type Int\n        // `dict.keys.toList.map(x\
    \ => x.toLowerCase).toSet.size == 1` is a boolean of type Boolean\n        //\
    \ `dict.keys.toList.map(x => x.toUpperCase).toSet.size == 1` is a boolean of type\
    \ Boolean\n        // `dict.keys.toList.map(x => x.toLowerCase).toSet.size ==\
    \ 1 || dict.keys.toList.map(x => x.toUpperCase).toSet.size == 1` is a boolean\
    \ of type Boolean\n        dict.keys.toList.map(x => x.toLowerCase).toSet.size\
    \ == 1 || dict.keys.toList.map(x => x.toUpperCase).toSet.size == 1\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl2b43c7q.scala:33)\n\tat Problem.main(tmpl2b43c7q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lowerCaseKeys\
    \ = keys.filter(key => key.toLowerCase == key)\n            val upperCaseKeys\
    \ = keys.filter(key => key.toUpperCase == key)\n            if (lowerCaseKeys.size\
    \ == keys.size || upperCaseKeys.size == keys.size) true\n            else false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0jy1ws3r.scala:31)\n\tat Problem.main(tmp0jy1ws3r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var lower = true\n        var upper\
    \ = true\n        for ((k,v) <- dict) {\n            lower = lower && k.toLowerCase\
    \ == k\n            upper = upper && k.toUpperCase == k\n        }\n        lower\
    \ || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2jat80jo.scala:30)\n\tat Problem.main(tmp2jat80jo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.keys.forall(x => x.toLowerCase\
    \ == x || x.toUpperCase == x)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjkahz7b6.scala:23)\n\tat Problem.main(tmpjkahz7b6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // TODO: Implement this function\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprpwjz5pd.scala:23)\n\tat Problem.main(tmprpwjz5pd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkq2crgdj.scala:23)\n\tat Problem.main(tmpkq2crgdj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo2oaxfc5.scala:24)\n\tat Problem.main(tmpo2oaxfc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lowerCase\
    \ = keys.forall(key => key.forall(c => c.isLower))\n            val upperCase\
    \ = keys.forall(key => key.forall(c => c.isUpper))\n            lowerCase || upperCase\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lowerCase = true\n        var upperCase = true\n        for ((k,v) <-\
    \ dict) {\n            if (k.toLowerCase != k) lowerCase = false\n           \
    \ if (k.toUpperCase != k) upperCase = false\n        }\n        lowerCase || upperCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjkreup6.scala:31)\n\tat Problem.main(tmpxjkreup6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase() != key) lower = false\n            if (key.toUpperCase()\
    \ != key) upper = false\n        }\n        return lower || upper\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa87aauti.scala:31)\n\tat Problem.main(tmpa87aauti.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdw6pgxdb.scala:35)\n\tat Problem.main(tmpdw6pgxdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    val keys = dict.keys\n        val values = dict.values\n        var lower\
    \ = 0\n        var upper = 0\n        for (key <- keys) {\n            if (key.toLowerCase\
    \ == key) {\n                lower += 1\n            } else if (key.toUpperCase\
    \ == key) {\n                upper += 1\n            }\n        }\n        if\
    \ (lower == keys.size || upper == keys.size) {\n            return true\n    \
    \    }\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplnx3pxoj.scala:39)\n\tat Problem.main(tmplnx3pxoj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.forall(_.forall(_.isLower))\n\
    \        val upper = keys.forall(_.forall(_.isUpper))\n        lower || upper\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo2oaxfc5.scala:24)\n\tat Problem.main(tmpo2oaxfc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCase = keys.forall(x =>\
    \ x.toLowerCase == x)\n        val upperCase = keys.forall(x => x.toUpperCase\
    \ == x)\n        lowerCase || upperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpso57n7c2.scala:28)\n\tat Problem.main(tmpso57n7c2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkq2crgdj.scala:23)\n\tat Problem.main(tmpkq2crgdj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        lower\
    \ || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphnf16ngq.scala:28)\n\tat Problem.main(tmphnf16ngq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgsqnd0k4.scala:31)\n\tat Problem.main(tmpgsqnd0k4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase() != key) lower = false\n            if (key.toUpperCase()\
    \ != key) upper = false\n        }\n        lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6blvzhuf.scala:31)\n\tat Problem.main(tmp6blvzhuf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCaseKeys = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upperCaseKeys = keys.filter(x => x.toUpperCase\
    \ == x)\n        if (lowerCaseKeys.length == keys.length || upperCaseKeys.length\
    \ == keys.length) true else false\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx3uhcj7k.scala:28)\n\tat Problem.main(tmpx3uhcj7k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCase = keys.forall(x =>\
    \ x.toLowerCase == x)\n        val upperCase = keys.forall(x => x.toUpperCase\
    \ == x)\n        lowerCase || upperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpso57n7c2.scala:28)\n\tat Problem.main(tmpso57n7c2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwsvtf1b.scala:36)\n\tat Problem.main(tmpxwsvtf1b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys\n            val lowerCaseKeys =\
    \ keys.filter(key => key.toLowerCase == key)\n            val upperCaseKeys =\
    \ keys.filter(key => key.toUpperCase == key)\n            if (lowerCaseKeys.size\
    \ == keys.size || upperCaseKeys.size == keys.size) true\n            else false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph8gu_8x1.scala:31)\n\tat Problem.main(tmph8gu_8x1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n            val upper = keys.filter(x => x.toUpperCase\
    \ == x)\n            if (lower.length == keys.length || upper.length == keys.length)\
    \ true\n            else false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgkd__bn2.scala:31)\n\tat Problem.main(tmpgkd__bn2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgsqnd0k4.scala:31)\n\tat Problem.main(tmpgsqnd0k4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpc6glem.scala:23)\n\tat Problem.main(tmpnpc6glem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lowerCaseKeys\
    \ = keys.filter(x => x.toLowerCase == x)\n            val upperCaseKeys = keys.filter(x\
    \ => x.toUpperCase == x)\n            if (lowerCaseKeys.length == keys.length\
    \ || upperCaseKeys.length == keys.length) true\n            else false\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppz2gei9w.scala:31)\n\tat Problem.main(tmppz2gei9w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var lowerCase = true\n        var\
    \ upperCase = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase\
    \ != key) lowerCase = false\n            if (key.toUpperCase != key) upperCase\
    \ = false\n        }\n        lowerCase || upperCase\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpml_3p3zi.scala:30)\n\tat Problem.main(tmpml_3p3zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwsvtf1b.scala:36)\n\tat Problem.main(tmpxwsvtf1b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    if (dict.isEmpty) return false\n        val keys = dict.keys\n        var\
    \ lower = true\n        var upper = true\n        for (key <- keys) {\n      \
    \      if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        return lower || upper\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc6rdewvb.scala:33)\n\tat Problem.main(tmpc6rdewvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        val firstKeyUpper = firstKey.toUpperCase\n        val firstKeyLower =\
    \ firstKey.toLowerCase\n        if (firstKey == firstKeyUpper) {\n           \
    \ for (key <- keys) {\n                if (key != key.toUpperCase) return false\n\
    \            }\n        } else if (firstKey == firstKeyLower) {\n            for\
    \ (key <- keys) {\n                if (key != key.toLowerCase) return false\n\
    \            }\n        } else {\n            return false\n        }\n      \
    \  return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn_lv4v66.scala:41)\n\tat Problem.main(tmpn_lv4v66.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdw6pgxdb.scala:35)\n\tat Problem.main(tmpdw6pgxdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        return lower || upper\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo5bgayny.scala:31)\n\tat Problem.main(tmpo5bgayny.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val firstKey = keys.head\n     \
    \   if (firstKey.toLowerCase == firstKey) {\n            keys.forall(x => x.toLowerCase\
    \ == x)\n        } else {\n            keys.forall(x => x.toUpperCase == x)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkm1qq4l5.scala:31)\n\tat Problem.main(tmpkm1qq4l5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799905
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val lower = dict.keys.forall(x => x.toLowerCase == x)\n\
    \            val upper = dict.keys.forall(x => x.toUpperCase == x)\n         \
    \   lower || upper\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0kddog6h.scala:29)\n\tat Problem.main(tmp0kddog6h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val key = dict.keys.head\n        if (key.toLowerCase == key) {\n   \
    \         dict.keys.forall(x => x.toLowerCase == x)\n        } else if (key.toUpperCase\
    \ == key) {\n            dict.keys.forall(x => x.toUpperCase == x)\n        }\
    \ else {\n            false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnpsfl92k.scala:32)\n\tat Problem.main(tmpnpsfl92k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val lower = dict.keys.forall(_.toLowerCase == _)\n        val upper =\
    \ dict.keys.forall(_.toUpperCase == _)\n        lower || upper\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpltuqolwh.scala:20:37 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlower\e[0m = dict.keys.forall(_.toLowerCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpltuqolwh.scala:21:37\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mupper\e[0m = dict.keys.forall(_.toUpperCase == _)\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Wrong number of parameters, expected: 1\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659799890
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill Up this function body\n\
    \        // `dict` is a map of type Map[String,String]\n        // `dict.keys`\
    \ is a collection of type Iterable[String]\n        // `dict.keys.toList` is a\
    \ collection of type List[String]\n        // `dict.keys.toList.map(x => x.toLowerCase)`\
    \ is a collection of type List[String]\n        // `dict.keys.toList.map(x =>\
    \ x.toLowerCase).toSet` is a collection of type Set[String]\n        // `dict.keys.toList.map(x\
    \ => x.toLowerCase).toSet.size` is a value of type Int\n        // `dict.keys.toList.map(x\
    \ => x.toUpperCase).toSet.size` is a value of type Int\n        // `dict.keys.toList.map(x\
    \ => x.toLowerCase).toSet.size == 1` is a value of type Boolean\n        // `dict.keys.toList.map(x\
    \ => x.toUpperCase).toSet.size == 1` is a value of type Boolean\n        // `dict.keys.toList.map(x\
    \ => x.toLowerCase).toSet.size == 1 || dict.keys.toList.map(x => x.toUpperCase).toSet.size\
    \ == 1` is a value of type Boolean\n        dict.keys.toList.map(x => x.toLowerCase).toSet.size\
    \ == 1 || dict.keys.toList.map(x => x.toUpperCase).toSet.size == 1\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpho4tqips.scala:33)\n\tat Problem.main(tmpho4tqips.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val lowerKeys\
    \ = keys.filter(x => x.forall(y => y.isLower))\n            val upperKeys = keys.filter(x\
    \ => x.forall(y => y.isUpper))\n            if (lowerKeys.length == keys.length\
    \ || upperKeys.length == keys.length) true\n            else false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ firstIsLower = first == first.toLowerCase\n        val firstIsUpper = first\
    \ == first.toUpperCase\n        if (firstIsLower) {\n            keys.forall(k\
    \ => k == k.toLowerCase)\n        } else if (firstIsUpper) {\n            keys.forall(k\
    \ => k == k.toUpperCase)\n        } else {\n            false\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6tazkkqk.scala:35)\n\tat Problem.main(tmp6tazkkqk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgsqnd0k4.scala:31)\n\tat Problem.main(tmpgsqnd0k4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            val firstKey\
    \ = keys.head\n            val isFirstKeyUpper = firstKey.toUpperCase == firstKey\n\
    \            val isFirstKeyLower = firstKey.toLowerCase == firstKey\n        \
    \    if (isFirstKeyUpper || isFirstKeyLower) {\n                val isAllUpper\
    \ = keys.forall(key => key.toUpperCase == key)\n                val isAllLower\
    \ = keys.forall(key => key.toLowerCase == key)\n                isAllUpper ||\
    \ isAllLower\n            }\n            else false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo8jxelyb.scala:36)\n\tat Problem.main(tmpo8jxelyb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799909
