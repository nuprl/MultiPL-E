name: HumanEval_95_check_dict_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a map, return true if all keys are strings in lower \n    // case\
  \ or all keys are strings in upper case, else return false.\n    // The function\
  \ should return false is the given map is empty.\n    // Examples:\n    // >>> checkDictCase((Map[String,String](\"\
  a\" -> \"apple\", \"b\" -> \"banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"\
  a\" -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
  \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
  , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
  Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
  \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"\
  12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String]) : Boolean\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
  banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
  Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"\
  12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" ->\
  \ \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        // Your code here\n        return false", "        if (dict.isEmpty)\
    \ false\n        else {\n            val keys = dict.keys.toList\n           \
    \ val lower = keys.filter(x => x.toLowerCase == x)\n            val upper = keys.filter(x\
    \ => x.toUpperCase == x)\n            if (lower.length == keys.length || upper.length\
    \ == keys.length) true\n            else false\n        }", "        // Your code\
    \ here\n        var lower = true\n        var upper = true\n        for ((k,v)\
    \ <- dict) {\n            if (k.toLowerCase() != k) lower = false\n          \
    \  if (k.toUpperCase() != k) upper = false\n        }\n        if (lower || upper)\
    \ true else false", "        // Fill in the implementation here\n        var lower\
    \ = true\n        var upper = true\n        for (key <- dict.keys) {\n       \
    \     if (key.toLowerCase() != key) {\n                lower = false\n       \
    \     }\n            if (key.toUpperCase() != key) {\n                upper =\
    \ false\n            }\n        }\n        return lower || upper", "        //\
    \ Fill in the code here\n        var lower = true\n        var upper = true\n\
    \        for (key <- dict.keys) {\n            if (key.toLowerCase() != key) {\n\
    \                lower = false\n            }\n            if (key.toUpperCase()\
    \ != key) {\n                upper = false\n            }\n        }\n       \
    \ return lower || upper", "        // Your code here\n        return false", " \
    \       var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        lower || upper", "        // Your\
    \ code here\n        var lower = true\n        var upper = true\n        for (key\
    \ <- dict.keys) {\n            if (key.toLowerCase != key) {\n               \
    \ lower = false\n            }\n            if (key.toUpperCase != key) {\n  \
    \              upper = false\n            }\n        }\n        return lower ||\
    \ upper", "        // TODO: Implement this function\n        return false", " \
    \       var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        lower || upper", "        // Your\
    \ code here\n        var lower = true\n        var upper = true\n        for (key\
    \ <- dict.keys) {\n            if (key.toLowerCase() != key) {\n             \
    \   lower = false\n            }\n            if (key.toUpperCase() != key) {\n\
    \                upper = false\n            }\n        }\n        return lower\
    \ || upper", "        if (dict.isEmpty) false\n        else {\n            val\
    \ keys = dict.keys.toList\n            val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n            val upper = keys.filter(x => x.toUpperCase == x)\n      \
    \      if (lower.length == keys.length || upper.length == keys.length) true\n\
    \            else false\n        }", "        var lower = true\n        var upper\
    \ = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase !=\
    \ key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        lower || upper", "        var lower = true\n        var upper\
    \ = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase !=\
    \ key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        return lower || upper", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val lower = keys.forall(x\
    \ => x.toLowerCase == x)\n        val upper = keys.forall(x => x.toUpperCase ==\
    \ x)\n        if (lower || upper) return true\n        return false", "      \
    \  if (dict.isEmpty) false\n        else {\n            val keys = dict.keys.toList\n\
    \            val lower = keys.filter(x => x.toLowerCase == x)\n            val\
    \ upper = keys.filter(x => x.toUpperCase == x)\n            if (lower.length ==\
    \ keys.length || upper.length == keys.length) true\n            else false\n \
    \       }", '        dict.keys.forall(x => x.toLowerCase == x || x.toUpperCase
    == x)', "        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val lower = keys.forall(x => x.toLowerCase == x)\n        val upper =\
    \ keys.forall(x => x.toUpperCase == x)\n        lower || upper", "        // Your\
    \ code here\n        return false", "        // Fill in the code here\n      \
    \  var lower = true\n        var upper = true\n        for ((k,v) <- dict) {\n\
    \            if (k.toLowerCase() != k) lower = false\n            if (k.toUpperCase()\
    \ != k) upper = false\n        }\n        return lower || upper"]
stop_tokens:
- "\n    }\n"
