name: HumanEval_95_check_dict_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a map, return true if all keys are strings in lower \n    // case\
  \ or all keys are strings in upper case, else return false.\n    // The function\
  \ should return false is the given map is empty.\n    // Examples:\n    // >>> checkDictCase((Map[String,String](\"\
  a\" -> \"apple\", \"b\" -> \"banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"\
  a\" -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
  \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
  , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
  Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
  \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"\
  12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String]) : Boolean\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
  banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
  Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"\
  12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" ->\
  \ \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        // Your code here\n        return false", "        if (dict.isEmpty)\
    \ false\n        else {\n            val keys = dict.keys.toList\n           \
    \ val lower = keys.filter(x => x.toLowerCase == x)\n            val upper = keys.filter(x\
    \ => x.toUpperCase == x)\n            if (lower.length == keys.length || upper.length\
    \ == keys.length) true\n            else false\n        }", "        // Your code\
    \ here\n        var lower = true\n        var upper = true\n        for ((k,v)\
    \ <- dict) {\n            if (k.toLowerCase() != k) lower = false\n          \
    \  if (k.toUpperCase() != k) upper = false\n        }\n        if (lower || upper)\
    \ true else false", "        // Fill in the implementation here\n        var lower\
    \ = true\n        var upper = true\n        for (key <- dict.keys) {\n       \
    \     if (key.toLowerCase() != key) {\n                lower = false\n       \
    \     }\n            if (key.toUpperCase() != key) {\n                upper =\
    \ false\n            }\n        }\n        return lower || upper", "        //\
    \ Fill in the code here\n        var lower = true\n        var upper = true\n\
    \        for (key <- dict.keys) {\n            if (key.toLowerCase() != key) {\n\
    \                lower = false\n            }\n            if (key.toUpperCase()\
    \ != key) {\n                upper = false\n            }\n        }\n       \
    \ return lower || upper", "        // Your code here\n        return false", " \
    \       var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        lower || upper", "        // Your\
    \ code here\n        var lower = true\n        var upper = true\n        for (key\
    \ <- dict.keys) {\n            if (key.toLowerCase != key) {\n               \
    \ lower = false\n            }\n            if (key.toUpperCase != key) {\n  \
    \              upper = false\n            }\n        }\n        return lower ||\
    \ upper", "        // TODO: Implement this function\n        return false", " \
    \       var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        lower || upper", "        // Your\
    \ code here\n        var lower = true\n        var upper = true\n        for (key\
    \ <- dict.keys) {\n            if (key.toLowerCase() != key) {\n             \
    \   lower = false\n            }\n            if (key.toUpperCase() != key) {\n\
    \                upper = false\n            }\n        }\n        return lower\
    \ || upper", "        if (dict.isEmpty) false\n        else {\n            val\
    \ keys = dict.keys.toList\n            val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n            val upper = keys.filter(x => x.toUpperCase == x)\n      \
    \      if (lower.length == keys.length || upper.length == keys.length) true\n\
    \            else false\n        }", "        var lower = true\n        var upper\
    \ = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase !=\
    \ key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        lower || upper", "        var lower = true\n        var upper\
    \ = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase !=\
    \ key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        return lower || upper", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val lower = keys.forall(x\
    \ => x.toLowerCase == x)\n        val upper = keys.forall(x => x.toUpperCase ==\
    \ x)\n        if (lower || upper) return true\n        return false", "      \
    \  if (dict.isEmpty) false\n        else {\n            val keys = dict.keys.toList\n\
    \            val lower = keys.filter(x => x.toLowerCase == x)\n            val\
    \ upper = keys.filter(x => x.toUpperCase == x)\n            if (lower.length ==\
    \ keys.length || upper.length == keys.length) true\n            else false\n \
    \       }", '        dict.keys.forall(x => x.toLowerCase == x || x.toUpperCase
    == x)', "        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val lower = keys.forall(x => x.toLowerCase == x)\n        val upper =\
    \ keys.forall(x => x.toUpperCase == x)\n        lower || upper", "        // Your\
    \ code here\n        return false", "        // Fill in the code here\n      \
    \  var lower = true\n        var upper = true\n        for ((k,v) <- dict) {\n\
    \            if (k.toLowerCase() != k) lower = false\n            if (k.toUpperCase()\
    \ != k) upper = false\n        }\n        return lower || upper", "        //\
    \ Fill in the code here\n        var lower = true\n        var upper = true\n\
    \        for (k <- dict.keys) {\n            if (!k.toLowerCase.equals(k)) lower\
    \ = false\n            if (!k.toUpperCase.equals(k)) upper = false\n        }\n\
    \        lower || upper", "        if (dict.isEmpty) return false\n        val\
    \ keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }", "        // Fill in the code here\n        var lower = true\n   \
    \     var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase\
    \ != key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        if (lower || upper) true else false", '        dict.keys.forall(x
    => x.toLowerCase == x) || dict.keys.forall(x => x.toUpperCase == x)', "      \
    \  // Fill in the code here\n        return false", "        if (dict.isEmpty)\
    \ false\n        else {\n            val keys = dict.keys.toList\n           \
    \ val lowerKeys = keys.filter(x => x == x.toLowerCase)\n            val upperKeys\
    \ = keys.filter(x => x == x.toUpperCase)\n            if (lowerKeys.size == keys.size\
    \ || upperKeys.size == keys.size) true\n            else false\n        }", " \
    \       if (dict.isEmpty) return false\n        var isUpper = dict.keys.head.toUpperCase\
    \ == dict.keys.head\n        for (key <- dict.keys) {\n            if (isUpper)\
    \ {\n                if (key.toUpperCase != key) return false\n            } else\
    \ {\n                if (key.toLowerCase != key) return false\n            }\n\
    \        }\n        return true", "        if (dict.size == 0) return false\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        return lower || upper", "        if\
    \ (dict.isEmpty) return false\n        val keys = dict.keys\n        val firstKey\
    \ = keys.head\n        val firstKeyLower = firstKey.toLowerCase\n        val firstKeyUpper\
    \ = firstKey.toUpperCase\n        if (firstKeyLower == firstKeyUpper) return false\n\
    \        if (keys.forall(key => key.toLowerCase == firstKeyLower)) return true\n\
    \        if (keys.forall(key => key.toUpperCase == firstKeyUpper)) return true\n\
    \        return false", "        if (dict.size == 0) return false\n        val\
    \ keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }", "        // Fill in the code here\n        var flag = true\n    \
    \    var flag1 = true\n        var flag2 = true\n        if(dict.isEmpty)\n  \
    \          flag = false\n        else{\n            dict.keys.foreach(x => if(x.toUpperCase()\
    \ != x) flag1 = false)\n            dict.keys.foreach(x => if(x.toLowerCase()\
    \ != x) flag2 = false)\n            if(flag1 && flag2)\n                flag =\
    \ false\n        }\n        flag", "        if (dict.isEmpty) return false\n \
    \       val keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        lower\
    \ || upper", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var lower = true\n        var upper =\
    \ true\n        for(key <- dict.keys) {\n            if(key.toLowerCase() != key)\
    \ {\n                lower = false\n            }\n            if(key.toUpperCase()\
    \ != key) {\n                upper = false\n            }\n        }\n       \
    \ if(lower || upper) {\n            return true\n        }\n        return false",
  "        if (dict.isEmpty) return false\n        var isLower = dict.head._1.toLowerCase\
    \ == dict.head._1\n        dict.forall(x => (isLower && x._1.toLowerCase == x._1)\
    \ || (!isLower && x._1.toUpperCase == x._1))", "        var lower = true\n   \
    \     var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase\
    \ != key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        lower || upper", "        // TODO: Implement this function\n\
    \        return true", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower =\
    \ firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }", "        val lower = dict.keys.forall(_.toLowerCase == _)\n     \
    \   val upper = dict.keys.forall(_.toUpperCase == _)\n        if (lower || upper)\
    \ true else false", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true", "        if (dict.isEmpty) false\n\
    \        else {\n            val firstKey = dict.keys.head\n            if (firstKey.toLowerCase\
    \ == firstKey) {\n                dict.keys.forall(x => x.toLowerCase == x)\n\
    \            } else if (firstKey.toUpperCase == firstKey) {\n                dict.keys.forall(x\
    \ => x.toUpperCase == x)\n            } else false\n        }", "        // Your\
    \ code here\n        return false", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            keys.forall(key => key.toLowerCase == key)\n   \
    \     } else {\n            keys.forall(key => key.toUpperCase == key)\n     \
    \   }", "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.size == keys.size ||\
    \ upper.size == keys.size) true else false", "        // Fill in the code here\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase() != key) {\n                lower = false\n\
    \            }\n            if (key.toUpperCase() != key) {\n                upper\
    \ = false\n            }\n        }\n        return lower || upper", "       \
    \ var lower = true\n        var upper = true\n        for (key <- dict.keys) {\n\
    \            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        lower || upper", "        // Fill\
    \ Up this function body\n        // `dict` is a map of type Map[String,String]\n\
    \        // `dict.keys` is a collection of type Iterable[String]\n        // `dict.keys.map(x\
    \ => x.toLowerCase)` is a collection of type Iterable[String]\n        // `dict.keys.map(x\
    \ => x.toLowerCase).toSet` is a set of type Set[String]\n        // `dict.keys.map(x\
    \ => x.toLowerCase).toSet.size` is an integer\n        // `dict.keys.map(x =>\
    \ x.toUpperCase).toSet.size` is an integer\n        // `dict.keys.map(x => x.toLowerCase).toSet.size\
    \ == 1` is a boolean\n        // `dict.keys.map(x => x.toUpperCase).toSet.size\
    \ == 1` is a boolean\n        // `dict.keys.map(x => x.toLowerCase).toSet.size\
    \ == 1 || dict.keys.map(x => x.toUpperCase).toSet.size == 1` is a boolean\n  \
    \      // `dict.keys.map(x => x.toLowerCase).toSet.size == 1 || dict.keys.map(x\
    \ => x.toUpperCase).toSet.size == 1 && dict.size > 0` is a boolean\n        dict.keys.map(x\
    \ => x.toLowerCase).toSet.size == 1 || dict.keys.map(x => x.toUpperCase).toSet.size\
    \ == 1 && dict.size > 0", "        if (dict.isEmpty) return false\n        val\
    \ keys = dict.keys.toList\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }", "        // Fill in the code here\n        var lower = true\n   \
    \     var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase\
    \ != key) {\n                lower = false\n            }\n            if (key.toUpperCase\
    \ != key) {\n                upper = false\n            }\n        }\n       \
    \ if (lower || upper) {\n            return true\n        }\n        return false",
  "        if (dict.isEmpty) return false\n        var lower = true\n        var upper\
    \ = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase !=\
    \ key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        return lower || upper", "        // Your code here\n     \
    \   return false", "        // Your code here\n        return false", "      \
    \  // Your code here\n        return false", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val firstKey = keys.head\n    \
    \    val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        if (firstKeyIsUpper) {\n       \
    \     keys.forall(key => key.toUpperCase == key)\n        } else if (firstKeyIsLower)\
    \ {\n            keys.forall(key => key.toLowerCase == key)\n        } else {\n\
    \            false\n        }", "        if (dict.isEmpty) return false\n    \
    \    val keys = dict.keys.toList\n        val first = keys.head\n        val firstIsLower\
    \ = first.toLowerCase == first\n        val firstIsUpper = first.toUpperCase ==\
    \ first\n        if (firstIsLower) {\n            keys.forall(k => k.toLowerCase\
    \ == k)\n        } else if (firstIsUpper) {\n            keys.forall(k => k.toUpperCase\
    \ == k)\n        } else {\n            false\n        }", "        // Your code\
    \ here\n        var lower = true\n        var upper = true\n        for(key <-\
    \ dict.keys) {\n            if (key.toLowerCase() != key) lower = false\n    \
    \        if (key.toUpperCase() != key) upper = false\n        }\n        lower\
    \ || upper", "        // Your code here\n        return false", "        // TODO:\
    \ Implement this function\n        return false", "        if (dict.isEmpty) false\n\
    \        else {\n            val keys = dict.keys.toList\n            val lowerCaseKeys\
    \ = keys.filter(x => x.toLowerCase == x)\n            val upperCaseKeys = keys.filter(x\
    \ => x.toUpperCase == x)\n            if (lowerCaseKeys.length == keys.length\
    \ || upperCaseKeys.length == keys.length) true\n            else false\n     \
    \   }", "        // Your code here\n        return false", "        // Your code\
    \ here\n        return false", "        if (dict.isEmpty) return false\n     \
    \   val keys = dict.keys\n        val lowerCase = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upperCase = keys.filter(x => x.toUpperCase == x)\n      \
    \  if (lowerCase.size == keys.size || upperCase.size == keys.size) true else false",
  "        // Fill in the code here\n        var lower = true\n        var upper =\
    \ true\n        for (i <- dict.keys) {\n            if (i.toLowerCase() != i)\
    \ {\n                lower = false\n            }\n            if (i.toUpperCase()\
    \ != i) {\n                upper = false\n            }\n        }\n        return\
    \ lower || upper", "        // Fill in the code here\n        true", "       \
    \ // Fill in the code here.\n        var lower = true\n        var upper = true\n\
    \        for ((k,v) <- dict) {\n            if (k.toLowerCase != k) lower = false\n\
    \            if (k.toUpperCase != k) upper = false\n        }\n        lower ||\
    \ upper", "        if (dict.isEmpty) false\n        else {\n            val keys\
    \ = dict.keys.toList\n            val lower = keys.forall(x => x.toLowerCase ==\
    \ x)\n            val upper = keys.forall(x => x.toUpperCase == x)\n         \
    \   lower || upper\n        }", "        if (dict.isEmpty) return false\n    \
    \    val keys = dict.keys\n        val firstKey = keys.head\n        val firstChar\
    \ = firstKey.charAt(0)\n        val isUpper = firstChar.isUpper\n        val isLower\
    \ = firstChar.isLower\n        if (isUpper || isLower) {\n            val isValid\
    \ = keys.forall(key => key.forall(c => c.isUpper == isUpper))\n            isValid\n\
    \        } else {\n            false\n        }", "        if (dict.isEmpty) return\
    \ false\n        var lower = true\n        var upper = true\n        for (key\
    \ <- dict.keys) {\n            if (key.toLowerCase != key) lower = false\n   \
    \         if (key.toUpperCase != key) upper = false\n        }\n        return\
    \ lower || upper", "        // Your code here\n        false", "        if (dict.isEmpty)\
    \ false\n        else {\n            val keys = dict.keys.toList\n           \
    \ val lower = keys.forall(x => x.toLowerCase == x)\n            val upper = keys.forall(x\
    \ => x.toUpperCase == x)\n            lower || upper\n        }", "        //\
    \ Your code here\n        return true", "        var lower = true\n        var\
    \ upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase\
    \ != key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        return lower || upper", "        // Fill in the code here\n\
    \        var lower = true\n        var upper = true\n        for ((k,v) <- dict)\
    \ {\n            if (!k.toLowerCase.equals(k)) lower = false\n            if (!k.toUpperCase.equals(k))\
    \ upper = false\n        }\n        lower || upper", "        // Your code here\n\
    \        if (dict.isEmpty) {\n            return false\n        }\n        val\
    \ keys = dict.keys\n        val lower = keys.filter(x => x.toLowerCase == x)\n\
    \        val upper = keys.filter(x => x.toUpperCase == x)\n        if (lower.size\
    \ == keys.size || upper.size == keys.size) {\n            return true\n      \
    \  }\n        return false", "        // Fill in the code here\n        dict.keys.forall(x\
    \ => x.toUpperCase == x || x.toLowerCase == x)", "        if (dict.isEmpty) false\n\
    \        else {\n            val keys = dict.keys.toList\n            val firstKey\
    \ = keys.head\n            if (firstKey.forall(_.isUpper)) {\n               \
    \ if (keys.forall(_.forall(_.isUpper))) true\n                else false\n   \
    \         }\n            else if (firstKey.forall(_.isLower)) {\n            \
    \    if (keys.forall(_.forall(_.isLower))) true\n                else false\n\
    \            }\n            else false\n        }", "        if (dict.isEmpty)\
    \ false\n        else {\n            val keys = dict.keys\n            val firstKey\
    \ = keys.head\n            val firstKeyIsLower = firstKey.toLowerCase == firstKey\n\
    \            val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n        \
    \    if (firstKeyIsLower) {\n                keys.forall(key => key.toLowerCase\
    \ == key)\n            } else if (firstKeyIsUpper) {\n                keys.forall(key\
    \ => key.toUpperCase == key)\n            } else {\n                false\n  \
    \          }\n        }", "        if (dict.isEmpty) return false\n        val\
    \ keys = dict.keys.toList\n        val first = keys.head\n        if (first.toLowerCase\
    \ == first) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else if (first.toUpperCase ==\
    \ first) {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) return false\n            }\n        } else {\n            return false\n\
    \        }\n        return true", "        // Your code here\n        var lower\
    \ = true\n        var upper = true\n        for ((k,v) <- dict) {\n          \
    \  if (k.toLowerCase() != k) {\n                lower = false\n            }\n\
    \            if (k.toUpperCase() != k) {\n                upper = false\n    \
    \        }\n        }\n        return lower || upper", "        // Fill in the\
    \ code here\n        true", "        // TODO: Implement this function\n      \
    \  return false", "        var lower = true\n        var upper = true\n      \
    \  for (k <- dict.keys) {\n            lower = lower && k.toLowerCase == k\n \
    \           upper = upper && k.toUpperCase == k\n        }\n        lower || upper",
  "        // Fill in the code here\n        var lower = true\n        var upper =\
    \ true\n        for (key <- dict.keys) {\n            if (key.toLowerCase() !=\
    \ key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        lower || upper", "        if (dict.isEmpty) false\n      \
    \  else {\n            val keys = dict.keys.toList\n            val lower = keys.forall(x\
    \ => x.toLowerCase == x)\n            val upper = keys.forall(x => x.toUpperCase\
    \ == x)\n            lower || upper\n        }", "        if (dict.isEmpty) {\n\
    \            false\n        } else {\n            val keys = dict.keys.toList\n\
    \            val lowerCaseKeys = keys.filter(key => key.toLowerCase == key)\n\
    \            val upperCaseKeys = keys.filter(key => key.toUpperCase == key)\n\
    \            if (lowerCaseKeys.length == keys.length || upperCaseKeys.length ==\
    \ keys.length) {\n                true\n            } else {\n               \
    \ false\n            }\n        }", "        // Fill in the code here\n      \
    \  return false", "        if (dict.isEmpty) return false\n        val firstKey\
    \ = dict.keys.head\n        if (firstKey.toLowerCase == firstKey) {\n        \
    \    dict.keys.forall(key => key.toLowerCase == key)\n        } else {\n     \
    \       dict.keys.forall(key => key.toUpperCase == key)\n        }", "       \
    \ if (dict.isEmpty) return false\n        val keys = dict.keys\n        val firstKey\
    \ = keys.head\n        val isUpper = firstKey.toUpperCase == firstKey\n      \
    \  val isLower = firstKey.toLowerCase == firstKey\n        if (isUpper) {\n  \
    \          keys.forall(key => key.toUpperCase == key)\n        } else if (isLower)\
    \ {\n            keys.forall(key => key.toLowerCase == key)\n        } else {\n\
    \            false\n        }", "        if (dict.size == 0) return false\n  \
    \      val keys = dict.keys.toList\n        val firstKey = keys(0)\n        val\
    \ firstKeyIsLower = firstKey == firstKey.toLowerCase\n        val allKeysAreLower\
    \ = keys.forall(key => key == key.toLowerCase)\n        val allKeysAreUpper =\
    \ keys.forall(key => key == key.toUpperCase)\n        if (firstKeyIsLower) allKeysAreLower\
    \ else allKeysAreUpper", "        // Your code here\n        dict.keys.forall(_.toLowerCase\
    \ == _) || dict.keys.forall(_.toUpperCase == _)", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val first = keys.head\n\
    \        if (first.toLowerCase == first) {\n            keys.forall(x => x.toLowerCase\
    \ == x)\n        } else {\n            keys.forall(x => x.toUpperCase == x)\n\
    \        }", "        if (dict.isEmpty) return false\n        val lower = dict.keys.forall(x\
    \ => x.toLowerCase == x)\n        val upper = dict.keys.forall(x => x.toUpperCase\
    \ == x)\n        lower || upper", "        // Fill in the code here\n        dict.keys.forall(x\
    \ => x.toUpperCase == x || x.toLowerCase == x)", "        // Your code here\n\
    \        return false", "        // Fill in the code here\n        var lower =\
    \ true\n        var upper = true\n        for ((k,v) <- dict) {\n            if\
    \ (k.toLowerCase != k) lower = false\n            if (k.toUpperCase != k) upper\
    \ = false\n        }\n        return lower || upper", "        // Fill in the\
    \ code here\n        var lower = true\n        var upper = true\n        for (key\
    \ <- dict.keys) {\n            if (key.toLowerCase != key) lower = false\n   \
    \         if (key.toUpperCase != key) upper = false\n        }\n        lower\
    \ || upper", "        // Your code here\n        return false", "        // Your\
    \ code here\n        return false", "        if (dict.isEmpty) false\n       \
    \ else {\n            val keys = dict.keys.toList\n            val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n            val upper = keys.filter(x => x.toUpperCase\
    \ == x)\n            if (lower.length == keys.length || upper.length == keys.length)\
    \ true\n            else false\n        }", "        if (dict.isEmpty) false\n\
    \        else {\n            val keys = dict.keys\n            val lowerCaseKeys\
    \ = keys.filter(x => x.toLowerCase == x)\n            val upperCaseKeys = keys.filter(x\
    \ => x.toUpperCase == x)\n            if (lowerCaseKeys.size == keys.size || upperCaseKeys.size\
    \ == keys.size) true\n            else false\n        }", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upper = keys.filter(x => x.toUpperCase ==\
    \ x)\n        if (lower.size == 0 || upper.size == 0) return false\n        return\
    \ true", "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val firstKey = keys.head\n        if (firstKey.toLowerCase == firstKey)\
    \ {\n            keys.forall(k => k.toLowerCase == k)\n        } else {\n    \
    \        keys.forall(k => k.toUpperCase == k)\n        }", "        // TODO: Implement\
    \ this function\n        return false", "        // Fill in the code here\n  \
    \      var lower = true\n        var upper = true\n        for (k <- dict.keys)\
    \ {\n            if (k.toLowerCase() != k) lower = false\n            if (k.toUpperCase()\
    \ != k) upper = false\n        }\n        lower || upper", "        // Your Code\
    \ Here\n        false", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys.toList\n        val firstKey = keys.head\n        if (firstKey.forall(_.isLower))\
    \ {\n            keys.forall(_.forall(_.isLower))\n        } else if (firstKey.forall(_.isUpper))\
    \ {\n            keys.forall(_.forall(_.isUpper))\n        } else {\n        \
    \    false\n        }", "        if (dict.isEmpty) false\n        else {\n   \
    \         var lower = true\n            var upper = true\n            for (key\
    \ <- dict.keys) {\n                if (key.toLowerCase != key) lower = false\n\
    \                if (key.toUpperCase != key) upper = false\n            }\n  \
    \          lower || upper\n        }", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val firstKey = keys.head\n     \
    \   val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     keys.forall(key => key.toLowerCase == key)\n        } else if (firstKeyIsUpper)\
    \ {\n            keys.forall(key => key.toUpperCase == key)\n        } else {\n\
    \            false\n        }", "        // TODO: Implement this function\n  \
    \      return false", "        // Fill in the code here\n        if (dict.isEmpty)\
    \ false\n        else {\n            val keys = dict.keys.toList\n           \
    \ val lower = keys.filter(x => x.toLowerCase == x)\n            val upper = keys.filter(x\
    \ => x.toUpperCase == x)\n            if (lower.size == keys.size || upper.size\
    \ == keys.size) true\n            else false\n        }", "        if (dict.isEmpty)\
    \ return false\n        val lower = dict.keys.forall(_.toLowerCase == _)\n   \
    \     val upper = dict.keys.forall(_.toUpperCase == _)\n        lower || upper",
  "        // TODO: Implement this function\n        return false", "        // Your\
    \ code here\n        var lower = true\n        var upper = true\n        for(key\
    \ <- dict.keys) {\n            if(key.toLowerCase() != key) lower = false\n  \
    \          if(key.toUpperCase() != key) upper = false\n        }\n        lower\
    \ || upper", "        var lower = true\n        var upper = true\n        for\
    \ (key <- dict.keys) {\n            if (key.toLowerCase != key) lower = false\n\
    \            if (key.toUpperCase != key) upper = false\n        }\n        lower\
    \ || upper", "        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstKeyIsUpper) {\n            keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }",
  "        // Fill in the code here\n        var lower = true\n        var upper =\
    \ true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase() != k) lower\
    \ = false\n            if (k.toUpperCase() != k) upper = false\n        }\n  \
    \      lower || upper", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys.toList\n        val firstKey = keys.head\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        if (!firstKeyIsUpper && !firstKeyIsLower) return false\n\
    \        val allKeysAreUpper = keys.forall(key => key.toUpperCase == key)\n  \
    \      val allKeysAreLower = keys.forall(key => key.toLowerCase == key)\n    \
    \    return allKeysAreUpper || allKeysAreLower", "        // Your code here\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase() != key) {\n                lower = false\n\
    \            }\n            if (key.toUpperCase() != key) {\n                upper\
    \ = false\n            }\n        }\n        return lower || upper", "       \
    \ if (dict.isEmpty) return false\n        val keys = dict.keys\n        val firstKey\
    \ = keys.head\n        val firstKeyUpper = firstKey.toUpperCase\n        val firstKeyLower\
    \ = firstKey.toLowerCase\n        if (firstKey == firstKeyUpper) {\n         \
    \   for (key <- keys) {\n                if (key != key.toUpperCase) return false\n\
    \            }\n        } else if (firstKey == firstKeyLower) {\n            for\
    \ (key <- keys) {\n                if (key != key.toLowerCase) return false\n\
    \            }\n        } else {\n            return false\n        }\n      \
    \  return true", "        if (dict.isEmpty) false\n        else {\n          \
    \  val keys = dict.keys.toList\n            val lowerCase = keys.forall(x => x.toLowerCase\
    \ == x)\n            val upperCase = keys.forall(x => x.toUpperCase == x)\n  \
    \          lowerCase || upperCase\n        }", "        // Your code here\n  \
    \      var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        lower || upper", "        if (dict.size\
    \ == 0) return false\n        val keys = dict.keys.toList\n        val firstKey\
    \ = keys(0)\n        val firstKeyUpper = firstKey.toUpperCase\n        val firstKeyLower\
    \ = firstKey.toLowerCase\n        if (firstKey == firstKeyUpper) {\n         \
    \   keys.forall(key => key == key.toUpperCase)\n        } else if (firstKey ==\
    \ firstKeyLower) {\n            keys.forall(key => key == key.toLowerCase)\n \
    \       } else {\n            false\n        }", "        // Your code here\n\
    \        return false", "        if (dict.isEmpty) return false\n        var upper\
    \ = true\n        var lower = true\n        for (key <- dict.keys) {\n       \
    \     if (key.toUpperCase != key) upper = false\n            if (key.toLowerCase\
    \ != key) lower = false\n        }\n        upper || lower", "        // Your\
    \ code here\n        dict.isEmpty match {\n            case true => false\n  \
    \          case false => dict.keys.forall(x => x.toLowerCase == x || x.toUpperCase\
    \ == x)\n        }", "        // Fill Up this function body\n        // `dict`\
    \ is a map of type Map[String,String]\n        // `dict.keys` is a collection\
    \ of type Iterable[String]\n        // `dict.keys.toList` is a collection of type\
    \ List[String]\n        // `dict.keys.toList.head` is a String\n        // `dict.keys.toList.head.toLowerCase`\
    \ is a String\n        // `dict.keys.toList.head.toUpperCase` is a String\n  \
    \      // `dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase`\
    \ is a Boolean\n        // `dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase\
    \ && dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase` is\
    \ a Boolean\n        // `dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase\
    \ && dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase &&\
    \ dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase` is a\
    \ Boolean\n        // `dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase\
    \ && dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase &&\
    \ dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase && dict.keys.toList.head.toLowerCase\
    \ == dict.keys.toList.head.toUpperCase` is a Boolean\n        // `dict.keys.toList.head.toLowerCase\
    \ == dict.keys.toList.head.toUpperCase && dict.keys.toList.head.toLowerCase ==\
    \ dict.keys.toList.head.toUpperCase && dict.keys.toList.head.toLowerCase == dict.keys.toList.head.toUpperCase\
    \ && dict.keys.toList.head.", "        if (dict.isEmpty) return false\n      \
    \  val firstKey = dict.keys.head\n        if (firstKey.toLowerCase == firstKey)\
    \ {\n            dict.keys.forall(key => key.toLowerCase == key)\n        } else\
    \ {\n            dict.keys.forall(key => key.toUpperCase == key)\n        }",
  "        if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        val firstKeyIsLowerCase = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpperCase = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLowerCase) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstKeyIsUpperCase) {\n            keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }",
  "        // Fill Up this function body\n        // `dict` is a map of type Map[String,String]\n\
    \        // `dict.keys` is a collection of type Iterable[String]\n        // `dict.keys.toList`\
    \ is a list of type List[String]\n        // `dict.keys.toList.map` is a list\
    \ of type List[Boolean]\n        // `dict.keys.toList.map(x => x.toLowerCase ==\
    \ x)` is a list of type List[Boolean]\n        // `dict.keys.toList.map(x => x.toLowerCase\
    \ == x).distinct` is a list of type List[Boolean]\n        // `dict.keys.toList.map(x\
    \ => x.toLowerCase == x).distinct.length` is an integer\n        // `dict.keys.toList.map(x\
    \ => x.toLowerCase == x).distinct.length == 1` is a boolean\n        // `dict.keys.toList.map(x\
    \ => x.toLowerCase == x).distinct.length == 1 && dict.keys.toList.map(x => x.toLowerCase\
    \ == x).distinct.head` is a boolean\n        // `dict.keys.toList.map(x => x.toLowerCase\
    \ == x).distinct.length == 1 && dict.keys.toList.map(x => x.toLowerCase == x).distinct.head\
    \ || dict.keys.toList.map(x => x.toUpperCase == x).distinct.length == 1 && dict.keys.toList.map(x\
    \ => x.toUpperCase == x).distinct.head` is a boolean\n        // `dict.keys.toList.map(x\
    \ => x.toLowerCase == x).distinct.length == 1 && dict.keys.toList.map(x => x.toLowerCase\
    \ == x).distinct.head || dict.keys.toList.map(x => x.toUpperCase == x).distinct.length\
    \ == 1 && dict.keys.toList.map(x => x.toUpperCase == x).distinct.head && dict.keys.toList.map(x\
    \ => x.toLowerCase == x).dist", "        // Fill Up this function body\n     \
    \   // `dict` is a Map of String to String\n        // `dict.keys` is a collection\
    \ of type Iterable[String]\n        // `dict.keys.head` is the first key in the\
    \ map\n        // `dict.keys.head.toLowerCase` is the first key in the map in\
    \ lower case\n        // `dict.keys.head.toUpperCase` is the first key in the\
    \ map in upper case\n        // `dict.keys.forall` is a function that takes a\
    \ function as an argument\n        // and returns true if the function returns\
    \ true for all elements in the collection\n        // `dict.keys.forall(_.toLowerCase\
    \ == dict.keys.head.toLowerCase)` returns true if all keys are lower case\n  \
    \      // `dict.keys.forall(_.toUpperCase == dict.keys.head.toUpperCase)` returns\
    \ true if all keys are upper case\n        // `dict.keys.forall(_.toLowerCase\
    \ == dict.keys.head.toLowerCase) || dict.keys.forall(_.toUpperCase == dict.keys.head.toUpperCase)`\
    \ returns true if all keys are lower case or all keys are upper case\n       \
    \ dict.keys.forall(_.toLowerCase == dict.keys.head.toLowerCase) || dict.keys.forall(_.toUpperCase\
    \ == dict.keys.head.toUpperCase)", "        if (dict.isEmpty) return false\n \
    \       val keys = dict.keys\n        val firstKey = keys.head\n        if (firstKey.toLowerCase\
    \ == firstKey) {\n            for (key <- keys) {\n                if (key.toLowerCase\
    \ != key) return false\n            }\n        } else {\n            for (key\
    \ <- keys) {\n                if (key.toUpperCase != key) return false\n     \
    \       }\n        }\n        return true", "        // Your code here\n     \
    \   return false", "        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) {\n                lower = false\n            }\n            if (key.toUpperCase()\
    \ != key) {\n                upper = false\n            }\n        }\n       \
    \ return lower || upper", "        if (dict.isEmpty) false\n        else {\n \
    \           val keys = dict.keys.toList\n            val lowerCaseKeys = keys.filter(x\
    \ => x.toLowerCase == x)\n            val upperCaseKeys = keys.filter(x => x.toUpperCase\
    \ == x)\n            if (lowerCaseKeys.length == keys.length || upperCaseKeys.length\
    \ == keys.length) true\n            else false\n        }", "        // Fill in\
    \ the code here\n        var lower = true\n        var upper = true\n        for\
    \ ((k,v) <- dict) {\n            if (k.toLowerCase() != k) lower = false\n   \
    \         if (k.toUpperCase() != k) upper = false\n        }\n        return lower\
    \ || upper", "        // Fill in the code here\n        val keys = dict.keys\n\
    \        val upper = keys.filter(x => x.toUpperCase == x)\n        val lower =\
    \ keys.filter(x => x.toLowerCase == x)\n        if (upper.size == keys.size ||\
    \ lower.size == keys.size) true else false", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upper = keys.filter(x => x.toUpperCase ==\
    \ x)\n        if (lower.size == keys.size || upper.size == keys.size) true else\
    \ false", "        if (dict.isEmpty) false\n        else {\n            val keys\
    \ = dict.keys\n            val first = keys.head\n            if (first.toLowerCase\
    \ == first) {\n                keys.forall(key => key.toLowerCase == key)\n  \
    \          } else if (first.toUpperCase == first) {\n                keys.forall(key\
    \ => key.toUpperCase == key)\n            } else false\n        }", "        if\
    \ (dict.isEmpty) false\n        else {\n            val keys = dict.keys.toList\n\
    \            val lowerCase = keys.filter(x => x.toLowerCase == x)\n          \
    \  val upperCase = keys.filter(x => x.toUpperCase == x)\n            if (lowerCase.length\
    \ == keys.length || upperCase.length == keys.length) true\n            else false\n\
    \        }", "        if (dict.isEmpty) return false\n        val firstKey = dict.keys.head\n\
    \        if (firstKey.toLowerCase == firstKey) {\n            dict.keys.forall(key\
    \ => key.toLowerCase == key)\n        } else {\n            dict.keys.forall(key\
    \ => key.toUpperCase == key)\n        }", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCaseKeys = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upperCaseKeys = keys.filter(x => x.toUpperCase\
    \ == x)\n        if (lowerCaseKeys.length == keys.length || upperCaseKeys.length\
    \ == keys.length) true else false", "        // Your code here\n        return\
    \ false", "        // Your code here\n        var lower = true\n        var upper\
    \ = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        return lower || upper", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val firstKey = keys.head\n    \
    \    val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     keys.forall(k => k.toLowerCase == k)\n        } else if (firstKeyIsUpper)\
    \ {\n            keys.forall(k => k.toUpperCase == k)\n        } else {\n    \
    \        false\n        }", "        // Fill in the code here\n        var lower\
    \ = true\n        var upper = true\n        for (key <- dict.keys) {\n       \
    \     if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        lower || upper", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        if (firstKey.toLowerCase == firstKey) {\n            for (key <- keys)\
    \ {\n                if (key.toLowerCase != key) return false\n            }\n\
    \        } else {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) return false\n            }\n        }\n        return true", "    \
    \    if (dict.isEmpty) false\n        else {\n            val keys = dict.keys.toList\n\
    \            val lowerCaseKeys = keys.filter(key => key.toLowerCase == key)\n\
    \            val upperCaseKeys = keys.filter(key => key.toUpperCase == key)\n\
    \            if (lowerCaseKeys.length == keys.length || upperCaseKeys.length ==\
    \ keys.length) true\n            else false\n        }", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val first = keys.head\n\
    \        val firstIsLower = first.toLowerCase == first\n        val firstIsUpper\
    \ = first.toUpperCase == first\n        if (firstIsLower) {\n            keys.forall(key\
    \ => key.toLowerCase == key)\n        } else if (firstIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }", "        // Fill in the code here\n        var lower = true\n   \
    \     var upper = true\n        for (x <- dict.keys) {\n            if (x.toLowerCase\
    \ != x) {\n                lower = false\n            }\n            if (x.toUpperCase\
    \ != x) {\n                upper = false\n            }\n        }\n        if\
    \ (lower || upper) {\n            return true\n        }\n        return false",
  "        // Your code here\n        return false", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val firstKey = keys.head\n    \
    \    val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     keys.forall(key => key.toLowerCase == key)\n        } else if (firstKeyIsUpper)\
    \ {\n            keys.forall(key => key.toUpperCase == key)\n        } else {\n\
    \            false\n        }", "        if (dict.isEmpty) return false\n    \
    \    val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }", "        // TODO: Implement this function\n        return false",
  "        if (dict.isEmpty) return false\n        val (lower, upper) = dict.keys.partition(_.toLowerCase\
    \ == _)\n        lower.size == dict.size || upper.size == dict.size", "      \
    \  // Fill Up this function body\n        // `dict` is a map of type Map[String,String]\n\
    \        // `dict.keys` is a collection of type Iterable[String]\n        // `dict.keys.toList`\
    \ is a collection of type List[String]\n        // `dict.keys.toList.map(x =>\
    \ x.toLowerCase)` is a collection of type List[String]\n        // `dict.keys.toList.map(x\
    \ => x.toLowerCase).toSet` is a collection of type Set[String]\n        // `dict.keys.toList.map(x\
    \ => x.toLowerCase).toSet.size` is a number of type Int\n        // `dict.keys.toList.map(x\
    \ => x.toUpperCase).toSet.size` is a number of type Int\n        // `dict.keys.toList.map(x\
    \ => x.toLowerCase).toSet.size == 1` is a boolean of type Boolean\n        //\
    \ `dict.keys.toList.map(x => x.toUpperCase).toSet.size == 1` is a boolean of type\
    \ Boolean\n        // `dict.keys.toList.map(x => x.toLowerCase).toSet.size ==\
    \ 1 || dict.keys.toList.map(x => x.toUpperCase).toSet.size == 1` is a boolean\
    \ of type Boolean\n        dict.keys.toList.map(x => x.toLowerCase).toSet.size\
    \ == 1 || dict.keys.toList.map(x => x.toUpperCase).toSet.size == 1", "       \
    \ if (dict.isEmpty) false\n        else {\n            val keys = dict.keys.toList\n\
    \            val lowerCaseKeys = keys.filter(key => key.toLowerCase == key)\n\
    \            val upperCaseKeys = keys.filter(key => key.toUpperCase == key)\n\
    \            if (lowerCaseKeys.size == keys.size || upperCaseKeys.size == keys.size)\
    \ true\n            else false\n        }", "        var lower = true\n      \
    \  var upper = true\n        for ((k,v) <- dict) {\n            lower = lower\
    \ && k.toLowerCase == k\n            upper = upper && k.toUpperCase == k\n   \
    \     }\n        lower || upper", "        // Your code here\n        return false",
  '        dict.keys.forall(x => x.toLowerCase == x || x.toUpperCase == x)', "   \
    \     // TODO: Implement this function\n        return false", "        // Your\
    \ code here\n        false", "        // Fill in the code here\n        return\
    \ true", "        if (dict.isEmpty) false\n        else {\n            val keys\
    \ = dict.keys.toList\n            val lowerCase = keys.forall(key => key.forall(c\
    \ => c.isLower))\n            val upperCase = keys.forall(key => key.forall(c\
    \ => c.isUpper))\n            lowerCase || upperCase\n        }", "        //\
    \ Fill in the code here\n        var lowerCase = true\n        var upperCase =\
    \ true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase != k) lowerCase\
    \ = false\n            if (k.toUpperCase != k) upperCase = false\n        }\n\
    \        lowerCase || upperCase", "        // Fill in the code here\n        var\
    \ lower = true\n        var upper = true\n        for (key <- dict.keys) {\n \
    \           if (key.toLowerCase() != key) lower = false\n            if (key.toUpperCase()\
    \ != key) upper = false\n        }\n        return lower || upper", "        if\
    \ (dict.isEmpty) return false\n        val keys = dict.keys\n        val firstKey\
    \ = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n\
    \        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower)\
    \ {\n            keys.forall(key => key.toLowerCase == key)\n        } else if\
    \ (firstKeyIsUpper) {\n            keys.forall(key => key.toUpperCase == key)\n\
    \        } else {\n            false\n        }", "        // Fill in the code\
    \ here\n        val keys = dict.keys\n        val values = dict.values\n     \
    \   var lower = 0\n        var upper = 0\n        for (key <- keys) {\n      \
    \      if (key.toLowerCase == key) {\n                lower += 1\n           \
    \ } else if (key.toUpperCase == key) {\n                upper += 1\n         \
    \   }\n        }\n        if (lower == keys.size || upper == keys.size) {\n  \
    \          return true\n        }\n        return false", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val lower = keys.forall(_.forall(_.isLower))\n\
    \        val upper = keys.forall(_.forall(_.isUpper))\n        lower || upper",
  "        // Your code here\n        return false", "        // Fill in the code\
    \ here\n        return true", "        if (dict.isEmpty) return false\n      \
    \  val keys = dict.keys.toList\n        val lowerCase = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upperCase = keys.forall(x => x.toUpperCase == x)\n      \
    \  lowerCase || upperCase", "        // Your code here\n        false", "    \
    \    // Your code here\n        return false", "        // Your code here\n  \
    \      return false", "        if (dict.isEmpty) return false\n        val keys\
    \ = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase == x)\n\
    \        val upper = keys.forall(x => x.toUpperCase == x)\n        lower || upper",
  "        // Fill in the code here\n        var lower = true\n        var upper =\
    \ true\n        for (key <- dict.keys) {\n            if (key.toLowerCase != key)\
    \ lower = false\n            if (key.toUpperCase != key) upper = false\n     \
    \   }\n        lower || upper", "        // Fill in the code here\n        var\
    \ lower = true\n        var upper = true\n        for (key <- dict.keys) {\n \
    \           if (key.toLowerCase() != key) lower = false\n            if (key.toUpperCase()\
    \ != key) upper = false\n        }\n        lower || upper", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val lowerCaseKeys\
    \ = keys.filter(x => x.toLowerCase == x)\n        val upperCaseKeys = keys.filter(x\
    \ => x.toUpperCase == x)\n        if (lowerCaseKeys.length == keys.length || upperCaseKeys.length\
    \ == keys.length) true else false", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCase = keys.forall(x =>\
    \ x.toLowerCase == x)\n        val upperCase = keys.forall(x => x.toUpperCase\
    \ == x)\n        lowerCase || upperCase", "        // Your code here\n       \
    \ return false", "        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        if (firstKey.toLowerCase == firstKey)\
    \ {\n            for (key <- keys) {\n                if (key.toLowerCase != key)\
    \ return false\n            }\n        } else {\n            for (key <- keys)\
    \ {\n                if (key.toUpperCase != key) return false\n            }\n\
    \        }\n        return true", "        if (dict.isEmpty) false\n        else\
    \ {\n            val keys = dict.keys\n            val lowerCaseKeys = keys.filter(key\
    \ => key.toLowerCase == key)\n            val upperCaseKeys = keys.filter(key\
    \ => key.toUpperCase == key)\n            if (lowerCaseKeys.size == keys.size\
    \ || upperCaseKeys.size == keys.size) true\n            else false\n        }",
  "        if (dict.isEmpty) false\n        else {\n            val keys = dict.keys.toList\n\
    \            val lower = keys.filter(x => x.toLowerCase == x)\n            val\
    \ upper = keys.filter(x => x.toUpperCase == x)\n            if (lower.length ==\
    \ keys.length || upper.length == keys.length) true\n            else false\n \
    \       }", "        // Fill in the code here\n        var lower = true\n    \
    \    var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase\
    \ != key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        lower || upper", "        // Your code here\n        return\
    \ false", "        if (dict.isEmpty) false\n        else {\n            val keys\
    \ = dict.keys.toList\n            val lowerCaseKeys = keys.filter(x => x.toLowerCase\
    \ == x)\n            val upperCaseKeys = keys.filter(x => x.toUpperCase == x)\n\
    \            if (lowerCaseKeys.length == keys.length || upperCaseKeys.length ==\
    \ keys.length) true\n            else false\n        }", "        var lowerCase\
    \ = true\n        var upperCase = true\n        for (key <- dict.keys) {\n   \
    \         if (key.toLowerCase != key) lowerCase = false\n            if (key.toUpperCase\
    \ != key) upperCase = false\n        }\n        lowerCase || upperCase", "   \
    \     if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        if (firstKey.toLowerCase == firstKey) {\n    \
    \        for (key <- keys) {\n                if (key.toLowerCase != key) return\
    \ false\n            }\n        } else {\n            for (key <- keys) {\n  \
    \              if (key.toUpperCase != key) return false\n            }\n     \
    \   }\n        return true", "        // Fill in the code here\n        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        var lower = true\n     \
    \   var upper = true\n        for (key <- keys) {\n            if (key.toLowerCase\
    \ != key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        return lower || upper", "        // Your code here\n     \
    \   if (dict.isEmpty) return false\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        val firstKeyUpper = firstKey.toUpperCase\n   \
    \     val firstKeyLower = firstKey.toLowerCase\n        if (firstKey == firstKeyUpper)\
    \ {\n            for (key <- keys) {\n                if (key != key.toUpperCase)\
    \ return false\n            }\n        } else if (firstKey == firstKeyLower) {\n\
    \            for (key <- keys) {\n                if (key != key.toLowerCase)\
    \ return false\n            }\n        } else {\n            return false\n  \
    \      }\n        return true", "        if (dict.isEmpty) return false\n    \
    \    val keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }", "        if (dict.isEmpty) return false\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase\
    \ != key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        return lower || upper", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val firstKey = keys.head\n\
    \        if (firstKey.toLowerCase == firstKey) {\n            keys.forall(x =>\
    \ x.toLowerCase == x)\n        } else {\n            keys.forall(x => x.toUpperCase\
    \ == x)\n        }", "        if (dict.isEmpty) false\n        else {\n      \
    \      val lower = dict.keys.forall(x => x.toLowerCase == x)\n            val\
    \ upper = dict.keys.forall(x => x.toUpperCase == x)\n            lower || upper\n\
    \        }", "        if (dict.size == 0) return false\n        val key = dict.keys.head\n\
    \        if (key.toLowerCase == key) {\n            dict.keys.forall(x => x.toLowerCase\
    \ == x)\n        } else if (key.toUpperCase == key) {\n            dict.keys.forall(x\
    \ => x.toUpperCase == x)\n        } else {\n            false\n        }", " \
    \       if (dict.isEmpty) return false\n        val lower = dict.keys.forall(_.toLowerCase\
    \ == _)\n        val upper = dict.keys.forall(_.toUpperCase == _)\n        lower\
    \ || upper", "        // Fill Up this function body\n        // `dict` is a map\
    \ of type Map[String,String]\n        // `dict.keys` is a collection of type Iterable[String]\n\
    \        // `dict.keys.toList` is a collection of type List[String]\n        //\
    \ `dict.keys.toList.map(x => x.toLowerCase)` is a collection of type List[String]\n\
    \        // `dict.keys.toList.map(x => x.toLowerCase).toSet` is a collection of\
    \ type Set[String]\n        // `dict.keys.toList.map(x => x.toLowerCase).toSet.size`\
    \ is a value of type Int\n        // `dict.keys.toList.map(x => x.toUpperCase).toSet.size`\
    \ is a value of type Int\n        // `dict.keys.toList.map(x => x.toLowerCase).toSet.size\
    \ == 1` is a value of type Boolean\n        // `dict.keys.toList.map(x => x.toUpperCase).toSet.size\
    \ == 1` is a value of type Boolean\n        // `dict.keys.toList.map(x => x.toLowerCase).toSet.size\
    \ == 1 || dict.keys.toList.map(x => x.toUpperCase).toSet.size == 1` is a value\
    \ of type Boolean\n        dict.keys.toList.map(x => x.toLowerCase).toSet.size\
    \ == 1 || dict.keys.toList.map(x => x.toUpperCase).toSet.size == 1", "       \
    \ if (dict.isEmpty) false\n        else {\n            val keys = dict.keys.toList\n\
    \            val lowerKeys = keys.filter(x => x.forall(y => y.isLower))\n    \
    \        val upperKeys = keys.filter(x => x.forall(y => y.isUpper))\n        \
    \    if (lowerKeys.length == keys.length || upperKeys.length == keys.length) true\n\
    \            else false\n        }", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val first = keys.head\n        val\
    \ firstIsLower = first == first.toLowerCase\n        val firstIsUpper = first\
    \ == first.toUpperCase\n        if (firstIsLower) {\n            keys.forall(k\
    \ => k == k.toLowerCase)\n        } else if (firstIsUpper) {\n            keys.forall(k\
    \ => k == k.toUpperCase)\n        } else {\n            false\n        }", " \
    \       // Fill in the code here\n        var lower = true\n        var upper\
    \ = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase !=\
    \ key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        lower || upper", "        if (dict.isEmpty) false\n      \
    \  else {\n            val keys = dict.keys.toList\n            val firstKey =\
    \ keys.head\n            val isFirstKeyUpper = firstKey.toUpperCase == firstKey\n\
    \            val isFirstKeyLower = firstKey.toLowerCase == firstKey\n        \
    \    if (isFirstKeyUpper || isFirstKeyLower) {\n                val isAllUpper\
    \ = keys.forall(key => key.toUpperCase == key)\n                val isAllLower\
    \ = keys.forall(key => key.toLowerCase == key)\n                isAllUpper ||\
    \ isAllLower\n            }\n            else false\n        }"]
stop_tokens:
- "\n    }\n"
