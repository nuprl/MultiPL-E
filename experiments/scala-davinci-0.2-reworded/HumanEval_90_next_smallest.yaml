name: HumanEval_90_next_smallest
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of integers.\n    // Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n    // Return None if there\
  \ is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long](5l.toLong,\
  \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // 2l\n    // >>> nextSmallest((List[Long]()))\n\
  \    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n    //\
  \ None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(nextSmallest((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long](5l.toLong,\
  \ 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong))).equals(2l));\n    assert(nextSmallest((List[Long]())).equals(None));\n\
  \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n  \
  \  assert(nextSmallest((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(1l));\n\
  \    assert(nextSmallest((List[Long](1l.toLong, 1l.toLong))).equals(None));\n  \
  \  assert(nextSmallest((List[Long](-35l.toLong, 34l.toLong, 12l.toLong, -45l.toLong))).equals(-35l));\n\
  \    }\n\n}\n"
completions: ["        if (lst.length < 2) return None\n        var min = lst(0)\n\
    \        var min2 = lst(1)\n        for (i <- 1 until lst.length) {\n        \
    \    if (lst(i) < min) {\n                min2 = min\n                min = lst(i)\n\
    \            }\n            else if (lst(i) < min2) {\n                min2 =\
    \ lst(i)\n            }\n        }\n        if (min2 == min) return None\n   \
    \     return Some(min2)", "        if (lst.length < 2) return None\n        var\
    \ min = lst(0)\n        var min2 = lst(1)\n        for (i <- 1 until lst.length)\
    \ {\n            if (lst(i) < min) {\n                min2 = min\n           \
    \     min = lst(i)\n            }\n            else if (lst(i) < min2) {\n   \
    \             min2 = lst(i)\n            }\n        }\n        if (min2 == min)\
    \ return None\n        return Some(min2)", "        if (lst.length < 2) return\
    \ None\n        var min = lst(0)\n        var min2 = lst(1)\n        if (min >\
    \ min2) {\n            val temp = min\n            min = min2\n            min2\
    \ = temp\n        }\n        for (i <- 2 until lst.length) {\n            if (lst(i)\
    \ < min) {\n                min2 = min\n                min = lst(i)\n       \
    \     } else if (lst(i) < min2) {\n                min2 = lst(i)\n           \
    \ }\n        }\n        if (min == min2) return None\n        return Some(min2)",
  "        if (lst.length < 2) return None\n        var min = Long.MaxValue\n    \
    \    var min2 = Long.MaxValue\n        for (i <- 0 until lst.length) {\n     \
    \       if (lst(i) < min) {\n                min2 = min\n                min =\
    \ lst(i)\n            } else if (lst(i) < min2) {\n                min2 = lst(i)\n\
    \            }\n        }\n        if (min2 == Long.MaxValue) return None\n  \
    \      return Some(min2)", "        if (lst.length < 2) return None\n        var\
    \ min = lst(0)\n        var min2 = lst(1)\n        if (min > min2) {\n       \
    \     min = lst(1)\n            min2 = lst(0)\n        }\n        for (i <- 2\
    \ until lst.length) {\n            if (lst(i) < min) {\n                min2 =\
    \ min\n                min = lst(i)\n            } else if (lst(i) < min2) {\n\
    \                min2 = lst(i)\n            }\n        }\n        if (min2 ==\
    \ min) return None\n        return Some(min2)", "        if (lst.length < 2) return\
    \ None\n        val sorted = lst.sorted\n        var prev = sorted(0)\n      \
    \  for (i <- 1 until sorted.length) {\n            if (sorted(i) != prev) return\
    \ Some(sorted(i))\n            prev = sorted(i)\n        }\n        None", " \
    \       if (lst.length < 2) return None\n        var min = lst(0)\n        var\
    \ min2 = lst(1)\n        for (i <- 1 until lst.length) {\n            if (lst(i)\
    \ < min) {\n                min2 = min\n                min = lst(i)\n       \
    \     }\n            else if (lst(i) < min2) {\n                min2 = lst(i)\n\
    \            }\n        }\n        if (min2 == min) return None\n        return\
    \ Some(min2)", "        if (lst.length < 2) return None\n        var min = lst(0)\n\
    \        var min2 = lst(1)\n        for (i <- 1 until lst.length) {\n        \
    \    if (lst(i) < min) {\n                min2 = min\n                min = lst(i)\n\
    \            }\n            else if (lst(i) < min2) {\n                min2 =\
    \ lst(i)\n            }\n        }\n        if (min2 == min) return None\n   \
    \     return Some(min2)", "        if (lst.length < 2) return None\n        var\
    \ min = lst(0)\n        var min2 = lst(1)\n        if (min > min2) {\n       \
    \     min = lst(1)\n            min2 = lst(0)\n        }\n        for (i <- 2\
    \ until lst.length) {\n            if (lst(i) < min) {\n                min2 =\
    \ min\n                min = lst(i)\n            } else if (lst(i) < min2) {\n\
    \                min2 = lst(i)\n            }\n        }\n        if (min2 ==\
    \ min) return None\n        return Some(min2)", "        if (lst.length < 2) return\
    \ None\n        var min = lst(0)\n        var min2 = lst(1)\n        if (min >\
    \ min2) {\n            min = lst(1)\n            min2 = lst(0)\n        }\n  \
    \      for (i <- 2 until lst.length) {\n            if (lst(i) < min) {\n    \
    \            min2 = min\n                min = lst(i)\n            } else if (lst(i)\
    \ < min2) {\n                min2 = lst(i)\n            }\n        }\n       \
    \ return Some(min2)", "        if (lst.length < 2) return None\n        val sorted\
    \ = lst.sorted\n        var second = Long.MaxValue\n        for (i <- 0 until\
    \ sorted.length - 1) {\n            if (sorted(i) != sorted(i + 1)) {\n      \
    \          second = sorted(i + 1)\n                break\n            }\n    \
    \    }\n        if (second == Long.MaxValue) return None\n        return Some(second)",
  "        if (lst.length < 2) return None\n        var min = lst(0)\n        var\
    \ min2 = lst(1)\n        if (min2 < min) {\n            val tmp = min\n      \
    \      min = min2\n            min2 = tmp\n        }\n        for (i <- 2 until\
    \ lst.length) {\n            if (lst(i) < min) {\n                min2 = min\n\
    \                min = lst(i)\n            } else if (lst(i) < min2) {\n     \
    \           min2 = lst(i)\n            }\n        }\n        Some(min2)", "  \
    \      if (lst.length < 2) return None\n        var min = Long.MaxValue\n    \
    \    var min2 = Long.MaxValue\n        for (i <- 0 until lst.length) {\n     \
    \       if (lst(i) < min) {\n                min2 = min\n                min =\
    \ lst(i)\n            } else if (lst(i) < min2) {\n                min2 = lst(i)\n\
    \            }\n        }\n        if (min2 == Long.MaxValue) return None\n  \
    \      return Some(min2)", "        if (lst.length < 2) None\n        else {\n\
    \            val min = lst.min\n            val min2 = lst.filter(_ != min).min\n\
    \            Some(min2)\n        }", "        if (lst.length < 2) return None\n\
    \        var min = lst(0)\n        var min2 = lst(1)\n        if (min > min2)\
    \ {\n            val temp = min\n            min = min2\n            min2 = temp\n\
    \        }\n        for (i <- 2 until lst.length) {\n            if (lst(i) <\
    \ min) {\n                min2 = min\n                min = lst(i)\n         \
    \   } else if (lst(i) < min2) {\n                min2 = lst(i)\n            }\n\
    \        }\n        if (min2 == min) return None\n        return Some(min2)",
  "        if (lst.length < 2) return None\n        var min = lst(0)\n        var\
    \ min2 = lst(1)\n        for (i <- 1 until lst.length) {\n            if (lst(i)\
    \ < min) {\n                min2 = min\n                min = lst(i)\n       \
    \     }\n            else if (lst(i) < min2) {\n                min2 = lst(i)\n\
    \            }\n        }\n        if (min2 == min) return None\n        return\
    \ Some(min2)", "        if (lst.length < 2) None\n        else {\n           \
    \ val sorted = lst.sorted\n            if (sorted(0) == sorted(1)) None\n    \
    \        else Some(sorted(1))\n        }", "        if (lst.length < 2) return\
    \ None\n        var min = lst(0)\n        var secondMin = lst(1)\n        if (min\
    \ > secondMin) {\n            val temp = min\n            min = secondMin\n  \
    \          secondMin = temp\n        }\n        for (i <- 2 until lst.length)\
    \ {\n            if (lst(i) < min) {\n                secondMin = min\n      \
    \          min = lst(i)\n            } else if (lst(i) < secondMin) {\n      \
    \          secondMin = lst(i)\n            }\n        }\n        if (min == secondMin)\
    \ return None\n        return Some(secondMin)", "        if (lst.length < 2) return\
    \ None\n        var min = lst(0)\n        var min2 = lst(1)\n        if (min >\
    \ min2) {\n            val tmp = min\n            min = min2\n            min2\
    \ = tmp\n        }\n        for (i <- 2 until lst.length) {\n            if (lst(i)\
    \ < min) {\n                min2 = min\n                min = lst(i)\n       \
    \     } else if (lst(i) < min2) {\n                min2 = lst(i)\n           \
    \ }\n        }\n        if (min == min2) return None\n        return Some(min2)",
  "        if (lst.length < 2) return None\n        var min = lst(0)\n        var\
    \ min2 = lst(1)\n        for (i <- 1 until lst.length) {\n            if (lst(i)\
    \ < min) {\n                min2 = min\n                min = lst(i)\n       \
    \     }\n            else if (lst(i) < min2) {\n                min2 = lst(i)\n\
    \            }\n        }\n        if (min2 == min) return None\n        return\
    \ Some(min2)"]
stop_tokens:
- "\n    }\n"
