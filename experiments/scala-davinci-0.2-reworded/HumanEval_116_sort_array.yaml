name: HumanEval_116_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this Kata, you have to sort a list of non-negative integers according\
  \ to\n    // number of ones in their binary representation in ascending order.\n\
  \    // For similar number of ones, sort based on decimal value.\n    // It must\
  \ be implemented like this:\n    // >>> sortArray((List[Long](1l.toLong, 5l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong))\n    // >>> sortArray((List[Long](-2l.toLong, -3l.toLong,\
  \ -4l.toLong, -5l.toLong, -6l.toLong)))\n    // (List[Long](-6l.toLong, -5l.toLong,\
  \ -4l.toLong, -3l.toLong, -2l.toLong))\n    // >>> sortArray((List[Long](1l.toLong,\
  \ 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))\n    def sortArray(arr : List[Long]) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long](1l.toLong,\
  \ 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
  \ 4l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](-2l.toLong,\
  \ -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong))).equals((List[Long](-4l.toLong,\
  \ -2l.toLong, -6l.toLong, -5l.toLong, -3l.toLong))));\n    assert(sortArray((List[Long](1l.toLong,\
  \ 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](2l.toLong, 5l.toLong, 77l.toLong, 4l.toLong, 5l.toLong,\
  \ 3l.toLong, 5l.toLong, 7l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 4l.toLong, 4l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
  \ 7l.toLong, 77l.toLong))));\n    assert(sortArray((List[Long](3l.toLong, 6l.toLong,\
  \ 44l.toLong, 12l.toLong, 32l.toLong, 5l.toLong))).equals((List[Long](32l.toLong,\
  \ 3l.toLong, 5l.toLong, 6l.toLong, 12l.toLong, 44l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    }\n\n}\n"
completions: ["        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val a1\
    \ = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_ ==\
    \ '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n            if\
    \ (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val b1\
    \ = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else a1\
    \ < b1\n        })", "        arr.sortWith((x, y) => {\n            val xs = x.toBinaryString.toList.map(_.toString.toInt)\n\
    \            val ys = y.toBinaryString.toList.map(_.toString.toInt)\n        \
    \    val xc = xs.count(_ == 1)\n            val yc = ys.count(_ == 1)\n      \
    \      if (xc == yc) {\n                x < y\n            } else {\n        \
    \        xc < yc\n            }\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val b1\
    \ = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else a1\
    \ < b1\n        })", "        arr.sortWith((a, b) => {\n            val aBinary\
    \ = a.toBinaryString\n            val bBinary = b.toBinaryString\n           \
    \ val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(c\
    \ => c == '1')\n            val bOnes = bBinary.count(c => c == '1')\n       \
    \     if (aOnes == bOnes) {\n                a < b\n            } else {\n   \
    \             aOnes < bOnes\n            }\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aBinary = a.toBinaryString\n            val bBinary\
    \ = b.toBinaryString\n            val aOnes = aBinary.count(_ == '1')\n      \
    \      val bOnes = bBinary.count(_ == '1')\n            if (aOnes == bOnes) {\n\
    \                a < b\n            } else {\n                aOnes < bOnes\n\
    \            }\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n         \
    \   val aOnes = aBin.filter(_ == '1').length\n            val bOnes = bBin.filter(_\
    \ == '1').length\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n \
    \       })", "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        val ones = arr.map(x\
    \ => (x, x.toBinaryString.count(_ == '1'))).sortBy(_._2)\n        ones.sortBy(_._1).map(_._1)",
  "        arr.sortWith((x, y) => {\n            val x1 = x.toBinaryString.count(_\
    \ == '1')\n            val y1 = y.toBinaryString.count(_ == '1')\n           \
    \ if (x1 == y1) x < y else x1 < y1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBinary = a.toBinaryString\n            val bBinary =\
    \ b.toBinaryString\n            val aOnes = aBinary.count(_ == '1')\n        \
    \    val bOnes = bBinary.count(_ == '1')\n            if (aOnes == bOnes) a <\
    \ b else aOnes < bOnes\n        })", "        val ones = arr.map(x => (x, x.toBinaryString.count(_\
    \ == '1'))).sortBy(_._2)\n        ones.sortBy(_._1).map(_._1)", "        arr.sortWith((a,\
    \ b) => {\n            val a1 = a.toBinaryString.count(_ == '1')\n           \
    \ val b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val a1\
    \ = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((x, y) => {\n            val x1 = x.toBinaryString.count(_ ==\
    \ '1')\n            val y1 = y.toBinaryString.count(_ == '1')\n            if\
    \ (x1 == y1) x < y else x1 < y1\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val a1\
    \ = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n    \
    \        val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) {\n                a < b\n            } else {\n                aOnes\
    \ < bOnes\n            }\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val a1 = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n       \
    \     val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ == '1')\n\
    \            val bOnes = bBin.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(c => c == '1')\n            val bOnes = bBin.count(c\
    \ => c == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n   \
    \     })", "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n\
    \            val bBin = b.toBinaryString\n            val aOnes = aBin.count(_\
    \ == '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        def countOnes(n : Long) : Int = {\n         \
    \   var count = 0\n            var x = n\n            while (x > 0) {\n      \
    \          count += x % 2\n                x /= 2\n            }\n           \
    \ count\n        }\n        arr.sortWith((a, b) => {\n            val countA =\
    \ countOnes(a)\n            val countB = countOnes(b)\n            if (countA\
    \ == countB) a < b else countA < countB\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val a1 = a.toBinaryString.count(_ == '1')\n           \
    \ val b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((x, y) => {\n            val x1\
    \ = x.toBinaryString.count(_ == '1')\n            val y1 = y.toBinaryString.count(_\
    \ == '1')\n            if (x1 == y1) x < y else x1 < y1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n    \
    \        val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.filter(_ == '1').length\n            val bOnes =\
    \ bBin.filter(_ == '1').length\n            if (aOnes == bOnes) {\n          \
    \      a < b\n            } else {\n                aOnes < bOnes\n          \
    \  }\n        })", "        def countOnes(n : Long) : Int = {\n            var\
    \ count = 0\n            var nn = n\n            while (nn > 0) {\n          \
    \      if (nn % 2 == 1) count += 1\n                nn /= 2\n            }\n \
    \           count\n        }\n        arr.sortWith((a, b) => {\n            val\
    \ aOnes = countOnes(a)\n            val bOnes = countOnes(b)\n            if (aOnes\
    \ == bOnes) a < b\n            else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val a1 = a.toBinaryString.count(_ == '1')\n           \
    \ val b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val aOnes\
    \ = a.toBinaryString.count(_ == '1')\n            val bOnes = b.toBinaryString.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        val ones = arr.map(x => (x, x.toBinaryString.count(_\
    \ == '1'))).sortBy(_._2)\n        ones.sortBy(_._1).map(_._1)", "        arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        val ones = arr.map(x\
    \ => (x, Integer.bitCount(x.toInt))).sortWith((x, y) => x._2 < y._2 || (x._2 ==\
    \ y._2 && x._1 < y._1))\n        ones.map(x => x._1)", "        arr.sortWith((a,\
    \ b) => {\n            val aBinary = a.toBinaryString\n            val bBinary\
    \ = b.toBinaryString\n            val aOnes = aBinary.count(_ == '1')\n      \
    \      val bOnes = bBinary.count(_ == '1')\n            if (aOnes == bOnes) a\
    \ < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.filter(_ == '1').length\n            val bOnes =\
    \ bBin.filter(_ == '1').length\n            if (aOnes == bOnes) a < b else aOnes\
    \ < bOnes\n        })", "        arr.sortWith((x, y) => {\n            val x1\
    \ = x.toBinaryString.count(_ == '1')\n            val y1 = y.toBinaryString.count(_\
    \ == '1')\n            if (x1 == y1) x < y else x1 < y1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n       \
    \     val bBin = b.toBinaryString\n            val aOnes = aBin.filter(_ == '1').length\n\
    \            val bOnes = bBin.filter(_ == '1').length\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val b1\
    \ = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else a1\
    \ < b1\n        })", "        arr.sortWith((a, b) => {\n            val aBits\
    \ = a.toBinaryString.count(_ == '1')\n            val bBits = b.toBinaryString.count(_\
    \ == '1')\n            if (aBits == bBits) a < b else aBits < bBits\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) {\n                a < b\n            } else {\n                aOnes\
    \ < bOnes\n            }\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            aBin.count(_ == '1') < bBin.count(_ == '1') || (aBin.count(_ == '1')\
    \ == bBin.count(_ == '1') && a < b)\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val a1\
    \ = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_ ==\
    \ '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n            if\
    \ (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) {\n                a < b\n        \
    \    } else {\n                aOnes < bOnes\n            }\n        })", "  \
    \      arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        val sorted = arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })\n        sorted", "        arr.sortWith((x,\
    \ y) => {\n            val x1 = x.toBinaryString.count(_ == '1')\n           \
    \ val y1 = y.toBinaryString.count(_ == '1')\n            if (x1 == y1) x < y else\
    \ x1 < y1\n        })", "        arr.sortWith((a, b) => {\n            val onesA\
    \ = a.toBinaryString.count(_ == '1')\n            val onesB = b.toBinaryString.count(_\
    \ == '1')\n            if (onesA == onesB) a < b else onesA < onesB\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val aBinary\
    \ = a.toBinaryString\n            val bBinary = b.toBinaryString\n           \
    \ val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        val sorted = arr.sortWith((a,\
    \ b) => {\n            val aBinary = a.toBinaryString\n            val bBinary\
    \ = b.toBinaryString\n            val aOnes = aBinary.filter(_ == '1').length\n\
    \            val bOnes = bBinary.filter(_ == '1').length\n            if (aOnes\
    \ == bOnes) {\n                a < b\n            } else {\n                aOnes\
    \ < bOnes\n            }\n        })\n        sorted", "        arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes != bOnes) aOnes < bOnes\n            else a <\
    \ b\n        })", "        arr.sortWith((a, b) => {\n            val aBinary =\
    \ a.toBinaryString\n            val bBinary = b.toBinaryString\n            val\
    \ aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_ ==\
    \ '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        def countOnes(n : Long)\
    \ : Int = {\n            var count = 0\n            var x = n\n            while\
    \ (x > 0) {\n                if (x % 2 == 1) count += 1\n                x /=\
    \ 2\n            }\n            count\n        }\n        arr.sortWith((a, b)\
    \ => {\n            val onesA = countOnes(a)\n            val onesB = countOnes(b)\n\
    \            if (onesA == onesB) a < b\n            else onesA < onesB\n     \
    \   })", "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n\
    \            val bBin = b.toBinaryString\n            val aOnes = aBin.count(_\
    \ == '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes\
    \ == bOnes) {\n                a < b\n            } else {\n                aOnes\
    \ < bOnes\n            }\n        })", "        arr.sortWith((a, b) => {\n   \
    \         val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val a1\
    \ = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  val ones = arr.map(x => (x, x.toBinaryString.count(_ == '1'))).sortBy(_._2)\n\
    \        ones.sortBy(_._1).map(_._1)", "        arr.sortWith((a, b) => {\n   \
    \         val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) {\n                a < b\n        \
    \    } else {\n                aOnes < bOnes\n            }\n        })", "  \
    \      arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val aBin\
    \ = a.toBinaryString\n            val bBin = b.toBinaryString\n            val\
    \ aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_ == '1')\n\
    \            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "    \
    \    arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n     \
    \       val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ == '1')\n\
    \            val bOnes = bBin.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.filter(c\
    \ => c == '1').length\n            val bOnes = bBinary.filter(c => c == '1').length\n\
    \            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "    \
    \    arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_ ==\
    \ '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n            if\
    \ (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val a1\
    \ = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_ ==\
    \ '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n            if\
    \ (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((x, y) =>\
    \ {\n            val x1 = x.toBinaryString.count(_ == '1')\n            val y1\
    \ = y.toBinaryString.count(_ == '1')\n            if (x1 == y1) x < y else x1\
    \ < y1\n        })", "        arr.sortWith((a, b) => {\n            val aBin =\
    \ a.toBinaryString\n            val bBin = b.toBinaryString\n            val aOnes\
    \ = aBin.count(_ == '1')\n            val bOnes = bBin.count(_ == '1')\n     \
    \       if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val a1 = a.toBinaryString.count(_ == '1')\n           \
    \ val b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val aBits\
    \ = a.toBinaryString.count(_ == '1')\n            val bBits = b.toBinaryString.count(_\
    \ == '1')\n            if (aBits == bBits) a < b else aBits < bBits\n        })",
  "        arr.sortWith((x, y) => {\n            val x1 = x.toBinaryString.count(_\
    \ == '1')\n            val y1 = y.toBinaryString.count(_ == '1')\n           \
    \ if (x1 == y1) x < y else x1 < y1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val aBinary\
    \ = a.toBinaryString\n            val bBinary = b.toBinaryString\n           \
    \ val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) {\n                a < b\n        \
    \    } else {\n                aOnes < bOnes\n            }\n        })", "  \
    \      arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        val sorted = arr.sortWith((a, b) => {\n     \
    \       val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })\n\
    \        sorted", "        val ones = arr.map(x => (x, x.toBinaryString.count(_\
    \ == '1'))).sortBy(_._2)\n        ones.sortBy(_._1).map(_._1)", "        arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((x, y) => {\n            val x1 = x.toBinaryString.count(_\
    \ == '1')\n            val y1 = y.toBinaryString.count(_ == '1')\n           \
    \ if (x1 == y1) x < y else x1 < y1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val aOnes\
    \ = a.toBinaryString.count(_ == '1')\n            val bOnes = b.toBinaryString.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBinary = a.toBinaryString\n            val bBinary =\
    \ b.toBinaryString\n            val aOnes = aBinary.count(_ == '1')\n        \
    \    val bOnes = bBinary.count(_ == '1')\n            if (aOnes == bOnes) a <\
    \ b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n     \
    \       val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        val sorted = arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n\
    \            val bBin = b.toBinaryString\n            val aOnes = aBin.count(_\
    \ == '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes\
    \ == bOnes) {\n                a < b\n            } else {\n                aOnes\
    \ < bOnes\n            }\n        })\n        sorted", "        arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.filter(_ == '1').length\n            val bOnes =\
    \ bBin.filter(_ == '1').length\n            if (aOnes == bOnes) a < b else aOnes\
    \ < bOnes\n        })", "        arr.sortWith((a, b) => {\n            val a1\
    \ = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_ ==\
    \ '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n            if\
    \ (a1 == b1) a < b else a1 < b1\n        })", "        val ones = arr.map(x =>\
    \ (x, x.toBinaryString.count(_ == '1'))).sortBy(_._2)\n        ones.sortBy(_._1).map(_._1)",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        val ones = arr.map(x => x.toBinaryString.count(_ == '1'))\n        val\
    \ sorted = ones.zip(arr).sortBy(_._1).map(_._2)\n        sorted", "        arr.sortWith((a,\
    \ b) => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        val ones = arr.map(x => (x, x.toBinaryString.count(_ == '1'))).sortBy(_._2)\n\
    \        ones.sortBy(_._1).map(_._1)", "        arr.sortWith((a, b) => {\n   \
    \         val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(c => c == '1')\n            val bOnes =\
    \ bBinary.count(c => c == '1')\n            if (aOnes == bOnes) a < b else aOnes\
    \ < bOnes\n        })", "        val sorted = arr.sortWith((a, b) => {\n     \
    \       val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })\n\
    \        sorted", "        arr.sortWith((a, b) => {\n            val aBinary =\
    \ a.toBinaryString\n            val bBinary = b.toBinaryString\n            val\
    \ aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_ ==\
    \ '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.filter(_\
    \ == '1').length\n            val bOnes = bBinary.filter(_ == '1').length\n  \
    \          if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_ ==\
    \ '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n            if\
    \ (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.filter(_ == '1').length\n            val bOnes =\
    \ bBin.filter(_ == '1').length\n            if (aOnes == bOnes) a < b else aOnes\
    \ < bOnes\n        })", "        arr.sortWith((x, y) => {\n            val xBin\
    \ = x.toBinaryString\n            val yBin = y.toBinaryString\n            val\
    \ xOnes = xBin.filter(c => c == '1').length\n            val yOnes = yBin.filter(c\
    \ => c == '1').length\n            if (xOnes == yOnes) {\n                x <\
    \ y\n            } else {\n                xOnes < yOnes\n            }\n    \
    \    })", "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val aa\
    \ = a.toBinaryString.count(_ == '1')\n            val bb = b.toBinaryString.count(_\
    \ == '1')\n            if (aa == bb) a < b else aa < bb\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n       \
    \     val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ == '1')\n\
    \            val bOnes = bBin.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val a1 = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n    \
    \        val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val aBin\
    \ = a.toBinaryString\n            val bBin = b.toBinaryString\n            val\
    \ aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_ == '1')\n\
    \            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "    \
    \    arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n     \
    \       val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ == '1')\n\
    \            val bOnes = bBin.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((x, y) => {\n \
    \           val x1 = x.toBinaryString.count(_ == '1')\n            val y1 = y.toBinaryString.count(_\
    \ == '1')\n            if (x1 == y1) x < y else x1 < y1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n       \
    \     val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ == '1')\n\
    \            val bOnes = bBin.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((x, y) => {\n \
    \           val x1 = x.toBinaryString.count(_ == '1')\n            val y1 = y.toBinaryString.count(_\
    \ == '1')\n            if (x1 == y1) x < y else x1 < y1\n        })", "      \
    \  arr.sortWith((x, y) => {\n            val x1 = x.toBinaryString.count(_ ==\
    \ '1')\n            val y1 = y.toBinaryString.count(_ == '1')\n            if\
    \ (x1 == y1) x < y else x1 < y1\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val b1\
    \ = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else a1\
    \ < b1\n        })", "        def countOnes(n : Long) : Int = {\n            var\
    \ count = 0\n            var x = n\n            while (x > 0) {\n            \
    \    if (x % 2 == 1) count += 1\n                x /= 2\n            }\n     \
    \       count\n        }\n        arr.sortWith((a, b) => {\n            val countA\
    \ = countOnes(a)\n            val countB = countOnes(b)\n            if (countA\
    \ == countB) a < b else countA < countB\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val a1 = a.toBinaryString.count(_ == '1')\n           \
    \ val b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val aBin\
    \ = a.toBinaryString\n            val bBin = b.toBinaryString\n            val\
    \ aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_ == '1')\n\
    \            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "    \
    \    arr.sortWith((x, y) => {\n            val x1 = x.toBinaryString.count(_ ==\
    \ '1')\n            val y1 = y.toBinaryString.count(_ == '1')\n            if\
    \ (x1 == y1) x < y else x1 < y1\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 != b1) a1 < b1 else\
    \ a < b\n        })", "        arr.sortWith((a, b) => {\n            val a1 =\
    \ a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_ ==\
    \ '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n            if\
    \ (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val b1\
    \ = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else a1\
    \ < b1\n        })", "        val sorted = arr.sortWith((a, b) => {\n        \
    \    val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) {\n                a < b\n        \
    \    } else {\n                aOnes < bOnes\n            }\n        })\n    \
    \    sorted", "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBinary = a.toBinaryString\n            val bBinary =\
    \ b.toBinaryString\n            val aOnes = aBinary.count(_ == '1')\n        \
    \    val bOnes = bBinary.count(_ == '1')\n            if (aOnes == bOnes) a <\
    \ b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n     \
    \       val a1 = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n       \
    \     val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ == '1')\n\
    \            val bOnes = bBin.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val a1 = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((x, y) => {\n            val x1 = x.toBinaryString.count(_ ==\
    \ '1')\n            val y1 = y.toBinaryString.count(_ == '1')\n            if\
    \ (x1 == y1) x < y else x1 < y1\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val x = a.toBinaryString.count(_ == '1')\n            val y =\
    \ b.toBinaryString.count(_ == '1')\n            if (x == y) a < b else x < y\n\
    \        })", "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBinary = a.toBinaryString\n            val bBinary =\
    \ b.toBinaryString\n            val aOnes = aBinary.count(_ == '1')\n        \
    \    val bOnes = bBinary.count(_ == '1')\n            if (aOnes == bOnes) a <\
    \ b else aOnes < bOnes\n        })", "        val sorted = arr.sortWith((a, b)\
    \ => {\n            val aBinary = a.toBinaryString\n            val bBinary =\
    \ b.toBinaryString\n            val aOnes = aBinary.filter(c => c == '1').length\n\
    \            val bOnes = bBinary.filter(c => c == '1').length\n            if\
    \ (aOnes == bOnes) a < b else aOnes < bOnes\n        })\n        sorted", "  \
    \      arr.sortWith((x, y) => {\n            val x1 = x.toBinaryString.count(_\
    \ == '1')\n            val y1 = y.toBinaryString.count(_ == '1')\n           \
    \ if (x1 == y1) x < y else x1 < y1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val aBin = a.toBinaryString\n            val bBin = b.toBinaryString\n\
    \            val aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_\
    \ == '1')\n            if (aOnes == bOnes) {\n                a < b\n        \
    \    } else {\n                aOnes < bOnes\n            }\n        })", "  \
    \      arr.sortWith((a, b) => {\n            val aOnes = a.toBinaryString.count(_\
    \ == '1')\n            val bOnes = b.toBinaryString.count(_ == '1')\n        \
    \    if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a,\
    \ b) => {\n            val aOnes = a.toBinaryString.count(_ == '1')\n        \
    \    val bOnes = b.toBinaryString.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        val ones = arr.map(x => (x,\
    \ x.toBinaryString.count(_ == '1'))).sortBy(_._2)\n        ones.map(_._1).sortBy(x\
    \ => x)", "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val aBits\
    \ = a.toBinaryString.count(_ == '1')\n            val bBits = b.toBinaryString.count(_\
    \ == '1')\n            if (aBits == bBits) {\n                a < b\n        \
    \    } else {\n                aBits < bBits\n            }\n        })", "  \
    \      arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val a1\
    \ = a.toBinaryString.filter(_ == '1').length\n            val b1 = b.toBinaryString.filter(_\
    \ == '1').length\n            if (a1 == b1) a < b else a1 < b1\n        })", " \
    \       arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            aBinary.count(_ == '1')\
    \ < bBinary.count(_ == '1') || (aBinary.count(_ == '1') == bBinary.count(_ ==\
    \ '1') && a < b)\n        })", "        arr.sortWith((a, b) => {\n           \
    \ val a1 = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  val sorted = arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n\
    \            val bBin = b.toBinaryString\n            val aOnes = aBin.count(_\
    \ == '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })\n        sorted", "        arr.sortWith((x,\
    \ y) => {\n            val x1 = x.toBinaryString.count(_ == '1')\n           \
    \ val y1 = y.toBinaryString.count(_ == '1')\n            if (x1 == y1) x < y else\
    \ x1 < y1\n        })", "        arr.sortWith((a, b) => {\n            val a1\
    \ = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_ ==\
    \ '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n            if\
    \ (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.filter(c => c == '1').length\n            val\
    \ bOnes = bBinary.filter(c => c == '1').length\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val a1 = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n       \
    \     val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ == '1')\n\
    \            val bOnes = bBin.count(_ == '1')\n            if (aOnes == bOnes)\
    \ a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n \
    \           val aBits = a.toBinaryString.count(_ == '1')\n            val bBits\
    \ = b.toBinaryString.count(_ == '1')\n            if (aBits == bBits) a < b else\
    \ aBits < bBits\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ a1 = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  val sorted = arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) {\n                a < b\n            } else {\n                aOnes\
    \ < bOnes\n            }\n        })\n        sorted", "        arr.sortWith((a,\
    \ b) => {\n            val a1 = a.toBinaryString.count(_ == '1')\n           \
    \ val b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })"]
stop_tokens:
- "\n    }\n"
