name: HumanEval_86_anti_shuffle
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes a string and returns an ordered version of it.\n\
  \    // Ordered version of string, is a string where all words (separated by space)\n\
  \    // are replaced by a new word where all the characters arranged in\n    //\
  \ ascending order based on ascii value.\n    // Note: You should keep the order\
  \ of words and blank spaces in the sentence.\n    // For example:\n    // >>> antiShuffle((\"\
  Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"hello\"))\n    // (\"ehllo\"\
  )\n    // >>> antiShuffle((\"Hello World!!!\"))\n    // (\"Hello !!!Wdlor\")\n \
  \   def antiShuffle(s : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
  )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
  \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
  abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
  Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
  Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst .Rboot\
  \ How aer ?ouy\")));\n    }\n\n}\n"
completions: ["        val words = s.split(\" \")\n        val sortedWords = words.map(word\
    \ => word.sorted)\n        val result = new StringBuilder\n        for (i <- 0\
    \ until words.length) {\n            result.append(sortedWords(i))\n         \
    \   if (i != words.length - 1) result.append(\" \")\n        }\n        result.toString",
  "        val words = s.split(\" \")\n        val ans = new StringBuilder\n     \
    \   for (i <- 0 until words.length) {\n            val word = words(i)\n     \
    \       val sorted = word.toCharArray.sorted\n            ans.append(sorted)\n\
    \            if (i != words.length - 1) ans.append(\" \")\n        }\n       \
    \ ans.toString", '        s.split(" ").map(x => x.sorted).mkString(" ")', "  \
    \      val words = s.split(\" \")\n        val sortedWords = words.map(word =>\
    \ word.sorted)\n        val result = new StringBuilder\n        for (i <- 0 until\
    \ words.length) {\n            result.append(sortedWords(i))\n            if (i\
    \ != words.length - 1) result.append(\" \")\n        }\n        result.toString",
  '        s.split(" ").map(x => x.toCharArray.sorted.mkString).mkString(" ")', '        s.split("
    ").map(x => x.toCharArray.sorted.mkString).mkString(" ")', '        s.split("
    ").map(x => x.toList.sorted.mkString).mkString(" ")', '        s.split(" ").map(x
    => x.toList.sorted.mkString).mkString(" ")', "        val words = s.split(\" \"\
    )\n        val sortedWords = words.map(x => x.sorted)\n        val result = new\
    \ StringBuilder\n        for (i <- 0 until words.length) {\n            result.append(sortedWords(i))\n\
    \            if (i < words.length - 1) result.append(\" \")\n        }\n     \
    \   result.toString", '        s.split(" ").map(x => x.sorted).mkString(" ")',
  "        val words = s.split(\" \")\n        val newWords = words.map(word => word.toList.sorted.mkString)\n\
    \        newWords.mkString(\" \")", '        s.split(" ").map(x => x.sorted).mkString("
    ")', "        val words = s.split(\" \")\n        val newWords = words.map(x =>\
    \ x.toList.sorted.mkString)\n        newWords.mkString(\" \")", "        val words\
    \ = s.split(\" \")\n        val sortedWords = words.map(word => word.sorted)\n\
    \        sortedWords.mkString(\" \")", "        val words = s.split(\" \")\n \
    \       val newWords = words.map(x => x.toList.sorted.mkString)\n        newWords.mkString(\"\
    \ \")", "        val words = s.split(\" \")\n        val newWords = words.map(word\
    \ => word.toList.sorted.mkString)\n        newWords.mkString(\" \")", "      \
    \  val words = s.split(\" \")\n        val sortedWords = words.map(word => word.sorted)\n\
    \        val result = new StringBuilder\n        for (i <- 0 until words.length)\
    \ {\n            result.append(sortedWords(i))\n            if (i != words.length\
    \ - 1) result.append(\" \")\n        }\n        result.toString", "        val\
    \ words = s.split(\" \")\n        var result = \"\"\n        for (word <- words)\
    \ {\n            result += word.sorted\n            result += \" \"\n        }\n\
    \        result.trim", "        val words = s.split(\" \")\n        val sortedWords\
    \ = words.map(word => word.sorted)\n        val result = new StringBuilder\n \
    \       for (i <- 0 until words.length) {\n            result.append(sortedWords(i))\n\
    \            if (i < words.length - 1) result.append(\" \")\n        }\n     \
    \   result.toString", '        s.split(" ").map(x => x.sorted).mkString(" ")']
stop_tokens:
- "\n    }\n"
