name: HumanEval_114_minSubArraySum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of integers nums, find the minimum sum of any non-empty sub-list\n\
  \    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    //\
  \ >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    // (-6l)\n\
  \    def minSubArraySum(nums : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(minSubArraySum((List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong))) == (1l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong, 2l.toLong, -10l.toLong))) == (-14l));\n    assert(minSubArraySum((List[Long](-9999999999999999l.toLong)))\
  \ == (-9999999999999999l));\n    assert(minSubArraySum((List[Long](0l.toLong, 10l.toLong,\
  \ 20l.toLong, 1000000l.toLong))) == (0l));\n    assert(minSubArraySum((List[Long](-1l.toLong,\
  \ -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
  \ -1l.toLong, -2l.toLong, -3l.toLong, 10l.toLong, -5l.toLong))) == (-6l));\n   \
  \ assert(minSubArraySum((List[Long](10l.toLong, 11l.toLong, 13l.toLong, 8l.toLong,\
  \ 3l.toLong, 4l.toLong))) == (3l));\n    assert(minSubArraySum((List[Long](100l.toLong,\
  \ -33l.toLong, 32l.toLong, -1l.toLong, 0l.toLong, -2l.toLong))) == (-33l));\n  \
  \  assert(minSubArraySum((List[Long](-10l.toLong))) == (-10l));\n    assert(minSubArraySum((List[Long](7l.toLong)))\
  \ == (7l));\n    assert(minSubArraySum((List[Long](1l.toLong, -1l.toLong))) == (-1l));\n\
  \    }\n\n}\n"
completions: ["        // Fill this in.\n        var minSum = Long.MaxValue\n    \
    \    var sum = 0l\n        for (i <- nums) {\n            sum += i\n         \
    \   if (sum < minSum) minSum = sum\n            if (sum > 0) sum = 0\n       \
    \ }\n        minSum", "        // Fill this in.\n        val n = nums.length\n\
    \        val dp = Array.fill(n)(0l)\n        dp(0) = nums(0)\n        for (i <-\
    \ 1 until n) {\n            dp(i) = min(dp(i - 1) + nums(i), nums(i))\n      \
    \  }\n        dp.min", "        // Fill this in.\n        var min = nums(0)\n\
    \        var sum = 0l\n        for (i <- nums) {\n            sum += i\n     \
    \       if (sum < min) min = sum\n            if (sum > 0) sum = 0\n        }\n\
    \        min", "        // Fill this in.\n        var minSum : Long = 0\n    \
    \    var currSum : Long = 0\n        for (i <- 0 until nums.length) {\n      \
    \      currSum += nums(i)\n            if (currSum < minSum) minSum = currSum\n\
    \            if (currSum > 0) currSum = 0\n        }\n        return minSum",
  "        // Fill this in.\n        var min = nums(0)\n        var sum = 0l\n   \
    \     for (num <- nums) {\n            sum += num\n            if (sum < min)\
    \ min = sum\n            if (sum > 0) sum = 0\n        }\n        min", "    \
    \    // Fill this in.\n        var minSum = Long.MaxValue\n        var sum = 0l\n\
    \        for (num <- nums) {\n            sum += num\n            if (sum < minSum)\
    \ minSum = sum\n            if (sum > 0) sum = 0\n        }\n        minSum",
  "        // Fill this in.\n        var minSum = nums(0)\n        var sum = 0l\n\
    \        for (i <- nums) {\n            sum += i\n            if (sum < minSum)\
    \ minSum = sum\n            if (sum > 0) sum = 0\n        }\n        minSum",
  "        // Fill this in.\n        var minSum = Long.MaxValue\n        var sum =\
    \ 0l\n        for (num <- nums) {\n            sum += num\n            if (sum\
    \ < minSum) minSum = sum\n            if (sum > 0) sum = 0\n        }\n      \
    \  minSum", "        // Fill this in.\n        var min = Long.MaxValue\n     \
    \   var sum = 0l\n        for (i <- nums) {\n            sum += i\n          \
    \  if (sum < min) min = sum\n            if (sum > 0) sum = 0\n        }\n   \
    \     min", "        // Fill this in.\n        var minSum = Long.MaxValue\n  \
    \      var sum = 0l\n        for (num <- nums) {\n            sum += num\n   \
    \         if (sum < minSum) minSum = sum\n            if (sum > 0) sum = 0\n \
    \       }\n        minSum", "        // Fill this in.\n        var minSum = nums(0)\n\
    \        var sum = 0l\n        for (num <- nums) {\n            sum += num\n \
    \           if (sum < minSum) minSum = sum\n            if (sum > 0) sum = 0\n\
    \        }\n        minSum", "        // Fill this in.\n        var min = nums(0)\n\
    \        var sum = 0l\n        for (i <- nums) {\n            sum += i\n     \
    \       if (sum < min) min = sum\n            if (sum > 0) sum = 0\n        }\n\
    \        min", "        // Fill this in.\n        val n = nums.length\n      \
    \  val dp = Array.fill(n)(0l)\n        dp(0) = nums(0)\n        var min = dp(0)\n\
    \        for (i <- 1 until n) {\n            dp(i) = max(dp(i - 1) + nums(i),\
    \ nums(i))\n            min = min min dp(i)\n        }\n        min", "      \
    \  // Fill this in.\n        var minSum = nums(0)\n        var sum = 0l\n    \
    \    for (num <- nums) {\n            sum += num\n            if (sum < minSum)\
    \ minSum = sum\n            if (sum > 0) sum = 0\n        }\n        minSum",
  "        // Fill this in.\n        var min = Long.MaxValue\n        var sum = 0l\n\
    \        for (i <- nums) {\n            sum += i\n            if (sum < min) min\
    \ = sum\n            if (sum > 0) sum = 0\n        }\n        min", "        //\
    \ Fill this in.\n        var minSum = nums(0)\n        var sum = 0l\n        for\
    \ (i <- nums) {\n            sum += i\n            if (sum < minSum) minSum =\
    \ sum\n            if (sum > 0) sum = 0\n        }\n        minSum", "       \
    \ // Fill this in.\n        var min = nums(0)\n        var sum = 0l\n        for\
    \ (i <- nums) {\n            sum += i\n            if (sum < min) min = sum\n\
    \            if (sum > 0) sum = 0\n        }\n        min", "        // Fill this\
    \ in.\n        var minSum = Long.MaxValue\n        var sum = 0l\n        for (i\
    \ <- nums) {\n            sum += i\n            if (sum < minSum) minSum = sum\n\
    \            if (sum > 0) sum = 0\n        }\n        minSum", "        // Fill\
    \ this in.\n        var min = 0l\n        var sum = 0l\n        for (i <- nums)\
    \ {\n            sum += i\n            if (sum < min) min = sum\n        }\n \
    \       min", "        // Fill this in.\n        var min = Long.MaxValue\n   \
    \     var sum = 0l\n        for (i <- nums) {\n            sum += i\n        \
    \    if (sum < min) min = sum\n            if (sum > 0) sum = 0\n        }\n \
    \       min"]
stop_tokens:
- "\n    }\n"
