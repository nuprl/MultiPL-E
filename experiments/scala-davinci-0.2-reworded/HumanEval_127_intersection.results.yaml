language: scala
name: HumanEval_127_intersection
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                if (length\
    \ == 2) {\n                    \"YES\"\n                } else {\n           \
    \         if (length % 2 == 0) {\n                        \"NO\"\n           \
    \         } else {\n                        var isPrime = true\n             \
    \           for (i <- 3 to sqrt(length).toInt by 2) {\n                      \
    \      if (length % i == 0) {\n                                isPrime = false\n\
    \                            }\n                        }\n                  \
    \      if (isPrime) {\n                            \"YES\"\n                 \
    \       } else {\n                            \"NO\"\n                       \
    \ }\n                    }\n                }\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt_ieicz9.scala:59)\n\tat Problem.main(tmpt_ieicz9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3l to sqrt(length).toLong\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprqjeehbh.scala:41)\n\tat Problem.main(tmprqjeehbh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2l until length) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n\
    \    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l,\
    \ 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)),\
    \ ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8307xxk0.scala:39)\n\tat Problem.main(tmp8307xxk0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) {\n\
    \            \"NO\"\n        } else {\n            val length = end - start +\
    \ 1\n            if (length == 1) {\n                \"NO\"\n            } else\
    \ {\n                val sqrt = sqrt(length).toLong\n                if (length\
    \ == sqrt * sqrt) {\n                    \"NO\"\n                } else {\n  \
    \                  var isPrime = true\n                    for (i <- 2l to sqrt)\
    \ {\n                        if (length % i == 0) {\n                        \
    \    isPrime = false\n                        }\n                    }\n     \
    \               if (isPrime) {\n                        \"YES\"\n            \
    \        } else {\n                        \"NO\"\n                    }\n   \
    \             }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpy0lffqyq.scala:33:27 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2 to sqrt(length).toInt) {\n       \
    \     if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo984tdm6.scala:39)\n\tat Problem.main(tmpo984tdm6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) {\n         \
    \   return \"NO\"\n        }\n        val start = max(start1, start2)\n      \
    \  val end = min(end1, end2)\n        if (start > end) {\n            return \"\
    NO\"\n        }\n        val length = end - start + 1\n        if (length == 1)\
    \ {\n            return \"NO\"\n        }\n        if (length == 2) {\n      \
    \      return \"YES\"\n        }\n        for (i <- 2l until length) {\n     \
    \       if (length % i == 0) {\n                return \"NO\"\n            }\n\
    \        }\n        \"YES\"\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l,\
    \ 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)),\
    \ ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"NO\")));\n\
    \    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n    assert(intersection(((-2l,\
    \ -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpklwi0sfs.scala:50)\n\tat Problem.main(tmpklwi0sfs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2l until length) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n\
    \    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l,\
    \ 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)),\
    \ ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8307xxk0.scala:39)\n\tat Problem.main(tmp8307xxk0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            if (isPrime(end - start + 1)) {\n                \"YES\"\
    \n            } else {\n                \"NO\"\n            }\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)),\
    \ ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfgy3010s.scala:31:16 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mif\e[0m (isPrime(end - start + \e[31m1\e\
    [0m)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \              Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                val sqrt\
    \ = sqrt(length).toLong\n                var isPrime = true\n                for\
    \ (i <- 2l to sqrt) {\n                    if (length % i == 0) {\n          \
    \              isPrime = false\n                    }\n                }\n   \
    \             if (isPrime) {\n                    \"YES\"\n                } else\
    \ {\n                    \"NO\"\n                }\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)),\
    \ ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuog82q1g.scala:35:27 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        for (i <- 2l until length) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn2p2izqc.scala:40)\n\tat Problem.main(tmpn2p2izqc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                if (length\
    \ == 2) {\n                    \"YES\"\n                } else {\n           \
    \         if (length % 2 == 0) {\n                        \"NO\"\n           \
    \         } else {\n                        var isPrime = true\n             \
    \           for (i <- 3 to sqrt(length).toInt by 2) {\n                      \
    \      if (length % i == 0) {\n                                isPrime = false\n\
    \                            }\n                        }\n                  \
    \      if (isPrime) {\n                            \"YES\"\n                 \
    \       } else {\n                            \"NO\"\n                       \
    \ }\n                    }\n                }\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt_ieicz9.scala:59)\n\tat Problem.main(tmpt_ieicz9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3k8kupki.scala:41)\n\tat Problem.main(tmp3k8kupki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) {\n\
    \            \"NO\"\n        } else {\n            val length = end - start +\
    \ 1\n            if (length == 1) {\n                \"NO\"\n            } else\
    \ {\n                val primes = ArrayBuffer[Long]()\n                primes\
    \ += 2\n                var i = 3\n                while (i <= length) {\n   \
    \                 var isPrime = true\n                    for (prime <- primes)\
    \ {\n                        if (i % prime == 0) {\n                         \
    \   isPrime = false\n                            break\n                     \
    \   }\n                    }\n                    if (isPrime) {\n           \
    \             primes += i\n                    }\n                    i += 2\n\
    \                }\n                if (primes.contains(length)) {\n         \
    \           \"YES\"\n                } else {\n                    \"NO\"\n  \
    \              }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9rjvcy91.scala:41:28 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                            break\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val (start, end) = (max(start1, start2), min(end1,\
    \ end2))\n        if (start > end) \"NO\"\n        else if (isPrime(end - start\
    \ + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdvlrbmmb.scala:28:17 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3k8kupki.scala:41)\n\tat Problem.main(tmp3k8kupki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (end1 < start2 || end2 < start1) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start == end) return \"NO\"\n        if (isPrime(end - start + 1))\
    \ return \"YES\"\n        \"NO\"\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l,\
    \ 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)),\
    \ ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"NO\")));\n\
    \    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n    assert(intersection(((-2l,\
    \ -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuwhg0tj6.scala:30:12 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mif\e[0m (isPrime(end - start + \e[31m1\e\
    [0m)) \e[33mreturn\e[0m \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: isPrime\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659805412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) return\
    \ \"NO\"\n        val length = end - start + 1\n        if (length == 1) return\
    \ \"NO\"\n        if (length == 2) return \"YES\"\n        if (length % 2 == 0)\
    \ return \"NO\"\n        for (i <- 3 to sqrt(length).toInt by 2) {\n         \
    \   if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaslzddfm.scala:38)\n\tat Problem.main(tmpaslzddfm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) \"\
    NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)),\
    \ ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1sjb2byo.scala:27:17 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2 to sqrt(length).toInt) {\n       \
    \     if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo984tdm6.scala:39)\n\tat Problem.main(tmpo984tdm6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                val sqrt\
    \ = sqrt(length).toLong\n                var isPrime = true\n                for\
    \ (i <- 2l to sqrt) {\n                    if (length % i == 0) {\n          \
    \              isPrime = false\n                    }\n                }\n   \
    \             if (isPrime) {\n                    \"YES\"\n                } else\
    \ {\n                    \"NO\"\n                }\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)),\
    \ ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuog82q1g.scala:35:27 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3k8kupki.scala:41)\n\tat Problem.main(tmp3k8kupki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3k8kupki.scala:41)\n\tat Problem.main(tmp3k8kupki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                val sqrt\
    \ = sqrt(length).toLong\n                val isPrime = (2l to sqrt).forall(length\
    \ % _ != 0)\n                if (isPrime) {\n                    \"YES\"\n   \
    \             } else {\n                    \"NO\"\n                }\n      \
    \      }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_z9y_oi3.scala:35:27 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) {\n\
    \            \"NO\"\n        } else {\n            val length = end - start +\
    \ 1\n            if (length == 1) {\n                \"NO\"\n            } else\
    \ {\n                val primes = ArrayBuffer(2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l,\
    \ 23l, 29l, 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l, 67l, 71l, 73l, 79l, 83l, 89l,\
    \ 97l, 101l, 103l, 107l, 109l, 113l, 127l, 131l, 137l, 139l, 149l, 151l, 157l,\
    \ 163l, 167l, 173l, 179l, 181l, 191l, 193l, 197l, 199l, 211l, 223l, 227l, 229l,\
    \ 233l, 239l, 241l, 251l, 257l, 263l, 269l, 271l, 277l, 281l, 283l, 293l, 307l,\
    \ 311l, 313l, 317l, 331l, 337l, 347l, 349l, 353l, 359l, 367l, 373l, 379l, 383l,\
    \ 389l, 397l, 401l, 409l, 419l, 421l, 431l, 433l, 439l, 443l, 449l, 457l, 461l,\
    \ 463l, 467l, 479l, 487l, 491l, 499l, 503l, 509l, 521l, 523l, 541l, 547l, 557l,\
    \ 563l, 569l, 571l, 577l, 587l, 593l, 599l, 601l, 607l, 613l, 617l, 619l, 631l,\
    \ 641l, 643l, 647l, 653l, 659l, 661l, 673l, 677l, 683l, 691l, 701l, 709l\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)),\
    \ ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpekutb6sz.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpekutb6sz.scala:47:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m47 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpekutb6sz.scala:46:1 ---------------------\e[0m\e[0m\n\
    \e[31m46 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpekutb6sz.scala:35:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m35 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val len = end - start + 1\n \
    \       if (len == 1) return \"NO\"\n        if (len == 2) return \"YES\"\n  \
    \      if (len % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(len).toInt\
    \ by 2) {\n            if (len % i == 0) return \"NO\"\n        }\n        \"\
    YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpquftdpgu.scala:41)\n\tat Problem.main(tmpquftdpgu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                val isPrime\
    \ = (2l to length / 2).forall(x => length % x != 0)\n                if (isPrime)\
    \ {\n                    \"YES\"\n                } else {\n                 \
    \   \"NO\"\n                }\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n\
    \    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l,\
    \ 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)),\
    \ ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprtyzlhlj.scala:46)\n\tat Problem.main(tmprtyzlhlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2 to sqrt(length).toInt) {\n       \
    \     if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo984tdm6.scala:39)\n\tat Problem.main(tmpo984tdm6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (start ==\
    \ end) \"YES\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0oa__73s.scala:30:17 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length < 2) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        if (length % 2 == 0) return \"NO\"\n        for\
    \ (i <- 3 to sqrt(length).toInt by 2) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptnajv36o.scala:40)\n\tat Problem.main(tmptnajv36o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                if (length\
    \ == 2) {\n                    \"YES\"\n                } else {\n           \
    \         if (length % 2 == 0) {\n                        \"NO\"\n           \
    \         } else {\n                        val sqrt = sqrt(length).toLong\n \
    \                       var isPrime = true\n                        for (i <-\
    \ 3l to sqrt by 2) {\n                            if (length % i == 0) {\n   \
    \                             isPrime = false\n                            }\n\
    \                        }\n                        if (isPrime) {\n         \
    \                   \"YES\"\n                        } else {\n              \
    \              \"NO\"\n                        }\n                    }\n    \
    \            }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_mmv7qp3.scala:41:35 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                        \e[33mval\e[0m \e[36msqrt\e[0m\
    \ = sqrt(length).toLong\n\e[31m\e[31m   |\e[0m                               \
    \    ^\e[0m\n\e[31m   |\e[0m                                   Recursive \e[33mvalue\e\
    [0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) \"\
    NO\"\n        else if (start == end) \"YES\"\n        else if (start + 1 == end)\
    \ \"YES\"\n        else if (start + 2 == end) \"NO\"\n        else if (start +\
    \ 3 == end) \"YES\"\n        else if (start + 4 == end) \"NO\"\n        else if\
    \ (start + 5 == end) \"YES\"\n        else if (start + 6 == end) \"NO\"\n    \
    \    else if (start + 7 == end) \"YES\"\n        else if (start + 8 == end) \"\
    NO\"\n        else if (start + 9 == end) \"NO\"\n        else \"YES\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwo2eav3r.scala:40)\n\tat Problem.main(tmpwo2eav3r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805420
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) return\
    \ \"NO\"\n        val length = end - start + 1\n        if (length == 1) return\
    \ \"NO\"\n        if (length == 2) return \"YES\"\n        for (i <- 2l until\
    \ length) {\n            if (length % i == 0) return \"NO\"\n        }\n     \
    \   \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaq6fff_z.scala:37)\n\tat Problem.main(tmpaq6fff_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805422
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) return\
    \ \"NO\"\n        val length = end - start + 1\n        if (length == 1) return\
    \ \"NO\"\n        for (i <- 2l until length) {\n            if (length % i ==\
    \ 0) return \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg_ewns3d.scala:36)\n\tat Problem.main(tmpg_ewns3d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805421
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3k8kupki.scala:41)\n\tat Problem.main(tmp3k8kupki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) return\
    \ \"NO\"\n        val length = end - start + 1\n        if (length == 1) return\
    \ \"NO\"\n        if (length == 2) return \"YES\"\n        for (i <- 2l until\
    \ length) {\n            if (length % i == 0) return \"NO\"\n        }\n     \
    \   \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaq6fff_z.scala:37)\n\tat Problem.main(tmpaq6fff_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805422
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) {\n         \
    \   return \"NO\"\n        }\n        val start = max(start1, start2)\n      \
    \  val end = min(end1, end2)\n        if (start > end) {\n            return \"\
    NO\"\n        }\n        val length = end - start + 1\n        if (length == 1)\
    \ {\n            return \"NO\"\n        }\n        if (length == 2) {\n      \
    \      return \"YES\"\n        }\n        for (i <- 2 to sqrt(length).toInt) {\n\
    \            if (length % i == 0) {\n                return \"NO\"\n         \
    \   }\n        }\n        \"YES\"\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l,\
    \ 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)),\
    \ ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"NO\")));\n\
    \    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n    assert(intersection(((-2l,\
    \ -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnzjwq_25.scala:50)\n\tat Problem.main(tmpnzjwq_25.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805422
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        for (i <- 2l until length) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn2p2izqc.scala:40)\n\tat Problem.main(tmpn2p2izqc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val len =\
    \ end - start + 1\n        if (len == 1) return \"NO\"\n        if (len == 2)\
    \ return \"YES\"\n        for (i <- 2l until len) {\n            if (len % i ==\
    \ 0) return \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzsb27trv.scala:39)\n\tat Problem.main(tmpzsb27trv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805422
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) return\
    \ \"NO\"\n        val length = end - start + 1\n        if (length == 1) return\
    \ \"NO\"\n        if (length == 2) return \"YES\"\n        for (i <- 2 to sqrt(length).toInt)\
    \ {\n            if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgilkvqf8.scala:37)\n\tat Problem.main(tmpgilkvqf8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start <= end) {\n            if (isPrime(end\
    \ - start + 1)) \"YES\" else \"NO\"\n        } else \"NO\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n\
    \    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l,\
    \ 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)),\
    \ ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpew90ddak.scala:29:16 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m (isPrime(end - start + \e[31m1\e\
    [0m)) \e[31m\"YES\"\e[0m \e[33melse\e[0m \e[31m\"NO\"\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: isPrime\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805418
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                if (length\
    \ == 2) {\n                    \"YES\"\n                } else {\n           \
    \         if (length % 2 == 0) {\n                        \"NO\"\n           \
    \         } else {\n                        var isPrime = true\n             \
    \           for (i <- 3 to sqrt(length).toInt by 2) {\n                      \
    \      if (length % i == 0) {\n                                isPrime = false\n\
    \                            }\n                        }\n                  \
    \      if (isPrime) {\n                            \"YES\"\n                 \
    \       } else {\n                            \"NO\"\n                       \
    \ }\n                    }\n                }\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt_ieicz9.scala:59)\n\tat Problem.main(tmpt_ieicz9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        if (isPrime(end - start + 1))\
    \ return \"YES\"\n        return \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3o5j_ew9.scala:30:12 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mif\e[0m (isPrime(end - start + \e[31m1\e\
    [0m)) \e[33mreturn\e[0m \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: isPrime\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659805417
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3k8kupki.scala:41)\n\tat Problem.main(tmp3k8kupki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) return\
    \ \"NO\"\n        val length = end - start + 1\n        if (length == 1) return\
    \ \"NO\"\n        if (length == 2) return \"YES\"\n        for (i <- 2 to (length\
    \ / 2).toInt) {\n            if (length % i == 0) return \"NO\"\n        }\n \
    \       \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwy9hbraj.scala:37)\n\tat Problem.main(tmpwy9hbraj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                val sqrt\
    \ = sqrt(length).toLong\n                val isPrime = (2l to sqrt).forall(length\
    \ % _ != 0)\n                if (isPrime) {\n                    \"YES\"\n   \
    \             } else {\n                    \"NO\"\n                }\n      \
    \      }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_z9y_oi3.scala:35:27 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        for (i <- 2 to sqrt(length).toInt) {\n            if (length % i ==\
    \ 0) return \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3m4i1q2_.scala:40)\n\tat Problem.main(tmp3m4i1q2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) \"\
    NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)),\
    \ ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1sjb2byo.scala:27:17 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3k8kupki.scala:41)\n\tat Problem.main(tmp3k8kupki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                val sqrt\
    \ = sqrt(length).toLong\n                var isPrime = true\n                for\
    \ (i <- 2l to sqrt) {\n                    if (length % i == 0) {\n          \
    \              isPrime = false\n                    }\n                }\n   \
    \             if (isPrime) {\n                    \"YES\"\n                } else\
    \ {\n                    \"NO\"\n                }\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)),\
    \ ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuog82q1g.scala:35:27 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                val sqrt\
    \ = sqrt(length).toLong\n                val isPrime = (2l to sqrt).forall(length\
    \ % _ != 0)\n                if (isPrime) {\n                    \"YES\"\n   \
    \             } else {\n                    \"NO\"\n                }\n      \
    \      }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_z9y_oi3.scala:35:27 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        val sqrt = sqrt(length).toLong\n        for (i\
    \ <- 2l to sqrt) {\n            if (length % i == 0) return \"NO\"\n        }\n\
    \        \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi38prj_a.scala:32:19 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) \"\
    NO\"\n        else if (start == end) \"YES\"\n        else {\n            val\
    \ length = end - start + 1\n            if (length == 2) \"YES\"\n           \
    \ else {\n                val sqrt = sqrt(length).toLong\n                var\
    \ isPrime = true\n                for (i <- 2l to sqrt) {\n                  \
    \  if (length % i == 0) {\n                        isPrime = false\n         \
    \               i = sqrt\n                    }\n                }\n         \
    \       if (isPrime) \"YES\"\n                else \"NO\"\n            }\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp89fecqjp.scala:32:27 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp89fecqjp.scala:37:26 -----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                        i = sqrt\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \    Reassignment to val i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805422
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2 to sqrt(length).toInt) {\n       \
    \     if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo984tdm6.scala:39)\n\tat Problem.main(tmpo984tdm6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2 to sqrt(length).toInt) {\n       \
    \     if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo984tdm6.scala:39)\n\tat Problem.main(tmpo984tdm6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                val sqrt\
    \ = sqrt(length).toLong\n                val isPrime = (2l to sqrt).forall(length\
    \ % _ != 0)\n                if (isPrime) {\n                    \"YES\"\n   \
    \             } else {\n                    \"NO\"\n                }\n      \
    \      }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_z9y_oi3.scala:35:27 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2l until length) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n\
    \    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l,\
    \ 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)),\
    \ ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8307xxk0.scala:39)\n\tat Problem.main(tmp8307xxk0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3k8kupki.scala:41)\n\tat Problem.main(tmp3k8kupki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length < 2) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5w90krpj.scala:41)\n\tat Problem.main(tmp5w90krpj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805426
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) return\
    \ \"NO\"\n        val length = end - start + 1\n        if (length == 1) return\
    \ \"NO\"\n        if (length == 2) return \"YES\"\n        for (i <- 2l until\
    \ length) {\n            if (length % i == 0) return \"NO\"\n        }\n     \
    \   \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaq6fff_z.scala:37)\n\tat Problem.main(tmpaq6fff_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3k8kupki.scala:41)\n\tat Problem.main(tmp3k8kupki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) return\
    \ \"NO\"\n        val length = end - start + 1\n        if (length == 1) return\
    \ \"NO\"\n        if (length == 2) return \"YES\"\n        for (i <- 2 to sqrt(length).toInt)\
    \ {\n            if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgilkvqf8.scala:37)\n\tat Problem.main(tmpgilkvqf8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805422
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val (start, end) = (max(start1, start2), min(end1, end2))\n        if\
    \ (start > end) return \"NO\"\n        val length = end - start + 1\n        if\
    \ (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n     \
    \   val sqrtLength = sqrt(length).toLong\n        for (i <- 2l to sqrtLength)\
    \ {\n            if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppny9cl3m.scala:40)\n\tat Problem.main(tmppny9cl3m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805426
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        for (i <- 2l until length) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn2p2izqc.scala:40)\n\tat Problem.main(tmpn2p2izqc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) {\n\
    \            \"NO\"\n        } else {\n            val length = end - start +\
    \ 1\n            if (length == 1) {\n                \"NO\"\n            } else\
    \ {\n                val primes = ArrayBuffer[Long]()\n                primes\
    \ += 2\n                for (i <- 3 to length.toInt by 2) {\n                \
    \    var isPrime = true\n                    for (j <- 0 until primes.length)\
    \ {\n                        if (i % primes(j) == 0) {\n                     \
    \       isPrime = false\n                            break\n                 \
    \       }\n                    }\n                    if (isPrime) primes += i\n\
    \                }\n                if (primes.contains(length)) \"YES\" else\
    \ \"NO\"\n            }\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l,\
    \ 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)),\
    \ ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"NO\")));\n\
    \    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n    assert(intersection(((-2l,\
    \ -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk6jr20fa.scala:40:28 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                            break\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805423
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2 to sqrt(length).toInt) {\n       \
    \     if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo984tdm6.scala:39)\n\tat Problem.main(tmpo984tdm6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) \"\
    NO\"\n        else if (start == end) \"YES\"\n        else if (start + 1 == end)\
    \ \"YES\"\n        else if (start + 2 == end) \"NO\"\n        else if (start +\
    \ 3 == end) \"YES\"\n        else if (start + 4 == end) \"NO\"\n        else if\
    \ (start + 5 == end) \"YES\"\n        else if (start + 6 == end) \"NO\"\n    \
    \    else if (start + 7 == end) \"YES\"\n        else if (start + 8 == end) \"\
    NO\"\n        else if (start + 9 == end) \"NO\"\n        else if (start + 10 ==\
    \ end) \"NO\"\n        else if (start + 11 == end) \"YES\"\n        else if (start\
    \ + 12 == end) \"NO\"\n        else if (start + 13 == end) \"YES\"\n        else\
    \ if (start + 14 == end) \"NO\"\n        else if (start + 15 == end) \"NO\"\n\
    \        else if (start + 16 == end) \"NO\"\n        else if (start + 17 == end)\
    \ \"YES\"\n        else if (start + 18 == end) \"NO\"\n        else if (start\
    \ + 19 == end) \"YES\"\n        else if (start + 20 == end) \"NO\"\n        else\
    \ if (start + 21 == end) \"NO\"\n        else if (start + 22 == end) \"NO\"\n\
    \        else if (start + 23 == end) \"YES\"\n        else if (start + 24 == end)\
    \ \"NO\"\n        else if (start + 25 == end) \"NO\"\n        else if (start +\
    \ 26 == end) \"NO\"\n        else if (start + 27 == end) \"NO\"\n        else\
    \ if (start + 28 == end) \"NO\"\n        else if (start + 29 == end) \"YES\"\n\
    \        else if (start + 30 == end) \"NO\"\n        else if (start + 31 == end)\
    \ \"YES\"\n        else if (start + 32 == end) \"NO\"\n        else if (\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)),\
    \ ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7yqg_qyt.scala:60:17 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (\n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                val sqrt\
    \ = sqrt(length).toLong\n                val isPrime = (2l to sqrt).forall(length\
    \ % _ != 0)\n                if (isPrime) {\n                    \"YES\"\n   \
    \             } else {\n                    \"NO\"\n                }\n      \
    \      }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_z9y_oi3.scala:35:27 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) {\n\
    \            \"NO\"\n        } else {\n            val length = end - start +\
    \ 1\n            if (length == 1) {\n                \"NO\"\n            } else\
    \ {\n                val primes = ArrayBuffer(2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l,\
    \ 23l, 29l, 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l, 67l, 71l, 73l, 79l, 83l, 89l,\
    \ 97l, 101l, 103l, 107l, 109l, 113l, 127l, 131l, 137l, 139l, 149l, 151l, 157l,\
    \ 163l, 167l, 173l, 179l, 181l, 191l, 193l, 197l, 199l, 211l, 223l, 227l, 229l,\
    \ 233l, 239l, 241l, 251l, 257l, 263l, 269l, 271l, 277l, 281l, 283l, 293l, 307l,\
    \ 311l, 313l, 317l, 331l, 337l, 347l, 349l, 353l, 359l, 367l, 373l, 379l, 383l,\
    \ 389l, 397l, 401l, 409l, 419l, 421l, 431l, 433l, 439l, 443l, 449l, 457l, 461l,\
    \ 463l, 467l, 479l, 487l, 491l, 499l, 503l, 509l, 521l, 523l, 541l, 547l, 557l,\
    \ 563l, 569l, 571l, 577l, 587l, 593l, 599l, 601l, 607l, 613l, 617l, 619l, 631l,\
    \ 641l, 643l, 647l, 653l, 659l, 661l, 673l, 677l, 683l, 691l, 701l, 709l\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)),\
    \ ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpekutb6sz.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpekutb6sz.scala:47:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m47 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpekutb6sz.scala:46:1 ---------------------\e[0m\e[0m\n\
    \e[31m46 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpekutb6sz.scala:35:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m35 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2 to sqrt(length).toInt) {\n       \
    \     if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo984tdm6.scala:39)\n\tat Problem.main(tmpo984tdm6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        val sqrtLength\
    \ = sqrt(length).toLong\n        if (length == sqrtLength * sqrtLength) return\
    \ \"NO\"\n        for (i <- 2l to sqrtLength) {\n            if (length % i ==\
    \ 0) return \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp10nx1fsu.scala:40)\n\tat Problem.main(tmp10nx1fsu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        val sqrt = sqrt(length).toLong\n\
    \        for (i <- 3l to sqrt) {\n            if (length % i == 0) return \"NO\"\
    \n        }\n        \"YES\"\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l,\
    \ 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)),\
    \ ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"NO\")));\n\
    \    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n    assert(intersection(((-2l,\
    \ -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0lnewxjf.scala:34:19 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) {\n         \
    \   return \"NO\"\n        }\n        val start = max(start1, start2)\n      \
    \  val end = min(end1, end2)\n        if (start > end) {\n            return \"\
    NO\"\n        }\n        val length = end - start + 1\n        if (length == 1)\
    \ {\n            return \"NO\"\n        }\n        if (length == 2) {\n      \
    \      return \"YES\"\n        }\n        for (i <- 2 to sqrt(length).toInt) {\n\
    \            if (length % i == 0) {\n                return \"NO\"\n         \
    \   }\n        }\n        \"YES\"\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l,\
    \ 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)),\
    \ ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"NO\")));\n\
    \    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n    assert(intersection(((-2l,\
    \ -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnzjwq_25.scala:50)\n\tat Problem.main(tmpnzjwq_25.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805422
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) \"\
    NO\"\n        else if (start == end) \"YES\"\n        else if (start + 1 == end)\
    \ \"YES\"\n        else if (start + 2 == end) \"NO\"\n        else if (start +\
    \ 3 == end) \"YES\"\n        else if (start + 4 == end) \"NO\"\n        else if\
    \ (start + 5 == end) \"YES\"\n        else if (start + 6 == end) \"NO\"\n    \
    \    else if (start + 7 == end) \"YES\"\n        else if (start + 8 == end) \"\
    NO\"\n        else if (start + 9 == end) \"NO\"\n        else \"YES\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwo2eav3r.scala:40)\n\tat Problem.main(tmpwo2eav3r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                if (length\
    \ == 2) {\n                    \"YES\"\n                } else {\n           \
    \         if (length % 2 == 0) {\n                        \"NO\"\n           \
    \         } else {\n                        val sqrtLength = sqrt(length).toLong\n\
    \                        var isPrime = true\n                        for (i <-\
    \ 3l to sqrtLength by 2) {\n                            if (length % i == 0) {\n\
    \                                isPrime = false\n                           \
    \ }\n                        }\n                        if (isPrime) {\n     \
    \                       \"YES\"\n                        } else {\n          \
    \                  \"NO\"\n                        }\n                    }\n\
    \                }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn66hrbvd.scala:60)\n\tat Problem.main(tmpn66hrbvd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        val sqrt\
    \ = sqrt(length).toLong\n        for (i <- 2l to sqrt) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n\
    \    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l,\
    \ 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)),\
    \ ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwdxrc7pv.scala:31:19 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805423
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3k8kupki.scala:41)\n\tat Problem.main(tmp3k8kupki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        if (interval1._1 > interval2._2 || interval2._1\
    \ > interval1._2) return \"NO\"\n        val start = max(interval1._1, interval2._1)\n\
    \        val end = min(interval1._2, interval2._2)\n        val len = end - start\
    \ + 1\n        if (len == 1) return \"NO\"\n        val sqrt = sqrt(len).toLong\n\
    \        for (i <- 2l to sqrt) {\n            if (len % i == 0) return \"NO\"\n\
    \        }\n        \"YES\"\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l,\
    \ 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)),\
    \ ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"NO\")));\n\
    \    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n    assert(intersection(((-2l,\
    \ -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplv2iz8bb.scala:29:19 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(len).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length < 2) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        val sqrt = sqrt(length).toLong\n        for (i <- 2l to sqrt) {\n  \
    \          if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)),\
    \ ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi110hv3o.scala:33:19 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        val sqrt = sqrt(length).toLong\n        for (i <- 2l to sqrt) {\n  \
    \          if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)),\
    \ ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmdbjh016.scala:33:19 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (start ==\
    \ end) \"YES\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0oa__73s.scala:30:17 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3k8kupki.scala:41)\n\tat Problem.main(tmp3k8kupki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (end - start\
    \ == 1) \"YES\"\n        else if (end - start == 2) \"NO\"\n        else if (end\
    \ - start == 3) \"YES\"\n        else if (end - start == 4) \"NO\"\n        else\
    \ if (end - start == 5) \"YES\"\n        else if (end - start == 6) \"NO\"\n \
    \       else if (end - start == 7) \"YES\"\n        else if (end - start == 8)\
    \ \"NO\"\n        else if (end - start == 9) \"NO\"\n        else if (end - start\
    \ == 10) \"NO\"\n        else if (end - start == 11) \"YES\"\n        else if\
    \ (end - start == 12) \"NO\"\n        else if (end - start == 13) \"YES\"\n  \
    \      else if (end - start == 14) \"NO\"\n        else if (end - start == 15)\
    \ \"NO\"\n        else if (end - start == 16) \"NO\"\n        else if (end - start\
    \ == 17) \"YES\"\n        else if (end - start == 18) \"NO\"\n        else if\
    \ (end - start == 19) \"YES\"\n        else if (end - start == 20) \"NO\"\n  \
    \      else if (end - start == 21) \"NO\"\n        else if (end - start == 22)\
    \ \"NO\"\n        else if (end - start == 23) \"YES\"\n        else if (end -\
    \ start == 24) \"NO\"\n        else if (end - start == 25) \"NO\"\n        else\
    \ if (end - start == 26) \"NO\"\n        else if (end - start == 27) \"NO\"\n\
    \        else if (end - start == 28) \"NO\"\n        else if (end - start == 29)\
    \ \"YES\"\n        else if (end - start == 30) \"NO\"\n        else if (end -\
    \ start == 31) \"YES\"\n        else if (end - start == 32) \"NO\"\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptam4r2nt.scala:60:13\
    \ --------------------\e[0m\e[0m\n\e[31m60 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (end - start == \e[31m32\e[0m) \e[31m\"NO\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             Found:\
    \    Unit\n\e[31m   |\e[0m             Required: String\n\e[31m   |\e[0m     \
    \        Maybe you are missing an else part for the conditional?\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        if (length % 2 == 0) return \"NO\"\n        for\
    \ (i <- 3 to sqrt(length).toInt by 2) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoolz3b0v.scala:40)\n\tat Problem.main(tmpoolz3b0v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                val sqrt\
    \ = sqrt(length).toLong\n                val isPrime = (2l to sqrt).forall(length\
    \ % _ != 0)\n                if (isPrime) {\n                    \"YES\"\n   \
    \             } else {\n                    \"NO\"\n                }\n      \
    \      }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_z9y_oi3.scala:35:27 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3k8kupki.scala:41)\n\tat Problem.main(tmp3k8kupki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        if (length % 2 == 0) return \"NO\"\n        for\
    \ (i <- 3 to sqrt(length).toInt by 2) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoolz3b0v.scala:40)\n\tat Problem.main(tmpoolz3b0v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) return\
    \ \"NO\"\n        val length = end - start + 1\n        if (length == 1) return\
    \ \"NO\"\n        if (length == 2) return \"YES\"\n        if (length % 2 == 0)\
    \ return \"NO\"\n        for (i <- 3l to sqrt(length).toLong by 2) {\n       \
    \     if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwz6wjqos.scala:38)\n\tat Problem.main(tmpwz6wjqos.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805431
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3k8kupki.scala:41)\n\tat Problem.main(tmp3k8kupki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) return\
    \ \"NO\"\n        val length = end - start + 1\n        if (length == 1) return\
    \ \"NO\"\n        if (length == 2) return \"YES\"\n        for (i <- 2l until\
    \ length) {\n            if (length % i == 0) return \"NO\"\n        }\n     \
    \   \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaq6fff_z.scala:37)\n\tat Problem.main(tmpaq6fff_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805422
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val len = end - start + 1\n \
    \       if (len == 1) return \"NO\"\n        if (len == 2) return \"YES\"\n  \
    \      if (len % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(len).toInt\
    \ by 2) {\n            if (len % i == 0) return \"NO\"\n        }\n        \"\
    YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpquftdpgu.scala:41)\n\tat Problem.main(tmpquftdpgu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2l until length) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n\
    \    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l,\
    \ 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)),\
    \ ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8307xxk0.scala:39)\n\tat Problem.main(tmp8307xxk0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) {\n\
    \            \"NO\"\n        } else {\n            val length = end - start +\
    \ 1\n            if (length == 1) {\n                \"NO\"\n            } else\
    \ {\n                var isPrime = true\n                for (i <- 2 to sqrt(length).toInt)\
    \ {\n                    if (length % i == 0) {\n                        isPrime\
    \ = false\n                    }\n                }\n                if (isPrime)\
    \ {\n                    \"YES\"\n                } else {\n                 \
    \   \"NO\"\n                }\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n\
    \    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l,\
    \ 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)),\
    \ ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr3rrfhlt.scala:49)\n\tat Problem.main(tmpr3rrfhlt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805432
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) \"\
    NO\"\n        else if (start == end) \"YES\"\n        else if (start + 1 == end)\
    \ \"YES\"\n        else if (start + 2 == end) \"NO\"\n        else if (start +\
    \ 3 == end) \"YES\"\n        else if (start + 4 == end) \"NO\"\n        else if\
    \ (start + 5 == end) \"YES\"\n        else if (start + 6 == end) \"NO\"\n    \
    \    else if (start + 7 == end) \"YES\"\n        else if (start + 8 == end) \"\
    NO\"\n        else if (start + 9 == end) \"NO\"\n        else \"YES\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwo2eav3r.scala:40)\n\tat Problem.main(tmpwo2eav3r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) return\
    \ \"NO\"\n        val length = end - start + 1\n        if (length == 1) return\
    \ \"NO\"\n        if (length == 2) return \"YES\"\n        if (length % 2 == 0)\
    \ return \"NO\"\n        for (i <- 3 to sqrt(length).toInt by 2) {\n         \
    \   if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaslzddfm.scala:38)\n\tat Problem.main(tmpaslzddfm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2 to sqrt(length).toInt) {\n       \
    \     if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo984tdm6.scala:39)\n\tat Problem.main(tmpo984tdm6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2 to sqrt(length).toInt) {\n       \
    \     if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo984tdm6.scala:39)\n\tat Problem.main(tmpo984tdm6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        if (start\
    \ == end) return \"YES\"\n        val length = end - start + 1\n        if (length\
    \ == 2) return \"YES\"\n        if (length % 2 == 0) return \"NO\"\n        for\
    \ (i <- 3 to sqrt(length).toInt by 2) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkwq4sgee.scala:39)\n\tat Problem.main(tmpkwq4sgee.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805432
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) \"\
    NO\"\n        else if (start == end) \"YES\"\n        else if (start + 1 == end)\
    \ \"YES\"\n        else if (start + 2 == end) \"NO\"\n        else \"YES\"\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)),\
    \ ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpow6hz7w3.scala:33)\n\tat Problem.main(tmpow6hz7w3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805431
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start >= end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2 to sqrt(length).toInt) {\n       \
    \     if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdsxgcwyz.scala:39)\n\tat Problem.main(tmpdsxgcwyz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805433
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        for (i <- 2 to sqrt(length).toInt) {\n            if (length % i ==\
    \ 0) return \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3m4i1q2_.scala:40)\n\tat Problem.main(tmp3m4i1q2_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3k8kupki.scala:41)\n\tat Problem.main(tmp3k8kupki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val len = end - start + 1\n \
    \       if (len == 1) return \"NO\"\n        if (len == 2) return \"YES\"\n  \
    \      if (len % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(len).toInt\
    \ by 2) {\n            if (len % i == 0) return \"NO\"\n        }\n        \"\
    YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpquftdpgu.scala:41)\n\tat Problem.main(tmpquftdpgu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) {\n         \
    \   return \"NO\"\n        }\n        val start = max(start1, start2)\n      \
    \  val end = min(end1, end2)\n        if (start > end) {\n            return \"\
    NO\"\n        }\n        val length = end - start + 1\n        if (length == 1)\
    \ {\n            return \"NO\"\n        }\n        if (length == 2) {\n      \
    \      return \"YES\"\n        }\n        val sqrt = sqrt(length).toLong\n   \
    \     for (i <- 2l to sqrt) {\n            if (length % i == 0) {\n          \
    \      return \"NO\"\n            }\n        }\n        \"YES\"\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n\
    \    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l,\
    \ 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)),\
    \ ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0ai7msxi.scala:41:19 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805429
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) \"\
    NO\"\n        else if (start == end) \"YES\"\n        else if (start == end -\
    \ 1) \"YES\"\n        else if (start == end - 2) \"NO\"\n        else \"YES\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)),\
    \ ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0csp60cj.scala:33)\n\tat Problem.main(tmp0csp60cj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) \"\
    NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)),\
    \ ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1sjb2byo.scala:27:17 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                val sqrt\
    \ = sqrt(length).toLong\n                var isPrime = true\n                for\
    \ (i <- 2l to sqrt) {\n                    if (length % i == 0) {\n          \
    \              isPrime = false\n                    }\n                }\n   \
    \             if (isPrime) {\n                    \"YES\"\n                } else\
    \ {\n                    \"NO\"\n                }\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)),\
    \ ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpuog82q1g.scala:35:27 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) {\n\
    \            \"NO\"\n        } else {\n            val length = end - start +\
    \ 1\n            if (length == 1) {\n                \"NO\"\n            } else\
    \ {\n                if (length == 2) {\n                    \"YES\"\n       \
    \         } else {\n                    val sqrt = sqrt(length).toLong\n     \
    \               var isPrime = true\n                    for (i <- 2l to sqrt)\
    \ {\n                        if (length % i == 0) {\n                        \
    \    isPrime = false\n                        }\n                    }\n     \
    \               if (isPrime) {\n                        \"YES\"\n            \
    \        } else {\n                        \"NO\"\n                    }\n   \
    \             }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi9ltktua.scala:36:31 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                    \e[33mval\e[0m \e[36msqrt\e[0m =\
    \ sqrt(length).toLong\n\e[31m\e[31m   |\e[0m                               ^\e\
    [0m\n\e[31m   |\e[0m                               Recursive \e[33mvalue\e[0m\
    \ \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val (start, end) = (max(start1, start2), min(end1, end2))\n        if\
    \ (start > end) return \"NO\"\n        val length = end - start + 1\n        if\
    \ (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n     \
    \   if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph5pd5606.scala:40)\n\tat Problem.main(tmph5pd5606.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805433
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val len = end - start + 1\n \
    \       if (len == 1) return \"NO\"\n        if (len == 2) return \"YES\"\n  \
    \      for (i <- 2 to sqrt(len).toInt) {\n            if (len % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpboykqjkw.scala:40)\n\tat Problem.main(tmpboykqjkw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (start ==\
    \ end) \"YES\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0oa__73s.scala:30:17 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (start ==\
    \ end) \"YES\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0oa__73s.scala:30:17 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) {\n\
    \            \"NO\"\n        } else {\n            val length = end - start +\
    \ 1\n            if (length == 1) {\n                \"NO\"\n            } else\
    \ {\n                val primes = ArrayBuffer[Long]()\n                primes\
    \ += 2\n                for (i <- 3l to length by 2) {\n                    var\
    \ isPrime = true\n                    for (j <- primes) {\n                  \
    \      if (i % j == 0) {\n                            isPrime = false\n      \
    \                      break\n                        }\n                    }\n\
    \                    if (isPrime) {\n                        primes += i\n   \
    \                 }\n                }\n                if (primes.contains(length))\
    \ {\n                    \"YES\"\n                } else {\n                 \
    \   \"NO\"\n                }\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n\
    \    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l,\
    \ 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)),\
    \ ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpybcsg5o7.scala:40:28 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                            break\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        if (start == end) return \"YES\"\
    \n        val length = end - start + 1\n        if (length == 1) return \"NO\"\
    \n        if (length == 2) return \"YES\"\n        if (length % 2 == 0) return\
    \ \"NO\"\n        for (i <- 3 to sqrt(length).toInt by 2) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n\
    \    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l,\
    \ 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)),\
    \ ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd0tfg11n.scala:41)\n\tat Problem.main(tmpd0tfg11n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) return\
    \ \"NO\"\n        val length = end - start + 1\n        if (length == 1) return\
    \ \"NO\"\n        if (length == 2) return \"YES\"\n        for (i <- 2 to sqrt(length).toInt)\
    \ {\n            if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgilkvqf8.scala:37)\n\tat Problem.main(tmpgilkvqf8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                val sqrt\
    \ = sqrt(length).toLong\n                if (sqrt * sqrt == length) {\n      \
    \              \"NO\"\n                } else {\n                    var isPrime\
    \ = true\n                    for (i <- 2l to sqrt) {\n                      \
    \  if (length % i == 0) {\n                            isPrime = false\n     \
    \                   }\n                    }\n                    if (isPrime)\
    \ {\n                        \"YES\"\n                    } else {\n         \
    \               \"NO\"\n                    }\n                }\n           \
    \ }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1eovmzx5.scala:35:27 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        if (length % 2 == 0) return \"NO\"\n        for\
    \ (i <- 3 to sqrt(length).toInt by 2) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoolz3b0v.scala:40)\n\tat Problem.main(tmpoolz3b0v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        if (length % 2 == 0) return \"NO\"\n        for\
    \ (i <- 3 to sqrt(length).toInt by 2) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoolz3b0v.scala:40)\n\tat Problem.main(tmpoolz3b0v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2l until length) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n\
    \    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l,\
    \ 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)),\
    \ ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8307xxk0.scala:39)\n\tat Problem.main(tmp8307xxk0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) {\n\
    \            \"NO\"\n        } else {\n            val length = end - start +\
    \ 1\n            if (length == 1) {\n                \"NO\"\n            } else\
    \ {\n                val primes = ArrayBuffer[Long]()\n                var i =\
    \ 2l\n                while (i * i <= length) {\n                    if (length\
    \ % i == 0) {\n                        primes += i\n                    }\n  \
    \                  i += 1\n                }\n                if (primes.length\
    \ == 0) {\n                    \"YES\"\n                } else {\n           \
    \         \"NO\"\n                }\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n\
    \    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l,\
    \ 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)),\
    \ ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_fky64g_.scala:51)\n\tat Problem.main(tmp_fky64g_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805433
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                val isPrime\
    \ = (2l to length / 2).forall(x => length % x != 0)\n                if (isPrime)\
    \ {\n                    \"YES\"\n                } else {\n                 \
    \   \"NO\"\n                }\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n\
    \    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l,\
    \ 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)),\
    \ ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprtyzlhlj.scala:46)\n\tat Problem.main(tmprtyzlhlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                val sqrt\
    \ = sqrt(length).toLong\n                if (sqrt * sqrt == length) {\n      \
    \              \"NO\"\n                } else {\n                    var isPrime\
    \ = true\n                    for (i <- 2l to sqrt) {\n                      \
    \  if (length % i == 0) {\n                            isPrime = false\n     \
    \                   }\n                    }\n                    if (isPrime)\
    \ {\n                        \"YES\"\n                    } else {\n         \
    \               \"NO\"\n                    }\n                }\n           \
    \ }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1eovmzx5.scala:35:27 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) \"\
    NO\"\n        else if (start == end) \"YES\"\n        else if (end - start ==\
    \ 1) \"YES\"\n        else if (end - start == 2) \"NO\"\n        else if (end\
    \ - start == 3) \"YES\"\n        else if (end - start == 4) \"NO\"\n        else\
    \ if (end - start == 5) \"YES\"\n        else if (end - start == 6) \"NO\"\n \
    \       else if (end - start == 7) \"YES\"\n        else if (end - start == 8)\
    \ \"NO\"\n        else if (end - start == 9) \"NO\"\n        else if (end - start\
    \ == 10) \"NO\"\n        else if (end - start == 11) \"YES\"\n        else if\
    \ (end - start == 12) \"NO\"\n        else if (end - start == 13) \"YES\"\n  \
    \      else if (end - start == 14) \"NO\"\n        else if (end - start == 15)\
    \ \"NO\"\n        else if (end - start == 16) \"NO\"\n        else if (end - start\
    \ == 17) \"YES\"\n        else if (end - start == 18) \"NO\"\n        else if\
    \ (end - start == 19) \"YES\"\n        else if (end - start == 20) \"NO\"\n  \
    \      else if (end - start == 21) \"NO\"\n        else if (end - start == 22)\
    \ \"NO\"\n        else if (end - start == 23) \"YES\"\n        else if (end -\
    \ start == 24) \"NO\"\n        else if (end - start == 25) \"NO\"\n        else\
    \ if (end - start == 26) \"NO\"\n        else if (end - start == 27) \"NO\"\n\
    \        else if (end - start == 28) \"NO\"\n        else if (end - start == 29)\
    \ \"YES\"\n        else if (end - start == 30) \"NO\"\n        else if (end -\
    \ start == 31) \"YES\"\n        else if (end - start == 32) \"NO\"\n        else\
    \ if (\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpt_2erapg.scala:60:17 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (\n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (start ==\
    \ end) \"YES\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0oa__73s.scala:30:17 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) return\
    \ \"NO\"\n        if (start == end) return \"YES\"\n        val length = end -\
    \ start + 1\n        if (length == 2) return \"YES\"\n        for (i <- 2l to\
    \ length - 1) {\n            if (length % i == 0) return \"NO\"\n        }\n \
    \       \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnl63yr4l.scala:36)\n\tat Problem.main(tmpnl63yr4l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) return\
    \ \"NO\"\n        val length = end - start + 1\n        if (length == 1) return\
    \ \"NO\"\n        val sqrt = sqrt(length).toLong\n        for (i <- 2l to sqrt)\
    \ {\n            if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdfu8_m7m.scala:29:19 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                val sqrt\
    \ = sqrt(length).toLong\n                if (length == sqrt * sqrt) {\n      \
    \              \"NO\"\n                } else {\n                    var isPrime\
    \ = true\n                    for (i <- 2l to sqrt) {\n                      \
    \  if (length % i == 0) {\n                            isPrime = false\n     \
    \                   }\n                    }\n                    if (isPrime)\
    \ {\n                        \"YES\"\n                    } else {\n         \
    \               \"NO\"\n                    }\n                }\n           \
    \ }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1xqcv49x.scala:35:27 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val (start, end) = (max(start1, start2), min(end1,\
    \ end2))\n        if (start > end) \"NO\"\n        else if (start == end) \"YES\"\
    \n        else if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)),\
    \ ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptur05809.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2 to sqrt(length).toInt) {\n       \
    \     if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo984tdm6.scala:39)\n\tat Problem.main(tmpo984tdm6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3k8kupki.scala:41)\n\tat Problem.main(tmp3k8kupki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        if (interval1._1 > interval2._2 || interval2._1\
    \ > interval1._2) return \"NO\"\n        val start = max(interval1._1, interval2._1)\n\
    \        val end = min(interval1._2, interval2._2)\n        val length = end -\
    \ start + 1\n        if (length == 1) return \"NO\"\n        val sqrt = sqrt(length).toLong\n\
    \        for (i <- 2l to sqrt) {\n            if (length % i == 0) return \"NO\"\
    \n        }\n        \"YES\"\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l,\
    \ 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)),\
    \ ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"NO\")));\n\
    \    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n    assert(intersection(((-2l,\
    \ -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0ueb4a5h.scala:29:19 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m              \
    \     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (start ==\
    \ end) \"YES\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0oa__73s.scala:30:17 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) {\n\
    \            \"NO\"\n        } else {\n            val length = end - start +\
    \ 1\n            if (length == 1) {\n                \"NO\"\n            } else\
    \ {\n                val primes = ArrayBuffer(2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l,\
    \ 23l, 29l, 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l, 67l, 71l, 73l, 79l, 83l, 89l,\
    \ 97l, 101l, 103l, 107l, 109l, 113l, 127l, 131l, 137l, 139l, 149l, 151l, 157l,\
    \ 163l, 167l, 173l, 179l, 181l, 191l, 193l, 197l, 199l, 211l, 223l, 227l, 229l,\
    \ 233l, 239l, 241l, 251l, 257l, 263l, 269l, 271l, 277l, 281l, 283l, 293l, 307l,\
    \ 311l, 313l, 317l, 331l, 337l, 347l, 349l, 353l, 359l, 367l, 373l, 379l, 383l,\
    \ 389l, 397l, 401l, 409l, 419l, 421l, 431l, 433l, 439l, 443l, 449l, 457l, 461l,\
    \ 463l, 467l, 479l, 487l, 491l, 499l, 503l, 509l, 521l, 523l, 541l, 547l, 557l,\
    \ 563l, 569l, 571l, 577l, 587l, 593l, 599l, 601l, 607l, 613l, 617l, 619l, 631l,\
    \ 641l, 643l, 647l, 653l, 659l, 661l, 673l, 677l, 683l, 691l, 701l, 709l\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)),\
    \ ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpekutb6sz.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpekutb6sz.scala:47:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m47 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpekutb6sz.scala:46:1 ---------------------\e[0m\e[0m\n\
    \e[31m46 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpekutb6sz.scala:35:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m35 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val len =\
    \ end - start + 1\n        if (len == 1) return \"NO\"\n        if (len == 2)\
    \ return \"YES\"\n        if (len % 2 == 0) return \"NO\"\n        for (i <- 3\
    \ to sqrt(len).toInt by 2) {\n            if (len % i == 0) return \"NO\"\n  \
    \      }\n        \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq9lc1ryh.scala:40)\n\tat Problem.main(tmpq9lc1ryh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpudgygapa.scala:29:17 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (isPrime(end -\
    \ start + \e[31m1\e[0m)) \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: isPrime\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659805411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2l until length) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n\
    \    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l,\
    \ 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)),\
    \ ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8307xxk0.scala:39)\n\tat Problem.main(tmp8307xxk0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2l until length) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n\
    \    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l,\
    \ 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)),\
    \ ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8307xxk0.scala:39)\n\tat Problem.main(tmp8307xxk0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val (start, end) = (max(start1, start2), min(end1,\
    \ end2))\n        if (start > end) {\n            \"NO\"\n        } else {\n \
    \           val length = end - start + 1\n            if (length == 1) {\n   \
    \             \"NO\"\n            } else {\n                val sqrt = sqrt(length).toLong\n\
    \                val isPrime = (2L to sqrt).forall(length % _ != 0)\n        \
    \        if (isPrime) {\n                    \"YES\"\n                } else {\n\
    \                    \"NO\"\n                }\n            }\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)),\
    \ ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp381sg144.scala:34:27 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                \e[33mval\e[0m \e[36msqrt\e[0m = sqrt(length).toLong\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35msqrt\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) {\n         \
    \   return \"NO\"\n        }\n        val start = max(start1, start2)\n      \
    \  val end = min(end1, end2)\n        if (start > end) {\n            return \"\
    NO\"\n        }\n        val length = end - start + 1\n        if (length == 1)\
    \ {\n            return \"NO\"\n        }\n        if (length == 2) {\n      \
    \      return \"YES\"\n        }\n        for (i <- 2 to sqrt(length).toInt) {\n\
    \            if (length % i == 0) {\n                return \"NO\"\n         \
    \   }\n        }\n        \"YES\"\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l,\
    \ 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)),\
    \ ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"NO\")));\n\
    \    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n    assert(intersection(((-2l,\
    \ -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnzjwq_25.scala:50)\n\tat Problem.main(tmpnzjwq_25.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805422
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (length ==\
    \ 1) {\n                \"NO\"\n            } else {\n                if (length\
    \ == 2) {\n                    \"YES\"\n                } else {\n           \
    \         val sqrt = sqrt(length).toLong\n                    var isPrime = true\n\
    \                    for (i <- 2l to sqrt) {\n                        if (length\
    \ % i == 0) {\n                            isPrime = false\n                 \
    \       }\n                    }\n                    if (isPrime) {\n       \
    \                 \"YES\"\n                    } else {\n                    \
    \    \"NO\"\n                    }\n                }\n            }\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5bsphyb0.scala:38:31 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                    \e[33mval\e[0m \e[36msqrt\e[0m =\
    \ sqrt(length).toLong\n\e[31m\e[31m   |\e[0m                               ^\e\
    [0m\n\e[31m   |\e[0m                               Recursive \e[33mvalue\e[0m\
    \ \e[35msqrt\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) {\n\
    \            \"NO\"\n        } else {\n            val length = end - start +\
    \ 1\n            if (length == 1) {\n                \"NO\"\n            } else\
    \ {\n                if (length == 2) {\n                    \"YES\"\n       \
    \         } else {\n                    if (length % 2 == 0) {\n             \
    \           \"NO\"\n                    } else {\n                        var\
    \ isPrime = true\n                        for (i <- 3 to sqrt(length).toInt by\
    \ 2) {\n                            if (length % i == 0) {\n                 \
    \               isPrime = false\n                            }\n             \
    \           }\n                        if (isPrime) {\n                      \
    \      \"YES\"\n                        } else {\n                           \
    \ \"NO\"\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxcjxbanx.scala:57)\n\tat Problem.main(tmpxcjxbanx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805436
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        if (start1 > end2 || start2 > end1) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        val length\
    \ = end - start + 1\n        if (length <= 0) return \"NO\"\n        if (length\
    \ == 1) return \"YES\"\n        if (length == 2) return \"NO\"\n        if (length\
    \ % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt by 2) {\n\
    \            if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)),\
    \ ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmkfyvvjy.scala:41)\n\tat Problem.main(tmpmkfyvvjy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805436
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3k8kupki.scala:41)\n\tat Problem.main(tmp3k8kupki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2l until length) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"\
    NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n\
    \    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l,\
    \ 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)),\
    \ ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l,\
    \ 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8307xxk0.scala:39)\n\tat Problem.main(tmp8307xxk0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        if (isPrime(end - start + 1))\
    \ return \"YES\"\n        \"NO\"\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l,\
    \ 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)),\
    \ ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l,\
    \ 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"NO\")));\n\
    \    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n    assert(intersection(((-2l,\
    \ -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu3s_nk1f.scala:30:12 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mif\e[0m (isPrime(end - start + \e[31m1\e\
    [0m)) \e[33mreturn\e[0m \e[31m\"YES\"\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: isPrime\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659805434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        if (length % 2 == 0) return \"NO\"\n        for\
    \ (i <- 3 to sqrt(length).toInt by 2) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersection(((1l, 2l)), ((2l, 3l))).equals((\"NO\")));\n  \
    \  assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"NO\")));\n    assert(intersection(((-3l,\
    \ -1l)), ((-5l, 5l))).equals((\"YES\")));\n    assert(intersection(((-2l, 2l)),\
    \ ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l, 2l)), ((-1l,\
    \ -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((3l, 5l))).equals((\"\
    NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"NO\")));\n\
    \    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoolz3b0v.scala:40)\n\tat Problem.main(tmpoolz3b0v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805430
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) {\n\
    \            \"NO\"\n        } else {\n            val length = end - start +\
    \ 1\n            if (length == 1) {\n                \"NO\"\n            } else\
    \ {\n                if (length == 2) {\n                    \"YES\"\n       \
    \         } else {\n                    if (length % 2 == 0) {\n             \
    \           \"NO\"\n                    } else {\n                        var\
    \ isPrime = true\n                        for (i <- 3 to sqrt(length).toInt by\
    \ 2) {\n                            if (length % i == 0) {\n                 \
    \               isPrime = false\n                            }\n             \
    \           }\n                        if (isPrime) {\n                      \
    \      \"YES\"\n                        } else {\n                           \
    \ \"NO\"\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxcjxbanx.scala:57)\n\tat Problem.main(tmpxcjxbanx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805436
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) return\
    \ \"NO\"\n        val length = end - start + 1\n        if (length == 1) return\
    \ \"NO\"\n        if (length == 2) return \"YES\"\n        if (length % 2 == 0)\
    \ return \"NO\"\n        for (i <- 3 to sqrt(length).toInt by 2) {\n         \
    \   if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaslzddfm.scala:38)\n\tat Problem.main(tmpaslzddfm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        val length = end - start + 1\n\
    \        if (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3k8kupki.scala:41)\n\tat Problem.main(tmp3k8kupki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805415
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        if (start1 > end1 || start2 > end2) return \"NO\"\
    \n        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) return \"NO\"\n        if (start == end) return \"YES\"\
    \n        val length = end - start + 1\n        if (length == 2) return \"YES\"\
    \n        if (length % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt\
    \ by 2) {\n            if (length % i == 0) return \"NO\"\n        }\n       \
    \ \"YES\"\n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa2anmmch.scala:40)\n\tat Problem.main(tmpa2anmmch.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805436
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) return \"NO\"\n        val length\
    \ = end - start + 1\n        if (length == 1) return \"NO\"\n        if (length\
    \ == 2) return \"YES\"\n        for (i <- 2 to sqrt(length).toInt) {\n       \
    \     if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersection(((1l, 2l)), ((2l,\
    \ 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l, 4l))).equals((\"\
    NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"YES\")));\n\
    \    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n    assert(intersection(((-11l,\
    \ 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)),\
    \ ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l, 2l))).equals((\"\
    NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"NO\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo984tdm6.scala:39)\n\tat Problem.main(tmpo984tdm6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given two intervals,\n    // where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    // The given\
    \ intervals are closed which means that the interval (start, end)\n    // includes\
    \ both start and end.\n    // For each given interval, it is assumed that its\
    \ start is less or equal its end.\n    // Your task is to determine whether the\
    \ length of intersection of these two \n    // intervals is a prime number.\n\
    \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\
    \    // which its length is 1, which not a prime number.\n    // If the length\
    \ of the intersection is a prime number, return \"YES\",\n    // otherwise, return\
    \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    //\
    \ [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n \
    \   // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"\
    NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n\
    \    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long,\
    \ Long]) : String = {\n        val start = max(interval1._1, interval2._1)\n \
    \       val end = min(interval1._2, interval2._2)\n        if (start > end) return\
    \ \"NO\"\n        val length = end - start + 1\n        if (length <= 1) return\
    \ \"NO\"\n        if (length == 2) return \"YES\"\n        for (i <- 2 until length)\
    \ {\n            if (length % i == 0) return \"NO\"\n        }\n        \"YES\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
    \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
    \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
    YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
    \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
    \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
    \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
    NO\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgrwdox1q.scala:30:26\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m until length) {\n\e[31m\e[31m   |\e[0m                        \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    (length : Long)\n\
    \e[31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659805435
