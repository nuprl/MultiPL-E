name: HumanEval_157_right_angle_triangle
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given the lengths of the three sides of a triangle. Return true if the three\n\
  \    // sides form a right-angled triangle, false otherwise.\n    // A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n\
  \    // Example:\n    // >>> rightAngleTriangle((3l), (4l), (5l))\n    // (true)\n\
  \    // >>> rightAngleTriangle((1l), (2l), (3l))\n    // (false)\n    def rightAngleTriangle(a\
  \ : Long, b : Long, c : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
  \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
  \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) ==\
  \ (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
  \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) ==\
  \ (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n   \
  \ assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (10l)) == (false));\n    }\n\n}\n"
completions: ["        // Fill Up this function body\n        // `a`, `b`, `c` are\
    \ the lengths of the sides of a triangle\n        if (a > b && a > c) {\n    \
    \        if (pow(a, 2) == pow(b, 2) + pow(c, 2)) true\n            else false\n\
    \        }\n        else if (b > a && b > c) {\n            if (pow(b, 2) == pow(a,\
    \ 2) + pow(c, 2)) true\n            else false\n        }\n        else {\n  \
    \          if (pow(c, 2) == pow(a, 2) + pow(b, 2)) true\n            else false\n\
    \        }", "        // Your code here\n        return false", "        // Fill\
    \ Up this function body\n        // `a`, `b`, `c` are the lengths of the sides\
    \ of a triangle\n        // return true if the three sides form a right-angled\
    \ triangle, false otherwise\n        val sides = List(a, b, c).sorted\n      \
    \  val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z\
    \ * z", "        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        // Return true if the three\
    \ sides form a right-angled triangle, false otherwise.\n        if (a > b && a\
    \ > c) {\n            if (a * a == b * b + c * c) true else false\n        } else\
    \ if (b > a && b > c) {\n            if (b * b == a * a + c * c) true else false\n\
    \        } else {\n            if (c * c == a * a + b * b) true else false\n \
    \       }", "        // Fill Up this function body\n        // `a`, `b`, `c` are\
    \ the sides of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        if (a > b && a > c) {\n            if (a * a == b *\
    \ b + c * c) return true\n        } else if (b > a && b > c) {\n            if\
    \ (b * b == a * a + c * c) return true\n        } else if (c > a && c > b) {\n\
    \            if (c * c == a * a + b * b) return true\n        }\n        return\
    \ false", "        // Fill Up this function body\n        // `a` is the length\
    \ of the side opposite to the right angle.\n        // `b` is the length of the\
    \ side opposite to the right angle.\n        // `c` is the length of the side\
    \ opposite to the right angle.\n        // You can use the predefined functions\
    \ `pow` and `sqrt`\n        if (pow(a, 2) + pow(b, 2) == pow(c, 2)) true else\
    \ false", "        // Fill Up this function body\n        // `a` and `b` are the\
    \ lengths of the sides of the triangle\n        // `c` is the length of the hypotenuse\n\
    \        // You have to return true if the triangle is right-angled, false otherwise\n\
    \        val sides = List(a, b, c)\n        val sortedSides = sides.sorted\n \
    \       val squaredSides = sortedSides.map(x => x * x)\n        squaredSides(0)\
    \ + squaredSides(1) == squaredSides(2)", "        // Fill Up this function body\n\
    \        // `a` is the length of the side opposite to the right angle\n      \
    \  // `b` is the length of the side opposite to the right angle\n        // `c`\
    \ is the length of the side opposite to the right angle\n        if (a == 0 ||\
    \ b == 0 || c == 0) return false\n        val sides = Array(a, b, c).sorted\n\
    \        val a2 = sides(0)\n        val b2 = sides(1)\n        val c2 = sides(2)\n\
    \        if (a2 * a2 + b2 * b2 == c2 * c2) return true\n        false", "    \
    \    // Fill Up this function body\n        // `a`, `b`, `c` are the lengths of\
    \ the three sides of a triangle.\n        // return true if the three sides form\
    \ a right-angled triangle, false otherwise.\n        if (a > b && a > c) {\n \
    \           if (a * a == b * b + c * c) return true\n        } else if (b > a\
    \ && b > c) {\n            if (b * b == a * a + c * c) return true\n        }\
    \ else if (c > a && c > b) {\n            if (c * c == a * a + b * b) return true\n\
    \        }\n        return false", "        // Fill Up this function body\n  \
    \      // `a`, `b`, `c` are the lengths of the three sides of a triangle\n   \
    \     // return true if the three sides form a right-angled triangle, false otherwise\n\
    \        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z", "        // Fill Up this\
    \ function body\n        // `a`, `b`, `c` are the lengths of the three sides of\
    \ a triangle\n        // return true if the three sides form a right-angled triangle,\
    \ false otherwise\n        val sides = List(a, b, c).sorted\n        val (x, y,\
    \ z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", "    \
    \    // Fill Up this function body\n        // `a` represents the length of the\
    \ side `a`\n        // `b` represents the length of the side `b`\n        // `c`\
    \ represents the length of the side `c`\n        // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n        if (a > b && a > c) {\n\
    \            if (a * a == b * b + c * c) true else false\n        } else if (b\
    \ > a && b > c) {\n            if (b * b == a * a + c * c) true else false\n \
    \       } else {\n            if (c * c == a * a + b * b) true else false\n  \
    \      }", "        // Fill in the code here\n        return false", "       \
    \ // Fill Up this function body\n        // `a` is the length of the side opposite\
    \ to the right angle\n        // `b` is the length of the side opposite to the\
    \ right angle\n        // `c` is the length of the side opposite to the right\
    \ angle\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0)\n\
    \        val b2 = sides(1)\n        val c2 = sides(2)\n        a2 * a2 + b2 *\
    \ b2 == c2 * c2", "        val sides = List(a, b, c).sorted\n        val (x, y,\
    \ z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", "    \
    \    // Fill Up this function body\n        // `a` is the length of the side opposite\
    \ to the right angle.\n        // `b` is the length of the side opposite to the\
    \ right angle.\n        // `c` is the length of the side opposite to the right\
    \ angle.\n        // Return true if the three sides form a right-angled triangle,\
    \ false otherwise.\n        if (a > b && a > c) {\n            if (a * a == b\
    \ * b + c * c) true else false\n        } else if (b > a && b > c) {\n       \
    \     if (b * b == a * a + c * c) true else false\n        } else {\n        \
    \    if (c * c == a * a + b * b) true else false\n        }", "        // Your\
    \ code here\n        return false", "        // Fill Up this function body\n \
    \       // `a`, `b`, `c` are the lengths of the three sides of a triangle.\n \
    \       // Return true if the three sides form a right-angled triangle, false\
    \ otherwise.\n        if (a == 0 || b == 0 || c == 0) return false\n        val\
    \ sides = List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0), sides(1),\
    \ sides(2))\n        if (a1 * a1 + b1 * b1 == c1 * c1) true else false", "   \
    \     val sides = List(a, b, c).sorted\n        val max = sides(2)\n        val\
    \ sum = sides.sum\n        val sum2 = sum - max\n        max * max == sum2 * sum2",
  "        // Write your code here\n        return false"]
stop_tokens:
- "\n    }\n"
