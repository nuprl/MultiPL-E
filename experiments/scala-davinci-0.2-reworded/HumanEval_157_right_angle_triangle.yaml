name: HumanEval_157_right_angle_triangle
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given the lengths of the three sides of a triangle. Return true if the three\n\
  \    // sides form a right-angled triangle, false otherwise.\n    // A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n\
  \    // Example:\n    // >>> rightAngleTriangle((3l), (4l), (5l))\n    // (true)\n\
  \    // >>> rightAngleTriangle((1l), (2l), (3l))\n    // (false)\n    def rightAngleTriangle(a\
  \ : Long, b : Long, c : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
  \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
  \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) ==\
  \ (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
  \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) ==\
  \ (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n   \
  \ assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (10l)) == (false));\n    }\n\n}\n"
completions: ["        // Fill Up this function body\n        // `a`, `b`, `c` are\
    \ the lengths of the sides of a triangle\n        if (a > b && a > c) {\n    \
    \        if (pow(a, 2) == pow(b, 2) + pow(c, 2)) true\n            else false\n\
    \        }\n        else if (b > a && b > c) {\n            if (pow(b, 2) == pow(a,\
    \ 2) + pow(c, 2)) true\n            else false\n        }\n        else {\n  \
    \          if (pow(c, 2) == pow(a, 2) + pow(b, 2)) true\n            else false\n\
    \        }", "        // Your code here\n        return false", "        // Fill\
    \ Up this function body\n        // `a`, `b`, `c` are the lengths of the sides\
    \ of a triangle\n        // return true if the three sides form a right-angled\
    \ triangle, false otherwise\n        val sides = List(a, b, c).sorted\n      \
    \  val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z\
    \ * z", "        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        // Return true if the three\
    \ sides form a right-angled triangle, false otherwise.\n        if (a > b && a\
    \ > c) {\n            if (a * a == b * b + c * c) true else false\n        } else\
    \ if (b > a && b > c) {\n            if (b * b == a * a + c * c) true else false\n\
    \        } else {\n            if (c * c == a * a + b * b) true else false\n \
    \       }", "        // Fill Up this function body\n        // `a`, `b`, `c` are\
    \ the sides of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        if (a > b && a > c) {\n            if (a * a == b *\
    \ b + c * c) return true\n        } else if (b > a && b > c) {\n            if\
    \ (b * b == a * a + c * c) return true\n        } else if (c > a && c > b) {\n\
    \            if (c * c == a * a + b * b) return true\n        }\n        return\
    \ false", "        // Fill Up this function body\n        // `a` is the length\
    \ of the side opposite to the right angle.\n        // `b` is the length of the\
    \ side opposite to the right angle.\n        // `c` is the length of the side\
    \ opposite to the right angle.\n        // You can use the predefined functions\
    \ `pow` and `sqrt`\n        if (pow(a, 2) + pow(b, 2) == pow(c, 2)) true else\
    \ false", "        // Fill Up this function body\n        // `a` and `b` are the\
    \ lengths of the sides of the triangle\n        // `c` is the length of the hypotenuse\n\
    \        // You have to return true if the triangle is right-angled, false otherwise\n\
    \        val sides = List(a, b, c)\n        val sortedSides = sides.sorted\n \
    \       val squaredSides = sortedSides.map(x => x * x)\n        squaredSides(0)\
    \ + squaredSides(1) == squaredSides(2)", "        // Fill Up this function body\n\
    \        // `a` is the length of the side opposite to the right angle\n      \
    \  // `b` is the length of the side opposite to the right angle\n        // `c`\
    \ is the length of the side opposite to the right angle\n        if (a == 0 ||\
    \ b == 0 || c == 0) return false\n        val sides = Array(a, b, c).sorted\n\
    \        val a2 = sides(0)\n        val b2 = sides(1)\n        val c2 = sides(2)\n\
    \        if (a2 * a2 + b2 * b2 == c2 * c2) return true\n        false", "    \
    \    // Fill Up this function body\n        // `a`, `b`, `c` are the lengths of\
    \ the three sides of a triangle.\n        // return true if the three sides form\
    \ a right-angled triangle, false otherwise.\n        if (a > b && a > c) {\n \
    \           if (a * a == b * b + c * c) return true\n        } else if (b > a\
    \ && b > c) {\n            if (b * b == a * a + c * c) return true\n        }\
    \ else if (c > a && c > b) {\n            if (c * c == a * a + b * b) return true\n\
    \        }\n        return false", "        // Fill Up this function body\n  \
    \      // `a`, `b`, `c` are the lengths of the three sides of a triangle\n   \
    \     // return true if the three sides form a right-angled triangle, false otherwise\n\
    \        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z", "        // Fill Up this\
    \ function body\n        // `a`, `b`, `c` are the lengths of the three sides of\
    \ a triangle\n        // return true if the three sides form a right-angled triangle,\
    \ false otherwise\n        val sides = List(a, b, c).sorted\n        val (x, y,\
    \ z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", "    \
    \    // Fill Up this function body\n        // `a` represents the length of the\
    \ side `a`\n        // `b` represents the length of the side `b`\n        // `c`\
    \ represents the length of the side `c`\n        // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n        if (a > b && a > c) {\n\
    \            if (a * a == b * b + c * c) true else false\n        } else if (b\
    \ > a && b > c) {\n            if (b * b == a * a + c * c) true else false\n \
    \       } else {\n            if (c * c == a * a + b * b) true else false\n  \
    \      }", "        // Fill in the code here\n        return false", "       \
    \ // Fill Up this function body\n        // `a` is the length of the side opposite\
    \ to the right angle\n        // `b` is the length of the side opposite to the\
    \ right angle\n        // `c` is the length of the side opposite to the right\
    \ angle\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0)\n\
    \        val b2 = sides(1)\n        val c2 = sides(2)\n        a2 * a2 + b2 *\
    \ b2 == c2 * c2", "        val sides = List(a, b, c).sorted\n        val (x, y,\
    \ z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", "    \
    \    // Fill Up this function body\n        // `a` is the length of the side opposite\
    \ to the right angle.\n        // `b` is the length of the side opposite to the\
    \ right angle.\n        // `c` is the length of the side opposite to the right\
    \ angle.\n        // Return true if the three sides form a right-angled triangle,\
    \ false otherwise.\n        if (a > b && a > c) {\n            if (a * a == b\
    \ * b + c * c) true else false\n        } else if (b > a && b > c) {\n       \
    \     if (b * b == a * a + c * c) true else false\n        } else {\n        \
    \    if (c * c == a * a + b * b) true else false\n        }", "        // Your\
    \ code here\n        return false", "        // Fill Up this function body\n \
    \       // `a`, `b`, `c` are the lengths of the three sides of a triangle.\n \
    \       // Return true if the three sides form a right-angled triangle, false\
    \ otherwise.\n        if (a == 0 || b == 0 || c == 0) return false\n        val\
    \ sides = List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0), sides(1),\
    \ sides(2))\n        if (a1 * a1 + b1 * b1 == c1 * c1) true else false", "   \
    \     val sides = List(a, b, c).sorted\n        val max = sides(2)\n        val\
    \ sum = sides.sum\n        val sum2 = sum - max\n        max * max == sum2 * sum2",
  "        // Write your code here\n        return false", "        // Fill Up this\
    \ function body\n        // `a`, `b`, `c` are the sides of the triangle\n    \
    \    // return true if the triangle is right-angled, false otherwise\n       \
    \ val sides = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1)\
    \ == sides(2) * sides(2)", "        // Your code here\n        return false",
  "        // Fill Up this function body\n        // `a`, `b`, `c` are the lengths\
    \ of the three sides of a triangle.\n        // Return true if the three sides\
    \ form a right-angled triangle, false otherwise.\n        val sides = Array(a,\
    \ b, c)\n        val maxSide = sides.max\n        val maxSideIndex = sides.indexOf(maxSide)\n\
    \        val otherSides = sides.filter(_ != maxSide)\n        val sumOfSquaresOfOtherSides\
    \ = otherSides.map(x => x * x).sum\n        val squareOfMaxSide = maxSide * maxSide\n\
    \        sumOfSquaresOfOtherSides == squareOfMaxSide", "        // Fill Up this\
    \ function body\n        // `a` is the side opposite to the right angle.\n   \
    \     // `b` and `c` are the other two sides.\n        // `a`^2 + `b`^2 = `c`^2\n\
    \        // `a`^2 + `c`^2 = `b`^2\n        // `b`^2 + `c`^2 = `a`^2\n        if\
    \ (a > b && a > c) {\n            if (a * a == b * b + c * c) {\n            \
    \    return true\n            }\n        } else if (b > a && b > c) {\n      \
    \      if (b * b == a * a + c * c) {\n                return true\n          \
    \  }\n        } else if (c > a && c > b) {\n            if (c * c == a * a + b\
    \ * b) {\n                return true\n            }\n        }\n        return\
    \ false", "        val l = List(a, b, c)\n        val max = l.max\n        val\
    \ min = l.min\n        val mid = l.filter(x => x != max && x != min).head\n  \
    \      if (max * max == min * min + mid * mid) true else false", "        // Fill\
    \ Up this function body\n        // `a`, `b`, `c` are the lengths of the three\
    \ sides of a triangle\n        // `a`, `b`, `c` are positive integers\n      \
    \  // `a`, `b`, `c` are less than or equal to 1000\n        // return true if\
    \ the three sides form a right-angled triangle, false otherwise\n        val sides\
    \ = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n\
    \        x * x + y * y == z * z", "        // Fill Up this function body\n   \
    \     // `a`, `b`, `c` are the lengths of the three sides of a triangle\n    \
    \    // return true if the three sides form a right-angled triangle, false otherwise\n\
    \        val sides = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1)\
    \ * sides(1) == sides(2) * sides(2)", "        // Fill Up this function body\n\
    \        // `a` is the length of side `a`\n        // `b` is the length of side\
    \ `b`\n        // `c` is the length of side `c`\n        // You have to return\
    \ a boolean value\n        // If the three sides form a right-angled triangle,\
    \ return true\n        // If the three sides do not form a right-angled triangle,\
    \ return false\n        val sides = List(a, b, c).sorted\n        val (x, y, z)\
    \ = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", "       \
    \ // Fill Up this function body\n        // `a` is the length of the side opposite\
    \ to the right angle\n        // `b` is the length of the side opposite to the\
    \ right angle\n        // `c` is the length of the side opposite to the right\
    \ angle\n        // You can use the `pow` function to compute the square of a\
    \ number\n        // Example: pow(2, 3) = 2^3 = 8\n        if (a > b && a > c)\
    \ {\n            if (pow(a, 2) == pow(b, 2) + pow(c, 2)) true else false\n   \
    \     } else if (b > a && b > c) {\n            if (pow(b, 2) == pow(a, 2) + pow(c,\
    \ 2)) true else false\n        } else {\n            if (pow(c, 2) == pow(a, 2)\
    \ + pow(b, 2)) true else false\n        }", "        // Fill up this function\
    \ body\n        // `a`, `b` and `c` are the lengths of the three sides of a triangle\n\
    \        // You have to return true if the three sides form a right-angled triangle,\n\
    \        // false otherwise\n        if (a > b && a > c) {\n            if (a\
    \ * a == b * b + c * c) true else false\n        } else if (b > a && b > c) {\n\
    \            if (b * b == a * a + c * c) true else false\n        } else {\n \
    \           if (c * c == a * a + b * b) true else false\n        }", "       \
    \ // Fill Up this function body\n        // `a` is the length of the side opposite\
    \ to the right angle.\n        // `b` is the length of the side opposite to the\
    \ right angle.\n        // `c` is the length of the hypotenuse.\n        // `a`\
    \ and `b` are the legs of the triangle.\n        // `c` is the hypotenuse of the\
    \ triangle.\n        // `a` and `b` are the legs of the triangle.\n        //\
    \ `c` is the hypotenuse of the triangle.\n        // `a` and `b` are the legs\
    \ of the triangle.\n        // `c` is the hypotenuse of the triangle.\n      \
    \  // `a` and `b` are the legs of the triangle.\n        // `c` is the hypotenuse\
    \ of the triangle.\n        // `a` and `b` are the legs of the triangle.\n   \
    \     // `c` is the hypotenuse of the triangle.\n        // `a` and `b` are the\
    \ legs of the triangle.\n        // `c` is the hypotenuse of the triangle.\n \
    \       // `a` and `b` are the legs of the triangle.\n        // `c` is the hypotenuse\
    \ of the triangle.\n        // `a` and `b` are the legs of the triangle.\n   \
    \     // `c` is the hypotenuse of the triangle.\n        // `a` and `b` are the\
    \ legs of the triangle.\n        // `c` is the hypotenuse of the triangle.\n \
    \       // `a` and `b` are the legs of the triangle.\n        // `c` is the hypotenuse\
    \ of the triangle.\n        // `a` and `b` are the legs of the triangle.\n   \
    \     // `c` is the hypotenuse of the triangle.\n        // `a` and `b` are the\
    \ legs of the triangle.\n        // `c` is the hypotenuse of the triangle.\n \
    \       // `a` and `b` are the legs of the triangle.\n        // `c` is the hypotenuse\
    \ of the triangle.\n        // `a` and `b` are the legs of the triangle.\n   \
    \     // `c` is the hypotenuse of the triangle.\n        // `a", "        // Fill\
    \ Up this function body\n        // `a`, `b`, `c` are the lengths of the three\
    \ sides of a triangle.\n        if (a > b && a > c) {\n            if (a * a ==\
    \ b * b + c * c) true else false\n        } else if (b > a && b > c) {\n     \
    \       if (b * b == a * a + c * c) true else false\n        } else {\n      \
    \      if (c * c == a * a + b * b) true else false\n        }", "        // Fill\
    \ Up this function body\n        // `a`, `b`, `c` are the side lengths of a triangle\n\
    \        // return true if the three sides form a right-angled triangle, false\
    \ otherwise\n        val sides = List(a, b, c)\n        val maxSide = sides.max\n\
    \        val otherSides = sides.filter(_ != maxSide)\n        val sumOfOtherSides\
    \ = otherSides.sum\n        maxSide * maxSide == otherSides(0) * otherSides(0)\
    \ + otherSides(1) * otherSides(1)", "        // Fill Up this function body\n \
    \       // `a`, `b`, `c` are the lengths of the three sides of a triangle\n  \
    \      // return true if the three sides form a right-angled triangle, false otherwise\n\
    \        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z", "        // Fill Up this\
    \ function body\n        // `a`, `b`, `c` are the lengths of the three sides of\
    \ a triangle\n        // return true if the three sides form a right-angled triangle,\
    \ false otherwise\n        val l = List(a, b, c)\n        val max = l.max\n  \
    \      val min = l.min\n        val mid = l.filter(x => x != max && x != min).head\n\
    \        if (max * max == min * min + mid * mid) true else false", "        //\
    \ Fill Up this function body\n        // `a`, `b`, `c` are the lengths of the\
    \ sides of the triangle\n        val x = a*a\n        val y = b*b\n        val\
    \ z = c*c\n        if (x + y == z || x + z == y || y + z == x) true else false",
  "        // Fill Up this function body\n        // `a` is the length of the side\
    \ opposite to the right angle\n        // `b` is the length of the side opposite\
    \ to the right angle\n        // `c` is the length of the side opposite to the\
    \ right angle\n        // return true if the three sides form a right-angled triangle,\
    \ false otherwise\n        val sides = List(a, b, c).sorted\n        val a2 =\
    \ sides(0)\n        val b2 = sides(1)\n        val c2 = sides(2)\n        a2 *\
    \ a2 + b2 * b2 == c2 * c2", "        // Fill Up this function body\n        //\
    \ `a`, `b`, `c` are the sides of the triangle\n        // return true if the triangle\
    \ is right-angled, false otherwise\n        val sides = List(a, b, c).sorted\n\
    \        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n\
    \        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        // Fill\
    \ Up this function body\n        // `a` is the length of the side opposite to\
    \ the right angle.\n        // `b` is the length of the side opposite to the right\
    \ angle.\n        // `c` is the length of the side opposite to the right angle.\n\
    \        // You can use the `pow` function to compute the power of a number.\n\
    \        // Example:\n        // >>> pow(2, 3)\n        // (8)\n        // >>>\
    \ pow(4, 0.5)\n        // (2)\n        // >>> pow(8, 1/3)\n        // (2)\n  \
    \      val sides = Array(a, b, c)\n        val max = sides.max\n        val maxIndex\
    \ = sides.indexOf(max)\n        val otherSides = sides.zipWithIndex.filter(_._2\
    \ != maxIndex).map(_._1)\n        val otherSidesSum = otherSides.sum\n       \
    \ val otherSidesProduct = otherSides.product\n        val maxSide = max\n    \
    \    val maxSideSquare = pow(maxSide, 2)\n        val otherSidesSumSquare = pow(otherSidesSum,\
    \ 2)\n        val otherSidesProductSquare = pow(otherSidesProduct, 2)\n      \
    \  val isRightAngleTriangle = maxSideSquare == otherSidesSumSquare + otherSidesProductSquare\n\
    \        isRightAngleTriangle", "        // Your code here\n        return false",
  "        // Fill Up this function body\n        // `a`, `b`, `c` are the lengths\
    \ of the three sides of a triangle\n        // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n        if (a > b && a > c) {\n\
    \            if (a * a == b * b + c * c) true else false\n        } else if (b\
    \ > a && b > c) {\n            if (b * b == a * a + c * c) true else false\n \
    \       } else {\n            if (c * c == a * a + b * b) true else false\n  \
    \      }", "        // Fill Up this function body\n        // `a` is the length\
    \ of the side of the triangle opposite to the right angle.\n        // `b` is\
    \ the length of the side of the triangle opposite to the right angle.\n      \
    \  // `c` is the length of the side of the triangle opposite to the right angle.\n\
    \        // You can use the `sqrt` function to compute the square root of a number.\n\
    \        // You can use the `pow` function to compute the power of a number.\n\
    \        // The `pow` function is available in the `math` package.\n        //\
    \ You can use the `math.pow` function to compute the power of a number.\n    \
    \    // You can use the `math.sqrt` function to compute the square root of a number.\n\
    \        // You can use the `math.pow` function to compute the power of a number.\n\
    \        // You can use the `math.sqrt` function to compute the square root of\
    \ a number.\n        // You can use the `math.pow` function to compute the power\
    \ of a number.\n        // You can use the `math.sqrt` function to compute the\
    \ square root of a number.\n        // You can use the `math.pow` function to\
    \ compute the power of a number.\n        // You can use the `math.sqrt` function\
    \ to compute the square root of a number.\n        // You can use the `math.pow`\
    \ function to compute the power of a number.\n        // You can use the `math.sqrt`\
    \ function to compute the square root of a number.\n        // You can use the\
    \ `math.pow` function to compute the power of a number.\n        // You can use\
    \ the `math.sqrt` function to compute the square root of a number.\n        //\
    \ You can use the `math.pow` function to compute the power of a number.\n    \
    \    // You can use the `math.sqrt` function to compute the square root of a number.\n\
    \        // You can use the `math.pow` function to compute the power of a number.\n\
    \        // You can use the `math.sqrt` function to compute the square root of\
    \ a number.\n        // You can use the `math.pow` function to compute the power\
    \ of a number.", "        // Your code here\n        return false", "        //\
    \ Fill Up this function body\n        // `a` is the length of the side opposite\
    \ to the right angle.\n        // `b` is the length of the side opposite to the\
    \ right angle.\n        // `c` is the length of the side opposite to the right\
    \ angle.\n        // Return true if the three sides form a right-angled triangle,\
    \ false otherwise.\n        val sides = List(a, b, c).sorted\n        val (x,\
    \ y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", " \
    \       // Fill Up this function body\n        // `a`, `b`, `c` are the lengths\
    \ of the three sides of a triangle\n        // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n        val sides = List(a, b,\
    \ c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x\
    \ * x + y * y == z * z", "        // Fill Up this function body\n        // `a`\
    \ is the length of the side opposite to the right angle.\n        // `b` is the\
    \ length of the side opposite to the right angle.\n        // `c` is the length\
    \ of the side opposite to the right angle.\n        // You can use the predefined\
    \ functions `pow` and `sqrt` to compute the square root.\n        // Do not declare\
    \ any new variables.\n        val a2 = pow(a, 2)\n        val b2 = pow(b, 2)\n\
    \        val c2 = pow(c, 2)\n        if (a2 + b2 == c2) true\n        else if\
    \ (a2 + c2 == b2) true\n        else if (b2 + c2 == a2) true\n        else false",
  "        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n \
    \       val catheti = sides(0) * sides(0) + sides(1) * sides(1)\n        hypotenuse\
    \ * hypotenuse == catheti", "        // Fill Up this function body\n        //\
    \ `a`, `b`, `c` are the side lengths of the triangle\n        // return true if\
    \ the three sides form a right-angled triangle, false otherwise\n        val sides\
    \ = List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0), sides(1), sides(2))\n\
    \        a1 * a1 + b1 * b1 == c1 * c1", "        // Fill Up this function body\n\
    \        // `a`, `b`, `c` are the lengths of the three sides of a triangle\n \
    \       // return true if the three sides form a right-angled triangle, false\
    \ otherwise\n        if (a > b && a > c) {\n            if (a * a == b * b + c\
    \ * c) true else false\n        } else if (b > a && b > c) {\n            if (b\
    \ * b == a * a + c * c) true else false\n        } else {\n            if (c *\
    \ c == a * a + b * b) true else false\n        }", "        // Fill Up this function\
    \ body\n        // `a`, `b`, `c` are the sides of the triangle\n        // return\
    \ true if the triangle is right-angled, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1)\
    \ * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", " \
    \       // Your code goes here\n        return false", "        val sides = List(a,\
    \ b, c).sorted\n        val x = sides(0)\n        val y = sides(1)\n        val\
    \ z = sides(2)\n        x * x + y * y == z * z", "        // Fill Up this function\
    \ body\n        // `a`, `b`, `c` are the side lengths of the triangle\n      \
    \  // return true if the triangle is right-angled, false otherwise\n        val\
    \ sides = List(a, b, c).sorted\n        val max = sides(2)\n        val min =\
    \ sides(0)\n        val mid = sides(1)\n        val max2 = max * max\n       \
    \ val min2 = min * min\n        val mid2 = mid * mid\n        if (max2 == min2\
    \ + mid2) true else false", "        // Fill Up this function body\n        //\
    \ `a` is the length of the side opposite to the right angle\n        // `b` is\
    \ the length of the side opposite to the right angle\n        // `c` is the length\
    \ of the side opposite to the right angle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val a = sides(0)\n        val b = sides(1)\n        val\
    \ c = sides(2)\n        a * a + b * b == c * c", "        // Write your code here\n\
    \        return false", "        val sides = List(a, b, c).sorted\n        sides(0)\
    \ * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", "        val list\
    \ = List(a, b, c)\n        val max = list.max\n        val sum = list.sum - max\n\
    \        max * max == sum * sum", "        // Fill Up this function body\n   \
    \     // `a` `b` `c` are the side lengths of the triangle\n        if (a > b &&\
    \ a > c) {\n            if (a * a == b * b + c * c) true else false\n        }\
    \ else if (b > a && b > c) {\n            if (b * b == a * a + c * c) true else\
    \ false\n        } else {\n            if (c * c == a * a + b * b) true else false\n\
    \        }", "        val sides = List(a, b, c).sorted\n        val (x, y, z)\
    \ = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", "       \
    \ // Fill Up this function body\n        // `a`, `b`, `c` are the lengths of the\
    \ three sides of a triangle\n        // return true if the three sides form a\
    \ right-angled triangle, false otherwise\n        if (a == 0 || b == 0 || c ==\
    \ 0) return false\n        val max = max(a, max(b, c))\n        val min = min(a,\
    \ min(b, c))\n        val mid = a + b + c - max - min\n        if (max * max ==\
    \ mid * mid + min * min) true else false", "        val sides = List(a, b, c).sorted\n\
    \        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y\
    \ == z * z", "        // Fill Up this function body\n        // `a`, `b`, `c`\
    \ are the lengths of the three sides of a triangle.\n        // Return true if\
    \ the three sides form a right-angled triangle, false otherwise.\n        if (a\
    \ == 0 || b == 0 || c == 0) return false\n        val max = max(a, max(b, c))\n\
    \        val min = min(a, min(b, c))\n        val mid = a + b + c - max - min\n\
    \        max * max == mid * mid + min * min", "        // Fill Up this function\
    \ body\n        // `a`, `b`, `c` are the lengths of the three sides of a triangle\n\
    \        // return true if the three sides form a right-angled triangle, false\
    \ otherwise\n        val sides = List(a, b, c).sorted\n        val (x, y, z) =\
    \ (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", "        //\
    \ Fill Up this function body\n        // `a` is the length of the side opposite\
    \ to the right angle\n        // `b` is the length of the side opposite to the\
    \ right angle\n        // `c` is the length of the side opposite to the right\
    \ angle\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z", "        // Fill Up this\
    \ function body\n        // `a` is the side of the triangle opposite to the right\
    \ angle.\n        // `b` is the side of the triangle opposite to the right angle.\n\
    \        // `c` is the hypotenuse of the triangle.\n        // Return true if\
    \ the three sides form a right-angled triangle, false otherwise.\n        val\
    \ sides = List(a, b, c)\n        val max = sides.max\n        val other = sides.filter(_\
    \ != max)\n        val sum = other.sum\n        max * max == other(0) * other(0)\
    \ + other(1) * other(1)", "        // Fill Up this function body\n        // `a`\
    \ is the length of side `a`\n        // `b` is the length of side `b`\n      \
    \  // `c` is the length of side `c`\n        // You have to return true if the\
    \ three sides form a right-angled triangle, false otherwise.\n        if (a >\
    \ b && a > c) {\n            if (a * a == b * b + c * c) true else false\n   \
    \     } else if (b > a && b > c) {\n            if (b * b == a * a + c * c) true\
    \ else false\n        } else {\n            if (c * c == a * a + b * b) true else\
    \ false\n        }", "        // Fill Up this function body\n        // `a`, `b`,\
    \ `c` are the lengths of the three sides of a triangle\n        // return true\
    \ if the three sides form a right-angled triangle, false otherwise\n        val\
    \ sides = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1)\
    \ == sides(2) * sides(2)", "        // Fill Up this function body\n        //\
    \ `a` is the length of side `a`\n        // `b` is the length of side `b`\n  \
    \      // `c` is the length of side `c`\n        // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n        val sides = Array(a,\
    \ b, c)\n        val max = sides.max\n        val min = sides.min\n        val\
    \ mid = sides.sum - max - min\n        max * max == min * min + mid * mid", " \
    \       val sides = Array(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z", "        // Fill Up this\
    \ function body\n        // `a` represents the length of the side `a`\n      \
    \  // `b` represents the length of the side `b`\n        // `c` represents the\
    \ length of the side `c`\n        if (a > 0 && b > 0 && c > 0) {\n           \
    \ val sides = List(a, b, c).sorted\n            val hypotenuse = sides(2)\n  \
    \          val cathetus1 = sides(1)\n            val cathetus2 = sides(0)\n  \
    \          val hypotenuse2 = pow(hypotenuse, 2)\n            val cathetus12 =\
    \ pow(cathetus1, 2)\n            val cathetus22 = pow(cathetus2, 2)\n        \
    \    hypotenuse2 == cathetus12 + cathetus22\n        } else {\n            false\n\
    \        }", "        // Your code here\n        return false", "        // Fill\
    \ Up this function body\n        // `a` is the length of the side opposite to\
    \ the right angle.\n        // `b` is the length of the side opposite to the right\
    \ angle.\n        // `c` is the length of the side opposite to the right angle.\n\
    \        // You can use the predefined functions `pow` and `sqrt`\n        val\
    \ sides = List(a, b, c).sorted\n        val a2 = pow(sides(0), 2)\n        val\
    \ b2 = pow(sides(1), 2)\n        val c2 = pow(sides(2), 2)\n        a2 + b2 ==\
    \ c2", "        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z", "        // Fill Up this function body\n        //\
    \ `a` represents the length of side `a`\n        // `b` represents the length\
    \ of side `b`\n        // `c` represents the length of side `c`\n        // You\
    \ have to return true if the three sides form a right-angled triangle, false otherwise.\n\
    \        if (a > b && a > c) {\n            if (pow(a, 2) == pow(b, 2) + pow(c,\
    \ 2)) true else false\n        } else if (b > a && b > c) {\n            if (pow(b,\
    \ 2) == pow(a, 2) + pow(c, 2)) true else false\n        } else {\n           \
    \ if (pow(c, 2) == pow(a, 2) + pow(b, 2)) true else false\n        }", "     \
    \   // Your code here\n        return false", "        // Fill Up this function\
    \ body\n        // `a` represents the length of the side of the triangle\n   \
    \     // `b` represents the length of the side of the triangle\n        // `c`\
    \ represents the length of the side of the triangle\n        // Do not change\
    \ the function defintion provided.\n        if (a == 0 || b == 0 || c == 0) return\
    \ false\n        val sides = List(a, b, c).sorted\n        val x = sides(0)\n\
    \        val y = sides(1)\n        val z = sides(2)\n        x * x + y * y ==\
    \ z * z", "        // Fill Up this function body\n        // `a` is the length\
    \ of the first side of the triangle\n        // `b` is the length of the second\
    \ side of the triangle\n        // `c` is the length of the third side of the\
    \ triangle\n        // Do not change the function defintion provided.\n      \
    \  if (a == 0 || b == 0 || c == 0) {\n            return false\n        }\n  \
    \      val sides = List(a, b, c)\n        val maxSide = sides.max\n        val\
    \ maxSideIndex = sides.indexOf(maxSide)\n        val otherSides = sides.zipWithIndex.filter(_._2\
    \ != maxSideIndex).map(_._1)\n        val sumOfOtherSides = otherSides.sum\n \
    \       maxSide == sumOfOtherSides", "        // Your code here\n        return\
    \ false", "        // Fill Up this function body\n        // `a` is the length\
    \ of side a\n        // `b` is the length of side b\n        // `c` is the length\
    \ of side c\n        // return true if the three sides form a right-angled triangle,\
    \ false otherwise\n        if (a > b && a > c) {\n            if (a * a == b *\
    \ b + c * c) true else false\n        } else if (b > a && b > c) {\n         \
    \   if (b * b == a * a + c * c) true else false\n        } else {\n          \
    \  if (c * c == a * a + b * b) true else false\n        }", "        // Fill up\
    \ this function body\n        // `a`, `b` and `c` are the lengths of the three\
    \ sides of a triangle\n        // You have to return true if the three sides form\
    \ a right-angled triangle,\n        // false otherwise\n        if (a > b && a\
    \ > c) {\n            if (a * a == b * b + c * c) true else false\n        } else\
    \ if (b > a && b > c) {\n            if (b * b == a * a + c * c) true else false\n\
    \        } else {\n            if (c * c == a * a + b * b) true else false\n \
    \       }", "        // Your code here\n        return false", "        // Fill\
    \ Up this function body\n        // `a`, `b`, `c` are the lengths of the three\
    \ sides of a triangle\n        // return true if the three sides form a right-angled\
    \ triangle, false otherwise\n        if (a > b && a > c) {\n            if (a\
    \ * a == b * b + c * c) true else false\n        } else if (b > a && b > c) {\n\
    \            if (b * b == a * a + c * c) true else false\n        } else {\n \
    \           if (c * c == a * a + b * b) true else false\n        }", "       \
    \ // Fill Up this function body\n        // `a`, `b`, `c` are the side lengths\
    \ of the triangle\n        // return true if the triangle is right-angled, false\
    \ otherwise\n        val x = a*a\n        val y = b*b\n        val z = c*c\n \
    \       if (x + y == z || x + z == y || y + z == x) true else false", "      \
    \  // Fill Up this function body\n        // `a` `b` `c` are the sides of the\
    \ triangle\n        if (a > b && a > c) {\n            if (a * a == b * b + c\
    \ * c) true else false\n        } else if (b > a && b > c) {\n            if (b\
    \ * b == a * a + c * c) true else false\n        } else {\n            if (c *\
    \ c == a * a + b * b) true else false\n        }", "        // Your code here\n\
    \        return false", "        // Fill Up this function body\n        // `a`,\
    \ `b`, `c` are the lengths of the sides of the triangle\n        // return true\
    \ if the three sides form a right-angled triangle, false otherwise\n        val\
    \ sides = Array(a, b, c)\n        val max = sides.max\n        val sum = sides.sum\
    \ - max\n        max * max == sum * sum", "        // Fill Up this function body\n\
    \        // `a`, `b`, `c` are the lengths of the three sides of a triangle\n \
    \       // return true if the three sides form a right-angled triangle, false\
    \ otherwise\n        val sides = Array(a, b, c)\n        val max = sides.max\n\
    \        val min = sides.min\n        val mid = sides.filter(x => x != max &&\
    \ x != min).head\n        if (min + mid > max) {\n            val hyp = sqrt(max\
    \ * max)\n            val other = sqrt(min * min + mid * mid)\n            abs(hyp\
    \ - other) < 0.000001\n        } else false", "        // Fill Up this function\
    \ body\n        // `a`, `b`, `c` are the lengths of the three sides of a triangle\n\
    \        // return true if the three sides form a right-angled triangle, false\
    \ otherwise\n        val sides = List(a, b, c).sorted\n        val hypotenuse\
    \ = sides(2)\n        val cathetus = sides(1)\n        val base = sides(0)\n \
    \       hypotenuse * hypotenuse == cathetus * cathetus + base * base", "     \
    \   // Fill Up this function body\n        // `a`, `b`, `c` are the sides of the\
    \ triangle\n        if (a == 0 || b == 0 || c == 0) return false\n        val\
    \ sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n       \
    \ val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n       \
    \ if (a2 + b2 == c2) true else false", "        // Fill Up this function body\n\
    \        // `a`, `b`, `c` are the lengths of the three sides of a triangle.\n\
    \        // Return true if the three sides form a right-angled triangle, false\
    \ otherwise.\n        if (a == 0 || b == 0 || c == 0) return false\n        val\
    \ max = max(a, max(b, c))\n        val min = min(a, min(b, c))\n        val mid\
    \ = a + b + c - max - min\n        if (max * max == min * min + mid * mid) return\
    \ true\n        return false", "        // Fill up this function body\n      \
    \  // `a`, `b` and `c` are the lengths of the three sides of a triangle.\n   \
    \     // Return true if the three sides form a right-angled triangle, false otherwise.\n\
    \        val arr = Array(a, b, c)\n        arr.sortWith(_ < _)\n        arr(0)\
    \ * arr(0) + arr(1) * arr(1) == arr(2) * arr(2)", "        // Fill Up this function\
    \ body\n        // `a`, `b`, `c` are the side lengths of the triangle\n      \
    \  // return true if the triangle is right-angled, false otherwise\n        val\
    \ sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n        val\
    \ cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n        hypotenuse *\
    \ hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2", "        // Fill\
    \ Up this function body\n        // `a`, `b`, `c` are the sides of the triangle\n\
    \        if (a > b && a > c) {\n            if (a * a == b * b + c * c) true else\
    \ false\n        } else if (b > a && b > c) {\n            if (b * b == a * a\
    \ + c * c) true else false\n        } else {\n            if (c * c == a * a +\
    \ b * b) true else false\n        }", "        val sides = List(a, b, c).sorted\n\
    \        val (a, b, c) = (sides(0), sides(1), sides(2))\n        a * a + b * b\
    \ == c * c", "        // Fill Up this function body\n        // `a`, `b`, `c`\
    \ are the lengths of the three sides of a triangle\n        // return true if\
    \ the three sides form a right-angled triangle, false otherwise\n        val sides\
    \ = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n\
    \        x * x + y * y == z * z", "        // Fill Up this function body\n   \
    \     // `a` is the length of the side opposite to the right angle.\n        //\
    \ `b` is the length of the side opposite to the right angle.\n        // `c` is\
    \ the length of the side opposite to the right angle.\n        // You can use\
    \ the `pow` function to compute power.\n        // You can use the `sqrt` function\
    \ to compute square root.\n        val l = List(a, b, c)\n        val m = l.max\n\
    \        val r = l.filter(_ != m)\n        val s = r.sum\n        m * m == r(0)\
    \ * r(0) + r(1) * r(1)", "        // Fill Up this function body\n        // `a`,\
    \ `b`, `c` are the lengths of the three sides of a triangle\n        // return\
    \ true if the three sides form a right-angled triangle, false otherwise\n    \
    \    if (a > b && a > c) {\n            if (a * a == b * b + c * c) return true\n\
    \        } else if (b > a && b > c) {\n            if (b * b == a * a + c * c)\
    \ return true\n        } else if (c > a && c > b) {\n            if (c * c ==\
    \ a * a + b * b) return true\n        }\n        return false", "        // Fill\
    \ Up this function body\n        // `a` is the length of the side opposite to\
    \ the right angle.\n        // `b` is the length of the side opposite to the right\
    \ angle.\n        // `c` is the length of the side opposite to the right angle.\n\
    \        // You can use the predefined functions `pow` and `sqrt`\n        //\
    \ pow(x, y) = x raised to the power of y\n        // sqrt(x) = square root of\
    \ x\n        val x = pow(a, 2)\n        val y = pow(b, 2)\n        val z = pow(c,\
    \ 2)\n        if (x + y == z || x + z == y || y + z == x) true else false", " \
    \       // Your code here\n        return false", "        // Fill Up this function\
    \ body\n        // `a` is the length of the side opposite to the right angle.\n\
    \        // `b` is the length of the side opposite to the right angle.\n     \
    \   // `c` is the length of the side opposite to the right angle.\n        //\
    \ You can use the predefined functions `sqrt` and `pow`\n        // sqrt(x) returns\
    \ the square root of x\n        // pow(x, y) returns x to the power of y\n   \
    \     val sides = List(a, b, c).sorted\n        val a2 = pow(sides(0), 2)\n  \
    \      val b2 = pow(sides(1), 2)\n        val c2 = pow(sides(2), 2)\n        a2\
    \ + b2 == c2", "        // Fill Up this function body\n        // `a`, `b`, `c`\
    \ are the sides of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        if (a == 0 || b == 0 || c == 0) return false\n    \
    \    val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        if (x + y <= z) return false\n        if (x * x + y * y ==\
    \ z * z) return true\n        return false", "        // Write your code here\n\
    \        return true", "        // Fill Up this function body\n        // `a`,\
    \ `b`, `c` are the side lengths of the triangle\n        // return true if the\
    \ triangle is right-angled, false otherwise\n        val sides = List(a, b, c).sorted\n\
    \        val hypotenuse = sides(2)\n        val cathetus = sides(1)\n        val\
    \ base = sides(0)\n        hypotenuse * hypotenuse == cathetus * cathetus + base\
    \ * base", "        // Fill Up this function body\n        // `a`, `b`, `c` are\
    \ the side lengths of the triangle\n        val sides = List(a, b, c)\n      \
    \  val max = sides.max\n        val min = sides.min\n        val mid = sides.filter(x\
    \ => x != max && x != min).head\n        val max2 = max * max\n        val min2\
    \ = min * min\n        val mid2 = mid * mid\n        if (max2 == min2 + mid2)\
    \ true else false", "        // Fill Up this function body\n        // `a`, `b`,\
    \ `c` are the lengths of the three sides of a triangle\n        // return true\
    \ if the three sides form a right-angled triangle, false otherwise\n        var\
    \ x = a*a\n        var y = b*b\n        var z = c*c\n        if(x+y==z || x+z==y\
    \ || y+z==x)\n            return true\n        else\n            return false",
  "        if (a > b && a > c) {\n            if (a * a == b * b + c * c) true else\
    \ false\n        } else if (b > a && b > c) {\n            if (b * b == a * a\
    \ + c * c) true else false\n        } else {\n            if (c * c == a * a +\
    \ b * b) true else false\n        }", "        // Your code here\n        return\
    \ false", "        // Fill Up this function body\n        // `a` is the length\
    \ of the side opposite to the right angle\n        // `b` is the length of the\
    \ side opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2\
    \ - `c`^2 = 0\n        // `a`^2 + `b`^2 - `c`^2 < 0\n        // `a`^2 + `b`^2\
    \ - `c`^2 > 0\n        // `a`^2 + `b`^2 - `c`^2 = 0\n        val a2 = a * a\n\
    \        val b2 = b * b\n        val c2 = c * c\n        if (a2 + b2 == c2) true\n\
    \        else if (a2 + c2 == b2) true\n        else if (b2 + c2 == a2) true\n\
    \        else false", "        // Fill Up this function body\n        // `a` is\
    \ the length of the side opposite to the right angle\n        // `b` is the length\
    \ of the side opposite to the right angle\n        // `c` is the length of the\
    \ side opposite to the right angle\n        // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n        val sides = List(a, b,\
    \ c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)",
  "        // Fill Up this function body\n        // `a` is the length of the side\
    \ opposite to the right angle.\n        // `b` is the length of the side opposite\
    \ to the right angle.\n        // `c` is the length of the side opposite to the\
    \ right angle.\n        if (a > b && a > c) {\n            if (a * a == b * b\
    \ + c * c) true else false\n        } else if (b > a && b > c) {\n           \
    \ if (b * b == a * a + c * c) true else false\n        } else {\n            if\
    \ (c * c == a * a + b * b) true else false\n        }", "        val sides = List(a,\
    \ b, c).sorted\n        val hypotenuse = sides(2)\n        val cathetus = sides(1)\n\
    \        val base = sides(0)\n        hypotenuse * hypotenuse == cathetus * cathetus\
    \ + base * base", "        // Fill Up this function body\n        // `a` represents\
    \ the length of side `a`\n        // `b` represents the length of side `b`\n \
    \       // `c` represents the length of side `c`\n        // You have to return\
    \ true if the three sides form a right-angled triangle, false otherwise.\n   \
    \     // You can assume that the arguments passed to this function are valid lengths\
    \ of the sides of a triangle.\n        // You can assume that the arguments passed\
    \ to this function are valid lengths of the sides of a triangle.\n        val\
    \ sides = List(a, b, c).sorted\n        val a2 = sides(0)\n        val b2 = sides(1)\n\
    \        val c2 = sides(2)\n        val a2b2 = a2 * a2 + b2 * b2\n        val\
    \ c2sq = c2 * c2\n        a2b2 == c2sq", "        // Your code here\n        return\
    \ false", "        // Fill Up this function body\n        // `a` is the length\
    \ of the side opposite to the right angle\n        // `b` is the length of the\
    \ side opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        if (a > b && a > c) {\n            return (a * a\
    \ == b * b + c * c)\n        } else if (b > a && b > c) {\n            return\
    \ (b * b == a * a + c * c)\n        } else {\n            return (c * c == a *\
    \ a + b * b)\n        }", "        // Your code goes here\n        return false",
  "        // Fill Up this function body\n        // `a`, `b`, `c` are the side lengths\
    \ of a triangle\n        // return true if the triangle is right-angled, false\
    \ otherwise\n        val sides = List(a, b, c).sorted\n        val sqr = (x :\
    \ Long) => x * x\n        sqr(sides(0)) + sqr(sides(1)) == sqr(sides(2))", " \
    \       val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        // Fill up this function\
    \ body\n        // `a`, `b` and `c` are the lengths of the three sides of a triangle.\n\
    \        val sides = List(a, b, c)\n        val maxSide = sides.max\n        val\
    \ otherSides = sides.filter(_ != maxSide)\n        val hypotenuse = maxSide\n\
    \        val catheti = otherSides.sum\n        hypotenuse * hypotenuse == catheti\
    \ * catheti", "        // Fill Up this function body\n        // `a`, `b`, `c`\
    \ are the side lengths of the triangle\n        if (a == 0 || b == 0 || c == 0)\
    \ return false\n        val sides = List(a, b, c).sorted\n        val x = sides(0)\n\
    \        val y = sides(1)\n        val z = sides(2)\n        if (x * x + y * y\
    \ == z * z) return true\n        return false", "        // Fill Up this function\
    \ body\n        // `a` is the length of the side opposite to the right angle\n\
    \        // `b` is the length of the side opposite to the right angle\n      \
    \  // `c` is the length of the side opposite to the right angle\n        if (a\
    \ > b && a > c) {\n            if (a * a == b * b + c * c) true else false\n \
    \       } else if (b > a && b > c) {\n            if (b * b == a * a + c * c)\
    \ true else false\n        } else {\n            if (c * c == a * a + b * b) true\
    \ else false\n        }", "        // Fill Up this function body\n        // `a`\
    \ is the length of the side opposite to the right angle.\n        // `b` is the\
    \ length of the side opposite to the right angle.\n        // `c` is the length\
    \ of the hypotenuse.\n        // Hint: Use the Pythagorean theorem.\n        //\
    \ https://en.wikipedia.org/wiki/Pythagorean_theorem\n        // Hint: Use the\
    \ `math.pow` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        // Hint: Use the `math.sqrt` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        // Hint: Use the `math.abs` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        // Hint: Use the `math.round` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        // Hint: Use the `math.floor` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        // Hint: Use the `math.ceil` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        // Hint: Use the `math.max` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        // Hint: Use the `math.min` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        // Hint: Use the `math.signum` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        // Hint: Use the `math.toDegrees` function.\n        // https://www.scala-lang.org/api/current/scala/math/package.html\n\
    \        //", "        // Fill Up this function body\n        // `a`, `b`, `c`\
    \ are the lengths of the three sides of a triangle.\n        val sides = List(a,\
    \ b, c)\n        val maxSide = sides.max\n        val maxSideIndex = sides.indexOf(maxSide)\n\
    \        val otherSides = sides.take(maxSideIndex) ++ sides.drop(maxSideIndex\
    \ + 1)\n        val otherSidesSum = otherSides.sum\n        maxSide * maxSide\
    \ == otherSidesSum * otherSidesSum", "        // Fill Up this function body\n\
    \        // `a`, `b`, `c` are the lengths of the three sides of a triangle\n \
    \       // return true if the three sides form a right-angled triangle, false\
    \ otherwise\n        if (a > b && a > c) {\n            if (a * a == b * b + c\
    \ * c) true else false\n        } else if (b > a && b > c) {\n            if (b\
    \ * b == a * a + c * c) true else false\n        } else {\n            if (c *\
    \ c == a * a + b * b) true else false\n        }", "        // Fill Up this function\
    \ body\n        // `a` is the length of the side opposite to the right angle\n\
    \        val sides = List(a, b, c).sorted\n        val a = sides(0)\n        val\
    \ b = sides(1)\n        val c = sides(2)\n        a * a + b * b == c * c", " \
    \       // Your code here\n        return false", "        // Fill Up this function\
    \ body\n        // `a`, `b`, `c` are the lengths of the three sides of a triangle\n\
    \        // `a`, `b`, `c` are positive integers\n        // `a`, `b`, `c` are\
    \ less than or equal to 100\n        // `a`, `b`, `c` are not all equal\n    \
    \    // `a`, `b`, `c` are not all zero\n        val l = List(a, b, c)\n      \
    \  val max = l.max\n        val min = l.min\n        val mid = l.filter(x => x\
    \ != max && x != min).head\n        max * max == min * min + mid * mid", "   \
    \     // Your code here\n        return false", "        // Fill Up this function\
    \ body\n        // `a`, `b`, `c` are the lengths of the sides of a triangle\n\
    \        val sides = List(a, b, c)\n        val maxSide = sides.max\n        val\
    \ minSides = sides.filter(_ != maxSide)\n        val minSide = minSides.min\n\
    \        val otherSide = minSides.filter(_ != minSide).head\n        val sum =\
    \ minSide * minSide + otherSide * otherSide\n        val maxSideSquared = maxSide\
    \ * maxSide\n        sum == maxSideSquared", "        val sides = List(a, b, c).sorted\n\
    \        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y\
    \ == z * z", "        val sides = List(a, b, c).sorted\n        val (x, y, z)\
    \ = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", "       \
    \ // Fill Up this function body\n        // `a`, `b`, `c` are the lengths of the\
    \ three sides of a triangle\n        // return true if the three sides form a\
    \ right-angled triangle, false otherwise\n        val sides = List(a, b, c).sorted\n\
    \        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y\
    \ == z * z", "        // Fill Up this function body\n        // `a`, `b`, `c`\
    \ are the lengths of the sides of the triangle\n        // return true if the\
    \ three sides form a right-angled triangle, false otherwise\n        val sides\
    \ = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n\
    \        x * x + y * y == z * z", "        // Fill Up this function body\n   \
    \     // `a`, `b`, `c` are the sides of the triangle\n        if (a > b && a >\
    \ c) {\n            if (a*a == b*b + c*c) return true\n        } else if (b >\
    \ a && b > c) {\n            if (b*b == a*a + c*c) return true\n        } else\
    \ if (c > a && c > b) {\n            if (c*c == a*a + b*b) return true\n     \
    \   }\n        return false", "        // Fill Up this function body\n       \
    \ // `a`, `b`, `c` are the lengths of the sides of the triangle\n        // return\
    \ true if the three sides form a right-angled triangle, false otherwise\n    \
    \    if (a > b && a > c) {\n            if (a * a == b * b + c * c) return true\n\
    \        } else if (b > a && b > c) {\n            if (b * b == a * a + c * c)\
    \ return true\n        } else if (c > a && c > b) {\n            if (c * c ==\
    \ a * a + b * b) return true\n        }\n        return false", "        val sides\
    \ = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n\
    \        x * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n\
    \        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y\
    \ == z * z", "        // Fill Up this function body\n        // `a` is the length\
    \ of the side opposite to the right angle.\n        // `b` is the length of the\
    \ side opposite to the right angle.\n        // `c` is the length of the hypotenuse.\n\
    \        // Return true if the three sides form a right-angled triangle, false\
    \ otherwise.\n        if (a > b && a > c) {\n            return (a * a == b *\
    \ b + c * c)\n        } else if (b > a && b > c) {\n            return (b * b\
    \ == a * a + c * c)\n        } else {\n            return (c * c == a * a + b\
    \ * b)\n        }", "        // Fill Up this function body\n        // `a`, `b`,\
    \ `c` are the side lengths of the triangle\n        val sorted = List(a, b, c).sorted\n\
    \        val max = sorted(2)\n        val sum = sorted.sum - max\n        max\
    \ * max == sum * sum", "        // Your code here\n        return false", "  \
    \      val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        if (a > b && a > c) {\n\
    \            if (pow(a, 2) == pow(b, 2) + pow(c, 2)) true else false\n       \
    \ } else if (b > a && b > c) {\n            if (pow(b, 2) == pow(a, 2) + pow(c,\
    \ 2)) true else false\n        } else {\n            if (pow(c, 2) == pow(a, 2)\
    \ + pow(b, 2)) true else false\n        }", "        val sides = List(a, b, c).sorted\n\
    \        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y\
    \ == z * z", "        val sides = List(a, b, c).sorted\n        sides(0) * sides(0)\
    \ + sides(1) * sides(1) == sides(2) * sides(2)", "        if (a > b && a > c)\
    \ {\n            return a * a == b * b + c * c\n        } else if (b > a && b\
    \ > c) {\n            return b * b == a * a + c * c\n        } else {\n      \
    \      return c * c == a * a + b * b\n        }", "        if (a > b && a > c)\
    \ {\n            if (a * a == b * b + c * c) true else false\n        } else if\
    \ (b > a && b > c) {\n            if (b * b == a * a + c * c) true else false\n\
    \        } else {\n            if (c * c == a * a + b * b) true else false\n \
    \       }", "        // Fill Up this function body\n        // `a` is the length\
    \ of the side of the triangle opposite to the right angle.\n        // `b` is\
    \ the length of the side of the triangle opposite to the right angle.\n      \
    \  // `c` is the length of the side of the triangle opposite to the right angle.\n\
    \        // You can use the `pow` function to compute the square of a number.\n\
    \        // For example, `pow(2, 2)` computes the square of 2.\n        // You\
    \ can use the `sqrt` function to compute the square root of a number.\n      \
    \  // For example, `sqrt(4)` computes the square root of 4.\n        // You can\
    \ use the `max` function to compute the maximum of two numbers.\n        // For\
    \ example, `max(2, 3)` computes the maximum of 2 and 3.\n        // You can use\
    \ the `min` function to compute the minimum of two numbers.\n        // For example,\
    \ `min(2, 3)` computes the minimum of 2 and 3.\n        val (x, y, z) = (a, b,\
    \ c)\n        val (a1, b1, c1) = (pow(x, 2), pow(y, 2), pow(z, 2))\n        val\
    \ (a2, b2, c2) = (a1 + b1, a1 + c1, b1 + c1)\n        val (a3, b3, c3) = (sqrt(a2),\
    \ sqrt(b2), sqrt(c2))\n        val (a4, b4, c4) = (a3.toLong, b3.toLong, c3.toLong)\n\
    \        val (a5, b5, c5) = (max(a4, b4), max(a4, c4), max(b4, c4))\n        val\
    \ (a6, b6, c6) = (min(a5, b5), min(a5, c5), min(b5, c5))\n        val (a7, b7,\
    \ c7) = (a6 == a4, b6 == b4, c6 == c4)\n        val (a8, b8, c", "        // Fill\
    \ Up this function body\n        // `a`, `b`, `c` are the side lengths of the\
    \ triangle\n        if (a > b && a > c) {\n            if (a * a == b * b + c\
    \ * c) true else false\n        } else if (b > a && b > c) {\n            if (b\
    \ * b == a * a + c * c) true else false\n        } else {\n            if (c *\
    \ c == a * a + b * b) true else false\n        }", "        if (a > b && a > c)\
    \ {\n            if (a * a == b * b + c * c) return true\n        } else if (b\
    \ > a && b > c) {\n            if (b * b == a * a + c * c) return true\n     \
    \   } else if (c > a && c > b) {\n            if (c * c == a * a + b * b) return\
    \ true\n        }\n        return false", "        // Fill Up this function body\n\
    \        // `a`, `b`, `c` are the lengths of the three sides of a triangle\n \
    \       // return true if the three sides form a right-angled triangle, false\
    \ otherwise\n        val sides = List(a, b, c).sorted\n        val (x, y, z) =\
    \ (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", "        val\
    \ l = List(a, b, c)\n        val sorted = l.sorted\n        val max = sorted(2)\n\
    \        val sum = sorted(0) * sorted(0) + sorted(1) * sorted(1)\n        val\
    \ max2 = max * max\n        sum == max2", "        // Fill Up this function body\n\
    \        // `a`, `b`, `c` are the lengths of the three sides of a triangle.\n\
    \        // Return true if the three sides form a right-angled triangle, false\
    \ otherwise.\n        val sides = List(a, b, c)\n        val maxSide = sides.max\n\
    \        val otherSides = sides.filter(_ != maxSide)\n        val sumOfOtherSides\
    \ = otherSides.sum\n        maxSide * maxSide == otherSides(0) * otherSides(0)\
    \ + otherSides(1) * otherSides(1)", "        val sides = List(a, b, c).sorted\n\
    \        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n\
    \        val c2 = sides(2) * sides(2)\n        if (a2 + b2 == c2) true else false",
  "        // Fill Up this function body\n        // `a`, `b`, `c` are the lengths\
    \ of the sides of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        val sides = List(a, b, c).sorted\n        val hypotenuse\
    \ = sides(2)\n        val cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n\
    \        hypotenuse * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2",
  "        // Fill Up this function body\n        // `a` is the length of the side\
    \ of the triangle opposite to the right angle.\n        // `b` is the length of\
    \ the side of the triangle opposite to the right angle.\n        // `c` is the\
    \ length of the hypotenuse.\n        // `a` and `b` are the lengths of the sides\
    \ of the triangle.\n        // `c` is the length of the hypotenuse.\n        //\
    \ `a` and `b` are the lengths of the sides of the triangle.\n        // `c` is\
    \ the length of the hypotenuse.\n        // `a` and `b` are the lengths of the\
    \ sides of the triangle.\n        // `c` is the length of the hypotenuse.\n  \
    \      // `a` and `b` are the lengths of the sides of the triangle.\n        //\
    \ `c` is the length of the hypotenuse.\n        // `a` and `b` are the lengths\
    \ of the sides of the triangle.\n        // `c` is the length of the hypotenuse.\n\
    \        // `a` and `b` are the lengths of the sides of the triangle.\n      \
    \  // `c` is the length of the hypotenuse.\n        // `a` and `b` are the lengths\
    \ of the sides of the triangle.\n        // `c` is the length of the hypotenuse.\n\
    \        // `a` and `b` are the lengths of the sides of the triangle.\n      \
    \  // `c` is the length of the hypotenuse.\n        // `a` and `b` are the lengths\
    \ of the sides of the triangle.\n        // `c` is the length of the hypotenuse.\n\
    \        // `a` and `b` are the lengths of the sides of the triangle.\n      \
    \  // `c` is the length of the hypotenuse.\n        // `a` and `b` are the lengths\
    \ of the sides of the triangle.\n        // `c` is the length of the hypotenuse.\n\
    \        // `a` and `b` are the lengths of the sides of the triangle.\n      \
    \  // `c` is the length of the hypotenuse.\n        // `a` and `b` are the lengths\
    \ of the sides of the triangle.\n        // `c` is", "        // Your code here\n\
    \        return false", "        val sides = List(a, b, c).sorted\n        val\
    \ (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z",
  "        // Fill Up this function body\n        // `a` is the length of the side\
    \ opposite to the right angle\n        // `b` is the length of the side opposite\
    \ to the right angle\n        // `c` is the length of the side opposite to the\
    \ right angle\n        if (a > b && a > c) {\n            if (a * a == b * b +\
    \ c * c) true else false\n        } else if (b > a && b > c) {\n            if\
    \ (b * b == a * a + c * c) true else false\n        } else {\n            if (c\
    \ * c == a * a + b * b) true else false\n        }", "        // Fill Up this\
    \ function body\n        // `a`, `b`, `c` are the side lengths of the triangle\n\
    \        // `a`, `b`, `c` are all positive integers\n        // `a`, `b`, `c`\
    \ are all less than or equal to 100\n        // `a`, `b`, `c` are all integers\n\
    \        // `a`, `b`, `c` are all distinct\n        // `a`, `b`, `c` are in ascending\
    \ order\n        // `a`, `b`, `c` are not all equal\n        // `a`, `b`, `c`\
    \ are not all odd\n        // `a`, `b`, `c` are not all even\n        // `a`,\
    \ `b`, `c` are not all multiples of 3\n        // `a`, `b`, `c` are not all multiples\
    \ of 5\n        // `a`, `b`, `c` are not all multiples of 7\n        // `a`, `b`,\
    \ `c` are not all multiples of 11\n        // `a`, `b`, `c` are not all multiples\
    \ of 13\n        // `a`, `b`, `c` are not all multiples of 17\n        // `a`,\
    \ `b`, `c` are not all multiples of 19\n        // `a`, `b`, `c` are not all multiples\
    \ of 23\n        // `a`, `b`, `c` are not all multiples of 29\n        // `a`,\
    \ `b`, `c` are not all multiples of 31\n        // `a`, `b`, `c` are not all multiples\
    \ of 37\n        // `a`, `b`, `c` are not all multiples of 41\n        // `a`,\
    \ `b`, `c` are not all multiples of 43\n        // `a`, `b`, `c` are not all multiples\
    \ of 47\n        // `a`, `b`, `c` are not all multiples of 53\n        // `a`,\
    \ `b`, `c` are not all multiples of 59\n        // `a`, `b`, `c` are not all multiples\
    \ of 61\n        // `a`, `b`, `c` are not all multiples of 67\n        // `a`,\
    \ `b`, `c` are", "        // Your code here\n        return false", "        //\
    \ Fill Up this function body\n        // `a`, `b`, `c` are the lengths of the\
    \ three sides of a triangle\n        // return true if the three sides form a\
    \ right-angled triangle, false otherwise\n        val sides = List(a, b, c).sorted\n\
    \        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y\
    \ == z * z", "        // Fill Up this function body\n        // `a`, `b`, `c`\
    \ are the lengths of the three sides of a triangle\n        // return true if\
    \ the three sides form a right-angled triangle, false otherwise\n        var l\
    \ = List(a, b, c)\n        l = l.sorted\n        if (l(0) * l(0) + l(1) * l(1)\
    \ == l(2) * l(2)) true else false", "        // Fill up this function body\n \
    \       // `a`, `b` and `c` are the lengths of the three sides of a triangle.\n\
    \        if(a > b && a > c) {\n            if(a*a == b*b + c*c) true\n       \
    \     else false\n        }\n        else if(b > a && b > c) {\n            if(b*b\
    \ == a*a + c*c) true\n            else false\n        }\n        else {\n    \
    \        if(c*c == a*a + b*b) true\n            else false\n        }", "    \
    \    // Fill Up this function body\n        // `a`, `b`, `c` are the lengths of\
    \ the three sides of a triangle.\n        // return true if the three sides form\
    \ a right-angled triangle, false otherwise.\n        if (a > b && a > c) {\n \
    \           if (a * a == b * b + c * c) true else false\n        } else if (b\
    \ > a && b > c) {\n            if (b * b == a * a + c * c) true else false\n \
    \       } else {\n            if (c * c == a * a + b * b) true else false\n  \
    \      }", "        // Fill Up this function body\n        // `a`, `b`, `c` are\
    \ the lengths of the sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = Array(a,\
    \ b, c)\n        val sortedSides = sides.sorted\n        val hypotenuse = sortedSides(2)\n\
    \        val cathetus = sortedSides(1)\n        val base = sortedSides(0)\n  \
    \      return hypotenuse * hypotenuse == cathetus * cathetus + base * base", " \
    \       // Fill Up this function body\n        // `a`, `b`, `c` are the side lengths\
    \ of the triangle\n        // return true if the triangle is right-angled, false\
    \ otherwise\n        val sides = List(a, b, c).sorted\n        val (x, y, z) =\
    \ (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", "        //\
    \ Fill Up this function body\n        // `a` is the length of the side opposite\
    \ to the right angle\n        // `b` is the length of the side opposite to the\
    \ right angle\n        // `c` is the length of the side opposite to the right\
    \ angle\n        if (a == 0 || b == 0 || c == 0) return false\n        val sides\
    \ = List(a, b, c).sorted\n        val a2 = sides(0)\n        val b2 = sides(1)\n\
    \        val c2 = sides(2)\n        if (a2 * a2 + b2 * b2 == c2 * c2) true else\
    \ false", "        // Fill Up this function body\n        // `a`, `b`, `c` are\
    \ the sides of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        val list = List(a, b, c)\n        val sortedList =\
    \ list.sorted\n        val max = sortedList(2)\n        val sum = sortedList(0)\
    \ * sortedList(0) + sortedList(1) * sortedList(1)\n        val max2 = max * max\n\
    \        sum == max2", "        // Your code here\n        return false", "  \
    \      // Fill Up this function body\n        // `a` is the length of the side\
    \ opposite to the right angle\n        // `b` is the length of the side opposite\
    \ to the right angle\n        // `c` is the length of the side opposite to the\
    \ right angle\n        // `a`^2 + `b`^2 = `c`^2\n        if (a == 0 || b == 0\
    \ || c == 0) return false\n        val a2 = a * a\n        val b2 = b * b\n  \
    \      val c2 = c * c\n        if (a2 + b2 == c2) return true\n        if (a2\
    \ + c2 == b2) return true\n        if (b2 + c2 == a2) return true\n        false",
  "        // Fill Up this function body\n        // `a`, `b`, `c` are the sides of\
    \ the triangle\n        // return true if the triangle is right-angled, false\
    \ otherwise\n        val sides = List(a, b, c).sorted\n        val max = sides(2)\n\
    \        val min = sides(0)\n        val mid = sides(1)\n        max * max ==\
    \ min * min + mid * mid", "        // Your code here\n        return false", " \
    \       // Fill Up this function body\n        // `a` `b` `c` are the side lengths\
    \ of the triangle\n        // return true if the triangle is right angled, false\
    \ otherwise\n        val sides = List(a, b, c)\n        val maxSide = sides.max\n\
    \        val otherSides = sides.filter(x => x != maxSide)\n        val sumOfOtherSides\
    \ = otherSides.sum\n        maxSide * maxSide == sumOfOtherSides * sumOfOtherSides",
  "        // Fill Up this function body\n        // `a`, `b`, `c` are the lengths\
    \ of the three sides of a triangle\n        // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n        val sides = List(a, b,\
    \ c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x\
    \ * x + y * y == z * z", "        // Fill Up this function body\n        // `a`\
    \ is the length of the side opposite to the right angle.\n        // `b` is the\
    \ length of the side opposite to the right angle.\n        // `c` is the length\
    \ of the side opposite to the right angle.\n        // You can use the `pow` function\
    \ to compute the square of a number.\n        // Example:\n        // >>> pow(2,\
    \ 2)\n        // (4)\n        // >>> pow(3, 2)\n        // (9)\n        // >>>\
    \ pow(4, 2)\n        // (16)\n        if (a > b && a > c) {\n            if (pow(a,\
    \ 2) == pow(b, 2) + pow(c, 2)) true else false\n        } else if (b > a && b\
    \ > c) {\n            if (pow(b, 2) == pow(a, 2) + pow(c, 2)) true else false\n\
    \        } else {\n            if (pow(c, 2) == pow(a, 2) + pow(b, 2)) true else\
    \ false\n        }", "        val sides = List(a, b, c).sorted\n        sides(0)\
    \ * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", "        // Fill Up\
    \ this function body\n        // `a`, `b`, `c` are the lengths of the three sides\
    \ of a triangle\n        // return true if the three sides form a right-angled\
    \ triangle, false otherwise\n        if (a > b && a > c) {\n            if (a\
    \ * a == b * b + c * c) true else false\n        } else if (b > a && b > c) {\n\
    \            if (b * b == a * a + c * c) true else false\n        } else {\n \
    \           if (c * c == a * a + b * b) true else false\n        }", "       \
    \ // Fill Up this function body\n        // `a`, `b`, `c` are the sides of the\
    \ triangle\n        // return true if the triangle is right-angled, false otherwise\n\
    \        if (a > b && a > c) {\n            if (a * a == b * b + c * c) true else\
    \ false\n        } else if (b > a && b > c) {\n            if (b * b == a * a\
    \ + c * c) true else false\n        } else {\n            if (c * c == a * a +\
    \ b * b) true else false\n        }", "        // Your code here\n        return\
    \ false", "        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z", "        // Your code\
    \ here\n        return false", "        // Fill Up this function body\n      \
    \  // `a` is the side opposite to the right angle\n        // `b` is the side\
    \ adjacent to the right angle\n        // `c` is the hypotenuse\n        // `a`^2\
    \ + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2\
    \ = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n\
    \        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        //\
    \ `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 +\
    \ `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 =\
    \ `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n\
    \        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        //\
    \ `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 +\
    \ `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 =\
    \ `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 = `c`^2\n\
    \        // `a", "        // Fill Up this function body\n        // `a` `b` `c`\
    \ are the lengths of the three sides of a triangle\n        // return true if\
    \ the three sides form a right-angled triangle, false otherwise\n        val sides\
    \ = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n\
    \        x * x + y * y == z * z", "        // Your code here\n        return false",
  "        // Fill Up this function body\n        // `a` is the length of the side\
    \ opposite to the right angle.\n        // `b` is the length of the side opposite\
    \ to the right angle.\n        // `c` is the length of the hypotenuse.\n     \
    \   // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 - `c`^2 = 0\n        val\
    \ a2 = a * a\n        val b2 = b * b\n        val c2 = c * c\n        a2 + b2\
    \ - c2 == 0", "        val l = List(a, b, c)\n        val m = l.max\n        val\
    \ s = l.sum - m\n        m * m == s * s", "        // Fill Up this function body\n\
    \        // `a`, `b`, `c` are the sides of the triangle\n        // return true\
    \ if the triangle is right angled\n        // return false otherwise\n       \
    \ var sides = List(a, b, c)\n        sides = sides.sorted\n        if (sides(0)\
    \ * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)) true else false", " \
    \       // Fill Up this function body\n        // `a`, `b`, `c` are the side lengths\
    \ of the triangle\n        // return true if the triangle is right-angled, false\
    \ otherwise\n        val sides = List(a, b, c).sorted\n        val (a, b, c) =\
    \ (sides(0), sides(1), sides(2))\n        a * a + b * b == c * c", "        //\
    \ Fill Up this function body\n        // `a` is the length of the side opposite\
    \ to the right angle\n        val sides = List(a, b, c).sorted\n        val a\
    \ = sides(0)\n        val b = sides(1)\n        val c = sides(2)\n        a *\
    \ a + b * b == c * c", "        // Your code here\n        if (a * a + b * b ==\
    \ c * c) true else false", "        // Fill Up this function body\n        //\
    \ `a`, `b`, `c` are the side lengths of the triangle\n        // return true if\
    \ the triangle is right-angled, false otherwise\n        val sides = List(a, b,\
    \ c)\n        val max = sides.max\n        val others = sides.filter(_ != max)\n\
    \        val sum = others.map(x => x * x).sum\n        sum == max * max", "  \
    \      // Fill Up this function body\n        // `a`, `b`, `c` are the lengths\
    \ of the three sides of a triangle.\n        val sides = List(a, b, c)\n     \
    \   val maxSide = sides.max\n        val otherSides = sides.filter(x => x != maxSide)\n\
    \        val sumOfOtherSides = otherSides.sum\n        sumOfOtherSides > maxSide",
  "        // Your code here\n        return false", "        // Fill Up this function\
    \ body\n        // `a`, `b`, `c` are the lengths of the three sides of a triangle\n\
    \        // `a`, `b`, `c` are positive integers\n        // `a`, `b`, `c` are\
    \ less than or equal to 100\n        // return true if the three sides form a\
    \ right-angled triangle, false otherwise\n        val sides = List(a, b, c).sorted\n\
    \        sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", " \
    \       // Fill Up this function body\n        // `a` is the length of side `a`\n\
    \        // `b` is the length of side `b`\n        // `c` is the length of side\
    \ `c`\n        // return true if the three sides form a right-angled triangle,\
    \ false otherwise\n        if (a > b && a > c) {\n            if (a * a == b *\
    \ b + c * c) true else false\n        } else if (b > a && b > c) {\n         \
    \   if (b * b == a * a + c * c) true else false\n        } else {\n          \
    \  if (c * c == a * a + b * b) true else false\n        }", "        val sides\
    \ = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n\
    \        x * x + y * y == z * z", "        // Fill Up this function body\n   \
    \     // `a`, `b`, `c` are the lengths of the three sides of a triangle\n    \
    \    // return true if the three sides form a right-angled triangle, false otherwise\n\
    \        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z", "        // Fill Up this\
    \ function body\n        // `a`, `b`, `c` are the lengths of the sides of the\
    \ triangle\n        val sides = List(a, b, c)\n        val maxSide = sides.max\n\
    \        val otherSides = sides.filter(_ != maxSide)\n        val sumOfOtherSides\
    \ = otherSides.sum\n        maxSide * maxSide == otherSides(0) * otherSides(0)\
    \ + otherSides(1) * otherSides(1)", "        // Fill Up this function body\n \
    \       // `a` is the length of the side opposite to the right angle.\n      \
    \  // `b` is the length of the side opposite to the right angle.\n        // `c`\
    \ is the length of the side opposite to the right angle.\n        // You can use\
    \ the `pow` function to compute the square of a number.\n        // Example:\n\
    \        // >>> pow(2l, 2l)\n        // (4l)\n        // >>> pow(3l, 2l)\n   \
    \     // (9l)\n        // >>> pow(4l, 2l)\n        // (16l)\n        // >>> pow(5l,\
    \ 2l)\n        // (25l)\n        // >>> pow(6l, 2l)\n        // (36l)\n      \
    \  // >>> pow(7l, 2l)\n        // (49l)\n        // >>> pow(8l, 2l)\n        //\
    \ (64l)\n        // >>> pow(9l, 2l)\n        // (81l)\n        // >>> pow(10l,\
    \ 2l)\n        // (100l)\n        // >>> pow(11l, 2l)\n        // (121l)\n   \
    \     // >>> pow(12l, 2l)\n        // (144l)\n        // >>> pow(13l, 2l)\n  \
    \      // (169l)\n        // >>> pow(14l, 2l)\n        // (196l)\n        // >>>\
    \ pow(15l, 2l)\n        // (225l)\n        // >>> pow(16l, 2l)\n        // (256l)\n\
    \        // >>> pow(17l, 2l)\n        // (289l)\n        // >>> pow(18l, 2l)\n\
    \        // (324l)\n        // >>> pow(19l, 2l)\n        // (361l)\n        //\
    \ >>> pow(20l, 2l)\n        // (400l)\n        // >>> pow(21l, 2l)\n        //\
    \ (441l)\n        // >>> pow(22l, 2l)\n        // (484l)\n        // >>> pow(23l,\
    \ 2l)\n        // (529l)\n        // >>> pow(24", "        // Fill Up this function\
    \ body\n        // `a`, `b`, `c` are the sides of the triangle\n        // return\
    \ true if the triangle is right-angled, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z", "        // Fill Up this function body\n        //\
    \ `a`, `b`, `c` are the lengths of the sides of a triangle\n        // return\
    \ true if the three sides form a right-angled triangle, false otherwise\n    \
    \    val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z"]
stop_tokens:
- "\n    }\n"
