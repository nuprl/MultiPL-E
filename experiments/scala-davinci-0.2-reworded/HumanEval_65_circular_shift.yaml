name: HumanEval_65_circular_shift
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Circular shift the digits of the integer x, shift the digits right by shift\n\
  \    // and return the result as a string.\n    // If shift > number of digits,\
  \ return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\"\
  )\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x\
  \ : Long, shift : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
  \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\"\
  )));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
  \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\"\
  )));\n    }\n\n}\n"
completions: ["        val s = x.toString\n        if (shift >= s.length) s.reverse\n\
    \        else s.substring(s.length - shift.toInt) + s.substring(0, s.length -\
    \ shift.toInt)", "        val digits = x.toString.length\n        if (shift >=\
    \ digits) {\n            return x.toString.reverse\n        }\n        val (a,\
    \ b) = x.toString.splitAt(digits - shift.toInt)\n        (b + a)", "        val\
    \ n = x.toString.length\n        val s = shift % n\n        if (s == 0) x.toString\n\
    \        else if (s == 1) x.toString.reverse\n        else x.toString.substring(n\
    \ - s.toInt) + x.toString.substring(0, n - s.toInt)", "        val digits = x.toString.length\n\
    \        val shiftDigits = shift % digits\n        if (shiftDigits == 0) x.toString\n\
    \        else {\n            val (left, right) = x.toString.splitAt(digits - shiftDigits.toInt)\n\
    \            right + left\n        }", "        val digits = x.toString.map(_.asDigit)\n\
    \        val n = digits.length\n        val shift1 = if (shift > n) n - shift\
    \ else shift\n        val shift2 = if (shift > n) shift - n else 0\n        val\
    \ (a, b) = digits.splitAt(n - shift1)\n        val c = b ++ a\n        c.reverse.mkString",
  "        val digits = x.toString.length\n        if (shift > digits) x.toString.reverse\n\
    \        else x.toString.substring(digits - shift.toInt) + x.toString.substring(0,\
    \ digits - shift.toInt)", "        val digits = x.toString.length\n        if\
    \ (shift > digits) {\n            x.toString.reverse\n        } else {\n     \
    \       val (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b +\
    \ a\n        }", "        val digits = x.toString.toList\n        val n = digits.length\n\
    \        if (shift > n) digits.reverse.mkString\n        else (digits.drop(n -\
    \ shift.toInt) ::: digits.take(n - shift.toInt)).mkString", "        val digits\
    \ = x.toString.toList\n        val shiftDigits = digits.drop(digits.length - shift.toInt)\n\
    \        val remainDigits = digits.take(digits.length - shift.toInt)\n       \
    \ (shiftDigits ::: remainDigits).mkString", "        val digits = x.toString.length\n\
    \        if (shift > digits) x.toString.reverse\n        else {\n            val\
    \ (left, right) = x.toString.splitAt(digits - shift.toInt)\n            right\
    \ + left\n        }", "        val digits = x.toString.length\n        if (shift\
    \ > digits) {\n            x.toString.reverse\n        } else {\n            val\
    \ (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n     \
    \   }", "        val s = x.toString\n        val n = s.length\n        if (shift\
    \ >= n) s.reverse\n        else s.substring(n - shift.toInt) + s.substring(0,\
    \ n - shift.toInt)", "        val digits = x.toString.toList\n        val shiftDigits\
    \ = digits.takeRight(shift.toInt)\n        val remainingDigits = digits.dropRight(shift.toInt)\n\
    \        (shiftDigits ::: remainingDigits).mkString", "        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val digits\
    \ = x.toString.length\n        if (shift >= digits) {\n            x.toString.reverse\n\
    \        } else {\n            val (left, right) = x.toString.splitAt(digits -\
    \ shift.toInt)\n            right + left\n        }", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift > n) digits.reverse.mkString\n\
    \        else {\n            val (left, right) = digits.splitAt(n - shift.toInt)\n\
    \            (right ::: left).mkString\n        }", "        val n = x.toString.length\n\
    \        val shift2 = if (shift > n) n else shift\n        val (a, b) = x.toString.splitAt(n\
    \ - shift2)\n        b + a", "        val digits = x.toString.length\n       \
    \ if (shift > digits) {\n            x.toString.reverse\n        } else {\n  \
    \          val (a, b) = x.toString.splitAt(digits - shift.toInt)\n           \
    \ b + a\n        }", "        val digits = x.toString.length\n        if (shift\
    \ > digits) return x.toString.reverse\n        val (left, right) = x.toString.splitAt(digits\
    \ - shift.toInt)\n        right + left", "        val digits = x.toString.toList\n\
    \        val shiftDigits = digits.drop(digits.length - shift.toInt)\n        val\
    \ remainDigits = digits.take(digits.length - shift.toInt)\n        (shiftDigits\
    \ ::: remainDigits).mkString"]
stop_tokens:
- "\n    }\n"
