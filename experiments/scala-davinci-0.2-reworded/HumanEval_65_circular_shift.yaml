name: HumanEval_65_circular_shift
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Circular shift the digits of the integer x, shift the digits right by shift\n\
  \    // and return the result as a string.\n    // If shift > number of digits,\
  \ return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\"\
  )\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x\
  \ : Long, shift : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
  \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\"\
  )));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
  \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\"\
  )));\n    }\n\n}\n"
completions: ["        val s = x.toString\n        if (shift >= s.length) s.reverse\n\
    \        else s.substring(s.length - shift.toInt) + s.substring(0, s.length -\
    \ shift.toInt)", "        val digits = x.toString.length\n        if (shift >=\
    \ digits) {\n            return x.toString.reverse\n        }\n        val (a,\
    \ b) = x.toString.splitAt(digits - shift.toInt)\n        (b + a)", "        val\
    \ n = x.toString.length\n        val s = shift % n\n        if (s == 0) x.toString\n\
    \        else if (s == 1) x.toString.reverse\n        else x.toString.substring(n\
    \ - s.toInt) + x.toString.substring(0, n - s.toInt)", "        val digits = x.toString.length\n\
    \        val shiftDigits = shift % digits\n        if (shiftDigits == 0) x.toString\n\
    \        else {\n            val (left, right) = x.toString.splitAt(digits - shiftDigits.toInt)\n\
    \            right + left\n        }", "        val digits = x.toString.map(_.asDigit)\n\
    \        val n = digits.length\n        val shift1 = if (shift > n) n - shift\
    \ else shift\n        val shift2 = if (shift > n) shift - n else 0\n        val\
    \ (a, b) = digits.splitAt(n - shift1)\n        val c = b ++ a\n        c.reverse.mkString",
  "        val digits = x.toString.length\n        if (shift > digits) x.toString.reverse\n\
    \        else x.toString.substring(digits - shift.toInt) + x.toString.substring(0,\
    \ digits - shift.toInt)", "        val digits = x.toString.length\n        if\
    \ (shift > digits) {\n            x.toString.reverse\n        } else {\n     \
    \       val (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b +\
    \ a\n        }", "        val digits = x.toString.toList\n        val n = digits.length\n\
    \        if (shift > n) digits.reverse.mkString\n        else (digits.drop(n -\
    \ shift.toInt) ::: digits.take(n - shift.toInt)).mkString", "        val digits\
    \ = x.toString.toList\n        val shiftDigits = digits.drop(digits.length - shift.toInt)\n\
    \        val remainDigits = digits.take(digits.length - shift.toInt)\n       \
    \ (shiftDigits ::: remainDigits).mkString", "        val digits = x.toString.length\n\
    \        if (shift > digits) x.toString.reverse\n        else {\n            val\
    \ (left, right) = x.toString.splitAt(digits - shift.toInt)\n            right\
    \ + left\n        }", "        val digits = x.toString.length\n        if (shift\
    \ > digits) {\n            x.toString.reverse\n        } else {\n            val\
    \ (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n     \
    \   }", "        val s = x.toString\n        val n = s.length\n        if (shift\
    \ >= n) s.reverse\n        else s.substring(n - shift.toInt) + s.substring(0,\
    \ n - shift.toInt)", "        val digits = x.toString.toList\n        val shiftDigits\
    \ = digits.takeRight(shift.toInt)\n        val remainingDigits = digits.dropRight(shift.toInt)\n\
    \        (shiftDigits ::: remainingDigits).mkString", "        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val digits\
    \ = x.toString.length\n        if (shift >= digits) {\n            x.toString.reverse\n\
    \        } else {\n            val (left, right) = x.toString.splitAt(digits -\
    \ shift.toInt)\n            right + left\n        }", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        if (shift > n) digits.reverse.mkString\n\
    \        else {\n            val (left, right) = digits.splitAt(n - shift.toInt)\n\
    \            (right ::: left).mkString\n        }", "        val n = x.toString.length\n\
    \        val shift2 = if (shift > n) n else shift\n        val (a, b) = x.toString.splitAt(n\
    \ - shift2)\n        b + a", "        val digits = x.toString.length\n       \
    \ if (shift > digits) {\n            x.toString.reverse\n        } else {\n  \
    \          val (a, b) = x.toString.splitAt(digits - shift.toInt)\n           \
    \ b + a\n        }", "        val digits = x.toString.length\n        if (shift\
    \ > digits) return x.toString.reverse\n        val (left, right) = x.toString.splitAt(digits\
    \ - shift.toInt)\n        right + left", "        val digits = x.toString.toList\n\
    \        val shiftDigits = digits.drop(digits.length - shift.toInt)\n        val\
    \ remainDigits = digits.take(digits.length - shift.toInt)\n        (shiftDigits\
    \ ::: remainDigits).mkString", "        val digits = x.toString.map(x => x.toString).toList\n\
    \        val shiftDigits = digits.slice(digits.length - shift.toInt, digits.length)\
    \ ::: digits.slice(0, digits.length - shift.toInt)\n        shiftDigits.mkString",
  "        val digits = x.toString.length\n        if (shift >= digits) return x.toString.reverse\n\
    \        val (a, b) = x.toString.splitAt(digits - shift.toInt)\n        b + a",
  "        val s = x.toString\n        if (shift >= s.length) s.reverse\n        else\
    \ s.substring(s.length - shift.toInt) + s.substring(0, s.length - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.length\n        if (shift > digits) {\n       \
    \     x.toString.reverse\n        } else {\n            val (left, right) = x.toString.splitAt(digits\
    \ - shift.toInt)\n            right + left\n        }", "        val digits =\
    \ x.toString.toList\n        val len = digits.length\n        val shiftMod = shift\
    \ % len\n        if (shiftMod == 0) digits.mkString\n        else if (shiftMod\
    \ > len / 2) digits.reverse.mkString\n        else digits.drop(shiftMod.toInt).mkString\
    \ + digits.take(shiftMod.toInt).mkString", "        if (shift == 0) return x.toString\n\
    \        val digits = x.toString.length\n        if (shift >= digits) return x.toString.reverse\n\
    \        val (left, right) = x.toString.splitAt(digits - shift.toInt)\n      \
    \  right + left", "        val digits = x.toString.length\n        if (shift >=\
    \ digits) {\n            x.toString.reverse\n        } else {\n            val\
    \ (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n     \
    \   }", "        val s = x.toString\n        val n = s.length\n        if (shift\
    \ >= n) s.reverse\n        else s.substring(n - shift.toInt) + s.substring(0,\
    \ n - shift.toInt)", "        val digits = x.toString.map(_.asDigit)\n       \
    \ val n = digits.length\n        val shifted = (digits.takeRight(shift.toInt)\
    \ ++ digits.take(n - shift.toInt)).mkString\n        shifted", "        val digits\
    \ = x.toString.map(_.asDigit)\n        if (shift > digits.length) digits.reverse.mkString\n\
    \        else digits.drop(shift.toInt) ++ digits.take(shift.toInt) mkString",
  "        val digits = x.toString.toList\n        val n = digits.length\n       \
    \ val shift1 = if (shift > n) n - shift else shift\n        val (left, right)\
    \ = digits.splitAt(n - shift1)\n        (right ::: left).mkString", "        val\
    \ digits = x.toString.length\n        if (shift > digits) x.toString.reverse\n\
    \        else {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n\
    \            b + a\n        }", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift > n) s.reverse\n        else s.substring(n - shift.toInt) +\
    \ s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift > digits) x.toString.reverse\n        else x.toString.substring(digits\
    \ - shift.toInt) + x.toString.substring(0, digits - shift.toInt)", "        val\
    \ digits = x.toString.length\n        if (shift > digits) {\n            x.toString.reverse\n\
    \        } else {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n\
    \            b + a\n        }", "        val s = x.toString\n        val n = s.length\n\
    \        val shift1 = shift % n\n        if (shift1 == 0) s\n        else s.substring(n\
    \ - shift1) + s.substring(0, n - shift1)", "        val s = x.toString\n     \
    \   val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift > digits) x.toString.reverse\n        else {\n            val\
    \ (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n     \
    \   }", "        val s = x.toString\n        val n = s.length\n        if (shift\
    \ > n) s.reverse\n        else s.substring(n - shift.toInt) + s.substring(0, n\
    \ - shift.toInt)", "        val s = x.toString\n        val len = s.length\n \
    \       if (shift >= len) s.reverse\n        else s.substring(len - shift.toInt)\
    \ + s.substring(0, len - shift.toInt)", "        val s = x.toString\n        if\
    \ (shift > s.length) s.reverse\n        else s.substring(s.length - shift.toInt)\
    \ + s.substring(0, s.length - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift == digits) x.toString\n        else if (shift > digits) x.toString.reverse\n\
    \        else {\n            val str = x.toString\n            val (left, right)\
    \ = str.splitAt(digits - shift.toInt)\n            right + left\n        }", " \
    \       val digits = x.toString.length\n        if (shift > digits) x.toString.reverse\n\
    \        else {\n            val s = x.toString\n            val (a, b) = s.splitAt(s.length\
    \ - shift.toInt)\n            b + a\n        }", "        val digits = x.toString.length\n\
    \        val shift1 = shift % digits\n        if (shift1 == 0) x.toString\n  \
    \      else if (shift1 == digits) x.toString.reverse\n        else x.toString.substring(digits\
    \ - shift1.toInt) + x.toString.substring(0, digits - shift1.toInt)", "       \
    \ val digits = x.toString.length\n        val shift2 = if (shift > digits) digits\
    \ else shift\n        val shift3 = if (shift2 == digits) 0 else shift2\n     \
    \   val x2 = x.toString\n        val x3 = x2.substring(digits - shift3) + x2.substring(0,\
    \ digits - shift3)\n        x3", "        val digits = x.toString.length\n   \
    \     if (shift > digits) {\n            x.toString.reverse\n        } else {\n\
    \            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n         \
    \   b + a\n        }", "        val s = x.toString\n        if (shift > s.length)\
    \ s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val s = x.toString\n        if (shift > s.length)\
    \ s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val s = x.toString\n        val\
    \ n = s.length\n        val shift1 = if (shift > n) n else shift.toInt\n     \
    \   s.substring(n - shift1) + s.substring(0, n - shift1)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val shiftDigits = digits.drop(digits.length - shift.toInt)\n        val\
    \ shiftDigitsRev = shiftDigits.reverse\n        val remainingDigits = digits.take(digits.length\
    \ - shift.toInt)\n        val remainingDigitsRev = remainingDigits.reverse\n \
    \       (shiftDigitsRev ++ remainingDigitsRev).reverse.mkString", "        val\
    \ digits = x.toString.toList\n        val n = digits.length\n        val shift1\
    \ = if (shift > n) n - shift else shift\n        val shift2 = if (shift > n) shift\
    \ - n else 0\n        val (left, right) = digits.splitAt(n - shift1)\n       \
    \ (right ::: left).reverse.mkString", "        val s = x.toString\n        val\
    \ n = s.length\n        val m = shift % n\n        if (m == 0) s\n        else\
    \ if (m < n / 2) s.substring(m) + s.substring(0, m)\n        else s.substring(n\
    \ - m) + s.substring(0, n - m)", "        val digits = x.toString.map(_.asDigit)\n\
    \        if (shift > digits.length) digits.reverse.mkString\n        else {\n\
    \            val (left, right) = digits.splitAt(digits.length - shift.toInt)\n\
    \            (right ++ left).mkString\n        }", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift1 = shift % n\n        if (shift1\
    \ == 0) digits.mkString\n        else if (shift1 < n / 2) (digits.drop(shift1.toInt)\
    \ ::: digits.take(shift1.toInt)).mkString\n        else (digits.takeRight(n -\
    \ shift1.toInt) ::: digits.dropRight(n - shift1.toInt)).mkString", "        val\
    \ s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.length\n        if (shift > digits) x.toString.reverse\n\
    \        else (x.toString.substring(digits - shift.toInt) + x.toString.substring(0,\
    \ digits - shift.toInt))", "        val digits = x.toString.map(_.asDigit)\n \
    \       if (shift > digits.length) digits.reverse.mkString\n        else digits.drop(shift.toInt)\
    \ ++ digits.take(shift.toInt) mkString", "        val s = x.toString\n       \
    \ if (shift > s.length) s.reverse\n        else s.substring(s.length - shift.toInt)\
    \ + s.substring(0, s.length - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift > digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n     \
    \       b + a\n        }", "        val digits = x.toString.length\n        if\
    \ (shift > digits) {\n            x.toString.reverse\n        } else {\n     \
    \       val (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b +\
    \ a\n        }", "        val s = x.toString\n        if (shift >= s.length) s.reverse\n\
    \        else s.substring(s.length - shift.toInt) + s.substring(0, s.length -\
    \ shift.toInt)", "        val xs = x.toString\n        if (shift >= xs.length)\
    \ xs.reverse\n        else xs.substring(shift.toInt) + xs.substring(0, shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift > n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.toList\n        val len = digits.length\n     \
    \   if (shift > len) digits.reverse.mkString\n        else (digits.drop(len -\
    \ shift.toInt) ::: digits.take(len - shift.toInt)).mkString", "        val s =\
    \ x.toString\n        if (shift >= s.length) s.reverse\n        else s.substring(s.length\
    \ - shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val digits\
    \ = x.toString.length\n        if (shift > digits) x.toString.reverse\n      \
    \  else {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n\
    \            b + a\n        }", "        val digits = x.toString.toList\n    \
    \    val shiftDigits = digits.takeRight(shift.toInt)\n        val remainingDigits\
    \ = digits.dropRight(shift.toInt)\n        (shiftDigits ::: remainingDigits).mkString",
  "        val digits = x.toString.toList\n        val len = digits.length\n     \
    \   if (shift > len) {\n            digits.reverse.mkString\n        } else {\n\
    \            val (left, right) = digits.splitAt(len - shift.toInt)\n         \
    \   (right ++ left).mkString\n        }", "        val digits = x.toString.toList\n\
    \        if (shift > digits.length) digits.reverse.mkString\n        else (digits.drop(shift.toInt)\
    \ ::: digits.take(shift.toInt)).mkString", "        val s = x.toString\n     \
    \   val n = s.length\n        val shift2 = if (shift > n) n else shift\n     \
    \   val shift3 = n - shift2\n        val s2 = s.substring(shift3, n) + s.substring(0,\
    \ shift3)\n        s2", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val s = x.toString\n        val\
    \ n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n - shift\
    \ else shift\n        val (left, right) = digits.splitAt(n - shift2)\n       \
    \ (right ::: left).mkString", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift > n) s.reverse\n        else s.substring(n - shift.toInt) +\
    \ s.substring(0, n - shift.toInt)", "        val xs = x.toString\n        val\
    \ n = xs.length\n        if (shift > n) xs.reverse\n        else xs.substring(n\
    \ - shift.toInt) + xs.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n - shift\
    \ else shift\n        val (left, right) = digits.splitAt(n - shift2)\n       \
    \ (right ::: left).mkString", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift > n) s.reverse\n        else s.substring(n - shift.toInt) +\
    \ s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        if (shift > digits.length) digits.reverse.mkString\n        else (digits.drop(shift.toInt)\
    \ ::: digits.take(shift.toInt)).mkString", "        val s = x.toString\n     \
    \   val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        if (shift == 0)\
    \ return x.toString\n        val digits = x.toString.length\n        if (shift\
    \ > digits) return x.toString.reverse\n        val left = x.toString.substring(0,\
    \ digits - shift.toInt)\n        val right = x.toString.substring(digits - shift.toInt,\
    \ digits)\n        return right + left", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n - shift\
    \ else shift\n        val (left, right) = digits.splitAt(shift2)\n        (right\
    \ ::: left).mkString", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val s = x.toString\n        val\
    \ n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n -\
    \ shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift > digits) return x.toString.reverse\n        val (left, right)\
    \ = x.toString.splitAt(digits - shift.toInt)\n        right + left", "       \
    \ val digits = x.toString.length\n        if (shift > digits) {\n            x.toString.reverse\n\
    \        } else {\n            val (left, right) = x.toString.splitAt(digits -\
    \ shift.toInt)\n            right + left\n        }", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val shiftDigits = digits.drop(digits.length - shift.toInt)\n        val\
    \ remainDigits = digits.take(digits.length - shift.toInt)\n        (shiftDigits\
    \ ::: remainDigits).mkString", "        val digits = x.toString.length\n     \
    \   if (shift >= digits) {\n            return x.toString.reverse\n        }\n\
    \        val first = x.toString.substring(0, digits - shift.toInt)\n        val\
    \ second = x.toString.substring(digits - shift.toInt, digits)\n        return\
    \ second + first", "        val digits = x.toString.toList\n        val shiftDigits\
    \ = digits.drop(digits.length - shift.toInt)\n        val shiftedDigits = shiftDigits\
    \ ::: digits.dropRight(shift.toInt)\n        shiftedDigits.mkString", "      \
    \  val s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)",
  "        val digits = x.toString.length\n        if (shift >= digits) x.toString.reverse\n\
    \        else {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n\
    \            b + a\n        }", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift > n) s.reverse\n        else s.substring(n - shift.toInt) +\
    \ s.substring(0, n - shift.toInt)", "        val s = x.toString\n        val n\
    \ = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n -\
    \ shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n - shift\
    \ else shift\n        val (left, right) = digits.splitAt(n - shift2)\n       \
    \ (right ::: left).mkString", "        val digits = x.toString.toList\n      \
    \  val n = digits.length\n        if (shift >= n) digits.reverse.mkString\n  \
    \      else digits.slice(n - shift.toInt, n) ++ digits.slice(0, n - shift.toInt)\
    \ mkString", "        val digits = x.toString.map(_.asDigit)\n        val n =\
    \ digits.length\n        val shiftMod = shift % n\n        if (shiftMod == 0)\
    \ digits.mkString\n        else if (shiftMod < n / 2) digits.slice(shiftMod, n)\
    \ ++ digits.slice(0, shiftMod)\n        else digits.slice(n - shiftMod, n) ++\
    \ digits.slice(0, n - shiftMod)", "        val digits = x.toString.map(_.asDigit)\n\
    \        if (shift >= digits.length) digits.reverse.mkString\n        else {\n\
    \            val (left, right) = digits.splitAt(digits.length - shift.toInt)\n\
    \            (right ++ left).mkString\n        }", "        val s = x.toString\n\
    \        val n = s.length\n        val shiftMod = shift % n\n        if (shiftMod\
    \ == 0) s\n        else if (shiftMod == 1) s.last + s.substring(0, n - 1)\n  \
    \      else s.substring(n - shiftMod, n) + s.substring(0, n - shiftMod)", "  \
    \      val digits = x.toString.length\n        if (shift > digits) {\n       \
    \     x.toString.reverse\n        } else {\n            val (a, b) = x.toString.splitAt(digits\
    \ - shift.toInt)\n            b + a\n        }", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n - shift\
    \ else shift\n        val (a, b) = digits.splitAt(n - shift2)\n        (b :::\
    \ a).mkString", "        val digits = x.toString.toList\n        val n = digits.length\n\
    \        if (shift > n) digits.reverse.mkString\n        else digits.drop(n -\
    \ shift.toInt).mkString + digits.take(n - shift.toInt).mkString", "        val\
    \ digits = x.toString.length\n        val shift2 = if (shift > digits) digits\
    \ else shift\n        val shift3 = if (shift2 == digits) 0 else shift2\n     \
    \   val (left, right) = x.toString.splitAt(digits - shift3)\n        right + left",
  "        val s = x.toString\n        if (shift > s.length) s.reverse\n        else\
    \ s.substring(s.length - shift.toInt) + s.substring(0, s.length - shift.toInt)",
  "        val digits = x.toString.toList\n        val n = digits.length\n       \
    \ if (shift > n) digits.reverse.mkString\n        else (digits.slice(n - shift.toInt,\
    \ n) ::: digits.slice(0, n - shift.toInt)).mkString", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        val shift2 = shift % n\n        if (shift2\
    \ == 0) s\n        else if (shift2 == 1) s.last + s.substring(0, n - 1)\n    \
    \    else s.substring(n - shift2, n) + s.substring(0, n - shift2)", "        val\
    \ digits = x.toString.map(_.asDigit)\n        val n = digits.length\n        val\
    \ shift2 = if (shift > n) n - shift else shift\n        val (left, right) = digits.splitAt(n\
    \ - shift2)\n        (right ++ left).mkString", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.map(_.asDigit)\n\
    \        val shiftDigits = digits.slice(digits.length - shift.toInt, digits.length)\n\
    \        val remainingDigits = digits.slice(0, digits.length - shift.toInt)\n\
    \        (shiftDigits ++ remainingDigits).mkString", "        val digits = x.toString.length\n\
    \        if (shift >= digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (left, right) = x.toString.splitAt(digits - shift.toInt)\n\
    \            right + left\n        }", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n - shift\
    \ else shift\n        val (left, right) = digits.splitAt(n - shift2)\n       \
    \ (right ::: left).mkString", "        val digits = x.toString.length\n      \
    \  if (shift > digits) {\n            x.toString.reverse\n        } else {\n \
    \           val (a, b) = x.toString.splitAt(digits - shift.toInt)\n          \
    \  b + a\n        }", "        val digits = x.toString.toList\n        val shiftDigits\
    \ = digits.takeRight(shift.toInt)\n        val remainingDigits = digits.dropRight(shift.toInt)\n\
    \        (shiftDigits ::: remainingDigits).mkString", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift1 = if (shift > n) n - shift\
    \ else shift\n        val shift2 = if (shift > n) shift - n else 0\n        val\
    \ (a, b) = digits.splitAt(n - shift1)\n        (b ++ a).reverse.mkString", " \
    \       val s = x.toString\n        val n = s.length\n        val m = shift %\
    \ n\n        if (m == 0) s\n        else if (m < n / 2) s.substring(m) + s.substring(0,\
    \ m)\n        else s.substring(n - m) + s.substring(0, n - m)", "        val s\
    \ = x.toString\n        val len = s.length\n        if (shift > len) s.reverse\n\
    \        else s.substring(len - shift.toInt) + s.substring(0, len - shift.toInt)",
  "        val digits = x.toString.length\n        if (shift > digits) {\n       \
    \     return x.toString.reverse\n        }\n        val right = x % pow(10, shift).toLong\n\
    \        val left = x / pow(10, shift).toLong\n        return (right.toString\
    \ + left.toString)", "        val digits = x.toString.toList\n        val n =\
    \ digits.length\n        if (shift > n) digits.reverse.mkString\n        else\
    \ (digits.drop(n - shift.toInt) ::: digits.take(n - shift.toInt)).mkString", " \
    \       if (shift == 0) return x.toString\n        var digits = x.toString.toList\n\
    \        if (shift >= digits.length) return digits.reverse.mkString\n        var\
    \ shifted = digits.slice(digits.length - shift.toInt, digits.length) ::: digits.slice(0,\
    \ digits.length - shift.toInt)\n        return shifted.mkString", "        val\
    \ digits = x.toString.map(_.asDigit)\n        if (shift >= digits.length) digits.reverse.mkString\n\
    \        else {\n            val (a, b) = digits.splitAt(digits.length - shift.toInt)\n\
    \            (b ++ a).mkString\n        }", "        val s = x.toString\n    \
    \    val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n - shift\
    \ else shift\n        val (left, right) = digits.splitAt(shift2)\n        (right\
    \ ::: left).mkString", "        val digits = x.toString.length\n        if (shift\
    \ > digits) x.toString.reverse\n        else {\n            val (left, right)\
    \ = x.toString.splitAt(digits - shift.toInt)\n            right + left\n     \
    \   }", "        val digits = x.toString.toList\n        val n = digits.length\n\
    \        val shift1 = if (shift > n) n else shift\n        val shift2 = if (shift1\
    \ == n) 0 else shift1\n        val (first, second) = digits.splitAt(n - shift2)\n\
    \        (second ::: first).mkString", "        val s = x.toString\n        val\
    \ n = s.length\n        val shift1 = shift % n\n        if (shift1 == 0) s\n \
    \       else s.substring(n - shift1) + s.substring(0, n - shift1)", "        val\
    \ digits = x.toString.toList\n        val n = digits.length\n        val shift2\
    \ = if (shift > n) n - shift else shift\n        val (left, right) = digits.splitAt(shift2)\n\
    \        (right ::: left).mkString", "        val digits = x.toString.toList\n\
    \        val shiftDigits = digits.slice(digits.length - shift.toInt, digits.length)\n\
    \        val remainingDigits = digits.slice(0, digits.length - shift.toInt)\n\
    \        (shiftDigits ++ remainingDigits).mkString", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift1 = if (shift > n) n else shift\n\
    \        val shift2 = if (shift1 == n) 0 else shift1\n        val (a, b) = digits.splitAt(n\
    \ - shift2)\n        (b ::: a).mkString", "        val digits = x.toString.length\n\
    \        if (shift >= digits) {\n            x.toString.reverse\n        } else\
    \ {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n     \
    \       b + a\n        }", "        val s = x.toString\n        if (shift > s.length)\
    \ s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val s = x.toString\n        if (shift > s.length)\
    \ s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift > n) s.reverse\n        else s.substring(n - shift.toInt) +\
    \ s.substring(0, n - shift.toInt)", "        val s = x.toString\n        val n\
    \ = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n -\
    \ shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n - shift\
    \ else shift\n        val (left, right) = digits.splitAt(shift2)\n        (right\
    \ ::: left).mkString", "        val digits = x.toString.toList\n        val n\
    \ = digits.length\n        val shiftMod = shift % n\n        if (shiftMod == 0)\
    \ digits.mkString\n        else if (shiftMod < n / 2) digits.drop(shiftMod).mkString\
    \ + digits.take(shiftMod).mkString\n        else digits.takeRight(n - shiftMod).mkString\
    \ + digits.dropRight(n - shiftMod).mkString", "        val digits = x.toString.length\n\
    \        if (shift > digits) x.toString.reverse\n        else {\n            val\
    \ (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n     \
    \   }", "        val digits = x.toString.toList\n        val n = digits.length\n\
    \        if (shift >= n) digits.reverse.mkString\n        else (digits.drop(n\
    \ - shift.toInt) ::: digits.take(n - shift.toInt)).mkString", "        val digits\
    \ = x.toString.length\n        if (shift > digits) {\n            x.toString.reverse\n\
    \        } else {\n            val (left, right) = x.toString.splitAt(digits -\
    \ shift.toInt)\n            right + left\n        }", "        val s = x.toString\n\
    \        val n = s.length\n        val shift1 = if (shift > n) n - shift else\
    \ shift\n        val shift2 = if (shift > n) shift - n else 0\n        s.substring(shift1,\
    \ n) + s.substring(0, shift1) + s.substring(n - shift2, n)", "        val s =\
    \ x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n  \
    \      else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)", " \
    \       val digits = x.toString.toList\n        val n = digits.length\n      \
    \  val shift2 = if (shift > n) n - shift else shift\n        val (left, right)\
    \ = digits.splitAt(n - shift2)\n        (right ::: left).mkString", "        val\
    \ digits = x.toString.length\n        val shift2 = if (shift > digits) digits\
    \ else shift\n        val (left, right) = x.toString.splitAt(digits - shift2)\n\
    \        right + left", "        val digits = x.toString.toList\n        val n\
    \ = digits.length\n        val shift2 = if (shift > n) n - shift else shift\n\
    \        val (left, right) = digits.splitAt(n - shift2)\n        (right ::: left).mkString",
  "        val digits = x.toString.length\n        if (shift > digits) {\n       \
    \     return x.toString.reverse\n        }\n        val left = x / pow(10, shift).toLong\n\
    \        val right = x % pow(10, shift).toLong\n        return (right.toString\
    \ + left.toString)", "        val s = x.toString\n        val n = s.length\n \
    \       if (shift > n) s.reverse\n        else s.substring(n - shift.toInt) +\
    \ s.substring(0, n - shift.toInt)", "        val s = x.toString\n        val n\
    \ = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n -\
    \ shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        if (shift >= s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val digits\
    \ = x.toString.map(_.asDigit)\n        if (shift > digits.length) digits.reverse.mkString\n\
    \        else digits.slice(digits.length - shift.toInt, digits.length) ++ digits.slice(0,\
    \ digits.length - shift.toInt) mkString", "        val digits = x.toString.length\n\
    \        if (shift > digits) return x.toString.reverse\n        val (a, b) = x.toString.splitAt(digits\
    \ - shift.toInt)\n        b + a", "        val digits = x.toString.length\n  \
    \      val shiftDigits = shift % digits\n        if (shiftDigits == 0) x.toString\n\
    \        else {\n            val (left, right) = x.toString.splitAt(digits - shiftDigits.toInt)\n\
    \            right + left\n        }", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n - shift\
    \ else shift\n        val (left, right) = digits.splitAt(shift2)\n        (right\
    \ ::: left).mkString", "        val s = x.toString\n        if (shift >= s.length)\
    \ s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val digits = x.toString.map(_.asDigit)\n\
    \        val len = digits.length\n        val shiftMod = shift % len\n       \
    \ if (shiftMod == 0) x.toString\n        else if (shiftMod == len) digits.reverse.mkString\n\
    \        else {\n            val (left, right) = digits.splitAt(len - shiftMod)\n\
    \            (right ++ left).mkString\n        }", "        val digits = x.toString.length\n\
    \        if (shift >= digits) x.toString.reverse\n        else {\n           \
    \ val (first, second) = x.toString.splitAt(digits - shift.toInt)\n           \
    \ second + first\n        }", "        val digits = x.toString.map(_.asDigit)\n\
    \        if (shift > digits.length) digits.reverse.mkString\n        else digits.drop(shift.toInt)\
    \ ++ digits.take(shift.toInt) mkString", "        if (shift == 0) x.toString\n\
    \        else {\n            val digits = x.toString.length\n            val shift2\
    \ = if (shift > digits) digits else shift\n            val shift3 = digits - shift2\n\
    \            val (a, b) = x.toString.splitAt(shift3)\n            b + a\n    \
    \    }", "        val digits = x.toString.length\n        val shiftMod = shift\
    \ % digits\n        if (shiftMod == 0) x.toString\n        else {\n          \
    \  val (left, right) = x.toString.splitAt(digits - shiftMod.toInt)\n         \
    \   right + left\n        }", "        val digits = x.toString.toList\n      \
    \  val n = digits.length\n        val shift1 = if (shift > n) n - shift else shift\n\
    \        val shift2 = if (shift > n) shift - n else 0\n        val (left, right)\
    \ = digits.splitAt(n - shift1)\n        val (left1, right1) = right.splitAt(shift2)\n\
    \        (right1 ++ left ++ left1).mkString", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n - shift\
    \ else shift\n        val (left, right) = digits.splitAt(n - shift2)\n       \
    \ (right ::: left).mkString", "        val digits = x.toString.length\n      \
    \  if (shift > digits) x.toString.reverse\n        else {\n            val (a,\
    \ b) = x.toString.splitAt(digits - shift.toInt)\n            (b + a)\n       \
    \ }", "        val digits = x.toString.length\n        if (shift > digits) x.toString.reverse\n\
    \        else {\n            val shiftDigits = x.toString.substring(digits - shift.toInt)\n\
    \            val remainingDigits = x.toString.substring(0, digits - shift.toInt)\n\
    \            shiftDigits + remainingDigits\n        }", "        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt)", "        val digits\
    \ = x.toString.length\n        if (shift > digits) {\n            x.toString.reverse\n\
    \        } else {\n            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n\
    \            b + a\n        }", "        val digits = x.toString.toList\n    \
    \    val n = digits.length\n        val shift2 = if (shift > n) shift % n else\
    \ shift\n        val (left, right) = digits.splitAt(n - shift2)\n        (right\
    \ ::: left).mkString", "        val s = x.toString\n        val n = s.length\n\
    \        if (shift >= n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val s = x.toString\n        val\
    \ n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift >= digits) x.toString.reverse\n        else {\n           \
    \ val (a, b) = x.toString.splitAt(digits - shift.toInt)\n            b + a\n \
    \       }", "        val digits = x.toString.length\n        if (shift > digits)\
    \ x.toString.reverse\n        else {\n            val (a, b) = x.toString.splitAt(digits\
    \ - shift.toInt)\n            b + a\n        }", "        if (shift == 0) return\
    \ x.toString\n        val digits = x.toString.length\n        if (shift >= digits)\
    \ return x.toString.reverse\n        val (a, b) = x.toString.splitAt(digits -\
    \ shift.toInt)\n        b + a", "        val digits = x.toString.length\n    \
    \    if (shift > digits) {\n            x.toString.reverse\n        } else {\n\
    \            val (a, b) = x.toString.splitAt(digits - shift.toInt)\n         \
    \   b + a\n        }", "        val digits = x.toString.toList\n        val shiftDigits\
    \ = digits.drop(digits.length - shift.toInt) ::: digits.take(digits.length - shift.toInt)\n\
    \        shiftDigits.mkString", "        val digits = x.toString.toList\n    \
    \    val shiftDigits = digits.drop((digits.length - shift).toInt)\n        val\
    \ remainingDigits = digits.take((digits.length - shift).toInt)\n        (shiftDigits\
    \ ::: remainingDigits).mkString", "        val s = x.toString\n        val n =\
    \ s.length\n        if (shift > n) s.reverse\n        else s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt)", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift2 = if (shift > n) n - shift\
    \ else shift\n        val (left, right) = digits.splitAt(n - shift2)\n       \
    \ (right ::: left).mkString", "        val s = x.toString\n        if (shift >\
    \ s.length) s.reverse\n        else s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)", "        val digits = x.toString.length\n        if\
    \ (shift > digits) x.toString.reverse\n        else {\n            val (a, b)\
    \ = x.toString.splitAt(digits - shift.toInt)\n            b + a\n        }", " \
    \       val digits = x.toString.length\n        val s = shift % digits\n     \
    \   if (s == 0) x.toString\n        else if (s == digits) x.toString.reverse\n\
    \        else x.toString.substring(digits - s.toInt) + x.toString.substring(0,\
    \ digits - s.toInt)", "        val digits = x.toString.toList\n        val n =\
    \ digits.length\n        val shift2 = if (shift > n) n else shift\n        val\
    \ (left, right) = digits.splitAt(n - shift2)\n        (right ::: left).mkString",
  "        val digits = x.toString.toList\n        val shiftMod = shift % digits.length\n\
    \        if (shiftMod == 0) digits.mkString\n        else digits.takeRight(shiftMod).mkString\
    \ + digits.take(digits.length - shiftMod).mkString", "        val digits = x.toString.map(_.asDigit)\n\
    \        if (shift > digits.length) digits.reverse.mkString\n        else {\n\
    \            val (left, right) = digits.splitAt(digits.length - shift.toInt)\n\
    \            (right ++ left).mkString\n        }", "        val digits = x.toString.toList\n\
    \        val n = digits.length\n        val shift1 = if (shift > n) n - shift\
    \ else shift\n        val shift2 = if (shift > n) shift - n else 0\n        (digits.slice(n\
    \ - shift1, n) ::: digits.slice(0, n - shift1)).mkString + (digits.slice(n - shift2,\
    \ n) ::: digits.slice(0, n - shift2)).mkString.reverse", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)", "        val digits = x.toString.length\n\
    \        if (shift > digits) {\n            return x.toString.reverse\n      \
    \  }\n        val right = x % pow(10, shift).toLong\n        val left = x / pow(10,\
    \ shift).toLong\n        (right.toString + left.toString).reverse", "        val\
    \ s = x.toString\n        val n = s.length\n        if (shift >= n) s.reverse\n\
    \        else s.substring(n - shift.toInt) + s.substring(0, n - shift.toInt)"]
stop_tokens:
- "\n    }\n"
