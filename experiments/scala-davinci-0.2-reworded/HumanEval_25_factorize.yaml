name: HumanEval_25_factorize
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n    // Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n    // Input number should be\
  \ equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
  \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
  \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
  \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
  \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong,\
  \ 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
  \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
completions: ["        var factors = List[Long]()\n        var nn = n\n        while\
    \ (nn % 2 == 0) {\n            factors = 2l :: factors\n            nn /= 2\n\
    \        }\n        var i = 3\n        while (i <= sqrt(nn)) {\n            while\
    \ (nn % i == 0) {\n                factors = i.toLong :: factors\n           \
    \     nn /= i\n            }\n            i += 2\n        }\n        if (nn >\
    \ 2) factors = nn :: factors\n        factors", "        var factors = List[Long]()\n\
    \        var nn = n\n        var i = 2l\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                factors = factors :+ i\n             \
    \   nn /= i\n            } else {\n                i += 1\n            }\n   \
    \     }\n        factors", "        var factors = List[Long]()\n        var m\
    \ = n\n        var i = 2l\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                factors = factors :+ i\n                m /= i\n     \
    \       } else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = new ListBuffer[Long]()\n        var x = n\n        var i\
    \ = 2l\n        while (i <= x) {\n            if (x % i == 0) {\n            \
    \    factors += i\n                x /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors.toList", "        var result\
    \ = List[Long]()\n        var x = n\n        var i = 2l\n        while (i <= x)\
    \ {\n            if (x % i == 0) {\n                result = result :+ i\n   \
    \             x /= i\n            } else {\n                i += 1\n         \
    \   }\n        }\n        result", "        var factors = List[Long]()\n     \
    \   var nn = n\n        var i = 2l\n        while (i <= nn) {\n            if\
    \ (nn % i == 0) {\n                factors = factors :+ i\n                nn\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var result = List[Long]()\n        var m = n\n   \
    \     var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n  \
    \              result = result :+ i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        result", "    \
    \    var factors = List[Long]()\n        var m = n\n        var i = 2l\n     \
    \   while (i <= m) {\n            if (m % i == 0) {\n                factors =\
    \ factors :+ i\n                m /= i\n            } else {\n               \
    \ i += 1\n            }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = new ListBuffer[Long]()\n        var\
    \ m = n\n        for (i <- 2l to n) {\n            while (m % i == 0) {\n    \
    \            factors += i\n                m /= i\n            }\n        }\n\
    \        factors.toList", "        var result = List[Long]()\n        var m =\
    \ n\n        var i = 2l\n        while (i * i <= m) {\n            while (m %\
    \ i == 0) {\n                result = i :: result\n                m /= i\n  \
    \          }\n            i += 1\n        }\n        if (m > 1) result = m ::\
    \ result\n        result", "        var result = List[Long]()\n        var m =\
    \ n\n        var i = 2l\n        while (i <= m) {\n            if (m % i == 0)\
    \ {\n                result = result :+ i\n                m /= i\n          \
    \  } else {\n                i += 1\n            }\n        }\n        result",
  "        val factors = new ListBuffer[Long]\n        var m = n\n        var i =\
    \ 2l\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors += i\n                m /= i\n            } else {\n              \
    \  i += 1\n            }\n        }\n        factors.toList", "        var factors\
    \ = List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <=\
    \ nn) {\n            if (nn % i == 0) {\n                factors = factors :+\
    \ i\n                nn /= i\n            } else {\n                i += 1\n \
    \           }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var x = n\n  \
    \      var i = 2l\n        while (i <= x) {\n            if (x % i == 0) {\n \
    \               factors = factors :+ i\n                x /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var x = n\n        for (i <- 2l to\
    \ sqrt(n).toLong) {\n            while (x % i == 0) {\n                factors\
    \ = factors :+ i\n                x /= i\n            }\n        }\n        if\
    \ (x > 1) factors = factors :+ x\n        factors", "        val factors = new\
    \ ListBuffer[Long]\n        var nn = n\n        var i = 2l\n        while (i <=\
    \ nn) {\n            if (nn % i == 0) {\n                factors += i\n      \
    \          nn /= i\n            } else {\n                i += 1\n           \
    \ }\n        }\n        factors.toList", "        var factors = List[Long]()\n\
    \        var x = n\n        var i = 2l\n        while (i <= x) {\n           \
    \ if (x % i == 0) {\n                factors = factors :+ i\n                x\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var result = List[Long]()\n        var x = n\n   \
    \     var i = 2l\n        while (i <= x) {\n            if (x % i == 0) {\n  \
    \              result = i :: result\n                x /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        result"]
stop_tokens:
- "\n    }\n"
