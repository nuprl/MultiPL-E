name: HumanEval_25_factorize
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n    // Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n    // Input number should be\
  \ equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
  \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
  \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
  \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
  \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong,\
  \ 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
  \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
completions: ["        var factors = List[Long]()\n        var nn = n\n        while\
    \ (nn % 2 == 0) {\n            factors = 2l :: factors\n            nn /= 2\n\
    \        }\n        var i = 3\n        while (i <= sqrt(nn)) {\n            while\
    \ (nn % i == 0) {\n                factors = i.toLong :: factors\n           \
    \     nn /= i\n            }\n            i += 2\n        }\n        if (nn >\
    \ 2) factors = nn :: factors\n        factors", "        var factors = List[Long]()\n\
    \        var nn = n\n        var i = 2l\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                factors = factors :+ i\n             \
    \   nn /= i\n            } else {\n                i += 1\n            }\n   \
    \     }\n        factors", "        var factors = List[Long]()\n        var m\
    \ = n\n        var i = 2l\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                factors = factors :+ i\n                m /= i\n     \
    \       } else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = new ListBuffer[Long]()\n        var x = n\n        var i\
    \ = 2l\n        while (i <= x) {\n            if (x % i == 0) {\n            \
    \    factors += i\n                x /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors.toList", "        var result\
    \ = List[Long]()\n        var x = n\n        var i = 2l\n        while (i <= x)\
    \ {\n            if (x % i == 0) {\n                result = result :+ i\n   \
    \             x /= i\n            } else {\n                i += 1\n         \
    \   }\n        }\n        result", "        var factors = List[Long]()\n     \
    \   var nn = n\n        var i = 2l\n        while (i <= nn) {\n            if\
    \ (nn % i == 0) {\n                factors = factors :+ i\n                nn\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var result = List[Long]()\n        var m = n\n   \
    \     var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n  \
    \              result = result :+ i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        result", "    \
    \    var factors = List[Long]()\n        var m = n\n        var i = 2l\n     \
    \   while (i <= m) {\n            if (m % i == 0) {\n                factors =\
    \ factors :+ i\n                m /= i\n            } else {\n               \
    \ i += 1\n            }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = new ListBuffer[Long]()\n        var\
    \ m = n\n        for (i <- 2l to n) {\n            while (m % i == 0) {\n    \
    \            factors += i\n                m /= i\n            }\n        }\n\
    \        factors.toList", "        var result = List[Long]()\n        var m =\
    \ n\n        var i = 2l\n        while (i * i <= m) {\n            while (m %\
    \ i == 0) {\n                result = i :: result\n                m /= i\n  \
    \          }\n            i += 1\n        }\n        if (m > 1) result = m ::\
    \ result\n        result", "        var result = List[Long]()\n        var m =\
    \ n\n        var i = 2l\n        while (i <= m) {\n            if (m % i == 0)\
    \ {\n                result = result :+ i\n                m /= i\n          \
    \  } else {\n                i += 1\n            }\n        }\n        result",
  "        val factors = new ListBuffer[Long]\n        var m = n\n        var i =\
    \ 2l\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors += i\n                m /= i\n            } else {\n              \
    \  i += 1\n            }\n        }\n        factors.toList", "        var factors\
    \ = List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <=\
    \ nn) {\n            if (nn % i == 0) {\n                factors = factors :+\
    \ i\n                nn /= i\n            } else {\n                i += 1\n \
    \           }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var x = n\n  \
    \      var i = 2l\n        while (i <= x) {\n            if (x % i == 0) {\n \
    \               factors = factors :+ i\n                x /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var x = n\n        for (i <- 2l to\
    \ sqrt(n).toLong) {\n            while (x % i == 0) {\n                factors\
    \ = factors :+ i\n                x /= i\n            }\n        }\n        if\
    \ (x > 1) factors = factors :+ x\n        factors", "        val factors = new\
    \ ListBuffer[Long]\n        var nn = n\n        var i = 2l\n        while (i <=\
    \ nn) {\n            if (nn % i == 0) {\n                factors += i\n      \
    \          nn /= i\n            } else {\n                i += 1\n           \
    \ }\n        }\n        factors.toList", "        var factors = List[Long]()\n\
    \        var x = n\n        var i = 2l\n        while (i <= x) {\n           \
    \ if (x % i == 0) {\n                factors = factors :+ i\n                x\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var result = List[Long]()\n        var x = n\n   \
    \     var i = 2l\n        while (i <= x) {\n            if (x % i == 0) {\n  \
    \              result = i :: result\n                x /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        result", "    \
    \    var factors = List[Long]()\n        var m = n\n        var i = 2l\n     \
    \   while (i <= m) {\n            if (m % i == 0) {\n                factors =\
    \ factors :+ i\n                m /= i\n            } else {\n               \
    \ i += 1\n            }\n        }\n        factors", "        var result = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                result = result :+ i\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        result", "        var factors = List[Long]()\n        var nn = n\n  \
    \      var i = 2l\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                factors = factors :+ i\n                nn /= i\n           \
    \ } else {\n                i += 1\n            }\n        }\n        factors",
  "        var result = List[Long]()\n        var m = n\n        var i = 2l\n    \
    \    while (i <= m) {\n            if (m % i == 0) {\n                result =\
    \ result :+ i\n                m /= i\n            } else {\n                i\
    \ += 1\n            }\n        }\n        result", "        var factors = new\
    \ ListBuffer[Long]()\n        var nn = n\n        var i = 2l\n        while (i\
    \ <= nn) {\n            if (nn % i == 0) {\n                factors += i\n   \
    \             nn /= i\n            } else {\n                i += 1\n        \
    \    }\n        }\n        factors.toList", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var m = n\n  \
    \      var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n \
    \               factors = factors :+ i\n                m /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var nn = n\n        var i = 2l\n  \
    \      while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var m = n\n        for (i <- 2l to n) {\n          \
    \  while (m % i == 0) {\n                factors = factors :+ i\n            \
    \    m /= i\n            }\n        }\n        factors", "        var result =\
    \ List[Long]()\n        var x = n\n        var i = 2l\n        while (i <= x)\
    \ {\n            if (x % i == 0) {\n                result = result :+ i\n   \
    \             x /= i\n            } else {\n                i += 1\n         \
    \   }\n        }\n        result", "        var factors = List[Long]()\n     \
    \   var x = n\n        for (i <- 2l to sqrt(n).toLong) {\n            while (x\
    \ % i == 0) {\n                factors = factors :+ i\n                x /= i\n\
    \            }\n        }\n        if (x > 1) factors = factors :+ x\n       \
    \ factors", "        var m = n\n        var factors = List[Long]()\n        var\
    \ i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n          \
    \      factors = factors :+ i\n                m /= i\n            }\n       \
    \     else i += 1\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var nn = n\n \
    \       var i = 2l\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                factors = factors :+ i\n                nn /= i\n           \
    \ } else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var nn = n\n        var i = 2l\n  \
    \      while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = new ListBuffer[Long]()\n\
    \        var m = n\n        for (i <- 2l to sqrt(n).toLong) {\n            while\
    \ (m % i == 0) {\n                factors += i\n                m /= i\n     \
    \       }\n        }\n        if (m > 1) factors += m\n        factors.toList",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2l\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = List[Long]()\n  \
    \      var nn = n\n        while (nn % 2 == 0) {\n            factors = 2l ::\
    \ factors\n            nn /= 2\n        }\n        var i = 3\n        while (i\
    \ <= sqrt(nn)) {\n            while (nn % i == 0) {\n                factors =\
    \ i.toLong :: factors\n                nn /= i\n            }\n            i +=\
    \ 2\n        }\n        if (nn > 2) factors = nn :: factors\n        factors",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2l\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ new ListBuffer[Long]()\n        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                factors += i\n  \
    \              m /= i\n            } else {\n                i += 1\n        \
    \    }\n        }\n        factors.toList", "        def factorizeRec(n : Long,\
    \ p : Long) : List[Long] = {\n            if (n == 1) Nil\n            else if\
    \ (n % p == 0) p :: factorizeRec(n / p, p)\n            else factorizeRec(n, p\
    \ + 1)\n        }\n        factorizeRec(n, 2)", "        var factors = List[Long]()\n\
    \        var nn = n\n        var i = 2l\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                factors = factors :+ i\n             \
    \   nn /= i\n            } else {\n                i += 1\n            }\n   \
    \     }\n        factors", "        var factors = List[Long]()\n        var m\
    \ = n\n        var i = 2l\n        while (i * i <= m) {\n            while (m\
    \ % i == 0) {\n                factors = factors :+ i\n                m /= i\n\
    \            }\n            i += 1\n        }\n        if (m > 1) factors = factors\
    \ :+ m\n        factors", "        var factors = List[Long]()\n        var m =\
    \ n\n        var i = 2l\n        while (i <= m) {\n            if (m % i == 0)\
    \ {\n                factors = factors :+ i\n                m /= i\n        \
    \    } else {\n                i += 1\n            }\n        }\n        factors",
  "        var result = List[Long]()\n        var x = n\n        var i = 2l\n    \
    \    while (i <= x) {\n            if (x % i == 0) {\n                result =\
    \ result :+ i\n                x /= i\n            } else {\n                i\
    \ += 1\n            }\n        }\n        result", "        var result = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                result = result :+ i\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        result", "        def factorize(n : Long, p : Long) : List[Long] = {\n\
    \            if (n == 1) List()\n            else if (n % p == 0) p :: factorize(n\
    \ / p, p)\n            else factorize(n, p + 1)\n        }\n        factorize(n,\
    \ 2)", "        var result = List[Long]()\n        var nn = n\n        while (nn\
    \ % 2 == 0) {\n            result = 2l :: result\n            nn /= 2\n      \
    \  }\n        var i = 3\n        while (i <= sqrt(nn)) {\n            while (nn\
    \ % i == 0) {\n                result = i.toLong :: result\n                nn\
    \ /= i\n            }\n            i += 2\n        }\n        if (nn > 2) result\
    \ = nn :: result\n        result", "        var factors = List[Long]()\n     \
    \   var m = n\n        var i = 2l\n        while (i <= m) {\n            if (m\
    \ % i == 0) {\n                factors = factors :+ i\n                m /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    factors", "        var factors = List[Long]()\n        var m = n\n      \
    \  var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n     \
    \           factors = factors :+ i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors", "   \
    \     var factors = List[Long]()\n        var nn = n\n        var i = 2l\n   \
    \     while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <=\
    \ nn) {\n            if (nn % i == 0) {\n                factors = factors :+\
    \ i\n                nn /= i\n            } else {\n                i += 1\n \
    \           }\n        }\n        factors", "        var result = List[Long]()\n\
    \        var nn = n\n        var i = 2l\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                result = result :+ i\n               \
    \ nn /= i\n            } else {\n                i += 1\n            }\n     \
    \   }\n        result", "        var result = List[Long]()\n        var m = n\n\
    \        var i = 2l\n        while (i * i <= m) {\n            if (m % i == 0)\
    \ {\n                result = result :+ i\n                m /= i\n          \
    \  } else {\n                i += 1\n            }\n        }\n        if (m >\
    \ 1) result = result :+ m\n        return result", "        var factors = List[Long]()\n\
    \        var nn = n\n        var i = 2l\n        while (i <= nn) {\n         \
    \   while (nn % i == 0) {\n                factors = factors :+ i\n          \
    \      nn /= i\n            }\n            i += 1\n        }\n        factors",
  "        var factors = List[Long]()\n        var nn = n\n        for (i <- 2l to\
    \ nn) {\n            while (nn % i == 0) {\n                factors = factors\
    \ :+ i\n                nn /= i\n            }\n        }\n        factors", " \
    \       var factors = List[Long]()\n        var m = n\n        var i = 2l\n  \
    \      while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <= nn)\
    \ {\n            if (nn % i == 0) {\n                factors = factors :+ i\n\
    \                nn /= i\n            } else {\n                i += 1\n     \
    \       }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var nn = n\n        var i = 2l\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                factors = factors :+ i\n             \
    \   nn /= i\n            } else {\n                i += 1\n            }\n   \
    \     }\n        factors", "        var nn = n\n        var factors = List[Long]()\n\
    \        var i = 2l\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                factors = factors :+ i\n                nn /= i\n           \
    \ }\n            else i += 1\n        }\n        factors", "        var nn = n\n\
    \        var factors = List[Long]()\n        var i = 2l\n        while (i <= nn)\
    \ {\n            if (nn % i == 0) {\n                factors = factors :+ i\n\
    \                nn /= i\n            }\n            else i += 1\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var m = n\n  \
    \      var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n \
    \               factors = factors :+ i\n                m /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        val factors = new ListBuffer[Long]\n        var m = n\n        var i =\
    \ 2l\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors += i\n                m /= i\n            } else {\n              \
    \  i += 1\n            }\n        }\n        factors.toList", "        val factors\
    \ = new ListBuffer[Long]()\n        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                factors += i\n  \
    \              m /= i\n            } else {\n                i += 1\n        \
    \    }\n        }\n        factors.toList", "        var result = List[Long]()\n\
    \        var nn = n\n        var i = 2l\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                result = result :+ i\n               \
    \ nn /= i\n            } else {\n                i += 1\n            }\n     \
    \   }\n        result", "        var factors = List[Long]()\n        var m = n\n\
    \        var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                factors = factors :+ i\n                m /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var nn = n\n        var i = 2l\n  \
    \      while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = List[Long]()\n  \
    \      var nn = n\n        var i = 2l\n        while (i <= nn) {\n           \
    \ if (nn % i == 0) {\n                factors = factors :+ i\n               \
    \ nn /= i\n            } else {\n                i += 1\n            }\n     \
    \   }\n        factors", "        var factors = List[Long]()\n        var n1 =\
    \ n\n        var i = 2l\n        while (i <= n1) {\n            if (n1 % i ==\
    \ 0) {\n                factors = factors :+ i\n                n1 /= i\n    \
    \        }\n            else i += 1\n        }\n        factors", "        var\
    \ nn = n\n        var factors = List[Long]()\n        var i = 2l\n        while\
    \ (i <= nn) {\n            if (nn % i == 0) {\n                factors = factors\
    \ :+ i\n                nn /= i\n            }\n            else i += 1\n    \
    \    }\n        factors", "        val primes = new PrimeGenerator(n).generate()\n\
    \        val factors = ListBuffer[Long]()\n        var nn = n\n        for (p\
    \ <- primes) {\n            while (nn % p == 0) {\n                factors +=\
    \ p\n                nn /= p\n            }\n        }\n        factors.toList",
  "        var factors = List[Long]()\n        var nn = n\n        var i = 2l\n  \
    \      while (i <= nn) {\n            while (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            }\n            i += 1\n\
    \        }\n        factors", "        var result = List[Long]()\n        var\
    \ nn = n\n        var i = 2l\n        while (i <= nn) {\n            if (nn %\
    \ i == 0) {\n                result = result :+ i\n                nn /= i\n \
    \           } else {\n                i += 1\n            }\n        }\n     \
    \   result", "        var factors = List[Long]()\n        var m = n\n        var\
    \ i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n          \
    \      factors = factors :+ i\n                m /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        factors", "       \
    \ var result = List[Long]()\n        var nn = n\n        var i = 2l\n        while\
    \ (i <= nn) {\n            while (nn % i == 0) {\n                result = result\
    \ :+ i\n                nn /= i\n            }\n            i += 1\n        }\n\
    \        result", "        var result = new ListBuffer[Long]()\n        var m\
    \ = n\n        for (i <- 2l to m) {\n            while (m % i == 0) {\n      \
    \          result += i\n                m /= i\n            }\n        }\n   \
    \     result.toList", "        var factors = new ListBuffer[Long]()\n        var\
    \ nn = n\n        var p = 2l\n        while (nn > 1) {\n            while (nn\
    \ % p == 0) {\n                factors += p\n                nn /= p\n       \
    \     }\n            p += 1\n        }\n        factors.toList", "        var\
    \ factors = List[Long]()\n        var m = n\n        for (i <- 2l to m) {\n  \
    \          if (m % i == 0) {\n                factors = factors :+ i\n       \
    \         m /= i\n                i -= 1\n            }\n        }\n        return\
    \ factors", "        var factors = List[Long]()\n        var m = n\n        var\
    \ i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n          \
    \      factors = factors :+ i\n                m /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        factors", "       \
    \ var nn = n\n        var factors = List[Long]()\n        var i = 2l\n       \
    \ while (i <= nn) {\n            while (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            }\n            i += 1\n\
    \        }\n        factors", "        var factors = List[Long]()\n        var\
    \ m = n\n        var i = 2l\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                factors = factors :+ i\n                m /= i\n     \
    \       } else {\n                i += 1\n            }\n        }\n        factors",
  "        var result = List[Long]()\n        var m = n\n        for (i <- 2l to sqrt(n).toLong)\
    \ {\n            while (m % i == 0) {\n                result = result :+ i\n\
    \                m /= i\n            }\n        }\n        if (m > 1) result =\
    \ result :+ m\n        result", "        var factors = List[Long]()\n        var\
    \ nn = n\n        var i = 2l\n        while (i <= nn) {\n            if (nn %\
    \ i == 0) {\n                factors = factors :+ i\n                nn /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    factors", "        var factors = new ListBuffer[Long]()\n        var nn =\
    \ n\n        var d = 2l\n        while (nn > 1) {\n            while (nn % d ==\
    \ 0) {\n                factors += d\n                nn /= d\n            }\n\
    \            d += 1\n        }\n        factors.toList", "        var factors\
    \ = List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = List[Long]()\n  \
    \      var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                factors = factors :+ i\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        val factors = new ListBuffer[Long]\n        var m\
    \ = n\n        var i = 2l\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                factors += i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors.toList",
  "        var factors = List[Long]()\n        var nn = n\n        var p = 2l\n  \
    \      while (nn > 1) {\n            if (nn % p == 0) {\n                factors\
    \ = factors :+ p\n                nn /= p\n            } else {\n            \
    \    p += 1\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = List[Long]()\n  \
    \      var nn = n\n        var i = 2l\n        while (i <= nn) {\n           \
    \ if (nn % i == 0) {\n                factors = factors :+ i\n               \
    \ nn /= i\n            } else {\n                i += 1\n            }\n     \
    \   }\n        factors", "        var factors = new ListBuffer[Long]()\n     \
    \   var m = n\n        var i = 2l\n        while (i <= m) {\n            if (m\
    \ % i == 0) {\n                factors += i\n                m /= i\n        \
    \    } else {\n                i += 1\n            }\n        }\n        factors.toList",
  "        var factors = List[Long]()\n        var nn = n\n        var i = 2l\n  \
    \      while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <=\
    \ nn) {\n            if (nn % i == 0) {\n                factors = factors :+\
    \ i\n                nn /= i\n            } else {\n                i += 1\n \
    \           }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var result = List[Long]()\n        var m = n\n   \
    \     var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n  \
    \              result = result :+ i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        result", "    \
    \    var factors = List[Long]()\n        var nn = n\n        var i = 2l\n    \
    \    while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var cur = n\n        for (i <- 2l to n) {\n        \
    \    while (cur % i == 0) {\n                factors = factors :+ i\n        \
    \        cur /= i\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var x = n\n        var i = 2l\n        while (i <= x)\
    \ {\n            if (x % i == 0) {\n                factors = factors :+ i\n \
    \               x /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = new ListBuffer[Long]\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors += i\n                m /= i\n  \
    \          } else {\n                i += 1\n            }\n        }\n      \
    \  factors.toList", "        var factors = List[Long]()\n        var nn = n\n\
    \        for (i <- 2l to nn) {\n            while (nn % i == 0) {\n          \
    \      factors = factors :+ i\n                nn /= i\n            }\n      \
    \  }\n        factors", "        var l = List[Long]()\n        var nn = n\n  \
    \      var i = 2l\n        while (nn > 1) {\n            if (nn % i == 0) {\n\
    \                l = l :+ i\n                nn /= i\n            } else {\n \
    \               i += 1\n            }\n        }\n        l", "        var factors\
    \ = List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <=\
    \ nn) {\n            if (nn % i == 0) {\n                factors = factors :+\
    \ i\n                nn /= i\n            } else {\n                i += 1\n \
    \           }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var m = n\n  \
    \      var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n \
    \               factors = factors :+ i\n                m /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2l\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        for (i <- 2l to sqrt(n).toLong) {\n\
    \            while (m % i == 0) {\n                factors = factors :+ i\n  \
    \              m /= i\n            }\n        }\n        if (m > 1) factors =\
    \ factors :+ m\n        factors", "        var factors = List[Long]()\n      \
    \  var nn = n\n        var i = 2l\n        while (i <= nn) {\n            if (nn\
    \ % i == 0) {\n                factors = factors :+ i\n                nn /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    factors", "        var factors = List[Long]()\n        var m = n\n      \
    \  var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n     \
    \           factors = factors :+ i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors", "   \
    \     var factors = List[Long]()\n        var m = n\n        var i = 2l\n    \
    \    while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var i = 2l\n        var nn = n\n        while (i <= nn)\
    \ {\n            if (nn % i == 0) {\n                factors = factors :+ i\n\
    \                nn /= i\n            } else {\n                i += 1\n     \
    \       }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var number = n\n        var i = 2l\n        while (i <= number) {\n \
    \           if (number % i == 0) {\n                factors = factors :+ i\n \
    \               number /= i\n            }\n            else i += 1\n        }\n\
    \        factors", "        var result = List[Long]()\n        var nn = n\n  \
    \      var i = 2l\n        while (i * i <= nn) {\n            while (nn % i ==\
    \ 0) {\n                result = i :: result\n                nn /= i\n      \
    \      }\n            i += 1\n        }\n        if (nn > 1) result = nn :: result\n\
    \        result", "        var result = new ListBuffer[Long]\n        var m =\
    \ n\n        for (i <- 2l to m) {\n            while (m % i == 0) {\n        \
    \        result += i\n                m /= i\n            }\n        }\n     \
    \   result.toList", "        var factors = List[Long]()\n        var m = n\n \
    \       var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                factors = factors :+ i\n                m /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        var nn = n\n        var factors = List[Long]()\n        var i = 2l\n  \
    \      while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            }\n            else i +=\
    \ 1\n        }\n        factors", "        var result = List[Long]()\n       \
    \ var m = n\n        var i = 2l\n        while (i <= m) {\n            if (m %\
    \ i == 0) {\n                result = result :+ i\n                m /= i\n  \
    \          } else {\n                i += 1\n            }\n        }\n      \
    \  result", "        var factors = List[Long]()\n        var m = n\n        for\
    \ (i <- 2l to m) {\n            if (m % i == 0) {\n                factors = factors\
    \ :+ i\n                m /= i\n                i -= 1\n            }\n      \
    \  }\n        factors", "        var factors = List[Long]()\n        var nn =\
    \ n\n        for (i <- 2l to nn) {\n            while (nn % i == 0) {\n      \
    \          factors = factors :+ i\n                nn /= i\n            }\n  \
    \      }\n        factors", "        def factorize0(n : Long, p : Long) : List[Long]\
    \ = {\n            if (n == 1) Nil\n            else if (n % p == 0) p :: factorize0(n\
    \ / p, p)\n            else factorize0(n, p + 1)\n        }\n        factorize0(n,\
    \ 2)", "        var result = new ListBuffer[Long]()\n        var m = n\n     \
    \   var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n    \
    \            result += i\n                m /= i\n            } else {\n     \
    \           i += 1\n            }\n        }\n        result.toList", "      \
    \  var factors = List[Long]()\n        var m = n\n        var i = 2l\n       \
    \ while (i <= m) {\n            if (m % i == 0) {\n                factors = factors\
    \ :+ i\n                m /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var nn = n\n \
    \       var i = 2l\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                factors = factors :+ i\n                nn /= i\n           \
    \ } else {\n                i += 1\n            }\n        }\n        factors",
  "        def factorize(n : Long, d : Long) : List[Long] = {\n            if (n ==\
    \ 1) Nil\n            else if (n % d == 0) d :: factorize(n / d, d)\n        \
    \    else factorize(n, d + 1)\n        }\n        factorize(n, 2)", "        val\
    \ factors = new ListBuffer[Long]\n        var m = n\n        var i = 2l\n    \
    \    while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ += i\n                m /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors.toList", "        var result = List[Long]()\n\
    \        var nn = n\n        while (nn % 2 == 0) {\n            result = 2l ::\
    \ result\n            nn /= 2\n        }\n        var i = 3\n        while (i\
    \ <= sqrt(nn)) {\n            while (nn % i == 0) {\n                result =\
    \ i.toLong :: result\n                nn /= i\n            }\n            i +=\
    \ 2\n        }\n        if (nn > 2) result = nn :: result\n        result", " \
    \       var factors = List[Long]()\n        var nn = n\n        var i = 2l\n \
    \       while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <=\
    \ nn) {\n            if (nn % i == 0) {\n                factors = factors :+\
    \ i\n                nn /= i\n            } else {\n                i += 1\n \
    \           }\n        }\n        factors", "        var result = List[Long]()\n\
    \        var nn = n\n        var i = 2l\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                result = result :+ i\n               \
    \ nn /= i\n            } else {\n                i += 1\n            }\n     \
    \   }\n        result", "        var factors = List[Long]()\n        var m = n\n\
    \        var i = 2l\n        while (i * i <= m) {\n            while (m % i ==\
    \ 0) {\n                factors = factors :+ i\n                m /= i\n     \
    \       }\n            i += 1\n        }\n        if (m > 1) factors = factors\
    \ :+ m\n        factors", "        var factors = List[Long]()\n        var m =\
    \ n\n        var i = 2l\n        while (i <= m) {\n            if (m % i == 0)\
    \ {\n                factors = factors :+ i\n                m /= i\n        \
    \    } else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var nn = n\n        var i = 2l\n  \
    \      while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var factors\
    \ = new ListBuffer[Long]\n        var m = n\n        for (i <- 2l to m) {\n  \
    \          while (m % i == 0) {\n                factors += i\n              \
    \  m /= i\n            }\n        }\n        factors.toList", "        var factors\
    \ = List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <=\
    \ nn) {\n            if (nn % i == 0) {\n                factors = factors :+\
    \ i\n                nn /= i\n            } else {\n                i += 1\n \
    \           }\n        }\n        factors", "        var nn = n\n        var factors\
    \ = List[Long]()\n        var i = 2l\n        while (i <= nn) {\n            if\
    \ (nn % i == 0) {\n                factors = factors :+ i\n                nn\
    \ /= i\n            }\n            else i += 1\n        }\n        return factors",
  "        var result = List[Long]()\n        var nn = n\n        for (i <- 2 to sqrt(n).toInt)\
    \ {\n            while (nn % i == 0) {\n                result = result :+ i.toLong\n\
    \                nn /= i\n            }\n        }\n        if (nn > 1) result\
    \ = result :+ nn\n        return result", "        val factors = new ListBuffer[Long]()\n\
    \        var m = n\n        for (i <- 2l to sqrt(n).toLong) {\n            while\
    \ (m % i == 0) {\n                factors += i\n                m /= i\n     \
    \       }\n        }\n        if (m > 1) factors += m\n        factors.toList",
  "        var result = List[Long]()\n        var nn = n\n        var i = 2l\n   \
    \     while (i <= nn) {\n            if (nn % i == 0) {\n                result\
    \ = result :+ i\n                nn /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        result", "        var result = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                result = result :+ i\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        result", "        var nn = n\n        var factors = List[Long]()\n  \
    \      var i = 2l\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                factors = factors :+ i\n                nn /= i\n           \
    \ }\n            else i += 1\n        }\n        factors", "        def factorizeRec(n\
    \ : Long, d : Long) : List[Long] = {\n            if (n == 1) Nil\n          \
    \  else if (n % d == 0) d :: factorizeRec(n / d, d)\n            else factorizeRec(n,\
    \ d + 1)\n        }\n        factorizeRec(n, 2)", "        var factors = new ListBuffer[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors += i\n                m /= i\n  \
    \          } else {\n                i += 1\n            }\n        }\n      \
    \  factors.toList", "        var factors = List[Long]()\n        var x = n\n \
    \       var i = 2l\n        while (i <= x) {\n            if (x % i == 0) {\n\
    \                factors = factors :+ i\n                x /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        val factors = new ListBuffer[Long]()\n        var m = n\n        var i\
    \ = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n            \
    \    factors += i\n                m /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors.toList", "        var result\
    \ = List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                result = result :+ i\n   \
    \             m /= i\n            } else {\n                i += 1\n         \
    \   }\n        }\n        result", "        var result = List[Long]()\n      \
    \  var nn = n\n        var i = 2l\n        while (i <= nn) {\n            if (nn\
    \ % i == 0) {\n                result = result :+ i\n                nn /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    result", "        var factors = List[Long]()\n        var m = n\n       \
    \ var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors = factors :+ i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors", "   \
    \     var factors = List[Long]()\n        var m = n\n        var i = 2l\n    \
    \    while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var x = n\n        var i = 2l\n        while (i <= x)\
    \ {\n            if (x % i == 0) {\n                factors = factors :+ i\n \
    \               x /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = List[Long]()\n  \
    \      var x = n\n        var i = 2l\n        while (i <= x) {\n            if\
    \ (x % i == 0) {\n                factors = factors :+ i\n                x /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var result = List[Long]()\n        var nn = n\n  \
    \      var i = 2l\n        while (i <= nn) {\n            while (nn % i == 0)\
    \ {\n                result = result :+ i\n                nn /= i\n         \
    \   }\n            i += 1\n        }\n        result", "        var nn = n\n \
    \       var factors = List[Long]()\n        var i = 2l\n        while (i <= nn)\
    \ {\n            if (nn % i == 0) {\n                factors = factors :+ i\n\
    \                nn /= i\n            }\n            else i += 1\n        }\n\
    \        factors", "        val factors = ListBuffer[Long]()\n        var m =\
    \ n\n        var i = 2l\n        while (i <= m) {\n            if (m % i == 0)\
    \ {\n                factors += i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors.toList",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2l\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var result =\
    \ List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <= nn)\
    \ {\n            if (nn % i == 0) {\n                result = result :+ i\n  \
    \              nn /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        result", "        var factors = new ListBuffer[Long]\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors += i\n                m /= i\n  \
    \          } else {\n                i += 1\n            }\n        }\n      \
    \  factors.toList", "        var factors = new ListBuffer[Long]\n        var nn\
    \ = n\n        var i = 2l\n        while (i * i <= nn) {\n            while (nn\
    \ % i == 0) {\n                factors += i\n                nn /= i\n       \
    \     }\n            i += 1\n        }\n        if (nn > 1) factors += nn\n  \
    \      factors.toList", "        var factors = List[Long]()\n        var x = n\n\
    \        var i = 2l\n        while (i <= x) {\n            if (x % i == 0) {\n\
    \                factors = factors :+ i\n                x /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var nn = n\n        var i = 2l\n  \
    \      while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var m = n\n        for (i <- 2l to sqrt(n).toLong) {\n\
    \            while (m % i == 0) {\n                factors = factors :+ i\n  \
    \              m /= i\n            }\n        }\n        if (m > 1) factors =\
    \ factors :+ m\n        factors", "        var factors = new ListBuffer[Long]()\n\
    \        var m = n\n        for (i <- 2l to sqrt(n).toLong) {\n            while\
    \ (m % i == 0) {\n                factors += i\n                m /= i\n     \
    \       }\n        }\n        if (m > 1) factors += m\n        factors.toList",
  "        var result = List[Long]()\n        var m = n\n        var i = 2l\n    \
    \    while (i <= m) {\n            if (m % i == 0) {\n                result =\
    \ result :+ i\n                m /= i\n            } else {\n                i\
    \ += 1\n            }\n        }\n        result", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i * i <= m) {\n       \
    \     while (m % i == 0) {\n                factors = factors :+ i\n         \
    \       m /= i\n            }\n            i += 1\n        }\n        if (m >\
    \ 1) factors = factors :+ m\n        factors", "        var result = List[Long]()\n\
    \        var nn = n\n        for (i <- 2l to nn) {\n            if (nn % i ==\
    \ 0) {\n                result = result :+ i\n                nn /= i\n      \
    \          i -= 1\n            }\n        }\n        result", "        var result\
    \ = List[Long]()\n        var nn = n\n        for (i <- 2l to nn) {\n        \
    \    if (nn % i == 0) {\n                result = result :+ i\n              \
    \  nn /= i\n                i -= 1\n            }\n        }\n        result",
  "        var result = List[Long]()\n        var m = n\n        var i = 2l\n    \
    \    while (i <= m) {\n            if (m % i == 0) {\n                result =\
    \ result :+ i\n                m /= i\n            } else {\n                i\
    \ += 1\n            }\n        }\n        result", "        var factors = List[Long]()\n\
    \        var nn = n\n        var i = 2l\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                factors = factors :+ i\n             \
    \   nn /= i\n            } else {\n                i += 1\n            }\n   \
    \     }\n        factors", "        var factors = List[Long]()\n        var num\
    \ = n\n        var i = 2l\n        while (i <= num) {\n            if (num % i\
    \ == 0) {\n                factors = factors :+ i\n                num /= i\n\
    \            }\n            else i += 1\n        }\n        factors", "      \
    \  var result = List[Long]()\n        var m = n\n        for (i <- 2l to sqrt(n).toLong)\
    \ {\n            while (m % i == 0) {\n                result = result :+ i\n\
    \                m /= i\n            }\n        }\n        if (m > 1) result =\
    \ result :+ m\n        result", "        var factors = new ListBuffer[Long]\n\
    \        var x = n\n        var i = 2l\n        while (i <= x) {\n           \
    \ if (x % i == 0) {\n                factors += i\n                x /= i\n  \
    \          } else {\n                i += 1\n            }\n        }\n      \
    \  factors.toList", "        var factors = List[Long]()\n        var m = n\n \
    \       for (i <- 2l to sqrt(n).toLong) {\n            while (m % i == 0) {\n\
    \                factors = factors :+ i\n                m /= i\n            }\n\
    \        }\n        if (m > 1) factors = factors :+ m\n        factors", "   \
    \     var result = List[Long]()\n        var m = n\n        var i = 2l\n     \
    \   while (i <= m) {\n            if (m % i == 0) {\n                result =\
    \ result :+ i\n                m /= i\n            } else {\n                i\
    \ += 1\n            }\n        }\n        result", "        var factors = List[Long]()\n\
    \        var nn = n\n        var i = 2l\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                factors = factors :+ i\n             \
    \   nn /= i\n            } else {\n                i += 1\n            }\n   \
    \     }\n        factors", "        var factors = List[Long]()\n        var nn\
    \ = n\n        var p = 2l\n        while (nn > 1) {\n            while (nn % p\
    \ == 0) {\n                factors = factors :+ p\n                nn /= p\n \
    \           }\n            p += 1\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var nn = n\n        var p = 2l\n        while (nn >\
    \ 1) {\n            while (nn % p == 0) {\n                factors = factors :+\
    \ p\n                nn /= p\n            }\n            p += 1\n        }\n \
    \       factors", "        var factors = List[Long]()\n        var nn = n\n  \
    \      for (i <- 2l to nn) {\n            while (nn % i == 0) {\n            \
    \    factors = factors :+ i\n                nn /= i\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var m = n\n  \
    \      for (i <- 2l to sqrt(n).toLong) {\n            while (m % i == 0) {\n \
    \               factors = factors :+ i\n                m /= i\n            }\n\
    \        }\n        if (m > 1) factors = factors :+ m\n        factors", "   \
    \     var factors = List[Long]()\n        var nn = n\n        var i = 2l\n   \
    \     while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <=\
    \ nn) {\n            if (nn % i == 0) {\n                factors = factors :+\
    \ i\n                nn /= i\n            } else {\n                i += 1\n \
    \           }\n        }\n        factors", "        var result = List[Long]()\n\
    \        var nn = n\n        var i = 2l\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                result = result :+ i\n               \
    \ nn /= i\n            } else {\n                i += 1\n            }\n     \
    \   }\n        result", "        var result = List[Long]()\n        var nn = n\n\
    \        var i = 2l\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                result = result :+ i\n                nn /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        result", " \
    \       var factors = List[Long]()\n        var m = n\n        var i = 2l\n  \
    \      while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = List[Long]()\n  \
    \      var nn = n\n        var i = 2l\n        while (i <= nn) {\n           \
    \ if (nn % i == 0) {\n                factors = factors :+ i\n               \
    \ nn /= i\n            } else {\n                i += 1\n            }\n     \
    \   }\n        factors", "        var result = List[Long]()\n        var m = n\n\
    \        var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                result = result :+ i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        result", "    \
    \    var result = List[Long]()\n        var cur = n\n        var i = 2l\n    \
    \    while (i <= cur) {\n            if (cur % i == 0) {\n                result\
    \ = result :+ i\n                cur /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        result", "        var factors =\
    \ List[Long]()\n        var n2 = n\n        var i = 2l\n        while (i <= n2)\
    \ {\n            if (n2 % i == 0) {\n                factors = factors :+ i\n\
    \                n2 /= i\n            } else {\n                i += 1\n     \
    \       }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var result = List[Long]()\n        var nn = n\n  \
    \      var i = 2l\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                result = result :+ i\n                nn /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        result", " \
    \       var result = List[Long]()\n        var nn = n\n        var p = 2l\n  \
    \      while (nn > 1) {\n            while (nn % p == 0) {\n                result\
    \ = result :+ p\n                nn /= p\n            }\n            p += 1\n\
    \        }\n        result", "        var factors = List[Long]()\n        var\
    \ m = n\n        var i = 2l\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                factors = factors :+ i\n                m /= i\n     \
    \       } else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var nn = n\n        var i = 2l\n  \
    \      while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        val factors\
    \ = new ListBuffer[Long]\n        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                factors += i\n  \
    \              m /= i\n            } else {\n                i += 1\n        \
    \    }\n        }\n        factors.toList", "        var factors = List[Long]()\n\
    \        var nn = n\n        var i = 2l\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                factors = factors :+ i\n             \
    \   nn /= i\n            } else {\n                i += 1\n            }\n   \
    \     }\n        factors", "        val factors = new ListBuffer[Long]\n     \
    \   var nn = n\n        var p = 2\n        while (nn > 1) {\n            while\
    \ (nn % p == 0) {\n                factors += p\n                nn /= p\n   \
    \         }\n            p += 1\n        }\n        factors.toList", "       \
    \ var factors = new ListBuffer[Long]\n        var nn = n\n        for (i <- 2l\
    \ to n) {\n            while (nn % i == 0) {\n                factors += i\n \
    \               nn /= i\n            }\n        }\n        factors.toList", " \
    \       var factors = List[Long]()\n        var nn = n\n        var i = 2l\n \
    \       while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors"]
stop_tokens:
- "\n    }\n"
