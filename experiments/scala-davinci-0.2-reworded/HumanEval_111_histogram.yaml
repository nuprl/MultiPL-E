name: HumanEval_111_histogram
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string representing a space separated lowercase letters, return\
  \ a map\n    // of the letter with the most repetition and containing the corresponding\
  \ count.\n    // If several letters have the same occurrence, return all of them.\n\
  \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
  a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n   \
  \ // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"a b c\
  \ a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
  b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>> histogram((\"\"\
  ))\n    // (Map[String,Long]())\n    def histogram(test : String) : Map[String,Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b\
  \ b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"\
  d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
  r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"\
  b\" -> 4l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\"\
  \ -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
  \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\
  \n}\n"
completions: ["        // Fill in the code here\n        return Map[String,Long]()",
  "        val map = new HashMap[String,Long]\n        for (c <- test.split(\" \"\
    )) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) =\
    \ 1\n        }\n        val max = map.values.max\n        map.filter(x => x._2\
    \ == max)", "        val result = new HashMap[String,Long]\n        for (c <-\
    \ test.split(\" \")) {\n            if (result.contains(c)) {\n              \
    \  result(c) += 1\n            } else {\n                result(c) = 1\n     \
    \       }\n        }\n        result", "        // Fill in the code here\n   \
    \     null", "        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        map", "        val words = test.split(\" \"\
    )\n        val map = Map[String,Long]()\n        for (word <- words) {\n     \
    \       if (map.contains(word)) {\n                map(word) += 1\n          \
    \  } else {\n                map(word) = 1\n            }\n        }\n       \
    \ map", "        val m = Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => if (m.contains(x)) m(x) += 1 else m(x) = 1)\n        val max = m.values.max\n\
    \        m.filter(x => x._2 == max)", "        var map = Map[String,Long]()\n\
    \        for (x <- test.split(\" \")) {\n            if (map.contains(x)) {\n\
    \                map(x) += 1\n            } else {\n                map += (x\
    \ -> 1)\n            }\n        }\n        var max = 0l\n        for (x <- map.values)\
    \ {\n            if (x > max) {\n                max = x\n            }\n    \
    \    }\n        var result = Map[String,Long]()\n        for ((k,v) <- map) {\n\
    \            if (v == max) {\n                result += (k -> v)\n           \
    \ }\n        }\n        return result", "        var map = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (map.contains(c)) {\n\
    \                map(c) += 1\n            } else {\n                map += (c\
    \ -> 1)\n            }\n        }\n        var max = 0\n        for (c <- map.values)\
    \ {\n            if (c > max) {\n                max = c\n            }\n    \
    \    }\n        var result = Map[String,Long]()\n        for ((k,v) <- map) {\n\
    \            if (v == max) {\n                result += (k -> v)\n           \
    \ }\n        }\n        return result", "        // Fill in the code here\n  \
    \      Map()", "        val result = Map[String,Long]()\n        val letters =\
    \ test.split(\" \")\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result", "        //\
    \ Fill in the code here\n        val map = new HashMap[String,Long]()\n      \
    \  for (i <- test.split(\" \")) {\n            if (map.contains(i)) {\n      \
    \          map(i) += 1\n            } else {\n                map(i) = 1\n   \
    \         }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        val m = Map[String,Long]()\n        val l = test.split(\"\
    \ \")\n        for (i <- l) {\n            if (m.contains(i)) {\n            \
    \    m(i) += 1\n            } else {\n                m(i) = 1\n            }\n\
    \        }\n        m", "        val result = new HashMap[String,Long]\n     \
    \   for (c <- test.split(\" \")) {\n            if (result.contains(c)) result(c)\
    \ += 1\n            else result(c) = 1\n        }\n        result.filter(p =>\
    \ p._2 == result.values.max)", "        // Fill in the code here\n        return\
    \ Map[String,Long]()", "        val map = new HashMap[String,Long]\n        for\
    \ (i <- test.split(\" \")) {\n            if (map.contains(i)) {\n           \
    \     map(i) += 1\n            } else {\n                map += (i -> 1)\n   \
    \         }\n        }\n        val max = map.values.max\n        val result =\
    \ new HashMap[String,Long]\n        for ((k,v) <- map) {\n            if (v ==\
    \ max) {\n                result += (k -> v)\n            }\n        }\n     \
    \   result", "        var map = Map[String,Long]()\n        for (i <- test.split(\"\
    \ \")) {\n            if (map.contains(i)) {\n                map += (i -> (map(i)\
    \ + 1))\n            } else {\n                map += (i -> 1)\n            }\n\
    \        }\n        var max = 0l\n        for (i <- map.keys) {\n            if\
    \ (map(i) > max) {\n                max = map(i)\n            }\n        }\n \
    \       var result = Map[String,Long]()\n        for (i <- map.keys) {\n     \
    \       if (map(i) == max) {\n                result += (i -> max)\n         \
    \   }\n        }\n        return result", "        val words = test.split(\" \"\
    )\n        val map = new HashMap[String,Long]\n        for (word <- words) {\n\
    \            if (map.contains(word)) {\n                map(word) += 1\n     \
    \       } else {\n                map(word) = 1\n            }\n        }\n  \
    \      val max = map.values.max\n        map.filter(x => x._2 == max)", "    \
    \    val words = test.split(\" \")\n        val map = Map[String,Long]()\n   \
    \     for (word <- words) {\n            if (map.contains(word)) {\n         \
    \       map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        map", "        val letters = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]()\n        for (letter <- letters)\
    \ {\n            if (map.contains(letter)) {\n                map(letter) += 1\n\
    \            } else {\n                map(letter) = 1\n            }\n      \
    \  }\n        val max = map.values.max\n        map.filter(x => x._2 == max)"]
stop_tokens:
- "\n    }\n"
