name: HumanEval_111_histogram
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string representing a space separated lowercase letters, return\
  \ a map\n    // of the letter with the most repetition and containing the corresponding\
  \ count.\n    // If several letters have the same occurrence, return all of them.\n\
  \    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
  a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n   \
  \ // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"a b c\
  \ a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
  b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>> histogram((\"\"\
  ))\n    // (Map[String,Long]())\n    def histogram(test : String) : Map[String,Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b\
  \ b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"\
  d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
  r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"\
  b\" -> 4l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\"\
  \ -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
  \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\
  \n}\n"
completions: ["        // Fill in the code here\n        return Map[String,Long]()",
  "        val map = new HashMap[String,Long]\n        for (c <- test.split(\" \"\
    )) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) =\
    \ 1\n        }\n        val max = map.values.max\n        map.filter(x => x._2\
    \ == max)", "        val result = new HashMap[String,Long]\n        for (c <-\
    \ test.split(\" \")) {\n            if (result.contains(c)) {\n              \
    \  result(c) += 1\n            } else {\n                result(c) = 1\n     \
    \       }\n        }\n        result", "        // Fill in the code here\n   \
    \     null", "        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        map", "        val words = test.split(\" \"\
    )\n        val map = Map[String,Long]()\n        for (word <- words) {\n     \
    \       if (map.contains(word)) {\n                map(word) += 1\n          \
    \  } else {\n                map(word) = 1\n            }\n        }\n       \
    \ map", "        val m = Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => if (m.contains(x)) m(x) += 1 else m(x) = 1)\n        val max = m.values.max\n\
    \        m.filter(x => x._2 == max)", "        var map = Map[String,Long]()\n\
    \        for (x <- test.split(\" \")) {\n            if (map.contains(x)) {\n\
    \                map(x) += 1\n            } else {\n                map += (x\
    \ -> 1)\n            }\n        }\n        var max = 0l\n        for (x <- map.values)\
    \ {\n            if (x > max) {\n                max = x\n            }\n    \
    \    }\n        var result = Map[String,Long]()\n        for ((k,v) <- map) {\n\
    \            if (v == max) {\n                result += (k -> v)\n           \
    \ }\n        }\n        return result", "        var map = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (map.contains(c)) {\n\
    \                map(c) += 1\n            } else {\n                map += (c\
    \ -> 1)\n            }\n        }\n        var max = 0\n        for (c <- map.values)\
    \ {\n            if (c > max) {\n                max = c\n            }\n    \
    \    }\n        var result = Map[String,Long]()\n        for ((k,v) <- map) {\n\
    \            if (v == max) {\n                result += (k -> v)\n           \
    \ }\n        }\n        return result", "        // Fill in the code here\n  \
    \      Map()", "        val result = Map[String,Long]()\n        val letters =\
    \ test.split(\" \")\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result", "        //\
    \ Fill in the code here\n        val map = new HashMap[String,Long]()\n      \
    \  for (i <- test.split(\" \")) {\n            if (map.contains(i)) {\n      \
    \          map(i) += 1\n            } else {\n                map(i) = 1\n   \
    \         }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        val m = Map[String,Long]()\n        val l = test.split(\"\
    \ \")\n        for (i <- l) {\n            if (m.contains(i)) {\n            \
    \    m(i) += 1\n            } else {\n                m(i) = 1\n            }\n\
    \        }\n        m", "        val result = new HashMap[String,Long]\n     \
    \   for (c <- test.split(\" \")) {\n            if (result.contains(c)) result(c)\
    \ += 1\n            else result(c) = 1\n        }\n        result.filter(p =>\
    \ p._2 == result.values.max)", "        // Fill in the code here\n        return\
    \ Map[String,Long]()", "        val map = new HashMap[String,Long]\n        for\
    \ (i <- test.split(\" \")) {\n            if (map.contains(i)) {\n           \
    \     map(i) += 1\n            } else {\n                map += (i -> 1)\n   \
    \         }\n        }\n        val max = map.values.max\n        val result =\
    \ new HashMap[String,Long]\n        for ((k,v) <- map) {\n            if (v ==\
    \ max) {\n                result += (k -> v)\n            }\n        }\n     \
    \   result", "        var map = Map[String,Long]()\n        for (i <- test.split(\"\
    \ \")) {\n            if (map.contains(i)) {\n                map += (i -> (map(i)\
    \ + 1))\n            } else {\n                map += (i -> 1)\n            }\n\
    \        }\n        var max = 0l\n        for (i <- map.keys) {\n            if\
    \ (map(i) > max) {\n                max = map(i)\n            }\n        }\n \
    \       var result = Map[String,Long]()\n        for (i <- map.keys) {\n     \
    \       if (map(i) == max) {\n                result += (i -> max)\n         \
    \   }\n        }\n        return result", "        val words = test.split(\" \"\
    )\n        val map = new HashMap[String,Long]\n        for (word <- words) {\n\
    \            if (map.contains(word)) {\n                map(word) += 1\n     \
    \       } else {\n                map(word) = 1\n            }\n        }\n  \
    \      val max = map.values.max\n        map.filter(x => x._2 == max)", "    \
    \    val words = test.split(\" \")\n        val map = Map[String,Long]()\n   \
    \     for (word <- words) {\n            if (map.contains(word)) {\n         \
    \       map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        map", "        val letters = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]()\n        for (letter <- letters)\
    \ {\n            if (map.contains(letter)) {\n                map(letter) += 1\n\
    \            } else {\n                map(letter) = 1\n            }\n      \
    \  }\n        val max = map.values.max\n        map.filter(x => x._2 == max)",
  "        val result = new HashMap[String,Long]()\n        for (c <- test.split(\"\
    \ \")) {\n            if (result.contains(c)) result(c) += 1\n            else\
    \ result(c) = 1\n        }\n        result.filter(_._2 == result.values.max)",
  "        val result = new HashMap[String,Long]()\n        for (c <- test.split(\"\
    \ \")) {\n            if (result.contains(c)) result(c) += 1\n            else\
    \ result(c) = 1\n        }\n        val max = result.values.max\n        result.filter(x\
    \ => x._2 == max)", "        // Fill in the code here\n        Map[String,Long]()",
  "        val words = test.split(\" \")\n        val map = new HashMap[String,Long]()\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]()\n        for ((k,v) <- map) {\n            if (v\
    \ == max) {\n                result(k) = v\n            }\n        }\n       \
    \ result", "        // Fill in the code here\n        var map = Map[String,Long]()\n\
    \        for (i <- test.split(\" \")) {\n            if (map.contains(i)) {\n\
    \                map += (i -> (map(i) + 1))\n            } else {\n          \
    \      map += (i -> 1)\n            }\n        }\n        map", "        var map\
    \ = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n            if\
    \ (map.contains(c)) {\n                map(c) += 1\n            } else {\n   \
    \             map += (c -> 1)\n            }\n        }\n        var max = map.values.max\n\
    \        var res = Map[String,Long]()\n        for ((k,v) <- map) {\n        \
    \    if (v == max) {\n                res += (k -> v)\n            }\n       \
    \ }\n        return res", "        val m = Map[String,Long]()\n        val l =\
    \ test.split(\" \")\n        for (i <- l) {\n            if (m.contains(i)) {\n\
    \                m(i) += 1\n            } else {\n                m(i) = 1\n \
    \           }\n        }\n        m", "        var m = Map[String,Long]()\n  \
    \      for (c <- test.split(\" \")) {\n            if (m.contains(c)) m(c) +=\
    \ 1\n            else m += (c -> 1)\n        }\n        var max = 0l\n       \
    \ for (v <- m.values) {\n            if (v > max) max = v\n        }\n       \
    \ var r = Map[String,Long]()\n        for ((k,v) <- m) {\n            if (v ==\
    \ max) r += (k -> v)\n        }\n        return r", "        val result = Map[String,Long]()\n\
    \        test.split(\" \").foreach(x => {\n            if (result.contains(x))\
    \ {\n                result(x) += 1\n            } else {\n                result(x)\
    \ = 1\n            }\n        })\n        val max = result.values.max\n      \
    \  result.filter(x => x._2 == max)", '        test.split(" ").groupBy(x => x).mapValues(x
    => x.length.toLong)', "        val result = new HashMap[String,Long]()\n     \
    \   for (c <- test.split(\" \")) {\n            if (result.contains(c)) {\n  \
    \              result(c) += 1\n            } else {\n                result(c)\
    \ = 1\n            }\n        }\n        result", "        val map = new HashMap[String,Long]\n\
    \        for (c <- test) {\n            val count = map.getOrElse(c.toString,\
    \ 0l)\n            map.put(c.toString, count + 1)\n        }\n        val max\
    \ = map.values.max\n        map.filter(x => x._2 == max)", "        val result\
    \ = new HashMap[String,Long]\n        for (letter <- test.split(\" \")) {\n  \
    \          if (result.contains(letter)) {\n                result(letter) += 1\n\
    \            } else {\n                result(letter) = 1\n            }\n   \
    \     }\n        result", "        // Fill in the code here\n        val testList\
    \ = test.split(\" \").toList\n        val testMap = testList.groupBy(identity).mapValues(_.size)\n\
    \        val max = testMap.values.max\n        testMap.filter(_._2 == max)", " \
    \       val result = new HashMap[String,Long]()\n        val words = test.split(\"\
    \ \")\n        for (word <- words) {\n            if (result.contains(word)) {\n\
    \                result(word) += 1\n            } else {\n                result(word)\
    \ = 1\n            }\n        }\n        result", "        val words = test.split(\"\
    \ \")\n        val map = Map[String,Long]()\n        for (word <- words) {\n \
    \           if (map.contains(word)) {\n                map(word) += 1\n      \
    \      } else {\n                map(word) = 1\n            }\n        }\n   \
    \     map", "        var map = Map[String,Long]()\n        for (c <- test.split(\"\
    \ \")) {\n            if (map.contains(c)) map(c) += 1\n            else map +=\
    \ (c -> 1)\n        }\n        map.filter(x => x._2 == map.values.max)", "   \
    \     // Fill in the code here\n        Map[String,Long]()", "        var map\
    \ = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n            if\
    \ (map.contains(c)) {\n                map(c) += 1\n            } else {\n   \
    \             map += (c -> 1)\n            }\n        }\n        var max = 0l\n\
    \        for (c <- map.keys) {\n            if (map(c) > max) {\n            \
    \    max = map(c)\n            }\n        }\n        var result = Map[String,Long]()\n\
    \        for (c <- map.keys) {\n            if (map(c) == max) {\n           \
    \     result += (c -> max)\n            }\n        }\n        return result",
  '        test.split(" ").groupBy(x => x).mapValues(x => x.length.toLong)', '        test.split("
    ").groupBy(x => x).mapValues(x => x.length.toLong)', "        // Fill in the code\
    \ here\n        var map = Map[String,Long]()\n        for (i <- test.split(\"\
    \ \")) {\n            if (map.contains(i)) {\n                map(i) += 1\n  \
    \          } else {\n                map += (i -> 1)\n            }\n        }\n\
    \        map", "        // Fill in the code here\n        var map = Map[String,Long]()\n\
    \        var max = 0\n        var max_key = \"\"\n        for (i <- test.split(\"\
    \ \")) {\n            if (map.contains(i)) {\n                map += (i -> (map(i)\
    \ + 1))\n            } else {\n                map += (i -> 1)\n            }\n\
    \            if (map(i) > max) {\n                max = map(i).toInt\n       \
    \         max_key = i\n            }\n        }\n        var result = Map[String,Long]()\n\
    \        for (i <- map) {\n            if (i._2 == max) {\n                result\
    \ += (i._1 -> i._2)\n            }\n        }\n        return result", "     \
    \   // Fill in the code here\n        return Map[String,Long]()", "        var\
    \ map = new HashMap[String,Long]()\n        for (i <- test.split(\" \")) {\n \
    \           if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n  \
    \      }\n        var max = map.values.max\n        var result = new HashMap[String,Long]()\n\
    \        for (i <- map.keys) {\n            if (map(i) == max) result(i) = max\n\
    \        }\n        return result", "        val m = Map[String,Long]()\n    \
    \    test.split(\" \").foreach(x => m(x) = m.getOrElse(x, 0l) + 1l)\n        val\
    \ max = m.values.max\n        m.filter(x => x._2 == max)", "        val map =\
    \ new HashMap[String,Long]()\n        for (c <- test.split(\" \")) {\n       \
    \     if (map.contains(c)) {\n                map(c) += 1\n            } else\
    \ {\n                map += (c -> 1)\n            }\n        }\n        val max\
    \ = map.values.max\n        map.filter(x => x._2 == max)", "        val m = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (m.contains(c)) m(c) +=\
    \ 1\n            else m(c) = 1\n        }\n        m.filter(_._2 == m.values.max)",
  "        val hist = new HashMap[String,Long]()\n        for (letter <- test.split(\"\
    \ \")) {\n            if (hist.contains(letter)) hist(letter) += 1\n         \
    \   else hist(letter) = 1\n        }\n        val max = hist.values.max\n    \
    \    hist.filter(x => x._2 == max)", "        // Fill in the code here\n     \
    \   var map = Map[String,Long]()\n        for (i <- test.split(\" \")) {\n   \
    \         if (map.contains(i)) {\n                map(i) += 1\n            } else\
    \ {\n                map += (i -> 1)\n            }\n        }\n        var max\
    \ = 0\n        for (i <- map.values) {\n            if (i > max) {\n         \
    \       max = i\n            }\n        }\n        var result = Map[String,Long]()\n\
    \        for (i <- map.keys) {\n            if (map(i) == max) {\n           \
    \     result += (i -> max)\n            }\n        }\n        result", "     \
    \   var map = Map[String,Long]()\n        for (i <- test.split(\" \")) {\n   \
    \         if (map.contains(i)) {\n                map(i) += 1\n            } else\
    \ {\n                map += (i -> 1)\n            }\n        }\n        var max\
    \ = 0\n        for (i <- map.values) {\n            if (i > max) {\n         \
    \       max = i\n            }\n        }\n        var result = Map[String,Long]()\n\
    \        for ((k,v) <- map) {\n            if (v == max) {\n                result\
    \ += (k -> v)\n            }\n        }\n        return result", "        val\
    \ words = test.split(\" \")\n        var map = Map[String,Long]()\n        for\
    \ (word <- words) {\n            if (map.contains(word)) {\n                map\
    \ += (word -> (map(word) + 1))\n            } else {\n                map += (word\
    \ -> 1)\n            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        val map = new HashMap[String,Long]\n        for (c\
    \ <- test.split(\" \")) {\n            if (map.contains(c)) {\n              \
    \  map(c) += 1\n            } else {\n                map(c) = 1\n           \
    \ }\n        }\n        val max = map.values.max\n        map.filter(x => x._2\
    \ == max)", "        var result = Map[String,Long]()\n        var max = 0l\n \
    \       test.split(\" \").foreach(x => {\n            var count = 0l\n       \
    \     if (result.contains(x)) {\n                count = result(x)\n         \
    \   }\n            count += 1\n            result += (x -> count)\n          \
    \  if (count > max) {\n                max = count\n            }\n        })\n\
    \        result.filter(x => x._2 == max)", "        // Fill in the code here\n\
    \        return Map[String,Long]()", "        val histogram = new HashMap[String,Long]\n\
    \        for (letter <- test.split(\" \")) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        val max = histogram.values.max\n\
    \        histogram.filter(x => x._2 == max)", "        val words = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]\n        for (word <- words)\
    \ {\n            if (map.contains(word)) {\n                map(word) += 1\n \
    \           } else {\n                map(word) = 1\n            }\n        }\n\
    \        map", "        // Fill in the code here\n        var map = Map[String,Long]()\n\
    \        for (i <- test.split(\" \")) {\n            if (map.contains(i)) {\n\
    \                map += (i -> (map(i) + 1))\n            } else {\n          \
    \      map += (i -> 1)\n            }\n        }\n        var max = 0\n      \
    \  for (i <- map.keys) {\n            if (map(i) > max) {\n                max\
    \ = map(i).toInt\n            }\n        }\n        var res = Map[String,Long]()\n\
    \        for (i <- map.keys) {\n            if (map(i) == max) {\n           \
    \     res += (i -> map(i))\n            }\n        }\n        res", "        var\
    \ map = Map[String,Long]()\n        for (i <- test.split(\" \")) {\n         \
    \   if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n     \
    \   }\n        var max = 0l\n        for (i <- map.values) max = max.max(i)\n\
    \        var result = Map[String,Long]()\n        for (i <- map) if (i._2 == max)\
    \ result += i\n        return result", "        val result = Map[String,Long]()\n\
    \        test.split(\" \").foreach(x => {\n            if (result.contains(x))\
    \ result(x) += 1\n            else result(x) = 1\n        })\n        result.filter(x\
    \ => x._2 == result.values.max)", "        val map = new HashMap[String,Long]\n\
    \        for (c <- test.split(\" \")) {\n            if (map.contains(c)) map(c)\
    \ += 1\n            else map(c) = 1\n        }\n        val max = map.values.max\n\
    \        map.filter(x => x._2 == max)", "        val result = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (result.contains(c)) {\n\
    \                result(c) += 1\n            } else {\n                result(c)\
    \ = 1\n            }\n        }\n        result", "        val letters = test.split(\"\
    \ \")\n        val letterCount = Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            if (letterCount.contains(letter)) {\n                letterCount(letter)\
    \ += 1\n            } else {\n                letterCount(letter) = 1\n      \
    \      }\n        }\n        val maxCount = letterCount.values.max\n        val\
    \ maxLetters = letterCount.filter(x => x._2 == maxCount)\n        maxLetters",
  "        var map = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n\
    \            if (map.contains(c)) {\n                map(c) += 1\n           \
    \ } else {\n                map += (c -> 1)\n            }\n        }\n      \
    \  map", "        val letters = test.split(\" \")\n        val map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map(letter)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        val m = Map[String,Long]()\n        test.split(\"\
    \ \").foreach(x => {\n            if (m.contains(x)) {\n                m(x) =\
    \ m(x) + 1\n            } else {\n                m(x) = 1\n            }\n  \
    \      })\n        m.filter(x => x._2 == m.values.max)", "        var map = Map[String,Long]()\n\
    \        for (i <- test.split(\" \")) {\n            if (map.contains(i)) {\n\
    \                map(i) += 1\n            } else {\n                map += (i\
    \ -> 1)\n            }\n        }\n        map", "        var map = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (map.contains(c)) map(c)\
    \ += 1\n            else map += (c -> 1)\n        }\n        var max = 0l\n  \
    \      for (c <- map.keys) {\n            if (map(c) > max) max = map(c)\n   \
    \     }\n        var result = Map[String,Long]()\n        for (c <- map.keys)\
    \ {\n            if (map(c) == max) result += (c -> max)\n        }\n        return\
    \ result", "        var map = Map[String,Long]()\n        for (c <- test.split(\"\
    \ \")) {\n            if (map.contains(c)) {\n                map(c) += 1\n  \
    \          } else {\n                map += (c -> 1)\n            }\n        }\n\
    \        var max = 0\n        for (c <- map.keys) {\n            if (map(c) >\
    \ max) {\n                max = map(c).toInt\n            }\n        }\n     \
    \   var result = Map[String,Long]()\n        for (c <- map.keys) {\n         \
    \   if (map(c) == max) {\n                result += (c -> max)\n            }\n\
    \        }\n        return result", "        val map = Map[String,Long]()\n  \
    \      test.split(\" \").foreach(x => {\n            if (map.contains(x)) {\n\
    \                map(x) += 1\n            } else {\n                map(x) = 1\n\
    \            }\n        })\n        map.filter(x => x._2 == map.values.max)",
  "        var result = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n\
    \            if (result.contains(c)) result(c) += 1\n            else result(c)\
    \ = 1\n        }\n        result.filter(x => x._2 == result.values.max)", "  \
    \      val m = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n  \
    \          m(c) = m.getOrElse(c, 0l) + 1l\n        }\n        m.filter(p => p._2\
    \ == m.values.max)", "        var result = Map[String,Long]()\n        var count\
    \ = 0\n        var max = 0\n        var maxKey = \"\"\n        for (i <- 0 until\
    \ test.length) {\n            if (test(i) != ' ') {\n                count +=\
    \ 1\n                if (count > max) {\n                    max = count\n   \
    \                 maxKey = test(i).toString\n                }\n             \
    \   else if (count == max) {\n                    maxKey += test(i).toString\n\
    \                }\n            }\n            else {\n                count =\
    \ 0\n            }\n        }\n        for (i <- 0 until maxKey.length) {\n  \
    \          result += (maxKey(i).toString -> max)\n        }\n        return result",
  "        var result : Map[String,Long] = Map()\n        var max : Long = 0\n   \
    \     for (c <- test.split(\" \")) {\n            if (result.contains(c)) {\n\
    \                result(c) += 1\n            } else {\n                result(c)\
    \ = 1\n            }\n            if (result(c) > max) {\n                max\
    \ = result(c)\n            }\n        }\n        result.filter(x => x._2 == max)",
  "        if (test.length == 0) return Map[String,Long]()\n        val histogram\
    \ = Map[String,Long]()\n        test.split(\" \").foreach(x => {\n           \
    \ if (histogram.contains(x)) histogram(x) += 1\n            else histogram(x)\
    \ = 1\n        })\n        val max = histogram.values.max\n        histogram.filter(x\
    \ => x._2 == max)", "        val map = new HashMap[String,Long]\n        for (i\
    \ <- test.split(\" \")) {\n            if (map.contains(i)) map(i) += 1\n    \
    \        else map(i) = 1\n        }\n        val max = map.values.max\n      \
    \  map.filter(_._2 == max)", "        // Fill in the code\n        return Map[String,Long]()",
  "        // Fill in the code here\n        var map = Map[String,Long]()\n      \
    \  var max = 0\n        var max_list = List[String]()\n        for (i <- test.split(\"\
    \ \")) {\n            if (map.contains(i)) {\n                var tmp = map(i)\n\
    \                map += (i -> (tmp + 1))\n                if (tmp + 1 > max) {\n\
    \                    max = tmp + 1\n                    max_list = List[String]()\n\
    \                    max_list = max_list :+ i\n                } else if (tmp\
    \ + 1 == max) {\n                    max_list = max_list :+ i\n              \
    \  }\n            } else {\n                map += (i -> 1)\n                if\
    \ (1 > max) {\n                    max = 1\n                    max_list = List[String]()\n\
    \                    max_list = max_list :+ i\n                } else if (1 ==\
    \ max) {\n                    max_list = max_list :+ i\n                }\n  \
    \          }\n        }\n        var result = Map[String,Long]()\n        for\
    \ (i <- max_list) {\n            result += (i -> max)\n        }\n        return\
    \ result", "        var map = Map[String,Long]()\n        for (i <- test.split(\"\
    \ \")) {\n            if (map.contains(i)) {\n                map(i) += 1\n  \
    \          } else {\n                map += (i -> 1)\n            }\n        }\n\
    \        map", "        val map = Map[String,Long]()\n        val words = test.split(\"\
    \ \")\n        for (word <- words) {\n            if (map.contains(word)) {\n\
    \                map(word) += 1\n            } else {\n                map(word)\
    \ = 1\n            }\n        }\n        map", "        val map = new HashMap[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (map.contains(c)) {\n\
    \                map(c) += 1\n            } else {\n                map(c) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        // Fill in the code here\n        return Map[String,Long]()",
  "        // Fill in the code here\n        var result = Map[String,Long]()\n   \
    \     var max = 0\n        var count = 0\n        var temp = \"\"\n        for\
    \ (i <- 0 until test.length) {\n            if (test(i) != ' ') {\n          \
    \      temp += test(i)\n                count += 1\n            }\n          \
    \  else {\n                if (result.contains(temp)) {\n                    result(temp)\
    \ += 1\n                }\n                else {\n                    result\
    \ += (temp -> 1)\n                }\n                if (result(temp) > max) {\n\
    \                    max = result(temp).toInt\n                }\n           \
    \     temp = \"\"\n                count = 0\n            }\n        }\n     \
    \   if (count != 0) {\n            if (result.contains(temp)) {\n            \
    \    result(temp) += 1\n            }\n            else {\n                result\
    \ += (temp -> 1)\n            }\n            if (result(temp) > max) {\n     \
    \           max = result(temp).toInt\n            }\n        }\n        var finalResult\
    \ = Map[String,Long]()\n        for (i <- result) {\n            if (i._2 == max)\
    \ {\n                finalResult += (i._1 -> i._2)\n            }\n        }\n\
    \        return finalResult", "        val m = Map[String,Long]()\n        var\
    \ max = 0l\n        test.split(\" \").foreach(x => {\n            val count =\
    \ m.getOrElse(x, 0l) + 1\n            m.put(x, count)\n            if (count >\
    \ max) max = count\n        })\n        m.filter(x => x._2 == max)", "       \
    \ val words = test.split(\" \")\n        val wordCounts = words.groupBy(word =>\
    \ word).mapValues(_.length)\n        val maxCount = wordCounts.values.max\n  \
    \      wordCounts.filter(wordCount => wordCount._2 == maxCount)", "        val\
    \ map = new HashMap[String,Long]()\n        for (letter <- test.split(\" \"))\
    \ {\n            if (map.contains(letter)) {\n                map(letter) += 1\n\
    \            } else {\n                map(letter) = 1\n            }\n      \
    \  }\n        val max = map.values.max\n        val result = new HashMap[String,Long]()\n\
    \        for ((letter, count) <- map) {\n            if (count == max) {\n   \
    \             result(letter) = count\n            }\n        }\n        result",
  "        var map = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n\
    \            if (map.contains(c)) {\n                map(c) += 1\n           \
    \ } else {\n                map += (c -> 1)\n            }\n        }\n      \
    \  var max = 0\n        for (c <- map.keys) {\n            if (map(c) > max) {\n\
    \                max = map(c).toInt\n            }\n        }\n        var result\
    \ = Map[String,Long]()\n        for (c <- map.keys) {\n            if (map(c)\
    \ == max) {\n                result += (c -> max)\n            }\n        }\n\
    \        return result", "        val map = new HashMap[String,Long]\n       \
    \ for (c <- test.split(\" \")) {\n            if (map.contains(c)) map(c) += 1l\n\
    \            else map(c) = 1l\n        }\n        val max = map.values.max\n \
    \       map.filter(x => x._2 == max)", "        val hist = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (hist.contains(c)) {\n\
    \                hist(c) += 1\n            } else {\n                hist(c) =\
    \ 1\n            }\n        }\n        val max = hist.values.max\n        hist.filter(_._2\
    \ == max)", "        val m = Map[String,Long]()\n        test.split(\" \").foreach(x\
    \ => m(x) = m.getOrElse(x, 0l) + 1l)\n        m.filter(x => x._2 == m.values.max)",
  "        // Fill in the code here\n        var m = Map[String,Long]()\n        for\
    \ (i <- test.split(\" \")) {\n            if (m.contains(i)) {\n             \
    \   m(i) += 1\n            } else {\n                m += (i -> 1)\n         \
    \   }\n        }\n        m", "        val result = Map[String,Long]()\n     \
    \   val words = test.split(\" \")\n        for (word <- words) {\n           \
    \ if (result.contains(word)) {\n                result(word) += 1\n          \
    \  } else {\n                result(word) = 1\n            }\n        }\n    \
    \    result", "        // Fill in the code here\n        val result = Map[String,Long]()\n\
    \        val words = test.split(\" \")\n        for (word <- words) {\n      \
    \      if (result.contains(word)) {\n                result(word) += 1\n     \
    \       } else {\n                result(word) = 1\n            }\n        }\n\
    \        result", "        val hist = new HashMap[String,Long]\n        for (c\
    \ <- test.split(\" \")) {\n            if (hist.contains(c)) {\n             \
    \   hist(c) += 1\n            } else {\n                hist(c) = 1\n        \
    \    }\n        }\n        val max = hist.values.max\n        hist.filter(x =>\
    \ x._2 == max)", "        // Fill in the code here\n        return Map[String,Long]()",
  "        // Fill in the code here\n        var map = Map[String,Long]()\n      \
    \  for (i <- test.split(\" \")) {\n            if (map.contains(i)) {\n      \
    \          map += (i -> (map(i) + 1))\n            } else {\n                map\
    \ += (i -> 1)\n            }\n        }\n        var max = 0\n        for (i <-\
    \ map.values) {\n            if (i > max) {\n                max = i\n       \
    \     }\n        }\n        var result = Map[String,Long]()\n        for (i <-\
    \ map.keys) {\n            if (map(i) == max) {\n                result += (i\
    \ -> max)\n            }\n        }\n        result", "        val histogram =\
    \ new HashMap[String,Long]\n        for (letter <- test.split(\" \")) {\n    \
    \        if (histogram.contains(letter)) {\n                histogram(letter)\
    \ += 1\n            } else {\n                histogram(letter) = 1\n        \
    \    }\n        }\n        val max = histogram.values.max\n        histogram.filter(x\
    \ => x._2 == max)", "        val result = Map[String,Long]()\n        val letters\
    \ = test.split(\" \")\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result", "        var\
    \ map = Map[String,Long]()\n        for (i <- test.split(\" \")) {\n         \
    \   if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n     \
    \   }\n        var max = 0l\n        for (i <- map.values) max = max.max(i)\n\
    \        map.filter(x => x._2 == max)", "        var map = Map[String,Long]()\n\
    \        for (i <- test.split(\" \")) {\n            if (map.contains(i)) {\n\
    \                map(i) += 1\n            } else {\n                map += (i\
    \ -> 1)\n            }\n        }\n        val max = map.values.max\n        map.filter(_._2\
    \ == max)", "        val words = test.split(\" \")\n        val histogram = new\
    \ HashMap[String,Long]\n        for (word <- words) {\n            if (histogram.contains(word))\
    \ {\n                histogram(word) += 1\n            } else {\n            \
    \    histogram(word) = 1\n            }\n        }\n        val max = histogram.values.max\n\
    \        histogram.filter(_._2 == max)", "        var map = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (map.contains(c)) map(c)\
    \ += 1\n            else map += (c -> 1)\n        }\n        val max = map.values.max\n\
    \        map.filter(x => x._2 == max)", "        val map = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (map.contains(c)) {\n\
    \                map(c) += 1\n            } else {\n                map(c) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        val words = test.split(\" \")\n        val hist =\
    \ new HashMap[String,Long]()\n        for (word <- words) {\n            if (hist.contains(word))\
    \ {\n                hist(word) += 1\n            } else {\n                hist(word)\
    \ = 1\n            }\n        }\n        val max = hist.values.max\n        val\
    \ keys = hist.keys.filter(key => hist(key) == max)\n        val result = new HashMap[String,Long]()\n\
    \        for (key <- keys) {\n            result(key) = max\n        }\n     \
    \   result", "        val m = new HashMap[String,Long]\n        test.split(\"\
    \ \").foreach(x => m(x) = m.getOrElse(x, 0l) + 1l)\n        val max = m.values.max\n\
    \        m.filter(x => x._2 == max)", "        val m = Map[String,Long]()\n  \
    \      for (c <- test.split(\" \")) {\n            if (m.contains(c)) {\n    \
    \            m(c) += 1\n            } else {\n                m(c) = 1\n     \
    \       }\n        }\n        m", "        val m = Map[String,Long]()\n      \
    \  val l = test.split(\" \")\n        for (i <- l) {\n            if (m.contains(i))\
    \ {\n                m(i) += 1\n            } else {\n                m(i) = 1\n\
    \            }\n        }\n        var max = 0l\n        for (i <- m) {\n    \
    \        if (i._2 > max) {\n                max = i._2\n            }\n      \
    \  }\n        val r = Map[String,Long]()\n        for (i <- m) {\n           \
    \ if (i._2 == max) {\n                r(i._1) = i._2\n            }\n        }\n\
    \        r", "        val l = test.split(\" \").toList\n        val m = l.groupBy(x\
    \ => x).mapValues(x => x.length)\n        val max = m.values.max\n        m.filter(x\
    \ => x._2 == max)", "        val m = Map[String,Long]()\n        val l = test.split(\"\
    \ \")\n        for (i <- l) {\n            if (m.contains(i)) {\n            \
    \    m(i) += 1\n            } else {\n                m(i) = 1\n            }\n\
    \        }\n        val max = m.values.max\n        m.filter(x => x._2 == max)",
  "        // Fill in the code here\n        return null", "        // Fill in the\
    \ code here\n        var map = Map[String,Long]()\n        if (test.length() ==\
    \ 0) {\n            return map\n        }\n        var arr = test.split(\" \"\
    )\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i)))\
    \ {\n                map(arr(i)) += 1\n            } else {\n                map\
    \ += (arr(i) -> 1)\n            }\n        }\n        var max = 0\n        for\
    \ (i <- map.values) {\n            if (i > max) {\n                max = i\n \
    \           }\n        }\n        var result = Map[String,Long]()\n        for\
    \ (i <- map.keys) {\n            if (map(i) == max) {\n                result\
    \ += (i -> max)\n            }\n        }\n        return result", "        val\
    \ words = test.split(\" \")\n        val map = new HashMap[String,Long]\n    \
    \    for (word <- words) {\n            if (map.contains(word)) {\n          \
    \      map(word) += 1\n            } else {\n                map(word) = 1\n \
    \           }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        // Fill in the code here\n        return Map[String,Long]()",
  "        val map = new HashMap[String,Long]\n        for (i <- test.split(\" \"\
    )) {\n            if (map.contains(i)) {\n                map(i) += 1\n      \
    \      } else {\n                map(i) = 1\n            }\n        }\n      \
    \  val max = map.values.max\n        val result = new HashMap[String,Long]\n \
    \       for ((k,v) <- map) {\n            if (v == max) {\n                result(k)\
    \ = v\n            }\n        }\n        result", "        // Fill in the code\n\
    \        return Map[String,Long]()", "        var map = Map[String,Long]()\n \
    \       var max = 0\n        for (i <- test.split(\" \")) {\n            if (map.contains(i))\
    \ {\n                map(i) += 1\n                if (map(i) > max) max = map(i).toInt\n\
    \            }\n            else {\n                map += (i -> 1)\n        \
    \        if (map(i) > max) max = map(i).toInt\n            }\n        }\n    \
    \    map.filter(x => x._2 == max)", "        // Fill in the code\n        return\
    \ Map[String,Long]()", "        // Fill in the code here\n        var map = Map[String,Long]()\n\
    \        for (i <- test.split(\" \")) {\n            if (map.contains(i)) {\n\
    \                map(i) += 1\n            } else {\n                map += (i\
    \ -> 1)\n            }\n        }\n        map", "        val m = test.split(\"\
    \ \").groupBy(identity).mapValues(_.size)\n        val max = m.values.max\n  \
    \      m.filter(_._2 == max)", "        val map = new HashMap[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (map.contains(c)) {\n\
    \                map(c) += 1\n            } else {\n                map(c) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        val result\
    \ = new HashMap[String,Long]()\n        for ((k,v) <- map) {\n            if (v\
    \ == max) {\n                result(k) = v\n            }\n        }\n       \
    \ result", "        val words = test.split(\" \")\n        val hist = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (hist.contains(word)) {\n     \
    \           hist(word) += 1\n            } else {\n                hist(word)\
    \ = 1\n            }\n        }\n        val max = hist.values.max\n        val\
    \ maxWords = hist.filter(x => x._2 == max)\n        maxWords", "        var m\
    \ = Map[String,Long]()\n        for (i <- test.split(\" \")) {\n            if\
    \ (m.contains(i)) {\n                m(i) += 1\n            } else {\n       \
    \         m += (i -> 1)\n            }\n        }\n        var max = 0l\n    \
    \    for (i <- m.values) {\n            if (i > max) max = i\n        }\n    \
    \    var result = Map[String,Long]()\n        for ((k,v) <- m) {\n           \
    \ if (v == max) result += (k -> v)\n        }\n        return result", "     \
    \   val words = test.split(\" \")\n        val map = new HashMap[String,Long]()\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        // Fill in the code here\n        Map[String,Long]()",
  "        // Fill in the code here\n        var m = Map[String,Long]()\n        for\
    \ (c <- test.split(\" \")) {\n            if (m.contains(c)) {\n             \
    \   m(c) += 1\n            } else {\n                m += (c -> 1)\n         \
    \   }\n        }\n        m", "        val result = Map[String,Long]()\n     \
    \   for (c <- test.split(\" \")) {\n            if (result.contains(c)) result(c)\
    \ += 1\n            else result(c) = 1\n        }\n        val max = result.values.max\n\
    \        result.filter(x => x._2 == max)", "        val m = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (m.contains(c)) {\n  \
    \              m(c) += 1\n            } else {\n                m(c) = 1\n   \
    \         }\n        }\n        m", "        val result = Map[String,Long]()\n\
    \        val words = test.split(\" \")\n        for (word <- words) {\n      \
    \      result.get(word) match {\n                case Some(count) => result +=\
    \ (word -> (count + 1))\n                case None => result += (word -> 1)\n\
    \            }\n        }\n        result", "        val map = new HashMap[String,Long]\n\
    \        for (i <- test.split(\" \")) {\n            if (map.contains(i)) map(i)\
    \ += 1\n            else map(i) = 1\n        }\n        val max = map.values.max\n\
    \        map.filter(x => x._2 == max)", "        // Fill in the code here\n  \
    \      return Map[String,Long]()", "        // Fill in the code here\n       \
    \ Map[String,Long]()", "        val result = new HashMap[String,Long]\n      \
    \  for (c <- test.split(\" \")) {\n            if (result.contains(c)) result(c)\
    \ += 1\n            else result(c) = 1\n        }\n        result.filter(x =>\
    \ x._2 == result.values.max)", "        val result = new HashMap[String,Long]\n\
    \        for (c <- test.split(\" \")) {\n            if (result.contains(c)) result(c)\
    \ += 1\n            else result(c) = 1\n        }\n        val max = result.values.max\n\
    \        result.filter(x => x._2 == max)", "        // Fill in the code here\n\
    \        var result = Map[String,Long]()\n        var words = test.split(\" \"\
    )\n        for (word <- words) {\n            if (result.contains(word)) {\n \
    \               result(word) += 1\n            } else {\n                result\
    \ += (word -> 1)\n            }\n        }\n        result", "        val words\
    \ = test.split(\" \")\n        val wordCount = words.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = wordCount.values.max\n        wordCount.filter(_._2 ==\
    \ maxCount)", '        test.split(" ").groupBy(identity).mapValues(_.length)',
  "        // Fill in the code here\n        var result = new HashMap[String,Long]()\n\
    \        for (i <- test.split(\" \")) {\n            if (result.contains(i)) {\n\
    \                result(i) += 1\n            } else {\n                result(i)\
    \ = 1\n            }\n        }\n        result", "        var map = Map[String,Long]()\n\
    \        test.split(\" \").foreach(x => map += (x -> (map.getOrElse(x, 0l) + 1l)))\n\
    \        map.filter(x => x._2 == map.values.max)", "        val map = Map[String,Long]()\n\
    \        test.split(\" \").foreach(x => {\n            if (map.contains(x)) map(x)\
    \ += 1\n            else map(x) = 1\n        })\n        map.filter(x => x._2\
    \ == map.values.max)", "        var map = Map[String,Long]()\n        for (c <-\
    \ test.split(\" \")) {\n            if (map.contains(c)) map(c) += 1\n       \
    \     else map += (c -> 1)\n        }\n        var max = 0l\n        for (c <-\
    \ map.keys) max = max max map(c)\n        map.filter(x => x._2 == max)", "   \
    \     // Fill in the code here\n        var map = Map[String,Long]()\n       \
    \ for (i <- test.split(\" \")) {\n            if (map.contains(i)) {\n       \
    \         map(i) += 1\n            } else {\n                map(i) = 1\n    \
    \        }\n        }\n        map", "        // Fill in the code here\n     \
    \   return Map[String,Long]()", "        var map = Map[String,Long]()\n      \
    \  for (c <- test.split(\" \")) {\n            if (map.contains(c)) {\n      \
    \          map(c) += 1\n            } else {\n                map += (c -> 1)\n\
    \            }\n        }\n        var max = 0l\n        for (c <- map.keys) {\n\
    \            if (map(c) > max) {\n                max = map(c)\n            }\n\
    \        }\n        var result = Map[String,Long]()\n        for (c <- map.keys)\
    \ {\n            if (map(c) == max) {\n                result += (c -> max)\n\
    \            }\n        }\n        return result", "        var result = Map[String,Long]()\n\
    \        var max = 0l\n        for (letter <- test.split(\" \")) {\n         \
    \   if (result.contains(letter)) {\n                result(letter) += 1\n    \
    \        } else {\n                result += (letter -> 1)\n            }\n  \
    \          if (result(letter) > max) {\n                max = result(letter)\n\
    \            }\n        }\n        for ((letter, count) <- result) {\n       \
    \     if (count != max) {\n                result -= letter\n            }\n \
    \       }\n        return result", "        val hist = test.split(\" \").groupBy(x\
    \ => x).map(x => (x._1, x._2.length.toLong))\n        val max = hist.maxBy(_._2)._2\n\
    \        hist.filter(_._2 == max)", "        val result = new HashMap[String,Long]()\n\
    \        for (letter <- test.split(\" \")) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result", "        val\
    \ m = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n           \
    \ if (m.contains(c)) {\n                m(c) += 1\n            } else {\n    \
    \            m(c) = 1\n            }\n        }\n        m", "        val hist\
    \ = Map[String,Long]()\n        for (i <- test.split(\" \")) {\n            if\
    \ (hist.contains(i)) {\n                hist(i) += 1\n            } else {\n \
    \               hist(i) = 1\n            }\n        }\n        hist", "      \
    \  val map = new HashMap[String,Long]\n        for (c <- test.split(\" \")) {\n\
    \            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n \
    \       }\n        val max = map.values.max\n        map.filter(x => x._2 == max)",
  "        // Fill in the code here\n        return Map[String,Long]()", "       \
    \ val map = new HashMap[String,Long]()\n        for (c <- test.split(\" \")) {\n\
    \            if (map.contains(c)) {\n                map(c) += 1\n           \
    \ } else {\n                map(c) = 1\n            }\n        }\n        val\
    \ max = map.values.max\n        val keys = map.keys.filter(key => map(key) ==\
    \ max)\n        keys.map(key => (key, max)).toMap", "        val m = Map[String,Long]()\n\
    \        test.split(\" \").foreach(x => m(x) = m.getOrElse(x, 0l) + 1l)\n    \
    \    m.filter(x => x._2 == m.values.max)", "        var result = Map[String,Long]()\n\
    \        val letters = test.split(\" \")\n        for (letter <- letters) {\n\
    \            if (result.contains(letter)) {\n                result(letter) +=\
    \ 1\n            } else {\n                result(letter) = 1\n            }\n\
    \        }\n        result", "        val words = test.split(\" \")\n        val\
    \ map = new HashMap[String,Long]()\n        for (word <- words) {\n          \
    \  if (map.contains(word)) {\n                map(word) += 1\n            } else\
    \ {\n                map(word) = 1\n            }\n        }\n        val max\
    \ = map.values.max\n        val result = new HashMap[String,Long]()\n        for\
    \ ((key,value) <- map) {\n            if (value == max) {\n                result(key)\
    \ = value\n            }\n        }\n        result", "        val words = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]\n        for (word <- words)\
    \ {\n            if (map.contains(word)) {\n                map(word) += 1\n \
    \           } else {\n                map(word) = 1\n            }\n        }\n\
    \        val max = map.values.max\n        map.filter(x => x._2 == max)", "  \
    \      val map = new HashMap[String,Long]\n        for (c <- test.split(\" \"\
    )) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) =\
    \ 1\n        }\n        val max = map.values.max\n        map.filter(x => x._2\
    \ == max)", "        val testArray = test.split(\" \")\n        val testMap =\
    \ Map[String,Long]()\n        var max = 0l\n        for (i <- 0 until testArray.length)\
    \ {\n            if (testMap.contains(testArray(i))) {\n                val count\
    \ = testMap(testArray(i)) + 1\n                testMap.update(testArray(i), count)\n\
    \                if (count > max) max = count\n            } else {\n        \
    \        testMap.put(testArray(i), 1l)\n                if (1l > max) max = 1l\n\
    \            }\n        }\n        testMap.filter(x => x._2 == max)", "      \
    \  var m = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n      \
    \      if (m.contains(c)) {\n                m(c) += 1\n            } else {\n\
    \                m(c) = 1\n            }\n        }\n        m", "        val\
    \ result = new HashMap[String,Long]\n        for (letter <- test.split(\" \"))\
    \ {\n            if (result.contains(letter)) result(letter) += 1\n          \
    \  else result(letter) = 1\n        }\n        result.filter(x => x._2 == result.values.max)",
  "        val map = new HashMap[String,Long]()\n        for (c <- test.split(\" \"\
    )) {\n            if (map.contains(c)) map(c) += 1l\n            else map(c) =\
    \ 1l\n        }\n        val max = map.values.max\n        map.filter(x => x._2\
    \ == max)", "        val map = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            if (map.contains(c)) map(c) += 1\n            else map(c)\
    \ = 1\n        }\n        val max = map.values.max\n        map.filter(x => x._2\
    \ == max)", "        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        val words = test.split(\" \")\n        val map =\
    \ new HashMap[String,Long]\n        for (word <- words) {\n            if (map.contains(word))\
    \ {\n                map(word) += 1\n            } else {\n                map(word)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        var map = Map[String,Long]()\n        for (c <- test.split(\"\
    \ \")) {\n            if (map.contains(c)) {\n                map(c) += 1\n  \
    \          } else {\n                map += (c -> 1)\n            }\n        }\n\
    \        var max = 0l\n        for (c <- map.keys) {\n            if (map(c) >\
    \ max) {\n                max = map(c)\n            }\n        }\n        var\
    \ result = Map[String,Long]()\n        for (c <- map.keys) {\n            if (map(c)\
    \ == max) {\n                result += (c -> max)\n            }\n        }\n\
    \        return result", "        val m = Map[String,Long]()\n        for (c <-\
    \ test.split(\" \")) {\n            if (m.contains(c)) m(c) += 1\n           \
    \ else m(c) = 1\n        }\n        val max = m.values.max\n        m.filter(x\
    \ => x._2 == max)", "        val map = new HashMap[String,Long]\n        for (c\
    \ <- test.split(\" \")) {\n            if (map.contains(c)) map(c) += 1\n    \
    \        else map(c) = 1\n        }\n        val max = map.values.max\n      \
    \  val result = new HashMap[String,Long]\n        for ((k,v) <- map) if (v ==\
    \ max) result(k) = v\n        result", "        val hist = new HashMap[String,Long]\n\
    \        for (c <- test.split(\" \")) {\n            if (hist.contains(c)) hist(c)\
    \ += 1\n            else hist(c) = 1\n        }\n        hist.filter(_._2 == hist.values.max)",
  "        var m = Map[String,Long]()\n        for (i <- test.split(\" \")) {\n  \
    \          if (m.contains(i)) m(i) += 1\n            else m += (i -> 1)\n    \
    \    }\n        var max = 0l\n        for (i <- m.values) max = max.max(i)\n \
    \       var res = Map[String,Long]()\n        for ((k,v) <- m) if (v == max) res\
    \ += (k -> v)\n        return res", "        val map = new HashMap[String,Long]\n\
    \        for (letter <- test.split(\" \")) {\n            if (map.contains(letter))\
    \ map(letter) += 1\n            else map(letter) = 1\n        }\n        map.filter(x\
    \ => x._2 == map.values.max)", "        var result = Map[String,Long]()\n    \
    \    var max = 0l\n        for (c <- test.split(\" \")) {\n            if (result.contains(c))\
    \ {\n                result(c) += 1\n            } else {\n                result(c)\
    \ = 1\n            }\n            if (result(c) > max) {\n                max\
    \ = result(c)\n            }\n        }\n        result.filter(x => x._2 == max)",
  "        val words = test.split(\" \")\n        var map = Map[String,Long]()\n \
    \       for (word <- words) {\n            if (map.contains(word)) {\n       \
    \         map += (word -> (map(word) + 1))\n            } else {\n           \
    \     map += (word -> 1)\n            }\n        }\n        var max = 0\n    \
    \    for (word <- map.keys) {\n            if (map(word) > max) {\n          \
    \      max = map(word).toInt\n            }\n        }\n        var result = Map[String,Long]()\n\
    \        for (word <- map.keys) {\n            if (map(word) == max) {\n     \
    \           result += (word -> max)\n            }\n        }\n        return\
    \ result", "        val words = test.split(\" \")\n        val map = new HashMap[String,\
    \ Long]()\n        for (word <- words) {\n            if (map.contains(word))\
    \ map(word) += 1\n            else map(word) = 1\n        }\n        map", " \
    \       var result = Map[String,Long]()\n        if (test.length > 0) {\n    \
    \        var max = 0l\n            var letters = test.split(\" \")\n         \
    \   var map = Map[String,Long]()\n            for (letter <- letters) {\n    \
    \            if (map.contains(letter)) {\n                    var count = map(letter)\
    \ + 1\n                    map += (letter -> count)\n                    if (count\
    \ > max) max = count\n                } else {\n                    map += (letter\
    \ -> 1l)\n                    if (max == 0) max = 1\n                }\n     \
    \       }\n            for ((k,v) <- map) {\n                if (v == max) result\
    \ += (k -> v)\n            }\n        }\n        result", "        val words =\
    \ test.split(\" \")\n        val map = new HashMap[String,Long]\n        for (word\
    \ <- words) {\n            if (map.contains(word)) {\n                map(word)\
    \ += 1\n            } else {\n                map(word) = 1\n            }\n \
    \       }\n        val max = map.values.max\n        map.filter(x => x._2 == max)",
  "        var map = Map[String,Long]()\n        for (i <- test.split(\" \")) {\n\
    \            if (map.contains(i)) {\n                map += (i -> (map(i) + 1))\n\
    \            } else {\n                map += (i -> 1)\n            }\n      \
    \  }\n        var max = 0l\n        for (i <- map.values) {\n            if (i\
    \ > max) {\n                max = i\n            }\n        }\n        var result\
    \ = Map[String,Long]()\n        for (i <- map.keys) {\n            if (map(i)\
    \ == max) {\n                result += (i -> max)\n            }\n        }\n\
    \        return result", "        var histogram = Map[String,Long]()\n       \
    \ for (letter <- test.split(\" \")) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        histogram", " \
    \       val result = new HashMap[String,Long]()\n        for (c <- test.split(\"\
    \ \")) {\n            if (result.contains(c)) {\n                result(c) +=\
    \ 1\n            } else {\n                result(c) = 1\n            }\n    \
    \    }\n        val max = result.values.max\n        result.filter(x => x._2 ==\
    \ max)", "        val result = new HashMap[String,Long]\n        val words = test.split(\"\
    \ \")\n        for (word <- words) {\n            if (result.contains(word)) {\n\
    \                result(word) += 1\n            } else {\n                result(word)\
    \ = 1\n            }\n        }\n        result", "        val words = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]\n        for (word <- words)\
    \ {\n            if (map.contains(word)) {\n                map(word) += 1\n \
    \           } else {\n                map(word) = 1\n            }\n        }\n\
    \        val max = map.values.max\n        val result = new HashMap[String,Long]\n\
    \        for ((k,v) <- map) {\n            if (v == max) {\n                result(k)\
    \ = v\n            }\n        }\n        result", "        // Fill in the code\
    \ here\n        val hist = Map[String,Long]()\n        val words = test.split(\"\
    \ \")\n        for (word <- words) {\n            if (hist.contains(word)) {\n\
    \                hist(word) += 1\n            } else {\n                hist(word)\
    \ = 1\n            }\n        }\n        hist", "        var map = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (map.contains(c)) {\n\
    \                map(c) += 1\n            } else {\n                map += (c\
    \ -> 1)\n            }\n        }\n        var max = 0l\n        for (c <- map.keys)\
    \ {\n            if (map(c) > max) {\n                max = map(c)\n         \
    \   }\n        }\n        var result = Map[String,Long]()\n        for (c <- map.keys)\
    \ {\n            if (map(c) == max) {\n                result += (c -> max)\n\
    \            }\n        }\n        return result", "        // Fill in the code\
    \ here\n        null", "        val map = new HashMap[String,Long]\n        for\
    \ (c <- test.split(\" \")) {\n            if (map.contains(c)) map(c) += 1l\n\
    \            else map(c) = 1l\n        }\n        map.filter(x => x._2 == map.values.max)",
  "        val m = Map[String,Long]()\n        val l = test.split(\" \")\n       \
    \ for (s <- l) {\n            if (m.contains(s)) {\n                m(s) += 1\n\
    \            } else {\n                m(s) = 1\n            }\n        }\n  \
    \      m", "        // Fill in the code here\n        var result = Map[String,Long]()\n\
    \        var max = 0\n        var count = 0\n        var temp = \"\"\n       \
    \ for (i <- 0 until test.length) {\n            if (test(i) != ' ') {\n      \
    \          temp += test(i)\n                count += 1\n            }\n      \
    \      else {\n                if (result.contains(temp)) {\n                \
    \    result(temp) += 1\n                }\n                else {\n          \
    \          result += (temp -> 1)\n                }\n                if (result(temp)\
    \ > max) {\n                    max = result(temp).toInt\n                }\n\
    \                temp = \"\"\n                count = 0\n            }\n     \
    \   }\n        if (count > 0) {\n            if (result.contains(temp)) {\n  \
    \              result(temp) += 1\n            }\n            else {\n        \
    \        result += (temp -> 1)\n            }\n            if (result(temp) >\
    \ max) {\n                max = result(temp).toInt\n            }\n        }\n\
    \        var finalResult = Map[String,Long]()\n        for (i <- result) {\n \
    \           if (i._2 == max) {\n                finalResult += (i._1 -> i._2)\n\
    \            }\n        }\n        finalResult", "        val words = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]\n        for (word <- words)\
    \ {\n            if (map.contains(word)) {\n                map(word) += 1\n \
    \           } else {\n                map(word) = 1\n            }\n        }\n\
    \        val max = map.values.max\n        val result = new HashMap[String,Long]\n\
    \        for ((k,v) <- map) {\n            if (v == max) {\n                result(k)\
    \ = v\n            }\n        }\n        result", "        var map = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (map.contains(c)) map(c)\
    \ += 1\n            else map += (c -> 1)\n        }\n        var max = 0l\n  \
    \      for (c <- map.values) if (c > max) max = c\n        var result = Map[String,Long]()\n\
    \        for ((k,v) <- map) if (v == max) result += (k -> v)\n        return result",
  "        var map = Map[String,Long]()\n        for (i <- test.split(\" \")) {\n\
    \            if (map.contains(i)) {\n                map(i) += 1\n           \
    \ } else {\n                map += (i -> 1)\n            }\n        }\n      \
    \  var max = 0\n        for (i <- map.keys) {\n            if (map(i) > max) {\n\
    \                max = map(i).toInt\n            }\n        }\n        var result\
    \ = Map[String,Long]()\n        for (i <- map.keys) {\n            if (map(i)\
    \ == max) {\n                result += (i -> map(i))\n            }\n        }\n\
    \        return result", "        var map = Map[String,Long]()\n        for (c\
    \ <- test.split(\" \")) {\n            if (map.contains(c)) map(c) += 1l\n   \
    \         else map += (c -> 1l)\n        }\n        var max = 0l\n        for\
    \ (c <- map.keys) max = max.max(map(c))\n        var result = Map[String,Long]()\n\
    \        for (c <- map.keys) if (map(c) == max) result += (c -> max)\n       \
    \ return result", "        val words = test.split(\" \")\n        val map = new\
    \ HashMap[String,Long]\n        for (word <- words) {\n            if (map.contains(word))\
    \ {\n                map(word) += 1\n            } else {\n                map(word)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        val hist = new HashMap[String,Long]\n        for\
    \ (c <- test.split(\" \")) {\n            hist.get(c) match {\n              \
    \  case Some(v) => hist.put(c, v + 1)\n                case None => hist.put(c,\
    \ 1)\n            }\n        }\n        val max = hist.values.max\n        hist.filter(x\
    \ => x._2 == max)", "        val map = Map[String,Long]()\n        test.split(\"\
    \ \").foreach(x => {\n            if (map.contains(x)) {\n                map(x)\
    \ += 1\n            } else {\n                map(x) = 1\n            }\n    \
    \    })\n        map.filter(x => x._2 == map.values.max)", "        val map =\
    \ Map[String,Long]()\n        val words = test.split(\" \")\n        for (word\
    \ <- words) {\n            if (map.contains(word)) {\n                map(word)\
    \ += 1\n            } else {\n                map(word) = 1\n            }\n \
    \       }\n        map", "        val map = new HashMap[String,Long]\n       \
    \ for (c <- test.split(\" \")) {\n            map(c) = map.getOrElse(c, 0l) +\
    \ 1l\n        }\n        val max = map.values.max\n        map.filter(x => x._2\
    \ == max)", "        // Fill in the code\n        null", "        val words =\
    \ test.split(\" \")\n        val map = Map[String,Long]()\n        for (word <-\
    \ words) {\n            if (map.contains(word)) {\n                map(word) +=\
    \ 1\n            } else {\n                map(word) = 1\n            }\n    \
    \    }\n        val max = map.values.max\n        map.filter(x => x._2 == max)",
  "        val words = test.split(\" \")\n        val map = new HashMap[String,Long]\n\
    \        for (word <- words) {\n            if (map.contains(word)) {\n      \
    \          map(word) += 1\n            } else {\n                map(word) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        val map = new HashMap[String,Long]\n        for (c\
    \ <- test.split(\" \")) {\n            if (map.contains(c)) map(c) += 1\n    \
    \        else map(c) = 1\n        }\n        map.filter(x => x._2 == map.values.max)",
  "        val result = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            if (result.contains(c)) result(c) += 1\n            else\
    \ result(c) = 1\n        }\n        result.filter(x => x._2 == result.values.max)",
  "        var map = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n\
    \            if (map.contains(c)) {\n                map(c) += 1\n           \
    \ } else {\n                map += (c -> 1)\n            }\n        }\n      \
    \  var max = 0l\n        for (c <- map.values) {\n            if (c > max) max\
    \ = c\n        }\n        var result = Map[String,Long]()\n        for ((k,v)\
    \ <- map) {\n            if (v == max) result += (k -> v)\n        }\n       \
    \ return result"]
stop_tokens:
- "\n    }\n"
