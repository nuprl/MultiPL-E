name: HumanEval_128_prod_signs
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list arr of integers and you need to return\n    // sum\
  \ of magnitudes of integers multiplied by product of all signs\n    // of each number\
  \ in the list, represented by 1, -1 or 0.\n    // Note: return None for empty arr.\n\
  \    // Example:\n    // >>> prodSigns((List[Long](1l.toLong, 2l.toLong, 2l.toLong,\
  \ -4l.toLong)))\n    // 9l\n    // >>> prodSigns((List[Long](0l.toLong, 1l.toLong)))\n\
  \    // 0l\n    // >>> prodSigns((List[Long]()))\n    // None\n    def prodSigns(arr\
  \ : List[Long]) : Option[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(prodSigns((List[Long](1l.toLong,\
  \ 2l.toLong, 2l.toLong, -4l.toLong))).equals(-9l));\n    assert(prodSigns((List[Long](0l.toLong,\
  \ 1l.toLong))).equals(0l));\n    assert(prodSigns((List[Long](1l.toLong, 1l.toLong,\
  \ 1l.toLong, 2l.toLong, 3l.toLong, -1l.toLong, 1l.toLong))).equals(-10l));\n   \
  \ assert(prodSigns((List[Long]())).equals(None));\n    assert(prodSigns((List[Long](2l.toLong,\
  \ 4l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -1l.toLong, 9l.toLong))).equals(20l));\n\
  \    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, -1l.toLong, 1l.toLong))).equals(4l));\n\
  \    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))).equals(-4l));\n\
  \    assert(prodSigns((List[Long](-1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong))).equals(0l));\n\
  \    }\n\n}\n"
completions: ["        if (arr.isEmpty) None\n        else {\n            var sum\
    \ = 0l\n            var prod = 1l\n            for (i <- arr) {\n            \
    \    if (i > 0) sum += i\n                else if (i < 0) {\n                \
    \    sum += -i\n                    prod *= -1\n                }\n          \
    \  }\n            Some(sum * prod)\n        }", "        if (arr.isEmpty) None\n\
    \        else {\n            var sum = 0l\n            var prod = 1l\n       \
    \     for (i <- arr) {\n                if (i > 0) sum += i\n                else\
    \ if (i < 0) {\n                    sum += -i\n                    prod *= -1\n\
    \                }\n            }\n            Some(sum * prod)\n        }", " \
    \       if (arr.length == 0) return None\n        var prod = 1l\n        var sum\
    \ = 0l\n        for (i <- arr) {\n            if (i > 0) prod *= 1\n         \
    \   else if (i < 0) prod *= -1\n            else prod *= 0\n            sum +=\
    \ abs(i)\n        }\n        return Some(sum * prod)", "        if (arr.length\
    \ == 0) return None\n        var sum = 0l\n        var prod = 1l\n        for\
    \ (i <- arr) {\n            if (i > 0) sum += i\n            else if (i < 0) {\n\
    \                sum += -i\n                prod *= -1\n            }\n      \
    \  }\n        Some(sum * prod)", "        if (arr.length == 0) return None\n \
    \       var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n      \
    \      sum += abs(i)\n            prod *= i.signum\n        }\n        Some(sum\
    \ * prod)", "        if (arr.length == 0) return None\n        var product = 1l\n\
    \        var sum = 0l\n        for (i <- arr) {\n            if (i < 0) product\
    \ *= -1\n            else if (i > 0) product *= 1\n            else product *=\
    \ 0\n            sum += abs(i)\n        }\n        return Some(sum * product)",
  "        if (arr.length == 0) return None\n        var product = 1l\n        var\
    \ sum = 0l\n        for (i <- arr) {\n            if (i > 0) product *= 1\n  \
    \          else if (i < 0) product *= -1\n            else product *= 0\n    \
    \        sum += abs(i)\n        }\n        return Some(sum * product)", "    \
    \    if (arr.isEmpty) return None\n        var sign = 1\n        var sum = 0l\n\
    \        for (i <- arr) {\n            if (i > 0) sign *= 1\n            else\
    \ if (i < 0) sign *= -1\n            else sign *= 0\n            sum += abs(i)\n\
    \        }\n        return Some(sum * sign)", "        if (arr.isEmpty) None\n\
    \        else {\n            val signs = arr.map(x => if (x == 0) 0 else if (x\
    \ > 0) 1 else -1)\n            val magnitudes = arr.map(x => if (x < 0) -x else\
    \ x)\n            Some(signs.product * magnitudes.sum)\n        }", "        if\
    \ (arr.isEmpty) return None\n        var prod = 1l\n        var sum = 0l\n   \
    \     for (i <- arr) {\n            if (i > 0) prod *= 1\n            else if\
    \ (i < 0) prod *= -1\n            else prod *= 0\n            sum += abs(i)\n\
    \        }\n        return Some(sum * prod)", "        if (arr.length == 0) return\
    \ None\n        var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n\
    \            if (i > 0) sum += i\n            else if (i < 0) {\n            \
    \    sum += -i\n                prod *= -1\n            }\n        }\n       \
    \ return Some(sum * prod)", "        if (arr.isEmpty) return None\n        var\
    \ sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n            if (i\
    \ > 0) sum += i\n            else if (i < 0) {\n                sum += -i\n  \
    \              prod *= -1\n            }\n        }\n        return Some(sum *\
    \ prod)", "        if (arr.isEmpty) return None\n        var sum = 0l\n      \
    \  var prod = 1l\n        for (i <- arr) {\n            if (i > 0) sum += i\n\
    \            else if (i < 0) {\n                sum += -i\n                prod\
    \ *= -1\n            }\n        }\n        Some(sum * prod)", "        if (arr.isEmpty)\
    \ return None\n        var sum = 0l\n        var prod = 1l\n        for (i <-\
    \ arr) {\n            if (i > 0) sum += i\n            else if (i < 0) {\n   \
    \             sum += -i\n                prod *= -1\n            }\n        }\n\
    \        return Some(sum * prod)", "        if (arr.length == 0) return None\n\
    \        var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n     \
    \       if (i > 0) sum += i\n            else if (i < 0) {\n                sum\
    \ += -i\n                prod *= -1\n            }\n        }\n        return\
    \ Some(sum * prod)", "        if (arr.length == 0) None\n        else {\n    \
    \        var sum = 0l\n            var prod = 1l\n            for (i <- arr) {\n\
    \                if (i > 0) sum += i\n                else if (i < 0) {\n    \
    \                sum += -i\n                    prod *= -1\n                }\n\
    \            }\n            Some(sum * prod)\n        }", "        if (arr.isEmpty)\
    \ return None\n        var product = 1l\n        var sum = 0l\n        for (i\
    \ <- arr) {\n            if (i > 0) product *= 1\n            else if (i < 0)\
    \ product *= -1\n            else product *= 0\n            sum += abs(i)\n  \
    \      }\n        Some(sum * product)", "        if (arr.isEmpty) None\n     \
    \   else {\n            val signs = arr.map(x => if (x == 0) 0 else if (x > 0)\
    \ 1 else -1)\n            val magnitudes = arr.map(x => if (x < 0) -x else x)\n\
    \            Some(signs.product * magnitudes.sum)\n        }", "        if (arr.isEmpty)\
    \ None\n        else {\n            var sum = 0l\n            var prod = 1l\n\
    \            for (i <- arr) {\n                if (i > 0) sum += i\n         \
    \       else if (i < 0) {\n                    sum += -i\n                   \
    \ prod *= -1\n                }\n            }\n            Some(sum * prod)\n\
    \        }", "        if (arr.isEmpty) None\n        else {\n            val sign\
    \ = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else -1)\n            val mag\
    \ = arr.map(x => abs(x))\n            Some(sign.product * mag.sum)\n        }",
  "        if (arr.length == 0) return None\n        var product = 1l\n        var\
    \ sum = 0l\n        for (i <- arr) {\n            if (i > 0) product *= 1\n  \
    \          else if (i < 0) product *= -1\n            else product *= 0\n    \
    \        sum += abs(i)\n        }\n        Some(sum * product)", "        if (arr.isEmpty)\
    \ None\n        else Some(arr.map(x => if (x == 0) 0 else x / abs(x)).product\
    \ * arr.map(x => abs(x)).sum)", "        if (arr.length == 0) return None\n  \
    \      var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n       \
    \     if (i > 0) sum += i\n            else if (i < 0) {\n                sum\
    \ -= i\n                prod *= -1\n            }\n        }\n        return Some(sum\
    \ * prod)", "        if (arr.length == 0) return None\n        var sum = 0l\n\
    \        var prod = 1l\n        for (i <- arr) {\n            if (i > 0) sum +=\
    \ i\n            else if (i < 0) {\n                sum -= i\n               \
    \ prod *= -1\n            }\n        }\n        Some(sum * prod)", "        if\
    \ (arr.length == 0) return None\n        var prod = 1l\n        var sum = 0l\n\
    \        for (x <- arr) {\n            if (x == 0) prod = 0\n            else\
    \ if (x < 0) prod *= -1\n            sum += abs(x)\n        }\n        return\
    \ Some(sum * prod)", "        if (arr.isEmpty) return None\n        var sum =\
    \ 0l\n        var prod = 1l\n        for (i <- arr) {\n            if (i > 0)\
    \ sum += i\n            else if (i < 0) {\n                sum += -i\n       \
    \         prod *= -1\n            }\n        }\n        return Some(sum * prod)",
  "        if (arr.isEmpty) return None\n        var sum = 0l\n        var prod =\
    \ 1l\n        for (i <- arr) {\n            if (i > 0) sum += i\n            else\
    \ if (i < 0) {\n                sum += -i\n                prod *= -1\n      \
    \      }\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ return None\n        var prod = 1l\n        var sum = 0l\n        for (i <-\
    \ arr) {\n            if (i == 0) prod = 0\n            else if (i < 0) prod *=\
    \ -1\n            sum += abs(i)\n        }\n        return Some(sum * prod)",
  "        if (arr.isEmpty) None\n        else {\n            var prod = 1l\n    \
    \        var sum = 0l\n            for (i <- arr) {\n                if (i > 0)\
    \ prod *= 1\n                else if (i < 0) prod *= -1\n                else\
    \ prod *= 0\n                sum += abs(i)\n            }\n            Some(sum\
    \ * prod)\n        }", "        if (arr.length == 0) return None\n        var\
    \ sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n            if (i\
    \ > 0) sum += i\n            else if (i < 0) {\n                sum -= i\n   \
    \             prod *= -1\n            }\n        }\n        return Some(sum *\
    \ prod)", "        if (arr.length == 0) None\n        else {\n            var\
    \ sum = 0l\n            var prod = 1l\n            for (i <- arr) {\n        \
    \        if (i > 0) sum += i\n                else if (i < 0) {\n            \
    \        sum += -i\n                    prod *= -1\n                }\n      \
    \      }\n            Some(sum * prod)\n        }", "        if (arr.length ==\
    \ 0) None\n        else {\n            var sum = 0l\n            var prod = 1l\n\
    \            for (x <- arr) {\n                if (x > 0) sum += x\n         \
    \       else if (x < 0) {\n                    sum += -x\n                   \
    \ prod *= -1\n                }\n            }\n            Some(sum * prod)\n\
    \        }", "        if (arr.isEmpty) None\n        else {\n            var product\
    \ = 1l\n            var sum = 0l\n            for (i <- arr) {\n             \
    \   if (i > 0) {\n                    product *= 1\n                    sum +=\
    \ i\n                }\n                else if (i < 0) {\n                  \
    \  product *= -1\n                    sum += -i\n                }\n         \
    \       else {\n                    product *= 0\n                }\n        \
    \    }\n            Some(sum * product)\n        }", "        if (arr.length ==\
    \ 0) return None\n        var product = 1l\n        var sum = 0l\n        for\
    \ (i <- arr) {\n            if (i > 0) product *= 1\n            else if (i <\
    \ 0) product *= -1\n            else product *= 0\n            sum += abs(i)\n\
    \        }\n        return Some(sum * product)", "        if (arr.isEmpty) return\
    \ None\n        var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n\
    \            if (i == 0) prod = 0\n            else if (i < 0) prod *= -1\n  \
    \          sum += abs(i)\n        }\n        return Some(sum * prod)", "     \
    \   if (arr.isEmpty) return None\n        var sum = 0l\n        var prod = 1l\n\
    \        for (i <- arr) {\n            if (i > 0) sum += i\n            else if\
    \ (i < 0) {\n                sum += -i\n                prod *= -1\n         \
    \   }\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else Some(arr.map(x => if (x == 0) 0 else abs(x)).sum * arr.map(x\
    \ => if (x == 0) 1 else signum(x)).product)", "        if (arr.isEmpty) None\n\
    \        else {\n            val signs = arr.map(x => if (x > 0) 1 else if (x\
    \ < 0) -1 else 0)\n            val magnitudes = arr.map(x => abs(x))\n       \
    \     Some(magnitudes.product * signs.product)\n        }", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x > 0) 1 else\
    \ if (x < 0) -1 else 0)\n            val magnitudes = arr.map(x => abs(x))\n \
    \           Some(magnitudes.product * signs.product)\n        }", "        if\
    \ (arr.isEmpty) None\n        else {\n            var sum = 0l\n            var\
    \ prod = 1l\n            for (i <- arr) {\n                if (i > 0) sum += i\n\
    \                else if (i < 0) {\n                    sum += -i\n          \
    \          prod *= -1\n                }\n            }\n            Some(sum\
    \ * prod)\n        }", "        if (arr.length == 0) return None\n        var\
    \ sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n            if (i\
    \ == 0) return Some(0l)\n            sum += abs(i)\n            prod *= signum(i)\n\
    \        }\n        Some(sum * prod)", "        if (arr.length == 0) return None\n\
    \        var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n     \
    \       if (i == 0) prod = 0\n            else if (i < 0) prod *= -1\n       \
    \     sum += abs(i)\n        }\n        Some(sum * prod)", "        if (arr.length\
    \ == 0) return None\n        var prod = 1l\n        var sum = 0l\n        for\
    \ (i <- arr) {\n            if (i > 0) prod *= 1\n            else if (i < 0)\
    \ prod *= -1\n            else prod *= 0\n            sum += abs(i)\n        }\n\
    \        Some(sum * prod)", "        if (arr.length == 0) return None\n      \
    \  var prod = 1l\n        var sum = 0l\n        for (i <- arr) {\n           \
    \ if (i > 0) prod *= 1\n            else if (i < 0) prod *= -1\n            else\
    \ prod *= 0\n            sum += abs(i)\n        }\n        Some(sum * prod)",
  "        if (arr.length == 0) return None\n        var sum = 0l\n        var prod\
    \ = 1l\n        for (i <- arr) {\n            if (i > 0) sum += i\n          \
    \  else if (i < 0) {\n                sum -= i\n                prod *= -1\n \
    \           }\n        }\n        Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            var prod = 1l\n            var sum = 0l\n\
    \            for (i <- arr) {\n                if (i > 0) prod *= 1\n        \
    \        else if (i < 0) prod *= -1\n                else prod *= 0\n        \
    \        sum += abs(i)\n            }\n            Some(sum * prod)\n        }",
  "        if (arr.isEmpty) return None\n        var sum = 0l\n        var prod =\
    \ 1l\n        for (i <- arr) {\n            if (i > 0) sum += i\n            else\
    \ if (i < 0) {\n                sum += -i\n                prod *= -1\n      \
    \      }\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            var sum = 0l\n            var prod = 1l\n\
    \            for (i <- arr) {\n                if (i > 0) sum += i\n         \
    \       else if (i < 0) {\n                    sum += -i\n                   \
    \ prod *= -1\n                }\n            }\n            Some(sum * prod)\n\
    \        }", "        if (arr.isEmpty) None\n        else {\n            var sum\
    \ = 0l\n            var prod = 1l\n            for (i <- arr) {\n            \
    \    if (i != 0) {\n                    sum += abs(i)\n                    prod\
    \ *= signum(i)\n                }\n            }\n            Some(sum * prod)\n\
    \        }", "        if (arr.length == 0) None\n        else {\n            var\
    \ product = 1l\n            var sum = 0l\n            for (i <- arr) {\n     \
    \           if (i > 0) product *= 1\n                else if (i < 0) product *=\
    \ -1\n                else product *= 0\n                sum += abs(i)\n     \
    \       }\n            Some(sum * product)\n        }", "        if (arr.isEmpty)\
    \ None\n        else {\n            var prod = 1l\n            var sum = 0l\n\
    \            for (i <- arr) {\n                if (i == 0) prod *= 0\n       \
    \         else if (i < 0) {\n                    prod *= -1\n                \
    \    sum += -i\n                }\n                else sum += i\n           \
    \ }\n            Some(sum * prod)\n        }", "        if (arr.isEmpty) None\n\
    \        else {\n            var sum = 0l\n            var prod = 1l\n       \
    \     for (i <- arr) {\n                if (i > 0) {\n                    sum\
    \ += i\n                    prod *= 1\n                }\n                else\
    \ if (i < 0) {\n                    sum += -i\n                    prod *= -1\n\
    \                }\n                else {\n                    prod *= 0\n  \
    \              }\n            }\n            Some(sum * prod)\n        }", " \
    \       if (arr.isEmpty) None\n        else {\n            var sum = 0l\n    \
    \        var product = 1l\n            for (i <- arr) {\n                if (i\
    \ > 0) sum += i\n                else if (i < 0) {\n                    sum +=\
    \ -i\n                    product *= -1\n                }\n            }\n  \
    \          Some(sum * product)\n        }", "        if (arr.isEmpty) None\n \
    \       else Some(arr.map(x => if (x == 0) 0 else x / abs(x)).product * arr.map(x\
    \ => abs(x)).sum)", "        if (arr.isEmpty) None\n        else {\n         \
    \   val signs = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else -1)\n      \
    \      val magnitudes = arr.map(x => if (x < 0) -x else x)\n            val signProduct\
    \ = signs.foldLeft(1l)((x, y) => x * y)\n            val magnitudeSum = magnitudes.foldLeft(0l)((x,\
    \ y) => x + y)\n            Some(signProduct * magnitudeSum)\n        }", "  \
    \      if (arr.isEmpty) None\n        else {\n            var prod = 1l\n    \
    \        var sum = 0l\n            for (i <- arr) {\n                if (i > 0)\
    \ prod *= 1\n                else if (i < 0) prod *= -1\n                else\
    \ prod *= 0\n                sum += abs(i)\n            }\n            Some(sum\
    \ * prod)\n        }", "        if (arr.isEmpty) None\n        else Some(arr.map(x\
    \ => if (x == 0) 0 else if (x > 0) 1 else -1).foldLeft(1l)(_ * _) * arr.map(x\
    \ => abs(x)).foldLeft(0l)(_ + _))", "        if (arr.length == 0) return None\n\
    \        var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n     \
    \       sum += abs(i)\n            if (i != 0) prod *= signum(i)\n        }\n\
    \        Some(sum * prod)", "        if (arr.isEmpty) None\n        else {\n \
    \           val signs = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else -1)\n\
    \            val magnitudes = arr.map(x => abs(x))\n            val prod = signs.product\n\
    \            val sum = magnitudes.sum\n            Some(prod * sum)\n        }",
  "        if (arr.isEmpty) return None\n        val signs = arr.map(x => if (x >\
    \ 0) 1 else if (x < 0) -1 else 0)\n        val magnitudes = arr.map(x => abs(x))\n\
    \        Some(magnitudes.product * signs.product)", "        if (arr.length ==\
    \ 0) return None\n        var sum = 0l\n        var prod = 1l\n        for (i\
    \ <- arr) {\n            if (i > 0) sum += i\n            else if (i < 0) {\n\
    \                sum -= i\n                prod *= -1\n            }\n       \
    \ }\n        Some(sum * prod)", "        if (arr.length == 0) None\n        else\
    \ {\n            var prod = 1l\n            var sum = 0l\n            for (i <-\
    \ arr) {\n                if (i > 0) prod *= 1\n                else if (i < 0)\
    \ prod *= -1\n                else prod *= 0\n                sum += abs(i)\n\
    \            }\n            Some(sum * prod)\n        }", "        if (arr.length\
    \ == 0) return None\n        var sum = 0l\n        var prod = 1l\n        for\
    \ (i <- arr) {\n            if (i > 0) sum += i\n            else if (i < 0) {\n\
    \                sum += -i\n                prod *= -1\n            }\n      \
    \  }\n        Some(sum * prod)", "        if (arr.length == 0) return None\n \
    \       var product = 1l\n        var sum = 0l\n        for (i <- arr) {\n   \
    \         if (i > 0) product *= 1\n            else if (i < 0) product *= -1\n\
    \            else product *= 0\n            sum += abs(i)\n        }\n       \
    \ Some(sum * product)", "        if (arr.length == 0) return None\n        var\
    \ sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n            if (i\
    \ > 0) sum += i\n            else if (i < 0) {\n                sum += -i\n  \
    \              prod *= -1\n            }\n        }\n        Some(sum * prod)",
  "        if (arr.length == 0) {\n            None\n        } else {\n          \
    \  var sum = 0l\n            var prod = 1l\n            for (i <- arr) {\n   \
    \             if (i > 0) {\n                    sum += i\n                   \
    \ prod *= 1\n                } else if (i < 0) {\n                    sum += -i\n\
    \                    prod *= -1\n                } else {\n                  \
    \  prod *= 0\n                }\n            }\n            Some(sum * prod)\n\
    \        }", "        if (arr.isEmpty) None\n        else {\n            var sum\
    \ = 0l\n            var prod = 1l\n            for (i <- arr) {\n            \
    \    if (i > 0) sum += i\n                else if (i < 0) {\n                \
    \    sum += -i\n                    prod *= -1\n                }\n          \
    \  }\n            Some(sum * prod)\n        }", "        if (arr.length == 0)\
    \ {\n            None\n        } else {\n            var sum = 0l\n          \
    \  var prod = 1l\n            for (i <- arr) {\n                if (i > 0) {\n\
    \                    sum += i\n                    prod *= 1\n               \
    \ } else if (i < 0) {\n                    sum += -i\n                    prod\
    \ *= -1\n                } else {\n                    prod *= 0\n           \
    \     }\n            }\n            Some(sum * prod)\n        }", "        if\
    \ (arr.length == 0) return None\n        var product = 1l\n        var sum = 0l\n\
    \        for (i <- arr) {\n            if (i > 0) product *= 1\n            else\
    \ if (i < 0) product *= -1\n            else product *= 0\n            sum +=\
    \ abs(i)\n        }\n        return Some(sum * product)", "        if (arr.length\
    \ == 0) return None\n        var sum = 0l\n        var prod = 1l\n        for\
    \ (i <- arr) {\n            sum += abs(i)\n            prod *= signum(i)\n   \
    \     }\n        return Some(sum * prod)", "        if (arr.isEmpty) None\n  \
    \      else {\n            var sum = 0l\n            var prod = 1l\n         \
    \   for (i <- arr) {\n                if (i > 0) sum += i\n                else\
    \ if (i < 0) {\n                    sum += -i\n                    prod *= -1\n\
    \                }\n            }\n            Some(sum * prod)\n        }", " \
    \       if (arr.isEmpty) None\n        else {\n            var sum = 0l\n    \
    \        var prod = 1l\n            for (i <- arr) {\n                if (i >\
    \ 0) sum += i\n                else if (i < 0) {\n                    sum += -i\n\
    \                    prod *= -1\n                }\n            }\n          \
    \  Some(sum * prod)\n        }", "        if (arr.isEmpty) return None\n     \
    \   var prod = 1l\n        var sum = 0l\n        for (i <- arr) {\n          \
    \  if (i > 0) {\n                prod *= 1\n                sum += i\n       \
    \     } else if (i < 0) {\n                prod *= -1\n                sum +=\
    \ -i\n            } else {\n                prod *= 0\n            }\n       \
    \ }\n        Some(sum * prod)", "        if (arr.length == 0) return None\n  \
    \      var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n       \
    \     if (i != 0) {\n                sum += abs(i)\n                prod *= signum(i)\n\
    \            }\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            var prod = 1l\n            var sum = 0l\n\
    \            for (i <- arr) {\n                if (i > 0) {\n                \
    \    prod *= 1\n                    sum += i\n                }\n            \
    \    else if (i < 0) {\n                    prod *= -1\n                    sum\
    \ += -i\n                }\n                else {\n                    prod *=\
    \ 0\n                }\n            }\n            Some(sum * prod)\n        }",
  "        if (arr.length == 0) None\n        else {\n            var sum = 0l\n \
    \           var prod = 1l\n            for (i <- arr) {\n                if (i\
    \ > 0) {\n                    sum += i\n                    prod *= 1\n      \
    \          }\n                else if (i < 0) {\n                    sum += -i\n\
    \                    prod *= -1\n                }\n                else {\n \
    \                   prod *= 0\n                }\n            }\n            Some(sum\
    \ * prod)\n        }", "        if (arr.isEmpty) None\n        else {\n      \
    \      var sum = 0l\n            var prod = 1l\n            for (i <- arr) {\n\
    \                if (i > 0) {\n                    sum += i\n                \
    \    prod *= 1\n                }\n                else if (i < 0) {\n       \
    \             sum += -i\n                    prod *= -1\n                }\n \
    \               else {\n                    prod *= 0\n                }\n   \
    \         }\n            Some(sum * prod)\n        }", "        if (arr.length\
    \ == 0) return None\n        var prod = 1l\n        var sum = 0l\n        for\
    \ (i <- arr) {\n            if (i > 0) prod *= 1\n            else if (i < 0)\
    \ prod *= -1\n            else prod *= 0\n            sum += abs(i)\n        }\n\
    \        return Some(sum * prod)", "        if (arr.length == 0) None\n      \
    \  else {\n            var prod = 1l\n            var sum = 0l\n            for\
    \ (i <- arr) {\n                if (i > 0) prod *= 1\n                else if\
    \ (i < 0) prod *= -1\n                else prod *= 0\n                sum += abs(i)\n\
    \            }\n            Some(sum * prod)\n        }", "        if (arr.length\
    \ == 0) return None\n        var prod = 1l\n        var sum = 0l\n        for\
    \ (i <- arr) {\n            if (i > 0) prod *= 1\n            else if (i < 0)\
    \ prod *= -1\n            else prod *= 0\n            sum += abs(i)\n        }\n\
    \        Some(sum * prod)", "        if (arr.isEmpty) None\n        else Some(arr.map(abs(_)).sum\
    \ * arr.map(signum(_)).product)", "        if (arr.isEmpty) None\n        else\
    \ {\n            var prod = 1l\n            var sum = 0l\n            for (i <-\
    \ arr) {\n                if (i > 0) {\n                    prod *= 1\n      \
    \              sum += i\n                }\n                else if (i < 0) {\n\
    \                    prod *= -1\n                    sum += -i\n             \
    \   }\n                else {\n                    prod *= 0\n               \
    \ }\n            }\n            Some(sum * prod)\n        }", "        if (arr.length\
    \ == 0) return None\n        var prod = 1l\n        var sum = 0l\n        for\
    \ (i <- arr) {\n            if (i > 0) prod *= 1\n            else if (i < 0)\
    \ prod *= -1\n            else prod *= 0\n            sum += abs(i)\n        }\n\
    \        return Some(sum * prod)", "        if (arr.isEmpty) None\n        else\
    \ {\n            val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else\
    \ 0)\n            val magnitudes = arr.map(x => abs(x))\n            Some(magnitudes.product\
    \ * signs.product)\n        }", "        if (arr.length == 0) return None\n  \
    \      var prod = 1l\n        var sum = 0l\n        for (i <- arr) {\n       \
    \     if (i > 0) prod *= 1\n            else if (i < 0) prod *= -1\n         \
    \   else prod *= 0\n            sum += abs(i)\n        }\n        Some(sum * prod)",
  "        if (arr.length == 0) return None\n        var sum = 0l\n        var prod\
    \ = 1l\n        for (i <- arr) {\n            if (i == 0) {\n                prod\
    \ = 0\n                sum = 0\n            } else if (i > 0) {\n            \
    \    sum += i\n            } else {\n                sum -= i\n              \
    \  prod *= -1\n            }\n        }\n        Some(sum * prod)", "        if\
    \ (arr.length == 0) return None\n        var sum = 0l\n        var prod = 1l\n\
    \        for (i <- arr) {\n            if (i > 0) sum += i\n            else if\
    \ (i < 0) {\n                sum += -i\n                prod *= -1\n         \
    \   }\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            var sum = 0l\n            var prod = 1l\n\
    \            for (i <- arr) {\n                if (i > 0) sum += i\n         \
    \       else if (i < 0) {\n                    sum += -i\n                   \
    \ prod *= -1\n                }\n            }\n            Some(sum * prod)\n\
    \        }", "        if (arr.isEmpty) return None\n        var product = 1l\n\
    \        var sum = 0l\n        for (i <- arr) {\n            if (i > 0) product\
    \ *= 1\n            else if (i < 0) product *= -1\n            else product *=\
    \ 0\n            sum += abs(i)\n        }\n        return Some(sum * product)",
  "        if (arr.length == 0) return None\n        var sum = 0l\n        var prod\
    \ = 1l\n        for (i <- arr) {\n            if (i > 0) sum += i\n          \
    \  else if (i < 0) {\n                sum += -i\n                prod *= -1\n\
    \            }\n        }\n        return Some(sum * prod)", "        if (arr.length\
    \ == 0) return None\n        var prod = 1l\n        var sum = 0l\n        for\
    \ (i <- arr) {\n            if (i > 0) prod *= 1\n            else if (i < 0)\
    \ prod *= -1\n            else prod *= 0\n            sum += abs(i)\n        }\n\
    \        Some(sum * prod)", "        if (arr.length == 0) return None\n      \
    \  var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n           \
    \ if (i > 0) sum += i\n            else if (i < 0) {\n                sum += -i\n\
    \                prod *= -1\n            }\n        }\n        return Some(sum\
    \ * prod)", "        if (arr.length == 0) return None\n        var product = 1l\n\
    \        var sum = 0l\n        for (i <- arr) {\n            if (i > 0) {\n  \
    \              product *= 1\n                sum += i\n            } else if (i\
    \ < 0) {\n                product *= -1\n                sum += -i\n         \
    \   } else {\n                product *= 0\n            }\n        }\n       \
    \ return Some(sum * product)", "        if (arr.isEmpty) None\n        else {\n\
    \            val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n\
    \            val magnitudes = arr.map(x => abs(x))\n            val prod = signs.product\n\
    \            val sum = magnitudes.sum\n            Some(prod * sum)\n        }",
  "        if (arr.isEmpty) None\n        else {\n            val sign = arr.map(x\
    \ => if (x > 0) 1 else if (x < 0) -1 else 0)\n            val mag = arr.map(x\
    \ => abs(x))\n            Some(sign.product * mag.sum)\n        }", "        if\
    \ (arr.isEmpty) None\n        else {\n            var sum = 0l\n            var\
    \ prod = 1l\n            for (i <- arr) {\n                if (i != 0) {\n   \
    \                 sum += abs(i)\n                    prod *= signum(i)\n     \
    \           }\n            }\n            Some(sum * prod)\n        }", "    \
    \    if (arr.length == 0) None\n        else {\n            var product = 1l\n\
    \            var sum = 0l\n            for (i <- arr) {\n                if (i\
    \ > 0) {\n                    product *= 1\n                    sum += i\n   \
    \             }\n                else if (i < 0) {\n                    product\
    \ *= -1\n                    sum += -i\n                }\n                else\
    \ {\n                    product *= 0\n                }\n            }\n    \
    \        Some(sum * product)\n        }", "        if (arr.length == 0) None\n\
    \        else {\n            val sign = arr.map(x => if (x > 0) 1 else if (x <\
    \ 0) -1 else 0)\n            val mag = arr.map(x => abs(x))\n            Some(sign.product\
    \ * mag.sum)\n        }", "        if (arr.length == 0) return None\n        var\
    \ sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n            if (i\
    \ > 0) sum += i\n            else if (i < 0) {\n                sum += -i\n  \
    \              prod *= -1\n            }\n        }\n        Some(sum * prod)",
  "        if (arr.isEmpty) return None\n        var sum = 0l\n        var prod =\
    \ 1l\n        for (i <- arr) {\n            if (i > 0) sum += i\n            else\
    \ if (i < 0) {\n                sum -= i\n                prod *= -1\n       \
    \     }\n        }\n        return Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            var sum = 0l\n            var prod = 1l\n\
    \            for (i <- arr) {\n                if (i > 0) sum += i\n         \
    \       else if (i < 0) {\n                    sum += -i\n                   \
    \ prod *= -1\n                }\n            }\n            Some(sum * prod)\n\
    \        }", "        if (arr.length == 0) return None\n        var sum = 0l\n\
    \        var prod = 1l\n        for (i <- arr) {\n            sum += abs(i)\n\
    \            if (i > 0) prod *= 1\n            else if (i < 0) prod *= -1\n  \
    \          else prod *= 0\n        }\n        return Some(sum * prod)", "    \
    \    if (arr.length == 0) return None\n        var sum = 0l\n        var prod\
    \ = 1l\n        for (i <- arr) {\n            sum += abs(i)\n            if (i\
    \ != 0) prod *= i / abs(i)\n        }\n        return Some(sum * prod)", "   \
    \     if (arr.isEmpty) None\n        else {\n            var product = 1l\n  \
    \          var sum = 0l\n            for (i <- arr) {\n                if (i >\
    \ 0) {\n                    product *= 1\n                    sum += i\n     \
    \           }\n                else if (i < 0) {\n                    product\
    \ *= -1\n                    sum += -i\n                }\n                else\
    \ {\n                    product *= 0\n                }\n            }\n    \
    \        Some(sum * product)\n        }", "        if (arr.length == 0) return\
    \ None\n        var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n\
    \            if (i > 0) sum += i\n            else if (i < 0) {\n            \
    \    sum -= i\n                prod *= -1\n            }\n        }\n        return\
    \ Some(sum * prod)", "        if (arr.isEmpty) return None\n        var sum =\
    \ 0l\n        var prod = 1l\n        for (i <- arr) {\n            if (i > 0)\
    \ sum += i\n            else if (i < 0) {\n                sum += -i\n       \
    \         prod *= -1\n            }\n        }\n        Some(sum * prod)", " \
    \       if (arr.isEmpty) None\n        else {\n            var sum = 0l\n    \
    \        var prod = 1l\n            for (i <- arr) {\n                if (i >\
    \ 0) {\n                    sum += i\n                    prod *= 1\n        \
    \        }\n                else if (i < 0) {\n                    sum += -i\n\
    \                    prod *= -1\n                }\n                else {\n \
    \                   prod *= 0\n                }\n            }\n            Some(sum\
    \ * prod)\n        }", "        if (arr.isEmpty) None\n        else {\n      \
    \      var sum = 0l\n            var prod = 1l\n            for (i <- arr) {\n\
    \                if (i > 0) sum += i\n                else if (i < 0) {\n    \
    \                sum += -i\n                    prod *= -1\n                }\n\
    \            }\n            Some(sum * prod)\n        }", "        if (arr.isEmpty)\
    \ None\n        else {\n            val signs = arr.map(x => if (x == 0) 0 else\
    \ if (x > 0) 1 else -1)\n            val magnitudes = arr.map(x => if (x < 0)\
    \ -x else x)\n            Some(magnitudes.product * signs.product)\n        }",
  "        if (arr.length == 0) return None\n        var sum = 0l\n        var prod\
    \ = 1l\n        for (i <- arr) {\n            if (i > 0) sum += i\n          \
    \  else if (i < 0) {\n                sum -= i\n                prod *= -1\n \
    \           }\n        }\n        Some(sum * prod)", "        if (arr.isEmpty)\
    \ None\n        else {\n            var sum = 0l\n            var prod = 1l\n\
    \            for (i <- arr) {\n                if (i > 0) sum += i\n         \
    \       else if (i < 0) {\n                    sum += -i\n                   \
    \ prod *= -1\n                }\n            }\n            Some(sum * prod)\n\
    \        }", "        if (arr.length == 0) return None\n        var sum = 0l\n\
    \        var prod = 1l\n        for (i <- arr) {\n            if (i > 0) sum +=\
    \ i\n            else if (i < 0) {\n                sum -= i\n               \
    \ prod *= -1\n            }\n        }\n        return Some(sum * prod)", "  \
    \      if (arr.length == 0) None\n        else {\n            var sum = 0l\n \
    \           var prod = 1l\n            for (i <- arr) {\n                if (i\
    \ > 0) sum += i\n                else if (i < 0) {\n                    sum +=\
    \ -i\n                    prod *= -1\n                }\n            }\n     \
    \       Some(sum * prod)\n        }", "        if (arr.length == 0) return None\n\
    \        var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n     \
    \       if (i > 0) sum += i\n            else if (i < 0) {\n                sum\
    \ -= i\n                prod *= -1\n            }\n        }\n        Some(sum\
    \ * prod)", "        if (arr.isEmpty) None\n        else {\n            var prod\
    \ = 1l\n            var sum = 0l\n            for (i <- arr) {\n             \
    \   if (i > 0) {\n                    prod *= 1\n                    sum += i\n\
    \                }\n                else if (i < 0) {\n                    prod\
    \ *= -1\n                    sum += -i\n                }\n                else\
    \ prod *= 0\n            }\n            Some(sum * prod)\n        }", "      \
    \  if (arr.isEmpty) None\n        else {\n            val sign = arr.map(x =>\
    \ if (x > 0) 1 else if (x < 0) -1 else 0)\n            val mag = arr.map(x =>\
    \ abs(x))\n            Some(sign.product * mag.sum)\n        }", "        if (arr.length\
    \ == 0) None\n        else {\n            var sum = 0l\n            var prod =\
    \ 1l\n            for (i <- arr) {\n                sum += abs(i)\n          \
    \      if (i > 0) prod *= 1\n                else if (i < 0) prod *= -1\n    \
    \        }\n            Some(sum * prod)\n        }", "        if (arr.isEmpty)\
    \ None\n        else {\n            var sum = 0l\n            var prod = 1l\n\
    \            for (i <- arr) {\n                if (i != 0) {\n               \
    \     sum += abs(i)\n                    prod *= signum(i)\n                }\n\
    \            }\n            Some(sum * prod)\n        }", "        if (arr.length\
    \ == 0) return None\n        var sum = 0l\n        var prod = 1l\n        for\
    \ (i <- arr) {\n            if (i > 0) sum += i\n            else if (i < 0) {\n\
    \                sum -= i\n                prod *= -1\n            }\n       \
    \ }\n        Some(sum * prod)", "        if (arr.isEmpty) None\n        else {\n\
    \            val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n\
    \            val magnitudes = arr.map(x => abs(x))\n            Some(magnitudes.product\
    \ * signs.product)\n        }", "        if (arr.length == 0) None\n        else\
    \ {\n            var sum = 0l\n            var product = 1l\n            for (i\
    \ <- arr) {\n                if (i > 0) sum += i\n                else if (i <\
    \ 0) {\n                    sum += -i\n                    product *= -1\n   \
    \             }\n            }\n            Some(sum * product)\n        }", " \
    \       if (arr.length == 0) None\n        else {\n            var sum = 0l\n\
    \            var prod = 1l\n            for (i <- arr) {\n                if (i\
    \ == 0) prod = 0\n                else if (i < 0) prod *= -1\n               \
    \ sum += abs(i)\n            }\n            Some(sum * prod)\n        }", "  \
    \      if (arr.length == 0) return None\n        var product = 1l\n        var\
    \ sum = 0l\n        for (i <- arr) {\n            if (i < 0) product *= -1\n \
    \           else if (i > 0) sum += i\n        }\n        Some(sum * product)",
  "        if (arr.isEmpty) None\n        else {\n            var sum = 0l\n     \
    \       var prod = 1l\n            for (i <- arr) {\n                if (i > 0)\
    \ sum += i\n                else if (i < 0) {\n                    sum += -i\n\
    \                    prod *= -1\n                }\n            }\n          \
    \  Some(sum * prod)\n        }", "        if (arr.isEmpty) None\n        else\
    \ {\n            var sum = 0l\n            var prod = 1l\n            for (i <-\
    \ arr) {\n                sum += abs(i)\n                if (i > 0) prod *= 1\n\
    \                else if (i < 0) prod *= -1\n            }\n            Some(sum\
    \ * prod)\n        }", "        if (arr.isEmpty) None\n        else {\n      \
    \      var sum = 0l\n            var prod = 1l\n            for (i <- arr) {\n\
    \                if (i > 0) sum += i\n                else if (i < 0) {\n    \
    \                sum += -i\n                    prod *= -1\n                }\n\
    \            }\n            Some(sum * prod)\n        }", "        if (arr.isEmpty)\
    \ None\n        else {\n            var prod = 1l\n            var sum = 0l\n\
    \            for (i <- arr) {\n                if (i > 0) {\n                \
    \    prod *= 1\n                    sum += i\n                }\n            \
    \    else if (i < 0) {\n                    prod *= -1\n                    sum\
    \ += -i\n                }\n                else {\n                    prod *=\
    \ 0\n                }\n            }\n            Some(sum * prod)\n        }",
  "        if (arr.isEmpty) None\n        else {\n            var prod = 1l\n    \
    \        var sum = 0l\n            for (i <- arr) {\n                if (i > 0)\
    \ {\n                    prod *= 1\n                    sum += i\n           \
    \     }\n                else if (i < 0) {\n                    prod *= -1\n \
    \                   sum += -i\n                }\n                else {\n   \
    \                 prod *= 0\n                }\n            }\n            Some(sum\
    \ * prod)\n        }", "        if (arr.isEmpty) None\n        else {\n      \
    \      val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n    \
    \        val magnitudes = arr.map(x => abs(x))\n            Some(magnitudes.product\
    \ * signs.product)\n        }", "        if (arr.isEmpty) None\n        else {\n\
    \            var sum = 0l\n            var prod = 1l\n            for (i <- arr)\
    \ {\n                if (i > 0) sum += i\n                else if (i < 0) {\n\
    \                    sum += -i\n                    prod *= -1\n             \
    \   }\n            }\n            Some(sum * prod)\n        }", "        if (arr.length\
    \ == 0) None\n        else {\n            var sum = 0l\n            var prod =\
    \ 1l\n            for (i <- arr) {\n                if (i > 0) sum += i\n    \
    \            else if (i < 0) {\n                    sum += -i\n              \
    \      prod *= -1\n                }\n            }\n            Some(sum * prod)\n\
    \        }", "        if (arr.isEmpty) None\n        else {\n            var sum\
    \ = 0l\n            var product = 1l\n            for (i <- arr) {\n         \
    \       if (i > 0) sum += i\n                else if (i < 0) {\n             \
    \       sum += -i\n                    product *= -1\n                }\n    \
    \        }\n            Some(sum * product)\n        }", "        if (arr.length\
    \ == 0) return None\n        var sum = 0l\n        var prod = 1l\n        for\
    \ (i <- arr) {\n            if (i > 0) sum += i\n            else if (i < 0) {\n\
    \                sum -= i\n                prod *= -1\n            }\n       \
    \ }\n        Some(sum * prod)", "        if (arr.isEmpty) None\n        else {\n\
    \            var prod = 1l\n            var sum = 0l\n            for (i <- arr)\
    \ {\n                if (i > 0) {\n                    prod *= 1\n           \
    \         sum += i\n                }\n                else if (i < 0) {\n   \
    \                 prod *= -1\n                    sum += -i\n                }\n\
    \                else {\n                    prod *= 0\n                }\n  \
    \          }\n            Some(sum * prod)\n        }", "        if (arr.length\
    \ == 0) return None\n        var sum = 0l\n        var prod = 1l\n        for\
    \ (i <- arr) {\n            if (i > 0) sum += i\n            else if (i < 0) {\n\
    \                sum += -i\n                prod *= -1\n            }\n      \
    \  }\n        Some(sum * prod)", "        if (arr.isEmpty) return None\n     \
    \   var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n          \
    \  if (i > 0) sum += i\n            else if (i < 0) {\n                sum +=\
    \ -i\n                prod *= -1\n            }\n        }\n        Some(sum *\
    \ prod)", "        if (arr.isEmpty) None\n        else {\n            val signProduct\
    \ = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else -1).product\n          \
    \  val magnitudeSum = arr.map(x => if (x < 0) -x else x).sum\n            Some(signProduct\
    \ * magnitudeSum)\n        }", "        if (arr.isEmpty) None\n        else {\n\
    \            val sign = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else -1)\n\
    \            val mag = arr.map(x => if (x < 0) -x else x)\n            Some(sign.product\
    \ * mag.sum)\n        }", "        if (arr.isEmpty) None\n        else {\n   \
    \         val signs = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else -1)\n\
    \            val magnitudes = arr.map(x => abs(x))\n            Some(magnitudes.product\
    \ * signs.product)\n        }", "        if (arr.length == 0) None\n        else\
    \ {\n            var sum = 0l\n            var prod = 1l\n            for (i <-\
    \ arr) {\n                if (i > 0) sum += i\n                else if (i < 0)\
    \ {\n                    sum += -i\n                    prod *= -1\n         \
    \       }\n            }\n            Some(sum * prod)\n        }", "        if\
    \ (arr.isEmpty) None\n        else {\n            val signs = arr.map(x => if\
    \ (x > 0) 1 else if (x < 0) -1 else 0)\n            val magnitudes = arr.map(x\
    \ => abs(x))\n            Some(magnitudes.product * signs.product)\n        }",
  "        if (arr.length == 0) return None\n        var sum = 0l\n        var prod\
    \ = 1l\n        for (i <- arr) {\n            sum += abs(i)\n            if (i\
    \ != 0) prod *= signum(i)\n        }\n        return Some(sum * prod)", "    \
    \    if (arr.isEmpty) None\n        else {\n            var sum = 0l\n       \
    \     var prod = 1l\n            for (i <- arr) {\n                if (i > 0)\
    \ sum += i\n                else if (i < 0) {\n                    sum += -i\n\
    \                    prod *= -1\n                }\n            }\n          \
    \  Some(sum * prod)\n        }", "        if (arr.isEmpty) None\n        else\
    \ {\n            var sum = 0l\n            var prod = 1l\n            for (i <-\
    \ arr) {\n                if (i != 0) {\n                    sum += abs(i)\n \
    \                   prod *= signum(i)\n                }\n            }\n    \
    \        Some(sum * prod)\n        }", "        if (arr.length == 0) None\n  \
    \      else {\n            var product = 1l\n            var sum = 0l\n      \
    \      for (i <- arr) {\n                if (i > 0) {\n                    product\
    \ *= 1\n                    sum += i\n                }\n                else\
    \ if (i < 0) {\n                    product *= -1\n                    sum +=\
    \ -i\n                }\n                else {\n                    product *=\
    \ 0\n                }\n            }\n            Some(sum * product)\n     \
    \   }", "        if (arr.length == 0) None\n        else {\n            val signs\
    \ = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n            val magnitudes\
    \ = arr.map(x => abs(x))\n            Some(magnitudes.product * signs.product)\n\
    \        }", "        if (arr.isEmpty) None\n        else {\n            var prod\
    \ = 1l\n            var sum = 0l\n            for (i <- arr) {\n             \
    \   if (i > 0) prod *= 1\n                else if (i < 0) prod *= -1\n       \
    \         else prod *= 0\n                sum += abs(i)\n            }\n     \
    \       Some(sum * prod)\n        }", "        if (arr.isEmpty) None\n       \
    \ else {\n            var sum = 0l\n            var prod = 1l\n            for\
    \ (i <- arr) {\n                if (i > 0) {\n                    sum += i\n \
    \                   prod *= 1\n                }\n                else if (i <\
    \ 0) {\n                    sum += -i\n                    prod *= -1\n      \
    \          }\n                else {\n                    prod *= 0\n        \
    \        }\n            }\n            Some(sum * prod)\n        }", "       \
    \ if (arr.isEmpty) None\n        else {\n            val signs = arr.map(x =>\
    \ if (x == 0) 0 else if (x > 0) 1 else -1)\n            val magnitudes = arr.map(x\
    \ => abs(x))\n            Some(magnitudes.product * signs.product)\n        }",
  "        if (arr.isEmpty) None\n        else {\n            var sum = 0l\n     \
    \       var prod = 1l\n            for (i <- arr) {\n                if (i > 0)\
    \ {\n                    sum += i\n                    prod *= 1\n           \
    \     }\n                else if (i < 0) {\n                    sum += -i\n  \
    \                  prod *= -1\n                }\n                else {\n   \
    \                 prod *= 0\n                }\n            }\n            Some(sum\
    \ * prod)\n        }", "        if (arr.length == 0) return None\n        var\
    \ sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n            if (i\
    \ > 0) sum += i\n            else if (i < 0) {\n                sum += -i\n  \
    \              prod *= -1\n            }\n        }\n        Some(sum * prod)",
  "        if (arr.length == 0) return None\n        var sum = 0l\n        var prod\
    \ = 1l\n        for (i <- arr) {\n            if (i > 0) sum += i\n          \
    \  else if (i < 0) {\n                sum += -i\n                prod *= -1\n\
    \            }\n        }\n        Some(sum * prod)", "        if (arr.length\
    \ == 0) return None\n        var sum = 0l\n        var prod = 1l\n        for\
    \ (i <- arr) {\n            if (i > 0) sum += i\n            else if (i < 0) {\n\
    \                sum += -i\n                prod *= -1\n            }\n      \
    \  }\n        return Some(sum * prod)", "        if (arr.isEmpty) None\n     \
    \   else {\n            var sum = 0l\n            var prod = 1l\n            for\
    \ (i <- arr) {\n                if (i > 0) sum += i\n                else if (i\
    \ < 0) {\n                    sum += -i\n                    prod *= -1\n    \
    \            }\n            }\n            Some(sum * prod)\n        }", "   \
    \     if (arr.isEmpty) None\n        else {\n            var sum = 0l\n      \
    \      var prod = 1l\n            for (i <- arr) {\n                if (i > 0)\
    \ sum += i\n                else if (i < 0) {\n                    sum += -i\n\
    \                    prod *= -1\n                }\n            }\n          \
    \  Some(sum * prod)\n        }", "        if (arr.isEmpty) None\n        else\
    \ {\n            var sum = 0l\n            var product = 1l\n            for (i\
    \ <- arr) {\n                if (i > 0) {\n                    sum += i\n    \
    \                product *= 1\n                }\n                else if (i <\
    \ 0) {\n                    sum += -i\n                    product *= -1\n   \
    \             }\n                else {\n                    product *= 0\n  \
    \              }\n            }\n            Some(sum * product)\n        }",
  "        if (arr.isEmpty) None\n        else {\n            var product = 1l\n \
    \           var sum = 0l\n            for (i <- arr) {\n                if (i\
    \ > 0) {\n                    product *= 1\n                    sum += i\n   \
    \             }\n                else if (i < 0) {\n                    product\
    \ *= -1\n                    sum += -i\n                }\n                else\
    \ {\n                    product *= 0\n                }\n            }\n    \
    \        Some(sum * product)\n        }", "        if (arr.isEmpty) None\n   \
    \     else {\n            var sum = 0l\n            var prod = 1l\n          \
    \  for (i <- arr) {\n                if (i != 0) {\n                    sum +=\
    \ abs(i)\n                    prod *= signum(i)\n                }\n         \
    \   }\n            Some(sum * prod)\n        }", "        if (arr.length == 0)\
    \ None\n        else {\n            var prod = 1l\n            var sum = 0l\n\
    \            for (i <- arr) {\n                if (i > 0) {\n                \
    \    prod *= 1\n                    sum += i\n                }\n            \
    \    else if (i < 0) {\n                    prod *= -1\n                    sum\
    \ += -i\n                }\n                else {\n                    prod *=\
    \ 0\n                }\n            }\n            Some(sum * prod)\n        }",
  "        if (arr.isEmpty) None\n        else {\n            var product = 1l\n \
    \           var sum = 0l\n            for (i <- arr) {\n                if (i\
    \ > 0) {\n                    product *= 1\n                    sum += i\n   \
    \             }\n                else if (i < 0) {\n                    product\
    \ *= -1\n                    sum += -i\n                }\n                else\
    \ {\n                    product *= 0\n                }\n            }\n    \
    \        Some(sum * product)\n        }", "        if (arr.length == 0) return\
    \ None\n        var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n\
    \            if (i == 0) {\n                prod = 0\n                sum = 0\n\
    \            } else if (i > 0) {\n                sum += i\n            } else\
    \ {\n                sum -= i\n                prod *= -1\n            }\n   \
    \     }\n        return Some(sum * prod)", "        if (arr.length == 0) None\n\
    \        else {\n            var product = 1l\n            var sum = 0l\n    \
    \        for (i <- arr) {\n                if (i > 0) {\n                    product\
    \ *= 1\n                    sum += i\n                }\n                else\
    \ if (i < 0) {\n                    product *= -1\n                    sum +=\
    \ -i\n                }\n                else {\n                    product *=\
    \ 0\n                }\n            }\n            Some(sum * product)\n     \
    \   }", "        if (arr.length == 0) return None\n        var sum = 0l\n    \
    \    var prod = 1l\n        for (i <- arr) {\n            if (i == 0) {\n    \
    \            prod = 0\n                sum = 0\n            } else if (i > 0)\
    \ {\n                sum += i\n            } else {\n                sum -= i\n\
    \                prod *= -1\n            }\n        }\n        return Some(sum\
    \ * prod)", "        if (arr.length == 0) None\n        else {\n            var\
    \ sum = 0l\n            var prod = 1l\n            for (i <- arr) {\n        \
    \        if (i > 0) sum += i\n                else if (i < 0) {\n            \
    \        sum += -i\n                    prod *= -1\n                }\n      \
    \      }\n            Some(sum * prod)\n        }", "        if (arr.isEmpty)\
    \ return None\n        var product = 1l\n        var sum = 0l\n        for (i\
    \ <- arr) {\n            if (i > 0) product *= 1\n            else if (i < 0)\
    \ product *= -1\n            else product *= 0\n            sum += abs(i)\n  \
    \      }\n        Some(sum * product)", "        if (arr.isEmpty) return None\n\
    \        var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n     \
    \       if (i > 0) sum += i\n            else if (i < 0) {\n                sum\
    \ -= i\n                prod *= -1\n            }\n        }\n        return Some(sum\
    \ * prod)", "        if (arr.length == 0) return None\n        var sum = 0l\n\
    \        var product = 1l\n        for (i <- arr) {\n            if (i > 0) sum\
    \ += i\n            else if (i < 0) {\n                sum += -i\n           \
    \     product *= -1\n            }\n        }\n        return Some(sum * product)",
  "        if (arr.isEmpty) None\n        else {\n            var sum = 0l\n     \
    \       var prod = 1l\n            for (i <- arr) {\n                if (i > 0)\
    \ sum += i\n                else if (i < 0) {\n                    sum += -i\n\
    \                    prod *= -1\n                }\n            }\n          \
    \  Some(sum * prod)\n        }", "        if (arr.length == 0) None\n        else\
    \ {\n            var sum = 0l\n            var prod = 1l\n            for (i <-\
    \ arr) {\n                if (i > 0) sum += i\n                else if (i < 0)\
    \ {\n                    sum += -i\n                    prod *= -1\n         \
    \       }\n            }\n            Some(sum * prod)\n        }", "        if\
    \ (arr.isEmpty) None\n        else {\n            var sum = 0l\n            var\
    \ prod = 1l\n            for (i <- arr) {\n                if (i > 0) sum += i\n\
    \                else if (i < 0) {\n                    sum += -i\n          \
    \          prod *= -1\n                }\n            }\n            Some(sum\
    \ * prod)\n        }", "        if (arr.isEmpty) None\n        else {\n      \
    \      var sum = 0l\n            var product = 1l\n            for (i <- arr)\
    \ {\n                if (i > 0) sum += i\n                else if (i < 0) {\n\
    \                    sum += -i\n                    product *= -1\n          \
    \      }\n            }\n            Some(sum * product)\n        }", "      \
    \  if (arr.length == 0) return None\n        var sum = 0l\n        var prod =\
    \ 1l\n        for (i <- arr) {\n            if (i > 0) sum += i\n            else\
    \ if (i < 0) {\n                sum += -i\n                prod *= -1\n      \
    \      }\n        }\n        Some(sum * prod)", "        if (arr.length == 0)\
    \ None\n        else {\n            var prod = 1l\n            var sum = 0l\n\
    \            for (i <- arr) {\n                if (i > 0) prod *= 1\n        \
    \        else if (i < 0) prod *= -1\n                else prod *= 0\n        \
    \        sum += abs(i)\n            }\n            Some(sum * prod)\n        }",
  "        if (arr.isEmpty) return None\n        var sum = 0l\n        var prod =\
    \ 1l\n        for (i <- arr) {\n            if (i == 0) prod = 0\n           \
    \ else if (i < 0) prod *= -1\n            sum += abs(i)\n        }\n        Some(sum\
    \ * prod)", "        if (arr.length == 0) None\n        else {\n            var\
    \ sum = 0l\n            var prod = 1l\n            for (i <- arr) {\n        \
    \        if (i > 0) sum += i\n                else if (i < 0) {\n            \
    \        sum += -i\n                    prod *= -1\n                }\n      \
    \      }\n            Some(sum * prod)\n        }", "        if (arr.length ==\
    \ 0) return None\n        var sum = 0l\n        var product = 1l\n        for\
    \ (i <- arr) {\n            sum += abs(i)\n            product *= signum(i)\n\
    \        }\n        return Some(sum * product)", "        if (arr.length == 0)\
    \ return None\n        var sum = 0l\n        var prod = 1l\n        for (i <-\
    \ arr) {\n            if (i == 0) return Some(0l)\n            sum += abs(i)\n\
    \            prod *= i / abs(i)\n        }\n        Some(sum * prod)", "     \
    \   if (arr.isEmpty) None\n        else {\n            var sum = 0l\n        \
    \    var prod = 1l\n            for (i <- arr) {\n                if (i > 0) {\n\
    \                    sum += i\n                    prod *= 1\n               \
    \ }\n                else if (i < 0) {\n                    sum += -i\n      \
    \              prod *= -1\n                }\n                else prod *= 0\n\
    \            }\n            Some(sum * prod)\n        }", "        if (arr.isEmpty)\
    \ return None\n        var sum = 0l\n        var prod = 1l\n        for (i <-\
    \ arr) {\n            if (i > 0) sum += i\n            else if (i < 0) {\n   \
    \             sum -= i\n                prod *= -1\n            }\n        }\n\
    \        return Some(sum * prod)", "        if (arr.length == 0) return None\n\
    \        var sum = 0l\n        var prod = 1l\n        for (i <- arr) {\n     \
    \       if (i > 0) sum += i\n            else if (i < 0) {\n                sum\
    \ += -i\n                prod *= -1\n            }\n        }\n        Some(sum\
    \ * prod)", "        if (arr.length == 0) return None\n        var sum = 0l\n\
    \        var product = 1l\n        for (i <- arr) {\n            if (i > 0) sum\
    \ += i\n            else if (i < 0) {\n                sum += (-i)\n         \
    \       product *= -1\n            }\n        }\n        return Some(sum * product)",
  "        if (arr.isEmpty) None\n        else {\n            val signs = arr.map(x\
    \ => if (x > 0) 1 else if (x < 0) -1 else 0)\n            val magnitudes = arr.map(x\
    \ => abs(x))\n            Some(magnitudes.product * signs.product)\n        }",
  "        if (arr.isEmpty) None\n        else {\n            var sum = 0l\n     \
    \       var prod = 1l\n            for (i <- arr) {\n                sum += abs(i)\n\
    \                if (i > 0) prod *= 1\n                else if (i < 0) prod *=\
    \ -1\n            }\n            Some(sum * prod)\n        }", "        if (arr.isEmpty)\
    \ None\n        else {\n            var sum = 0l\n            var prod = 1l\n\
    \            for (i <- arr) {\n                sum += abs(i)\n               \
    \ if (i > 0) prod *= 1\n                else if (i < 0) prod *= -1\n         \
    \   }\n            Some(sum * prod)\n        }", "        if (arr.length == 0)\
    \ return None\n        var prod = 1l\n        var sum = 0l\n        for (i <-\
    \ arr) {\n            if (i < 0) prod *= -1\n            sum += abs(i)\n     \
    \   }\n        return Some(sum * prod)", "        if (arr.length == 0) None\n\
    \        else {\n            var sum = 0l\n            var prod = 1l\n       \
    \     for (i <- arr) {\n                if (i == 0) {\n                    prod\
    \ = 0\n                    sum = 0\n                }\n                else if\
    \ (i > 0) sum += i\n                else {\n                    sum -= i\n   \
    \                 prod *= -1\n                }\n            }\n            Some(sum\
    \ * prod)\n        }", "        if (arr.length == 0) return None\n        var\
    \ product = 1l\n        var sum = 0l\n        for (i <- arr) {\n            if\
    \ (i > 0) product *= 1\n            else if (i < 0) product *= -1\n          \
    \  else product *= 0\n            sum += abs(i)\n        }\n        return Some(sum\
    \ * product)", "        if (arr.length == 0) None\n        else {\n          \
    \  val signs = arr.map(x => if (x > 0) 1 else if (x < 0) -1 else 0)\n        \
    \    val magnitudes = arr.map(x => abs(x))\n            val signProduct = signs.reduceLeft(_\
    \ * _)\n            val magnitudeSum = magnitudes.reduceLeft(_ + _)\n        \
    \    Some(signProduct * magnitudeSum)\n        }", "        if (arr.isEmpty) None\n\
    \        else {\n            val signs = arr.map(x => if (x > 0) 1 else if (x\
    \ < 0) -1 else 0)\n            val magnitudes = arr.map(x => abs(x))\n       \
    \     Some(magnitudes.product * signs.product)\n        }", "        if (arr.isEmpty)\
    \ None\n        else {\n            var sum = 0l\n            var prod = 1l\n\
    \            for (i <- arr) {\n                if (i > 0) sum += i\n         \
    \       else if (i < 0) {\n                    sum += -i\n                   \
    \ prod *= -1\n                }\n            }\n            Some(sum * prod)\n\
    \        }", "        if (arr.isEmpty) None\n        else {\n            val signs\
    \ = arr.map(x => if (x == 0) 0 else if (x > 0) 1 else -1)\n            val magnitudes\
    \ = arr.map(x => abs(x))\n            Some(magnitudes.product * signs.product)\n\
    \        }", "        if (arr.isEmpty) None\n        else {\n            var prod\
    \ = 1l\n            var sum = 0l\n            for (i <- arr) {\n             \
    \   if (i > 0) prod *= 1\n                else if (i < 0) prod *= -1\n       \
    \         else prod *= 0\n                sum += abs(i)\n            }\n     \
    \       Some(sum * prod)\n        }", "        if (arr.length == 0) return None\n\
    \        var prod = 1l\n        var sum = 0l\n        for (i <- arr) {\n     \
    \       if (i > 0) prod *= 1\n            else if (i < 0) prod *= -1\n       \
    \     else prod *= 0\n            sum += abs(i)\n        }\n        return Some(sum\
    \ * prod)", "        if (arr.length == 0) return None\n        var sum = 0l\n\
    \        var prod = 1l\n        for (i <- arr) {\n            if (i == 0) prod\
    \ = 0\n            else if (i < 0) prod *= -1\n            sum += abs(i)\n   \
    \     }\n        return Some(sum * prod)", "        if (arr.length == 0) None\n\
    \        else {\n            var sum = 0l\n            var prod = 1l\n       \
    \     for (i <- arr) {\n                if (i > 0) sum += i\n                else\
    \ if (i < 0) {\n                    sum += -i\n                    prod *= -1\n\
    \                }\n            }\n            Some(sum * prod)\n        }", " \
    \       if (arr.length == 0) return None\n        var sum = 0l\n        var prod\
    \ = 1l\n        for (i <- arr) {\n            if (i > 0) sum += i\n          \
    \  else if (i < 0) {\n                sum += -i\n                prod *= -1\n\
    \            }\n        }\n        return Some(sum * prod)", "        if (arr.length\
    \ == 0) return None\n        var sum = 0l\n        var prod = 1l\n        for\
    \ (i <- arr) {\n            if (i > 0) sum += i\n            else if (i < 0) {\n\
    \                sum += -i\n                prod *= -1\n            }\n      \
    \  }\n        Some(sum * prod)", "        if (arr.isEmpty) None\n        else\
    \ {\n            var sum = 0l\n            var prod = 1l\n            for (i <-\
    \ arr) {\n                if (i > 0) sum += i\n                else if (i < 0)\
    \ {\n                    sum += -i\n                    prod *= -1\n         \
    \       }\n            }\n            Some(sum * prod)\n        }", "        if\
    \ (arr.isEmpty) None\n        else {\n            var prod = 1l\n            var\
    \ sum = 0l\n            for (i <- arr) {\n                if (i > 0) {\n     \
    \               prod *= 1\n                    sum += i\n                }\n \
    \               else if (i < 0) {\n                    prod *= -1\n          \
    \          sum += -i\n                }\n                else {\n            \
    \        prod *= 0\n                }\n            }\n            Some(sum * prod)\n\
    \        }", "        if (arr.isEmpty) None\n        else {\n            var sum\
    \ = 0l\n            var prod = 1l\n            for (i <- arr) {\n            \
    \    if (i > 0) sum += i\n                else if (i < 0) {\n                \
    \    sum += -i\n                    prod *= -1\n                }\n          \
    \  }\n            Some(sum * prod)\n        }"]
stop_tokens:
- "\n    }\n"
